{"task": "Sudoku", "blocks": [{"lang": "Ada", "loc": 110, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Sudoku <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> sudoku_ar_t <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span> integer <span class=\"kw3\">range</span> <span class=\"nu0\">0</span>..<span class=\"nu0\">80</span> <span class=\"br0\">)</span> <span class=\"kw3\">of</span> integer <span class=\"kw3\">range</span> <span class=\"nu0\">0</span>..<span class=\"nu0\">9</span>;<br/>   FINISH_EXCEPTION\u00a0: <span class=\"kw1\">exception</span>;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> prettyprint<span class=\"br0\">(</span>sudoku_ar: sudoku_ar_t<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">function</span> checkValidity<span class=\"br0\">(</span> val\u00a0: integer; x\u00a0: integer; y\u00a0: integer;  sudoku_ar: <span class=\"kw3\">in</span>  sudoku_ar_t<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean;<br/>   <span class=\"kw3\">procedure</span> placeNumber<span class=\"br0\">(</span>pos: Integer; sudoku_ar: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> sudoku_ar_t<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">procedure</span> solve<span class=\"br0\">(</span>sudoku_ar: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> sudoku_ar_t<span class=\"br0\">)</span>;<br/>\u00a0<br/>\u00a0<br/>   <span class=\"kw3\">function</span> checkValidity<span class=\"br0\">(</span> val\u00a0: integer; x\u00a0: integer; y\u00a0: integer;  sudoku_ar: <span class=\"kw3\">in</span>  sudoku_ar_t<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean<br/>   <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> i <span class=\"kw3\">in</span> <span class=\"nu0\">0</span>..<span class=\"nu0\">8</span> <span class=\"kw1\">loop</span><br/>\u00a0<br/>         <span class=\"kw1\">if</span> <span class=\"br0\">(</span> sudoku_ar<span class=\"br0\">(</span> y * <span class=\"nu0\">9</span> + i <span class=\"br0\">)</span> = val <span class=\"kw2\">or</span> sudoku_ar<span class=\"br0\">(</span> i * <span class=\"nu0\">9</span> + x <span class=\"br0\">)</span> = val <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> False;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/>      <span class=\"kw1\">declare</span><br/>         startX\u00a0: <span class=\"kw3\">constant</span> integer\u00a0:= <span class=\"br0\">(</span> x / <span class=\"nu0\">3</span> <span class=\"br0\">)</span> * <span class=\"nu0\">3</span>;<br/>         startY\u00a0: <span class=\"kw3\">constant</span> integer\u00a0:= <span class=\"br0\">(</span> y / <span class=\"nu0\">3</span> <span class=\"br0\">)</span> * <span class=\"nu0\">3</span>;<br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">for</span> i <span class=\"kw3\">in</span> startY..<span class=\"me1\">startY</span>+<span class=\"nu0\">2</span> <span class=\"kw1\">loop</span><br/>            <span class=\"kw1\">for</span> j <span class=\"kw3\">in</span> startX..<span class=\"me1\">startX</span>+<span class=\"nu0\">2</span> <span class=\"kw1\">loop</span><br/>               <span class=\"kw1\">if</span> <span class=\"br0\">(</span> sudoku_ar<span class=\"br0\">(</span> i * <span class=\"nu0\">9</span> +j <span class=\"br0\">)</span> = val <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                  <span class=\"kw1\">return</span> False;<br/>               <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         <span class=\"kw1\">return</span> True;<br/>      <span class=\"kw1\">end</span>;<br/>   <span class=\"kw1\">end</span> checkValidity;<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> placeNumber<span class=\"br0\">(</span>pos: Integer; sudoku_ar: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> sudoku_ar_t<span class=\"br0\">)</span><br/>   <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> pos = <span class=\"nu0\">81</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw3\">raise</span> FINISH_EXCEPTION;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>  sudoku_ar<span class=\"br0\">(</span>pos<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         placeNumber<span class=\"br0\">(</span>pos+<span class=\"nu0\">1</span>, sudoku_ar<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">return</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">for</span> n <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">9</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span><span class=\"br0\">(</span> checkValidity<span class=\"br0\">(</span> n,  pos <span class=\"kw2\">mod</span> <span class=\"nu0\">9</span>, pos / <span class=\"nu0\">9</span> , sudoku_ar <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            sudoku_ar<span class=\"br0\">(</span>pos<span class=\"br0\">)</span>\u00a0:= n;<br/>            placeNumber<span class=\"br0\">(</span>pos + <span class=\"nu0\">1</span>, sudoku_ar <span class=\"br0\">)</span>;<br/>            sudoku_ar<span class=\"br0\">(</span>pos<span class=\"br0\">)</span>\u00a0:= <span class=\"nu0\">0</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> placeNumber;<br/>\u00a0<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> solve<span class=\"br0\">(</span>sudoku_ar: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> sudoku_ar_t<span class=\"br0\">)</span><br/>   <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      placeNumber<span class=\"br0\">(</span> <span class=\"nu0\">0</span>, sudoku_ar <span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Unresolvable\u00a0!\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">exception</span><br/>      <span class=\"kw3\">when</span> FINISH_EXCEPTION =&gt;<br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Finished\u00a0!\"</span><span class=\"br0\">)</span>;<br/>         prettyprint<span class=\"br0\">(</span>sudoku_ar<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> solve;<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> prettyprint<span class=\"br0\">(</span>sudoku_ar: sudoku_ar_t<span class=\"br0\">)</span><br/>   <span class=\"kw1\">is</span><br/>      line_sep  \u00a0: <span class=\"kw3\">constant</span> String \u00a0:= <span class=\"st0\">\"------+------+------\"</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> i <span class=\"kw3\">in</span> sudoku_ar'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>sudoku_ar<span class=\"br0\">(</span>i<span class=\"br0\">)</span>'Image<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">mod</span> <span class=\"nu0\">3</span> = <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> <span class=\"kw2\">not</span><span class=\"br0\">(</span><span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">mod</span> <span class=\"nu0\">9</span> = <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">mod</span> <span class=\"nu0\">9</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">mod</span> <span class=\"nu0\">27</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>line_sep<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> prettyprint;<br/>\u00a0<br/>\u00a0<br/>   sudoku_ar\u00a0: sudoku_ar_t\u00a0:=<br/>     <span class=\"br0\">(</span><br/>      <span class=\"nu0\">8</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<br/>      <span class=\"nu0\">7</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">9</span>,<br/>      <span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<br/>      <span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">2</span>,<br/>      <span class=\"nu0\">3</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">9</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<br/>      <span class=\"nu0\">0</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<br/>      <span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">0</span>,<br/>      <span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<br/>      <span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">0</span><br/>     <span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   solve<span class=\"br0\">(</span> sudoku_ar <span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Sudoku;<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 95, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> AVAIL <span class=\"sy1\">=</span> <span class=\"br0\">[</span>9<span class=\"br0\">]</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> BOX <span class=\"sy1\">=</span> <span class=\"br0\">[</span>3<span class=\"sy1\">,</span> 3<span class=\"br0\">]</span><span class=\"kw3\">CHAR</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw6\">FORMAT</span> row fmt <span class=\"sy1\">=</span> $<span class=\"st0\">\"|\"</span>3<span class=\"br0\">(</span><span class=\"st0\">\" \"</span>3<span class=\"br0\">(</span>g<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span>l$<span class=\"sy1\">;</span><br/><span class=\"kw6\">FORMAT</span> line <span class=\"sy1\">=</span> $<span class=\"st0\">\"+\"</span>3<span class=\"br0\">(</span>7<span class=\"st0\">\"-\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"+\"</span><span class=\"br0\">)</span>l$<span class=\"sy1\">;</span><br/><span class=\"kw6\">FORMAT</span> puzzle fmt <span class=\"sy1\">=</span> $f<span class=\"br0\">(</span>line<span class=\"br0\">)</span>3<span class=\"br0\">(</span>3<span class=\"br0\">(</span>f<span class=\"br0\">(</span>row fmt<span class=\"br0\">)</span><span class=\"br0\">)</span>f<span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"br0\">)</span>$<span class=\"sy1\">;</span><br/>\u00a0<br/>AVAIL gen full <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> <span class=\"kw7\">TRUE</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> <span class=\"kw8\">REPR</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>AVAIL avail<span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"kw3\">STRING</span> out <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> avail <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> avail <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">IF</span> avail<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw2\">THEN</span> out <span class=\"sy1\">+:=</span> <span class=\"kw8\">REPR</span><span class=\"br0\">(</span><span class=\"kw8\">ABS</span> <span class=\"st0\">\"0\"</span> <span class=\"sy1\">+</span> i<span class=\"br0\">)</span> <span class=\"kw2\">FI</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  out<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw3\">CHAR</span> empty <span class=\"sy1\">=</span> <span class=\"st0\">\"_\"</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> <span class=\"sy1\">-:=</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> AVAIL set<span class=\"sy1\">,</span> <span class=\"kw3\">CHAR</span> index<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  set<span class=\"br0\">[</span><span class=\"kw8\">ABS</span> index <span class=\"sy1\">-</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">]</span><span class=\"sy1\">:=</span><span class=\"kw7\">FALSE</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">#  these two functions assume that the number has not already been found #</span><br/><span class=\"kw4\">PROC</span> avail slice <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">CHAR</span> slice<span class=\"sy1\">,</span> <span class=\"kw4\">REF</span> AVAIL available<span class=\"br0\">)</span><span class=\"kw4\">REF</span> AVAIL<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>        <span class=\"kw2\">FOR</span> ele <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> slice <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> slice <span class=\"kw2\">DO</span><br/>                <span class=\"kw2\">IF</span> slice<span class=\"br0\">[</span>ele<span class=\"br0\">]</span> <span class=\"sy1\">/=</span> empty <span class=\"kw2\">THEN</span> available<span class=\"sy1\">-:=</span>slice<span class=\"br0\">[</span>ele<span class=\"br0\">]</span> <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        available<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> avail box <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> <span class=\"kw4\">REF</span> AVAIL available<span class=\"br0\">)</span><span class=\"kw4\">REF</span> AVAIL<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>        <span class=\"coMULTI\">#  x designates row, y designates column #</span><br/>        <span class=\"coMULTI\">#  get a base index for the boxes #</span><br/>        <span class=\"kw3\">INT</span> bx <span class=\"sy1\">:=</span> x <span class=\"sy1\">-</span> <span class=\"br0\">(</span>x<span class=\"sy1\">-</span>1<span class=\"br0\">)</span> <span class=\"kw12\">MOD</span> 3<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">INT</span> by <span class=\"sy1\">:=</span> y <span class=\"sy1\">-</span> <span class=\"br0\">(</span>y<span class=\"sy1\">-</span>1<span class=\"br0\">)</span> <span class=\"kw12\">MOD</span> 3<span class=\"sy1\">;</span><br/>        <span class=\"kw4\">REF</span> BOX box <span class=\"sy1\">=</span> puzzle<span class=\"br0\">[</span>bx<span class=\"sy1\">:</span>bx<span class=\"sy1\">+</span>2<span class=\"sy1\">,</span> by<span class=\"sy1\">:</span>by<span class=\"sy1\">+</span>2<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> box <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> box <span class=\"kw2\">DO</span><br/>          <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> 2 <span class=\"kw8\">LWB</span> box <span class=\"kw2\">TO</span> 2 <span class=\"kw8\">UPB</span> box <span class=\"kw2\">DO</span><br/>                <span class=\"kw2\">IF</span> box<span class=\"br0\">[</span>i<span class=\"sy1\">,</span> j<span class=\"br0\">]</span> <span class=\"sy1\">/=</span> empty <span class=\"kw2\">THEN</span> available<span class=\"sy1\">-:=</span>box<span class=\"br0\">[</span>i<span class=\"sy1\">,</span> j<span class=\"br0\">]</span> <span class=\"kw2\">FI</span><br/>          <span class=\"kw2\">OD</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        available<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"br0\">[</span>9<span class=\"sy1\">,</span> 9<span class=\"br0\">]</span><span class=\"kw3\">CHAR</span> puzzle<span class=\"sy1\">;</span><br/><span class=\"kw4\">PROC</span> solve <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">CHAR</span> in puzzle<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>        puzzle <span class=\"sy1\">:=</span> in puzzle<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> puzzle <span class=\"kw8\">UP</span> 2 <span class=\"kw2\">DO</span><br/>                <span class=\"kw3\">BOOL</span> done <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">;</span><br/>                <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> puzzle <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> puzzle <span class=\"kw2\">DO</span><br/>                  <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> 2 <span class=\"kw8\">LWB</span> puzzle <span class=\"kw2\">TO</span> 2 <span class=\"kw8\">UPB</span> puzzle <span class=\"kw2\">DO</span> <br/>                    <span class=\"kw3\">CHAR</span> ele <span class=\"sy1\">:=</span> puzzle<span class=\"br0\">[</span>i<span class=\"sy1\">,</span> j<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                    <span class=\"kw2\">IF</span> ele <span class=\"sy1\">=</span> empty <span class=\"kw2\">THEN</span><br/>                        <span class=\"coMULTI\">#  poke at the elements that are \"_\" #</span><br/>                        AVAIL remaining <span class=\"sy1\">:=</span> avail box<span class=\"br0\">(</span>i<span class=\"sy1\">,</span> j<span class=\"sy1\">,</span> <br/>                                           avail slice<span class=\"br0\">(</span>puzzle<span class=\"br0\">[</span>i<span class=\"sy1\">,</span> <span class=\"br0\">]</span><span class=\"sy1\">,</span> <br/>                                           avail slice<span class=\"br0\">(</span>puzzle<span class=\"br0\">[</span><span class=\"sy1\">,</span> j<span class=\"br0\">]</span><span class=\"sy1\">,</span> <br/>                                           <span class=\"kw4\">LOC</span> AVAIL <span class=\"sy1\">:=</span> gen full<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                        <span class=\"kw3\">STRING</span> s <span class=\"sy1\">=</span> <span class=\"kw8\">REPR</span> remaining<span class=\"sy1\">;</span><br/>                        <span class=\"kw2\">IF</span> <span class=\"kw8\">UPB</span> s <span class=\"sy1\">=</span> 1 <span class=\"kw2\">THEN</span> puzzle<span class=\"br0\">[</span>i<span class=\"sy1\">,</span> j<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> s<span class=\"br0\">[</span><span class=\"kw8\">LWB</span> s<span class=\"br0\">]</span><br/>                        <span class=\"kw2\">ELSE</span> done <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><br/>                        <span class=\"kw2\">FI</span><br/>                    <span class=\"kw2\">FI</span><br/>                  <span class=\"kw2\">OD</span><br/>                <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>                <span class=\"kw2\">IF</span> done <span class=\"kw2\">THEN</span> break <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>break<span class=\"sy1\">:</span><br/>        <span class=\"coMULTI\">#  write out completed puzzle #</span><br/>        <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$gl$<span class=\"sy1\">,</span> <span class=\"st0\">\"Completed puzzle:\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>puzzle fmt<span class=\"sy1\">,</span> puzzle<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>main<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>   solve<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"394__267_\"</span><span class=\"sy1\">,</span><br/>          <span class=\"st0\">\"___3__4__\"</span><span class=\"sy1\">,</span><br/>          <span class=\"st0\">\"5__69__2_\"</span><span class=\"sy1\">,</span><br/>          <span class=\"st0\">\"_45___9__\"</span><span class=\"sy1\">,</span><br/>          <span class=\"st0\">\"6_______7\"</span><span class=\"sy1\">,</span><br/>          <span class=\"st0\">\"__7___58_\"</span><span class=\"sy1\">,</span><br/>          <span class=\"st0\">\"_1__67__8\"</span><span class=\"sy1\">,</span><br/>          <span class=\"st0\">\"__9__8___\"</span><span class=\"sy1\">,</span><br/>          <span class=\"st0\">\"_264__735\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>CO <span class=\"coMULTI\"># note: This codes/algorithm does not [yet] solve: #</span><br/>   solve<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"9__2__5__\"</span><span class=\"sy1\">,</span><br/>          <span class=\"st0\">\"_4__6__3_\"</span><span class=\"sy1\">,</span><br/>          <span class=\"st0\">\"__3_____6\"</span><span class=\"sy1\">,</span><br/>          <span class=\"st0\">\"___9__2__\"</span><span class=\"sy1\">,</span><br/>          <span class=\"st0\">\"____5__8_\"</span><span class=\"sy1\">,</span><br/>          <span class=\"st0\">\"__7__4__3\"</span><span class=\"sy1\">,</span><br/>          <span class=\"st0\">\"7_____1__\"</span><span class=\"sy1\">,</span><br/>          <span class=\"st0\">\"_5__2__4_\"</span><span class=\"sy1\">,</span><br/>          <span class=\"st0\">\"__1__6__9\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">END</span> CO<br/><span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 144, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/_SingleInstance.htm\"><span class=\"kw5\">#SingleInstance</span></a><span class=\"sy0\">,</span> Force<br/><a href=\"http://www.autohotkey.com/docs/commands/SetBatchLines.htm\"><span class=\"kw3\">SetBatchLines</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/><a href=\"http://www.autohotkey.com/docs/commands/SetTitleMatchMode.htm\"><span class=\"kw3\">SetTitleMatchMode</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><br/>\u00a0<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">9</span> <span class=\"br0\">{</span><br/>       r <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> y <span class=\"sy0\">:=</span> r<span class=\"sy0\">*</span><span class=\"nu0\">17</span><span class=\"sy0\">-</span><span class=\"nu0\">8</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">7</span>\u00a0? <span class=\"nu0\">4</span>\u00a0: <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">4</span>\u00a0? <span class=\"nu0\">2</span>\u00a0: <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>       <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">9</span> <span class=\"br0\">{</span><br/>          c <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> x <span class=\"sy0\">:=</span> c<span class=\"sy0\">*</span><span class=\"nu0\">17</span><span class=\"sy0\">+</span><span class=\"nu0\">5</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">7</span>\u00a0? <span class=\"nu0\">4</span>\u00a0: <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">4</span>\u00a0? <span class=\"nu0\">2</span>\u00a0: <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>          <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Edit\"><span class=\"kw8\">Edit</span></a><span class=\"sy0\">,</span> x<span class=\"re0\">%x%</span> y<span class=\"re0\">%y%</span> w17 h17 v<span class=\"re0\">%r%</span>_<span class=\"re0\">%c%</span> Center Number Limit1 gNext<br/>       <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> vButton gSolve w175 x10 Center<span class=\"sy0\">,</span> Solve<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> vMsg r3<span class=\"sy0\">,</span> <span class=\"kw6\">Enter</span> Sudoku puzzle <span class=\"kw1\">and</span> <a href=\"http://www.autohotkey.com/docs/commands/Click.htm\"><span class=\"kw3\">click</span></a> Solve<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a><span class=\"sy0\">,,</span> Sudoku Solver<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"re2\">Solve:<br/></span>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Submit\"><span class=\"kw7\">Submit</span></a><span class=\"sy0\">,</span> NoHide<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">9</span><br/>    <span class=\"br0\">{</span><br/>       r <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>       <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">9</span><br/>          <span class=\"kw1\">If</span> <span class=\"br0\">(</span><span class=\"re0\">%r%</span>_<span class=\"re0\">%A_Index%</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>             puzzle <span class=\"sy0\">.=</span> <span class=\"st0\">\"@\"</span><br/>          <span class=\"kw1\">Else</span><br/>             puzzle <span class=\"sy0\">.=</span> <span class=\"re0\">%r%</span>_<span class=\"re0\">%A_Index%</span><br/>    <span class=\"br0\">}</span><br/>    s <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_TickCount\"><span class=\"kw2\">A_TickCount</span></a><br/>    answer <span class=\"sy0\">:=</span> Sudoku<span class=\"br0\">(</span>puzzle<span class=\"br0\">)</span><br/>    iterations <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#ErrorLevel\"><span class=\"kw2\">ErrorLevel</span></a><br/>    e <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_TickCount\"><span class=\"kw2\">A_TickCount</span></a><br/>    seconds <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>e<span class=\"sy0\">-</span>s<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">1000</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> answer<span class=\"sy0\">,</span> |<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">9</span><br/>    <span class=\"br0\">{</span><br/>       r <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>       <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">9</span><br/>       <span class=\"br0\">{</span><br/>          b <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>r<span class=\"sy0\">*</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">9</span><br/>          <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> <span class=\"re0\">%r%</span>_<span class=\"re0\">%A_Index%</span><span class=\"sy0\">,</span>\u00a0% a<span class=\"re0\">%b%</span><br/>          <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">+</span>ReadOnly<span class=\"sy0\">,</span> <span class=\"re0\">%r%</span>_<span class=\"re0\">%A_Index%</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> answer<br/>        <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Msg<span class=\"sy0\">,</span> Solved!`<span class=\"re2\">nTime: </span><span class=\"re0\">%seconds%</span>s`<span class=\"re2\">nIterations: </span><span class=\"re0\">%iterations%</span><br/>    <span class=\"kw1\">else</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Msg<span class=\"sy0\">,</span> Failed!\u00a0:<span class=\"br0\">(</span>`<span class=\"re2\">nTime: </span><span class=\"re0\">%seconds%</span>s`<span class=\"re2\">nIterations: </span><span class=\"re0\">%iterations%</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> Again!<br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">+</span>gAgain<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiClose\"><span class=\"kw7\">GuiClose</span></a>:<br/>    <a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/>\u00a0<br/><span class=\"re2\">Again:<br/></span>    <a href=\"http://www.autohotkey.com/docs/commands/Reload.htm\"><span class=\"kw3\">Reload</span></a><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/_IfWinActive.htm\"><span class=\"kw5\">#IfWinActive</span></a><span class=\"sy0\">,</span> Sudoku Solver<br/>~<span class=\"sy0\">*</span><span class=\"kw6\">Enter</span>::<a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">GoSub</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">GetKeyState</span></a><span class=\"br0\">(</span> <span class=\"st0\">\"Shift\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"P\"</span> <span class=\"br0\">)</span>\u00a0? <span class=\"st0\">\"~Up\"</span>\u00a0: <span class=\"st0\">\"~Down\"</span><br/>~<span class=\"kw6\">Up</span>::<br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControlGet.htm\"><span class=\"kw3\">GuiControlGet</span></a><span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> focus<br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringTrimLeft.htm\"><span class=\"kw3\">StringTrimLeft</span></a><span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/>    f <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>f <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> f <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span>\u00a0? f<span class=\"sy0\">+</span><span class=\"nu0\">72</span>\u00a0: f<span class=\"sy0\">-</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> Focus<span class=\"sy0\">,</span> Edit<span class=\"re0\">%f%</span><br/><span class=\"kw1\">return</span><br/>~<span class=\"kw6\">Down</span>::<br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControlGet.htm\"><span class=\"kw3\">GuiControlGet</span></a><span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> focus<br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringTrimLeft.htm\"><span class=\"kw3\">StringTrimLeft</span></a><span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/>    f <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>f <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">73</span> <span class=\"sy0\">&amp;&amp;</span> f <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">81</span><span class=\"br0\">)</span>\u00a0? f<span class=\"sy0\">-</span><span class=\"nu0\">72</span>\u00a0: f <span class=\"sy0\">+</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> Focus<span class=\"sy0\">,</span> Edit<span class=\"re0\">%f%</span><br/><span class=\"kw1\">return</span><br/>~<span class=\"kw6\">Left</span>::<br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControlGet.htm\"><span class=\"kw3\">GuiControlGet</span></a><span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> focus<br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringTrimLeft.htm\"><span class=\"kw3\">StringTrimLeft</span></a><span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/>    f <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>f <span class=\"sy0\">+</span> <span class=\"nu0\">79</span><span class=\"sy0\">,</span> <span class=\"nu0\">81</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> Focus<span class=\"sy0\">,</span> Edit<span class=\"re0\">%f%</span><br/><span class=\"kw1\">return</span><br/><span class=\"re2\">Next:<br/></span>~<span class=\"kw6\">Right</span>::<br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControlGet.htm\"><span class=\"kw3\">GuiControlGet</span></a><span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> focus<br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringTrimLeft.htm\"><span class=\"kw3\">StringTrimLeft</span></a><span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><br/>    f <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>f<span class=\"sy0\">,</span> <span class=\"nu0\">81</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> Focus<span class=\"sy0\">,</span> Edit<span class=\"re0\">%f%</span><br/><span class=\"kw1\">return</span><br/><a href=\"http://www.autohotkey.com/docs/commands/_IfWinActive.htm\"><span class=\"kw5\">#IfWinActive</span></a><br/>\u00a0<br/><span class=\"co1\">; Functions Start here</span><br/>\u00a0<br/>Sudoku<span class=\"br0\">(</span> p <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">;ErrorLevel contains the number of iterations</span><br/>   p <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"st0\">\"[^<a class=\"__cf_email__\" data-cfemail=\"2415091d64\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#ErrorLevel\"><span class=\"kw2\">ErrorLevel</span></a> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"co1\">;format puzzle as single line string</span><br/>   <span class=\"kw1\">return</span> Sudoku_Display<span class=\"br0\">(</span>Sudoku_Solve<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Sudoku_Solve<span class=\"br0\">(</span> p<span class=\"sy0\">,</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">;d is 0-based</span><br/><span class=\"co1\">;   http://www.autohotkey.com/forum/topic46679.html</span><br/><span class=\"co1\">;   p: 81 character puzzle string </span><br/><span class=\"co1\">;      (concat all 9 rows of 9 chars each)</span><br/><span class=\"co1\">;      givens represented as chars 1-9</span><br/><span class=\"co1\">;      fill-ins as any non-null, non 1-9 char</span><br/><span class=\"co1\">;   d: used internally. omit on initial call</span><br/><span class=\"co1\">;   </span><br/><span class=\"co1\">;   returns: 81 char string with non-givens replaced with valid solution</span><br/><span class=\"co1\">;   </span><br/>   <span class=\"kw1\">If</span> <span class=\"br0\">(</span>d <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">81</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#ErrorLevel\"><span class=\"kw2\">ErrorLevel</span></a><span class=\"sy0\">++</span><br/>      <span class=\"kw1\">return</span> p  <span class=\"co1\">;this is 82nd iteration, so it has successfully finished iteration 81</span><br/>   <span class=\"kw1\">If</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span> <span class=\"st0\">\"123456789\"</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> d<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"co1\">;this depth is a given, skip through</span><br/>      <span class=\"kw1\">return</span> Sudoku_Solve<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> d<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   m <span class=\"sy0\">:=</span> Sudoku_Constraints<span class=\"br0\">(</span>p<span class=\"sy0\">,</span>d<span class=\"br0\">)</span> <span class=\"co1\">;a string of this level's constraints. </span><br/>   <span class=\"co1\">; (these will not change for all 9 loops)</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">9</span><br/>   <span class=\"br0\">{</span><br/>      <span class=\"kw1\">If</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>m<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><br/>         <a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">Continue</span></a><br/>      <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Asc</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> <span class=\"st0\">\"Char\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> r <span class=\"sy0\">:=</span> Sudoku_Solve<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> d<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">return</span> r<br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Sudoku_Constraints<span class=\"br0\">(</span> ByRef p<span class=\"sy0\">,</span> d <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><span class=\"co1\">; returns a string of the constraints for a particular position</span><br/>     c <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>d<span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>   <span class=\"sy0\">,</span> r <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>d <span class=\"sy0\">-</span> c<span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"nu0\">9</span><br/>   <span class=\"sy0\">,</span> b <span class=\"sy0\">:=</span> r<span class=\"sy0\">//</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span><span class=\"nu0\">27</span> <span class=\"sy0\">+</span> c<span class=\"sy0\">//</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>   <span class=\"co1\">;convert to 1-based</span><br/>   <span class=\"sy0\">,</span> c<span class=\"sy0\">++</span><br/>   <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><br/>   <span class=\"co1\">; row:</span><br/>      <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> r <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>   <span class=\"co1\">; column: </span><br/>      <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">,</span>c   <span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">,</span>c<span class=\"sy0\">+</span><span class=\"nu0\">9</span> <span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">,</span>c<span class=\"sy0\">+</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">,</span>c<span class=\"sy0\">+</span><span class=\"nu0\">27</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">,</span>c<span class=\"sy0\">+</span><span class=\"nu0\">36</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">,</span>c<span class=\"sy0\">+</span><span class=\"nu0\">45</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">,</span>c<span class=\"sy0\">+</span><span class=\"nu0\">54</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">,</span>c<span class=\"sy0\">+</span><span class=\"nu0\">63</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">,</span>c<span class=\"sy0\">+</span><span class=\"nu0\">72</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   <span class=\"co1\">;box</span><br/>      <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> b<span class=\"sy0\">+</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> b<span class=\"sy0\">+</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <br/><span class=\"br0\">}</span><br/>\u00a0<br/>Sudoku_Display<span class=\"br0\">(</span> p <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">If</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">81</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a> <span class=\"nu0\">81</span><br/>         r <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"|\"</span><br/>   <span class=\"kw1\">return</span> r<br/><span class=\"br0\">}</span></pre>"}, {"lang": "BBC BASIC", "loc": 105, "block": "<pre class=\"text highlighted_source\">      VDU 23,22,453;453;8,20,16,128<br/>      *FONT Arial,28<br/>\u00a0<br/>      DIM Board%(8,8)<br/>      Board%() =\u00a0%111111111<br/>\u00a0<br/>      FOR L% = 0 TO 9:P% = L%*100<br/>        LINE 2,P%+2,902,P%+2<br/>        IF (L% MOD 3)=0 LINE 2,P%,902,P%\u00a0: LINE 2,P%+4,902,P%+4<br/>        LINE P%+2,2,P%+2,902<br/>        IF (L% MOD 3)=0 LINE P%,2,P%,902\u00a0: LINE P%+4,2,P%+4,902<br/>      NEXT<br/>\u00a0<br/>      DATA \"  4 5  6 \"<br/>      DATA \" 6 1  8 9\"<br/>      DATA \"3    7   \"<br/>      DATA \" 8    5  \"<br/>      DATA \"   4 3   \"<br/>      DATA \"  6    7 \"<br/>      DATA \"   2    6\"<br/>      DATA \"1 5  4 3 \"<br/>      DATA \" 2  7 1  \"<br/>\u00a0<br/>      FOR R% = 8 TO 0 STEP -1<br/>        READ A$<br/>        FOR C% = 0 TO 8<br/>          A% = ASCMID$(A$,C%+1) AND 15<br/>          IF A% Board%(R%,C%) = 1 &lt;&lt; (A%-1)<br/>        NEXT<br/>      NEXT R%<br/>\u00a0<br/>      GCOL 4<br/>      PROCshow<br/>      WAIT 200<br/>      dummy% = FNsolve(Board%(), TRUE)<br/>      GCOL 2<br/>      PROCshow<br/>      REPEAT WAIT 1\u00a0: UNTIL FALSE<br/>      END<br/>\u00a0<br/>      DEF PROCshow<br/>      LOCAL C%,P%,R%<br/>      FOR C% = 0 TO 8<br/>        FOR R% = 0 TO 8<br/>          P% = Board%(R%,C%)<br/>          IF (P% AND (P%-1)) = 0 THEN<br/>            IF P% P% = LOGP%/LOG2+1.5<br/>            MOVE C%*100+30,R%*100+90<br/>            VDU 5,P%+48,4<br/>          ENDIF<br/>        NEXT<br/>      NEXT<br/>      ENDPROC<br/>\u00a0<br/>      DEF FNsolve(P%(),F%)<br/>      LOCAL C%,D%,M%,N%,R%,X%,Y%,Q%()<br/>      DIM Q%(8,8)<br/>      REPEAT<br/>        Q%() = P%()<br/>        FOR R% = 0 TO 8<br/>          FOR C% = 0 TO 8<br/>            D% = P%(R%,C%)<br/>            IF (D% AND (D%-1))=0 THEN<br/>              M% = NOT D%<br/>              FOR X% = 0 TO 8<br/>                IF X%&lt;&gt;C% P%(R%,X%) AND= M%<br/>                IF X%&lt;&gt;R% P%(X%,C%) AND= M%<br/>              NEXT<br/>              FOR X% = C%DIV3*3 TO C%DIV3*3+2<br/>                FOR Y% = R%DIV3*3 TO R%DIV3*3+2<br/>                  IF X%&lt;&gt;C% IF Y%&lt;&gt;R% P%(Y%,X%) AND= M%<br/>                NEXT<br/>              NEXT<br/>            ENDIF<br/>          NEXT<br/>        NEXT<br/>        Q%() -= P%()<br/>      UNTIL SUMQ%()=0<br/>      M% = 10<br/>      FOR R% = 0 TO 8<br/>        FOR C% = 0 TO 8<br/>          D% = P%(R%,C%)<br/>          IF D%=0 M% = 0<br/>          IF D% AND (D%-1) THEN<br/>            N% = 0<br/>            REPEAT N% += D% AND 1<br/>              D% DIV= 2<br/>            UNTIL D% = 0<br/>            IF N%&lt;M% M% = N%\u00a0: X% = C%\u00a0: Y% = R%<br/>          ENDIF<br/>        NEXT<br/>      NEXT<br/>      IF M%=0 THEN = 0<br/>      IF M%=10 THEN = 1<br/>      D% = 0<br/>      FOR M% = 0 TO 8<br/>        IF P%(Y%,X%) AND (2^M%) THEN<br/>          Q%() = P%()<br/>          Q%(Y%,X%) = 2^M%<br/>          C% = FNsolve(Q%(),F%)<br/>          D% += C%<br/>          IF C% IF F% P%() = Q%()\u00a0: = D%<br/>        ENDIF<br/>      NEXT<br/>      = D%</pre>"}, {"lang": "BCPL", "loc": 388, "block": "<pre class=\"text highlighted_source\">// This can be run using Cintcode BCPL freely available from www.cl.cam.ac.uk/users/mr10.<br/>// Implemented by Martin Richards.<br/>\u00a0<br/>// This is a really naive program to solve SuDoku problems. Even so it is usually quite fast.<br/>\u00a0<br/>// SuDoku consists of a 9x9 grid of cells. Each cell should contain<br/>// a digit in the range 1..9. Every row, column and major 3x3<br/>// square should contain all the digits 1..9. Some cells have<br/>// given values. The problem is to find digits to place in<br/>// the unspecified cells satisfying the constraints.<br/>\u00a0<br/>// A typical problem is:<br/>\u00a0<br/>//  - - -   6 3 8   - - -<br/>//  7 - 6   - - -   3 - 5<br/>//  - 1 -   - - -   - 4 -<br/>\u00a0<br/>//  - - 8   7 1 2   4 - -<br/>//  - 9 -   - - -   - 5 -<br/>//  - - 2   5 6 9   1 - -<br/>\u00a0<br/>//  - 3 -   - - -   - 1 -<br/>//  1 - 5   - - -   6 - 8<br/>//  - - -   1 8 4   - - -<br/>\u00a0<br/>SECTION \"sudoku\"<br/>\u00a0<br/>GET \"libhdr\"<br/>\u00a0<br/>GLOBAL { count:ug<br/>\u00a0<br/>// The 9x9 board<br/>\u00a0<br/>a1; a2; a3; a4; a5; a6; a7; a8; a9<br/>b1; b2; b3; b4; b5; b6; b7; b8; b9<br/>c1; c2; c3; c4; c5; c6; c7; c8; c9<br/>d1; d2; d3; d4; d5; d6; d7; d8; d9<br/>e1; e2; e3; e4; e5; e6; e7; e8; e9<br/>f1; f2; f3; f4; f5; f6; f7; f8; f9<br/>g1; g2; g3; g4; g5; g6; g7; g8; g9<br/>h1; h2; h3; h4; h5; h6; h7; h8; h9<br/>i1; i2; i3; i4; i5; i6; i7; i8; i9<br/>}<br/>\u00a0<br/>MANIFEST {<br/>N1=1&lt;&lt;0; N2=1&lt;&lt;1; N3=1&lt;&lt;2;<br/>N4=1&lt;&lt;3; N5=1&lt;&lt;4; N6=1&lt;&lt;5;<br/>N7=1&lt;&lt;6; N8=1&lt;&lt;7; N9=1&lt;&lt;8<br/>}<br/>\u00a0<br/>LET start() = VALOF<br/>{ count\u00a0:= 0<br/>  initboard()<br/>  prboard()<br/>  ta1()<br/>  writef(\"*n*nTotal number of solutions:\u00a0%n*n\", count)<br/>  RESULTIS 0<br/>}<br/>\u00a0<br/>AND initboard() BE {<br/>a1, a2, a3, a4, a5, a6, a7, a8, a9\u00a0:=  0, 0, 0, N6,N3,N8,  0, 0, 0<br/>b1, b2, b3, b4, b5, b6, b7, b8, b9\u00a0:= N7, 0,N6,  0, 0, 0, N3, 0,N5<br/>c1, c2, c3, c4, c5, c6, c7, c8, c9\u00a0:=  0,N1, 0,  0, 0, 0,  0,N4, 0<br/>d1, d2, d3, d4, d5, d6, d7, d8, d9\u00a0:=  0, 0,N8, N7,N1,N2, N4, 0, 0<br/>e1, e2, e3, e4, e5, e6, e7, e8, e9\u00a0:=  0,N9, 0,  0, 0, 0,  0,N5, 0<br/>f1, f2, f3, f4, f5, f6, f7, f8, f9\u00a0:=  0, 0,N2, N5,N6,N9, N1, 0, 0<br/>g1, g2, g3, g4, g5, g6, g7, g8, g9\u00a0:=  0,N3, 0,  0, 0, 0,  0,N1, 0<br/>h1, h2, h3, h4, h5, h6, h7, h8, h9\u00a0:= N1, 0,N5,  0, 0, 0, N6, 0,N8<br/>i1, i2, i3, i4, i5, i6, i7, i8, i9\u00a0:=  0, 0, 0, N1,N8,N4,  0, 0, 0<br/>\u00a0<br/>// Un-comment the following to test that the backtracking works<br/>// giving 184 solutions.<br/>//h1, h2, h3, h4, h5, h6, h7, h8, h9\u00a0:= N1, 0,N5,  0, 0, 0, N6, 0, 0<br/>//i1, i2, i3, i4, i5, i6, i7, i8, i9\u00a0:=  0, 0, 0,  0, 0, 0,  0, 0, 0<br/>}<br/>\u00a0<br/>AND c(n) = VALOF SWITCHON n INTO<br/>{ DEFAULT:    RESULTIS '?'<br/>  CASE  0:    RESULTIS '-'<br/>  CASE N1:    RESULTIS '1'<br/>  CASE N2:    RESULTIS '2'<br/>  CASE N3:    RESULTIS '3'<br/>  CASE N4:    RESULTIS '4'<br/>  CASE N5:    RESULTIS '5'<br/>  CASE N6:    RESULTIS '6'<br/>  CASE N7:    RESULTIS '7'<br/>  CASE N8:    RESULTIS '8'<br/>  CASE N9:    RESULTIS '9'<br/>}<br/>\u00a0<br/>AND prboard() BE<br/>{ LET form = \"%c\u00a0%c\u00a0%c  \u00a0%c\u00a0%c\u00a0%c  \u00a0%c\u00a0%c\u00a0%c*n\"<br/>  writef(\"*ncount =\u00a0%n*n\", count)<br/>  newline()<br/>  writef(form, c(a1),c(a2),c(a3),c(a4),c(a5),c(a6),c(a7),c(a8),c(a9))<br/>  writef(form, c(b1),c(b2),c(b3),c(b4),c(b5),c(b6),c(b7),c(b8),c(b9))<br/>  writef(form, c(c1),c(c2),c(c3),c(c4),c(c5),c(c6),c(c7),c(c8),c(c9))<br/>  newline()<br/>  writef(form, c(d1),c(d2),c(d3),c(d4),c(d5),c(d6),c(d7),c(d8),c(d9))<br/>  writef(form, c(e1),c(e2),c(e3),c(e4),c(e5),c(e6),c(e7),c(e8),c(e9))<br/>  writef(form, c(f1),c(f2),c(f3),c(f4),c(f5),c(f6),c(f7),c(f8),c(f9))<br/>  newline()<br/>  writef(form, c(g1),c(g2),c(g3),c(g4),c(g5),c(g6),c(g7),c(g8),c(g9))<br/>  writef(form, c(h1),c(h2),c(h3),c(h4),c(h5),c(h6),c(h7),c(h8),c(h9))<br/>  writef(form, c(i1),c(i2),c(i3),c(i4),c(i5),c(i6),c(i7),c(i8),c(i9))<br/>\u00a0<br/>  newline()<br/>\u00a0<br/>//abort(1000)<br/>}<br/>\u00a0<br/>AND try(p, f, row, col, sq) BE<br/>{ LET x =\u00a0!p<br/>  TEST x<br/>  THEN f()<br/>  ELSE { LET bits = row|col|sq<br/>//prboard()<br/>//              writef(\"x=%n\u00a0%b9*n\", x, bits)<br/>//abort(1000)<br/>         IF (N1&amp;bits)=0 DO {\u00a0!p:=N1; f() }<br/>         IF (N2&amp;bits)=0 DO {\u00a0!p:=N2; f() }<br/>         IF (N3&amp;bits)=0 DO {\u00a0!p:=N3; f() }<br/>         IF (N4&amp;bits)=0 DO {\u00a0!p:=N4; f() }<br/>         IF (N5&amp;bits)=0 DO {\u00a0!p:=N5; f() }<br/>         IF (N6&amp;bits)=0 DO {\u00a0!p:=N6; f() }<br/>         IF (N7&amp;bits)=0 DO {\u00a0!p:=N7; f() }<br/>         IF (N8&amp;bits)=0 DO {\u00a0!p:=N8; f() }<br/>         IF (N9&amp;bits)=0 DO {\u00a0!p:=N9; f() }<br/>        \u00a0!p\u00a0:= 0<br/>       }<br/>}<br/>\u00a0<br/>AND ta1() BE try(@a1, ta2, a1+a2+a3+a4+a5+a6+a7+a8+a9,<br/>                           a1+b1+c1+d1+e1+f1+g1+h1+i1,<br/>                           a1+a2+a3+b1+b2+b3+c1+c2+c3)<br/>AND ta2() BE try(@a2, ta3, a1+a2+a3+a4+a5+a6+a7+a8+a9,<br/>                           a2+b2+c2+d2+e2+f2+g2+h2+i2,<br/>                           a1+a2+a3+b1+b2+b3+c1+c2+c3)<br/>AND ta3() BE try(@a3, ta4, a1+a2+a3+a4+a5+a6+a7+a8+a9,<br/>                           a3+b3+c3+d3+e3+f3+g3+h3+i3,<br/>                           a1+a2+a3+b1+b2+b3+c1+c2+c3)<br/>AND ta4() BE try(@a4, ta5, a1+a2+a3+a4+a5+a6+a7+a8+a9,<br/>                           a4+b4+c4+d4+e4+f4+g4+h4+i4,<br/>                           a4+a5+a6+b4+b5+b6+c4+c5+c6)<br/>AND ta5() BE try(@a5, ta6, a1+a2+a3+a4+a5+a6+a7+a8+a9,<br/>                           a5+b5+c5+d5+e5+f5+g5+h5+i5,<br/>                           a4+a5+a6+b4+b5+b6+c4+c5+c6)<br/>AND ta6() BE try(@a6, ta7, a1+a2+a3+a4+a5+a6+a7+a8+a9,<br/>                           a6+b6+c6+d6+e6+f6+g6+h6+i6,<br/>                           a4+a5+a6+b4+b5+b6+c4+c5+c6)<br/>AND ta7() BE try(@a7, ta8, a1+a2+a3+a4+a5+a6+a7+a8+a9,<br/>                           a7+b7+c7+d7+e7+f7+g7+h7+i7,<br/>                           a7+a8+a9+b7+b8+b9+c7+c8+c9)<br/>AND ta8() BE try(@a8, ta9, a1+a2+a3+a4+a5+a6+a7+a8+a9,<br/>                           a8+b8+c8+d8+e8+f8+g8+h8+i8,<br/>                           a7+a8+a9+b7+b8+b9+c7+c8+c9)<br/>AND ta9() BE try(@a9, tb1, a1+a2+a3+a4+a5+a6+a7+a8+a9,<br/>                           a9+b9+c9+d9+e9+f9+g9+h9+i9,<br/>                           a7+a8+a9+b7+b8+b9+c7+c8+c9)<br/>\u00a0<br/>AND tb1() BE try(@b1, tb2, b1+b2+b3+b4+b5+b6+b7+b8+b9,<br/>                           a1+b1+c1+d1+e1+f1+g1+h1+i1,<br/>                           a1+a2+a3+b1+b2+b3+c1+c2+c3)<br/>AND tb2() BE try(@b2, tb3, b1+b2+b3+b4+b5+b6+b7+b8+b9,<br/>                           a2+b2+c2+d2+e2+f2+g2+h2+i2,<br/>                           a1+a2+a3+b1+b2+b3+c1+c2+c3)<br/>AND tb3() BE try(@b3, tb4, b1+b2+b3+b4+b5+b6+b7+b8+b9,<br/>                           a3+b3+c3+d3+e3+f3+g3+h3+i3,<br/>                           a1+a2+a3+b1+b2+b3+c1+c2+c3)<br/>AND tb4() BE try(@b4, tb5, b1+b2+b3+b4+b5+b6+b7+b8+b9,<br/>                           a4+b4+c4+d4+e4+f4+g4+h4+i4,<br/>                           a4+a5+a6+b4+b5+b6+c4+c5+c6)<br/>AND tb5() BE try(@b5, tb6, b1+b2+b3+b4+b5+b6+b7+b8+b9,<br/>                           a5+b5+c5+d5+e5+f5+g5+h5+i5,<br/>                           a4+a5+a6+b4+b5+b6+c4+c5+c6)<br/>AND tb6() BE try(@b6, tb7, b1+b2+b3+b4+b5+b6+b7+b8+b9,<br/>                           a6+b6+c6+d6+e6+f6+g6+h6+i6,<br/>                           a4+a5+a6+b4+b5+b6+c4+c5+c6)<br/>AND tb7() BE try(@b7, tb8, b1+b2+b3+b4+b5+b6+b7+b8+b9,<br/>                           a7+b7+c7+d7+e7+f7+g7+h7+i7,<br/>                           a7+a8+a9+b7+b8+b9+c7+c8+c9)<br/>AND tb8() BE try(@b8, tb9, b1+b2+b3+b4+b5+b6+b7+b8+b9,<br/>                           a8+b8+c8+d8+e8+f8+g8+h8+i8,<br/>                           a7+a8+a9+b7+b8+b9+c7+c8+c9)<br/>AND tb9() BE try(@b9, tc1, b1+b2+b3+b4+b5+b6+b7+b8+b9,<br/>                           a9+b9+c9+d9+e9+f9+g9+h9+i9,<br/>                           a7+a8+a9+b7+b8+b9+c7+c8+c9)<br/>\u00a0<br/>AND tc1() BE try(@c1, tc2, c1+c2+c3+c4+c5+c6+c7+c8+c9,<br/>                           a1+b1+c1+d1+e1+f1+g1+h1+i1,<br/>                           a1+a2+a3+b1+b2+b3+c1+c2+c3)<br/>AND tc2() BE try(@c2, tc3, c1+c2+c3+c4+c5+c6+c7+c8+c9,<br/>                           a2+b2+c2+d2+e2+f2+g2+h2+i2,<br/>                           a1+a2+a3+b1+b2+b3+c1+c2+c3)<br/>AND tc3() BE try(@c3, tc4, c1+c2+c3+c4+c5+c6+c7+c8+c9,<br/>                           a3+b3+c3+d3+e3+f3+g3+h3+i3,<br/>                           a1+a2+a3+b1+b2+b3+c1+c2+c3)<br/>AND tc4() BE try(@c4, tc5, c1+c2+c3+c4+c5+c6+c7+c8+c9,<br/>                           a4+b4+c4+d4+e4+f4+g4+h4+i4,<br/>                           a4+a5+a6+b4+b5+b6+c4+c5+c6)<br/>AND tc5() BE try(@c5, tc6, c1+c2+c3+c4+c5+c6+c7+c8+c9,<br/>                           a5+b5+c5+d5+e5+f5+g5+h5+i5,<br/>                           a4+a5+a6+b4+b5+b6+c4+c5+c6)<br/>AND tc6() BE try(@c6, tc7, c1+c2+c3+c4+c5+c6+c7+c8+c9,<br/>                           a6+b6+c6+d6+e6+f6+g6+h6+i6,<br/>                           a4+a5+a6+b4+b5+b6+c4+c5+c6)<br/>AND tc7() BE try(@c7, tc8, c1+c2+c3+c4+c5+c6+c7+c8+c9,<br/>                           a7+b7+c7+d7+e7+f7+g7+h7+i7,<br/>                           a7+a8+a9+b7+b8+b9+c7+c8+c9)<br/>AND tc8() BE try(@c8, tc9, c1+c2+c3+c4+c5+c6+c7+c8+c9,<br/>                           a8+b8+c8+d8+e8+f8+g8+h8+i8,<br/>                           a7+a8+a9+b7+b8+b9+c7+c8+c9)<br/>AND tc9() BE try(@c9, td1, c1+c2+c3+c4+c5+c6+c7+c8+c9,<br/>                           a9+b9+c9+d9+e9+f9+g9+h9+i9,<br/>                           a7+a8+a9+b7+b8+b9+c7+c8+c9)<br/>\u00a0<br/>AND td1() BE try(@d1, td2, d1+d2+d3+d4+d5+d6+d7+d8+d9,<br/>                           a1+b1+c1+d1+e1+f1+g1+h1+i1,<br/>                           d1+d2+d3+e1+e2+e3+f1+f2+f3)<br/>AND td2() BE try(@d2, td3, d1+d2+d3+d4+d5+d6+d7+d8+d9,<br/>                           a2+b2+c2+d2+e2+f2+g2+h2+i2,<br/>                           d1+d2+d3+e1+e2+e3+f1+f2+f3)<br/>AND td3() BE try(@d3, td4, d1+d2+d3+d4+d5+d6+d7+d8+d9,<br/>                           a3+b3+c3+d3+e3+f3+g3+h3+i3,<br/>                           d1+d2+d3+e1+e2+e3+f1+f2+f3)<br/>AND td4() BE try(@d4, td5, d1+d2+d3+d4+d5+d6+d7+d8+d9,<br/>                           a4+b4+c4+d4+e4+f4+g4+h4+i4,<br/>                           d4+d5+d6+e4+e5+e6+f4+f5+f6)<br/>AND td5() BE try(@d5, td6, d1+d2+d3+d4+d5+d6+d7+d8+d9,<br/>                           a5+b5+c5+d5+e5+f5+g5+h5+i5,<br/>                           d4+d5+d6+e4+e5+e6+f4+f5+f6)<br/>AND td6() BE try(@d6, td7, d1+d2+d3+d4+d5+d6+d7+d8+d9,<br/>                           a6+b6+c6+d6+e6+f6+g6+h6+i6,<br/>                           d4+d5+d6+e4+e5+e6+f4+f5+f6)<br/>AND td7() BE try(@d7, td8, d1+d2+d3+d4+d5+d6+d7+d8+d9,<br/>                           a7+b7+c7+d7+e7+f7+g7+h7+i7,<br/>                           d7+d8+d9+e7+e8+e9+f7+f8+f9)<br/>AND td8() BE try(@d8, td9, d1+d2+d3+d4+d5+d6+d7+d8+d9,<br/>                           a8+b8+c8+d8+e8+f8+g8+h8+i8,<br/>                           d7+d8+d9+e7+e8+e9+f7+f8+f9)<br/>AND td9() BE try(@d9, te1, d1+d2+d3+d4+d5+d6+d7+d8+d9,<br/>                           a9+b9+c9+d9+e9+f9+g9+h9+i9,<br/>                           d7+d8+d9+e7+e8+e9+f7+f8+f9)<br/>\u00a0<br/>AND te1() BE try(@e1, te2, e1+e2+e3+e4+e5+e6+e7+e8+e9,<br/>                           a1+b1+c1+d1+e1+f1+g1+h1+i1,<br/>                           d1+d2+d3+e1+e2+e3+f1+f2+f3)<br/>AND te2() BE try(@e2, te3, e1+e2+e3+e4+e5+e6+e7+e8+e9,<br/>                           a2+b2+c2+d2+e2+f2+g2+h2+i2,<br/>                           d1+d2+d3+e1+e2+e3+f1+f2+f3)<br/>AND te3() BE try(@e3, te4, e1+e2+e3+e4+e5+e6+e7+e8+e9,<br/>                           a3+b3+c3+d3+e3+f3+g3+h3+i3,<br/>                           d1+d2+d3+e1+e2+e3+f1+f2+f3)<br/>AND te4() BE try(@e4, te5, e1+e2+e3+e4+e5+e6+e7+e8+e9,<br/>                           a4+b4+c4+d4+e4+f4+g4+h4+i4,<br/>                           d4+d5+d6+e4+e5+e6+f4+f5+f6)<br/>AND te5() BE try(@e5, te6, e1+e2+e3+e4+e5+e6+e7+e8+e9,<br/>                           a5+b5+c5+d5+e5+f5+g5+h5+i5,<br/>                           d4+d5+d6+e4+e5+e6+f4+f5+f6)<br/>AND te6() BE try(@e6, te7, e1+e2+e3+e4+e5+e6+e7+e8+e9,<br/>                           a6+b6+c6+d6+e6+f6+g6+h6+i6,<br/>                           d4+d5+d6+e4+e5+e6+f4+f5+f6)<br/>AND te7() BE try(@e7, te8, e1+e2+e3+e4+e5+e6+e7+e8+e9,<br/>                           a7+b7+c7+d7+e7+f7+g7+h7+i7,<br/>                           d7+d8+d9+e7+e8+e9+f7+f8+f9)<br/>AND te8() BE try(@e8, te9, e1+e2+e3+e4+e5+e6+e7+e8+e9,<br/>                           a8+b8+c8+d8+e8+f8+g8+h8+i8,<br/>                           d7+d8+d9+e7+e8+e9+f7+f8+f9)<br/>AND te9() BE try(@e9, tf1, e1+e2+e3+e4+e5+e6+e7+e8+e9,<br/>                           a9+b9+c9+d9+e9+f9+g9+h9+i9,<br/>                           d7+d8+d9+e7+e8+e9+f7+f8+f9)<br/>\u00a0<br/>AND tf1() BE try(@f1, tf2, f1+f2+f3+f4+f5+f6+f7+f8+f9,<br/>                           a1+b1+c1+d1+e1+f1+g1+h1+i1,<br/>                           d1+d2+d3+e1+e2+e3+f1+f2+f3)<br/>AND tf2() BE try(@f2, tf3, f1+f2+f3+f4+f5+f6+f7+f8+f9,<br/>                           a2+b2+c2+d2+e2+f2+g2+h2+i2,<br/>                           d1+d2+d3+e1+e2+e3+f1+f2+f3)<br/>AND tf3() BE try(@f3, tf4, f1+f2+f3+f4+f5+f6+f7+f8+f9,<br/>                           a3+b3+c3+d3+e3+f3+g3+h3+i3,<br/>                           d1+d2+d3+e1+e2+e3+f1+f2+f3)<br/>AND tf4() BE try(@f4, tf5, f1+f2+f3+f4+f5+f6+f7+f8+f9,<br/>                           a4+b4+c4+d4+e4+f4+g4+h4+i4,<br/>                           d4+d5+d6+e4+e5+e6+f4+f5+f6)<br/>AND tf5() BE try(@f5, tf6, f1+f2+f3+f4+f5+f6+f7+f8+f9,<br/>                           a5+b5+c5+d5+e5+f5+g5+h5+i5,<br/>                           d4+d5+d6+e4+e5+e6+f4+f5+f6)<br/>AND tf6() BE try(@f6, tf7, f1+f2+f3+f4+f5+f6+f7+f8+f9,<br/>                           a6+b6+c6+d6+e6+f6+g6+h6+i6,<br/>                           d4+d5+d6+e4+e5+e6+f4+f5+f6)<br/>AND tf7() BE try(@f7, tf8, f1+f2+f3+f4+f5+f6+f7+f8+f9,<br/>                           a7+b7+c7+d7+e7+f7+g7+h7+i7,<br/>                           d7+d8+d9+e7+e8+e9+f7+f8+f9)<br/>AND tf8() BE try(@f8, tf9, f1+f2+f3+f4+f5+f6+f7+f8+f9,<br/>                           a8+b8+c8+d8+e8+f8+g8+h8+i8,<br/>                           d7+d8+d9+e7+e8+e9+f7+f8+f9)<br/>AND tf9() BE try(@f9, tg1, f1+f2+f3+f4+f5+f6+f7+f8+f9,<br/>                           a9+b9+c9+d9+e9+f9+g9+h9+i9,<br/>                           d7+d8+d9+e7+e8+e9+f7+f8+f9)<br/>\u00a0<br/>AND tg1() BE try(@g1, tg2, g1+g2+g3+g4+g5+g6+g7+g8+g9,<br/>                           a1+b1+c1+d1+e1+f1+g1+h1+i1,<br/>                           g1+g2+g3+h1+h2+h3+i1+i2+i3)<br/>AND tg2() BE try(@g2, tg3, g1+g2+g3+g4+g5+g6+g7+g8+g9,<br/>                           a2+b2+c2+d2+e2+f2+g2+h2+i2,<br/>                           g1+g2+g3+h1+h2+h3+i1+i2+i3)<br/>AND tg3() BE try(@g3, tg4, g1+g2+g3+g4+g5+g6+g7+g8+g9,<br/>                           a3+b3+c3+d3+e3+f3+g3+h3+i3,<br/>                           g1+g2+g3+h1+h2+h3+i1+i2+i3)<br/>AND tg4() BE try(@g4, tg5, g1+g2+g3+g4+g5+g6+g7+g8+g9,<br/>                           a4+b4+c4+d4+e4+f4+g4+h4+i4,<br/>                           g4+g5+g6+h4+h5+h6+i4+i5+i6)<br/>AND tg5() BE try(@g5, tg6, g1+g2+g3+g4+g5+g6+g7+g8+g9,<br/>                           a5+b5+c5+d5+e5+f5+g5+h5+i5,<br/>                           g4+g5+g6+h4+h5+h6+i4+i5+i6)<br/>AND tg6() BE try(@g6, tg7, g1+g2+g3+g4+g5+g6+g7+g8+g9,<br/>                           a6+b6+c6+d6+e6+f6+g6+h6+i6,<br/>                           g4+g5+g6+h4+h5+h6+i4+i5+i6)<br/>AND tg7() BE try(@g7, tg8, g1+g2+g3+g4+g5+g6+g7+g8+g9,<br/>                           a7+b7+c7+d7+e7+f7+g7+h7+i7,<br/>                           g7+g8+g9+h7+h8+h9+i7+i8+i9)<br/>AND tg8() BE try(@g8, tg9, g1+g2+g3+g4+g5+g6+g7+g8+g9,<br/>                           a8+b8+c8+d8+e8+f8+g8+h8+i8,<br/>                           g7+g8+g9+h7+h8+h9+i7+i8+i9)<br/>AND tg9() BE try(@g9, th1, g1+g2+g3+g4+g5+g6+g7+g8+g9,<br/>                           a9+b9+c9+d9+e9+f9+g9+h9+i9,<br/>                           g7+g8+g9+h7+h8+h9+i7+i8+i9)<br/>\u00a0<br/>AND th1() BE try(@h1, th2, h1+h2+h3+h4+h5+h6+h7+h8+h9,<br/>                           a1+b1+c1+d1+e1+f1+g1+h1+i1,<br/>                           g1+g2+g3+h1+h2+h3+i1+i2+i3)<br/>AND th2() BE try(@h2, th3, h1+h2+h3+h4+h5+h6+h7+h8+h9,<br/>                           a2+b2+c2+d2+e2+f2+g2+h2+i2,<br/>                           g1+g2+g3+h1+h2+h3+i1+i2+i3)<br/>AND th3() BE try(@h3, th4, h1+h2+h3+h4+h5+h6+h7+h8+h9,<br/>                           a3+b3+c3+d3+e3+f3+g3+h3+i3,<br/>                           g1+g2+g3+h1+h2+h3+i1+i2+i3)<br/>AND th4() BE try(@h4, th5, h1+h2+h3+h4+h5+h6+h7+h8+h9,<br/>                           a4+b4+c4+d4+e4+f4+g4+h4+i4,<br/>                           g4+g5+g6+h4+h5+h6+i4+i5+i6)<br/>AND th5() BE try(@h5, th6, h1+h2+h3+h4+h5+h6+h7+h8+h9,<br/>                           a5+b5+c5+d5+e5+f5+g5+h5+i5,<br/>                           g4+g5+g6+h4+h5+h6+i4+i5+i6)<br/>AND th6() BE try(@h6, th7, h1+h2+h3+h4+h5+h6+h7+h8+h9,<br/>                           a6+b6+c6+d6+e6+f6+g6+h6+i6,<br/>                           g4+g5+g6+h4+h5+h6+i4+i5+i6)<br/>AND th7() BE try(@h7, th8, h1+h2+h3+h4+h5+h6+h7+h8+h9,<br/>                           a7+b7+c7+d7+e7+f7+g7+h7+i7,<br/>                           g7+g8+g9+h7+h8+h9+i7+i8+i9)<br/>AND th8() BE try(@h8, th9, h1+h2+h3+h4+h5+h6+h7+h8+h9,<br/>                           a8+b8+c8+d8+e8+f8+g8+h8+i8,<br/>                           g7+g8+g9+h7+h8+h9+i7+i8+i9)<br/>AND th9() BE try(@h9, ti1, h1+h2+h3+h4+h5+h6+h7+h8+h9,<br/>                           a9+b9+c9+d9+e9+f9+g9+h9+i9,<br/>                           g7+g8+g9+h7+h8+h9+i7+i8+i9)<br/>\u00a0<br/>AND ti1() BE try(@i1, ti2, i1+i2+i3+i4+i5+i6+i7+i8+i9,<br/>                           a1+b1+c1+d1+e1+f1+g1+h1+i1,<br/>                           g1+g2+g3+h1+h2+h3+i1+i2+i3)<br/>AND ti2() BE try(@i2, ti3, i1+i2+i3+i4+i5+i6+i7+i8+i9,<br/>                           a2+b2+c2+d2+e2+f2+g2+h2+i2,<br/>                           g1+g2+g3+h1+h2+h3+i1+i2+i3)<br/>AND ti3() BE try(@i3, ti4, i1+i2+i3+i4+i5+i6+i7+i8+i9,<br/>                           a3+b3+c3+d3+e3+f3+g3+h3+i3,<br/>                           g1+g2+g3+h1+h2+h3+i1+i2+i3)<br/>AND ti4() BE try(@i4, ti5, i1+i2+i3+i4+i5+i6+i7+i8+i9,<br/>                           a4+b4+c4+d4+e4+f4+g4+h4+i4,<br/>                           g4+g5+g6+h4+h5+h6+i4+i5+i6)<br/>AND ti5() BE try(@i5, ti6, i1+i2+i3+i4+i5+i6+i7+i8+i9,<br/>                           a5+b5+c5+d5+e5+f5+g5+h5+i5,<br/>                           g4+g5+g6+h4+h5+h6+i4+i5+i6)<br/>AND ti6() BE try(@i6, ti7, i1+i2+i3+i4+i5+i6+i7+i8+i9,<br/>                           a6+b6+c6+d6+e6+f6+g6+h6+i6,<br/>                           g4+g5+g6+h4+h5+h6+i4+i5+i6)<br/>AND ti7() BE try(@i7, ti8, i1+i2+i3+i4+i5+i6+i7+i8+i9,<br/>                           a7+b7+c7+d7+e7+f7+g7+h7+i7,<br/>                           g7+g8+g9+h7+h8+h9+i7+i8+i9)<br/>AND ti8() BE try(@i8, ti9, i1+i2+i3+i4+i5+i6+i7+i8+i9,<br/>                           a8+b8+c8+d8+e8+f8+g8+h8+i8,<br/>                           g7+g8+g9+h7+h8+h9+i7+i8+i9)<br/>AND ti9() BE try(@i9, suc, i1+i2+i3+i4+i5+i6+i7+i8+i9,<br/>                           a9+b9+c9+d9+e9+f9+g9+h9+i9,<br/>                           g7+g8+g9+h7+h8+h9+i7+i8+i9)<br/>\u00a0<br/>AND suc() BE<br/>{ count\u00a0:= count + 1<br/>  prboard()<br/>}</pre>"}, {"lang": "Befunge", "loc": 8, "block": "<pre class=\"text highlighted_source\">99*&gt;1-:0&gt;:#$\"0\"\\# #~`#$_\"0\"-\\::9%:9+00p3/\\9/:99++10p3vv%2g\\g01&lt;<br/>2%v|:p+9/9\\%9:\\p\\g02\\1p\\g01\\1:p\\g00\\1:+8:\\p02+*93+*3/&lt;&gt;\\20g\\g#:<br/>v&lt;+&gt;:0\\`&gt;v &gt;\\::9%:9+00p3/\\9/:99++10p3/3*+39*+20p\\:8+::00g\\g2%\\^<br/>v^+^pppp$_:|v&lt;::&lt;_&gt;1-::9%\\9/9+g.::9%!\\3%+&gt;&gt;#v_&gt;\" \"v..v,&lt;&lt;&lt;+55&lt;&lt;<br/>03!$v9:_&gt;1v$&gt;9%\\v^|:&lt;_v#&lt;%&lt;9&lt;:&lt;&lt;_v#+%*93\\!::&lt;,,\"|\"&lt;\\/&gt;:#^_&gt;&gt;&gt;v^<br/>p|&lt;$0.0^!g+:#9/9&lt;^@ ^,&gt;#+5&lt;5_&gt;#!&lt;&gt;#$0\"------+-------+-----\":#&lt;^<br/>&lt;&gt;v$v1:::0&lt;&gt;\"P\"`!^&gt;0g#0v#p+9/9\\%9:p04:\\pg03g021pg03g011pg03g001<br/>::&gt;^_:#&lt;0#!:p#-\\#1:#g0&lt;&gt;30g010g30g020g30g040g:9%\\:9/9+\\01-\\1+0:</pre>"}, {"lang": "Bracmat", "loc": 189, "block": "<pre class=\"text highlighted_source\">{sudokuSolver.bra<br/>\u00a0<br/>Solves any 9x9 sudoku, using backtracking.<br/>Not a simple brute force algorithm!}<br/>\u00a0<br/>sudokuSolver=<br/>  ( sudoku<br/>  =   ( new<br/>      =   create<br/>        .   ( create<br/>            =   a<br/>              .    \u00a0!arg:%(&lt;3:?a)\u00a0?arg<br/>                  &amp;   (\u00a0!a<br/>                      .    \u00a0!arg:<br/>                          &amp; 1 2 3 4 5 6 7 8 9<br/>                        | create$!arg<br/>                      )<br/>                      create$(!a+1\u00a0!arg)<br/>                | <br/>            )<br/>          &amp; create$(0 0 0 0):?(its.Tree)<br/>          &amp; ( init<br/>            =   cell remainingCells remainingRows x y<br/>              .      \u00a0!arg<br/>                   \u00a0: (\u00a0?y<br/>                      .\u00a0?x<br/>                      . (.%?cell\u00a0?remainingCells)\u00a0?remainingRows<br/>                      )<br/>                  &amp;   (  \u00a0!cell:#<br/>                        &amp; (\u00a0!cell<br/>                          .   mod$(!x,3)<br/>                              div$(!x,3)<br/>                              mod$(!y,3)<br/>                              div$(!y,3)<br/>                          )<br/>                      | <br/>                      )<br/>                      (  \u00a0!remainingCells:<br/>                        &amp; init$(!y+1.0.!remainingRows)<br/>                      |   init<br/>                        $ (\u00a0!y<br/>                          .\u00a0!x+1<br/>                          . (.!remainingCells)\u00a0!remainingRows<br/>                          )<br/>                      )<br/>                | <br/>            )<br/>          &amp; out$!arg<br/>          &amp;   (its.Set)$(!(its.Tree).init$(0.0.!arg))<br/>           \u00a0:\u00a0?(its.Tree)<br/>      )<br/>      ( Display<br/>      =   val<br/>        .     put$(str$(\"|~~~|~~~|~~~|\" \\n))<br/>            &amp;  \u00a0!(its.Tree)<br/>             \u00a0:  \u00a0?<br/>                  (\u00a0?<br/>                  .    \u00a0?<br/>                        (\u00a0?&amp;put$\"|\"<br/>                        .    \u00a0?<br/>                              (\u00a0?<br/>                              .    \u00a0?<br/>                                    ( (\u00a0?<br/>                                      .    \u00a0?val<br/>                                          &amp;\u00a0!val:%\u00a0%<br/>                                          &amp; put$\"-\"<br/>                                        |  \u00a0!val:<br/>                                          &amp; put$\" \"<br/>                                        | put$!val<br/>                                      )<br/>                                    &amp; ~<br/>                                    )<br/>                                   \u00a0?<br/>                                |\u00a0?&amp;put$\"|\"&amp;~<br/>                              )<br/>                             \u00a0?<br/>                          |\u00a0?&amp;put$\\n&amp;~<br/>                        )<br/>                       \u00a0?<br/>                    |  \u00a0?<br/>                      &amp; put$(str$(\"|~~~|~~~|~~~|\" \\n))<br/>                      &amp; ~<br/>                  )<br/>                 \u00a0?<br/>          | <br/>      )<br/>      ( Set<br/>      =     update certainValue a b c d<br/>          , tree branch todo DOING loop dcba minlen len minp<br/>        .   ( update<br/>            =     path rempath value tr<br/>                , k z x y trc p v branch s n<br/>              .  \u00a0!arg:(?path.?value.?tr.?trc)<br/>                &amp; (  \u00a0!path:%?path\u00a0?rempath<br/>                    &amp; `(    \u00a0!tr<br/>                          \u00a0:\u00a0?k (!path:?p.?branch)\u00a0?z<br/>                         &amp; `(   update$(!rempath.!value.!branch.!p\u00a0!trc)<br/>                             \u00a0:\u00a0?s<br/>                            &amp;     update<br/>                                $ (!path\u00a0!rempath.!value.!z.!trc)<br/>                             \u00a0:\u00a0?n<br/>                            &amp;\u00a0!k (!p.!s)\u00a0!n<br/>                            )<br/>                       |\u00a0!tr<br/>                       )<br/>                  |\u00a0!DOING:(?.!trc)&amp;!value<br/>                  |  \u00a0!tr:?x\u00a0!value\u00a0?y<br/>                    &amp; `(\u00a0!x\u00a0!y<br/>                      \u00a0: (   ~:@<br/>                           &amp; (  \u00a0!todo:? (?v.!trc)\u00a0?<br/>                               &amp; (\u00a0!v:!x\u00a0!y<br/>                                 |     out<br/>                                     $ (mismatch v\u00a0!v \"&lt;&gt;\" x y\u00a0!x\u00a0!y)<br/>                                   &amp; get'<br/>                                 )<br/>                             | (!x\u00a0!y.!trc)\u00a0!todo:?todo<br/>                             )<br/>                         |\u00a0%\u00a0%<br/>                         | &amp;!DOING:(?.!trc)<br/>                         )<br/>                       )<br/>                  |\u00a0!tr<br/>                  )<br/>            )<br/>          &amp;\u00a0!arg:(?tree.?todo)<br/>          &amp; ( loop<br/>            =  \u00a0!todo:<br/>              |    \u00a0!todo<br/>                 \u00a0: ((?certainValue.%?d\u00a0%?c\u00a0%?b\u00a0%?a):?DOING)\u00a0?todo<br/>                &amp;   update$(!a\u00a0?\u00a0!c\u00a0?.!certainValue.!tree.)<br/>                 \u00a0:\u00a0?tree<br/>                &amp;   update$(!a\u00a0!b &lt;&gt;!c\u00a0?.!certainValue.!tree.)<br/>                 \u00a0:\u00a0?tree<br/>                &amp;   update$(&lt;&gt;!a\u00a0?\u00a0!c\u00a0!d.!certainValue.!tree.)<br/>                 \u00a0:\u00a0?tree<br/>                &amp;\u00a0!loop<br/>            )<br/>          &amp;\u00a0!loop<br/>          &amp; ( ~(\u00a0!tree<br/>              \u00a0:  \u00a0?<br/>                   (?.? (?.? (?.? (?.%\u00a0%)\u00a0?)\u00a0?)\u00a0?)<br/>                  \u00a0?<br/>               )<br/>            |   9:?minlen<br/>              &amp;\u00a0:?minp<br/>              &amp; ( len<br/>                =   <br/>                  .  \u00a0!arg:%\u00a0%?arg&amp;1+len$!arg<br/>                    | 1<br/>                )<br/>              &amp; (  \u00a0!tree<br/>                 \u00a0:  \u00a0?<br/>                      (\u00a0?a<br/>                      .  \u00a0?<br/>                          (\u00a0?b<br/>                          .  \u00a0?<br/>                              (\u00a0?c<br/>                              .  \u00a0?<br/>                                  (\u00a0?d<br/>                                  .  \u00a0%\u00a0%:?p<br/>                                    &amp; len$!p:&lt;!minlen:?minlen<br/>                                    &amp;\u00a0!d\u00a0!c\u00a0!b\u00a0!a:?dcba<br/>                                    &amp;\u00a0!p:?:?minp<br/>                                    &amp; ~<br/>                                  )<br/>                                 \u00a0?<br/>                              )<br/>                             \u00a0?<br/>                          )<br/>                         \u00a0?<br/>                      )<br/>                     \u00a0?<br/>                |  \u00a0!minp<br/>                 \u00a0:  \u00a0?<br/>                      (\u00a0%@?n<br/>                      &amp; (its.Set)$(!tree.!n.!dcba):?tree<br/>                      )<br/>                     \u00a0?<br/>                )<br/>            )<br/>          &amp;\u00a0!tree<br/>      )<br/>      (Tree=)<br/>  )<br/>  ( new<br/>  =   puzzle<br/>    .   new$((its.sudoku),!arg):?puzzle<br/>      &amp; (puzzle..Display)$<br/>  );</pre>"}, {"lang": "C", "loc": 67, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>x<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span>j <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"%2d\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"%3d\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span>x<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> trycell<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> pos<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> row <span class=\"sy0\">=</span> pos <span class=\"sy0\">/</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> col <span class=\"sy0\">=</span> pos <span class=\"sy0\">%</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> used <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">==</span> <span class=\"nu0\">81</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"br0\">[</span>pos<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> trycell<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tused <span class=\"sy0\">|=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>x<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> <span class=\"sy0\">+</span> col<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tused <span class=\"sy0\">|=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>x<span class=\"br0\">[</span>row <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> <span class=\"sy0\">+</span> j<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\trow <span class=\"sy0\">=</span> row <span class=\"sy0\">/</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\tcol <span class=\"sy0\">=</span> col <span class=\"sy0\">/</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> row<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> row <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> col<span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> col <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\tused <span class=\"sy0\">|=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>x<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> <span class=\"sy0\">+</span> j<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>x<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> x<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> x<span class=\"br0\">[</span>pos<span class=\"br0\">]</span><span class=\"sy0\">++,</span> used <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>used <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> trycell<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tx<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> solve<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> x<span class=\"br0\">[</span><span class=\"nu0\">81</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">81</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tx<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'1'</span> <span class=\"sy0\">&amp;&amp;</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'9'</span> <span class=\"sy0\">?</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"st0\">'0'</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>trycell<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\tshow<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">else</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\"no solution\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tsolve<span class=\"br0\">(</span>\t<span class=\"st0\">\"5x..7....\"</span><br/>\t\t<span class=\"st0\">\"6..195...\"</span><br/>\t\t<span class=\"st0\">\".98....6.\"</span><br/>\t\t<span class=\"st0\">\"8...6...3\"</span><br/>\t\t<span class=\"st0\">\"4..8.3..1\"</span><br/>\t\t<span class=\"st0\">\"7...2...6\"</span><br/>\t\t<span class=\"st0\">\".6....28.\"</span><br/>\t\t<span class=\"st0\">\"...419..5\"</span><br/>\t\t<span class=\"st0\">\"....8..79\"</span>\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 103, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> SudokuSolver<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> grid<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> SudokuSolver<span class=\"br0\">(</span><span class=\"kw4\">String</span> s<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        grid <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">81</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> s<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            grid<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">Parse</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> solve<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">try</span><br/>        <span class=\"br0\">{</span><br/>            placeNumber<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Unsolvable!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">catch</span> <span class=\"br0\">(</span>Exception ex<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>ex<span class=\"sy0\">.</span><span class=\"me1\">Message</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> placeNumber<span class=\"br0\">(</span><span class=\"kw4\">int</span> pos<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">==</span> <span class=\"nu0\">81</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Exception<span class=\"br0\">(</span><span class=\"st0\">\"Finished!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            placeNumber<span class=\"br0\">(</span>pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>checkValidity<span class=\"br0\">(</span>n, pos <span class=\"sy0\">%</span> <span class=\"nu0\">9</span>, pos <span class=\"sy0\">/</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>                placeNumber<span class=\"br0\">(</span>pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">bool</span> checkValidity<span class=\"br0\">(</span><span class=\"kw4\">int</span> val, <span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> <span class=\"sy0\">+</span> i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> val <span class=\"sy0\">||</span> grid<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> <span class=\"sy0\">+</span> x<span class=\"br0\">]</span> <span class=\"sy0\">==</span> val<span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw4\">int</span> startX <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> startY <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> startY<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> startY <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> startX<span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> startX <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> <span class=\"sy0\">+</span> j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> val<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">override</span> <span class=\"kw4\">string</span> ToString<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">string</span> sb <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                sb <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> <span class=\"sy0\">+</span> j<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> j <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>                    sb <span class=\"sy0\">+=</span> <span class=\"br0\">(</span><span class=\"st0\">\"| \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            sb <span class=\"sy0\">+=</span> <span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>                sb <span class=\"sy0\">+=</span> <span class=\"br0\">(</span><span class=\"st0\">\"------+-------+------<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> sb<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> SudokuSolver<span class=\"br0\">(</span><span class=\"st0\">\"850002400\"</span> <span class=\"sy0\">+</span><br/>                         <span class=\"st0\">\"720000009\"</span> <span class=\"sy0\">+</span><br/>                         <span class=\"st0\">\"004000000\"</span> <span class=\"sy0\">+</span><br/>                         <span class=\"st0\">\"000107002\"</span> <span class=\"sy0\">+</span><br/>                         <span class=\"st0\">\"305000900\"</span> <span class=\"sy0\">+</span><br/>                         <span class=\"st0\">\"040000000\"</span> <span class=\"sy0\">+</span><br/>                         <span class=\"st0\">\"000080070\"</span> <span class=\"sy0\">+</span><br/>                         <span class=\"st0\">\"017000000\"</span> <span class=\"sy0\">+</span><br/>                         <span class=\"st0\">\"000036040\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">solve</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">Read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 93, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> SudokuSolver <span class=\"br0\">{</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">int</span> grid<span class=\"br0\">[</span><span class=\"nu0\">81</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>\u00a0<br/>    SudokuSolver<span class=\"br0\">(</span>string s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> s.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            grid<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy2\">-</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> solve<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">try</span> <span class=\"br0\">{</span><br/>            placeNumber<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Unsolvable!\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy2\">*</span> ex<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> ex <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> this<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> placeNumber<span class=\"br0\">(</span><span class=\"kw4\">int</span> pos<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy1\">==</span> <span class=\"nu0\">81</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">throw</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy2\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Finished!\"</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            placeNumber<span class=\"br0\">(</span>pos <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> n <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">9</span><span class=\"sy4\">;</span> n<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>checkValidity<span class=\"br0\">(</span>n, pos <span class=\"sy2\">%</span> <span class=\"nu0\">9</span>, pos <span class=\"sy2\">/</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy1\">=</span> n<span class=\"sy4\">;</span><br/>                placeNumber<span class=\"br0\">(</span>pos <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> checkValidity<span class=\"br0\">(</span><span class=\"kw4\">int</span> val, <span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>y <span class=\"sy2\">*</span> <span class=\"nu0\">9</span> <span class=\"sy2\">+</span> i<span class=\"br0\">]</span> <span class=\"sy1\">==</span> val <span class=\"sy3\">||</span> grid<span class=\"br0\">[</span>i <span class=\"sy2\">*</span> <span class=\"nu0\">9</span> <span class=\"sy2\">+</span> x<span class=\"br0\">]</span> <span class=\"sy1\">==</span> val<span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw4\">int</span> startX <span class=\"sy1\">=</span> <span class=\"br0\">(</span>x <span class=\"sy2\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span><br/>        <span class=\"kw4\">int</span> startY <span class=\"sy1\">=</span> <span class=\"br0\">(</span>y <span class=\"sy2\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> startY<span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> startY <span class=\"sy2\">+</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> startX<span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> startX <span class=\"sy2\">+</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span> j<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>i <span class=\"sy2\">*</span> <span class=\"nu0\">9</span> <span class=\"sy2\">+</span> j<span class=\"br0\">]</span> <span class=\"sy1\">==</span> val<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    string toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        string sb<span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy4\">;</span> j<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">char</span> c<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>                c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> grid<span class=\"br0\">[</span>i <span class=\"sy2\">*</span> <span class=\"nu0\">9</span> <span class=\"sy2\">+</span> j<span class=\"br0\">]</span> <span class=\"sy2\">+</span> <span class=\"st0\">'0'</span><span class=\"sy4\">;</span><br/>                c<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy4\">;</span><br/>                sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy1\">==</span> <span class=\"nu0\">2</span> <span class=\"sy3\">||</span> j <span class=\"sy1\">==</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>                    sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"| \"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>            sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy1\">==</span> <span class=\"nu0\">2</span> <span class=\"sy3\">||</span> i <span class=\"sy1\">==</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>                sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"------+-------+------<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> sb<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    SudokuSolver ss<span class=\"br0\">(</span><br/>            <span class=\"br0\">(</span>string<span class=\"br0\">)</span> <span class=\"st0\">\"850002400\"</span> <span class=\"sy2\">+</span><br/>            <span class=\"br0\">(</span>string<span class=\"br0\">)</span> <span class=\"st0\">\"720000009\"</span> <span class=\"sy2\">+</span><br/>            <span class=\"br0\">(</span>string<span class=\"br0\">)</span> <span class=\"st0\">\"004000000\"</span> <span class=\"sy2\">+</span><br/>            <span class=\"br0\">(</span>string<span class=\"br0\">)</span> <span class=\"st0\">\"000107002\"</span> <span class=\"sy2\">+</span><br/>            <span class=\"br0\">(</span>string<span class=\"br0\">)</span> <span class=\"st0\">\"305000900\"</span> <span class=\"sy2\">+</span><br/>            <span class=\"br0\">(</span>string<span class=\"br0\">)</span> <span class=\"st0\">\"040000000\"</span> <span class=\"sy2\">+</span><br/>            <span class=\"br0\">(</span>string<span class=\"br0\">)</span> <span class=\"st0\">\"000080070\"</span> <span class=\"sy2\">+</span><br/>            <span class=\"br0\">(</span>string<span class=\"br0\">)</span> <span class=\"st0\">\"017000000\"</span> <span class=\"sy2\">+</span><br/>            <span class=\"br0\">(</span>string<span class=\"br0\">)</span> <span class=\"st0\">\"000036040\"</span><br/>            <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    ss.<span class=\"me1\">solve</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 24, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> rosettacode<span class=\"sy0\">.</span>sudoku<br/>  <span class=\"br0\">(</span>:<span class=\"me1\">use</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>pprint\u00a0:<span class=\"me1\">only</span> <span class=\"br0\">(</span>cl<span class=\"sy0\">-</span><span class=\"kw1\">format</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn-</span> compatible? <span class=\"br0\">[</span>m x y n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>n<span class=\"sy0\">=</span> #<span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"br0\">(</span>get<span class=\"sy0\">-</span>in m <span class=\"br0\">[</span><span class=\"sy0\">%</span>1 <span class=\"sy0\">%</span>2<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>n<span class=\"sy0\">=</span> y x<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>c <span class=\"br0\">(</span><span class=\"kw1\">count</span> m<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span>get<span class=\"sy0\">-</span>in m <span class=\"br0\">[</span>y x<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">not-any?</span> #<span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>n<span class=\"sy0\">=</span> y <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>n<span class=\"sy0\">=</span> <span class=\"sy0\">%</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>zx <span class=\"br0\">(</span><span class=\"sy0\">*</span> c <span class=\"br0\">(</span>quot x c<span class=\"br0\">)</span><span class=\"br0\">)</span>, zy <span class=\"br0\">(</span><span class=\"sy0\">*</span> c <span class=\"br0\">(</span>quot y c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">every?</span> false?<br/>                 <span class=\"br0\">(</span><span class=\"kw1\">map</span> n<span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> zy <span class=\"br0\">(</span><span class=\"sy0\">+</span> zy c<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> zx <span class=\"br0\">(</span><span class=\"sy0\">+</span> zx c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> solve <span class=\"br0\">[</span>m<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>c <span class=\"br0\">(</span><span class=\"kw1\">count</span> m<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>m m, x <span class=\"nu0\">0</span>, y <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> y c<span class=\"br0\">)</span> m<br/>        <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>ng <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">1</span> c<span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span><span class=\"kw1\">filter</span> #<span class=\"br0\">(</span>compatible? m x y <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                      <span class=\"kw1\">first</span><br/>                      <span class=\"br0\">(</span>assoc<span class=\"sy0\">-</span>in m <span class=\"br0\">[</span>y x<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"br0\">(</span><span class=\"kw1\">dec</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">recur</span> ng <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">recur</span> ng <span class=\"br0\">(</span><span class=\"kw1\">inc</span> x<span class=\"br0\">)</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 40, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> row-neighbors <span class=\"br0\">(</span>row column grid <span class=\"sy0\">&amp;</span>aux <span class=\"br0\">(</span>neighbors '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i <span class=\"nu0\">9</span> neighbors<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"br0\">(</span><span class=\"kw1\">aref</span> grid row i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>unless <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">eq</span> '_ x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> i column<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>push x neighbors<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> column-neighbors <span class=\"br0\">(</span>row column grid <span class=\"sy0\">&amp;</span>aux <span class=\"br0\">(</span>neighbors '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i <span class=\"nu0\">9</span> neighbors<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"br0\">(</span><span class=\"kw1\">aref</span> grid i column<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>unless <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">eq</span> x '_<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> i row<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>push x neighbors<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> square-neighbors <span class=\"br0\">(</span>row column grid <span class=\"sy0\">&amp;</span>aux <span class=\"br0\">(</span>neighbors '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>rmin <span class=\"br0\">(</span>* <span class=\"nu0\">3</span> <span class=\"br0\">(</span>floor row <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"br0\">(</span>rmax <span class=\"br0\">(</span>+ rmin <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>cmin <span class=\"br0\">(</span>* <span class=\"nu0\">3</span> <span class=\"br0\">(</span>floor column <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>cmax <span class=\"br0\">(</span>+ cmin <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>r rmin <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> r rmax<span class=\"br0\">)</span> neighbors<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>c cmin <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> c cmax<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"br0\">(</span><span class=\"kw1\">aref</span> grid r c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>unless <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">eq</span> x '_<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> r row<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> c column<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>push x neighbors<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> choices <span class=\"br0\">(</span>row column grid<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>nset-difference<br/>   <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">nconc</span> <span class=\"br0\">(</span>row-neighbors row column grid<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>column-neighbors row column grid<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>square-neighbors row column grid<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> solve <span class=\"br0\">(</span>grid <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>row <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>column <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> row <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>    grid<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> column <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>solve grid <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ row<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">eq</span> '_ <span class=\"br0\">(</span><span class=\"kw1\">aref</span> grid row column<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>solve grid row <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ column<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>t <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>choice <span class=\"br0\">(</span>choices row column grid<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> grid row column<span class=\"br0\">)</span> '_<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> grid row column<span class=\"br0\">)</span> choice<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">eq</span> grid <span class=\"br0\">(</span>solve grid row <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ column<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">return</span> grid<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Curry", "loc": 63, "block": "<pre class=\"text highlighted_source\">-----------------------------------------------------------------------------<br/>--- Solving Su Doku puzzles in Curry with FD constraints<br/>---<br/>--- @author Michael Hanus<br/>--- @version December 2005<br/>-----------------------------------------------------------------------------<br/>\u00a0<br/>import CLPFD<br/>import List<br/>\u00a0<br/>-- Solving a Su Doku puzzle represented as a matrix of numbers (possibly free<br/>-- variables):<br/>sudoku\u00a0:: [[Int]] -&gt; Success<br/>sudoku m =<br/> domain (concat m) 1 9 &amp;                         -- define domain of all digits<br/> foldr1 (&amp;) (map allDifferent m)  &amp;             -- all rows contain different digits<br/> foldr1 (&amp;) (map allDifferent (transpose m))  &amp; -- all columns have different digits<br/> foldr1 (&amp;) (map allDifferent (squaresOfNine m)) &amp; -- all 3x3 squares are different<br/> labeling [FirstFailConstrained] (concat m)<br/>\u00a0<br/>-- translate a matrix into a list of small 3x3 squares<br/>squaresOfNine\u00a0:: [[a]] -&gt; [[a]]<br/>squaresOfNine [] = []<br/>squaresOfNine (l1:l2:l3:ls) = group3Rows [l1,l2,l3] ++ squaresOfNine ls<br/>\u00a0<br/>group3Rows l123 = if null (head l123) then [] else<br/> concatMap (take 3) l123\u00a0: group3Rows (map (drop 3) l123)<br/>\u00a0<br/>-- read a Su Doku specification written as a list of strings containing digits<br/>-- and spaces<br/>readSudoku\u00a0:: [String] -&gt; [[Int]]<br/>readSudoku s = map (map transDigit) s<br/> where<br/>   transDigit c = if c==' ' then x else ord c - ord '0'<br/>      where x free<br/>\u00a0<br/>-- show a solved Su Doku matrix<br/>showSudoku\u00a0:: [[Int]] -&gt; String<br/>showSudoku = unlines . map (concatMap (\\i-&gt;[chr (i + ord '0'),' ']))<br/>\u00a0<br/>-- the main function, e.g., evaluate (main s1):<br/>main s | sudoku m = putStrLn (showSudoku m)<br/> where m = readSudoku s<br/>\u00a0<br/>s1 = [\"9  2  5  \",<br/>      \" 4  6  3 \",<br/>      \"  3     6\",<br/>      \"   9  2  \",<br/>      \"    5  8 \",<br/>      \"  7  4  3\",<br/>      \"7     1  \",<br/>      \" 5  2  4 \",<br/>      \"  1  6  9\"]<br/>\u00a0<br/>s2 = [\"819  5   \",<br/>      \"  2   75 \",<br/>      \" 371 4 6 \",<br/>      \"4  59 1  \",<br/>      \"7  3 8  2\",<br/>      \"  3 62  7\",<br/>      \" 5 7 921 \",<br/>      \" 64   9  \",<br/>      \"   2  438\"]</pre>"}, {"lang": "D", "loc": 127, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span><br/>       std.<span class=\"me1\">ascii</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> Digit <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">char</span> d<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">char</span> d_<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc<br/>    <span class=\"kw2\">in</span> <span class=\"br0\">{</span> <span class=\"kw2\">assert</span><span class=\"br0\">(</span>d_ <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'0'</span> <span class=\"sy0\">&amp;&amp;</span> d_ <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'9'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">body</span> <span class=\"br0\">{</span> <span class=\"kw2\">this</span>.<span class=\"me1\">d</span> <span class=\"sy0\">=</span> d_<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> d_<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc<br/>    <span class=\"kw2\">in</span> <span class=\"br0\">{</span> <span class=\"kw2\">assert</span><span class=\"br0\">(</span>d_ <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'0'</span> <span class=\"sy0\">&amp;&amp;</span> d_ <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'9'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">body</span> <span class=\"br0\">{</span> <span class=\"kw2\">this</span>.<span class=\"me1\">d</span> <span class=\"sy0\">=</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span>d_<span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"co1\">// Required cast.</span><br/>\u00a0<br/>    <span class=\"kw2\">alias</span> d <span class=\"kw2\">this</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> <span class=\"kw4\">size_t</span> sudokuUnitSide <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">enum</span> <span class=\"kw4\">size_t</span> sudokuSide <span class=\"sy0\">=</span> sudokuUnitSide <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"co1\">// Sudoku grid side.</span><br/><span class=\"kw2\">alias</span> SudokuTable <span class=\"sy0\">=</span> Digit<span class=\"br0\">[</span>sudokuSide <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>Nullable<span class=\"sy0\">!</span>SudokuTable sudokuSolver<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw2\">ref</span> SudokuTable problem<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">alias</span> Tgrid <span class=\"sy0\">=</span> <span class=\"kw4\">uint</span><span class=\"sy0\">;</span><br/>    Tgrid<span class=\"br0\">[</span>SudokuTable.<span class=\"me1\">length</span><span class=\"br0\">]</span> grid <span class=\"sy0\">=</span> <span class=\"kw4\">void</span><span class=\"sy0\">;</span><br/>    problem<span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span> c <span class=\"sy0\">-</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span>.<span class=\"me1\">copy</span><span class=\"br0\">(</span>grid<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// DMD doesn't inline this function. Performance loss.</span><br/>    Tgrid access<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> x<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> y<span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> grid<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> sudokuSide <span class=\"sy0\">+</span> x<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// DMD doesn't inline this function. If you want to retain</span><br/>    <span class=\"co1\">// the same performance as the C++ entry and you use the DMD</span><br/>    <span class=\"co1\">// compiler then this function must be manually inlined.</span><br/>    <span class=\"kw4\">bool</span> checkValidity<span class=\"br0\">(</span><span class=\"kw2\">in</span> Tgrid val<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> x<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> y<span class=\"br0\">)</span><br/>    <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"coMULTI\">/*static*/</span> <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> staticIota<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> sudokuSide<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>access<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">==</span> val <span class=\"sy0\">||</span> access<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> val<span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">immutable</span> startX <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x <span class=\"sy0\">/</span> sudokuUnitSide<span class=\"br0\">)</span> <span class=\"sy0\">*</span> sudokuUnitSide<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> startY <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y <span class=\"sy0\">/</span> sudokuUnitSide<span class=\"br0\">)</span> <span class=\"sy0\">*</span> sudokuUnitSide<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/*static*/</span> <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> staticIota<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> sudokuUnitSide<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"coMULTI\">/*static*/</span> <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">;</span> staticIota<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> sudokuUnitSide<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>access<span class=\"br0\">(</span>startX <span class=\"sy0\">+</span> j<span class=\"sy0\">,</span> startY <span class=\"sy0\">+</span> i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> val<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> canPlaceNumbers<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> pos<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">==</span> SudokuTable.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> canPlaceNumbers<span class=\"br0\">(</span>pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> n<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">sudokuSide</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>checkValidity<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> pos <span class=\"sy0\">%</span> sudokuSide<span class=\"sy0\">,</span> pos <span class=\"sy0\">/</span> sudokuSide<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>canPlaceNumbers<span class=\"br0\">(</span>pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>canPlaceNumbers<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">//return typeof(return)(grid[]</span><br/>        <span class=\"co1\">//                      .map!(c =&gt; Digit(c + '0'))</span><br/>        <span class=\"co1\">//                      .array);</span><br/>        <span class=\"kw4\">immutable</span> SudokuTable result <span class=\"sy0\">=</span> grid<span class=\"br0\">[</span><span class=\"br0\">]</span><br/>                                       .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span> Digit<span class=\"br0\">(</span>c <span class=\"sy0\">+</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                       .<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">string</span> representSudoku<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw2\">ref</span> SudokuTable sudo<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"kw2\">out</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>result.<span class=\"me1\">countchars</span><span class=\"br0\">(</span><span class=\"st0\">\"1-9\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> sudo<span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">count</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span>a <span class=\"sy0\">!=</span> <span class=\"st0\">'0'</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>result.<span class=\"me1\">countchars</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> sudo<span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">count</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span>a <span class=\"sy0\">==</span> <span class=\"st0\">'0'</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw2\">assert</span><span class=\"br0\">(</span>sudo.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">81</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"representSudoku works only with a 9x9 Sudoku.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">string</span> result<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">sudokuSide</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">sudokuSide</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            result <span class=\"sy0\">~=</span> sudo<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> sudokuSide <span class=\"sy0\">+</span> j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            result <span class=\"sy0\">~=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> j <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>                result <span class=\"sy0\">~=</span> <span class=\"st0\">\"| \"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        result <span class=\"sy0\">~=</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>            result <span class=\"sy0\">~=</span> <span class=\"st0\">\"------+-------+------<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> result.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> ValidateCells<span class=\"br0\">(</span><span class=\"kw4\">string</span> s<span class=\"br0\">)</span> <span class=\"sy0\">=</span> s.<span class=\"me1\">map</span><span class=\"sy0\">!</span>Digit.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> SudokuTable problem <span class=\"sy0\">=</span> ValidateCells<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"st0\">\"<br/>        850002400<br/>        720000009<br/>        004000000<br/>        000107002<br/>        305000900<br/>        040000000<br/>        000080070<br/>        017000000<br/>        000036040\"</span>.<span class=\"me1\">removechars</span><span class=\"br0\">(</span>whitespace<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    problem.<span class=\"me1\">representSudoku</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> solution <span class=\"sy0\">=</span> problem.<span class=\"me1\">sudokuSolver</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>solution.<span class=\"me1\">isNull</span><span class=\"br0\">)</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"Unsolvable!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span><br/>        solution.<span class=\"me1\">get</span>.<span class=\"me1\">representSudoku</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 125, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">type</span><br/>  TIntArray <span class=\"sy3\">=</span> <span class=\"kw1\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">{ TSudokuSolver }</span><br/>\u00a0<br/>  TSudokuSolver <span class=\"sy3\">=</span> <span class=\"kw1\">class</span><br/>  <span class=\"kw1\">private</span><br/>    FGrid<span class=\"sy1\">:</span> TIntArray<span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> CheckValidity<span class=\"br0\">(</span>val<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span> x<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span> y<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">function</span> ToString<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span> reintroduce<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">function</span> PlaceNumber<span class=\"br0\">(</span>pos<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">public</span><br/>    <span class=\"kw1\">constructor</span> Create<span class=\"br0\">(</span>s<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">procedure</span> Solve<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">implementation</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  Dialogs<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ TSudokuSolver }</span><br/>\u00a0<br/><span class=\"kw1\">function</span> TSudokuSolver<span class=\"sy1\">.</span><span class=\"me1\">CheckValidity</span><span class=\"br0\">(</span>val<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span> x<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span> y<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><br/>  <span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  j<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  StartX<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  StartY<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">8</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>FGrid<span class=\"br0\">[</span>y <span class=\"sy3\">*</span> <span class=\"nu0\">9</span> <span class=\"sy3\">+</span> i<span class=\"br0\">]</span> <span class=\"sy3\">=</span> val<span class=\"br0\">)</span> <span class=\"kw1\">or</span><br/>       <span class=\"br0\">(</span>FGrid<span class=\"br0\">[</span>i <span class=\"sy3\">*</span> <span class=\"nu0\">9</span> <span class=\"sy3\">+</span> x<span class=\"br0\">]</span> <span class=\"sy3\">=</span> val<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">False</span><span class=\"sy1\">;</span><br/>      Exit<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  StartX <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>x <span class=\"kw1\">div</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span><br/>  StartY <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>y <span class=\"kw1\">div</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> StartY <span class=\"kw1\">to</span> <span class=\"kw3\">Pred</span><span class=\"br0\">(</span>StartY <span class=\"sy3\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> StartX <span class=\"kw1\">to</span> <span class=\"kw3\">Pred</span><span class=\"br0\">(</span>StartX <span class=\"sy3\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> FGrid<span class=\"br0\">[</span>i <span class=\"sy3\">*</span> <span class=\"nu0\">9</span> <span class=\"sy3\">+</span> j<span class=\"br0\">]</span> <span class=\"sy3\">=</span> val <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">begin</span><br/>        Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">False</span><span class=\"sy1\">;</span><br/>        Exit<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">True</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> TSudokuSolver<span class=\"sy1\">.</span><span class=\"me1\">ToString</span><span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  sb<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  j<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  c<span class=\"sy1\">:</span> <span class=\"kw4\">char</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  sb <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">8</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">8</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">IntToStr</span><span class=\"br0\">(</span>FGrid<span class=\"br0\">[</span>i <span class=\"sy3\">*</span> <span class=\"nu0\">9</span> <span class=\"sy3\">+</span> j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      sb <span class=\"sy1\">:</span><span class=\"sy3\">=</span> sb <span class=\"sy3\">+</span> c <span class=\"sy3\">+</span> <span class=\"st0\">' '</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>j <span class=\"sy3\">=</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> sb <span class=\"sy1\">:</span><span class=\"sy3\">=</span> sb <span class=\"sy3\">+</span> <span class=\"st0\">'| '</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    sb <span class=\"sy1\">:</span><span class=\"sy3\">=</span> sb <span class=\"sy3\">+</span> <span class=\"re1\">#13</span><span class=\"re1\">#10</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>i <span class=\"sy3\">=</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      sb <span class=\"sy1\">:</span><span class=\"sy3\">=</span> sb <span class=\"sy3\">+</span> <span class=\"st0\">'-----+-----+-----'</span> <span class=\"sy3\">+</span> <span class=\"re1\">#13</span><span class=\"re1\">#10</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> sb<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> TSudokuSolver<span class=\"sy1\">.</span><span class=\"me1\">PlaceNumber</span><span class=\"br0\">(</span>pos<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  n<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">False</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> Pos <span class=\"sy3\">=</span> <span class=\"nu0\">81</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">begin</span><br/>    Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">True</span><span class=\"sy1\">;</span><br/>    Exit<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> FGrid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">begin</span><br/>    Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> PlaceNumber<span class=\"br0\">(</span><span class=\"kw3\">Succ</span><span class=\"br0\">(</span>pos<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    Exit<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">9</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">if</span> CheckValidity<span class=\"br0\">(</span>n<span class=\"sy1\">,</span> pos <span class=\"kw1\">mod</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span> pos <span class=\"kw1\">div</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      FGrid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy1\">;</span><br/>      Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> PlaceNumber<span class=\"br0\">(</span><span class=\"kw3\">Succ</span><span class=\"br0\">(</span>pos<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> Result <span class=\"kw1\">then</span><br/>        FGrid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">constructor</span> TSudokuSolver<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span>s<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  lcv<span class=\"sy1\">:</span> <span class=\"kw4\">Cardinal</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">SetLength</span><span class=\"br0\">(</span>FGrid<span class=\"sy1\">,</span> <span class=\"nu0\">81</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> lcv <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"kw3\">Pred</span><span class=\"br0\">(</span><span class=\"kw3\">Length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    FGrid<span class=\"br0\">[</span>lcv<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">StrToInt</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"kw3\">Succ</span><span class=\"br0\">(</span>lcv<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> TSudokuSolver<span class=\"sy1\">.</span><span class=\"me1\">Solve</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> PlaceNumber<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    ShowMessage<span class=\"br0\">(</span><span class=\"st0\">'Unsolvable'</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span><br/>    ShowMessage<span class=\"br0\">(</span><span class=\"st0\">'Solved!'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Elixir", "loc": 157, "block": "<pre class=\"text highlighted_source\">defmodule Sudoku do<br/>  def display( grid ), do: ( for y &lt;- 1..9, do: display_row(y, grid) )<br/>\u00a0<br/>  def start( knowns ), do: Enum.into( knowns, Map.new )<br/>\u00a0<br/>  def solve( grid ) do<br/>    sure = solve_all_sure( grid )<br/>    solve_unsure( potentials(sure), sure )<br/>  end<br/>\u00a0<br/>  def task( knowns ) do<br/>    IO.puts \"start\"<br/>    start = start( knowns )<br/>    display( start )<br/>    IO.puts \"solved\"<br/>    solved = solve( start )<br/>    display( solved )<br/>    IO.puts \"\"<br/>  end<br/>\u00a0<br/>  defp bt( grid ), do: bt_reject( is_not_allowed(grid), grid )<br/>\u00a0<br/>  defp bt_accept( true, board ), do: throw( {:ok, board} )<br/>  defp bt_accept( false, grid ), do: bt_loop( potentials_one_position(grid), grid )<br/>\u00a0<br/>  defp bt_loop( {position, values}, grid ), do: ( for x &lt;- values, do: bt( Map.put(grid, position, x) ) )<br/>\u00a0<br/>  defp bt_reject( true, _grid ), do:\u00a0:backtrack<br/>  defp bt_reject( false, grid ), do: bt_accept( is_all_correct(grid), grid )<br/>\u00a0<br/>  defp display_row( row, grid ) do<br/>    for x &lt;- [1, 4, 7], do: display_row_group( x, row, grid )<br/>    display_row_nl( row )<br/>  end<br/>\u00a0<br/>  defp display_row_group( start, row, grid ) do<br/>    Enum.each(start..start+2, &amp;IO.write \" #{Map.get( grid, {&amp;1, row}, \".\")}\")<br/>    IO.write \" \"<br/>  end<br/>\u00a0<br/>  defp display_row_nl( n ) when n in [3,6,9], do: IO.puts \"\\n\"<br/>  defp display_row_nl( _n ), do: IO.puts \"\"<br/>\u00a0<br/>  defp is_all_correct( grid ), do: map_size( grid ) == 81<br/>\u00a0<br/>  defp is_not_allowed( grid ) do<br/>    is_not_allowed_rows( grid ) or is_not_allowed_columns( grid ) or is_not_allowed_groups( grid )<br/>  end<br/>\u00a0<br/>  defp is_not_allowed_columns( grid ), do: values_all_columns(grid) |&gt; Enum.any?(&amp;is_not_allowed_values/1)<br/>\u00a0<br/>  defp is_not_allowed_groups( grid ),  do: values_all_groups(grid)  |&gt; Enum.any?(&amp;is_not_allowed_values/1)<br/>\u00a0<br/>  defp is_not_allowed_rows( grid ),    do: values_all_rows(grid)    |&gt; Enum.any?(&amp;is_not_allowed_values/1)<br/>\u00a0<br/>  defp is_not_allowed_values( values ), do: length( values )\u00a0!= length( Enum.uniq(values) )<br/>\u00a0<br/>  defp group_positions( {x, y} ) do<br/>    for colum &lt;- group_positions_close(x), row &lt;- group_positions_close(y), do: {colum, row}<br/>  end<br/>\u00a0<br/>  defp group_positions_close( n ) when n &lt; 4, do: [1,2,3]<br/>  defp group_positions_close( n ) when n &lt; 7, do: [4,5,6]<br/>  defp group_positions_close( _n )          , do: [7,8,9]<br/>\u00a0<br/>  defp positions_not_in_grid( grid ) do<br/>    keys = Map.keys( grid )<br/>    for x &lt;- 1..9, y &lt;- 1..9, not {x, y} in keys, do: {x, y}<br/>  end<br/>\u00a0<br/>  defp potentials_one_position( grid ) do<br/>    Enum.min_by( potentials( grid ), fn {_position, values} -&gt; length(values) end )<br/>  end<br/>\u00a0<br/>  defp potentials( grid ), do: List.flatten( for x &lt;- positions_not_in_grid(grid), do: potentials(x, grid) )<br/>\u00a0<br/>  defp potentials( position, grid ) do<br/>    useds = potentials_used_values( position, grid )<br/>    {position, Enum.to_list(1..9) -- useds }<br/>  end<br/>\u00a0<br/>  defp potentials_used_values( {x, y}, grid ) do<br/>    row_values    = (for row &lt;- 1..9, row\u00a0!= x, do: {row, y})          |&gt; potentials_values( grid )<br/>    column_values = (for column &lt;- 1..9, column\u00a0!= y, do: {x, column}) |&gt; potentials_values( grid )<br/>    group_values  = group_positions({x, y}) -- [ {x, y} ]              |&gt; potentials_values( grid )<br/>    row_values ++ column_values ++ group_values<br/>  end<br/>\u00a0<br/>  defp potentials_values( keys, grid ) do<br/>    for x &lt;- keys, val = grid[x], do: val<br/>  end<br/>\u00a0<br/>  defp values_all_columns( grid ) do<br/>    for x &lt;- 1..9, do:<br/>      ( for y &lt;- 1..9, do: {x, y} ) |&gt; potentials_values( grid )<br/>  end<br/>\u00a0<br/>  defp values_all_groups( grid ) do<br/>    [[g1,g2,g3], [g4,g5,g6], [g7,g8,g9]] = for x &lt;- [1,4,7], do: values_all_groups(x, grid)<br/>    [g1,g2,g3,g4,g5,g6,g7,g8,g9]<br/>  end<br/>\u00a0<br/>  defp values_all_groups( x, grid ) do<br/>    for x_offset &lt;- x..x+2, do: values_all_groups(x, x_offset, grid)<br/>  end<br/>\u00a0<br/>  defp values_all_groups( _x, x_offset, grid ) do<br/>    ( for y_offset &lt;- group_positions_close(x_offset), do: {x_offset, y_offset} )<br/>    |&gt; potentials_values( grid )<br/>  end<br/>\u00a0<br/>  defp values_all_rows( grid ) do<br/>    for y &lt;- 1..9, do:<br/>      ( for x &lt;- 1..9, do: {x, y} ) |&gt; potentials_values( grid )<br/>  end<br/>\u00a0<br/>  defp solve_all_sure( grid ), do: solve_all_sure( solve_all_sure_values(grid), grid )<br/>\u00a0<br/>  defp solve_all_sure( [], grid ), do: grid<br/>  defp solve_all_sure( sures, grid ) do<br/>    solve_all_sure( Enum.reduce(sures, grid, &amp;solve_all_sure_store/2) )<br/>  end<br/>\u00a0<br/>  defp solve_all_sure_values( grid ), do: (for{position, [value]} &lt;- potentials(grid), do: {position, value} )<br/>\u00a0<br/>  defp solve_all_sure_store( {position, value}, acc ), do: Map.put( acc, position, value )<br/>\u00a0<br/>  defp solve_unsure( [], grid ), do: grid<br/>  defp solve_unsure( _potentials, grid ) do<br/>    try do<br/>      bt( grid )<br/>    catch<br/>      {:ok, board} -&gt; board<br/>    end<br/>  end<br/>end<br/>\u00a0<br/>simple = [{{1, 1}, 3}, {{2, 1}, 9}, {{3, 1},4}, {{6, 1}, 2}, {{7, 1}, 6}, {{8, 1}, 7},<br/>          {{4, 2}, 3}, {{7, 2}, 4},<br/>          {{1, 3}, 5}, {{4, 3}, 6}, {{5, 3}, 9}, {{8, 3}, 2},<br/>          {{2, 4}, 4}, {{3, 4}, 5}, {{7, 4}, 9},<br/>          {{1, 5}, 6}, {{9, 5}, 7},<br/>          {{3, 6}, 7}, {{7, 6}, 5}, {{8, 6}, 8},<br/>          {{2, 7}, 1}, {{5, 7}, 6}, {{6, 7}, 7}, {{9, 7}, 8},<br/>          {{3, 8}, 9}, {{6, 8}, 8},<br/>          {{2, 9}, 2}, {{3, 9}, 6}, {{4, 9}, 4}, {{7, 9}, 7}, {{8, 9}, 3}, {{9, 9}, 5}]<br/>Sudoku.task( simple )<br/>\u00a0<br/>difficult = [{{6, 2}, 3}, {{8, 2}, 8}, {{9, 2}, 5},<br/>             {{3, 3}, 1}, {{5, 3}, 2},<br/>             {{4, 4}, 5}, {{6, 4}, 7},<br/>             {{3, 5}, 4}, {{7, 5}, 1},<br/>             {{2, 6}, 9},<br/>             {{1, 7}, 5}, {{8, 7}, 7}, {{9, 7}, 3},<br/>             {{3, 8}, 2}, {{5, 8}, 1},<br/>             {{5, 9}, 4}, {{9, 9}, 9}]<br/>Sudoku.task( difficult )</pre>"}, {"lang": "Erlang", "loc": 164, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> sudoku <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>display<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> start<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> solve<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">display</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re3\">display_row</span><span class=\"br0\">(</span><span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">Y</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/><span class=\"co1\">%% A known value is {{Column, Row}, Value}</span><br/><span class=\"co1\">%% Top left corner is {1, 1}, Bottom right corner is {9,9}</span><br/><span class=\"re3\">start</span><span class=\"br0\">(</span> <span class=\"re5\">Knowns</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">from_list</span><span class=\"br0\">(</span> <span class=\"re5\">Knowns</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">solve</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Sure</span> <span class=\"sy3\">=</span> <span class=\"re3\">solve_all_sure</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">solve_unsure</span><span class=\"br0\">(</span> <span class=\"re3\">potentials</span><span class=\"br0\">(</span><span class=\"re5\">Sure</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Sure</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Simple</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">task</span><span class=\"br0\">(</span> <span class=\"re5\">Simple</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Difficult</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">task</span><span class=\"br0\">(</span> <span class=\"re5\">Difficult</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">bt</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">bt_reject</span><span class=\"br0\">(</span> <span class=\"re3\">is_not_allowed</span><span class=\"br0\">(</span><span class=\"re5\">Grid</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">bt_accept</span><span class=\"br0\">(</span> true<span class=\"sy1\">,</span> <span class=\"re5\">Board</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">throw</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Board</span><span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">bt_accept</span><span class=\"br0\">(</span> false<span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">bt_loop</span><span class=\"br0\">(</span> <span class=\"re3\">potentials_one_position</span><span class=\"br0\">(</span><span class=\"re5\">Grid</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">bt_loop</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">Position</span><span class=\"sy1\">,</span> <span class=\"re5\">Values</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re3\">bt</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">store</span><span class=\"br0\">(</span><span class=\"re5\">Position</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Values</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">bt_reject</span><span class=\"br0\">(</span> true<span class=\"sy1\">,</span> <span class=\"re5\">_Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">backtrack</span><span class=\"sy1\">;</span><br/><span class=\"re3\">bt_reject</span><span class=\"br0\">(</span> false<span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">bt_accept</span><span class=\"br0\">(</span> <span class=\"re3\">is_all_correct</span><span class=\"br0\">(</span><span class=\"re5\">Grid</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">display_row</span><span class=\"br0\">(</span> <span class=\"re5\">Row</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">[</span><span class=\"re3\">display_row_group</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Row</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">display_row_nl</span><span class=\"br0\">(</span> <span class=\"re5\">Row</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">display_row_group</span><span class=\"br0\">(</span> <span class=\"re5\">Start</span><span class=\"sy1\">,</span> <span class=\"re5\">Row</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\" ~c\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re3\">display_value</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Row</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"br0\">[</span><span class=\"re5\">Start</span><span class=\"sy1\">,</span> <span class=\"re5\">Start</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Start</span><span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">display_row_nl</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span> <span class=\"re5\">N</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">6</span><span class=\"sy1\">;</span> <span class=\"re5\">N</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">9</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">nl</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">nl</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">display_row_nl</span><span class=\"br0\">(</span> <span class=\"re5\">_N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">nl</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">display_value</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">display_value</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">find</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">display_value</span><span class=\"br0\">(</span> error <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> $<span class=\"sy1\">.;</span><br/><span class=\"re3\">display_value</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Value</span> <span class=\"sy3\">+</span> <span class=\"re6\">$0</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_all_correct</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"kw3\">size</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">81</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_not_allowed</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re3\">is_not_allowed_rows</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">orelse</span> <span class=\"re3\">is_not_allowed_columns</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">orelse</span> <span class=\"re3\">is_not_allowed_groups</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_not_allowed_columns</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">any</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> is_not_allowed_values<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re3\">values_all_columns</span><span class=\"br0\">(</span><span class=\"re5\">Grid</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_not_allowed_groups</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">any</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> is_not_allowed_values<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re3\">values_all_groups</span><span class=\"br0\">(</span><span class=\"re5\">Grid</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_not_allowed_rows</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">any</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> is_not_allowed_values<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re3\">values_all_rows</span><span class=\"br0\">(</span><span class=\"re5\">Grid</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_not_allowed_values</span><span class=\"br0\">(</span> <span class=\"re5\">Values</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span> <span class=\"re5\">Values</span> <span class=\"br0\">)</span> <span class=\"sy3\">=/=</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">usort</span><span class=\"br0\">(</span><span class=\"re5\">Values</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">group_positions</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">Colum</span><span class=\"sy1\">,</span> <span class=\"re5\">Row</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">Colum</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">group_positions_close</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Row</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">group_positions_close</span><span class=\"br0\">(</span><span class=\"re5\">Y</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">group_positions_close</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">4</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">group_positions_close</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">7</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">group_positions_close</span><span class=\"br0\">(</span> <span class=\"re5\">_N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">positions_not_in_grid</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Keys</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">fetch_keys</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw2\">not</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">member</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Keys</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">potentials_one_position</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">_Shortest</span><span class=\"sy1\">,</span> <span class=\"re5\">Position</span><span class=\"sy1\">,</span> <span class=\"re5\">Values</span><span class=\"br0\">}</span> | <span class=\"re5\">_T</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sort</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">Values</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Position</span><span class=\"sy1\">,</span> <span class=\"re5\">Values</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">Position</span><span class=\"sy1\">,</span> <span class=\"re5\">Values</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">potentials</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">Position</span><span class=\"sy1\">,</span> <span class=\"re5\">Values</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">potentials</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">flatten</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">potentials</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span><span class=\"br0\">)</span>  <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">positions_not_in_grid</span><span class=\"br0\">(</span><span class=\"re5\">Grid</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">potentials</span><span class=\"br0\">(</span> <span class=\"re5\">Position</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Useds</span> <span class=\"sy3\">=</span> <span class=\"re3\">potentials_used_values</span><span class=\"br0\">(</span> <span class=\"re5\">Position</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">Position</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Value</span> <span class=\"sy3\">||</span> <span class=\"re5\">Value</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span> <span class=\"re5\">Useds</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">potentials_used_values</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Row_positions</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">Row</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">Row</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Row</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">X</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Row_values</span> <span class=\"sy3\">=</span> <span class=\"re3\">potentials_values</span><span class=\"br0\">(</span> <span class=\"re5\">Row_positions</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Column_positions</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Column</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">Column</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Column</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">Y</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Column_values</span> <span class=\"sy3\">=</span> <span class=\"re3\">potentials_values</span><span class=\"br0\">(</span> <span class=\"re5\">Column_positions</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Group_positions</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">delete</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re3\">group_positions</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Group_values</span> <span class=\"sy3\">=</span> <span class=\"re3\">potentials_values</span><span class=\"br0\">(</span> <span class=\"re5\">Group_positions</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Row_values</span> <span class=\"sy3\">++</span> <span class=\"re5\">Column_values</span> <span class=\"sy3\">++</span> <span class=\"re5\">Group_values</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">potentials_values</span><span class=\"br0\">(</span> <span class=\"re5\">Keys</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Row_values_unfiltered</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">find</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Keys</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">[</span><span class=\"re5\">Value</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Row_values_unfiltered</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">values_all_columns</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re3\">values_all_columns</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">values_all_columns</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Positions</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">Y</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">potentials_values</span><span class=\"br0\">(</span> <span class=\"re5\">Positions</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">values_all_groups</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">[</span><span class=\"re5\">G123</span><span class=\"sy1\">,</span> <span class=\"re5\">G456</span><span class=\"sy1\">,</span> <span class=\"re5\">G789</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re3\">values_all_groups</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">[</span><span class=\"re5\">G1</span><span class=\"sy1\">,</span><span class=\"re5\">G2</span><span class=\"sy1\">,</span><span class=\"re5\">G3</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"re5\">G123</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">[</span><span class=\"re5\">G4</span><span class=\"sy1\">,</span><span class=\"re5\">G5</span><span class=\"sy1\">,</span><span class=\"re5\">G6</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"re5\">G456</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">[</span><span class=\"re5\">G7</span><span class=\"sy1\">,</span><span class=\"re5\">G8</span><span class=\"sy1\">,</span><span class=\"re5\">G9</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"re5\">G789</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">[</span><span class=\"re5\">G1</span><span class=\"sy1\">,</span><span class=\"re5\">G2</span><span class=\"sy1\">,</span><span class=\"re5\">G3</span><span class=\"sy1\">,</span><span class=\"re5\">G4</span><span class=\"sy1\">,</span><span class=\"re5\">G5</span><span class=\"sy1\">,</span><span class=\"re5\">G6</span><span class=\"sy1\">,</span><span class=\"re5\">G7</span><span class=\"sy1\">,</span><span class=\"re5\">G8</span><span class=\"sy1\">,</span><span class=\"re5\">G9</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">values_all_groups</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><span class=\"br0\">[</span><span class=\"re3\">values_all_groups</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">X_offset</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X_offset</span> <span class=\"sy3\">&lt;-</span> <span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">values_all_groups</span><span class=\"br0\">(</span> <span class=\"re5\">_X</span><span class=\"sy1\">,</span> <span class=\"re5\">X_offset</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Positions</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">X_offset</span><span class=\"sy1\">,</span> <span class=\"re5\">Y_offset</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">Y_offset</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">group_positions_close</span><span class=\"br0\">(</span><span class=\"re5\">X_offset</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">potentials_values</span><span class=\"br0\">(</span> <span class=\"re5\">Positions</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">values_all_rows</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><span class=\"br0\">[</span><span class=\"re3\">values_all_rows</span><span class=\"br0\">(</span><span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">Y</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">values_all_rows</span><span class=\"br0\">(</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Positions</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">potentials_values</span><span class=\"br0\">(</span> <span class=\"re5\">Positions</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">solve_all_sure</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">solve_all_sure</span><span class=\"br0\">(</span> <span class=\"re3\">solve_all_sure_values</span><span class=\"br0\">(</span><span class=\"re5\">Grid</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">solve_all_sure</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Grid</span><span class=\"sy1\">;</span><br/><span class=\"re3\">solve_all_sure</span><span class=\"br0\">(</span> <span class=\"re5\">Sures</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">solve_all_sure</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> solve_all_sure_store<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span><span class=\"sy1\">,</span> <span class=\"re5\">Sures</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">solve_all_sure_values</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">Position</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">Position</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Value</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">potentials</span><span class=\"br0\">(</span><span class=\"re5\">Grid</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">solve_all_sure_store</span><span class=\"br0\">(</span> <span class=\"br0\">{</span><span class=\"re5\">Position</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">store</span><span class=\"br0\">(</span> <span class=\"re5\">Position</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">solve_unsure</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Grid</span><span class=\"sy1\">;</span><br/><span class=\"re3\">solve_unsure</span><span class=\"br0\">(</span> <span class=\"re5\">_Potentials</span><span class=\"sy1\">,</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">try</span><br/>    <span class=\"re3\">bt</span><span class=\"br0\">(</span> <span class=\"re5\">Grid</span> <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">catch</span><br/>    <span class=\"re5\">_</span>:<span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Board</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Board</span><br/>\u00a0<br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span> <span class=\"re5\">Knowns</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Start~n\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Start</span> <span class=\"sy3\">=</span> <span class=\"re3\">start</span><span class=\"br0\">(</span> <span class=\"re5\">Knowns</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">display</span><span class=\"br0\">(</span> <span class=\"re5\">Start</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Solved~n\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Solved</span> <span class=\"sy3\">=</span> <span class=\"re3\">solve</span><span class=\"br0\">(</span> <span class=\"re5\">Start</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">display</span><span class=\"br0\">(</span> <span class=\"re5\">Solved</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">nl</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 408, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>!--------------------------------------------------------------------<br/>! risolve Sudoku: in input il file SUDOKU.TXT<br/>! Metodo seguito\u00a0: cancellazioni successive e quando non possibile<br/>!                  ricerca combinatoria sulle celle con due valori<br/>!                  possibili - max. 30 livelli di ricorsione<br/>!                  Non risolve se,dopo l'analisi per la cancellazione,<br/>!                  restano solo celle a 4 valori<br/>!--------------------------------------------------------------------<br/>\u00a0<br/>PROGRAM SUDOKU<br/>\u00a0<br/>LABEL 76,77,88,91,97,99<br/>\u00a0<br/>DIM TAV$[9,9]            \u00a0! 81 caselle in nove quadranti<br/>                         \u00a0! cella non definita --&gt; 0/. nel file SUDOKU.TXT<br/>                         \u00a0! diventa 123456789 dopo LEGGI_SCHEMA<br/>\u00a0<br/>!---------------------------------------------------------------------------<br/>! tabelle per gestire la ricerca combinatoria<br/>! (primo indice--&gt; livelli ricorsione)<br/>!---------------------------------------------------------------------------<br/>DIM TAV2$[30,9,9],INFO[30,4]<br/>\u00a0<br/>!$INCLUDE=\"PC.LIB\"<br/>\u00a0<br/>PROCEDURE MESSAGGI(MEX%)<br/>     CASE MEX% OF<br/>       1-&gt; LOCATE(21,1) PRINT(\"Cancellazione successiva - liv. 1\") END -&gt;<br/>       2-&gt; LOCATE(21,1) PRINT(\"Cancellazione successiva - liv. 2\") END -&gt;<br/>       3-&gt; LOCATE(22,1) PRINT(\"Ricerca combinatoria - liv.\";LIVELLO;\"   \") END -&gt;<br/>     END CASE<br/>END PROCEDURE<br/>\u00a0<br/>PROCEDURE VISUALIZZA_SCHEMA<br/>   LOCATE(1,1)<br/>   PRINT(\"+---+---+---+---+---+---+---+---+----+\")<br/>   FOR I=1 TO 9 DO<br/>       FOR J=1 TO 9 DO<br/>            PRINT(\"|\";)<br/>            IF LEN(TAV$[I,J])=1 THEN<br/>                  PRINT(\" \";TAV$[I,J];\" \";)<br/>               ELSE<br/>                  PRINT(\"   \";)<br/>            END IF<br/>       END FOR<br/>       PRINT(\"\u00b3\")<br/>       IF I&lt;&gt;9 THEN PRINT(\"+---+---+---+---+---+---+---+---+----+\") END IF<br/>   END FOR<br/>   PRINT(\"+---+---+---+---+---+---+---+---+----+\")<br/>END PROCEDURE<br/>\u00a0<br/>!------------------------------------------------------------------------<br/>! in input  la cella (riga,colonna)<br/>! in output se ha un valore definito<br/>!------------------------------------------------------------------------<br/>PROCEDURE VALORE_DEFINITO<br/>   FLAG%=FALSE<br/>   IF LEN(TAV$[RIGA,COLONNA])=1 THEN FLAG%=TRUE END IF<br/>END PROCEDURE<br/>\u00a0<br/>\u00a0<br/>PROCEDURE SALVA_CONFIG<br/>     LIVELLO=LIVELLO+1<br/>     FOR R=1 TO 9 DO<br/>         FOR S=1 TO 9 DO<br/>             TAV2$[LIVELLO,R,S]=TAV$[R,S]<br/>         END FOR<br/>     END FOR<br/>     INFO[LIVELLO,0]=1 INFO[LIVELLO,1]=RIGA INFO[LIVELLO,2]=COLONNA<br/>     INFO[LIVELLO,3]=SECOND INFO[LIVELLO,4]=THIRD<br/>END PROCEDURE<br/>\u00a0<br/>PROCEDURE RIPRISTINA_CONFIG<br/>91:<br/>     LIVELLO=LIVELLO-1<br/>     IF INFO[LIVELLO,0]=3 THEN GOTO 91 END IF<br/>     FOR R=1 TO 9 DO<br/>         FOR S=1 TO 9 DO<br/>             TAV$[R,S]=TAV2$[LIVELLO,R,S]<br/>         END FOR<br/>     END FOR<br/>     RIGA=INFO[LIVELLO,1] COLONNA=INFO[LIVELLO,2]<br/>     SECOND=INFO[LIVELLO,3] THIRD=INFO[LIVELLO,4]<br/>     IF INFO[LIVELLO,0]=1 THEN<br/>         TAV$[RIGA,COLONNA]=MID$(STR$(SECOND),2)<br/>     END IF<br/>     IF INFO[LIVELLO,0]=2 THEN<br/>         IF THIRD&lt;&gt;0 THEN<br/>                TAV$[RIGA,COLONNA]=MID$(STR$(THIRD),2)<br/>            ELSE<br/>                GOTO 91<br/>         END IF<br/>     END IF<br/>     INFO[LIVELLO,0]=INFO[LIVELLO,0]+1<br/>     VISUALIZZA_SCHEMA<br/>END PROCEDURE<br/>\u00a0<br/>PROCEDURE VERIFICA_SE_FINITO<br/>    COMPLETO%=TRUE<br/>    FOR RIGA=1 TO 9 DO<br/>        PRD#=1<br/>        FOR COLONNA=1 TO 9 DO<br/>            PRD#=PRD#*VAL(TAV$[RIGA,COLONNA])<br/>        END FOR<br/>        IF PRD#&lt;&gt;362880 THEN COMPLETO%=FALSE EXIT END IF<br/>    END FOR<br/>    IF NOT COMPLETO% THEN EXIT PROCEDURE END IF<br/>    FOR COLONNA=1 TO 9 DO<br/>        PRD#=1<br/>        FOR RIGA=1 TO 9 DO<br/>            PRD#=PRD#*VAL(TAV$[RIGA,COLONNA])<br/>        END FOR<br/>        IF PRD#&lt;&gt;362880 THEN COMPLETO%=FALSE EXIT END IF<br/>    END FOR<br/>END PROCEDURE<br/>\u00a0<br/>!-------------------------------------------------------------------<br/>! toglie i valore certi dalle celle sulla<br/>! stessa riga-stessa colonna-stesso quadrante<br/>!-------------------------------------------------------------------<br/>PROCEDURE TOGLI_VALORE<br/>\u00a0<br/>!iniziamo a togliere il valore dalla stessa riga ....<br/>     FOR J=1 TO 9 DO<br/>         CH$=TAV$[RIGA,J] CH=VAL(Z$)<br/>         IF LEN(CH$)&lt;&gt;1 THEN<br/>            CHANGE(CH$,CH,\"-\"-&gt;CH$)<br/>            TAV$[RIGA,J]=CH$<br/>         END IF<br/>     END FOR<br/>!... iniziamo a togliere il valore dalla stessa colonna ...<br/>     FOR I=1 TO 9 DO<br/>         CH$=TAV$[I,COLONNA] CH=VAL(Z$)<br/>         IF LEN(CH$)&lt;&gt;1 THEN<br/>            CHANGE(CH$,CH,\"-\"-&gt;CH$)<br/>            TAV$[I,COLONNA]=CH$<br/>         END IF<br/>     END FOR<br/>!... iniziamo a togliere il valore dallo stesso quadrante<br/>     R=INT(RIGA/3.1)*3+1<br/>     S=INT(COLONNA/3.1)*3+1<br/>     FOR I=R TO R+2 DO<br/>        FOR J=S TO S+2 DO<br/>          CH$=TAV$[I,J] CH=VAL(Z$)<br/>          IF LEN(CH$)&lt;&gt;1 THEN<br/>             CHANGE(CH$,CH,\"-\"-&gt;CH$)<br/>             TAV$[I,J]=CH$<br/>          END IF<br/>        END FOR<br/>     END FOR<br/>     MESSAGGI(1)<br/>END PROCEDURE<br/>\u00a0<br/>PROCEDURE ESAMINA_SCHEMA<br/>     FOR RIGA=1 TO 9 DO<br/>        FOR COLONNA=1 TO 9 DO<br/>           VALORE_DEFINITO<br/>           IF FLAG% THEN<br/>               Z$=TAV$[RIGA,COLONNA]<br/>               TOGLI_VALORE<br/>           END IF<br/>        END FOR<br/>     END FOR<br/>END PROCEDURE<br/>\u00a0<br/>PROCEDURE IDENTIFICA_UNICO<br/>     FOR KL=1 TO 9 DO<br/>        KL$=MID$(STR$(KL),2)<br/>        NN=0<br/>        FOR H=1 TO LEN(ZZ$) DO<br/>           IF MID$(ZZ$,H,1)=KL$ THEN NN=NN+1 END IF<br/>        END FOR<br/>        IF NN=1 THEN Q=INSTR(ZZ$,KL$) KL=9 END IF<br/>     END FOR<br/>END PROCEDURE<br/>\u00a0<br/>!----------------------------------------------------------------------------<br/>! intercetta i valori unici per le celle ancora non definite<br/>!----------------------------------------------------------------------------<br/>PROCEDURE TOGLI_VALORE2<br/>\u00a0<br/>     MESSAGGI(2)<br/>! iniziamo dalle righe ....<br/>     OK%=FALSE<br/>     FOR RIGA=1 TO 9 DO<br/>        ZZ$=\"\"<br/>        FOR COLONNA=1 TO 9 DO<br/>            IF LEN(TAV$[RIGA,COLONNA])&lt;&gt;1 THEN<br/>                 ZZ$=ZZ$+TAV$[RIGA,COLONNA]<br/>              ELSE<br/>                 ZZ$=ZZ$+STRING$(9,\" \")<br/>            END IF<br/>        END FOR<br/>        Q=0 IDENTIFICA_UNICO<br/>        IF Q&lt;&gt;0 THEN<br/>            COLONNA=INT(Q/9.1)+1<br/>            TAV$[RIGA,COLONNA]=KL$<br/>            OK%=TRUE EXIT<br/>        END IF<br/>     END FOR<br/>     IF OK% THEN GOTO 76 END IF<br/>\u00a0<br/>! .... poi dalle colonne ....<br/>     FOR COLONNA=1 TO 9 DO<br/>        ZZ$=\"\"<br/>        FOR RIGA=1 TO 9 DO<br/>            IF LEN(TAV$[RIGA,COLONNA])&lt;&gt;1 THEN<br/>                ZZ$=ZZ$+TAV$[RIGA,COLONNA]<br/>              ELSE<br/>                ZZ$=ZZ$+STRING$(9,\" \")<br/>            END IF<br/>        END FOR<br/>        Q=0 IDENTIFICA_UNICO<br/>        IF Q&lt;&gt;0 THEN<br/>            RIGA=INT(Q/9.1)+1<br/>            TAV$[RIGA,COLONNA]=KL$ OK%=TRUE EXIT<br/>        END IF<br/>     END FOR<br/>     IF OK% THEN GOTO 76 END IF<br/>\u00a0<br/>!.... e infine i quadranti<br/>     FOR QUADRANTE=1 TO 9 DO<br/>         ZZ$=\"\"<br/>         CASE QUADRANTE OF<br/>           1-&gt; R=1 S=1 END -&gt;<br/>           2-&gt; R=1 S=4 END -&gt;<br/>           3-&gt; R=1 S=7 END -&gt;<br/>           4-&gt; R=4 S=1 END -&gt;<br/>           5-&gt; R=4 S=4 END -&gt;<br/>           6-&gt; R=4 S=7 END -&gt;<br/>           7-&gt; R=7 S=1 END -&gt;<br/>           8-&gt; R=7 S=4 END -&gt;<br/>           9-&gt; R=7 S=7 END -&gt;<br/>         END CASE<br/>         FOR RIGA=R TO R+2 DO<br/>            FOR COLONNA=S TO S+2 DO<br/>                IF LEN(TAV$[RIGA,COLONNA])&lt;&gt;1 THEN<br/>                    ZZ$=ZZ$+TAV$[RIGA,COLONNA]<br/>                  ELSE<br/>                    ZZ$=ZZ$+STRING$(9,\" \")<br/>                END IF<br/>            END FOR<br/>         END FOR<br/>         Q=0 IDENTIFICA_UNICO<br/>         IF Q&lt;&gt;0 THEN<br/>            CASE Q OF<br/>              1..9-&gt;   ALFA=R   BETA=S   END -&gt;<br/>              10..18-&gt; ALFA=R   BETA=S+1 END -&gt;<br/>              19..27-&gt; ALFA=R   BETA=S+2 END -&gt;<br/>              28..36-&gt; ALFA=R+1 BETA=S   END -&gt;<br/>              37..45-&gt; ALFA=R+1 BETA=S+1 END -&gt;<br/>              46..54-&gt; ALFA=R+1 BETA=S+2 END -&gt;<br/>              55..63-&gt; ALFA=R+2 BETA=S   END -&gt;<br/>              64..72-&gt; ALFA=R+2 BETA=S+1 END -&gt;<br/>              OTHERWISE<br/>                 ALFA=R+2 BETA=S+2<br/>            END CASE<br/>77:<br/>            TAV$[ALFA,BETA]=KL$ EXIT<br/>         END IF<br/>     END FOR<br/>76:<br/>     MESSAGGI(2)<br/>END PROCEDURE<br/>\u00a0<br/>PROCEDURE CONVERTI_VALORE<br/>    FINE%=TRUE NESSUNO%=TRUE<br/>    FOR RIGA=1 TO 9 DO<br/>        FOR COLONNA=1 TO 9 DO<br/>           CH$=TAV$[RIGA,COLONNA]<br/>           IF LEN(CH$)&lt;&gt;1 THEN<br/>               FINE%=FALSE\u00a0! flag per fine partita -- trovati tutti<br/>               Q=0        \u00a0! conta i '-' nella stringa se ce ne sono 8,<br/>                          \u00a0! trovato valore<br/>               FOR Z=1 TO LEN(CH$) DO<br/>                  IF MID$(CH$,Z,1)=\"-\" THEN Q=Q+1 ELSE LAST=Z END IF<br/>               END FOR<br/>               IF Q=8 THEN<br/>                   CH$=MID$(STR$(LAST),2)<br/>                   TAV$[RIGA,COLONNA]=CH$<br/>                   NESSUNO%=FALSE<br/>               END IF<br/>           END IF<br/>        END FOR<br/>    END FOR<br/>END PROCEDURE<br/>\u00a0<br/>PROCEDURE LEGGI_SCHEMA<br/>    OPEN(\"I\",1,\"sudoku.txt\")<br/>    FOR I=1 TO 9 DO<br/>       INPUT(LINE,#1,RIGA$)<br/>       FOR J=1 TO 9 DO<br/>           CH$=MID$(RIGA$,J,1)<br/>           IF CH$=\"0\" OR CH$=\".\" THEN<br/>                TAV$[I,J]=\"123456789\"<br/>             ELSE<br/>                TAV$[I,J]=CH$<br/>           END IF<br/>       END FOR<br/>    END FOR<br/>CLOSE(1)<br/>END PROCEDURE<br/>\u00a0<br/>!---------------------------------------------------------------------------<br/>! Praticamente - visita di un albero binario (caso con cella a 2 valori<br/>!                                             possibili)<br/>!---------------------------------------------------------------------------<br/>PROCEDURE RICERCA_COMBINATORIA<br/>   TRE%=TRUE<br/>   FOR RIGA=1 TO 9 DO<br/>       FOR COLONNA=1 TO 9 DO<br/>           CH$=TAV$[RIGA,COLONNA]<br/>           IF LEN(CH$)&lt;&gt;1 THEN<br/>               Q=0 FIRST=0 SECOND=0 THIRD=0<br/>               FOR Z=1 TO LEN(CH$) DO<br/>                  IF MID$(CH$,Z,1)=\"-\" THEN<br/>                     Q=Q+1<br/>                    ELSE<br/>                     IF FIRST=0 THEN<br/>                         FIRST=Z<br/>                       ELSE<br/>                         SECOND=Z<br/>                     END IF<br/>                  END IF<br/>               END FOR<br/>               IF Q=7 THEN<br/>                  SALVA_CONFIG<br/>                  TAV$[RIGA,COLONNA]=MID$(STR$(FIRST),2)<br/>                  TRE%=FALSE<br/>                  GOTO 97<br/>               END IF<br/>           END IF<br/>       END FOR<br/>   END FOR<br/>   IF TRE% THEN GOTO 88 END IF<br/>97:<br/>   MESSAGGI(3)<br/>   EXIT PROCEDURE<br/>88:<br/>   QUATTRO%=TRUE<br/>   FOR RIGA=1 TO 9 DO<br/>       FOR COLONNA=1 TO 9 DO<br/>           CH$=TAV$[RIGA,COLONNA]<br/>           IF LEN(CH$)&lt;&gt;1 THEN<br/>               Q=0 FIRST=0 SECOND=0 THIRD=0<br/>               FOR Z=1 TO LEN(CH$) DO<br/>                  IF MID$(CH$,Z,1)=\"-\" THEN<br/>                      Q=Q+1<br/>                    ELSE<br/>                      IF FIRST=0 THEN<br/>                          FIRST=Z<br/>                        ELSE<br/>                          IF SECOND=0 THEN<br/>                              SECOND=Z<br/>                            ELSE<br/>                              THIRD=Z<br/>                          END IF<br/>                      END IF<br/>                  END IF<br/>               END FOR<br/>               IF Q=6 THEN<br/>                   SALVA_CONFIG<br/>                   TAV$[RIGA,COLONNA]=MID$(STR$(FIRST),2)<br/>                   QUATTRO%=FALSE<br/>                   GOTO 97<br/>               END IF<br/>           END IF<br/>       END FOR<br/>  END FOR<br/>  IF QUATTRO% THEN<br/>      LIVELLO=LIVELLO+1<br/>      RIPRISTINA_CONFIG<br/>      GOTO 97<br/>  END IF<br/> \u00a0! se restano solo celle con 4 valori,forza la chiusura del ramo dell'albero<br/> \u00a0!$RCODE=\"STOP\"<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>   CLS<br/>   LIVELLO=1 NZ%=0<br/>   LEGGI_SCHEMA<br/>   WHILE TRUE DO<br/>      VISUALIZZA_SCHEMA<br/>99:<br/>      NZ%=NZ%+1<br/>      ESAMINA_SCHEMA<br/>      CONVERTI_VALORE<br/>      EXIT IF FINE%<br/>      IF NESSUNO% THEN<br/>          TOGLI_VALORE2<br/>          IF OK%=0 THEN<br/>             RICERCA_COMBINATORIA \u00a0! cerca altri celle da assegnare<br/>          END IF<br/>      END IF<br/>   END WHILE<br/>   VISUALIZZA_SCHEMA<br/>   VERIFICA_SE_FINITO<br/>   IF NOT COMPLETO% THEN<br/>       LIVELLO=LIVELLO+1<br/>       RIPRISTINA_CONFIG<br/>       GOTO 99<br/>   END IF<br/>END PROGRAM<br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 364, "block": "<pre class=\"text highlighted_source\">include lib/interprt.4th<br/>include lib/istype.4th<br/>include lib/argopen.4th<br/>\u00a0<br/>\\  ---------------------<br/>\\  Variables<br/>\\  ---------------------<br/>\u00a0<br/>81 string sudokugrid<br/>9 array sudoku_row<br/>9 array sudoku_col<br/>9 array sudoku_box<br/>\u00a0<br/>\\  -------------<br/>\\  4tH interface<br/>\\  -------------<br/>\u00a0<br/>: &gt;grid                                ( n2 a1 n1 -- n3)<br/>  rot dup &gt;r 9 chars * sudokugrid + dup &gt;r swap<br/>  0 do                                 ( a1 a2)<br/>    over i chars + <a class=\"__cf_email__\" data-cfemail=\"5a391a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> dup is-digit     ( a1 a2 c f)<br/>    if [char] 0 - over c! char+ else drop then<br/>  loop                                 ( a1 a2)<br/>  nip r&gt; - 9 /  r&gt; +                   ( n3)<br/>;<br/>\u00a0<br/>0<br/>s\" 090004007\" &gt;grid<br/>s\" 000007900\" &gt;grid<br/>s\" 800000000\" &gt;grid<br/>s\" 405800000\" &gt;grid<br/>s\" 300000002\" &gt;grid<br/>s\" 000009706\" &gt;grid<br/>s\" 000000004\" &gt;grid<br/>s\" 003500000\" &gt;grid<br/>s\" 200600080\" &gt;grid<br/>drop <br/>\u00a0<br/>\\  ---------------------<br/>\\  Logic<br/>\\  ---------------------<br/>\\  Basically\u00a0:  <br/>\\     Grid is parsed. All numbers are put into sets, which are<br/>\\     implemented as bitmaps (sudoku_row, sudoku_col, sudoku_box)<br/>\\     which represent sets of numbers in each row, column, box.<br/>\\     only one specific instance of a number can exist in a<br/>\\     particular set.<br/>\u00a0<br/>\\     SOLVER is recursively called<br/>\\     SOLVER looks for the next best guess using FINDNEXTSPACE<br/>\\     tries this trail down... if fails, backtracks... and tries<br/>\\     again.<br/>\u00a0<br/>\u00a0<br/>\\ Grid Related<br/>\u00a0<br/>: xy 9 * +\u00a0;                           \\  x y -- offset\u00a0;<br/>: getrow 9 /\u00a0;<br/>: getcol 9 mod\u00a0;<br/>: getbox dup getrow 3 / 3 * swap getcol 3 / +\u00a0;<br/>\u00a0<br/>\\ Puts and gets numbers from/to grid only<br/>: setnumber sudokugrid + c!\u00a0;          \\ n position --<br/>: getnumber sudokugrid + <a class=\"__cf_email__\" data-cfemail=\"c8ab88\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0;<br/>\u00a0<br/>: cleargrid sudokugrid 81 bounds do 0 i c! loop\u00a0;<br/>\u00a0<br/>\\ --------------<br/>\\ Set related: sets are sudoku_row, sudoku_col, sudoku_box<br/>\u00a0<br/>\\ ie x y --  \u00a0;  adds x into bitmap y<br/>: addbits_row cells sudoku_row + dup @ rot 1 swap lshift or swap\u00a0!\u00a0;<br/>: addbits_col cells sudoku_col + dup @ rot 1 swap lshift or swap\u00a0!\u00a0;<br/>: addbits_box cells sudoku_box + dup @ rot 1 swap lshift or swap\u00a0!\u00a0;<br/>\u00a0<br/>\\ ie x y -- \u00a0; remove number x from bitmap y<br/>: removebits_row cells sudoku_row + dup @ rot 1 swap lshift invert and swap\u00a0!\u00a0;<br/>: removebits_col cells sudoku_col + dup @ rot 1 swap lshift invert and swap\u00a0!\u00a0;<br/>: removebits_box cells sudoku_box + dup @ rot 1 swap lshift invert and swap\u00a0!\u00a0; <br/>\u00a0<br/>\\ clears all bitsmaps to 0<br/>: clearbitmaps 9 0 do i cells<br/>                     0 over sudoku_row +\u00a0!<br/>                     0 over sudoku_col +\u00a0!<br/>                     0 swap sudoku_box +\u00a0!<br/>           loop\u00a0;<br/>\u00a0<br/>\\ Adds number to grid and sets<br/>: addnumber                            \\ number position --<br/>    2dup setnumber<br/>    2dup getrow addbits_row<br/>    2dup getcol addbits_col<br/>         getbox addbits_box<br/>;<br/>\u00a0<br/>\\ Remove number from grid, and sets<br/>: removenumber                         \\ position --<br/>    dup getnumber swap    <br/>    2dup getrow removebits_row<br/>    2dup getcol removebits_col<br/>    2dup getbox removebits_box<br/>    nip 0 swap setnumber<br/>;<br/>\u00a0<br/>\\ gets bitmap at position, ie<br/>\\ position -- bitmap<br/>\u00a0<br/>: getrow_bits getrow cells sudoku_row + @\u00a0;  <br/>: getcol_bits getcol cells sudoku_col + @\u00a0;  <br/>: getbox_bits getbox cells sudoku_box + @\u00a0;  <br/>\u00a0<br/>\\ position -- composite bitmap  (or'ed)<br/>: getbits<br/>    dup getrow_bits<br/>    over getcol_bits<br/>    rot getbox_bits or or<br/>;<br/>\u00a0<br/>\\ algorithm from c.l.f circa 1995\u00a0? Will Baden<br/>: countbits    ( number -- bits )<br/>        [HEX] DUP  55555555 AND  SWAP  1 RSHIFT  55555555 AND  +<br/>              DUP  33333333 AND  SWAP  2 RSHIFT  33333333 AND  +<br/>              DUP  0F0F0F0F AND  SWAP  4 RSHIFT  0F0F0F0F AND  +<br/>        [DECIMAL] 255 MOD<br/>;<br/>\u00a0<br/>\\ Try tests a number in a said position of grid<br/>\\ Returns true if it's possible, else false.<br/>: try                                  \\ number position -- true/false<br/>      getbits 1 rot lshift and 0=<br/>;<br/>\u00a0<br/>\\ --------------<br/>: parsegrid                            \\ Parses Grid to fill sets.. Run before solver.<br/>   sudokugrid                          \\ to ensure all numbers are parsed into sets/bitmaps<br/>   81 0 do<br/>     dup i + <a class=\"__cf_email__\" data-cfemail=\"6a092a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>                            <br/>       dup if                              <br/>         dup i try if                    <br/>           i addnumber                          <br/>         else<br/>           unloop drop drop FALSE exit      <br/>         then  <br/>       else<br/>         drop<br/>       then<br/>   loop<br/>   drop<br/>   TRUE<br/>;<br/>\u00a0<br/>\\ Morespaces? manually checks for spaces ...<br/>\\ Obviously this can be optimised to a count var, done initially<br/>\\ Any additions/subtractions made to the grid could decrement<br/>\\ a 'spaces' variable.<br/>\u00a0<br/>: morespaces?<br/>     0  sudokugrid 81 bounds do i <a class=\"__cf_email__\" data-cfemail=\"264566\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  0= if 1+ then loop\u00a0;<br/>\u00a0<br/>: findnextmove                         \\  -- n\u00a0; n = index next item, if -1 finished.<br/>\u00a0<br/>   -1  10                              \\  index  prev_possibilities  --<br/>                                       \\  err... yeah... local variables, kind of...<br/>\u00a0<br/>   81 0 do<br/>      i sudokugrid + <a class=\"__cf_email__\" data-cfemail=\"c1a281\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 0= IF<br/>             i getbits countbits 9 swap -<br/>\u00a0<br/>             \\ get bitmap and see how many possibilities<br/>             \\ stack diagram:<br/>             \\ index prev_possibilities  new_possiblities --<br/>\u00a0<br/>             2dup &gt; if          <br/>                                       \\ if new_possibilities &lt; prev_possibilities...<br/>                 nip nip i swap  <br/>                                       \\ new_index new_possibilies --<br/>\u00a0<br/>             else                      \\ else prev_possibilities &lt; new possibilities, so:<br/>\u00a0<br/>                 drop                  \\ new_index new_possibilies --        <br/>\u00a0<br/>             then                <br/>      THEN<br/>   loop<br/>   drop<br/>;<br/>\u00a0<br/>\\ findnextmove returns index of best next guess OR returns -1<br/>\\ if no more guesses. You then have to check to see if there are<br/>\\ spaces left on the board unoccupied. If this is the case, you<br/>\\ need to back up the recursion and try again.<br/>\u00a0<br/>: solver<br/>     findnextmove<br/>         dup 0&lt; if<br/>             morespaces? if<br/>                drop false exit<br/>             else<br/>                drop true exit<br/>             then<br/>         then<br/>\u00a0<br/>     10 1 do<br/>        i over try if          <br/>           i over addnumber<br/>           recurse  if<br/>                drop unloop TRUE EXIT<br/>           else<br/>                dup removenumber<br/>           then<br/>        then<br/>     loop<br/>\u00a0<br/>     drop FALSE<br/>;<br/>\u00a0<br/>\\ SOLVER<br/>\u00a0<br/>: startsolving        <br/>   clearbitmaps                        \\ reparse bitmaps and reparse grid<br/>   parsegrid                           \\ just in case..<br/>   solver<br/>   AND<br/>;<br/>\u00a0<br/>\\  ---------------------<br/>\\  Display Grid<br/>\\  ---------------------<br/>\u00a0<br/>\\ Prints grid nicely<br/>\u00a0<br/>: .sudokugrid<br/>  CR CR<br/>  sudokugrid<br/>  81 0 do<br/>    dup i + <a class=\"__cf_email__\" data-cfemail=\"d6b596\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> .<br/>    i 1+<br/>      dup 3 mod 0= if<br/>         dup 9 mod 0= if<br/>            CR<br/>            dup 27 mod 0= if<br/>              dup 81 &lt; if .\" ------+-------+------\" CR then<br/>            then<br/>         else<br/>           .\" | \"<br/>         then      <br/>      then<br/>    drop<br/>  loop<br/>  drop<br/>  CR<br/>;<br/>\u00a0<br/>\\  ---------------------<br/>\\  Higher Level Words<br/>\\  ---------------------<br/>\u00a0<br/>: checkifoccupied                      ( offset -- t/f)<br/>    sudokugrid + <a class=\"__cf_email__\" data-cfemail=\"442704\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>;<br/>\u00a0<br/>: add                                  ( n x y --)<br/>    xy 2dup<br/>      dup checkifoccupied if<br/>        dup removenumber<br/>      then<br/>    try if<br/>      addnumber<br/>      .sudokugrid<br/>    else<br/>      CR .\" Not a valid move. \" CR<br/>      2drop<br/>    then<br/>;<br/>\u00a0<br/>: rm<br/>    xy removenumber<br/>    .sudokugrid<br/>;<br/>\u00a0<br/>: clearit<br/>    cleargrid<br/>    clearbitmaps<br/>    .sudokugrid<br/>;<br/>\u00a0<br/>: solveit<br/>  CR <br/>  startsolving<br/>  if<br/>    .\" Solution found!\" CR .sudokugrid<br/>  else<br/>    .\" No solution found!\" CR CR<br/>  then<br/>;<br/>\u00a0<br/>: showit .sudokugrid\u00a0;<br/>\u00a0<br/>\\ Print help menu<br/>: help<br/>  CR<br/>  .\" Type clearit    \u00a0; to clear grid \" CR<br/>  .\"      1-9 x y add\u00a0; to add 1-9 to grid at x y (0 based) \" CR<br/>  .\"      x y rm     \u00a0; to remove number at x y \" CR<br/>  .\"      showit     \u00a0; redisplay grid \" CR<br/>  .\"      solveit    \u00a0; to solve \" CR<br/>  .\"      help       \u00a0; for help \" CR<br/>  CR<br/>;<br/>\u00a0<br/>\\  ---------------------<br/>\\  Execution starts here<br/>\\  ---------------------<br/>\u00a0<br/>: godoit<br/>    clearbitmaps<br/>    parsegrid if<br/>      CR .\" Grid valid!\"<br/>    else<br/>      CR .\" Warning: grid invalid!\"<br/>    then<br/>    .sudokugrid<br/>    help<br/>;<br/>\u00a0<br/>\\  -------------<br/>\\  4tH interface<br/>\\  -------------<br/>\u00a0<br/>: read-sudoku<br/>  input 1 arg-open 0<br/>  begin dup 9 &lt; while refill while 0 parse &gt;grid repeat<br/>  drop close<br/>;<br/>\u00a0<br/>: bye quit\u00a0;<br/>\u00a0<br/>create wordlist                        \\ dictionary<br/>  ,\" clearit\" ' clearit ,<br/>  ,\" add\"     ' add ,<br/>  ,\" rm\"      ' rm ,<br/>  ,\" showit\"  ' showit ,<br/>  ,\" solveit\" ' solveit ,<br/>  ,\" quit\"    ' bye ,<br/>  ,\" exit\"    ' bye ,<br/>  ,\" bye\"     ' bye ,<br/>  ,\" q\"       ' bye ,<br/>  ,\" help\"    ' help ,<br/>  NULL ,<br/>\u00a0<br/>wordlist to dictionary<br/>:noname .\" Unknown command '\" type .\" '\" cr\u00a0; is NotFound<br/>                                       \\ sudoku interpreter<br/>: sudoku<br/>  argn 1 &gt; if read-sudoku then<br/>  godoit<br/>  begin<br/>    .\" OK\" cr<br/>    refill drop ['] interpret<br/>    catch if .\" Error\" cr then<br/>  again<br/>;<br/>\u00a0<br/>sudoku</pre>"}, {"lang": "Fortran", "loc": 98, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> sudoku<br/>\u00a0<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span> <span class=\"br0\">(</span><span class=\"nu0\">9</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">grid</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span> <span class=\"br0\">(</span><span class=\"nu0\">9</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">grid_solved</span><br/>  grid <span class=\"sy0\">=</span> <span class=\"kw4\">reshape</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">/</span>               <span class=\"sy0\">&amp;</span><br/>    <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>,   <span class=\"sy0\">&amp;</span><br/>    <span class=\"sy0\">&amp;</span> <span class=\"nu0\">9</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>,   <span class=\"sy0\">&amp;</span><br/>    <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>,   <span class=\"sy0\">&amp;</span><br/>    <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>,   <span class=\"sy0\">&amp;</span><br/>    <span class=\"sy0\">&amp;</span> <span class=\"nu0\">7</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">8</span>,   <span class=\"sy0\">&amp;</span><br/>    <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>,   <span class=\"sy0\">&amp;</span><br/>    <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>,   <span class=\"sy0\">&amp;</span><br/>    <span class=\"sy0\">&amp;</span> <span class=\"nu0\">8</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">9</span>,   <span class=\"sy0\">&amp;</span><br/>    <span class=\"sy0\">&amp;</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"sy0\">/</span><span class=\"br0\">)</span>, <span class=\"sy0\">&amp;</span><br/>    <span class=\"sy0\">&amp;</span> <span class=\"kw4\">shape</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"nu0\">9</span>, <span class=\"nu0\">9</span><span class=\"sy0\">/</span><span class=\"br0\">)</span>,            <span class=\"sy0\">&amp;</span><br/>    <span class=\"sy0\">&amp;</span> order <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>, <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> pretty_print <span class=\"br0\">(</span>grid<span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> solve <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> pretty_print <span class=\"br0\">(</span>grid_solved<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"kw1\">recursive</span> <span class=\"kw1\">subroutine</span> solve <span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span> <span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span> <span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">j</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n_tmp</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i &gt; <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      grid_solved <span class=\"sy0\">=</span> grid<br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">do</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">9</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>is_safe <span class=\"br0\">(</span>i, j, n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          n_tmp <span class=\"sy0\">=</span> grid <span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><br/>          grid <span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"sy0\">==</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">call</span> solve <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">call</span> solve <span class=\"br0\">(</span>i, j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>          grid <span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n_tmp<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> solve<br/>\u00a0<br/>  <span class=\"kw1\">function</span> is_safe <span class=\"br0\">(</span>i, j, n<span class=\"br0\">)</span> <span class=\"kw3\">result</span> <span class=\"br0\">(</span>res<span class=\"br0\">)</span><br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span> <span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span> <span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">j</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span> <span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">res</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i_min</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">j_min</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid <span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"sy0\">==</span> n<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      res <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><br/>      <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid <span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"sy0\">/=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      res <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>      <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">any</span> <span class=\"br0\">(</span>grid <span class=\"br0\">(</span>i, <span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      res <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>      <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">any</span> <span class=\"br0\">(</span>grid <span class=\"br0\">(</span><span class=\"sy0\">:</span>, j<span class=\"br0\">)</span> <span class=\"sy0\">==</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      res <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>      <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    i_min <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    j_min <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">any</span> <span class=\"br0\">(</span>grid <span class=\"br0\">(</span>i_min <span class=\"sy0\">:</span> i_min <span class=\"sy0\">+</span> <span class=\"nu0\">2</span>, j_min <span class=\"sy0\">:</span> j_min <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      res <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>      <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    res <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> is_safe<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> pretty_print <span class=\"br0\">(</span>grid<span class=\"br0\">)</span><br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span> <span class=\"br0\">(</span><span class=\"nu0\">9</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span> <span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">grid</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">j</span><br/>    <span class=\"kw3\">character</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">bar</span> <span class=\"sy0\">=</span> <span class=\"st0\">'+-----+-----+-----+'</span><br/>    <span class=\"kw3\">character</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"kw1\">fmt</span> <span class=\"sy0\">=</span> <span class=\"st0\">'(3 (\"|\", i0, 1x, i0, 1x, i0), \"|\")'</span><br/>    write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">'(a)'</span><span class=\"br0\">)</span> bar<br/>    <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">3</span><br/>      <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, j <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><br/>        write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"kw1\">fmt</span><span class=\"br0\">)</span> grid <span class=\"br0\">(</span>i, <span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>      write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">'(a)'</span><span class=\"br0\">)</span> bar<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> pretty_print<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> sudoku</pre>"}, {"lang": "FutureBasic", "loc": 110, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>include \"NSLog.incl\"<br/>include \"Util_Containers.incl\"<br/>\u00a0<br/>begin globals<br/>dim as container gC<br/>end globals<br/>\u00a0<br/>BeginCDeclaration<br/>short solve_sudoku(short i);<br/>short check_sudoku(short r, short c);<br/>CFMutableStringRef print_sudoku();<br/>EndC<br/>\u00a0<br/>BeginCFunction<br/>short sudoku[9][9] = {<br/>                       {3,0,0,0,0,1,4,0,9},<br/>                       {7,0,0,0,0,4,2,0,0},<br/>                       {0,5,0,2,0,0,0,1,0},<br/>                       {5,7,0,0,4,3,0,6,0},<br/>                       {0,9,0,0,0,0,0,3,0},<br/>                       {0,6,0,7,9,0,0,8,5},<br/>                       {0,8,0,0,0,5,0,4,0},<br/>                       {0,0,6,4,0,0,0,0,7},<br/>                       {9,0,5,6,0,0,0,0,3},<br/>                     };<br/>\u00a0<br/>\u00a0<br/>short check_sudoku( short r, short c )<br/>{<br/>  short i;<br/>  short rr, cc;<br/>\u00a0<br/>  for (i = 0; i &lt; 9; i++)<br/>  {<br/>    if (i\u00a0!= c &amp;&amp; sudoku[r][i] == sudoku[r][c]) return 0;<br/>    if (i\u00a0!= r &amp;&amp; sudoku[i][c] == sudoku[r][c]) return 0;<br/>    rr = r/3 * 3 + i/3;<br/>    cc = c/3 * 3 + i%3;<br/>    if ((rr\u00a0!= r || cc\u00a0!= c) &amp;&amp; sudoku[rr][cc] == sudoku[r][c]) return 0;<br/>  }<br/>  return -1;<br/>}<br/>\u00a0<br/>\u00a0<br/>short solve_sudoku( short i )<br/>{<br/>  short r, c;<br/>\u00a0<br/>  if (i &lt; 0) return 0;<br/>  else if (i &gt;= 81) return -1;<br/>\u00a0<br/>  r = i / 9;<br/>  c = i\u00a0% 9;<br/>\u00a0<br/>  if (sudoku[r][c])<br/>    return check_sudoku(r, c) &amp;&amp; solve_sudoku(i + 1);<br/>  else<br/>    for (sudoku[r][c] = 9; sudoku[r][c] &gt; 0; sudoku[r][c]--)<br/>    {<br/>      if ( solve_sudoku(i) ) return -1;<br/>    }<br/>  return 0;<br/>}<br/>\u00a0<br/>\u00a0<br/>CFMutableStringRef print_sudoku()<br/>{<br/>  short i, j;<br/>  CFMutableStringRef mutStr;<br/>\u00a0<br/>  mutStr = CFStringCreateMutable( kCFAllocatorDefault, 0 );<br/>\u00a0<br/>     for (i = 0; i &lt; 9; i++)<br/>     {<br/>          for (j = 0; j &lt; 9; j++)<br/>          {<br/>             CFStringAppendFormat( mutStr, NULL, (CFStringRef)@\"\u00a0%d\", sudoku[i][j] );<br/>          }<br/>       CFStringAppendFormat( mutStr, NULL, (CFStringRef)@\"\\r\" );<br/>     }<br/>  return( mutStr );<br/>}<br/>EndC<br/>\u00a0<br/>toolbox fn solve_sudoku( short i ) = short<br/>toolbox fn check_sudoku( short r, short c ) = short<br/>toolbox fn print_sudoku() = CFMutableStringRef<br/>\u00a0<br/>dim as short solution<br/>dim as CFMutableStringRef cfRef<br/>\u00a0<br/>gC = \" \"<br/>cfRef = fn print_sudoku()<br/>fn ContainerCreateWithCFString( cfRef, gC )<br/>print\u00a0: print \"Sudoku challenge:\"\u00a0: print\u00a0: print gC<br/>\u00a0<br/>solution = fn solve_sudoku(0)<br/>\u00a0<br/>print\u00a0: print \"Sudoku solved:\"\u00a0: print<br/>if ( solution )<br/>gC = \" \"<br/>cfRef = fn print_sudoku()<br/>fn ContainerCreateWithCFString( cfRef, gC )<br/>print gC<br/>else<br/>print \"No solution found\"<br/>end if<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 202, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"co1\">// sudoku puzzle representation is an 81 character string </span><br/><span class=\"kw1\">var</span> puzzle <span class=\"sy2\">=</span> <span class=\"st0\">\"\"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\"394  267 \"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\"   3  4  \"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\"5  69  2 \"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\" 45   9  \"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\"6       7\"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\"  7   58 \"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\" 1  67  8\"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\"  9  8   \"</span> <span class=\"sy3\">+</span><br/>    <span class=\"st0\">\" 264  735\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    printGrid<span class=\"sy1\">(</span><span class=\"st0\">\"puzzle:\"</span><span class=\"sy1\">,</span> puzzle<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> s <span class=\"sy2\">:=</span> solve<span class=\"sy1\">(</span>puzzle<span class=\"sy1\">);</span> s <span class=\"sy3\">==</span> <span class=\"st0\">\"\"</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"no solution\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        printGrid<span class=\"sy1\">(</span><span class=\"st0\">\"solved:\"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// print grid (with title) from 81 character string</span><br/><span class=\"kw4\">func</span> printGrid<span class=\"sy1\">(</span>title<span class=\"sy1\">,</span> s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>title<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> r<span class=\"sy1\">,</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> r &lt; <span class=\"nu0\">9</span><span class=\"sy1\">;</span> r<span class=\"sy1\">,</span> <span class=\"nu2\">i</span> <span class=\"sy2\">=</span> r<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">9</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%c\u00a0%c\u00a0%c |\u00a0%c\u00a0%c\u00a0%c |\u00a0%c\u00a0%c\u00a0%c<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">],</span><br/>            s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">3</span><span class=\"sy1\">],</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">4</span><span class=\"sy1\">],</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">5</span><span class=\"sy1\">],</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">6</span><span class=\"sy1\">],</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">7</span><span class=\"sy1\">],</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">8</span><span class=\"sy1\">])</span><br/>        <span class=\"kw1\">if</span> r <span class=\"sy3\">==</span> <span class=\"nu0\">2</span> <span class=\"sy3\">||</span> r <span class=\"sy3\">==</span> <span class=\"nu0\">5</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"------+-------+------\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span>   <br/>\u00a0<br/><span class=\"co1\">// solve puzzle in 81 character string format.</span><br/><span class=\"co1\">// if solved, result is 81 character string.</span><br/><span class=\"co1\">// if not solved, result is the empty string.</span><br/><span class=\"kw4\">func</span> solve<span class=\"sy1\">(</span>u <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// construct an dlx object with 324 constraint columns.</span><br/>    <span class=\"co1\">// other than the number 324, this is not specific to sudoku.</span><br/>    d <span class=\"sy2\">:=</span> newDlxObject<span class=\"sy1\">(</span><span class=\"nu0\">324</span><span class=\"sy1\">)</span><br/>    <span class=\"co1\">// now add constraints that define sudoku rules.</span><br/>    <span class=\"kw1\">for</span> r<span class=\"sy1\">,</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> r &lt; <span class=\"nu0\">9</span><span class=\"sy1\">;</span> r<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> c <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> c &lt; <span class=\"nu0\">9</span><span class=\"sy1\">;</span> c<span class=\"sy1\">,</span> <span class=\"nu2\">i</span> <span class=\"sy2\">=</span> c<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            b <span class=\"sy2\">:=</span> r<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy3\">*</span><span class=\"nu0\">3</span> <span class=\"sy3\">+</span> c<span class=\"sy3\">/</span><span class=\"nu0\">3</span><br/>            n <span class=\"sy2\">:=</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>u<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy3\">-</span> <span class=\"st0\">'1'</span><span class=\"sy1\">)</span><br/>            <span class=\"kw1\">if</span> n &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> &amp;&amp; n &lt; <span class=\"nu0\">9</span> <span class=\"sy1\">{</span><br/>                d<span class=\"sy3\">.</span>addRow<span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> <span class=\"nu0\">81</span> <span class=\"sy3\">+</span> r<span class=\"sy3\">*</span><span class=\"nu0\">9</span> <span class=\"sy3\">+</span> n<span class=\"sy1\">,</span> <span class=\"nu0\">162</span> <span class=\"sy3\">+</span> c<span class=\"sy3\">*</span><span class=\"nu0\">9</span> <span class=\"sy3\">+</span> n<span class=\"sy1\">,</span><br/>                    <span class=\"nu0\">243</span> <span class=\"sy3\">+</span> b<span class=\"sy3\">*</span><span class=\"nu0\">9</span> <span class=\"sy3\">+</span> n<span class=\"sy1\">})</span><br/>            <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">for</span> n <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> n &lt; <span class=\"nu0\">9</span><span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                    d<span class=\"sy3\">.</span>addRow<span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> <span class=\"nu0\">81</span> <span class=\"sy3\">+</span> r<span class=\"sy3\">*</span><span class=\"nu0\">9</span> <span class=\"sy3\">+</span> n<span class=\"sy1\">,</span> <span class=\"nu0\">162</span> <span class=\"sy3\">+</span> c<span class=\"sy3\">*</span><span class=\"nu0\">9</span> <span class=\"sy3\">+</span> n<span class=\"sy1\">,</span><br/>                        <span class=\"nu0\">243</span> <span class=\"sy3\">+</span> b<span class=\"sy3\">*</span><span class=\"nu0\">9</span> <span class=\"sy3\">+</span> n<span class=\"sy1\">})</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// run dlx.  not sudoku specific.</span><br/>    d<span class=\"sy3\">.</span><span class=\"me1\">search</span><span class=\"sy1\">()</span><br/>    <span class=\"co1\">// extract the sudoku-specific 81 character result from the dlx solution.</span><br/>    <span class=\"kw1\">return</span> d<span class=\"sy3\">.</span>text<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Knuth's data object</span><br/><span class=\"kw1\">type</span> x <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    c          <span class=\"sy3\">*</span>y<br/>    u<span class=\"sy1\">,</span> d<span class=\"sy1\">,</span> l<span class=\"sy1\">,</span> r <span class=\"sy3\">*</span>x<br/>    <span class=\"co1\">// except x0 is not Knuth's.  it's pointer to first constraint in row,</span><br/>    <span class=\"co1\">// so that the sudoku string can be constructed from the dlx solution.</span><br/>    x0 <span class=\"sy3\">*</span>x<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Knuth's column object</span><br/><span class=\"kw1\">type</span> y <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    x<br/>    s <span class=\"kw4\">int</span> <span class=\"co1\">// size</span><br/>    n <span class=\"kw4\">int</span> <span class=\"co1\">// name</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// an object to hold the matrix and solution</span><br/><span class=\"kw1\">type</span> dlx <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    ch <span class=\"sy1\">[]</span>y  <span class=\"co1\">// all column headers</span><br/>    h  <span class=\"sy3\">*</span>y   <span class=\"co1\">// ch[0], the root node</span><br/>    o  <span class=\"sy1\">[]</span><span class=\"sy3\">*</span>x <span class=\"co1\">// solution</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// constructor creates the column headers but no rows.</span><br/><span class=\"kw4\">func</span> newDlxObject<span class=\"sy1\">(</span>nCols <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy3\">*</span>dlx <span class=\"sy1\">{</span><br/>    ch <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>y<span class=\"sy1\">,</span> nCols<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    h <span class=\"sy2\">:=</span> &amp;ch<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>    d <span class=\"sy2\">:=</span> &amp;dlx<span class=\"sy1\">{</span>ch<span class=\"sy1\">,</span> h<span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">}</span><br/>    h<span class=\"sy3\">.</span>c <span class=\"sy2\">=</span> h<br/>    h<span class=\"sy3\">.</span>l <span class=\"sy2\">=</span> &amp;ch<span class=\"sy1\">[</span>nCols<span class=\"sy1\">]</span><span class=\"sy3\">.</span>x<br/>    ch<span class=\"sy1\">[</span>nCols<span class=\"sy1\">]</span><span class=\"sy3\">.</span>r <span class=\"sy2\">=</span> &amp;h<span class=\"sy3\">.</span>x<br/>    nh <span class=\"sy2\">:=</span> ch<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> ch<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span> <span class=\"sy1\">{</span><br/>        hi <span class=\"sy2\">:=</span> &amp;nh<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>        ix <span class=\"sy2\">:=</span> &amp;hi<span class=\"sy3\">.</span>x<br/>        hi<span class=\"sy3\">.</span>n <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><br/>        hi<span class=\"sy3\">.</span>c <span class=\"sy2\">=</span> hi<br/>        hi<span class=\"sy3\">.</span>u <span class=\"sy2\">=</span> ix<br/>        hi<span class=\"sy3\">.</span>d <span class=\"sy2\">=</span> ix<br/>        hi<span class=\"sy3\">.</span>l <span class=\"sy2\">=</span> &amp;h<span class=\"sy3\">.</span>x<br/>        h<span class=\"sy3\">.</span>r <span class=\"sy2\">=</span> ix<br/>        h <span class=\"sy2\">=</span> hi<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> d<br/><span class=\"sy1\">}</span>   <br/>\u00a0<br/><span class=\"co1\">// rows define constraints</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>d <span class=\"sy3\">*</span>dlx<span class=\"sy1\">)</span> addRow<span class=\"sy1\">(</span>nr <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>nr<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    r <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>x<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>nr<span class=\"sy1\">))</span><br/>    x0 <span class=\"sy2\">:=</span> &amp;r<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>    <span class=\"kw1\">for</span> x<span class=\"sy1\">,</span> j <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> nr <span class=\"sy1\">{</span><br/>        ch <span class=\"sy2\">:=</span> &amp;d<span class=\"sy3\">.</span>ch<span class=\"sy1\">[</span>j<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>        ch<span class=\"sy3\">.</span>s<span class=\"sy2\">++</span><br/>        np <span class=\"sy2\">:=</span> &amp;r<span class=\"sy1\">[</span>x<span class=\"sy1\">]</span><br/>        np<span class=\"sy3\">.</span>c <span class=\"sy2\">=</span> ch<br/>        np<span class=\"sy3\">.</span>u <span class=\"sy2\">=</span> ch<span class=\"sy3\">.</span>u<br/>        np<span class=\"sy3\">.</span>d <span class=\"sy2\">=</span> &amp;ch<span class=\"sy3\">.</span>x<br/>        np<span class=\"sy3\">.</span>l <span class=\"sy2\">=</span> &amp;r<span class=\"sy1\">[(</span>x<span class=\"sy3\">+</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>r<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">%</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>r<span class=\"sy1\">)]</span><br/>        np<span class=\"sy3\">.</span>r <span class=\"sy2\">=</span> &amp;r<span class=\"sy1\">[(</span>x<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">%</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>r<span class=\"sy1\">)]</span><br/>        np<span class=\"sy3\">.</span>u<span class=\"sy3\">.</span>d<span class=\"sy1\">,</span> np<span class=\"sy3\">.</span>d<span class=\"sy3\">.</span>u<span class=\"sy1\">,</span> np<span class=\"sy3\">.</span>l<span class=\"sy3\">.</span>r<span class=\"sy1\">,</span> np<span class=\"sy3\">.</span>r<span class=\"sy3\">.</span>l <span class=\"sy2\">=</span> np<span class=\"sy1\">,</span> np<span class=\"sy1\">,</span> np<span class=\"sy1\">,</span> np<br/>        np<span class=\"sy3\">.</span>x0 <span class=\"sy2\">=</span> x0<br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// extracts 81 character sudoku string</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>d <span class=\"sy3\">*</span>dlx<span class=\"sy1\">)</span> text<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    b <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>d<span class=\"sy3\">.</span>o<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> d<span class=\"sy3\">.</span>o <span class=\"sy1\">{</span><br/>        x0 <span class=\"sy2\">:=</span> r<span class=\"sy3\">.</span>x0<br/>        b<span class=\"sy1\">[</span>x0<span class=\"sy3\">.</span>c<span class=\"sy3\">.</span>n<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw4\">byte</span><span class=\"sy1\">(</span>x0<span class=\"sy3\">.</span>r<span class=\"sy3\">.</span>c<span class=\"sy3\">.</span>n<span class=\"sy3\">%</span><span class=\"nu0\">9</span><span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"st0\">'1'</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>b<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span>   <br/>\u00a0<br/><span class=\"co1\">// the dlx algorithm </span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>d <span class=\"sy3\">*</span>dlx<span class=\"sy1\">)</span> search<span class=\"sy1\">()</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    h <span class=\"sy2\">:=</span> d<span class=\"sy3\">.</span>h<br/>    j <span class=\"sy2\">:=</span> h<span class=\"sy3\">.</span>r<span class=\"sy3\">.</span>c<br/>    <span class=\"kw1\">if</span> j <span class=\"sy3\">==</span> h <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">}</span><br/>    c <span class=\"sy2\">:=</span> j <br/>    <span class=\"kw1\">for</span> minS <span class=\"sy2\">:=</span> j<span class=\"sy3\">.</span>s<span class=\"sy1\">;</span> <span class=\"sy1\">;</span> <span class=\"sy1\">{</span><br/>        j <span class=\"sy2\">=</span> j<span class=\"sy3\">.</span>r<span class=\"sy3\">.</span>c<br/>        <span class=\"kw1\">if</span> j <span class=\"sy3\">==</span> h <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> j<span class=\"sy3\">.</span>s &lt; minS <span class=\"sy1\">{</span><br/>            c<span class=\"sy1\">,</span> minS <span class=\"sy2\">=</span> j<span class=\"sy1\">,</span> j<span class=\"sy3\">.</span>s<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    cover<span class=\"sy1\">(</span>c<span class=\"sy1\">)</span><br/>    k <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>d<span class=\"sy3\">.</span>o<span class=\"sy1\">)</span><br/>    d<span class=\"sy3\">.</span>o <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>d<span class=\"sy3\">.</span>o<span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> r <span class=\"sy2\">:=</span> c<span class=\"sy3\">.</span>d<span class=\"sy1\">;</span> r <span class=\"sy2\">!=</span> &amp;c<span class=\"sy3\">.</span>x<span class=\"sy1\">;</span> r <span class=\"sy2\">=</span> r<span class=\"sy3\">.</span>d <span class=\"sy1\">{</span><br/>        d<span class=\"sy3\">.</span>o<span class=\"sy1\">[</span>k<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> r<br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> r<span class=\"sy3\">.</span>r<span class=\"sy1\">;</span> j <span class=\"sy2\">!=</span> r<span class=\"sy1\">;</span> j <span class=\"sy2\">=</span> j<span class=\"sy3\">.</span>r <span class=\"sy1\">{</span><br/>            cover<span class=\"sy1\">(</span>j<span class=\"sy3\">.</span>c<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> d<span class=\"sy3\">.</span>search<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span><br/>        r <span class=\"sy2\">=</span> d<span class=\"sy3\">.</span>o<span class=\"sy1\">[</span>k<span class=\"sy1\">]</span><br/>        c <span class=\"sy2\">=</span> r<span class=\"sy3\">.</span>c<br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> r<span class=\"sy3\">.</span>l<span class=\"sy1\">;</span> j <span class=\"sy2\">!=</span> r<span class=\"sy1\">;</span> j <span class=\"sy2\">=</span> j<span class=\"sy3\">.</span>l <span class=\"sy1\">{</span><br/>            uncover<span class=\"sy1\">(</span>j<span class=\"sy3\">.</span>c<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    d<span class=\"sy3\">.</span>o <span class=\"sy2\">=</span> d<span class=\"sy3\">.</span>o<span class=\"sy1\">[:</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>d<span class=\"sy3\">.</span>o<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>    uncover<span class=\"sy1\">(</span>c<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> cover<span class=\"sy1\">(</span>c <span class=\"sy3\">*</span>y<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    c<span class=\"sy3\">.</span>r<span class=\"sy3\">.</span>l<span class=\"sy1\">,</span> c<span class=\"sy3\">.</span>l<span class=\"sy3\">.</span>r <span class=\"sy2\">=</span> c<span class=\"sy3\">.</span>l<span class=\"sy1\">,</span> c<span class=\"sy3\">.</span>r<br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> c<span class=\"sy3\">.</span>d<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> <span class=\"sy2\">!=</span> &amp;c<span class=\"sy3\">.</span>x<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><span class=\"sy3\">.</span>d <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu2\">i</span><span class=\"sy3\">.</span>r<span class=\"sy1\">;</span> j <span class=\"sy2\">!=</span> <span class=\"nu2\">i</span><span class=\"sy1\">;</span> j <span class=\"sy2\">=</span> j<span class=\"sy3\">.</span>r <span class=\"sy1\">{</span><br/>            j<span class=\"sy3\">.</span>d<span class=\"sy3\">.</span>u<span class=\"sy1\">,</span> j<span class=\"sy3\">.</span>u<span class=\"sy3\">.</span>d <span class=\"sy2\">=</span> j<span class=\"sy3\">.</span>u<span class=\"sy1\">,</span> j<span class=\"sy3\">.</span>d<br/>            j<span class=\"sy3\">.</span>c<span class=\"sy3\">.</span>s<span class=\"sy2\">--</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> uncover<span class=\"sy1\">(</span>c <span class=\"sy3\">*</span>y<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> c<span class=\"sy3\">.</span>u<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> <span class=\"sy2\">!=</span> &amp;c<span class=\"sy3\">.</span>x<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><span class=\"sy3\">.</span>u <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu2\">i</span><span class=\"sy3\">.</span>l<span class=\"sy1\">;</span> j <span class=\"sy2\">!=</span> <span class=\"nu2\">i</span><span class=\"sy1\">;</span> j <span class=\"sy2\">=</span> j<span class=\"sy3\">.</span>l <span class=\"sy1\">{</span><br/>            j<span class=\"sy3\">.</span>c<span class=\"sy3\">.</span>s<span class=\"sy2\">++</span><br/>            j<span class=\"sy3\">.</span>d<span class=\"sy3\">.</span>u<span class=\"sy1\">,</span> j<span class=\"sy3\">.</span>u<span class=\"sy3\">.</span>d <span class=\"sy2\">=</span> j<span class=\"sy1\">,</span> j<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    c<span class=\"sy3\">.</span>r<span class=\"sy3\">.</span>l<span class=\"sy1\">,</span> c<span class=\"sy3\">.</span>l<span class=\"sy3\">.</span>r <span class=\"sy2\">=</span> &amp;c<span class=\"sy3\">.</span>x<span class=\"sy1\">,</span> &amp;c<span class=\"sy3\">.</span>x<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 68, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> CELL_VALUES <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">'1'</span>..<span class=\"st0\">'9'</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> GridException <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20extends\"><span class=\"kw2\">extends</span></a> <a href=\"http://www.google.de/search?as_q=Exception&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Exception</span></a> <span class=\"br0\">{</span><br/>    GridException<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> message<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20super\"><span class=\"kw2\">super</span></a><span class=\"br0\">(</span>message<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> string2grid <span class=\"sy0\">=</span> <span class=\"br0\">{</span> string <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> string.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">81</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">8</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> i <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">8</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> j <span class=\"sy0\">-&gt;</span> string<span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"sy0\">*</span>i<span class=\"sy0\">+</span>j<span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> gridRow <span class=\"sy0\">=</span> <span class=\"br0\">{</span> grid, slot <span class=\"sy0\">-&gt;</span> grid<span class=\"br0\">[</span>slot.<span class=\"me1\">i</span><span class=\"br0\">]</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=Set&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Set</span></a> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> gridCol <span class=\"sy0\">=</span> <span class=\"br0\">{</span> grid, slot <span class=\"sy0\">-&gt;</span> grid.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> it<span class=\"br0\">[</span>slot.<span class=\"me1\">j</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=Set&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Set</span></a> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> gridBox <span class=\"sy0\">=</span> <span class=\"br0\">{</span> grid, slot <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> t, l<span class=\"sy0\">;</span> <span class=\"br0\">(</span>t, l<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>slot.<span class=\"me1\">i</span>.<span class=\"me1\">intdiv</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span>, slot.<span class=\"me1\">j</span>.<span class=\"me1\">intdiv</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> row <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> col <span class=\"sy0\">-&gt;</span> grid<span class=\"br0\">[</span>t<span class=\"sy0\">+</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>l<span class=\"sy0\">+</span>col<span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20flatten\"><span class=\"kw5\">flatten</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=Set&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Set</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> slotList <span class=\"sy0\">=</span> <span class=\"br0\">{</span> grid <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> slots <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">8</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> i <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">8</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20findAll\"><span class=\"kw5\">findAll</span></a> <span class=\"br0\">{</span> j <span class=\"sy0\">-&gt;</span> grid<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'.'</span> <span class=\"br0\">}</span> \\<br/>            .<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span>j <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>i: i, j: j<span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20flatten\"><span class=\"kw5\">flatten</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> assignCandidates <span class=\"sy0\">=</span> <span class=\"br0\">{</span> grid, slots <span class=\"sy0\">=</span> slotList<span class=\"br0\">(</span>grid<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    slots.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> slot <span class=\"sy0\">-&gt;</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> unavailable <span class=\"sy0\">=</span> <span class=\"br0\">[</span>gridRow, gridCol, gridBox<span class=\"br0\">]</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> it<span class=\"br0\">(</span>grid, slot<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=Set&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Set</span></a><br/>        slot.<span class=\"me1\">candidates</span> <span class=\"sy0\">=</span> CELL_VALUES <span class=\"sy0\">-</span> unavailable<br/>    <span class=\"br0\">}</span><br/>    slots.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20sort\"><span class=\"kw5\">sort</span></a> <span class=\"br0\">{</span> <span class=\"sy0\">-</span> it.<span class=\"me1\">candidates</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>slots <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span> slots<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">candidates</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20throw\"><span class=\"kw2\">throw</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> GridException<span class=\"br0\">(</span><span class=\"st0\">'Invalid Sudoku Grid, overdetermined slot: '</span> <span class=\"sy0\">+</span> slots<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    slots<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> isSolved <span class=\"sy0\">=</span> <span class=\"br0\">{</span> grid <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">!</span> <span class=\"br0\">(</span>grid.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20flatten\"><span class=\"kw5\">flatten</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20find\"><span class=\"kw5\">find</span></a> <span class=\"br0\">{</span> it <span class=\"sy0\">==</span> <span class=\"st0\">'.'</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> solve <br/>solve <span class=\"sy0\">=</span> <span class=\"br0\">{</span> grid <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> slots <span class=\"sy0\">=</span> assignCandidates<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span> slots<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> grid <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>slots<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">candidates</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> slot <span class=\"sy0\">=</span> slots.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20pop\"><span class=\"kw5\">pop</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        grid<span class=\"br0\">[</span>slot.<span class=\"me1\">i</span><span class=\"br0\">]</span><span class=\"br0\">[</span>slot.<span class=\"me1\">j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> slot.<span class=\"me1\">candidates</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span> slots<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> grid <span class=\"br0\">}</span><br/>        slots <span class=\"sy0\">=</span> assignCandidates<span class=\"br0\">(</span>grid, slots<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span> slots<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> grid <span class=\"br0\">}</span> <br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> slot <span class=\"sy0\">=</span> slots.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20pop\"><span class=\"kw5\">pop</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    slot.<span class=\"me1\">candidates</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span> isSolved<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20try\"><span class=\"kw2\">try</span></a> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> sGrid <span class=\"sy0\">=</span> grid.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> row <span class=\"sy0\">-&gt;</span> row.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> cell <span class=\"sy0\">-&gt;</span> cell <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>                sGrid<span class=\"br0\">[</span>slot.<span class=\"me1\">i</span><span class=\"br0\">]</span><span class=\"br0\">[</span>slot.<span class=\"me1\">j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> it<br/>                grid <span class=\"sy0\">=</span> solve<span class=\"br0\">(</span>sGrid<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20catch\"><span class=\"kw2\">catch</span></a> <span class=\"br0\">(</span>GridException ge<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                grid<span class=\"br0\">[</span>slot.<span class=\"me1\">i</span><span class=\"br0\">]</span><span class=\"br0\">[</span>slot.<span class=\"me1\">j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'.'</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>isSolved<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        slots <span class=\"sy0\">=</span> assignCandidates<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20throw\"><span class=\"kw2\">throw</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> GridException<span class=\"br0\">(</span><span class=\"st0\">'Invalid Sudoku Grid, underdetermined slots: '</span> <span class=\"sy0\">+</span> slots<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    grid<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 95, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Sudoku<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> mBoard<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> mBoardSize<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> mBoxSize<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">boolean</span> mRowSubset<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">boolean</span> mColSubset<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">boolean</span> mBoxSubset<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Sudoku<span class=\"br0\">(</span><span class=\"kw4\">int</span> board<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        mBoard <span class=\"sy0\">=</span> board<span class=\"sy0\">;</span><br/>        mBoardSize <span class=\"sy0\">=</span> mBoard.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        mBoxSize <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>mBoardSize<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> initSubsets<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        mRowSubset <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span>mBoardSize<span class=\"br0\">]</span><span class=\"br0\">[</span>mBoardSize<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        mColSubset <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span>mBoardSize<span class=\"br0\">]</span><span class=\"br0\">[</span>mBoardSize<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        mBoxSubset <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span>mBoardSize<span class=\"br0\">]</span><span class=\"br0\">[</span>mBoardSize<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> mBoard.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> mBoard.<span class=\"me1\">length</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> value <span class=\"sy0\">=</span> mBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span>value <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    setSubsetValue<span class=\"br0\">(</span>i, j, value, <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> setSubsetValue<span class=\"br0\">(</span><span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> j, <span class=\"kw4\">int</span> value, <span class=\"kw4\">boolean</span> present<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        mRowSubset<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>value <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> present<span class=\"sy0\">;</span><br/>        mColSubset<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>value <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> present<span class=\"sy0\">;</span><br/>        mBoxSubset<span class=\"br0\">[</span>computeBoxNo<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span>value <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> present<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> solve<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> solve<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> solve<span class=\"br0\">(</span><span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">==</span> mBoardSize<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">++</span>j <span class=\"sy0\">==</span> mBoardSize<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>mBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> solve<span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> value <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> value <span class=\"sy0\">&lt;=</span> mBoardSize<span class=\"sy0\">;</span> value<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>isValid<span class=\"br0\">(</span>i, j, value<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                mBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> value<span class=\"sy0\">;</span><br/>                setSubsetValue<span class=\"br0\">(</span>i, j, value, <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span>solve<span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                setSubsetValue<span class=\"br0\">(</span>i, j, value, <span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        mBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">boolean</span> isValid<span class=\"br0\">(</span><span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> j, <span class=\"kw4\">int</span> val<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        val<span class=\"sy0\">--;</span><br/>        <span class=\"kw4\">boolean</span> isPresent <span class=\"sy0\">=</span> mRowSubset<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>val<span class=\"br0\">]</span> <span class=\"sy0\">||</span> mColSubset<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>val<span class=\"br0\">]</span> <span class=\"sy0\">||</span> mBoxSubset<span class=\"br0\">[</span>computeBoxNo<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span>val<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy0\">!</span>isPresent<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> computeBoxNo<span class=\"br0\">(</span><span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> boxRow <span class=\"sy0\">=</span> i <span class=\"sy0\">/</span> mBoxSize<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> boxCol <span class=\"sy0\">=</span> j <span class=\"sy0\">/</span> mBoxSize<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> boxRow <span class=\"sy0\">*</span> mBoxSize <span class=\"sy0\">+</span> boxCol<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> mBoardSize<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">%</span> mBoxSize <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\" -----------------------\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> mBoardSize<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span>j <span class=\"sy0\">%</span> mBoxSize <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"| \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>mBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>mBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\" -----------------------\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "J", "loc": 95, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Sudoku<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> mBoard<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> mBoardSize<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> mBoxSize<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">boolean</span> mRowSubset<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">boolean</span> mColSubset<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">boolean</span> mBoxSubset<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Sudoku<span class=\"br0\">(</span><span class=\"kw4\">int</span> board<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        mBoard <span class=\"sy0\">=</span> board<span class=\"sy0\">;</span><br/>        mBoardSize <span class=\"sy0\">=</span> mBoard.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        mBoxSize <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>mBoardSize<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> initSubsets<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        mRowSubset <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span>mBoardSize<span class=\"br0\">]</span><span class=\"br0\">[</span>mBoardSize<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        mColSubset <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span>mBoardSize<span class=\"br0\">]</span><span class=\"br0\">[</span>mBoardSize<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        mBoxSubset <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span>mBoardSize<span class=\"br0\">]</span><span class=\"br0\">[</span>mBoardSize<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> mBoard.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> mBoard.<span class=\"me1\">length</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> value <span class=\"sy0\">=</span> mBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span>value <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    setSubsetValue<span class=\"br0\">(</span>i, j, value, <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> setSubsetValue<span class=\"br0\">(</span><span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> j, <span class=\"kw4\">int</span> value, <span class=\"kw4\">boolean</span> present<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        mRowSubset<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>value <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> present<span class=\"sy0\">;</span><br/>        mColSubset<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>value <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> present<span class=\"sy0\">;</span><br/>        mBoxSubset<span class=\"br0\">[</span>computeBoxNo<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span>value <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> present<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> solve<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> solve<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> solve<span class=\"br0\">(</span><span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">==</span> mBoardSize<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">++</span>j <span class=\"sy0\">==</span> mBoardSize<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>mBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> solve<span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> value <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> value <span class=\"sy0\">&lt;=</span> mBoardSize<span class=\"sy0\">;</span> value<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>isValid<span class=\"br0\">(</span>i, j, value<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                mBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> value<span class=\"sy0\">;</span><br/>                setSubsetValue<span class=\"br0\">(</span>i, j, value, <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span>solve<span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                setSubsetValue<span class=\"br0\">(</span>i, j, value, <span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        mBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">boolean</span> isValid<span class=\"br0\">(</span><span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> j, <span class=\"kw4\">int</span> val<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        val<span class=\"sy0\">--;</span><br/>        <span class=\"kw4\">boolean</span> isPresent <span class=\"sy0\">=</span> mRowSubset<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>val<span class=\"br0\">]</span> <span class=\"sy0\">||</span> mColSubset<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>val<span class=\"br0\">]</span> <span class=\"sy0\">||</span> mBoxSubset<span class=\"br0\">[</span>computeBoxNo<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span>val<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy0\">!</span>isPresent<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> computeBoxNo<span class=\"br0\">(</span><span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> boxRow <span class=\"sy0\">=</span> i <span class=\"sy0\">/</span> mBoxSize<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> boxCol <span class=\"sy0\">=</span> j <span class=\"sy0\">/</span> mBoxSize<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> boxRow <span class=\"sy0\">*</span> mBoxSize <span class=\"sy0\">+</span> boxCol<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> mBoardSize<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">%</span> mBoxSize <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\" -----------------------\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> mBoardSize<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span>j <span class=\"sy0\">%</span> mBoxSize <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"| \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>mBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>mBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\" -----------------------\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Java", "loc": 95, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Sudoku<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> mBoard<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> mBoardSize<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> mBoxSize<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">boolean</span> mRowSubset<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">boolean</span> mColSubset<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">boolean</span> mBoxSubset<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Sudoku<span class=\"br0\">(</span><span class=\"kw4\">int</span> board<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        mBoard <span class=\"sy0\">=</span> board<span class=\"sy0\">;</span><br/>        mBoardSize <span class=\"sy0\">=</span> mBoard.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        mBoxSize <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>mBoardSize<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> initSubsets<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        mRowSubset <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span>mBoardSize<span class=\"br0\">]</span><span class=\"br0\">[</span>mBoardSize<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        mColSubset <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span>mBoardSize<span class=\"br0\">]</span><span class=\"br0\">[</span>mBoardSize<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        mBoxSubset <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span>mBoardSize<span class=\"br0\">]</span><span class=\"br0\">[</span>mBoardSize<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> mBoard.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> mBoard.<span class=\"me1\">length</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> value <span class=\"sy0\">=</span> mBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span>value <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    setSubsetValue<span class=\"br0\">(</span>i, j, value, <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> setSubsetValue<span class=\"br0\">(</span><span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> j, <span class=\"kw4\">int</span> value, <span class=\"kw4\">boolean</span> present<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        mRowSubset<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>value <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> present<span class=\"sy0\">;</span><br/>        mColSubset<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>value <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> present<span class=\"sy0\">;</span><br/>        mBoxSubset<span class=\"br0\">[</span>computeBoxNo<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span>value <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> present<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> solve<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> solve<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">boolean</span> solve<span class=\"br0\">(</span><span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">==</span> mBoardSize<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">++</span>j <span class=\"sy0\">==</span> mBoardSize<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>mBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> solve<span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> value <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> value <span class=\"sy0\">&lt;=</span> mBoardSize<span class=\"sy0\">;</span> value<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>isValid<span class=\"br0\">(</span>i, j, value<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                mBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> value<span class=\"sy0\">;</span><br/>                setSubsetValue<span class=\"br0\">(</span>i, j, value, <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span>solve<span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                setSubsetValue<span class=\"br0\">(</span>i, j, value, <span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        mBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">boolean</span> isValid<span class=\"br0\">(</span><span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> j, <span class=\"kw4\">int</span> val<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        val<span class=\"sy0\">--;</span><br/>        <span class=\"kw4\">boolean</span> isPresent <span class=\"sy0\">=</span> mRowSubset<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>val<span class=\"br0\">]</span> <span class=\"sy0\">||</span> mColSubset<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>val<span class=\"br0\">]</span> <span class=\"sy0\">||</span> mBoxSubset<span class=\"br0\">[</span>computeBoxNo<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span>val<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy0\">!</span>isPresent<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> computeBoxNo<span class=\"br0\">(</span><span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> boxRow <span class=\"sy0\">=</span> i <span class=\"sy0\">/</span> mBoxSize<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> boxCol <span class=\"sy0\">=</span> j <span class=\"sy0\">/</span> mBoxSize<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> boxRow <span class=\"sy0\">*</span> mBoxSize <span class=\"sy0\">+</span> boxCol<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> mBoardSize<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">%</span> mBoxSize <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\" -----------------------\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> mBoardSize<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span>j <span class=\"sy0\">%</span> mBoxSize <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"| \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>mBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>mBoard<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\" -----------------------\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 274, "block": "<pre class=\"javascript highlighted_source\"><span class=\"co1\">//-------------------------------------------[ Dancing Links and Algorithm X ]--</span><br/><span class=\"coMULTI\">/**<br/> * The doubly-doubly circularly linked data object.<br/> * Data object X<br/> */</span><br/><span class=\"kw5\">class</span> DoX <span class=\"br0\">{</span><br/>  <span class=\"coMULTI\">/**<br/>   * @param {string} V<br/>   * @param {!DoX=} H<br/>   */</span><br/>  constructor<span class=\"br0\">(</span>V<span class=\"sy0\">,</span> H<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">V</span> <span class=\"sy0\">=</span> V<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">L</span> <span class=\"sy0\">=</span> <span class=\"kw1\">this</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">R</span> <span class=\"sy0\">=</span> <span class=\"kw1\">this</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">U</span> <span class=\"sy0\">=</span> <span class=\"kw1\">this</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">D</span> <span class=\"sy0\">=</span> <span class=\"kw1\">this</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">S</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">H</span> <span class=\"sy0\">=</span> H <span class=\"sy0\">||</span> <span class=\"kw1\">this</span><span class=\"sy0\">;</span><br/>    H <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>H.<span class=\"me1\">S</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Helper function to help build a horizontal doubly linked list.<br/> * @param {!DoX} e An existing node in the list.<br/> * @param {!DoX} n A new node to add to the right of the existing node.<br/> * @return {!DoX}<br/> */</span><br/><span class=\"kw1\">const</span> addRight <span class=\"sy0\">=</span> <span class=\"br0\">(</span>e<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>  n.<span class=\"me1\">R</span> <span class=\"sy0\">=</span> e.<span class=\"me1\">R</span><span class=\"sy0\">;</span><br/>  n.<span class=\"me1\">L</span> <span class=\"sy0\">=</span> e<span class=\"sy0\">;</span><br/>  e.<span class=\"me1\">R</span>.<span class=\"me1\">L</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> e.<span class=\"me1\">R</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Helper function to help build a vertical doubly linked list.<br/> * @param {!DoX} e An existing node in the list.<br/> * @param {!DoX} n A new node to add below the existing node.<br/> */</span><br/><span class=\"kw1\">const</span> addBelow <span class=\"sy0\">=</span> <span class=\"br0\">(</span>e<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>  n.<span class=\"me1\">D</span> <span class=\"sy0\">=</span> e.<span class=\"me1\">D</span><span class=\"sy0\">;</span><br/>  n.<span class=\"me1\">U</span> <span class=\"sy0\">=</span> e<span class=\"sy0\">;</span><br/>  e.<span class=\"me1\">D</span>.<span class=\"me1\">U</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> e.<span class=\"me1\">D</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Verbatim copy of DK's search algorithm. The meat of the DLX algorithm.<br/> * @param {!DoX} h The root node.<br/> * @param {!Array&lt;!DoX&gt;} s The solution array.<br/> */</span><br/><span class=\"kw1\">const</span> search <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>h<span class=\"sy0\">,</span> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>h.<span class=\"me1\">R</span> <span class=\"sy0\">==</span> h<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    printSol<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    let c <span class=\"sy0\">=</span> chooseColumn<span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    cover<span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>let r <span class=\"sy0\">=</span> c.<span class=\"me1\">D</span><span class=\"sy0\">;</span> r <span class=\"sy0\">!=</span> c<span class=\"sy0\">;</span> r <span class=\"sy0\">=</span> r.<span class=\"me1\">D</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      s.<span class=\"me1\">push</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>let j <span class=\"sy0\">=</span> r.<span class=\"me1\">R</span><span class=\"sy0\">;</span> r <span class=\"sy0\">!=</span>j<span class=\"sy0\">;</span> j <span class=\"sy0\">=</span> j.<span class=\"me1\">R</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        cover<span class=\"br0\">(</span>j.<span class=\"me1\">H</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      search<span class=\"br0\">(</span>h<span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      r <span class=\"sy0\">=</span> s.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>let j <span class=\"sy0\">=</span> r.<span class=\"me1\">R</span><span class=\"sy0\">;</span> j <span class=\"sy0\">!=</span> r<span class=\"sy0\">;</span> j <span class=\"sy0\">=</span> j.<span class=\"me1\">R</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        uncover<span class=\"br0\">(</span>j.<span class=\"me1\">H</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    uncover<span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Verbatim copy of DK's algorithm for choosing the next column object.<br/> * @param {!DoX} h<br/> * @return {!DoX}<br/> */</span><br/><span class=\"kw1\">const</span> chooseColumn <span class=\"sy0\">=</span> h <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>  let s <span class=\"sy0\">=</span> <span class=\"kw4\">Number</span>.<span class=\"me1\">POSITIVE_INFINITY</span><span class=\"sy0\">;</span><br/>  let c <span class=\"sy0\">=</span> h<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>let j <span class=\"sy0\">=</span> h.<span class=\"me1\">R</span><span class=\"sy0\">;</span> j <span class=\"sy0\">!=</span> h<span class=\"sy0\">;</span> j <span class=\"sy0\">=</span> j.<span class=\"me1\">R</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j.<span class=\"me1\">S</span> <span class=\"sy0\">&lt;</span> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      c <span class=\"sy0\">=</span> j<span class=\"sy0\">;</span><br/>      s <span class=\"sy0\">=</span> j.<span class=\"me1\">S</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> c<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Verbatim copy of DK's cover algorithm<br/> * @param {!DoX} c<br/> */</span><br/><span class=\"kw1\">const</span> cover <span class=\"sy0\">=</span> c <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>  c.<span class=\"me1\">L</span>.<span class=\"me1\">R</span> <span class=\"sy0\">=</span> c.<span class=\"me1\">R</span><span class=\"sy0\">;</span><br/>  c.<span class=\"me1\">R</span>.<span class=\"me1\">L</span> <span class=\"sy0\">=</span> c.<span class=\"me1\">L</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>let i <span class=\"sy0\">=</span> c.<span class=\"me1\">D</span><span class=\"sy0\">;</span> i <span class=\"sy0\">!=</span> c<span class=\"sy0\">;</span> i <span class=\"sy0\">=</span> i.<span class=\"me1\">D</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>let j <span class=\"sy0\">=</span> i.<span class=\"me1\">R</span><span class=\"sy0\">;</span> j <span class=\"sy0\">!=</span> i<span class=\"sy0\">;</span> j <span class=\"sy0\">=</span> j.<span class=\"me1\">R</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      j.<span class=\"me1\">U</span>.<span class=\"me1\">D</span> <span class=\"sy0\">=</span> j.<span class=\"me1\">D</span><span class=\"sy0\">;</span><br/>      j.<span class=\"me1\">D</span>.<span class=\"me1\">U</span> <span class=\"sy0\">=</span> j.<span class=\"me1\">U</span><span class=\"sy0\">;</span><br/>      j.<span class=\"me1\">H</span>.<span class=\"me1\">S</span> <span class=\"sy0\">=</span> j.<span class=\"me1\">H</span>.<span class=\"me1\">S</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Verbatim copy of DK's cover algorithm<br/> * @param {!DoX} c<br/> */</span><br/><span class=\"kw1\">const</span> uncover <span class=\"sy0\">=</span> c <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>let i <span class=\"sy0\">=</span> c.<span class=\"me1\">U</span><span class=\"sy0\">;</span> i <span class=\"sy0\">!=</span> c<span class=\"sy0\">;</span> i <span class=\"sy0\">=</span> i.<span class=\"me1\">U</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>let j <span class=\"sy0\">=</span> i.<span class=\"me1\">L</span><span class=\"sy0\">;</span> i <span class=\"sy0\">!=</span> j<span class=\"sy0\">;</span> j <span class=\"sy0\">=</span> j.<span class=\"me1\">L</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      j.<span class=\"me1\">H</span>.<span class=\"me1\">S</span> <span class=\"sy0\">=</span> j.<span class=\"me1\">H</span>.<span class=\"me1\">S</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      j.<span class=\"me1\">U</span>.<span class=\"me1\">D</span> <span class=\"sy0\">=</span> j<span class=\"sy0\">;</span><br/>      j.<span class=\"me1\">D</span>.<span class=\"me1\">U</span> <span class=\"sy0\">=</span> j<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  c.<span class=\"me1\">L</span>.<span class=\"me1\">R</span> <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span><br/>  c.<span class=\"me1\">R</span>.<span class=\"me1\">L</span> <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">//-----------------------------------------------------------[ Print Helpers ]--</span><br/><span class=\"coMULTI\">/**<br/> * Given the standard string format of a grid, print a formatted view of it.<br/> * @param {!string|!Array} a<br/> */</span><br/><span class=\"kw1\">const</span> printGrid <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"kw1\">const</span> getChar <span class=\"sy0\">=</span> c <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    let r <span class=\"sy0\">=</span> <span class=\"kw4\">Number</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isNaN<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> c <span class=\"br0\">}</span><br/>\u00a0<br/>    let o <span class=\"sy0\">=</span> <span class=\"nu0\">48</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r <span class=\"sy0\">&gt;</span> <span class=\"nu0\">9</span> <span class=\"sy0\">&amp;&amp;</span> r <span class=\"sy0\">&lt;</span> <span class=\"nu0\">36</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> o <span class=\"sy0\">=</span> <span class=\"nu0\">55</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">36</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> o <span class=\"sy0\">=</span> <span class=\"nu0\">61</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">String</span>.<span class=\"me1\">fromCharCode</span><span class=\"br0\">(</span>r <span class=\"sy0\">+</span> o<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  a <span class=\"sy0\">=</span> <span class=\"st0\">'string'</span> <span class=\"sy0\">==</span> <span class=\"kw1\">typeof</span> a <span class=\"sy0\">?</span> a.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> a<span class=\"sy0\">;</span><br/>\u00a0<br/>  let U <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>a.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  let N <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>U<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  let line <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span>.<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"st0\">'+'</span><span class=\"br0\">)</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    p.<span class=\"me1\">push</span><span class=\"br0\">(</span>... <span class=\"kw4\">Array</span>.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> N<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"st0\">'-'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    p.<span class=\"me1\">push</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> p<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">'<span class=\"es0\">\\n</span>+'</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  a <span class=\"sy0\">=</span> a.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      let d <span class=\"sy0\">=</span> i <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">%</span> U<span class=\"br0\">)</span><span class=\"sy0\">,</span> G <span class=\"sy0\">=</span> i <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">%</span> N<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      i <span class=\"sy0\">=</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"br0\">(</span>U <span class=\"sy0\">*</span> N<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      d <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>i <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>p <span class=\"sy0\">+=</span> <span class=\"st0\">'|<span class=\"es0\">\\n</span>| '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      d <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>p <span class=\"sy0\">+=</span> <span class=\"st0\">'|'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      i <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>p <span class=\"sy0\">=</span> <span class=\"st0\">''</span> <span class=\"sy0\">+</span> p <span class=\"sy0\">+</span> line <span class=\"sy0\">+</span> <span class=\"st0\">'| '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span> <span class=\"st0\">''</span> <span class=\"sy0\">+</span> p <span class=\"sy0\">+</span> <span class=\"br0\">(</span>G <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>d <span class=\"sy0\">?</span> <span class=\"st0\">'| '</span> <span class=\"sy0\">:</span> <span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> getChar<span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'|'</span> <span class=\"sy0\">+</span> line<span class=\"sy0\">;</span><br/>  console.<span class=\"me1\">log</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Given a search solution, print the resultant grid.<br/> * @param {!Array&lt;!DoX&gt;} a An array of data objects<br/> */</span><br/><span class=\"kw1\">const</span> printSol <span class=\"sy0\">=</span> a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>  printGrid<span class=\"br0\">(</span>a.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    let <span class=\"br0\">[</span>i<span class=\"sy0\">,</span> v<span class=\"br0\">]</span> <span class=\"sy0\">=</span> c.<span class=\"me1\">V</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">':'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    p<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> v<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> p<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>a.<span class=\"me1\">length</span><span class=\"br0\">)</span>.<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">//----------------------------------------------[ Grid to Exact cover Matrix ]--</span><br/><span class=\"coMULTI\">/**<br/> * Helper to get some meta about the grid.<br/> * @param {!string} s The standard string representation of a grid.<br/> * @return {!Array}<br/> */</span><br/><span class=\"kw1\">const</span> gridMeta <span class=\"sy0\">=</span> s <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">const</span> g <span class=\"sy0\">=</span> s.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">const</span> cellCount <span class=\"sy0\">=</span> g.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">const</span> tokenCount <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>cellCount<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">const</span> N <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>tokenCount<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">const</span> g2D <span class=\"sy0\">=</span> g.<span class=\"me1\">map</span><span class=\"br0\">(</span>e <span class=\"sy0\">=&gt;</span> isNaN<span class=\"br0\">(</span>e <span class=\"sy0\">*</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span><br/>    <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>tokenCount<span class=\"br0\">)</span>.<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"br0\">(</span>_<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><br/>    <span class=\"br0\">[</span>e <span class=\"sy0\">*</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">[</span>cellCount<span class=\"sy0\">,</span> N<span class=\"sy0\">,</span> tokenCount<span class=\"sy0\">,</span> g2D<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Given a cell grid index, return the row, column and box indexes.<br/> * @param {!number} n The n-value of the grid. 3 for a 9x9 sudoku.<br/> * @return {!function(!number):\u00a0!Array&lt;!number&gt;}<br/> */</span><br/><span class=\"kw1\">const</span> indexesN <span class=\"sy0\">=</span> n <span class=\"sy0\">=&gt;</span> i <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    let c <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>i <span class=\"sy0\">/</span> <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    i <span class=\"sy0\">%=</span> n <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>c<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>c <span class=\"sy0\">/</span> n<span class=\"br0\">)</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">+</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>i <span class=\"sy0\">/</span> n<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Given a puzzle string, reduce it to an exact-cover matrix and use<br/> * Donald Knuth's DLX algorithm to solve it.<br/> * @param puzString<br/> */</span><br/><span class=\"kw1\">const</span> reduceGrid <span class=\"sy0\">=</span> puzString <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>\u00a0<br/>  printGrid<span class=\"br0\">(</span>puzString<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">const</span> <span class=\"br0\">[</span><br/>    numCells<span class=\"sy0\">,</span>   <span class=\"co1\">// The total number of cells in a grid (81 for a 9x9 grid)</span><br/>    N<span class=\"sy0\">,</span>          <span class=\"co1\">// the 'n' value of the grid. (3 for a 9x9 grid)</span><br/>    U<span class=\"sy0\">,</span>          <span class=\"co1\">// The total number of unique tokens to be placed.</span><br/>    g2D         <span class=\"co1\">// A 2D array representation of the grid, with each element</span><br/>                <span class=\"co1\">// being an array of candidates for a cell. Known cells are</span><br/>                <span class=\"co1\">// single element arrays.</span><br/>  <span class=\"br0\">]</span> <span class=\"sy0\">=</span> gridMeta<span class=\"br0\">(</span>puzString<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">const</span> getIndex <span class=\"sy0\">=</span> indexesN<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/**<br/>   * The DLX Header row.<br/>   * Its length is 4 times the grid's size. This is to be able to encode<br/>   * each of the 4 Sudoku constrains, onto each of the cells of the grid.<br/>   * The array is initialised with unlinked DoX nodes, but in the next step<br/>   * those nodes are all linked.<br/>   * @type {!Array.&lt;!DoX&gt;}<br/>   */</span><br/>  <span class=\"kw1\">const</span> headRow <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"sy0\">*</span> numCells<span class=\"br0\">)</span><br/>    .<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"br0\">(</span>_<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw1\">new</span> DoX<span class=\"br0\">(</span>`H$<span class=\"br0\">{</span>i<span class=\"br0\">}</span>`<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/**<br/>   * The header row root object. This is circularly linked to be to the left<br/>   * of the first header object in the header row array.<br/>   * It is used as the entry point into the DLX algorithm.<br/>   * @type {!DoX}<br/>   */</span><br/>  let H <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> DoX<span class=\"br0\">(</span><span class=\"st0\">'ROOT'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  headRow.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> addRight<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> c<span class=\"br0\">)</span><span class=\"sy0\">,</span> H<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/**<br/>   * Transposed the sudoku puzzle into a exact cover matrix, so it can be passed<br/>   * to the DLX algorithm to solve.<br/>   */</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>let i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> numCells<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">const</span> <span class=\"br0\">[</span>ri<span class=\"sy0\">,</span> ci<span class=\"sy0\">,</span> bi<span class=\"br0\">]</span> <span class=\"sy0\">=</span> getIndex<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    g2D<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">forEach</span><span class=\"br0\">(</span>num <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>      let id <span class=\"sy0\">=</span> `$<span class=\"br0\">{</span>i<span class=\"br0\">}</span><span class=\"sy0\">:</span>$<span class=\"br0\">{</span>num<span class=\"br0\">}</span>`<span class=\"sy0\">;</span><br/>      let candIdx <span class=\"sy0\">=</span> num <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"co1\">// The 4 columns that we will populate.</span><br/>      <span class=\"kw1\">const</span> A <span class=\"sy0\">=</span> headRow<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">const</span> B <span class=\"sy0\">=</span> headRow<span class=\"br0\">[</span>numCells <span class=\"sy0\">+</span> candIdx <span class=\"sy0\">+</span> <span class=\"br0\">(</span>ri <span class=\"sy0\">*</span> U<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">const</span> C <span class=\"sy0\">=</span> headRow<span class=\"br0\">[</span><span class=\"br0\">(</span>numCells <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> candIdx <span class=\"sy0\">+</span> <span class=\"br0\">(</span>ci <span class=\"sy0\">*</span> U<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">const</span> D <span class=\"sy0\">=</span> headRow<span class=\"br0\">[</span><span class=\"br0\">(</span>numCells <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> candIdx <span class=\"sy0\">+</span> <span class=\"br0\">(</span>bi <span class=\"sy0\">*</span> U<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"co1\">// The Row-Column Constraint</span><br/>      let rcc <span class=\"sy0\">=</span> addBelow<span class=\"br0\">(</span>A.<span class=\"me1\">U</span><span class=\"sy0\">,</span> <span class=\"kw1\">new</span> DoX<span class=\"br0\">(</span>id<span class=\"sy0\">,</span> A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"co1\">// The Row-Number Constraint</span><br/>      let rnc <span class=\"sy0\">=</span> addBelow<span class=\"br0\">(</span>B.<span class=\"me1\">U</span><span class=\"sy0\">,</span> addRight<span class=\"br0\">(</span>rcc<span class=\"sy0\">,</span> <span class=\"kw1\">new</span> DoX<span class=\"br0\">(</span>id<span class=\"sy0\">,</span> B<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"co1\">// The Column-Number Constraint</span><br/>      let cnc <span class=\"sy0\">=</span> addBelow<span class=\"br0\">(</span>C.<span class=\"me1\">U</span><span class=\"sy0\">,</span> addRight<span class=\"br0\">(</span>rnc<span class=\"sy0\">,</span> <span class=\"kw1\">new</span> DoX<span class=\"br0\">(</span>id<span class=\"sy0\">,</span> C<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"co1\">// The Block-Number Constraint</span><br/>      addBelow<span class=\"br0\">(</span>D.<span class=\"me1\">U</span><span class=\"sy0\">,</span> addRight<span class=\"br0\">(</span>cnc<span class=\"sy0\">,</span> <span class=\"kw1\">new</span> DoX<span class=\"br0\">(</span>id<span class=\"sy0\">,</span> D<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  search<span class=\"br0\">(</span>H<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 67, "block": "<pre class=\"text highlighted_source\">function check(i, j)<br/>    id, im = div(i, 9), mod(i, 9)<br/>    jd, jm = div(j, 9), mod(j, 9)<br/>\u00a0<br/>    jd == id &amp;&amp; return true<br/>    jm == im &amp;&amp; return true<br/>\u00a0<br/>    div(id, 3) == div(jd, 3) &amp;&amp;<br/>    div(jm, 3) == div(im, 3)<br/>end<br/>\u00a0<br/>const lookup = zeros(Bool, 81, 81)<br/>\u00a0<br/>for i in 1:81<br/>    for j in 1:81<br/>        lookup[i,j] = check(i-1, j-1)<br/>    end<br/>end<br/>\u00a0<br/>function solve_sudoku(callback::Function, grid::Array{Int64})<br/>    (function solve()<br/>        for i in 1:81<br/>            if grid[i] == 0<br/>                t = Dict{Int64, Void}()<br/>\u00a0<br/>                for j in 1:81<br/>                    if lookup[i,j]<br/>                        t[grid[j]] = nothing<br/>                    end<br/>                end<br/>\u00a0<br/>                for k in 1:9<br/>                    if\u00a0!haskey(t, k)<br/>                        grid[i] = k<br/>                        solve()<br/>                    end<br/>                end<br/>\u00a0<br/>                grid[i] = 0<br/>                return<br/>            end<br/>        end<br/>\u00a0<br/>        callback(grid)<br/>    end)()<br/>end<br/>\u00a0<br/>function display(grid)<br/>    for i in 1:length(grid)<br/>        print(grid[i], \" \")<br/>        i\u00a0%  3 == 0 &amp;&amp; print(\" \")<br/>        i\u00a0%  9 == 0 &amp;&amp; print(\"\\n\")<br/>        i\u00a0% 27 == 0 &amp;&amp; print(\"\\n\")<br/>    end<br/>end<br/>\u00a0<br/>grid = Int64[5, 3, 0, 0, 2, 4, 7, 0, 0,<br/>             0, 0, 2, 0, 0, 0, 8, 0, 0,<br/>             1, 0, 0, 7, 0, 3, 9, 0, 2,<br/>             0, 0, 8, 0, 7, 2, 0, 4, 9,<br/>             0, 2, 0, 9, 8, 0, 0, 7, 0,<br/>             7, 9, 0, 0, 0, 0, 0, 8, 0,<br/>             0, 0, 0, 0, 3, 0, 5, 0, 6,<br/>             9, 6, 0, 0, 1, 0, 3, 0, 0,<br/>             0, 5, 0, 6, 9, 0, 0, 1, 0]<br/>\u00a0<br/>solve_sudoku(display, grid)</pre>"}, {"lang": "Kotlin", "loc": 84, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.10</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Sudoku<span class=\"br0\">(</span>rows<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> grid <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span><span class=\"nu0\">81</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> solved <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>        require<span class=\"br0\">(</span>rows.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">9</span> <span class=\"sy0\">&amp;&amp;</span> rows.<span class=\"me1\">all</span> <span class=\"br0\">{</span> it.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">9</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"st0\">\"Grid must be 9 x 9\"</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span>..<span class=\"nu0\">8</span> <span class=\"br0\">)</span> grid<span class=\"br0\">[</span><span class=\"nu0\">9</span> <span class=\"sy0\">*</span> i + j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> rows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> - <span class=\"st0\">'0'</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun solve<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Starting grid:<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>$this\"</span><span class=\"br0\">)</span><br/>        placeNumber<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>solved<span class=\"br0\">)</span> <span class=\"st0\">\"Solution:<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>$this\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"Unsolvable!\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun placeNumber<span class=\"br0\">(</span>pos<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>solved<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>pos <span class=\"sy0\">==</span> <span class=\"nu0\">81</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            solved <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            placeNumber<span class=\"br0\">(</span>pos + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n in <span class=\"nu0\">1</span>..<span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>checkValidity<span class=\"br0\">(</span>n, pos <span class=\"sy0\">%</span> <span class=\"nu0\">9</span>, pos / <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<br/>                placeNumber<span class=\"br0\">(</span>pos + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>solved<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>                grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun checkValidity<span class=\"br0\">(</span>v<span class=\"sy0\">:</span> Int, x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> + i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> v || grid<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> + x<span class=\"br0\">]</span> <span class=\"sy0\">==</span> v<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> startX <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x / <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> startY <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y / <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in startY until startY + <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in startX until startX + <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> + j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> v<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sb <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span>..<span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>grid<span class=\"br0\">[</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> + j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>j <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> || j <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"| \"</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>            sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> || i <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\"------+-------+------<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rows <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>        <span class=\"st0\">\"850002400\"</span>,<br/>        <span class=\"st0\">\"720000009\"</span>,<br/>        <span class=\"st0\">\"004000000\"</span>,<br/>        <span class=\"st0\">\"000107002\"</span>,<br/>        <span class=\"st0\">\"305000900\"</span>,<br/>        <span class=\"st0\">\"040000000\"</span>,<br/>        <span class=\"st0\">\"000080070\"</span>,<br/>        <span class=\"st0\">\"017000000\"</span>,<br/>        <span class=\"st0\">\"000036040\"</span><br/>    <span class=\"br0\">)</span><br/>    Sudoku<span class=\"br0\">(</span>rows<span class=\"br0\">)</span>.<span class=\"me1\">solve</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 183, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">--9x9 sudoku solver in lua</span><br/><span class=\"co1\">--based on a branch and bound solution</span><br/><span class=\"co1\">--fields are not tried in plain order</span><br/><span class=\"co1\">--but in a way to detect dead ends earlier</span><br/>concat<span class=\"sy0\">=</span><span class=\"kw3\">table.concat</span><br/>insert<span class=\"sy0\">=</span><span class=\"kw3\">table.insert</span><br/>constraints <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span>   <span class=\"co1\">--contains a table with 3 constraints for every field</span><br/><span class=\"co1\">-- a contraint \"cons\" is a table containing all fields which must not have the same value</span><br/><span class=\"co1\">-- a field \"f\" is an integer from 1 to 81</span><br/>columns <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span>       <span class=\"co1\">--contains all column-constraints   variable \"c\"</span><br/>rows <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span>          <span class=\"co1\">--contains all row-constraints      variable \"r\"</span><br/>blocks <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span>        <span class=\"co1\">--contains all block-constraints    variable \"b\"</span><br/>\u00a0<br/><span class=\"co1\">--initialize all constraints</span><br/><span class=\"kw1\">for</span> f <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">81</span> <span class=\"kw1\">do</span><br/>  constraints<span class=\"br0\">[</span>f<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>all_constraints <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span> <span class=\"co1\">--union of colums, rows and blocks</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span> <span class=\"kw1\">do</span><br/>  columns<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    unknown <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"co1\">--number of fields not yet solved</span><br/>    unknowns <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span> <span class=\"co1\">--fields not yet solved</span><br/>  <span class=\"br0\">}</span><br/>  insert<span class=\"br0\">(</span>all_constraints<span class=\"sy0\">,</span> columns<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  rows<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    unknown <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"co1\">-- see l.15</span><br/>    unknowns <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span> <span class=\"co1\">-- see l.16</span><br/>  <span class=\"br0\">}</span><br/>  insert<span class=\"br0\">(</span>all_constraints<span class=\"sy0\">,</span> rows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  blocks<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    unknown <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"co1\">--see l.15</span><br/>    unknowns <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span> <span class=\"co1\">--see l.16</span><br/>  <span class=\"br0\">}</span><br/>  insert<span class=\"br0\">(</span>all_constraints<span class=\"sy0\">,</span> blocks<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>constraints_by_unknown <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span> <span class=\"co1\">--contraints sorted by their number of unknown fields</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span> <span class=\"kw1\">do</span><br/>  constraints_by_unknown<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"co1\">--how many contraints are in here</span><br/>  <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">for</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">for</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">local</span> f <span class=\"sy0\">=</span> <span class=\"br0\">(</span>r <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> <span class=\"sy0\">+</span> c<br/>    insert<span class=\"br0\">(</span>rows<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"sy0\">,</span> f<span class=\"br0\">)</span><br/>    insert<span class=\"br0\">(</span>constraints<span class=\"br0\">[</span>f<span class=\"br0\">]</span><span class=\"sy0\">,</span> rows<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    insert<span class=\"br0\">(</span>columns<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">,</span> f<span class=\"br0\">)</span><br/>    insert<span class=\"br0\">(</span>constraints<span class=\"br0\">[</span>f<span class=\"br0\">]</span><span class=\"sy0\">,</span> columns<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">local</span> r <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> j<br/>    <span class=\"kw1\">for</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">for</span> l <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">local</span> c <span class=\"sy0\">=</span> <span class=\"br0\">(</span>k <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> l<br/>        <span class=\"kw1\">local</span> f <span class=\"sy0\">=</span> <span class=\"br0\">(</span>r <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> <span class=\"sy0\">+</span> c<br/>        <span class=\"kw1\">local</span> b <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> k<br/>        insert<span class=\"br0\">(</span>blocks<span class=\"br0\">[</span>b<span class=\"br0\">]</span><span class=\"sy0\">,</span> f<span class=\"br0\">)</span><br/>        insert<span class=\"br0\">(</span>constraints<span class=\"br0\">[</span>f<span class=\"br0\">]</span><span class=\"sy0\">,</span> blocks<span class=\"br0\">[</span>b<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>working <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span> <span class=\"co1\">--save the read values in here</span><br/><span class=\"kw1\">function</span> <span class=\"kw3\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">--read the values from stdin</span><br/>  <span class=\"kw1\">local</span> f <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">local</span> l <span class=\"sy0\">=</span> <span class=\"kw3\">io.read</span><span class=\"br0\">(</span><span class=\"st0\">\"*a\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> d <span class=\"kw2\">in</span> l<span class=\"sy0\">:</span>gmatch<span class=\"br0\">(</span><span class=\"st0\">\"(%d)\"</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">local</span> n <span class=\"sy0\">=</span> <span class=\"kw3\">tonumber</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      working<span class=\"br0\">[</span>f<span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<br/>      <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span>cons <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>constraints<span class=\"br0\">[</span>f<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        cons<span class=\"sy0\">.</span>unknown <span class=\"sy0\">=</span> cons<span class=\"sy0\">.</span>unknown <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span>cons <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>constraints<span class=\"br0\">[</span>f<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        cons<span class=\"sy0\">.</span>unknowns<span class=\"br0\">[</span>f<span class=\"br0\">]</span> <span class=\"sy0\">=</span> f<br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    f <span class=\"sy0\">=</span> f <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw3\">assert</span><span class=\"br0\">(</span><span class=\"br0\">(</span>f <span class=\"sy0\">==</span> <span class=\"nu0\">82</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Wrong number of digits\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw3\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">function</span> printer<span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"co1\">--helper function for printing a 1-81 table </span><br/>  <span class=\"kw1\">local</span> pattern <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"kw4\">false</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"kw4\">false</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">}</span> <span class=\"co1\">--place seperators for better readability</span><br/>  <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span>r <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>pattern<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> r <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">local</span> <span class=\"kw1\">function</span> p<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> c <span class=\"kw2\">and</span> t<span class=\"br0\">[</span><span class=\"br0\">(</span>r <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> <span class=\"sy0\">+</span> c<span class=\"br0\">]</span> <span class=\"kw2\">or</span> <span class=\"st0\">\"|\"</span> <br/>      <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">local</span> line<span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"br0\">}</span><br/>      <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span>v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>pattern<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        line<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">=</span>p<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span><br/>      <span class=\"kw3\">print</span><span class=\"br0\">(</span>concat<span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"---+---+---\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>order <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span> <span class=\"co1\">--when to try a field</span><br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span>cons <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>all_constraints<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"co1\">--put all constraints in the corresponding constraints_by_unknown set</span><br/>  <span class=\"kw1\">local</span> level <span class=\"sy0\">=</span> constraints_by_unknown<span class=\"br0\">[</span>cons<span class=\"sy0\">.</span>unknown<span class=\"br0\">]</span><br/>  level<span class=\"br0\">[</span>cons<span class=\"br0\">]</span> <span class=\"sy0\">=</span> cons<br/>  level<span class=\"sy0\">.</span>count <span class=\"sy0\">=</span> level<span class=\"sy0\">.</span>count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> first<span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"co1\">--helper function to get a value from a set</span><br/>  <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> k <span class=\"sy0\">==</span> v <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">return</span> k<br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> establish_order<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">-- determine the sequence in which the fields are to be tried</span><br/>  <span class=\"kw1\">local</span> solved <span class=\"sy0\">=</span> constraints_by_unknown<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">.</span>count<br/>  <span class=\"kw1\">while</span> solved <span class=\"sy0\">&lt;</span> <span class=\"nu0\">27</span> <span class=\"kw1\">do</span> <span class=\"co1\">--there 27 constraints</span><br/>  <span class=\"co1\">--contraints with no unknown fields are considered \"solved\"</span><br/>  <span class=\"co1\">--keep in mind the actual solving happens in function branch</span><br/>    <span class=\"kw1\">local</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> constraints_by_unknown<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">.</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>      i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"co1\">-- find a unsolved contraint with the least number of unsolved fields</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">local</span> cons <span class=\"sy0\">=</span> first<span class=\"br0\">(</span>constraints_by_unknown<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> f <span class=\"sy0\">=</span> first<span class=\"br0\">(</span>cons<span class=\"sy0\">.</span>unknowns<span class=\"br0\">)</span><br/>    <span class=\"co1\">-- take one of its unknown fields and append it to \"order\"</span><br/>    insert<span class=\"br0\">(</span>order<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span>c <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>constraints<span class=\"br0\">[</span>f<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"co1\">--each constraint \"c\" of \"f\" is moved up one \"level\"</span><br/>    <span class=\"co1\">--delete \"f\" from the constraints unknown fields</span><br/>    <span class=\"co1\">--decrease unknown of \"c\"</span><br/>      c<span class=\"sy0\">.</span>unknowns<span class=\"br0\">[</span>f<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">nil</span><br/>      <span class=\"kw1\">local</span> level <span class=\"sy0\">=</span> constraints_by_unknown<span class=\"br0\">[</span>c<span class=\"sy0\">.</span>unknown<span class=\"br0\">]</span><br/>      level<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">nil</span><br/>      level<span class=\"sy0\">.</span>count <span class=\"sy0\">=</span> level<span class=\"sy0\">.</span>count <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      c<span class=\"sy0\">.</span>unknown <span class=\"sy0\">=</span> c<span class=\"sy0\">.</span>unknown <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      level <span class=\"sy0\">=</span> constraints_by_unknown<span class=\"br0\">[</span>c<span class=\"sy0\">.</span>unknown<span class=\"br0\">]</span><br/>      level<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<br/>      level<span class=\"sy0\">.</span>count <span class=\"sy0\">=</span> level<span class=\"sy0\">.</span>count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      constraints_by_unknown<span class=\"br0\">[</span>c<span class=\"sy0\">.</span>unknown<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<br/>    <span class=\"kw1\">end</span><br/>    solved <span class=\"sy0\">=</span> constraints_by_unknown<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">.</span>count<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>establish_order<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw3\">max</span> <span class=\"sy0\">=</span> <span class=\"sy0\">#</span>order <span class=\"co1\">--how many fields are to be solved</span><br/><span class=\"kw1\">function</span> bound<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span>c <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>constraints<span class=\"br0\">[</span>f<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span>x <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> i <span class=\"sy0\">==</span> working<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"kw1\">then</span> <br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"co1\">--i is already used in fs column/row/block</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> branch<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> f <span class=\"sy0\">=</span> order<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"co1\">--recursively iterate over fields in order</span><br/>  <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;</span> <span class=\"kw3\">max</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">return</span> working <span class=\"co1\">--all fields solved without collision</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span> <span class=\"kw1\">do</span> <span class=\"co1\">--check all values</span><br/>      <span class=\"kw1\">if</span> bound<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"co1\">--if there is no collision</span><br/>        working<span class=\"br0\">[</span>f<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<br/>        <span class=\"kw1\">local</span> res <span class=\"sy0\">=</span> branch<span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">--try next field</span><br/>        <span class=\"kw1\">if</span> res <span class=\"kw1\">then</span><br/>          <span class=\"kw1\">return</span> res <span class=\"co1\">--all fields solved without collision</span><br/>        <span class=\"kw1\">else</span><br/>          working<span class=\"br0\">[</span>f<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">nil</span> <span class=\"co1\">--this lead to a dead end</span><br/>        <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">else</span><br/>        working<span class=\"br0\">[</span>f<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">nil</span> <span class=\"co1\">--reset field because of a collision</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"co1\">--this is a dead end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>x <span class=\"sy0\">=</span> branch<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> x <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">return</span> printer<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica", "loc": 10, "block": "<pre class=\"text highlighted_source\">solve[sudoku_]\u00a0:= <br/> NestWhile[<br/>  Join @@ Table[<br/>     Table[ReplacePart[s, #1 -&gt; n], {n, #2}] &amp; @@ <br/>      <a class=\"__cf_email__\" data-cfemail=\"e6a08f949592a6b5899492a49f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[{#, <br/>           Complement[<a class=\"__cf_email__\" data-cfemail=\"b3e1d2ddd4d6f38a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, s[[<a class=\"__cf_email__\" data-cfemail=\"30765942434470\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#]], s[[;; , <a class=\"__cf_email__\" data-cfemail=\"6d210c1e192d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#]], <br/>            <a class=\"__cf_email__\" data-cfemail=\"99daf8edfcf7f8edfcd9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>             Extract[Partition[s, {3, 3}], Quotient[#, 3, -2]]]} &amp; /@ <br/>         Position[s, 0, {2}], <br/>        <a class=\"__cf_email__\" data-cfemail=\"b2fed7dcd5c6daf2fed3c1c6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@# &amp;], {s, #}] &amp;, {sudoku},\u00a0! FreeQ[#, 0] &amp;]</pre>"}, {"lang": "MATLAB", "loc": 353, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> solution = sudokuSolver<span class=\"br0\">(</span>sudokuGrid<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">%Define what each of the sub-boxes of the sudoku grid are by defining</span><br/>    <span class=\"co1\">%the start and end coordinates of each sub-box. The indecies represent</span><br/>    <span class=\"co1\">%the column and row of a grid coordinate on the actual sudoku grid.</span><br/>    <span class=\"co1\">%The contents of each cell with the same grid coordinates contain the</span><br/>    <span class=\"co1\">%information to determine which sub-box that grid coordinate is</span><br/>    <span class=\"co1\">%contained in on the sudoku grid. The array in position 1, i.e.</span><br/>    <span class=\"co1\">%subBoxes{row,column}(1), represents the row indecies of the subbox.</span><br/>    <span class=\"co1\">%The array in position 2, i.e. subBoxes{row,column}(2),represents the</span><br/>    <span class=\"co1\">%column indecies of the subbox.</span><br/>\u00a0<br/>    subBoxes<span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">9</span>,<span class=\"nu0\">1</span>:<span class=\"nu0\">9</span><span class=\"br0\">)</span> = <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">3</span><span class=\"br0\">)</span>,<span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span>;<br/>    subBoxes<span class=\"br0\">(</span><span class=\"nu0\">4</span>:<span class=\"nu0\">6</span>,:<span class=\"br0\">)</span>= <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"nu0\">4</span>:<span class=\"nu0\">6</span><span class=\"br0\">)</span>,<span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span>;<br/>    subBoxes<span class=\"br0\">(</span><span class=\"nu0\">7</span>:<span class=\"nu0\">9</span>,:<span class=\"br0\">)</span>= <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"nu0\">7</span>:<span class=\"nu0\">9</span><span class=\"br0\">)</span>,<span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span>;<br/>\u00a0<br/>    <span class=\"kw1\">for</span> column = <span class=\"br0\">(</span><span class=\"nu0\">4</span>:<span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> row = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">9</span><span class=\"br0\">)</span> <br/>            subBoxes<span class=\"br0\">{</span>row,column<span class=\"br0\">}</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>= <span class=\"br0\">{</span><span class=\"nu0\">4</span>:<span class=\"nu0\">6</span><span class=\"br0\">}</span>;<br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">for</span> column = <span class=\"br0\">(</span><span class=\"nu0\">7</span>:<span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> row = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">9</span><span class=\"br0\">)</span> <br/>            subBoxes<span class=\"br0\">{</span>row,column<span class=\"br0\">}</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>= <span class=\"br0\">{</span><span class=\"nu0\">7</span>:<span class=\"nu0\">9</span><span class=\"br0\">}</span>;<br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"co1\">%Generate a cell of arrays which contain the possible values of the</span><br/>    <span class=\"co1\">%sudoku grid for each cell in the grid. The possible values a specific</span><br/>    <span class=\"co1\">%grid coordinate can take share the same indices as the sudoku grid</span><br/>    <span class=\"co1\">%coordinate they represent.</span><br/>    <span class=\"co1\">%For example sudokuGrid(m,n) can be possibly filled in by the</span><br/>    <span class=\"co1\">%values stored in the array at possibleValues(m,n).</span><br/>    possibleValues<span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">9</span>,<span class=\"nu0\">1</span>:<span class=\"nu0\">9</span><span class=\"br0\">)</span> = <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>;<br/>\u00a0<br/>    <span class=\"co1\">%Filter the possibleValues so that no entry exists for coordinates that</span><br/>    <span class=\"co1\">%have already been filled in. This will replace any array with an empty</span><br/>    <span class=\"co1\">%array in the possibleValues cell matrix at the coordinates of a grid</span><br/>    <span class=\"co1\">%already filled in the sudoku grid.</span><br/>    possibleValues<span class=\"br0\">(</span> ~isnan<span class=\"br0\">(</span>sudokuGrid<span class=\"br0\">)</span> <span class=\"br0\">)</span>=<span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span>;<br/>\u00a0<br/>    <span class=\"co1\">%Iterate through each grid coordinate and filter out the possible</span><br/>    <span class=\"co1\">%values for that grid point that aren't alowed by the rules given the</span><br/>    <span class=\"co1\">%current values that are filled in. Or, if there is only one possible</span><br/>    <span class=\"co1\">%value for the current coordinate, fill it in.</span><br/>\u00a0<br/>    solution = sudokuGrid; <span class=\"co1\">%so the original sudoku input isn't modified</span><br/>    memory = <span class=\"nu0\">0</span>; <span class=\"co1\">%contains the previous iterations possibleValues</span><br/>    dontStop = true; <span class=\"co1\">%stops the while loop when nothing else can be reasoned about the sudoku</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> dontStop <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">%% Process of elimination deduction method</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span> ~isequal<span class=\"br0\">(</span>possibleValues,memory<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"co1\">%Stops using the process of elimination deduction method when this deduction rule stops working</span><br/>\u00a0<br/>            memory = possibleValues; <span class=\"co1\">%Copies the current possibleValues into memory, for the above conditional on the next iteration.</span><br/>\u00a0<br/>            <span class=\"co1\">%Iterate through everything</span><br/>            <span class=\"kw1\">for</span> row = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">9</span><span class=\"br0\">)</span> <br/>                <span class=\"kw1\">for</span> column = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>\u00a0<br/>                    <span class=\"kw1\">if</span> isnan<span class=\"br0\">(</span> solution<span class=\"br0\">(</span>row,column<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"co1\">%If grid coordinate hasn't been filled in, try to determine it's value.</span><br/>\u00a0<br/>                        <span class=\"co1\">%Look at column to see what values have already</span><br/>                        <span class=\"co1\">%been filled in and thus the current grid</span><br/>                        <span class=\"co1\">%coordinate can't be</span><br/>                        removableValues = solution<span class=\"br0\">(</span> ~isnan<span class=\"br0\">(</span>solution<span class=\"br0\">(</span>:,column<span class=\"br0\">)</span><span class=\"br0\">)</span>,column <span class=\"br0\">)</span>;<br/>\u00a0<br/>                        <span class=\"co1\">%If there are any values that have been assigned to</span><br/>                        <span class=\"co1\">%other cells in the same column, filter those out</span><br/>                        <span class=\"co1\">%of the current cell's possiblValues</span><br/>                        <span class=\"kw1\">if</span> ~isempty<span class=\"br0\">(</span>removableValues<span class=\"br0\">)</span><br/>                            <span class=\"kw1\">for</span> m = <span class=\"br0\">(</span> <span class=\"nu0\">1</span>:numel<span class=\"br0\">(</span>removableValues<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>                                possibleValues<span class=\"br0\">{</span>row,column<span class=\"br0\">}</span><span class=\"br0\">(</span> possibleValues<span class=\"br0\">{</span>row,column<span class=\"br0\">}</span>==removableValues<span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"br0\">)</span>=<span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/>                            <span class=\"kw1\">end</span><br/>                        <span class=\"kw1\">end</span><br/>\u00a0<br/>                        <span class=\"co1\">%If the current grid coordinate can only atain one</span><br/>                        <span class=\"co1\">%possible value, assign it that value</span><br/>                        <span class=\"kw1\">if</span> numel<span class=\"br0\">(</span> possibleValues<span class=\"br0\">{</span>row,column<span class=\"br0\">}</span> <span class=\"br0\">)</span> == <span class=\"nu0\">1</span><br/>                            solution<span class=\"br0\">(</span>row,column<span class=\"br0\">)</span> = possibleValues<span class=\"br0\">{</span>row,column<span class=\"br0\">}</span>;<br/>                            possibleValues<span class=\"br0\">(</span>row,column<span class=\"br0\">)</span>=<span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span>;<br/>                        <span class=\"kw1\">end</span><br/>                    <span class=\"kw1\">end</span>  <span class=\"co1\">%end if</span><br/>\u00a0<br/>                    <span class=\"kw1\">if</span> isnan<span class=\"br0\">(</span> solution<span class=\"br0\">(</span>row,column<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"co1\">%If grid coordinate hasn't been filled in, try to determine it's value. </span><br/>\u00a0<br/>                        <span class=\"co1\">%Look at row to see what values have already</span><br/>                        <span class=\"co1\">%been filled in and thus the current grid</span><br/>                        <span class=\"co1\">%coordinate can't be</span><br/>                        removableValues = solution<span class=\"br0\">(</span> row,~isnan<span class=\"br0\">(</span>solution<span class=\"br0\">(</span>row,:<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>;<br/>\u00a0<br/>                        <span class=\"co1\">%If there are any values that have been assigned to</span><br/>                        <span class=\"co1\">%other cells in the same row, filter those out</span><br/>                        <span class=\"co1\">%of the current cell's possiblValues</span><br/>                        <span class=\"kw1\">if</span> ~isempty<span class=\"br0\">(</span>removableValues<span class=\"br0\">)</span><br/>                            <span class=\"kw1\">for</span> m = <span class=\"br0\">(</span> <span class=\"nu0\">1</span>:numel<span class=\"br0\">(</span>removableValues<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>                                possibleValues<span class=\"br0\">{</span>row,column<span class=\"br0\">}</span><span class=\"br0\">(</span> possibleValues<span class=\"br0\">{</span>row,column<span class=\"br0\">}</span>==removableValues<span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"br0\">)</span>=<span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/>                            <span class=\"kw1\">end</span><br/>                        <span class=\"kw1\">end</span><br/>\u00a0<br/>                        <span class=\"co1\">%If the current grid coordinate can only atain one</span><br/>                        <span class=\"co1\">%possible value, assign it that value</span><br/>                        <span class=\"kw1\">if</span> numel<span class=\"br0\">(</span> possibleValues<span class=\"br0\">{</span>row,column<span class=\"br0\">}</span> <span class=\"br0\">)</span> == <span class=\"nu0\">1</span><br/>                            solution<span class=\"br0\">(</span>row,column<span class=\"br0\">)</span> = possibleValues<span class=\"br0\">{</span>row,column<span class=\"br0\">}</span>;<br/>                            possibleValues<span class=\"br0\">(</span>row,column<span class=\"br0\">)</span>=<span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span>;<br/>                        <span class=\"kw1\">end</span><br/>                    <span class=\"kw1\">end</span> <span class=\"co1\">%end if</span><br/>\u00a0<br/>                    <span class=\"kw1\">if</span> isnan<span class=\"br0\">(</span> solution<span class=\"br0\">(</span>row,column<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"co1\">%If grid coordinate hasn't been filled in, try to determine it's value. </span><br/>\u00a0<br/>                        <span class=\"co1\">%Look at sub-box to see if any possible values can be</span><br/>                        <span class=\"co1\">%filtered out. First pull the boundaries of the sub-box</span><br/>                        <span class=\"co1\">%containing the current array coordinate           </span><br/>                        currentBoxBoundaries=subBoxes<span class=\"br0\">{</span>row,column<span class=\"br0\">}</span>;<br/>\u00a0<br/>                        <span class=\"co1\">%Then pull the sub-boxes values out of the solution</span><br/>                        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/box.html\"><span class=\"kw2\">box</span></a> = solution<span class=\"br0\">(</span>currentBoxBoundaries<span class=\"br0\">{</span>:<span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>                        <span class=\"co1\">%Look at sub-box to see what values have already</span><br/>                        <span class=\"co1\">%been filled in and thus the current grid</span><br/>                        <span class=\"co1\">%coordinate can't be</span><br/>                        removableValues = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/box.html\"><span class=\"kw2\">box</span></a><span class=\"br0\">(</span> ~isnan<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/box.html\"><span class=\"kw2\">box</span></a><span class=\"br0\">)</span> <span class=\"br0\">)</span>;<br/>\u00a0<br/>                        <span class=\"co1\">%If there are any values that have been assigned to</span><br/>                        <span class=\"co1\">%other cells in the same sub-box, filter those out</span><br/>                        <span class=\"co1\">%of the current cell's possiblValues</span><br/>                        <span class=\"kw1\">if</span> ~isempty<span class=\"br0\">(</span>removableValues<span class=\"br0\">)</span><br/>                            <span class=\"kw1\">for</span> m = <span class=\"br0\">(</span> <span class=\"nu0\">1</span>:numel<span class=\"br0\">(</span>removableValues<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>                                possibleValues<span class=\"br0\">{</span>row,column<span class=\"br0\">}</span><span class=\"br0\">(</span> possibleValues<span class=\"br0\">{</span>row,column<span class=\"br0\">}</span>==removableValues<span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"br0\">)</span>=<span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/>                            <span class=\"kw1\">end</span><br/>                        <span class=\"kw1\">end</span><br/>\u00a0<br/>                        <span class=\"co1\">%If the current grid coordinate can only atain one</span><br/>                        <span class=\"co1\">%possible value, assign it that value</span><br/>                        <span class=\"kw1\">if</span> numel<span class=\"br0\">(</span> possibleValues<span class=\"br0\">{</span>row,column<span class=\"br0\">}</span> <span class=\"br0\">)</span> == <span class=\"nu0\">1</span><br/>                            solution<span class=\"br0\">(</span>row,column<span class=\"br0\">)</span> = possibleValues<span class=\"br0\">{</span>row,column<span class=\"br0\">}</span>;<br/>                            possibleValues<span class=\"br0\">(</span>row,column<span class=\"br0\">)</span>=<span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span>;<br/>                        <span class=\"kw1\">end</span><br/>                    <span class=\"kw1\">end</span> <span class=\"co1\">%end if</span><br/>\u00a0<br/>                <span class=\"kw1\">end</span> <span class=\"co1\">%end for column</span><br/>            <span class=\"kw1\">end</span> <span class=\"co1\">%end for row</span><br/>        <span class=\"kw1\">end</span> <span class=\"co1\">%stop process of elimination</span><br/>\u00a0<br/><span class=\"co1\">%% Check that there are no contradictions in the solved grid coordinates.</span><br/>\u00a0<br/>        <span class=\"co1\">%Check that each row at most contains one of each of the integers</span><br/>        <span class=\"co1\">%from 1 to 9</span><br/>        <span class=\"kw1\">if</span> ~isempty<span class=\"br0\">(</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/find.html\"><span class=\"kw2\">find</span></a><span class=\"br0\">(</span> histc<span class=\"br0\">(</span> solution,<span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">9</span><span class=\"br0\">)</span>,<span class=\"nu0\">1</span> <span class=\"br0\">)</span>&gt;<span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>            solution = false;<br/>            <span class=\"kw1\">return</span><br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">%Check that each column at most contains one of each of the integers</span><br/>        <span class=\"co1\">%from 1 to 9</span><br/>        <span class=\"kw1\">if</span> ~isempty<span class=\"br0\">(</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/find.html\"><span class=\"kw2\">find</span></a><span class=\"br0\">(</span> histc<span class=\"br0\">(</span> solution,<span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">9</span><span class=\"br0\">)</span>,<span class=\"nu0\">2</span> <span class=\"br0\">)</span>&gt;<span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>            solution = false;<br/>            <span class=\"kw1\">return</span><br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">%Check that each sub-box at most contains one of each of the integers</span><br/>        <span class=\"co1\">%from 1 to 9</span><br/>        subBoxBins = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/zeros.html\"><span class=\"kw2\">zeros</span></a><span class=\"br0\">(</span><span class=\"nu0\">9</span>,<span class=\"nu0\">9</span><span class=\"br0\">)</span>;<br/>        counter = <span class=\"nu0\">0</span>;<br/>        <span class=\"kw1\">for</span> row = <span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"nu0\">5</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">for</span> column = <span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"nu0\">5</span> <span class=\"nu0\">8</span><span class=\"br0\">]</span><br/>                counter = counter +<span class=\"nu0\">1</span>;<br/>\u00a0<br/>                <span class=\"co1\">%because the sub-boxes are extracted as square matricies,</span><br/>                <span class=\"co1\">%we need to reshape them into row vectors so all of the </span><br/>                <span class=\"co1\">%boxes can be input into histc simultaneously</span><br/>                subBoxBins<span class=\"br0\">(</span>counter,:<span class=\"br0\">)</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/reshape.html\"><span class=\"kw2\">reshape</span></a><span class=\"br0\">(</span> solution<span class=\"br0\">(</span>subBoxes<span class=\"br0\">{</span>row,column<span class=\"br0\">}</span><span class=\"br0\">{</span>:<span class=\"br0\">}</span><span class=\"br0\">)</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">9</span> <span class=\"br0\">)</span>; <br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">if</span> ~isempty<span class=\"br0\">(</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/find.html\"><span class=\"kw2\">find</span></a><span class=\"br0\">(</span> histc<span class=\"br0\">(</span> subBoxBins,<span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">9</span><span class=\"br0\">)</span>,<span class=\"nu0\">2</span> <span class=\"br0\">)</span>&gt;<span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>            solution = false;<br/>            <span class=\"kw1\">return</span><br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">%Check to make sure there are no grid coordinates that are not</span><br/>        <span class=\"co1\">%filled in and have no possible values.</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>rowStack,columnStack<span class=\"br0\">]</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/find.html\"><span class=\"kw2\">find</span></a><span class=\"br0\">(</span>isnan<span class=\"br0\">(</span>solution<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">%extracts the indicies of the unsolved grid coordinates</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>numel<span class=\"br0\">(</span>rowStack<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> counter = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:numel<span class=\"br0\">(</span>rowStack<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> isempty<span class=\"br0\">(</span>possibleValues<span class=\"br0\">{</span>rowStack<span class=\"br0\">(</span>counter<span class=\"br0\">)</span>,columnStack<span class=\"br0\">(</span>counter<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>                    solution = false;<br/>                    <span class=\"kw1\">return</span><br/>                <span class=\"kw1\">end</span>  <br/>            <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">%if there are no more grid coordinates to be filed in then the</span><br/>        <span class=\"co1\">%sudoku is solved and we can return the solution without further </span><br/>        <span class=\"co1\">%computation</span><br/>        <span class=\"kw1\">elseif</span> <span class=\"br0\">(</span>numel<span class=\"br0\">(</span>rowStack<span class=\"br0\">)</span> == <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span><br/>        <span class=\"kw1\">end</span>   <br/>\u00a0<br/><span class=\"co1\">%% Use the unique relative compliment of sets deduction method</span><br/>\u00a0<br/>        <span class=\"co1\">%Because no more information can be determined by the process of</span><br/>        <span class=\"co1\">%ellimination we have to try a new method of reasoning. Now we will</span><br/>        <span class=\"co1\">%look at the possible values a cell can take. If there is a value that</span><br/>        <span class=\"co1\">%that grid coordinate can take but no other coordinates in the same row,</span><br/>        <span class=\"co1\">%column or sub-box can take that value then we assign that coordinate</span><br/>        <span class=\"co1\">%that value.</span><br/>\u00a0<br/>        keepGoing = true; <span class=\"co1\">%signals to keep applying rules to the current grid-coordinate because it hasn't been solved using previous rules</span><br/>        dontStop = false; <span class=\"co1\">%if this method doesn't figure anything out, this will terminate the top level while loop</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>rowStack,columnStack<span class=\"br0\">]</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/find.html\"><span class=\"kw2\">find</span></a><span class=\"br0\">(</span>isnan<span class=\"br0\">(</span>solution<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">%This will also take care of the case where the sudoku is solved</span><br/>        counter = <span class=\"nu0\">0</span>; <span class=\"co1\">%makes sure the loop terminates when there are no more cells to consider</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span> keepGoing &amp;&amp; <span class=\"br0\">(</span>counter &lt; numel<span class=\"br0\">(</span>rowStack<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"co1\">%stop this method of reasoning when the value of one of the cells has been determined and return to the process of elimination method</span><br/>\u00a0<br/>            counter = counter + <span class=\"nu0\">1</span>;<br/>\u00a0<br/>            row = rowStack<span class=\"br0\">(</span>counter<span class=\"br0\">)</span>;<br/>            column = columnStack<span class=\"br0\">(</span>counter<span class=\"br0\">)</span>;<br/>\u00a0<br/>            gridPossibles = <span class=\"br0\">[</span>possibleValues<span class=\"br0\">{</span>row,column<span class=\"br0\">}</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>            coords = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">9</span><span class=\"br0\">)</span>;<br/>            coords<span class=\"br0\">(</span>column<span class=\"br0\">)</span> = <span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/>            rowPossibles = <span class=\"br0\">[</span>possibleValues<span class=\"br0\">{</span>row,coords<span class=\"br0\">}</span><span class=\"br0\">]</span>; <span class=\"co1\">%extract possible values for everything in the same row except the current grid coordinate</span><br/>\u00a0<br/>            totalMatches = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/zeros.html\"><span class=\"kw2\">zeros</span></a><span class=\"br0\">(</span> numel<span class=\"br0\">(</span>gridPossibles<span class=\"br0\">)</span>,<span class=\"nu0\">1</span> <span class=\"br0\">)</span>; <span class=\"co1\">%preallocate for speed</span><br/>\u00a0<br/>            <span class=\"co1\">%count how many times a possible value for the current cell</span><br/>            <span class=\"co1\">%appears as a possible value for the cells in the same row</span><br/>            <span class=\"kw1\">for</span> n = <span class=\"br0\">(</span> <span class=\"nu0\">1</span>:numel<span class=\"br0\">(</span>gridPossibles<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>                totalMatches<span class=\"br0\">(</span>n<span class=\"br0\">)</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span> <span class=\"br0\">(</span>rowPossibles == gridPossibles<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>; <br/>            <span class=\"kw1\">end</span><br/>\u00a0<br/>            <span class=\"co1\">%remove any possible values for the current cell that have</span><br/>            <span class=\"co1\">%matches in other cells</span><br/>            gridPossibles = gridPossibles<span class=\"br0\">(</span>totalMatches==<span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>            <span class=\"co1\">%if there is only one possible value that the current cell can</span><br/>            <span class=\"co1\">%take that aren't shared by other cells, assign that value to</span><br/>            <span class=\"co1\">%the current cell.</span><br/>            <span class=\"kw1\">if</span> numel<span class=\"br0\">(</span>gridPossibles<span class=\"br0\">)</span> == <span class=\"nu0\">1</span><br/>\u00a0<br/>                solution<span class=\"br0\">(</span>row,column<span class=\"br0\">)</span> = gridPossibles;<br/>                possibleValues<span class=\"br0\">(</span>row,column<span class=\"br0\">)</span>=<span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span>;<br/>                keepGoing = false; <span class=\"co1\">%stop this method of deduction and return to the process of elimination</span><br/>                dontStop = true; <span class=\"co1\">%keep the top level loop going</span><br/>\u00a0<br/>            <span class=\"kw1\">end</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>keepGoing<span class=\"br0\">)</span> <span class=\"co1\">%do the same as above but for the current cell's column</span><br/>\u00a0<br/>                gridPossibles = <span class=\"br0\">[</span>possibleValues<span class=\"br0\">{</span>row,column<span class=\"br0\">}</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>                coords = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">9</span><span class=\"br0\">)</span>;<br/>                coords<span class=\"br0\">(</span>row<span class=\"br0\">)</span> = <span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/>                columnPossibles = <span class=\"br0\">[</span>possibleValues<span class=\"br0\">{</span>coords,column<span class=\"br0\">}</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>                totalMatches = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/zeros.html\"><span class=\"kw2\">zeros</span></a><span class=\"br0\">(</span> numel<span class=\"br0\">(</span>gridPossibles<span class=\"br0\">)</span>,<span class=\"nu0\">1</span> <span class=\"br0\">)</span>;<br/>                <span class=\"kw1\">for</span> n = <span class=\"br0\">(</span> <span class=\"nu0\">1</span>:numel<span class=\"br0\">(</span>gridPossibles<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>                    totalMatches<span class=\"br0\">(</span>n<span class=\"br0\">)</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span> <span class=\"br0\">(</span>columnPossibles == gridPossibles<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>;<br/>                <span class=\"kw1\">end</span><br/>\u00a0<br/>                gridPossibles = gridPossibles<span class=\"br0\">(</span>totalMatches==<span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>                <span class=\"kw1\">if</span> numel<span class=\"br0\">(</span>gridPossibles<span class=\"br0\">)</span> == <span class=\"nu0\">1</span><br/>\u00a0<br/>                    solution<span class=\"br0\">(</span>row,column<span class=\"br0\">)</span> = gridPossibles;<br/>                    possibleValues<span class=\"br0\">(</span>row,column<span class=\"br0\">)</span>=<span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span>;<br/>                    keepGoing = false;<br/>                    dontStop = true;<br/>\u00a0<br/>                <span class=\"kw1\">end</span><br/>            <span class=\"kw1\">end</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>keepGoing<span class=\"br0\">)</span> <span class=\"co1\">%do the same as above but for the current cell's sub-box</span><br/>\u00a0<br/>                gridPossibles = <span class=\"br0\">[</span>possibleValues<span class=\"br0\">{</span>row,column<span class=\"br0\">}</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>                currentBoxBoundaries = subBoxes<span class=\"br0\">{</span>row,column<span class=\"br0\">}</span>;<br/>                subBoxPossibles = <span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/>                <span class=\"kw1\">for</span> m = currentBoxBoundaries<span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>                    <span class=\"kw1\">for</span> n = currentBoxBoundaries<span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><br/>                        <span class=\"kw1\">if</span> ~<span class=\"br0\">(</span><span class=\"br0\">(</span>m == row<span class=\"br0\">)</span> &amp;&amp; <span class=\"br0\">(</span>n == column<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                            subBoxPossibles = <span class=\"br0\">[</span>subBoxPossibles possibleValues<span class=\"br0\">{</span>m,n<span class=\"br0\">}</span><span class=\"br0\">]</span>;<br/>                        <span class=\"kw1\">end</span><br/>                    <span class=\"kw1\">end</span><br/>                <span class=\"kw1\">end</span><br/>\u00a0<br/>                totalMatches = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/zeros.html\"><span class=\"kw2\">zeros</span></a><span class=\"br0\">(</span> numel<span class=\"br0\">(</span>gridPossibles<span class=\"br0\">)</span>,<span class=\"nu0\">1</span> <span class=\"br0\">)</span>;<br/>                <span class=\"kw1\">for</span> n = <span class=\"br0\">(</span> <span class=\"nu0\">1</span>:numel<span class=\"br0\">(</span>gridPossibles<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>                    totalMatches<span class=\"br0\">(</span>n<span class=\"br0\">)</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span> <span class=\"br0\">(</span>subBoxPossibles == gridPossibles<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>;<br/>                <span class=\"kw1\">end</span><br/>\u00a0<br/>                gridPossibles = gridPossibles<span class=\"br0\">(</span>totalMatches==<span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>                <span class=\"kw1\">if</span> numel<span class=\"br0\">(</span>gridPossibles<span class=\"br0\">)</span> == <span class=\"nu0\">1</span><br/>\u00a0<br/>                    solution<span class=\"br0\">(</span>row,column<span class=\"br0\">)</span> = gridPossibles;<br/>                    possibleValues<span class=\"br0\">(</span>row,column<span class=\"br0\">)</span>=<span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span>;<br/>                    keepGoing = false;<br/>                    dontStop = true;<br/>\u00a0<br/>                <span class=\"kw1\">end</span><br/>            <span class=\"kw1\">end</span> <span class=\"co1\">%end </span><br/>\u00a0<br/>        <span class=\"kw1\">end</span> <span class=\"co1\">%end  set comliment rule while loop </span><br/>    <span class=\"kw1\">end</span> <span class=\"co1\">%end top-level while loop</span><br/>\u00a0<br/><span class=\"co1\">%% Depth-first search of the solution tree</span><br/>\u00a0<br/>    <span class=\"co1\">%There is no more reasoning that can solve the puzzle so now it is time</span><br/>    <span class=\"co1\">%for a depth-first search of the possible answers, basically</span><br/>    <span class=\"co1\">%guess-and-check. This is implimented recursively.</span><br/>\u00a0<br/>    <span class=\"br0\">[</span>rowStack,columnStack<span class=\"br0\">]</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/find.html\"><span class=\"kw2\">find</span></a><span class=\"br0\">(</span>isnan<span class=\"br0\">(</span>solution<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">%Get all of the unsolved cells</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>numel<span class=\"br0\">(</span>rowStack<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"co1\">%If all of the above stuff terminates then there will be at least one grid coordinate not filled in</span><br/>\u00a0<br/>        <span class=\"co1\">%Treat the rowStack and columnStack like stacks, and pop the top</span><br/>        <span class=\"co1\">%value off the stack to act as the current node whose</span><br/>        <span class=\"co1\">%possibleValues to search through, then assign the possible values</span><br/>        <span class=\"co1\">%of that grid coordinate to a variable that holds that values to</span><br/>        <span class=\"co1\">%search through</span><br/>        searchTreeNodes = possibleValues<span class=\"br0\">{</span>rowStack<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,columnStack<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span>; <br/>\u00a0<br/>        keepSearching = true; <span class=\"co1\">%used to continue the search</span><br/>        counter = <span class=\"nu0\">0</span>; <span class=\"co1\">%counts the amount of possible values searched for the current node</span><br/>        tempSolution = solution; <span class=\"co1\">%used so that the solution is not overriden until a solution hase been found</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span> keepSearching &amp;&amp; <span class=\"br0\">(</span>counter &lt; numel<span class=\"br0\">(</span>searchTreeNodes<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"co1\">%stop recursing if we run out of possible values for the current node</span><br/>\u00a0<br/>            counter = counter + <span class=\"nu0\">1</span>;<br/>            tempSolution<span class=\"br0\">(</span>rowStack<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,columnStack<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> = searchTreeNodes<span class=\"br0\">(</span>counter<span class=\"br0\">)</span>; <span class=\"co1\">%assign a possible value to the current node in the tree</span><br/>            tempSolution = sudokuSolver<span class=\"br0\">(</span>tempSolution<span class=\"br0\">)</span>; <span class=\"co1\">%recursively call the solver with the current guess value for the current grid coordinate           </span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> ~islogical<span class=\"br0\">(</span>tempSolution<span class=\"br0\">)</span> <span class=\"co1\">%if tempSolution is not a boolean but a valid sudoku stop recursing and set solution to tempSolution</span><br/>               keepSearching = false;<br/>               solution = tempSolution;<br/>            <span class=\"kw1\">elseif</span> counter == numel<span class=\"br0\">(</span>searchTreeNodes<span class=\"br0\">)</span> <span class=\"co1\">%if we have run out of guesses for the current node, stop recursing and return a value of \"false\" for the solution</span><br/>               solution = false;<br/>            <span class=\"kw1\">else</span> <span class=\"co1\">%reset tempSolution to the current state of the board and try the next guess for the possible value of the current cell</span><br/>               tempSolution = solution;<br/>            <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"kw1\">end</span> <span class=\"co1\">%end recursion</span><br/>    <span class=\"kw1\">end</span>  <span class=\"co1\">%end if </span><br/>\u00a0<br/><span class=\"co1\">%% End of program</span><br/><span class=\"kw1\">end</span> <span class=\"co1\">%end sudokuSolver</span></pre>"}, {"lang": "OCaml", "loc": 70, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"co1\">(* Ocamlgraph demo program: solving the Sudoku puzzle using graph coloring<br/>   Copyright 2004-2007 Sylvain Conchon, Jean-Christophe Filliatre, Julien Signoles<br/>\u00a0<br/>   This software is free software; you can redistribute it and/or modify <br/>   it under the terms of the GNU Library General Public License version 2,<br/>   with the special exception on linking described in file LICENSE.<br/>\u00a0<br/>   This software is distributed in the hope that it will be useful,<br/>   but WITHOUT ANY WARRANTY; without even the implied warranty of<br/>   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. *)</span><br/>\u00a0<br/><span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Format.html\"><span class=\"kw2\">Format</span></a><br/><span class=\"kw1\">open</span> Graph<br/>\u00a0<br/><span class=\"co1\">(* We use undirected graphs with nodes containing a pair of integers<br/>   (the cell coordinates in 0..8 x 0..8).<br/>   The integer marks of the nodes will store the colors. *)</span><br/><span class=\"kw1\">module</span> G <span class=\"sy0\">=</span> Imperative<span class=\"sy0\">.</span>Graph<span class=\"sy0\">.</span>Abstract<span class=\"br0\">(</span><span class=\"kw1\">struct</span> <span class=\"kw1\">type</span> t <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">*</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"kw1\">end</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">(* The Sudoku grid = a graph with 9x9 nodes *)</span><br/><span class=\"kw1\">let</span> g <span class=\"sy0\">=</span> G<span class=\"sy0\">.</span>create <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">(* We create the 9x9 nodes, add them to the graph and keep them in a matrix <br/>   for later access *)</span><br/><span class=\"kw1\">let</span> nodes <span class=\"sy0\">=</span> <br/>  <span class=\"kw1\">let</span> new_node i j <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> v <span class=\"sy0\">=</span> G<span class=\"sy0\">.</span>V<span class=\"sy0\">.</span>create <span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"kw1\">in</span> G<span class=\"sy0\">.</span>add_vertex g v<span class=\"sy0\">;</span> v <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>init <span class=\"nu0\">9</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>init <span class=\"nu0\">9</span> <span class=\"br0\">(</span>new_node i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> node i j <span class=\"sy0\">=</span> nodes<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"co1\">(* shortcut for easier access *)</span><br/>\u00a0<br/><span class=\"co1\">(* We add the edges: <br/>   two nodes are connected whenever they can't have the same value,<br/>   i.e. they belong to the same line, the same column or the same 3x3 group *)</span><br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">8</span> <span class=\"kw1\">do</span> <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">8</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">8</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> k <span class=\"sy0\">&lt;&gt;</span> i <span class=\"kw1\">then</span> G<span class=\"sy0\">.</span>add_edge g <span class=\"br0\">(</span>node i j<span class=\"br0\">)</span> <span class=\"br0\">(</span>node k j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> k <span class=\"sy0\">&lt;&gt;</span> j <span class=\"kw1\">then</span> G<span class=\"sy0\">.</span>add_edge g <span class=\"br0\">(</span>node i j<span class=\"br0\">)</span> <span class=\"br0\">(</span>node i k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">let</span> gi <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>i <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> gj <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>j <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">for</span> di <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">2</span> <span class=\"kw1\">do</span> <span class=\"kw1\">for</span> dj <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">let</span> i<span class=\"sy0\">'</span> <span class=\"sy0\">=</span> gi <span class=\"sy0\">+</span> di <span class=\"kw1\">and</span> j<span class=\"sy0\">'</span> <span class=\"sy0\">=</span> gj <span class=\"sy0\">+</span> dj <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">if</span> i<span class=\"sy0\">'</span> <span class=\"sy0\">&lt;&gt;</span> i <span class=\"sy0\">||</span> j<span class=\"sy0\">'</span> <span class=\"sy0\">&lt;&gt;</span> j <span class=\"kw1\">then</span> G<span class=\"sy0\">.</span>add_edge g <span class=\"br0\">(</span>node i j<span class=\"br0\">)</span> <span class=\"br0\">(</span>node i<span class=\"sy0\">'</span> j<span class=\"sy0\">'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">done</span> <span class=\"kw1\">done</span><br/>  <span class=\"kw1\">done</span> <span class=\"kw1\">done</span><br/>\u00a0<br/><span class=\"co1\">(* Displaying the current state of the graph *)</span><br/><span class=\"kw1\">let</span> display <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">8</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">8</span> <span class=\"kw1\">do</span> printf <span class=\"st0\">\"%d\"</span> <span class=\"br0\">(</span>G<span class=\"sy0\">.</span>Mark<span class=\"sy0\">.</span>get <span class=\"br0\">(</span>node i j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>    printf <span class=\"st0\">\"\\n\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  printf <span class=\"st0\">\"@?\"</span><br/>\u00a0<br/><span class=\"co1\">(* We read the initial constraints from standard input and we display g *)</span><br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">8</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALread_line\"><span class=\"kw3\">read_line</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">8</span> <span class=\"kw1\">do</span> <span class=\"kw1\">match</span> s<span class=\"sy0\">.</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"kw1\">with</span><br/>      <span class=\"sy0\">|</span> <span class=\"sy0\">'</span><span class=\"nu0\">1</span><span class=\"sy0\">'..'</span><span class=\"nu0\">9</span><span class=\"sy0\">'</span> <span class=\"kw1\">as</span> ch <span class=\"sy0\">-&gt;</span> G<span class=\"sy0\">.</span>Mark<span class=\"sy0\">.</span>set <span class=\"br0\">(</span>node i j<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Char.html\"><span class=\"kw2\">Char</span></a><span class=\"sy0\">.</span>code ch <span class=\"sy0\">-</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Char.html\"><span class=\"kw2\">Char</span></a><span class=\"sy0\">.</span>code <span class=\"sy0\">'</span><span class=\"nu0\">0</span><span class=\"sy0\">'</span><span class=\"br0\">)</span><br/>      <span class=\"sy0\">|</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">done</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  display <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  printf <span class=\"st0\">\"<a class=\"__cf_email__\" data-cfemail=\"416c6c6c6c6c6c6c6c6c016f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"</span><br/>\u00a0<br/><span class=\"co1\">(* We solve the Sudoku by 9-coloring the graph g and we display the solution *)</span><br/><span class=\"kw1\">module</span> C <span class=\"sy0\">=</span> Coloring<span class=\"sy0\">.</span>Mark<span class=\"br0\">(</span>G<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> C<span class=\"sy0\">.</span>coloring g <span class=\"nu0\">9</span><span class=\"sy0\">;</span> display <span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oz", "loc": 84, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"co1\">%% a puzzle is a function that returns an initial board configuration</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Puzzle1</span><span class=\"br0\">}</span><br/>     <span class=\"co1\">%% a board is a list of 9 rows</span><br/>     <span class=\"br0\">[</span><span class=\"br0\">[</span>4 _ _  _ _ _  _ 6 _<span class=\"br0\">]</span><br/>      <span class=\"br0\">[</span>5 _ _  _ 8 _  9 _ _<span class=\"br0\">]</span><br/>      <span class=\"br0\">[</span>3 _ _  _ _ 1  _ _ _<span class=\"br0\">]</span><br/>\u00a0<br/>      <span class=\"br0\">[</span>_ 2 _  7 _ _  _ _ 1<span class=\"br0\">]</span><br/>      <span class=\"br0\">[</span>_ 9 _  _ _ _  _ 4 _<span class=\"br0\">]</span><br/>      <span class=\"br0\">[</span>8 _ _  _ _ 3  _ 5 _<span class=\"br0\">]</span><br/>\u00a0<br/>      <span class=\"br0\">[</span>_ _ _  2 _ _  _ _ 7<span class=\"br0\">]</span><br/>      <span class=\"br0\">[</span>_ _ 6  _ 5 _  _ _ 8<span class=\"br0\">]</span> <br/>      <span class=\"br0\">[</span>_ 1 _  _ _ _  _ _ 6<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% Returns a list of solutions for the given puzzle.</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Solve</span> Puzzle<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>SearchAll <span class=\"br0\">{</span>GetScript Puzzle<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% Creates a solver script for a puzzle.</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">GetScript</span> Puzzle<span class=\"br0\">}</span><br/>     <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> Board<span class=\"br0\">}</span><br/>        <span class=\"co1\">%% Every row is a list of nine finite domain vars</span><br/>        <span class=\"co1\">%% with the domain 1..9.</span><br/>        Board = <span class=\"br0\">{</span>MapRange <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> _<span class=\"br0\">}</span> <span class=\"br0\">{</span>FD<span class=\"sy0\">.</span>list 9 1<span class=\"sy0\">#</span>9<span class=\"br0\">}</span> <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>        <span class=\"co1\">%% Post initial configuration.</span><br/>        Board = <span class=\"br0\">{</span>Puzzle<span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">%% The core constraints:</span><br/>        <span class=\"br0\">{</span>ForAll <span class=\"br0\">{</span>Rows Board<span class=\"br0\">}</span> FD<span class=\"sy0\">.</span>distinct<span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>ForAll <span class=\"br0\">{</span>Columns Board<span class=\"br0\">}</span> FD<span class=\"sy0\">.</span>distinct<span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>ForAll <span class=\"br0\">{</span>Boxes Board<span class=\"br0\">}</span> FD<span class=\"sy0\">.</span>distinct<span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">%% Search if necessary.</span><br/>        <span class=\"br0\">{</span>FD<span class=\"sy0\">.</span>distribute ff <span class=\"br0\">{</span>Flatten Board<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% Returns the board as a list of rows.</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Rows</span> Board<span class=\"br0\">}</span><br/>     Board <span class=\"co1\">%% This is already the representation we have chosen.</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% Returns the board as a list of columns.</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Columns</span> Board<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>MapRange <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> I<span class=\"br0\">}</span> <span class=\"br0\">{</span>Column Board I<span class=\"br0\">}</span> <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% Returns the board as a list of boxes (sub-grids).</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Boxes</span> Board<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>MapRange <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> I<span class=\"br0\">}</span> <span class=\"br0\">{</span>Box Board I<span class=\"br0\">}</span> <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% Helper function: map the range 1..9 to something.</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">MapRange</span> F<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Map <span class=\"br0\">[</span>1 2 3 4 5 6 7 8 9<span class=\"br0\">]</span> F<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% Returns a column of the board as a list of fields.</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Column</span> Board Index<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Map Board<br/>      <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> Row<span class=\"br0\">}</span><br/>         <span class=\"br0\">{</span>Nth Row Index<span class=\"br0\">}</span><br/>      <span class=\"kw1\">end</span><br/>     <span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% Returns a box of the board as a list of fields.</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Box</span> Board Index<span class=\"br0\">}</span><br/>     Index0 = Index<span class=\"sy0\">-</span>1<br/>     Fields = <span class=\"br0\">{</span>Flatten Board<span class=\"br0\">}</span><br/>     Start = <span class=\"br0\">(</span>Index0 <span class=\"kw1\">div</span> 3<span class=\"br0\">)</span> <span class=\"sy0\">*</span> 27 <span class=\"sy0\">+</span> <span class=\"br0\">(</span>Index0 <span class=\"kw1\">mod</span> 3<span class=\"br0\">)</span><span class=\"sy0\">*</span>3   <br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>Flatten<br/>      <span class=\"kw1\">for</span> I <span class=\"kw1\">in</span> 0<span class=\"sy0\">..</span>2 collect:C <span class=\"kw1\">do</span><br/>         <span class=\"br0\">{</span>C <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>take <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>drop Fields Start<span class=\"sy0\">+</span>I<span class=\"sy0\">*</span>9<span class=\"br0\">}</span> 3<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>      <span class=\"kw1\">end</span><br/>     <span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Inspect <span class=\"br0\">{</span>Solve Puzzle1<span class=\"br0\">}</span><span class=\"sy0\">.</span>1<span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 71, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;pari/pari.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">int</span> SUDOKU <span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw2\">inline</span> <span class=\"kw4\">int</span> check_num<span class=\"br0\">(</span>SUDOKU s<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> row<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> col<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> num<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> r <span class=\"sy0\">=</span> <span class=\"br0\">(</span>row<span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> c <span class=\"sy0\">=</span> <span class=\"br0\">(</span>col<span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> num <span class=\"sy0\">||</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span> <span class=\"sy0\">==</span> num <span class=\"sy0\">||</span> s<span class=\"br0\">[</span>i<span class=\"sy0\">%</span><span class=\"nu19\">3</span> <span class=\"sy0\">+</span> r<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"sy0\">/</span><span class=\"nu0\">3</span> <span class=\"sy0\">+</span> c<span class=\"br0\">]</span> <span class=\"sy0\">==</span> num<span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">int</span> sudoku_solve<span class=\"br0\">(</span>SUDOKU s<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> row<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> col<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> num<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>row <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span> <span class=\"sy0\">&amp;&amp;</span> col <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>col <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> sudoku_solve<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> row<span class=\"sy0\">,</span> col<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>row <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> sudoku_solve<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> row<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>num <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> num <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> num<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>check_num<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> row<span class=\"sy0\">,</span> col<span class=\"sy0\">,</span> num<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t  s<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> num<span class=\"sy0\">;</span><br/>\t  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sudoku_solve<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> row<span class=\"sy0\">,</span> col<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t  <span class=\"kw1\">else</span><br/>\t    s<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>GEN plug_sudoku<span class=\"br0\">(</span>GEN M<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  SUDOKU s<span class=\"sy0\">;</span><br/>  GEN S<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> k<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>typ<span class=\"br0\">(</span>M<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> t_MAT<span class=\"br0\">)</span><br/>    pari_err<span class=\"br0\">(</span>e_MISC<span class=\"sy0\">,</span> <span class=\"st0\">\"parameter not matrix\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  S <span class=\"sy0\">=</span> matsize<span class=\"br0\">(</span>M<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>itos<span class=\"br0\">(</span>gel<span class=\"br0\">(</span>S<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span> <span class=\"sy0\">||</span> itos<span class=\"br0\">(</span>gel<span class=\"br0\">(</span>S<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>    pari_err<span class=\"br0\">(</span>e_MISC<span class=\"sy0\">,</span> <span class=\"st0\">\"parameter not 9x9 matrix\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>      s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> itos<span class=\"br0\">(</span>gcoeff<span class=\"br0\">(</span>M<span class=\"sy0\">,</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> k<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"coMULTI\">/* get sudoku */</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sudoku_solve<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\t\t\t<span class=\"coMULTI\">/* solve sudoku */</span><br/>    S <span class=\"sy0\">=</span> cgetg<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> t_MAT<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\t\t\t<span class=\"coMULTI\">/* create 9x9 matrix */</span><br/>      gel<span class=\"br0\">(</span>S<span class=\"sy0\">,</span> k<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> cgetg<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> t_COL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\tgcoeff<span class=\"br0\">(</span>S<span class=\"sy0\">,</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> k<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> stoi<span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"coMULTI\">/* fill in elements */</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> S<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> gen_0<span class=\"sy0\">;</span>\t\t<span class=\"coMULTI\">/* no solution */</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Pascal", "loc": 257, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> soduko<span class=\"sy1\">;</span><br/><span class=\"co2\">{$IFDEF FPC}</span><br/>  <span class=\"co2\">{$CODEALIGN proc=16,loop=8}</span><br/><span class=\"co2\">{$ENDIF}</span><br/><span class=\"kw1\">uses</span><br/>  sysutils<span class=\"sy1\">,</span>crt<span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  carreeSize <span class=\"sy3\">=</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span><br/>  maxCoor <span class=\"sy3\">=</span> carreeSize<span class=\"sy3\">*</span>carreeSize<span class=\"sy1\">;</span><br/>  maxValue <span class=\"sy3\">=</span> maxCoor<span class=\"sy1\">;</span><br/>  maxMask <span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">shl</span> <span class=\"br0\">(</span>maxCoor<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">type</span><br/>  tLimit <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"me1\">maxCoor</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  tValue <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"me1\">maxCoor</span><span class=\"sy1\">;</span><br/>  tSteps <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"me1\">maxCoor</span><span class=\"sy3\">*</span>maxCoor<span class=\"sy1\">;</span><br/>  tValField <span class=\"sy3\">=</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span>tLimit<span class=\"sy1\">,</span>tLimit<span class=\"br0\">]</span> <span class=\"kw1\">of</span> NativeInt<span class=\"sy1\">;</span><span class=\"co1\">//tValue;</span><br/>  tBitrepr <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"me1\">maxMask</span><span class=\"sy1\">;</span><br/>  tcol <span class=\"sy3\">=</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span>tLimit<span class=\"br0\">]</span> <span class=\"kw1\">of</span> NativeInt<span class=\"sy1\">;</span><span class=\"co1\">// tBitrepr;</span><br/>  trow <span class=\"sy3\">=</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span>tLimit<span class=\"br0\">]</span> <span class=\"kw1\">of</span> NativeInt<span class=\"sy1\">;</span><span class=\"co1\">// tBitrepr;</span><br/>  tcar <span class=\"sy3\">=</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span>tLimit<span class=\"br0\">]</span> <span class=\"kw1\">of</span> NativeInt<span class=\"sy1\">;</span><span class=\"co1\">// tBitrepr;</span><br/>  tpValue <span class=\"sy3\">=</span> <span class=\"sy2\">^</span>NativeInt<span class=\"sy1\">;</span><span class=\"co1\">//^tValue;</span><br/>  tpLimit <span class=\"sy3\">=</span> <span class=\"sy2\">^</span>tLimit<span class=\"sy1\">;</span><br/>  tpBitrepr<span class=\"sy3\">=</span>  <span class=\"sy2\">^</span>NativeInt<span class=\"sy1\">;</span><span class=\"co1\">//^tBitrepr;</span><br/>  tchgVal <span class=\"sy3\">=</span> <span class=\"kw4\">record</span><br/>              cvCol<span class=\"sy1\">,</span><br/>              cvRow<span class=\"sy1\">,</span><br/>              cvCar <span class=\"sy1\">:</span> tpBitrepr<span class=\"sy1\">;</span><br/>              cvVal <span class=\"sy1\">:</span> tpValue<span class=\"sy1\">;</span><br/>            <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  tpChgVal <span class=\"sy3\">=</span> <span class=\"sy2\">^</span>tchgVal<span class=\"sy1\">;</span><br/>  tchgList <span class=\"sy3\">=</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span>tSteps<span class=\"br0\">]</span> <span class=\"kw1\">of</span> tchgVal<span class=\"sy1\">;</span><br/>\u00a0<br/>  tField <span class=\"sy3\">=</span> <span class=\"kw4\">record</span><br/>             fdChgList<span class=\"sy1\">:</span> tchgList<span class=\"sy1\">;</span><br/>             fdCol <span class=\"sy1\">:</span> tcol<span class=\"sy1\">;</span><br/>             fdRow <span class=\"sy1\">:</span> trow<span class=\"sy1\">;</span><br/>             fdcar <span class=\"sy1\">:</span> tcar<span class=\"sy1\">;</span><br/>             fdVal <span class=\"sy1\">:</span> tValField<span class=\"sy1\">;</span><br/>             fdChgIdx <span class=\"sy1\">:</span> tSteps<span class=\"sy1\">;</span><br/>\u00a0<br/>           <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  Expl0<span class=\"sy1\">:</span>tValField <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                     <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                     <span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                     <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                     <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                     <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                     <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                     <span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                     <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Expl1<span class=\"sy1\">:</span>tValField<span class=\"sy3\">=</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                   <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                   <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                   <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                   <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                   <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                   <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                   <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                   <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  F<span class=\"sy1\">,</span><br/>  solF <span class=\"sy1\">:</span> TField<span class=\"sy1\">;</span><br/>  solCnt<span class=\"sy1\">,</span><br/>  callCnt<span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/>  solFound <span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> OutField<span class=\"br0\">(</span><span class=\"kw1\">const</span> F<span class=\"sy1\">:</span>tField<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  rw<span class=\"sy1\">,</span>cl <span class=\"sy1\">:</span> tLimit<span class=\"sy1\">;</span><br/>  rowS<span class=\"sy1\">:</span> <span class=\"kw4\">AnsiString</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  GotoXy<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> rw <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>tLimit<span class=\"br0\">)</span> <span class=\"kw1\">to</span> High<span class=\"br0\">(</span>tLimit<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    rowS <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'  '</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">For</span> cl <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>tLimit<span class=\"br0\">)</span> <span class=\"kw1\">to</span> High<span class=\"br0\">(</span>tLimit<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      RowS <span class=\"sy1\">:</span><span class=\"sy3\">=</span>RowS<span class=\"sy3\">+</span>IntToStr<span class=\"br0\">(</span>F<span class=\"sy1\">.</span><span class=\"me1\">fdVal</span><span class=\"br0\">[</span>rw<span class=\"sy1\">,</span>cl<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>RowS<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> CarIdx<span class=\"br0\">(</span>rw<span class=\"sy1\">,</span>cl<span class=\"sy1\">:</span> NativeInt<span class=\"br0\">)</span><span class=\"sy1\">:</span>NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  CarIdx<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>rw <span class=\"kw1\">DIV</span> carreeSize<span class=\"br0\">)</span><span class=\"sy3\">*</span>carreeSize <span class=\"sy3\">+</span>cl <span class=\"kw1\">DIV</span> carreeSize<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">function</span> InsertTest<span class=\"br0\">(</span><span class=\"kw1\">const</span> F<span class=\"sy1\">:</span>tField<span class=\"sy1\">;</span>rw<span class=\"sy1\">,</span>cl<span class=\"sy1\">:</span>tLimit<span class=\"sy1\">;</span>value<span class=\"sy1\">:</span>tValue<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  msk<span class=\"sy1\">:</span> tBitrepr<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>Value <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> result <span class=\"kw1\">then</span><br/>    EXIT<span class=\"sy1\">;</span><br/>  msk <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">shl</span> <span class=\"br0\">(</span>value<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">with</span> F <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> fdRow<span class=\"br0\">[</span>rw<span class=\"br0\">]</span> <span class=\"kw3\">AND</span> msk <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> result <span class=\"kw3\">AND</span> <span class=\"br0\">(</span>fdCol<span class=\"br0\">[</span>cl<span class=\"br0\">]</span> <span class=\"kw3\">AND</span> msk <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    rw <span class=\"sy1\">:</span><span class=\"sy3\">=</span>CarIdx<span class=\"br0\">(</span>rw<span class=\"sy1\">,</span>cl<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> result <span class=\"kw3\">AND</span> <span class=\"br0\">(</span>fdCar<span class=\"br0\">[</span>rw<span class=\"br0\">]</span> <span class=\"kw3\">AND</span> msk <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> InitField<span class=\"br0\">(</span><span class=\"kw1\">var</span> F<span class=\"sy1\">:</span>tField<span class=\"sy1\">;</span><span class=\"kw1\">const</span> InFd<span class=\"sy1\">:</span>tValField<span class=\"sy1\">;</span>DoReverse<span class=\"sy1\">:</span><span class=\"kw4\">boolean</span><span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  TmpchgVal<span class=\"sy1\">:</span>tchgVal<span class=\"sy1\">;</span><br/>  rw<span class=\"sy1\">,</span>cl<span class=\"sy1\">,</span><br/>  value<span class=\"sy1\">,</span><br/>  msk    <span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/>  leftSteps<span class=\"sy1\">:</span>tSteps<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  Fillchar<span class=\"br0\">(</span>F<span class=\"sy1\">,</span>SizeOf<span class=\"br0\">(</span>F<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"re1\">#0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  leftSteps <span class=\"sy1\">:</span><span class=\"sy3\">=</span> High<span class=\"br0\">(</span>tSteps<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//unknown fields inserted from end</span><br/>  <span class=\"kw1\">For</span> rw <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>tLimit<span class=\"br0\">)</span> <span class=\"kw1\">to</span> High<span class=\"br0\">(</span>tLimit<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">For</span> cl <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>tLimit<span class=\"br0\">)</span> <span class=\"kw1\">to</span> High<span class=\"br0\">(</span>tLimit<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">Begin</span><br/>      value <span class=\"sy1\">:</span><span class=\"sy3\">=</span> InFd<span class=\"br0\">[</span>rw<span class=\"sy1\">,</span>cl<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">IF</span> InsertTest<span class=\"br0\">(</span>F<span class=\"sy1\">,</span>rw<span class=\"sy1\">,</span>cl<span class=\"sy1\">,</span>value<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">Begin</span><br/>        <span class=\"kw1\">with</span> F <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">Begin</span><br/>          <span class=\"kw1\">if</span> value &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>          <span class=\"kw1\">Begin</span><br/>            msk <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">shl</span> <span class=\"br0\">(</span>value<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            <span class=\"co1\">//given state</span><br/>            <span class=\"co1\">//use pointer to the relevant places and mark as occupied</span><br/>            <span class=\"kw1\">with</span> fdChgList<span class=\"br0\">[</span>fdChgIdx<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">begin</span><br/>               cvCol <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy2\">@</span>fdCol<span class=\"br0\">[</span>cl<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>               cvCol<span class=\"sy2\">^</span> <span class=\"sy3\">+=</span>Msk<span class=\"sy1\">;</span><br/>               cvRow <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy2\">@</span>fdRow<span class=\"br0\">[</span>rw<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>               cvRow<span class=\"sy2\">^</span> <span class=\"sy3\">+=</span>Msk<span class=\"sy1\">;</span><br/>               cvCar <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy2\">@</span>fdCar<span class=\"br0\">[</span>CarIdx<span class=\"br0\">(</span>rw<span class=\"sy1\">,</span>cl<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>               cvCar<span class=\"sy2\">^</span> <span class=\"sy3\">+=</span>Msk<span class=\"sy1\">;</span><br/>               cvVal <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy2\">@</span>fdVal<span class=\"br0\">[</span>rw<span class=\"sy1\">,</span>cl<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>               cvVal<span class=\"sy2\">^</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> value<span class=\"sy1\">;</span><br/>            <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>            inc<span class=\"br0\">(</span>fdChgIdx<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>          <span class=\"kw1\">end</span><br/>          <span class=\"kw1\">else</span><br/>          <span class=\"kw1\">Begin</span><br/>            <span class=\"co1\">//use pointer to the relevant places</span><br/>            <span class=\"kw1\">with</span> fdChgList<span class=\"br0\">[</span>leftSteps<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">begin</span><br/>               cvCol <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy2\">@</span>fdCol<span class=\"br0\">[</span>cl<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>               cvRow <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy2\">@</span>fdRow<span class=\"br0\">[</span>rw<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>               cvCar <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy2\">@</span>fdCar<span class=\"br0\">[</span>CarIdx<span class=\"br0\">(</span>rw<span class=\"sy1\">,</span>cl<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>               cvVal <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy2\">@</span>fdVal<span class=\"br0\">[</span>rw<span class=\"sy1\">,</span>cl<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>            <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>            dec<span class=\"br0\">(</span>leftSteps<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>          <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">Begin</span><br/>        <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>rw<span class=\"sy1\">:</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span>cl<span class=\"sy1\">:</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span>value<span class=\"sy1\">:</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">' not solvable SuDoKu '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        delay<span class=\"br0\">(</span><span class=\"nu0\">2000</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/>        EXIT<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//reverse direction of left over</span><br/>  <span class=\"kw1\">IF</span> DoReverse <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">Begin</span><br/>    leftSteps <span class=\"sy1\">:</span><span class=\"sy3\">=</span> High<span class=\"br0\">(</span>tSteps<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    rw <span class=\"sy1\">:</span><span class=\"sy3\">=</span> F<span class=\"sy1\">.</span><span class=\"me1\">fdChgIdx</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">repeat</span><br/>      TmpchgVal<span class=\"sy1\">:</span><span class=\"sy3\">=</span> F<span class=\"sy1\">.</span><span class=\"me1\">fdChgList</span><span class=\"br0\">[</span>leftSteps<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      F<span class=\"sy1\">.</span><span class=\"me1\">fdChgList</span><span class=\"br0\">[</span>leftSteps<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> F<span class=\"sy1\">.</span><span class=\"me1\">fdChgList</span><span class=\"br0\">[</span>rw<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      F<span class=\"sy1\">.</span><span class=\"me1\">fdChgList</span><span class=\"br0\">[</span>rw<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span>TmpchgVal<span class=\"sy1\">;</span><br/>      dec<span class=\"br0\">(</span>leftSteps<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>rw<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">until</span> rw&gt;<span class=\"sy3\">=</span>leftSteps<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//OutField(F);</span><br/>  solFound <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">true</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">procedure</span> SolIsFound<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  solF <span class=\"sy1\">:</span><span class=\"sy3\">=</span> F<span class=\"sy1\">;</span><br/>  inc<span class=\"br0\">(</span>solCnt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  solFound <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">True</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> TryCell<span class=\"br0\">(</span><span class=\"kw1\">var</span> ChgVal<span class=\"sy1\">:</span>tpchgVal<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  value <span class=\"sy1\">:</span>NativeInt<span class=\"sy1\">;</span><br/>  poss<span class=\"sy1\">,</span>msk<span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  <span class=\"kw1\">IF</span> solFound <span class=\"kw1\">then</span> EXIT<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">with</span> ChgVal<span class=\"sy2\">^</span> <span class=\"kw1\">do</span><br/>    poss<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>cvRow<span class=\"sy2\">^</span> <span class=\"kw1\">OR</span> cvCol<span class=\"sy2\">^</span> <span class=\"kw1\">OR</span> cvCar<span class=\"sy2\">^</span><span class=\"br0\">)</span> <span class=\"kw1\">XOR</span> maxMask<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> Poss <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    EXIT<span class=\"sy1\">;</span><br/>\u00a0<br/>  value <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  msk   <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">repeat</span><br/>    <span class=\"kw1\">IF</span> Poss <span class=\"kw3\">AND</span> MSK &lt;&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">Begin</span><br/>      inc<span class=\"br0\">(</span>callCnt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"co1\">//insert test value</span><br/>      <span class=\"kw1\">with</span> ChgVal<span class=\"sy2\">^</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">Begin</span><br/>        cvCol<span class=\"sy2\">^</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> cvCol<span class=\"sy2\">^</span> <span class=\"kw1\">OR</span> msk<span class=\"sy1\">;</span><br/>        cvRow<span class=\"sy2\">^</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> cvRow<span class=\"sy2\">^</span> <span class=\"kw1\">OR</span> msk<span class=\"sy1\">;</span><br/>        cvCar<span class=\"sy2\">^</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> cvCar<span class=\"sy2\">^</span> <span class=\"kw1\">OR</span> msk<span class=\"sy1\">;</span><br/>        cvVAl<span class=\"sy2\">^</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> value<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      <span class=\"co1\">//try next in list, if beyond last</span><br/>      inc<span class=\"br0\">(</span>ChgVal<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">IF</span> ChgVal<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">cvCol</span> &lt;&gt; <span class=\"kw2\">NIL</span> <span class=\"kw1\">then</span><br/>        TryCell<span class=\"br0\">(</span>ChgVal<span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span><br/>        SolIsFound<span class=\"sy1\">;</span><br/>      <span class=\"co1\">//remove test value</span><br/>      dec<span class=\"br0\">(</span>ChgVal<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">with</span> ChgVal<span class=\"sy2\">^</span>  <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">Begin</span><br/>        cvCol<span class=\"sy2\">^</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> cvCol<span class=\"sy2\">^</span> <span class=\"kw1\">XOR</span> msk<span class=\"sy1\">;</span><br/>        cvRow<span class=\"sy2\">^</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> cvRow<span class=\"sy2\">^</span> <span class=\"kw1\">XOR</span> msk<span class=\"sy1\">;</span><br/>        cvCar<span class=\"sy2\">^</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> cvCar<span class=\"sy2\">^</span> <span class=\"kw1\">XOR</span> msk<span class=\"sy1\">;</span><br/>        cvVAl<span class=\"sy2\">^</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>msk<span class=\"sy1\">,</span>msk<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> value&gt; maxValue<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  ChangeBegin <span class=\"sy1\">:</span> tpChgVal<span class=\"sy1\">;</span><br/>  k <span class=\"sy1\">:</span> NativeInt<span class=\"sy1\">;</span><br/>  T1<span class=\"sy1\">,</span>T0<span class=\"sy1\">:</span> TDateTime<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  randomize<span class=\"sy1\">;</span><br/>  ClrScr<span class=\"sy1\">;</span><br/>  solCnt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  callCnt<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  T0 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> time<span class=\"sy1\">;</span><br/>  k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span><br/>    InitField<span class=\"br0\">(</span>F<span class=\"sy1\">,</span>Expl1<span class=\"sy1\">,</span><span class=\"kw2\">FALSE</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    ChangeBegin <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy2\">@</span>F<span class=\"sy1\">.</span><span class=\"me1\">fdChgList</span><span class=\"br0\">[</span>F<span class=\"sy1\">.</span><span class=\"me1\">fdChgIdx</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    TryCell<span class=\"br0\">(</span>ChangeBegin<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> k &gt;<span class=\"sy3\">=</span> <span class=\"nu0\">5</span><span class=\"sy1\">;</span><br/>  T1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> time<span class=\"sy1\">;</span><br/>  Outfield<span class=\"br0\">(</span>solF<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"nu0\">86400</span><span class=\"sy3\">*</span><span class=\"nu0\">1000</span><span class=\"sy3\">*</span><span class=\"br0\">(</span>T1<span class=\"sy3\">-</span>T0<span class=\"br0\">)</span><span class=\"sy3\">/</span>k<span class=\"sy1\">:</span><span class=\"nu0\">10</span><span class=\"sy1\">:</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"st0\">' ms Test calls\u00a0:'</span><span class=\"sy1\">,</span>callCnt<span class=\"sy3\">/</span>k<span class=\"sy1\">:</span><span class=\"nu0\">8</span><span class=\"sy1\">:</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 40, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw2\">use</span> integer<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@A</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span><br/>    <span class=\"nu0\">5</span> <span class=\"nu0\">3</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span>  <span class=\"nu0\">7</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">2</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">8</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <br/>    <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">7</span> <span class=\"nu0\">0</span> <span class=\"nu0\">3</span>  <span class=\"nu0\">9</span> <span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <br/>\u00a0<br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">8</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">7</span> <span class=\"nu0\">2</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">4</span> <span class=\"nu0\">9</span> <br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">9</span> <span class=\"nu0\">8</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">7</span> <span class=\"nu0\">0</span> <br/>    <span class=\"nu0\">7</span> <span class=\"nu0\">9</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">8</span> <span class=\"nu0\">0</span> <br/>\u00a0<br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">3</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">5</span> <span class=\"nu0\">0</span> <span class=\"nu0\">6</span> <br/>    <span class=\"nu0\">9</span> <span class=\"nu0\">6</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">3</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">5</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">6</span> <span class=\"nu0\">9</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> solve <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">80</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">%t</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span><br/>\t\t<span class=\"co5\">$_</span> <span class=\"co2\">/ 9 == $i /</span> <span class=\"nu0\">9</span> <span class=\"sy0\">||</span><br/>\t\t<span class=\"co5\">$_</span> <span class=\"sy0\">%</span> <span class=\"nu0\">9</span> <span class=\"sy0\">==</span> <span class=\"re0\">$i</span> <span class=\"sy0\">%</span> <span class=\"nu0\">9</span> <span class=\"sy0\">||</span><br/>\t\t<span class=\"co5\">$_</span> <span class=\"co2\">/ 27 == $i /</span> <span class=\"nu0\">27</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"co5\">$_</span> <span class=\"sy0\">%</span> <span class=\"nu0\">9</span> <span class=\"co2\">/ 3 == $i\u00a0% 9 /</span> <span class=\"nu0\">3</span><br/>\t\t<span class=\"sy0\">?</span> <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">80</span><span class=\"sy0\">;</span><br/>\tsolve<span class=\"br0\">(</span> <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"co5\">$_</span> <span class=\"br0\">)</span> <span class=\"kw1\">for</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"sy0\">!</span><span class=\"re0\">$t</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$A</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">@A</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"-----+-----+-----<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">if</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">%</span>27<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">%</span>9<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st_h\">''</span><span class=\"sy0\">:</span> <span class=\"re0\">$i</span><span class=\"sy0\">%</span>3 <span class=\"sy0\">?</span> <span class=\"st_h\">' '</span> <span class=\"sy0\">:</span> <span class=\"st_h\">'|'</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">unless</span> <span class=\"sy0\">++</span><span class=\"re0\">$i</span><span class=\"sy0\">%</span>9<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>solve<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 42, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> v6<span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@A</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span><br/>    <span class=\"nu0\">5</span> <span class=\"nu0\">3</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span>  <span class=\"nu0\">7</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">2</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">8</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <br/>    <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">7</span> <span class=\"nu0\">0</span> <span class=\"nu0\">3</span>  <span class=\"nu0\">9</span> <span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <br/>\u00a0<br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">8</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">7</span> <span class=\"nu0\">2</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">4</span> <span class=\"nu0\">9</span> <br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">9</span> <span class=\"nu0\">8</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">7</span> <span class=\"nu0\">0</span> <br/>    <span class=\"nu0\">7</span> <span class=\"nu0\">9</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">8</span> <span class=\"nu0\">0</span> <br/>\u00a0<br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">3</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">5</span> <span class=\"nu0\">0</span> <span class=\"nu0\">6</span> <br/>    <span class=\"nu0\">9</span> <span class=\"nu0\">6</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">3</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">5</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">6</span> <span class=\"nu0\">9</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><br/><span class=\"sy0\">&gt;;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"sy0\">&amp;</span><span class=\"kw3\">I</span> <span class=\"sy0\">=</span> <span class=\"sy0\">*</span> <span class=\"kw1\">div</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span>  <span class=\"co1\"># line number</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">&amp;J</span> <span class=\"sy0\">=</span> <span class=\"sy0\">*</span> <span class=\"sy0\">%</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span>    <span class=\"co1\"># column number</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">&amp;K</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re0\">$_</span> <span class=\"kw1\">div</span> <span class=\"nu0\">27</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> <span class=\"re0\">$_</span> <span class=\"sy0\">%</span> <span class=\"nu0\">9</span> <span class=\"kw1\">div</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span> <span class=\"co1\"># bloc number</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> solve <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@A</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$i</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">@A</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@taken</span><span class=\"sy0\">-</span><span class=\"kw3\">values</span> <span class=\"sy0\">=</span> <span class=\"re0\">@A</span><span class=\"br0\">[</span><br/>\t    <span class=\"kw3\">grep</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw3\">I</span><span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"kw3\">I</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> J<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> J<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> K<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> K<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>\t    <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"sy0\">^</span><span class=\"re0\">@A</span><br/>\t<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"kw3\">grep</span> <span class=\"kw3\">none</span><span class=\"br0\">(</span><span class=\"re0\">@taken</span><span class=\"sy0\">-</span><span class=\"kw3\">values</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">9</span> <span class=\"br0\">{</span><br/>\t    <span class=\"re0\">@A</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$_</span><span class=\"sy0\">;</span><br/>\t    solve<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">@A</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@A</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">print</span> <span class=\"st0\">\"@A[$_] \"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw3\">print</span> <span class=\"st0\">\" \"</span>  <span class=\"kw1\">if</span> <span class=\"re0\">$i</span> <span class=\"sy0\">%%</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$i</span> <span class=\"sy0\">%%</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span> <span class=\"sy0\">%%</span> <span class=\"nu0\">27</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>solve<span class=\"sy0\">;</span></pre>"}, {"lang": "PHP", "loc": 125, "block": "<pre class=\"php highlighted_source\">\t<span class=\"kw2\">class</span> SudokuSolver <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">protected</span> <span class=\"re0\">$grid</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw2\">protected</span> <span class=\"re0\">$emptySymbol</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw2\">public</span> static <span class=\"kw2\">function</span> parseString<span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"sy0\">,</span> <span class=\"re0\">$emptySymbol</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'0'</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"re0\">$grid</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/str_split\"><span class=\"kw3\">str_split</span></a><span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$grid</span> <span class=\"kw1\">as</span> <span class=\"sy0\">&amp;</span><span class=\"re0\">$v</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$v</span> <span class=\"sy0\">==</span> <span class=\"re0\">$emptySymbol</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"re0\">$v</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"re0\">$v</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>int<span class=\"br0\">)</span><span class=\"re0\">$v</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"re0\">$grid</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw2\">public</span> <span class=\"kw2\">function</span> __construct<span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"sy0\">,</span> <span class=\"re0\">$emptySymbol</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'0'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"br0\">)</span> <span class=\"sy0\">!==</span> <span class=\"nu0\">81</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">throw</span> <span class=\"kw2\">new</span> \\Exception<span class=\"br0\">(</span><span class=\"st_h\">'Error sudoku'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">grid</span> <span class=\"sy0\">=</span> static<span class=\"sy0\">::</span><span class=\"me2\">parseString</span><span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"sy0\">,</span> <span class=\"re0\">$emptySymbol</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">emptySymbol</span> <span class=\"sy0\">=</span> <span class=\"re0\">$emptySymbol</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw2\">public</span> <span class=\"kw2\">function</span> solve<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\ttry<br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">placeNumber</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tcatch<span class=\"br0\">(</span>\\Exception <span class=\"re0\">$e</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw2\">protected</span> <span class=\"kw2\">function</span> placeNumber<span class=\"br0\">(</span><span class=\"re0\">$pos</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$pos</span> <span class=\"sy0\">==</span> <span class=\"nu0\">81</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">throw</span> <span class=\"kw2\">new</span> \\Exception<span class=\"br0\">(</span><span class=\"st_h\">'Finish'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">grid</span><span class=\"br0\">[</span><span class=\"re0\">$pos</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">placeNumber</span><span class=\"br0\">(</span><span class=\"re0\">$pos</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> <span class=\"re0\">$n</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">checkValidity</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$pos</span><span class=\"sy0\">%</span><span class=\"nu19\">9</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/floor\"><span class=\"kw3\">floor</span></a><span class=\"br0\">(</span><span class=\"re0\">$pos</span><span class=\"sy0\">/</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">grid</span><span class=\"br0\">[</span><span class=\"re0\">$pos</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">placeNumber</span><span class=\"br0\">(</span><span class=\"re0\">$pos</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">grid</span><span class=\"br0\">[</span><span class=\"re0\">$pos</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw2\">protected</span> <span class=\"kw2\">function</span> checkValidity<span class=\"br0\">(</span><span class=\"re0\">$val</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">*</span><span class=\"nu0\">9</span><span class=\"sy0\">+</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"re0\">$val</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">grid</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"nu0\">9</span><span class=\"sy0\">+</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"re0\">$val</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"kw1\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"re0\">$startX</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>int<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>int<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"re0\">$startY</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>int<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>int<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"re0\">$startY</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$startY</span><span class=\"sy0\">+</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"re0\">$startX</span><span class=\"sy0\">;</span> <span class=\"re0\">$j</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$startX</span><span class=\"sy0\">+</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"re0\">$j</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">grid</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"nu0\">9</span><span class=\"sy0\">+</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"re0\">$val</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t\t<span class=\"kw1\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw2\">public</span> <span class=\"kw2\">function</span> display<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">9</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$j</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">9</span><span class=\"sy0\">;</span><span class=\"re0\">$j</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"re0\">$str</span> <span class=\"sy0\">.=</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">grid</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"nu0\">9</span><span class=\"sy0\">+</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"re0\">$str</span> <span class=\"sy0\">.=</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$j</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> <span class=\"re0\">$j</span> <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t\t<span class=\"re0\">$str</span> <span class=\"sy0\">.=</span> <span class=\"st0\">\"| \"</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"re0\">$str</span> <span class=\"sy0\">.=</span> PHP_EOL<span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> <span class=\"re0\">$i</span> <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"re0\">$str</span> <span class=\"sy0\">.=</span>  <span class=\"st0\">\"------+-------+------\"</span><span class=\"sy0\">.</span>PHP_EOL<span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">echo</span> <span class=\"re0\">$str</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw2\">public</span> <span class=\"kw2\">function</span> __toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">grid</span> <span class=\"kw1\">as</span> <span class=\"sy0\">&amp;</span><span class=\"re0\">$item</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$item</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"re0\">$item</span> <span class=\"sy0\">=</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">emptySymbol</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">return</span> <a href=\"http://www.php.net/implode\"><span class=\"kw3\">implode</span></a><span class=\"br0\">(</span><span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">grid</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"re0\">$solver</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> SudokuSolver<span class=\"br0\">(</span><span class=\"st_h\">'009170000020600001800200000200006053000051009005040080040000700006000320700003900'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$solver</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">solve</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$solver</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">display</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 50, "block": "<pre class=\"text highlighted_source\">sequence board = split(\"\"\"<br/>.......39<br/>.....1..5<br/>..3.5.8..<br/>..8.9...6<br/>.7...2...<br/>1..4.....<br/>..9.8..5.<br/>.2....6..<br/>4..7.....\"\"\",'\\n')<br/>\u00a0<br/>function valid_move(integer y, integer x, integer ch)<br/>    for i=1 to 9 do<br/>        if ch=board[i][x] then return 0 end if<br/>        if ch=board[y][i] then return 0 end if<br/>    end for<br/>    y -= mod(y-1,3)<br/>    x -= mod(x-1,3)<br/>    for ys=y to y+2 do<br/>        for xs=x to x+2  do<br/>            if ch=board[ys][xs] then return 0 end if<br/>        end for<br/>    end for<br/>    return 1<br/>end function<br/>\u00a0<br/>sequence solution = {}<br/>\u00a0<br/>procedure brute_solve()<br/>    for y=1 to 9 do<br/>        for x=1 to 9 do<br/>            if board[y][x]&lt;='0' then<br/>                for ch='1' to '9' do<br/>                    if valid_move(y,x,ch) then<br/>                        board[y][x] = ch<br/>                        brute_solve()<br/>                        board[y][x] = ' '<br/>                        if length(solution) then return end if<br/>                    end if<br/>                end for<br/>                return<br/>            end if<br/>        end for<br/>    end for<br/>    solution = board    -- (already solved case)<br/>end procedure<br/>\u00a0<br/>atom t0 = time()<br/>brute_solve()<br/>printf(1,\"%s\\n(solved in\u00a0%3.2fs)\\n\",{join(solution,\"\\n\"),time()-t0})</pre>"}, {"lang": "PicoLisp", "loc": 82, "block": "<pre class=\"text highlighted_source\">(load \"lib/simul.l\")<br/>\u00a0<br/>### Fields/Board ###<br/># val lst<br/>\u00a0<br/>(setq<br/>   *Board (grid 9 9)<br/>   *Fields (apply append *Board) )<br/>\u00a0<br/># Init values to zero (empty)<br/>(for L *Board<br/>   (for This L<br/>      (=: val 0) ) )<br/>\u00a0<br/># Build lookup lists<br/>(for (X . L) *Board<br/>   (for (Y . This) L<br/>      (=: lst<br/>         (make<br/>            (let A (* 3 (/ (dec X) 3))<br/>               (do 3<br/>                  (inc 'A)<br/>                  (let B (* 3 (/ (dec Y) 3))<br/>                     (do 3<br/>                        (inc 'B)<br/>                        (unless (and (= A X) (= B Y))<br/>                           (link<br/>                              (prop (get *Board A B) 'val) ) ) ) ) ) )<br/>            (for Dir '(`west `east `south `north)<br/>               (for (This (Dir This)  This  (Dir This))<br/>                  (unless (memq (:: val) (made))<br/>                     (link (:: val)) ) ) ) ) ) ) )<br/>\u00a0<br/># Cut connections (for display only)<br/>(for (X . L) *Board<br/>   (for (Y . This) L<br/>      (when (member X (3 6))<br/>         (con (car (val This))) )<br/>      (when (member Y (4 7))<br/>         (set (cdr (val This))) ) ) )<br/>\u00a0<br/># Display board<br/>(de display ()<br/>   (disp *Board 0<br/>      '((This)<br/>         (if (=0 (: val))<br/>            \"   \"<br/>            (pack \" \" (: val) \" \") ) ) ) )<br/>\u00a0<br/># Initialize board<br/>(de main (Lst)<br/>   (for (Y . L) Lst<br/>      (for (X . N) L<br/>         (put *Board X (- 10 Y) 'val N) ) )<br/>   (display) )<br/>\u00a0<br/># Find solution<br/>(de go ()<br/>   (unless<br/>      (recur (*Fields)<br/>         (with (car *Fields)<br/>            (if (=0 (: val))<br/>               (loop<br/>                  (NIL<br/>                     (or<br/>                        (assoc (inc (:: val)) (: lst))<br/>                        (recurse (cdr *Fields)) ) )<br/>                  (T (= 9 (: val)) (=: val 0)) )<br/>               (recurse (cdr *Fields)) ) ) )<br/>      (display) ) )<br/>\u00a0<br/>(main<br/>   (quote<br/>      (5 3 0 0 7 0 0 0 0)<br/>      (6 0 0 1 9 5 0 0 0)<br/>      (0 9 8 0 0 0 0 6 0)<br/>      (8 0 0 0 6 0 0 0 3)<br/>      (4 0 0 8 0 3 0 0 1)<br/>      (7 0 0 0 2 0 0 0 6)<br/>      (0 6 0 0 0 0 2 8 0)<br/>      (0 0 0 4 1 9 0 0 5)<br/>      (0 0 0 0 8 0 0 7 9) ) )</pre>"}, {"lang": "PL/I", "loc": 84, "block": "<pre class=\"pli highlighted_source\">sudoku<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"kw1\">options</span> <span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* 27 July 2014 */</span><br/>\u00a0<br/>  <span class=\"kw1\">declare</span> grid <span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">static</span> <span class=\"kw1\">initial</span> <span class=\"br0\">(</span><br/>      <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>    <br/>      <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>    <br/>      <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>    <br/>      <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>    <br/>      <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span>    <br/>      <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>    <br/>      <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>    <br/>      <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span>    <br/>      <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">declare</span> grid_solved <span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">call</span> print_sudoku <span class=\"br0\">(</span>grid<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">call</span> solve <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">call</span> print_sudoku <span class=\"br0\">(</span>grid_solved<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>solve<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span> <span class=\"kw1\">recursive</span> <span class=\"kw1\">options</span> <span class=\"br0\">(</span><span class=\"kw1\">reorder</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> n_tmp<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">9</span> <span class=\"kw1\">then</span><br/>      grid_solved <span class=\"sy0\">=</span> grid<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">do</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> is_safe <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          <span class=\"kw1\">do</span><span class=\"sy0\">;</span><br/>             n_tmp <span class=\"sy0\">=</span> grid <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>             grid <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>             <span class=\"kw1\">if</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">9</span> <span class=\"kw1\">then</span><br/>               <span class=\"kw1\">call</span> solve <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>             <span class=\"kw1\">else</span><br/>               <span class=\"kw1\">call</span> solve <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>             grid <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n_tmp<span class=\"sy0\">;</span><br/>          <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">end</span> solve<span class=\"sy0\">;</span><br/>\u00a0<br/>is_safe<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"kw1\">returns</span> <span class=\"br0\">(</span><span class=\"kw1\">bit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">aligned</span><span class=\"br0\">)</span> <span class=\"kw1\">options</span> <span class=\"br0\">(</span><span class=\"kw1\">reorder</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>true <span class=\"kw1\">value</span> <span class=\"br0\">(</span><span class=\"st0\">'1'</span>b<span class=\"br0\">)</span><span class=\"sy0\">,</span> false <span class=\"kw1\">value</span> <span class=\"br0\">(</span><span class=\"st0\">'0'</span>b<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">bit</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>i_min<span class=\"sy0\">,</span> j_min<span class=\"sy0\">,</span> ii<span class=\"sy0\">,</span> jj<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">declare</span> kk <span class=\"kw1\">bit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">aligned</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> grid <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span>  <span class=\"sy0\">=</span> n      <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span>true<span class=\"br0\">)</span><span class=\"sy0\">;</span>    <br/>    <span class=\"kw1\">if</span> grid <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span> <span class=\"sy0\">^=</span> <span class=\"nu0\">0</span>      <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span>false<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">any</span> <span class=\"br0\">(</span>grid <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span>false<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">any</span> <span class=\"br0\">(</span>grid <span class=\"br0\">(</span><span class=\"sy0\">*,</span> j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span>false<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* i_min and j_min are the co-ordinates of the top left-hand corner */</span><br/>    <span class=\"coMULTI\">/* of 3 x 3 grid in which element (i,j) exists.                     */</span><br/>    i_min <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"kw1\">trunc</span><span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    j_min <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"kw1\">trunc</span><span class=\"br0\">(</span><span class=\"br0\">(</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">begin</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">declare</span> sub_grid<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">defined</span> grid<span class=\"br0\">(</span>1sub<span class=\"sy0\">+</span>i_min<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>2sub<span class=\"sy0\">+</span>j_min<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>       kk <span class=\"sy0\">=</span> true<span class=\"sy0\">;</span><br/>       <span class=\"kw1\">if</span> <span class=\"kw1\">any</span><span class=\"br0\">(</span>sub_grid <span class=\"sy0\">=</span> n<span class=\"br0\">)</span> <span class=\"kw1\">then</span> kk <span class=\"sy0\">=</span> false<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>kk<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">end</span> is_safe<span class=\"sy0\">;</span><br/>\u00a0<br/>print_sudoku<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>grid<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">declare</span> grid <span class=\"br0\">(</span><span class=\"sy0\">*,*</span><span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">declare</span> <span class=\"br0\">(</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> ii<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">declare</span> bar <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">19</span><span class=\"br0\">)</span> <span class=\"kw1\">initial</span> <span class=\"br0\">(</span> <span class=\"st0\">'+-----+-----+-----+'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">declare</span> frame <span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">initial</span> <span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">'|'</span><span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">'|'</span><span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">'|'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span>bar<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">7</span> <span class=\"kw1\">by</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">do</span> ii <span class=\"sy0\">=</span> i <span class=\"kw1\">to</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span> <span class=\"st0\">'|'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>grid <span class=\"br0\">(</span>ii<span class=\"sy0\">,</span> j<span class=\"br0\">)</span><span class=\"sy0\">,</span> frame<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> f<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span>bar<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">end</span> print_sudoku<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span> sudoku<span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 26, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span>library<span class=\"br0\">(</span>clpfd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>sudoku<span class=\"br0\">(</span>Rows<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>        length<span class=\"br0\">(</span>Rows<span class=\"sy4\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> maplist<span class=\"br0\">(</span>length_<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> Rows<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>        append<span class=\"br0\">(</span>Rows<span class=\"sy4\">,</span> Vs<span class=\"br0\">)</span><span class=\"sy4\">,</span> Vs ins <span class=\"nu0\">1</span><span class=\"sy4\">..</span><span class=\"nu0\">9</span><span class=\"sy4\">,</span><br/>        maplist<span class=\"br0\">(</span>all_distinct<span class=\"sy4\">,</span> Rows<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>        transpose<span class=\"br0\">(</span>Rows<span class=\"sy4\">,</span> Columns<span class=\"br0\">)</span><span class=\"sy4\">,</span> maplist<span class=\"br0\">(</span>all_distinct<span class=\"sy4\">,</span> Columns<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>        Rows <span class=\"sy6\">=</span> <span class=\"br0\">[</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>C<span class=\"sy4\">,</span>D<span class=\"sy4\">,</span>E<span class=\"sy4\">,</span>F<span class=\"sy4\">,</span>G<span class=\"sy4\">,</span>H<span class=\"sy4\">,</span>I<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>        blocks<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> B<span class=\"sy4\">,</span> C<span class=\"br0\">)</span><span class=\"sy4\">,</span> blocks<span class=\"br0\">(</span>D<span class=\"sy4\">,</span> E<span class=\"sy4\">,</span> F<span class=\"br0\">)</span><span class=\"sy4\">,</span> blocks<span class=\"br0\">(</span>G<span class=\"sy4\">,</span> H<span class=\"sy4\">,</span> I<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>length_<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> Ls<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> length<span class=\"br0\">(</span>Ls<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>blocks<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>blocks<span class=\"br0\">(</span><span class=\"br0\">[</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>C<span class=\"sy5\">|</span>Bs1<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>D<span class=\"sy4\">,</span>E<span class=\"sy4\">,</span>F<span class=\"sy5\">|</span>Bs2<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>G<span class=\"sy4\">,</span>H<span class=\"sy4\">,</span>I<span class=\"sy5\">|</span>Bs3<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>        all_distinct<span class=\"br0\">(</span><span class=\"br0\">[</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>C<span class=\"sy4\">,</span>D<span class=\"sy4\">,</span>E<span class=\"sy4\">,</span>F<span class=\"sy4\">,</span>G<span class=\"sy4\">,</span>H<span class=\"sy4\">,</span>I<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>        blocks<span class=\"br0\">(</span>Bs1<span class=\"sy4\">,</span> Bs2<span class=\"sy4\">,</span> Bs3<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>problem<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>            <span class=\"br0\">[</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span><span class=\"nu0\">3</span><span class=\"sy4\">,</span>_<span class=\"sy4\">,</span><span class=\"nu0\">8</span><span class=\"sy4\">,</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>            <span class=\"br0\">[</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span>_<span class=\"sy4\">,</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>            <span class=\"br0\">[</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span><span class=\"nu0\">5</span><span class=\"sy4\">,</span>_<span class=\"sy4\">,</span><span class=\"nu0\">7</span><span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>            <span class=\"br0\">[</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span><span class=\"nu0\">4</span><span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>            <span class=\"br0\">[</span>_<span class=\"sy4\">,</span><span class=\"nu0\">9</span><span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>            <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span><span class=\"nu0\">7</span><span class=\"sy4\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>            <span class=\"br0\">[</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span>_<span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>            <span class=\"br0\">[</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span><span class=\"nu0\">4</span><span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 111, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">DataSection</span><br/>  puzzle:<br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"394002670\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"000300400\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"500690020\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"045000900\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"600000007\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"007000580\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"010067008\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"009008000\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"026400735\"</span><br/><span class=\"kw1\">EndDataSection</span><br/>\u00a0<br/>#IsPossible <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>#IsNotPossible <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>#Unknown <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">Global</span> <span class=\"kw1\">Dim</span> sudoku<span class=\"br0\">(</span><span class=\"nu0\">8</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span> <br/><span class=\"co1\">;-declarations</span><br/><span class=\"kw1\">Declare</span> readSudoku<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Declare</span> displaySudoku<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Declare</span>.s buildpossible<span class=\"br0\">(</span>x, y, Array possible.b<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Declare</span> solvePuzzle<span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;-procedures</span><br/><span class=\"kw1\">Procedure</span> readSudoku<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> a$, row, column<br/>\u00a0<br/>  <span class=\"kw1\">Restore</span> puzzle<br/>  <span class=\"kw1\">For</span> row <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">8</span> <br/>    <span class=\"kw1\">Read</span>.s a$  <br/>    <span class=\"kw1\">For</span> column <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">8</span><br/>      sudoku<span class=\"br0\">(</span>column, row<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Mid</span><span class=\"br0\">(</span>a$, column <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> displaySudoku<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> row, column <br/>  <span class=\"kw1\">Static</span> border.s <span class=\"sy0\">=</span> <span class=\"st0\">\"+-----+-----+-----+\"</span><br/>  <span class=\"kw1\">For</span> row <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">8</span><br/>    <span class=\"kw1\">If</span> row <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>border<span class=\"br0\">)</span>: <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">For</span> column <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">8</span><br/>      <span class=\"kw1\">If</span> column <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>: <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span>: <span class=\"kw1\">Else</span>: <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>: <span class=\"kw1\">EndIf</span><br/>      <span class=\"kw1\">If</span> sudoku<span class=\"br0\">(</span>column, row<span class=\"br0\">)</span>: <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>sudoku<span class=\"br0\">(</span>column, row<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: <span class=\"kw1\">Else</span>: <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span>: <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>border<span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.s buildpossible<span class=\"br0\">(</span>x, y, Array possible.b<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> index, column, row, boxColumn <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span>, boxRow <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><br/>  <span class=\"kw1\">Dim</span> possible.b<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> index <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">8</span> <br/>    possible<span class=\"br0\">(</span>sudoku<span class=\"br0\">(</span>index, y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> #IsNotPossible <span class=\"co1\">;record possibles in column</span><br/>    possible<span class=\"br0\">(</span>sudoku<span class=\"br0\">(</span>x, index<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> #IsNotPossible <span class=\"co1\">;record possibles in row</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"co1\">;record possibles in box</span><br/>  <span class=\"kw1\">For</span> row <span class=\"sy0\">=</span> boxRow <span class=\"kw1\">To</span> boxRow <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">For</span> column <span class=\"sy0\">=</span> boxColumn <span class=\"kw1\">To</span> boxColumn <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <br/>      possible<span class=\"br0\">(</span>sudoku<span class=\"br0\">(</span>column, row<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> #IsNotPossible<br/>    <span class=\"kw1\">Next</span> <br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> solvePuzzle<span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> row, column, spot, digit<br/>  <span class=\"kw1\">Dim</span> possible.b<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> row <span class=\"sy0\">=</span> y <span class=\"kw1\">To</span> <span class=\"nu0\">8</span><br/>    <span class=\"kw1\">For</span> column <span class=\"sy0\">=</span> x <span class=\"kw1\">To</span> <span class=\"nu0\">8</span><br/>      <span class=\"kw1\">If</span> sudoku<span class=\"br0\">(</span>column, row<span class=\"br0\">)</span> <span class=\"sy0\">=</span> #Unknown<br/>        buildpossible<span class=\"br0\">(</span>column, row, possible<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">For</span> digit <span class=\"sy0\">=</span>  <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">9</span>                                   <br/>          <span class=\"kw1\">If</span> possible<span class=\"br0\">(</span>digit<span class=\"br0\">)</span> <span class=\"sy0\">=</span> #IsPossible<br/>            sudoku<span class=\"br0\">(</span>column, row<span class=\"br0\">)</span> <span class=\"sy0\">=</span> digit<br/>            spot <span class=\"sy0\">=</span> row <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> <span class=\"sy0\">+</span> column <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">If</span> solvePuzzle<span class=\"br0\">(</span>spot <span class=\"sy0\">%</span> <span class=\"nu0\">9</span>, spot <span class=\"sy0\">/</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>              <span class=\"kw1\">Break</span> <span class=\"nu0\">3</span><br/>            <span class=\"kw1\">EndIf</span>   <br/>          <span class=\"kw1\">EndIf</span><br/>        <span class=\"kw1\">Next</span><br/>\u00a0<br/>        <span class=\"kw1\">If</span> digit <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>          sudoku<span class=\"br0\">(</span>column, row<span class=\"br0\">)</span> <span class=\"sy0\">=</span> #Unknown<br/>          <span class=\"kw1\">ProcedureReturn</span> #False<br/>        <span class=\"kw1\">EndIf</span> <br/>      <span class=\"kw1\">EndIf</span> <br/>    <span class=\"kw1\">Next</span> <br/>    x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"co1\">;reset column start point</span><br/>  <span class=\"kw1\">Next</span> <br/>  <span class=\"kw1\">ProcedureReturn</span> #True<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  readSudoku<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  displaySudoku<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> solvePuzzle<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Solved.\"</span><span class=\"br0\">)</span><br/>    displaySudoku<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Unable to solve puzzle\"</span><span class=\"br0\">)</span> <span class=\"co1\">;due to bad starting data</span><br/>  <span class=\"kw1\">EndIf</span> <br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 85, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">def</span> initiate<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    box.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"nu0\">19</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    box.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span><span class=\"sy0\">,</span> <span class=\"nu0\">21</span><span class=\"sy0\">,</span> <span class=\"nu0\">22</span><span class=\"sy0\">,</span> <span class=\"nu0\">23</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    box.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"sy0\">,</span> <span class=\"nu0\">26</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    box.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">27</span><span class=\"sy0\">,</span> <span class=\"nu0\">28</span><span class=\"sy0\">,</span> <span class=\"nu0\">29</span><span class=\"sy0\">,</span> <span class=\"nu0\">36</span><span class=\"sy0\">,</span> <span class=\"nu0\">37</span><span class=\"sy0\">,</span> <span class=\"nu0\">38</span><span class=\"sy0\">,</span> <span class=\"nu0\">45</span><span class=\"sy0\">,</span> <span class=\"nu0\">46</span><span class=\"sy0\">,</span> <span class=\"nu0\">47</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    box.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">30</span><span class=\"sy0\">,</span> <span class=\"nu0\">31</span><span class=\"sy0\">,</span> <span class=\"nu0\">32</span><span class=\"sy0\">,</span> <span class=\"nu0\">39</span><span class=\"sy0\">,</span> <span class=\"nu0\">40</span><span class=\"sy0\">,</span> <span class=\"nu0\">41</span><span class=\"sy0\">,</span> <span class=\"nu0\">48</span><span class=\"sy0\">,</span> <span class=\"nu0\">49</span><span class=\"sy0\">,</span> <span class=\"nu0\">50</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    box.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">33</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"sy0\">,</span> <span class=\"nu0\">35</span><span class=\"sy0\">,</span> <span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"nu0\">43</span><span class=\"sy0\">,</span> <span class=\"nu0\">44</span><span class=\"sy0\">,</span> <span class=\"nu0\">51</span><span class=\"sy0\">,</span> <span class=\"nu0\">52</span><span class=\"sy0\">,</span> <span class=\"nu0\">53</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    box.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">54</span><span class=\"sy0\">,</span> <span class=\"nu0\">55</span><span class=\"sy0\">,</span> <span class=\"nu0\">56</span><span class=\"sy0\">,</span> <span class=\"nu0\">63</span><span class=\"sy0\">,</span> <span class=\"nu0\">64</span><span class=\"sy0\">,</span> <span class=\"nu0\">65</span><span class=\"sy0\">,</span> <span class=\"nu0\">72</span><span class=\"sy0\">,</span> <span class=\"nu0\">73</span><span class=\"sy0\">,</span> <span class=\"nu0\">74</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    box.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">57</span><span class=\"sy0\">,</span> <span class=\"nu0\">58</span><span class=\"sy0\">,</span> <span class=\"nu0\">59</span><span class=\"sy0\">,</span> <span class=\"nu0\">66</span><span class=\"sy0\">,</span> <span class=\"nu0\">67</span><span class=\"sy0\">,</span> <span class=\"nu0\">68</span><span class=\"sy0\">,</span> <span class=\"nu0\">75</span><span class=\"sy0\">,</span> <span class=\"nu0\">76</span><span class=\"sy0\">,</span> <span class=\"nu0\">77</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    box.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">60</span><span class=\"sy0\">,</span> <span class=\"nu0\">61</span><span class=\"sy0\">,</span> <span class=\"nu0\">62</span><span class=\"sy0\">,</span> <span class=\"nu0\">69</span><span class=\"sy0\">,</span> <span class=\"nu0\">70</span><span class=\"sy0\">,</span> <span class=\"nu0\">71</span><span class=\"sy0\">,</span> <span class=\"nu0\">78</span><span class=\"sy0\">,</span> <span class=\"nu0\">79</span><span class=\"sy0\">,</span> <span class=\"nu0\">80</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">81</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span>:<br/>        row.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> i+<span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>:<br/>        column.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">80</span>+i<span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> valid<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> pos<span class=\"br0\">)</span>:<br/>    current_row <span class=\"sy0\">=</span> pos/<span class=\"nu0\">9</span><br/>    current_col <span class=\"sy0\">=</span> pos%<span class=\"nu0\">9</span><br/>    current_box <span class=\"sy0\">=</span> <span class=\"br0\">(</span>current_row/<span class=\"nu0\">3</span><span class=\"br0\">)</span>*<span class=\"nu0\">3</span> + <span class=\"br0\">(</span>current_col/<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> row<span class=\"br0\">[</span>current_row<span class=\"br0\">]</span>:<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> n<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> column<span class=\"br0\">[</span>current_col<span class=\"br0\">]</span>:<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> n<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> box<span class=\"br0\">[</span>current_box<span class=\"br0\">]</span>:<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> n<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">True</span><br/>\u00a0<br/><span class=\"kw1\">def</span> solve<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    proceed <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">81</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> given<span class=\"br0\">[</span>i<span class=\"br0\">]</span>:<br/>            <span class=\"kw1\">if</span> proceed:<br/>                    i +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">else</span>:<br/>                i -<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">else</span>:<br/>            n <span class=\"sy0\">=</span> grid<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>            prev <span class=\"sy0\">=</span> grid<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>            <span class=\"kw1\">while</span><span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span>:<br/>              <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span>:<br/>                  n +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>              <span class=\"kw1\">if</span> valid<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> i<span class=\"br0\">)</span>:<br/>                  grid<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<br/>                  proceed <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>                  <span class=\"kw1\">break</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> prev<span class=\"br0\">)</span>:<br/>               grid<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>               proceed <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            <span class=\"kw1\">if</span> proceed:<br/>               i +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">else</span>:<br/>               i -<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">def</span> inputs<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    nextt <span class=\"sy0\">=</span> <span class=\"st0\">'T'</span><br/>    number <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    pos <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"kw1\">not</span><span class=\"br0\">(</span>nextt <span class=\"sy0\">==</span> <span class=\"st0\">'N'</span> <span class=\"kw1\">or</span> nextt <span class=\"sy0\">==</span> <span class=\"st0\">'n'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"Enter the position:\"</span><span class=\"sy0\">,</span><br/>        pos <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw2\">raw_input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        given<span class=\"br0\">[</span>pos - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">True</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"Enter the numerical:\"</span><span class=\"sy0\">,</span><br/>        number <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw2\">raw_input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        grid<span class=\"br0\">[</span>pos - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> number<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"Do you want to enter another given?(Y, for yes: N, for no)\"</span><br/>        nextt <span class=\"sy0\">=</span> <span class=\"kw2\">raw_input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>grid <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>*<span class=\"nu0\">81</span><br/>given <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">False</span><span class=\"br0\">]</span>*<span class=\"nu0\">81</span><br/>box <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>row <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>column <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>initiate<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>inputs<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>solve<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span> grid<span class=\"br0\">[</span>i*<span class=\"nu0\">9</span>:i*<span class=\"nu0\">9</span>+<span class=\"nu0\">9</span><span class=\"br0\">]</span><br/><span class=\"kw2\">raw_input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 84, "block": "<pre class=\"text highlighted_source\">import Prelude;<br/>import vis::Figure;<br/>import vis::Render;<br/>\u00a0<br/>public rel[int,int,int] sudoku(rel[int x, int y, int v] sudoku){<br/>\tannotated= annotateGrid(sudoku);<br/>\tsolved = {&lt;0,0,0,0,{0}&gt;};<br/>\u00a0<br/>\twhile(!isEmpty(solved)){<br/>\t\tfor (n &lt;- [0 ..8]){<br/>\t\t\tcolumn = domainR(annotated, {n});<br/>\t\t\tannotated -= column;<br/>\t\t\tannotated += reduceOptions(column);<br/>\u00a0<br/>\t\t\trow = {&lt;x,y,v,g,p&gt; | &lt;x,y,v,g,p&gt; &lt;- annotated, y==n}; <br/>\t\t\tannotated -= row;<br/>\t\t\tannotated += reduceOptions(row);<br/>\u00a0<br/>\t\t\tgrid1 = {&lt;x,y,v,g,p&gt; | &lt;x,y,v,g,p&gt; &lt;- annotated, g==n}; <br/>\t\t\tannotated -= grid1;<br/>\t\t\tannotated += reduceOptions(grid1);<br/>\t\t}\t<br/>\u00a0<br/>\t\tsolved = {&lt;x,y,v,g,p&gt; | &lt;x,y,v,g,p&gt; &lt;- annotated, size(p)==1};<br/>\t\tannotated -= solved;<br/>\t\tannotated += {&lt;x,y,getOneFrom(p),g,{*[1 .. 9]}&gt; | &lt;x,y,v,g,p&gt; &lt;- solved};<br/>\t}<br/>\u00a0<br/>\tresult = {&lt;x,y,v&gt; | &lt;x,y,v,g,p&gt; &lt;- annotated};<br/>\treturn result;<br/>}<br/>\u00a0<br/>\u00a0<br/>//adds gridnumber and default set of options<br/>public rel[int,int,int,int,set[int]] annotateGrid(rel[int x, int y, int v] sudoku){<br/>\tresult = {};<br/>\t\tfor (&lt;x, y, v&gt; &lt;- sudoku){<br/>\t\t\tg = 0;<br/>\t\t\tif (x&lt;3 &amp;&amp; y&lt;3) g = 0;<br/>\t\t\tif (2&lt;x &amp;&amp; x&lt;6 &amp;&amp; y&lt;3) g = 1;<br/>\t\t\tif (x&gt;5 &amp;&amp; y&lt;3) g = 2;<br/>\u00a0<br/>\t\t\tif (x&lt;3 &amp;&amp; 2&lt;y &amp;&amp; y&lt;6) g = 3;<br/>\t\t\tif (2&lt;x &amp;&amp; x&lt;6 &amp;&amp; 2&lt;y &amp;&amp; y&lt;6) g = 4;<br/>\t\t\tif (x&gt;5 &amp;&amp; 2&lt;y &amp;&amp; y&lt;6) g = 5;<br/>\u00a0<br/>\t\t\tif (x&lt;3 &amp;&amp; y&gt;5) g=6;<br/>\t\t\tif (2&lt;x &amp;&amp; x&lt;6 &amp;&amp; y&gt;5) g=7;<br/>\t\t\tif (x&gt;5 &amp;&amp; y&gt;5) g=8;<br/>\u00a0<br/>\t\t\tresult += &lt;x,y,v,g,{*[1 .. 9]}&gt;;<br/>\t\t\t}<br/>\treturn result;<br/>}<br/>\u00a0<br/>//reduces set of options<br/>public rel[int,int,int,int,set[int]] reduceOptions(rel[int x, int y, int v, int g, set[int] p] subSudoku){<br/>\tsolved = {&lt;x,y,v,g,p&gt; | &lt;x,y,v,g,p&gt; &lt;- subSudoku, v!=0};<br/>\tnumbers = {*[1 .. 9]} - {v | &lt;x,y,v,g,p&gt; &lt;- solved}; <br/>\tremaining = {&lt;x,y,v,g,numbers&amp;p&gt; | &lt;x,y,v,g,p&gt; &lt;- subSudoku-solved};<br/>\tresult = remaining + solved;<br/>\treturn result;<br/>}<br/>\u00a0<br/>//a function to visualize the result<br/>public void displaySudoku(rel[int x, int y, int v] sudoku){<br/>\tpoints = [box(text(\"&lt;v&gt;\"), align(0.111111*(x+1),0.111111*(y+1)),shrink(0.1)) | &lt;x,y,v&gt; &lt;- sudoku];<br/>\tprint(points);<br/>\trender(overlay([*points], aspectRatio(1.0)));<br/>}<br/>\u00a0<br/>//a sudoku<br/>public rel[int, int, int] sudokuA = <br/>{<br/>&lt;0,0,3&gt;, &lt;1,0,9&gt;, &lt;2,0,4&gt;, &lt;3,0,0&gt;, &lt;4,0,0&gt;, &lt;5,0,2&gt;, &lt;6,0,6&gt;, &lt;7,0,7&gt;, &lt;8,0,0&gt;,<br/>&lt;0,1,0&gt;, &lt;1,1,0&gt;, &lt;2,1,0&gt;, &lt;3,1,3&gt;, &lt;4,1,0&gt;, &lt;5,1,0&gt;, &lt;6,1,4&gt;, &lt;7,1,0&gt;, &lt;8,1,0&gt;,<br/>&lt;0,2,5&gt;, &lt;1,2,0&gt;, &lt;2,2,0&gt;, &lt;3,2,6&gt;, &lt;4,2,9&gt;, &lt;5,2,0&gt;, &lt;6,2,0&gt;, &lt;7,2,2&gt;, &lt;8,2,0&gt;,<br/>&lt;0,3,0&gt;, &lt;1,3,4&gt;, &lt;2,3,5&gt;, &lt;3,3,0&gt;, &lt;4,3,0&gt;, &lt;5,3,0&gt;, &lt;6,3,9&gt;, &lt;7,3,0&gt;, &lt;8,3,0&gt;,<br/>&lt;0,4,6&gt;, &lt;1,4,0&gt;, &lt;2,4,0&gt;, &lt;3,4,0&gt;, &lt;4,4,0&gt;, &lt;5,4,0&gt;, &lt;6,4,0&gt;, &lt;7,4,0&gt;, &lt;8,4,7&gt;, <br/>&lt;0,5,0&gt;, &lt;1,5,0&gt;, &lt;2,5,7&gt;, &lt;3,5,0&gt;, &lt;4,5,0&gt;, &lt;5,5,0&gt;, &lt;6,5,5&gt;, &lt;7,5,8&gt;, &lt;8,5,0&gt;,<br/>&lt;0,6,0&gt;, &lt;1,6,1&gt;, &lt;2,6,0&gt;, &lt;3,6,0&gt;, &lt;4,6,6&gt;, &lt;5,6,7&gt;, &lt;6,6,0&gt;, &lt;7,6,0&gt;, &lt;8,6,8&gt;,<br/>&lt;0,7,0&gt;, &lt;1,7,0&gt;, &lt;2,7,9&gt;, &lt;3,7,0&gt;, &lt;4,7,0&gt;, &lt;5,7,8&gt;, &lt;6,7,0&gt;, &lt;7,7,0&gt;, &lt;8,7,0&gt;,<br/>&lt;0,8,0&gt;, &lt;1,8,2&gt;, &lt;2,8,6&gt;, &lt;3,8,4&gt;, &lt;4,8,0&gt;, &lt;5,8,0&gt;, &lt;6,8,7&gt;, &lt;7,8,3&gt;, &lt;8,8,5&gt; <br/>};</pre>"}, {"lang": "Rascal", "loc": 84, "block": "<pre class=\"text highlighted_source\">import Prelude;<br/>import vis::Figure;<br/>import vis::Render;<br/>\u00a0<br/>public rel[int,int,int] sudoku(rel[int x, int y, int v] sudoku){<br/>\tannotated= annotateGrid(sudoku);<br/>\tsolved = {&lt;0,0,0,0,{0}&gt;};<br/>\u00a0<br/>\twhile(!isEmpty(solved)){<br/>\t\tfor (n &lt;- [0 ..8]){<br/>\t\t\tcolumn = domainR(annotated, {n});<br/>\t\t\tannotated -= column;<br/>\t\t\tannotated += reduceOptions(column);<br/>\u00a0<br/>\t\t\trow = {&lt;x,y,v,g,p&gt; | &lt;x,y,v,g,p&gt; &lt;- annotated, y==n}; <br/>\t\t\tannotated -= row;<br/>\t\t\tannotated += reduceOptions(row);<br/>\u00a0<br/>\t\t\tgrid1 = {&lt;x,y,v,g,p&gt; | &lt;x,y,v,g,p&gt; &lt;- annotated, g==n}; <br/>\t\t\tannotated -= grid1;<br/>\t\t\tannotated += reduceOptions(grid1);<br/>\t\t}\t<br/>\u00a0<br/>\t\tsolved = {&lt;x,y,v,g,p&gt; | &lt;x,y,v,g,p&gt; &lt;- annotated, size(p)==1};<br/>\t\tannotated -= solved;<br/>\t\tannotated += {&lt;x,y,getOneFrom(p),g,{*[1 .. 9]}&gt; | &lt;x,y,v,g,p&gt; &lt;- solved};<br/>\t}<br/>\u00a0<br/>\tresult = {&lt;x,y,v&gt; | &lt;x,y,v,g,p&gt; &lt;- annotated};<br/>\treturn result;<br/>}<br/>\u00a0<br/>\u00a0<br/>//adds gridnumber and default set of options<br/>public rel[int,int,int,int,set[int]] annotateGrid(rel[int x, int y, int v] sudoku){<br/>\tresult = {};<br/>\t\tfor (&lt;x, y, v&gt; &lt;- sudoku){<br/>\t\t\tg = 0;<br/>\t\t\tif (x&lt;3 &amp;&amp; y&lt;3) g = 0;<br/>\t\t\tif (2&lt;x &amp;&amp; x&lt;6 &amp;&amp; y&lt;3) g = 1;<br/>\t\t\tif (x&gt;5 &amp;&amp; y&lt;3) g = 2;<br/>\u00a0<br/>\t\t\tif (x&lt;3 &amp;&amp; 2&lt;y &amp;&amp; y&lt;6) g = 3;<br/>\t\t\tif (2&lt;x &amp;&amp; x&lt;6 &amp;&amp; 2&lt;y &amp;&amp; y&lt;6) g = 4;<br/>\t\t\tif (x&gt;5 &amp;&amp; 2&lt;y &amp;&amp; y&lt;6) g = 5;<br/>\u00a0<br/>\t\t\tif (x&lt;3 &amp;&amp; y&gt;5) g=6;<br/>\t\t\tif (2&lt;x &amp;&amp; x&lt;6 &amp;&amp; y&gt;5) g=7;<br/>\t\t\tif (x&gt;5 &amp;&amp; y&gt;5) g=8;<br/>\u00a0<br/>\t\t\tresult += &lt;x,y,v,g,{*[1 .. 9]}&gt;;<br/>\t\t\t}<br/>\treturn result;<br/>}<br/>\u00a0<br/>//reduces set of options<br/>public rel[int,int,int,int,set[int]] reduceOptions(rel[int x, int y, int v, int g, set[int] p] subSudoku){<br/>\tsolved = {&lt;x,y,v,g,p&gt; | &lt;x,y,v,g,p&gt; &lt;- subSudoku, v!=0};<br/>\tnumbers = {*[1 .. 9]} - {v | &lt;x,y,v,g,p&gt; &lt;- solved}; <br/>\tremaining = {&lt;x,y,v,g,numbers&amp;p&gt; | &lt;x,y,v,g,p&gt; &lt;- subSudoku-solved};<br/>\tresult = remaining + solved;<br/>\treturn result;<br/>}<br/>\u00a0<br/>//a function to visualize the result<br/>public void displaySudoku(rel[int x, int y, int v] sudoku){<br/>\tpoints = [box(text(\"&lt;v&gt;\"), align(0.111111*(x+1),0.111111*(y+1)),shrink(0.1)) | &lt;x,y,v&gt; &lt;- sudoku];<br/>\tprint(points);<br/>\trender(overlay([*points], aspectRatio(1.0)));<br/>}<br/>\u00a0<br/>//a sudoku<br/>public rel[int, int, int] sudokuA = <br/>{<br/>&lt;0,0,3&gt;, &lt;1,0,9&gt;, &lt;2,0,4&gt;, &lt;3,0,0&gt;, &lt;4,0,0&gt;, &lt;5,0,2&gt;, &lt;6,0,6&gt;, &lt;7,0,7&gt;, &lt;8,0,0&gt;,<br/>&lt;0,1,0&gt;, &lt;1,1,0&gt;, &lt;2,1,0&gt;, &lt;3,1,3&gt;, &lt;4,1,0&gt;, &lt;5,1,0&gt;, &lt;6,1,4&gt;, &lt;7,1,0&gt;, &lt;8,1,0&gt;,<br/>&lt;0,2,5&gt;, &lt;1,2,0&gt;, &lt;2,2,0&gt;, &lt;3,2,6&gt;, &lt;4,2,9&gt;, &lt;5,2,0&gt;, &lt;6,2,0&gt;, &lt;7,2,2&gt;, &lt;8,2,0&gt;,<br/>&lt;0,3,0&gt;, &lt;1,3,4&gt;, &lt;2,3,5&gt;, &lt;3,3,0&gt;, &lt;4,3,0&gt;, &lt;5,3,0&gt;, &lt;6,3,9&gt;, &lt;7,3,0&gt;, &lt;8,3,0&gt;,<br/>&lt;0,4,6&gt;, &lt;1,4,0&gt;, &lt;2,4,0&gt;, &lt;3,4,0&gt;, &lt;4,4,0&gt;, &lt;5,4,0&gt;, &lt;6,4,0&gt;, &lt;7,4,0&gt;, &lt;8,4,7&gt;, <br/>&lt;0,5,0&gt;, &lt;1,5,0&gt;, &lt;2,5,7&gt;, &lt;3,5,0&gt;, &lt;4,5,0&gt;, &lt;5,5,0&gt;, &lt;6,5,5&gt;, &lt;7,5,8&gt;, &lt;8,5,0&gt;,<br/>&lt;0,6,0&gt;, &lt;1,6,1&gt;, &lt;2,6,0&gt;, &lt;3,6,0&gt;, &lt;4,6,6&gt;, &lt;5,6,7&gt;, &lt;6,6,0&gt;, &lt;7,6,0&gt;, &lt;8,6,8&gt;,<br/>&lt;0,7,0&gt;, &lt;1,7,0&gt;, &lt;2,7,9&gt;, &lt;3,7,0&gt;, &lt;4,7,0&gt;, &lt;5,7,8&gt;, &lt;6,7,0&gt;, &lt;7,7,0&gt;, &lt;8,7,0&gt;,<br/>&lt;0,8,0&gt;, &lt;1,8,2&gt;, &lt;2,8,6&gt;, &lt;3,8,4&gt;, &lt;4,8,0&gt;, &lt;5,8,0&gt;, &lt;6,8,7&gt;, &lt;7,8,3&gt;, &lt;8,8,5&gt; <br/>};</pre>"}, {"lang": "REXX", "loc": 1, "block": "<pre>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \n; Register And Flag Usage        \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \n;        0        General purpose variable used for miscelaneous purposes\n;        1        Current index (0-80) in the pseudo-recursion \n;        2        Row (0-8) of current index\n;        3        Column (0-8) of current index\n;        4        Block # (0-8) of current index\n;        5        Power of 10 of current column index\n;        6        Value in the test solution at current index\n;        7        Value of start clue at current index (0 if not set)\n;        8 \u2013 16   Starting row data\n;        17 \u2013 25  Current test solution\n;        26 \u2013 34  Flag matrix (bit set if digit used in a row/column/block)\n;\n;        Flag 2   Indicates that a digit has been used in cur row/column/block\n;        Flag 3   Input to Subroutine B (whether to set or clear flags)\n        \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \n; setU(x)        \n; Set/clear flag matrix values (show that x is used in a row/column/block)\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \nLBL D        \n        GSB 5      \u00a0; calc bit value we need to set/clear in existing row\n        RCL 2      \u00a0; Get the current row index into x\n        GSB B      \u00a0; set flag matrix value and calc new bit value for the column\n        RCL 3      \u00a0; Get the current column index into x\n        GSB B      \u00a0; set flag matrix values and calc new bit value for the block\n        RCL 4      \u00a0; Get the current block index into x\n        \n; MUST IMMEDIATELY FOLLOW PRECEEDING SUBROUTINE        \n; utility subroutine for setting flag matrix values         \n\nLBL B        \n        GSB 1      \u00a0; get the current flag matrix row at index x\n        \n        RCL 0      \u00a0; get temp register (holds the bit value we will be setting)\n        F? 3       \u00a0; flag 3 indicates if we are setting or clearing the flag\n        CHS        \u00a0; if we are clearing, we will do a subtraction instead\n        +          \u00a0; set/clear the flag\n        \n        X&lt;&gt;Y       \u00a0; bring the row index back into x\n        2          \u00a0; 26 is the starting register for the flag matrix\n        6        \n        GSB 3      \u00a0; set I so that we are ready to store the new value\n        STO (i)    \u00a0; store the new value into the flag matrix\n        RDN        \u00a0; get rid of the new value to restore the stack\n        9          \u00a0; the next bit value will be 9 bits to the left\n        +          \u00a0; set the next bit index\n        GTO 5      \u00a0; calculate the value with that bit set\n                   \u00a0; we GTO instead of GSB and it will do the RTN\n        \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \n; putA(x)        \n; Set the value x into the current row/column in the trial solution.         \n; Does it by subtracting the previous value and adding the new one.        \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \nLBL 7        \n        X&lt;&gt;6       \u00a0; swap new value with register that holds current value\n        STO 0      \u00a0; store the old value in the temp register\n        RCL 2      \u00a0; Get the current row index into x\n        1          \u00a0; 17 is the starting register for the current trial solution\n        7        \n        GSB 3      \u00a0; Set the indirect register\n        RCL (i)    \u00a0; Get the current value for the entire row\n        RCL 6      \u00a0; Get the new value\n        RCL- 0     \u00a0; subtract the old value from the new value\n        RCL* 5     \u00a0; shift the power of 10 to the appropriate column\n        +          \u00a0; add to the old value\n        STO (i)    \u00a0; store the new row value from where we got it\n        RTN        \n        \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \n; change(x)        \n; Increments or decrements the current position in the trial solution.        \n; Updates the registers containing the current row, column and block index,\n; and the one with the power of 10 factor for the current column and others\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \nLBL 6        \n        STO+ 1     \u00a0; x holds +1 or -1; Register 1 is the current index\n        \n        RCL 1      \u00a0; get the current index (0 to 80)\n        RCL 1      \u00a0; get the current index (0 to 80)\n        9          \u00a0; integer divide by 9 to get the row index (0 to 8)\n        /          \u00a0; no integer divide on 15c so do a floating point divide\n        INT        \u00a0; use the INT operator to finish of the integer divide\n        STO 2      \u00a0; register 2 contains the current row index\n        \n        9        \n        *        \n        -          \u00a0; col = index - 9 * row\n        STO 3      \u00a0; register 3 contains the current column index\n        \n        3          \u00a0; calculate the block index from the row &amp; column indexes\n        /          \u00a0; TODO: save a couple of bytes in this section of code\n        RCL 2        \n        3        \n        /        \n        INT          \n        3        \n        *        \n        +        \n        STO 4      \u00a0; register 4 holds the block index\n        \n        8          \u00a0; now calculate the power of 10 of the current column\n        RCL- 3     \u00a0; Get the digit (from right) based on the column\n        10^X       \u00a0; calculate the exponent\n        STO 5      \u00a0; save in register 5 which is used throughout the code\n        \n        RCL 2      \u00a0; get the current row\n        1          \u00a0; 17 is the start register of the current trial solution\n        7        \n        GSB 4      \u00a0; extract the value at the current column\n        STO 6      \u00a0; reg 6: the current trial value at the current row/column\n        \n        RCL 2      \u00a0; get the current row\n        8          \u00a0; 8 is the start register of the input data from the user\n        GSB 4      \u00a0; extract the value at the current column\n        STO 7      \u00a0; reg 7: starting value at the current row/column (0 if none)\n        RTN        \n        \n; Extract value at the current column from the matrix indirectly specified by x&amp;y\nLBL 4        \n        GSB 3      \u00a0; set the indirect register based on x &amp; y\n        RCL (i)    \u00a0; get the row from the matrix passed in\n        RCL / 5    \u00a0; shift the row to the right\n        INT        \u00a0; trim off the digits shifted to the right of the decimal\n        1          \u00a0; we will do a modulus 10 to extract the last digit\n        0        \n        /          \u00a0; do the equivalent of a mod 10\n        FRAC                \n        1\n        0\n        *\n        RTN\n        \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \n;  main()        \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \nLBL A        \n        CF 2       \u00a0; make sure flag 2 is unset - CLR REG does not do this\n        CF 3       \u00a0; make sure flag 3 is unset - CLR REG does not do this\n        1          \u00a0; start with a index in register 1 of -1 (0 to 80)\n        CHS        \u00a0; that way we can start with an increment operation\n        STO 1      \u00a0; and actually start at 0 where we want.\n        \nLBL 2              \u00a0; set the flags to show the input values are set\n        1          \u00a0; go forward one position at a time\n        GSB 6      \u00a0; go to the next position in the trial solution\n        \n        RCL 7      \u00a0; get the starting input value at this row/col \n        GSB 7      \u00a0; set the value in the trial solution\n        RCL 7      \u00a0; get starting input value because the last call destroyed it\n        TEST 1     \u00a0; if &gt; 0 then the user input a value for this row/col\n        GSB D      \u00a0; set the flags to indicate this value is set\n        \n        8          \u00a0; 80 is the upper bound of the indexes (9x9 = 80 = 0:80)\n        0        \n        RCL 1      \u00a0; get the current index\n        TEST 6     \u00a0; if the current index hasn't reached 80\n        GTO 2      \u00a0; do the next value\n        1          \u00a0; reset the starting value\n        CHS        \u00a0; to -1 as we did at the beginning of the program\n        STO 1      \u00a0; register 1 holds the current index\n        \nLBL E              \u00a0; main solution loop\n        8          \u00a0; when we reach the last index (80) we are done\n        0        \n        RCL 1      \u00a0; register 1 holds the current index\n        TEST 5     \u00a0; see if we are at the end\n        RTN        \u00a0;  finished       \u00a0; woohoo - we are done!\n        1          \u00a0; Go forward one spot\n        GSB 6      \u00a0; Do the position increment\n        RCL 7      \u00a0; get the starting input value at this row/col \n        TEST 1     \u00a0; if it's &gt; 0, the user specified a value here\n        GTO E      \u00a0; go forward, since this value was specified by the user\n        GSB 7      \u00a0; Set the value in the trial solution\n        \nLBL 8          \n        9          \u00a0; check the possible digits in order 1-9.\n        RCL 6      \u00a0; Get the current trial solution value\n        TEST 5     \u00a0; Check to see if it is 9\n        GTO C      \u00a0; If it is, backup one step\n        1          \u00a0; We weren't at 9 yet, so increment the value by 1\n        +        \n        GSB 7      \u00a0; Set the value in the trial solution\n        \n        RCL 6      \u00a0; Get the current trial solution value\n        GSB 5      \u00a0; Calc 2^x-1 to get the bit mask\n        CF 2       \u00a0; Clear the flag thats used as a return value\n        RCL 2      \u00a0; Get the current row index into x\n        GSB 9      \u00a0; see if the current value has already been used in the row\n        F? 2       \u00a0; If number has been used in the block, try the next value\n        GTO 8        \n        RCL 3      \u00a0; Get the current column index into x\n        GSB 9      \u00a0; see if current value has already been used in the column\n        F? 2       \u00a0; If number has been used in the block, try the next value\n        GTO 8        \n        RCL 4      \u00a0; Get the current block index into x\n        GSB 9      \u00a0; see if the current value has already been used in the block\n        F? 2       \u00a0; If number has been used in the block, try the next value\n        GTO 8        \n        RCL 6      \u00a0; Get the current trial solution value\n        GSB D      \u00a0; set the flags to indicate this value is set\n        GTO E      \u00a0; move on to the next position in the puzzle\n        \nLBL C              \u00a0; Come here to back up to the previous position\n        1          \u00a0; We will go one spot backwards\n        CHS        \n        GSB 6      \u00a0; Set the new current position and all temp values\n        TEST 1     \u00a0; previous call leaves the starting value in X\n        GTO C      \u00a0; if value is &gt; 0, it was set, backup one more spot\n        RCL 6      \u00a0; Get the current trial solution value\n        \n        SF 3       \u00a0; flag 3: clear the flag matrix bits, instead of setting them\n        GSB D      \u00a0; Set/Clear the flag matrix bits\n        CF 3       \u00a0; unset the 3 flag\n        GTO 8      \u00a0; check the next digit\n        \nLBL 9        \n        GSB 1      \u00a0; get the appropriate row (x) from the flag matrix\n        RCL /  0   \u00a0; divide by the temp register - right shifts value\n        INT        \n        2          \u00a0; if bit is set, fractional part will be non 0 when / 2\n        /        \n        FRAC        \n        TEST 1     \u00a0; if bit is set, set flag 2 which is used as a return value\n        SF 2        \n        RDN        \u00a0; move the stack down to prepare the caller for the next call\n        RDN        \u00a0; move the stack down to prepare the caller for the next call\n        9          \u00a0; bit flags for row/col/block are &lt;&lt; by 9 from each other\n        +          \u00a0; calculates the appropriate bit offset for the next call\n        GTO 5      \u00a0; calc 2^x-1 to get the bit mask\n                   \u00a0; do a GTO instead of GSB and it will return for us\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \n; setPow2(x)        \n; Sets the utility temp register to 2^(x-1). Leaves x in place.        \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \nLBL 5        \n        STO 0      \u00a0; store the input X in the temp register\n        1          \u00a0; we want to subtract 1 from the exponent\n        -          \u00a0; calculate x-1\n        2          \u00a0; set the base as 2\n        X&lt;&gt;Y       \u00a0; the y^x function wants x and y reversed\n        y^x        \u00a0; calculate the value\n        X&lt;&gt;0       \u00a0; stuff result in temp register and restore the input x\n        RTN        \n        \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \n; getPart(x)        \n; Returns the integer representing the entire Xth row of the flag matrix        \n; Row numbers start at 0.        \n; returns value in x - input parameter x ends up in y        \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \nLBL 1        \n        ENTER        \n        ENTER      \u00a0; duplicate the parameter so we can leave it for the caller\n        2          \u00a0; 26 is the starting register for the flag matrix\n        6        \n        GSB 3      \u00a0; set the indirect register to the row specified by x\n        RCL (i)    \u00a0; retrieve the entire row from the flag matrix\n        RTN        \n        \n; Set the indirect register and remove the parameters from the stack\nLBL 3        \n        +          \u00a0; x+y is the memory offset we want\n        STO I      \u00a0; put it in the indirect register\n        RDN        \u00a0; get rid of the sum from the stack\n        RTN        \n</pre>"}, {"lang": "RPN (HP-15c)", "loc": 1, "block": "<pre>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \n; Register And Flag Usage        \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \n;        0        General purpose variable used for miscelaneous purposes\n;        1        Current index (0-80) in the pseudo-recursion \n;        2        Row (0-8) of current index\n;        3        Column (0-8) of current index\n;        4        Block # (0-8) of current index\n;        5        Power of 10 of current column index\n;        6        Value in the test solution at current index\n;        7        Value of start clue at current index (0 if not set)\n;        8 \u2013 16   Starting row data\n;        17 \u2013 25  Current test solution\n;        26 \u2013 34  Flag matrix (bit set if digit used in a row/column/block)\n;\n;        Flag 2   Indicates that a digit has been used in cur row/column/block\n;        Flag 3   Input to Subroutine B (whether to set or clear flags)\n        \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \n; setU(x)        \n; Set/clear flag matrix values (show that x is used in a row/column/block)\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \nLBL D        \n        GSB 5      \u00a0; calc bit value we need to set/clear in existing row\n        RCL 2      \u00a0; Get the current row index into x\n        GSB B      \u00a0; set flag matrix value and calc new bit value for the column\n        RCL 3      \u00a0; Get the current column index into x\n        GSB B      \u00a0; set flag matrix values and calc new bit value for the block\n        RCL 4      \u00a0; Get the current block index into x\n        \n; MUST IMMEDIATELY FOLLOW PRECEEDING SUBROUTINE        \n; utility subroutine for setting flag matrix values         \n\nLBL B        \n        GSB 1      \u00a0; get the current flag matrix row at index x\n        \n        RCL 0      \u00a0; get temp register (holds the bit value we will be setting)\n        F? 3       \u00a0; flag 3 indicates if we are setting or clearing the flag\n        CHS        \u00a0; if we are clearing, we will do a subtraction instead\n        +          \u00a0; set/clear the flag\n        \n        X&lt;&gt;Y       \u00a0; bring the row index back into x\n        2          \u00a0; 26 is the starting register for the flag matrix\n        6        \n        GSB 3      \u00a0; set I so that we are ready to store the new value\n        STO (i)    \u00a0; store the new value into the flag matrix\n        RDN        \u00a0; get rid of the new value to restore the stack\n        9          \u00a0; the next bit value will be 9 bits to the left\n        +          \u00a0; set the next bit index\n        GTO 5      \u00a0; calculate the value with that bit set\n                   \u00a0; we GTO instead of GSB and it will do the RTN\n        \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \n; putA(x)        \n; Set the value x into the current row/column in the trial solution.         \n; Does it by subtracting the previous value and adding the new one.        \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \nLBL 7        \n        X&lt;&gt;6       \u00a0; swap new value with register that holds current value\n        STO 0      \u00a0; store the old value in the temp register\n        RCL 2      \u00a0; Get the current row index into x\n        1          \u00a0; 17 is the starting register for the current trial solution\n        7        \n        GSB 3      \u00a0; Set the indirect register\n        RCL (i)    \u00a0; Get the current value for the entire row\n        RCL 6      \u00a0; Get the new value\n        RCL- 0     \u00a0; subtract the old value from the new value\n        RCL* 5     \u00a0; shift the power of 10 to the appropriate column\n        +          \u00a0; add to the old value\n        STO (i)    \u00a0; store the new row value from where we got it\n        RTN        \n        \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \n; change(x)        \n; Increments or decrements the current position in the trial solution.        \n; Updates the registers containing the current row, column and block index,\n; and the one with the power of 10 factor for the current column and others\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \nLBL 6        \n        STO+ 1     \u00a0; x holds +1 or -1; Register 1 is the current index\n        \n        RCL 1      \u00a0; get the current index (0 to 80)\n        RCL 1      \u00a0; get the current index (0 to 80)\n        9          \u00a0; integer divide by 9 to get the row index (0 to 8)\n        /          \u00a0; no integer divide on 15c so do a floating point divide\n        INT        \u00a0; use the INT operator to finish of the integer divide\n        STO 2      \u00a0; register 2 contains the current row index\n        \n        9        \n        *        \n        -          \u00a0; col = index - 9 * row\n        STO 3      \u00a0; register 3 contains the current column index\n        \n        3          \u00a0; calculate the block index from the row &amp; column indexes\n        /          \u00a0; TODO: save a couple of bytes in this section of code\n        RCL 2        \n        3        \n        /        \n        INT          \n        3        \n        *        \n        +        \n        STO 4      \u00a0; register 4 holds the block index\n        \n        8          \u00a0; now calculate the power of 10 of the current column\n        RCL- 3     \u00a0; Get the digit (from right) based on the column\n        10^X       \u00a0; calculate the exponent\n        STO 5      \u00a0; save in register 5 which is used throughout the code\n        \n        RCL 2      \u00a0; get the current row\n        1          \u00a0; 17 is the start register of the current trial solution\n        7        \n        GSB 4      \u00a0; extract the value at the current column\n        STO 6      \u00a0; reg 6: the current trial value at the current row/column\n        \n        RCL 2      \u00a0; get the current row\n        8          \u00a0; 8 is the start register of the input data from the user\n        GSB 4      \u00a0; extract the value at the current column\n        STO 7      \u00a0; reg 7: starting value at the current row/column (0 if none)\n        RTN        \n        \n; Extract value at the current column from the matrix indirectly specified by x&amp;y\nLBL 4        \n        GSB 3      \u00a0; set the indirect register based on x &amp; y\n        RCL (i)    \u00a0; get the row from the matrix passed in\n        RCL / 5    \u00a0; shift the row to the right\n        INT        \u00a0; trim off the digits shifted to the right of the decimal\n        1          \u00a0; we will do a modulus 10 to extract the last digit\n        0        \n        /          \u00a0; do the equivalent of a mod 10\n        FRAC                \n        1\n        0\n        *\n        RTN\n        \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \n;  main()        \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \nLBL A        \n        CF 2       \u00a0; make sure flag 2 is unset - CLR REG does not do this\n        CF 3       \u00a0; make sure flag 3 is unset - CLR REG does not do this\n        1          \u00a0; start with a index in register 1 of -1 (0 to 80)\n        CHS        \u00a0; that way we can start with an increment operation\n        STO 1      \u00a0; and actually start at 0 where we want.\n        \nLBL 2              \u00a0; set the flags to show the input values are set\n        1          \u00a0; go forward one position at a time\n        GSB 6      \u00a0; go to the next position in the trial solution\n        \n        RCL 7      \u00a0; get the starting input value at this row/col \n        GSB 7      \u00a0; set the value in the trial solution\n        RCL 7      \u00a0; get starting input value because the last call destroyed it\n        TEST 1     \u00a0; if &gt; 0 then the user input a value for this row/col\n        GSB D      \u00a0; set the flags to indicate this value is set\n        \n        8          \u00a0; 80 is the upper bound of the indexes (9x9 = 80 = 0:80)\n        0        \n        RCL 1      \u00a0; get the current index\n        TEST 6     \u00a0; if the current index hasn't reached 80\n        GTO 2      \u00a0; do the next value\n        1          \u00a0; reset the starting value\n        CHS        \u00a0; to -1 as we did at the beginning of the program\n        STO 1      \u00a0; register 1 holds the current index\n        \nLBL E              \u00a0; main solution loop\n        8          \u00a0; when we reach the last index (80) we are done\n        0        \n        RCL 1      \u00a0; register 1 holds the current index\n        TEST 5     \u00a0; see if we are at the end\n        RTN        \u00a0;  finished       \u00a0; woohoo - we are done!\n        1          \u00a0; Go forward one spot\n        GSB 6      \u00a0; Do the position increment\n        RCL 7      \u00a0; get the starting input value at this row/col \n        TEST 1     \u00a0; if it's &gt; 0, the user specified a value here\n        GTO E      \u00a0; go forward, since this value was specified by the user\n        GSB 7      \u00a0; Set the value in the trial solution\n        \nLBL 8          \n        9          \u00a0; check the possible digits in order 1-9.\n        RCL 6      \u00a0; Get the current trial solution value\n        TEST 5     \u00a0; Check to see if it is 9\n        GTO C      \u00a0; If it is, backup one step\n        1          \u00a0; We weren't at 9 yet, so increment the value by 1\n        +        \n        GSB 7      \u00a0; Set the value in the trial solution\n        \n        RCL 6      \u00a0; Get the current trial solution value\n        GSB 5      \u00a0; Calc 2^x-1 to get the bit mask\n        CF 2       \u00a0; Clear the flag thats used as a return value\n        RCL 2      \u00a0; Get the current row index into x\n        GSB 9      \u00a0; see if the current value has already been used in the row\n        F? 2       \u00a0; If number has been used in the block, try the next value\n        GTO 8        \n        RCL 3      \u00a0; Get the current column index into x\n        GSB 9      \u00a0; see if current value has already been used in the column\n        F? 2       \u00a0; If number has been used in the block, try the next value\n        GTO 8        \n        RCL 4      \u00a0; Get the current block index into x\n        GSB 9      \u00a0; see if the current value has already been used in the block\n        F? 2       \u00a0; If number has been used in the block, try the next value\n        GTO 8        \n        RCL 6      \u00a0; Get the current trial solution value\n        GSB D      \u00a0; set the flags to indicate this value is set\n        GTO E      \u00a0; move on to the next position in the puzzle\n        \nLBL C              \u00a0; Come here to back up to the previous position\n        1          \u00a0; We will go one spot backwards\n        CHS        \n        GSB 6      \u00a0; Set the new current position and all temp values\n        TEST 1     \u00a0; previous call leaves the starting value in X\n        GTO C      \u00a0; if value is &gt; 0, it was set, backup one more spot\n        RCL 6      \u00a0; Get the current trial solution value\n        \n        SF 3       \u00a0; flag 3: clear the flag matrix bits, instead of setting them\n        GSB D      \u00a0; Set/Clear the flag matrix bits\n        CF 3       \u00a0; unset the 3 flag\n        GTO 8      \u00a0; check the next digit\n        \nLBL 9        \n        GSB 1      \u00a0; get the appropriate row (x) from the flag matrix\n        RCL /  0   \u00a0; divide by the temp register - right shifts value\n        INT        \n        2          \u00a0; if bit is set, fractional part will be non 0 when / 2\n        /        \n        FRAC        \n        TEST 1     \u00a0; if bit is set, set flag 2 which is used as a return value\n        SF 2        \n        RDN        \u00a0; move the stack down to prepare the caller for the next call\n        RDN        \u00a0; move the stack down to prepare the caller for the next call\n        9          \u00a0; bit flags for row/col/block are &lt;&lt; by 9 from each other\n        +          \u00a0; calculates the appropriate bit offset for the next call\n        GTO 5      \u00a0; calc 2^x-1 to get the bit mask\n                   \u00a0; do a GTO instead of GSB and it will return for us\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \n; setPow2(x)        \n; Sets the utility temp register to 2^(x-1). Leaves x in place.        \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \nLBL 5        \n        STO 0      \u00a0; store the input X in the temp register\n        1          \u00a0; we want to subtract 1 from the exponent\n        -          \u00a0; calculate x-1\n        2          \u00a0; set the base as 2\n        X&lt;&gt;Y       \u00a0; the y^x function wants x and y reversed\n        y^x        \u00a0; calculate the value\n        X&lt;&gt;0       \u00a0; stuff result in temp register and restore the input x\n        RTN        \n        \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \n; getPart(x)        \n; Returns the integer representing the entire Xth row of the flag matrix        \n; Row numbers start at 0.        \n; returns value in x - input parameter x ends up in y        \n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       \nLBL 1        \n        ENTER        \n        ENTER      \u00a0; duplicate the parameter so we can leave it for the caller\n        2          \u00a0; 26 is the starting register for the flag matrix\n        6        \n        GSB 3      \u00a0; set the indirect register to the row specified by x\n        RCL (i)    \u00a0; retrieve the entire row from the flag matrix\n        RTN        \n        \n; Set the indirect register and remove the parameters from the stack\nLBL 3        \n        +          \u00a0; x+y is the memory offset we want\n        STO I      \u00a0; put it in the indirect register\n        RDN        \u00a0; get rid of the sum from the stack\n        RTN        \n</pre>"}, {"lang": "Ruby", "loc": 91, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> read_matrix<span class=\"br0\">(</span>data<span class=\"br0\">)</span><br/>  lines = data.<span class=\"me1\">lines</span><br/>  <span class=\"nu0\">9</span>.<span class=\"me1\">times</span>.<span class=\"me1\">collect</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <span class=\"nu0\">9</span>.<span class=\"me1\">times</span>.<span class=\"me1\">collect</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>j<span class=\"sy0\">|</span> lines<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">to_i</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> permissible<span class=\"br0\">(</span>matrix, i, j<span class=\"br0\">)</span><br/>  ok = <span class=\"br0\">[</span><span class=\"kw2\">nil</span>, <span class=\"sy0\">*</span><span class=\"nu0\">1</span>..<span class=\"nu0\">9</span><span class=\"br0\">]</span><br/>  check = <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"br0\">{</span> ok<span class=\"br0\">[</span>matrix<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">]</span> = <span class=\"kw2\">nil</span>  <span class=\"kw1\">if</span> matrix<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span>.<span class=\"me1\">nonzero</span>? <span class=\"br0\">}</span><br/>  <span class=\"co1\"># Same as another in the column isn't permissible...</span><br/>  <span class=\"nu0\">9</span>.<span class=\"me1\">times</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> check<span class=\"br0\">[</span>x, j<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>  <span class=\"co1\"># Same as another in the row isn't permissible...</span><br/>  <span class=\"nu0\">9</span>.<span class=\"me1\">times</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>y<span class=\"sy0\">|</span> check<span class=\"br0\">[</span>i, y<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>  <span class=\"co1\"># Same as another in the 3x3 block isn't permissible...</span><br/>  xary = <span class=\"br0\">[</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span>x = <span class=\"br0\">(</span>i <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> .. <span class=\"me1\">x</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"br0\">]</span>        <span class=\"co1\">#=&gt; [0,1,2], [3,4,5] or [6,7,8]</span><br/>  yary = <span class=\"br0\">[</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span>y = <span class=\"br0\">(</span>j <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> .. <span class=\"me1\">y</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"br0\">]</span><br/>  xary.<span class=\"me1\">product</span><span class=\"br0\">(</span>yary<span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>x, y<span class=\"sy0\">|</span> check<span class=\"br0\">[</span>x, y<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>  <span class=\"co1\"># Gathering only permitted one</span><br/>  ok.<span class=\"me1\">compact</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> deep_copy_sudoku<span class=\"br0\">(</span>matrix<span class=\"br0\">)</span><br/>  matrix.<span class=\"me1\">collect</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>row<span class=\"sy0\">|</span> row.<span class=\"me1\">dup</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> solve_sudoku<span class=\"br0\">(</span>matrix<span class=\"br0\">)</span><br/>  <span class=\"kw3\">loop</span> <span class=\"kw1\">do</span><br/>    options = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"nu0\">9</span>.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>      <span class=\"nu0\">9</span>.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>j<span class=\"sy0\">|</span><br/>        <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> matrix<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">nonzero</span>?<br/>        <span class=\"kw3\">p</span> = permissible<span class=\"br0\">(</span>matrix, i, j<span class=\"br0\">)</span><br/>        <span class=\"co1\"># If nothing is permissible, there is no solution at this level.</span><br/>        <span class=\"kw2\">return</span> <span class=\"kw1\">if</span> <span class=\"kw3\">p</span>.<span class=\"me1\">empty</span>?              <span class=\"co1\"># return nil</span><br/>        options <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">[</span>i, j, <span class=\"kw3\">p</span><span class=\"br0\">]</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"co1\"># If the matrix is complete, we have a solution...</span><br/>    <span class=\"kw2\">return</span> matrix <span class=\"kw1\">if</span> options.<span class=\"me1\">empty</span>?<br/>\u00a0<br/>    i, j, permissible = options.<span class=\"me1\">min_by</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> x.<span class=\"me1\">last</span>.<span class=\"me1\">length</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># If there is an option with only one solution, set it and re-check permissibility</span><br/>    <span class=\"kw1\">if</span> permissible.<span class=\"me1\">length</span> == <span class=\"nu0\">1</span><br/>      matrix<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> = permissible<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>      <span class=\"kw1\">next</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"co1\"># We have two or more choices. We need to search both...</span><br/>    permissible.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>v<span class=\"sy0\">|</span><br/>      mtmp = deep_copy_sudoku<span class=\"br0\">(</span>matrix<span class=\"br0\">)</span><br/>      mtmp<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> = v<br/>      ret = solve_sudoku<span class=\"br0\">(</span>mtmp<span class=\"br0\">)</span><br/>      <span class=\"kw2\">return</span> ret <span class=\"kw1\">if</span> ret<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"co1\"># We did an exhaustive search on this branch and nothing worked out.</span><br/>    <span class=\"kw2\">return</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> print_matrix<span class=\"br0\">(</span>matrix<span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"Impossible\"</span> <span class=\"kw1\">or</span> <span class=\"kw2\">return</span>  <span class=\"kw1\">unless</span> matrix<br/>\u00a0<br/>  border = <span class=\"st0\">\"+-----+-----+-----+\"</span><br/>  <span class=\"nu0\">9</span>.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>    <span class=\"kw3\">puts</span> border <span class=\"kw1\">if</span> i<span class=\"sy0\">%</span>3 == <span class=\"nu0\">0</span><br/>    <span class=\"nu0\">9</span>.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>j<span class=\"sy0\">|</span><br/>      <span class=\"kw3\">print</span> j<span class=\"sy0\">%</span>3 == <span class=\"nu0\">0</span>\u00a0? <span class=\"st0\">\"|\"</span>\u00a0: <span class=\"st0\">\" \"</span><br/>      <span class=\"kw3\">print</span> matrix<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> == <span class=\"nu0\">0</span>\u00a0? <span class=\"st0\">\".\"</span>\u00a0: matrix<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"|\"</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw3\">puts</span> border<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>data = <span class=\"co4\">&lt;&lt;EOS<br/>394__267_<br/>___3__4__<br/>5__69__2_<br/>_45___9__<br/>6_______7<br/>__7___58_<br/>_1__67__8<br/>__9__8___<br/>_264__735<br/>EOS</span><br/>\u00a0<br/>matrix = read_matrix<span class=\"br0\">(</span>data<span class=\"br0\">)</span><br/>print_matrix<span class=\"br0\">(</span>matrix<span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span><br/>print_matrix<span class=\"br0\">(</span>solve_sudoku<span class=\"br0\">(</span>matrix<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "SAS", "loc": 47, "block": "<pre class=\"sas highlighted_source\"><span class=\"coMULTI\">/* define SAS data set */</span><br/><span class=\"kw6\">data</span> Indata;<br/>   <span class=\"kw3\">input</span> C1-C9;<br/>   datalines;<br/>. . <span class=\"nu0\">5</span> . . <span class=\"nu0\">7</span> . . <span class=\"nu0\">1</span><br/>. <span class=\"nu0\">7</span> . . <span class=\"nu0\">9</span> . . <span class=\"nu0\">3</span> .<br/>. . . <span class=\"nu0\">6</span> . . . . .<br/>. . <span class=\"nu0\">3</span> . . <span class=\"nu0\">1</span> . . <span class=\"nu0\">5</span><br/>. <span class=\"nu0\">9</span> . . <span class=\"nu0\">8</span> . . <span class=\"nu0\">2</span> .<br/><span class=\"nu0\">1</span> . . <span class=\"nu0\">2</span> . . <span class=\"nu0\">4</span> . .<br/>. . <span class=\"nu0\">2</span> . . <span class=\"nu0\">6</span> . . <span class=\"nu0\">9</span><br/>. . . . <span class=\"nu0\">4</span> . . <span class=\"nu0\">8</span> .<br/><span class=\"nu0\">8</span> . . <span class=\"nu0\">1</span> . . <span class=\"nu0\">5</span> . .<br/>;<br/>\u00a0<br/><span class=\"coMULTI\">/* call OPTMODEL procedure in SAS/OR */</span><br/><span class=\"re1\">proc optmodel</span>;<br/>   <span class=\"coMULTI\">/* declare variables */</span><br/>   <span class=\"kw4\">set</span> ROWS = <span class=\"nu0\">1</span>..<span class=\"nu0\">9</span>;<br/>   <span class=\"kw4\">set</span> COLS = ROWS;<br/>   <span class=\"kw3\">var</span> <span class=\"kw4\">X</span> <span class=\"br0\">{</span>ROWS, COLS<span class=\"br0\">}</span> &gt;= <span class=\"nu0\">1</span> &lt;= <span class=\"nu0\">9</span> integer;<br/>\u00a0<br/>   <span class=\"coMULTI\">/* declare nine row constraints */</span><br/>   con RowCon <span class=\"br0\">{</span>i <span class=\"kw4\">in</span> ROWS<span class=\"br0\">}</span>:<br/>      alldiff<span class=\"br0\">(</span><span class=\"br0\">{</span>j <span class=\"kw4\">in</span> COLS<span class=\"br0\">}</span> <span class=\"kw4\">X</span><span class=\"br0\">[</span>i,j<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"coMULTI\">/* declare nine column constraints */</span><br/>   con ColCon <span class=\"br0\">{</span>j <span class=\"kw4\">in</span> COLS<span class=\"br0\">}</span>:<br/>      alldiff<span class=\"br0\">(</span><span class=\"br0\">{</span>i <span class=\"kw4\">in</span> ROWS<span class=\"br0\">}</span> <span class=\"kw4\">X</span><span class=\"br0\">[</span>i,j<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"coMULTI\">/* declare nine 3x3 block constraints */</span><br/>   con BlockCon <span class=\"br0\">{</span>s <span class=\"kw4\">in</span> <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span>, t <span class=\"kw4\">in</span> <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">}</span>:<br/>      alldiff<span class=\"br0\">(</span><span class=\"br0\">{</span>i <span class=\"kw4\">in</span> <span class=\"nu0\">3</span><span class=\"coMULTI\">*s+1..3*s+3, j in 3*t+1..3*t+3} X[i,j]);</span><br/>\u00a0<br/>   <span class=\"coMULTI\">/* fix variables to cell values */</span><br/>   <span class=\"coMULTI\">/* X[i,j] = c[i,j] if c[i,j] is not missing */</span><br/>   num c <span class=\"br0\">{</span>ROWS, COLS<span class=\"br0\">}</span>;<br/>   read <span class=\"kw6\">data</span> indata <span class=\"kw4\">into</span> <span class=\"br0\">[</span><span class=\"kw1\">_N_</span><span class=\"br0\">]</span> <span class=\"br0\">{</span>j <span class=\"kw4\">in</span> COLS<span class=\"br0\">}</span> &lt;c<span class=\"br0\">[</span><span class=\"kw1\">_N_</span>,j<span class=\"br0\">]</span>=col<span class=\"br0\">(</span><span class=\"st0\">'C'</span>||j<span class=\"br0\">)</span>&gt;;<br/>   for <span class=\"br0\">{</span>i <span class=\"kw4\">in</span> ROWS, j <span class=\"kw4\">in</span> COLS: c<span class=\"br0\">[</span>i,j<span class=\"br0\">]</span> ne .<span class=\"br0\">}</span><br/>      fix <span class=\"kw4\">X</span><span class=\"br0\">[</span>i,j<span class=\"br0\">]</span> = c<span class=\"br0\">[</span>i,j<span class=\"br0\">]</span>;<br/>\u00a0<br/>   <span class=\"coMULTI\">/* call CLP solver */</span><br/>   solve;<br/>\u00a0<br/>   <span class=\"coMULTI\">/* print solution */</span><br/>   print <span class=\"kw4\">X</span>;<br/><span class=\"kw6\">quit</span>;</pre>"}, {"lang": "Scala", "loc": 132, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> SudokuSolver <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Solver <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> solution <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Array<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"nu0\">81</span><span class=\"br0\">)</span>   <span class=\"co1\">//listOfFields toArray</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fp2m<span class=\"sy0\">:</span> Int <span class=\"sy0\">=&gt;</span> Tuple2<span class=\"br0\">[</span>Int,Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> pos <span class=\"sy0\">=&gt;</span> Pair<span class=\"br0\">(</span>pos/<span class=\"nu0\">9</span>+<span class=\"nu0\">1</span>,pos<span class=\"sy0\">%</span>9+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">//get row, col from array position</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> setAll <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> to <span class=\"nu0\">9</span><span class=\"br0\">)</span> toSet <span class=\"co1\">//all possibilities</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> arrayGroups <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Array<span class=\"br0\">[</span>List<span class=\"br0\">[</span>List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"nu0\">81</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sv<span class=\"sy0\">:</span> Int <span class=\"sy0\">=&gt;</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">(</span>row<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>row-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">9</span> <span class=\"co1\">//start value group row</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ev<span class=\"sy0\">:</span> Int <span class=\"sy0\">=&gt;</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">(</span>row<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> sv<span class=\"br0\">(</span>row<span class=\"br0\">)</span>+<span class=\"nu0\">8</span> <span class=\"co1\">//end value group row</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fgc<span class=\"sy0\">:</span> <span class=\"br0\">(</span>Int,Int<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i,col<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> i<span class=\"sy0\">*</span><span class=\"nu0\">9</span>+col-<span class=\"nu0\">1</span> <span class=\"co1\">//get group col</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fgs<span class=\"sy0\">:</span> Int <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>Int,Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> p <span class=\"sy0\">=&gt;</span> Pair<span class=\"br0\">(</span>p, p/<span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span>+p<span class=\"sy0\">%</span>9/<span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"co1\">//get group square box</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>pos <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> to <span class=\"nu0\">80</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>row,col<span class=\"br0\">)</span> <span class=\"sy0\">=</span> fp2m<span class=\"br0\">(</span>pos<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> gRow <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sv<span class=\"br0\">(</span>row<span class=\"br0\">)</span> to ev<span class=\"br0\">(</span>row<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toList</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> gCol <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> to <span class=\"nu0\">8</span><span class=\"br0\">)</span> toList<span class=\"br0\">)</span> map <span class=\"br0\">(</span>fgc<span class=\"br0\">(</span><span class=\"sy0\">_</span>,col<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> gSquare <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> to <span class=\"nu0\">80</span> toList<span class=\"br0\">)</span> map fgs filter <span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"sy0\">_</span>2<span class=\"sy0\">==</span><span class=\"br0\">(</span>fgs<span class=\"br0\">(</span>pos<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span> map <span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"sy0\">_</span>1<span class=\"br0\">)</span><br/>      arrayGroups<span class=\"br0\">(</span>pos<span class=\"br0\">)</span> <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>gRow,gCol,gSquare<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> listGroups <span class=\"sy0\">=</span> arrayGroups toList <br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fpv4s<span class=\"sy0\">:</span> <span class=\"br0\">(</span>Int<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> pos <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span>   <span class=\"co1\">//get possible values for solving</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> setRow <span class=\"sy0\">=</span> <span class=\"br0\">(</span>listGroups<span class=\"br0\">(</span>pos<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> map <span class=\"br0\">(</span>solution<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toSet</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> setCol <span class=\"sy0\">=</span> listGroups<span class=\"br0\">(</span>pos<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>solution<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toSet</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> setSquare <span class=\"sy0\">=</span> listGroups<span class=\"br0\">(</span>pos<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>solution<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toSet</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> setG <span class=\"sy0\">=</span> setRow++setCol++setSquare--Set<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> setPossible <span class=\"sy0\">=</span> setAll--setG<br/>      setPossible.<span class=\"me1\">toList</span>.<span class=\"me1\">sortWith</span><span class=\"br0\">(</span><span class=\"sy0\">_&lt;_</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"co1\">//solve the riddle: Nil ==&gt; solution does not exist</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> solve<span class=\"br0\">(</span>listOfFields<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      solution <span class=\"sy0\">=</span> listOfFields toArray<br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> checkSol<span class=\"br0\">(</span>uncheckedSol<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>uncheckedSol <span class=\"sy0\">==</span> Nil<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Nil<br/>        solution <span class=\"sy0\">=</span> uncheckedSol toArray<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> check <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> to <span class=\"nu0\">80</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>fpv4s<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">size</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>check <span class=\"sy0\">==</span> Nil<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> uncheckedSol<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Nil<br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f1<span class=\"sy0\">:</span> Int <span class=\"sy0\">=&gt;</span> Pair<span class=\"br0\">[</span>Int,Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> p <span class=\"sy0\">=&gt;</span> Pair<span class=\"br0\">(</span>p,listOfFields<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> numFields <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> to <span class=\"nu0\">80</span> toList<span class=\"br0\">)</span> map f1 filter <span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"sy0\">_</span>2<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> iter <span class=\"sy0\">=</span> numFields map <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">_:</span> <span class=\"br0\">(</span>Int,Int<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"sy0\">_</span>1<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> p<span class=\"sy0\">_</span>iter <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> first<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ret <span class=\"sy0\">=</span> numFields <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Nil <span class=\"sy0\">=&gt;</span> -<span class=\"nu0\">1</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span>   <span class=\"sy0\">=&gt;</span> numFields<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"sy0\">_</span>1<br/>        <span class=\"br0\">}</span><br/>        ret<br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> last<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ret <span class=\"sy0\">=</span> numFields <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Nil <span class=\"sy0\">=&gt;</span> -<span class=\"nu0\">1</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span>   <span class=\"sy0\">=&gt;</span> numFields<span class=\"br0\">(</span>numFields.<span class=\"me1\">size</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"sy0\">_</span>1<br/>        <span class=\"br0\">}</span><br/>        ret<br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> hasPrev<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> p<span class=\"sy0\">_</span>iter <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> prev<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span>p<span class=\"sy0\">_</span>iter -<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> iter<span class=\"br0\">(</span>p<span class=\"sy0\">_</span>iter<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> hasNext<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> p<span class=\"sy0\">_</span>iter <span class=\"sy0\">&lt;</span> iter.<span class=\"me1\">size</span>-<span class=\"nu0\">1</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> next<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span>p<span class=\"sy0\">_</span>iter +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> iter<span class=\"br0\">(</span>p<span class=\"sy0\">_</span>iter<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fixed<span class=\"sy0\">:</span> Int <span class=\"sy0\">=&gt;</span> Boolean <span class=\"sy0\">=</span> pos <span class=\"sy0\">=&gt;</span> listOfFields<span class=\"br0\">(</span>pos<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span>  <br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> possiArray <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Array<span class=\"br0\">[</span>List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">(</span>numFields.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> firstUF <span class=\"sy0\">=</span> first<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">//first unfixed</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>firstUF <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> checkSol<span class=\"br0\">(</span>solution.<span class=\"me1\">toList</span><span class=\"br0\">)</span> <span class=\"co1\">//that is it!</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> pif <span class=\"sy0\">=</span> iter<span class=\"br0\">(</span>p<span class=\"sy0\">_</span>iter<span class=\"br0\">)</span> <span class=\"co1\">//pos in fields</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lastUF <span class=\"sy0\">=</span> last<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">//last unfixed</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>row,col<span class=\"br0\">)</span> <span class=\"sy0\">=</span> fp2m<span class=\"br0\">(</span>pif<span class=\"br0\">)</span><br/>      possiArray<span class=\"br0\">(</span>p<span class=\"sy0\">_</span>iter<span class=\"br0\">)</span> <span class=\"sy0\">=</span> fpv4s<span class=\"br0\">(</span>pif<span class=\"br0\">)</span>.<span class=\"me1\">toList</span>.<span class=\"me1\">sortWith</span><span class=\"br0\">(</span><span class=\"sy0\">_&lt;_</span><span class=\"br0\">)</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a><span class=\"br0\">(</span>pif <span class=\"sy0\">&lt;=</span> lastUF<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>row,col<span class=\"br0\">)</span> <span class=\"sy0\">=</span> fp2m<span class=\"br0\">(</span>pif<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>possiArray<span class=\"br0\">(</span>p<span class=\"sy0\">_</span>iter<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> possiArray<span class=\"br0\">(</span>p<span class=\"sy0\">_</span>iter<span class=\"br0\">)</span> <span class=\"sy0\">=</span> fpv4s<span class=\"br0\">(</span>pif<span class=\"br0\">)</span>.<span class=\"me1\">toList</span>.<span class=\"me1\">sortWith</span><span class=\"br0\">(</span><span class=\"sy0\">_&lt;_</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> possis <span class=\"sy0\">=</span> possiArray<span class=\"br0\">(</span>p<span class=\"sy0\">_</span>iter<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>possis.<span class=\"me1\">isEmpty</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>hasPrev<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            possiArray<span class=\"br0\">(</span>p<span class=\"sy0\">_</span>iter<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><br/>            solution<span class=\"br0\">(</span>pif<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            pif <span class=\"sy0\">=</span> prev<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Nil<br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>          solution<span class=\"br0\">(</span>pif<span class=\"br0\">)</span> <span class=\"sy0\">=</span> possis<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>          possiArray<span class=\"br0\">(</span>p<span class=\"sy0\">_</span>iter<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>possis.<span class=\"me1\">toSet</span> - possis<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toList</span>.<span class=\"me1\">sortWith</span><span class=\"br0\">(</span><span class=\"sy0\">_&lt;_</span><span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>hasNext<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            pif <span class=\"sy0\">=</span> next<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> checkSol<span class=\"br0\">(</span>solution.<span class=\"me1\">toList</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      checkSol<span class=\"br0\">(</span>solution.<span class=\"me1\">toList</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span>  <br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f2Str<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=&gt;</span> String <span class=\"sy0\">=</span> fields <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sepLine <span class=\"sy0\">=</span> <span class=\"st0\">\"+---+---+---+\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sepPoints <span class=\"sy0\">=</span> Set<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fs<span class=\"sy0\">:</span> <span class=\"br0\">(</span>Int, Int<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> String <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i, v<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> v.<span class=\"me1\">toString</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span>,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span>+<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>sepPoints.<span class=\"me1\">contains</span><span class=\"br0\">(</span>i<span class=\"sy0\">%</span>9<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"|\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    sepLine+<span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span>+<span class=\"br0\">(</span><span class=\"nu0\">0</span> to fields.<span class=\"me1\">size</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i<span class=\"sy0\">%</span>9<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">\"|\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>+fs<span class=\"br0\">(</span>i,fields<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>+<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i<span class=\"sy0\">%</span>9<span class=\"sy0\">==</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>sepPoints.<span class=\"me1\">contains</span><span class=\"br0\">(</span>i/<span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span>+sepLine+<span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">foldRight</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>+<span class=\"sy0\">_</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> solver <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Solver<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> riddle <span class=\"sy0\">=</span> List<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">9</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">0</span>,<br/>                    <span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<br/>                    <span class=\"nu0\">5</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">9</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">0</span>,<br/>                    <span class=\"nu0\">0</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">9</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<br/>                    <span class=\"nu0\">6</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">7</span>,<br/>                    <span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">0</span>,<br/>                    <span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">8</span>,<br/>                    <span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">9</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<br/>                    <span class=\"nu0\">0</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"riddle:\"</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>f2Str<span class=\"br0\">(</span>riddle<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> solution <span class=\"sy0\">=</span> solver.<span class=\"me1\">solve</span><span class=\"br0\">(</span>riddle<span class=\"br0\">)</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"solution:\"</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>solution <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Nil <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"no solution!!!\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> f2Str<span class=\"br0\">(</span>solution<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scilab", "loc": 173, "block": "<pre class=\"text highlighted_source\">Init_board=[...<br/>5 3 0 0 7 0 0 0 0;...<br/>6 0 0 1 9 5 0 0 0;...<br/>0 9 8 0 0 0 0 6 0;...<br/>8 0 0 0 6 0 0 0 3;...<br/>4 0 0 8 0 3 0 0 1;...<br/>7 0 0 0 2 0 0 0 6;...<br/>0 6 0 0 0 0 2 8 0;...<br/>0 0 0 4 1 9 0 0 5;...<br/>0 0 0 0 8 0 0 7 9];<br/>\u00a0<br/>break_point=1.0d5; //if 0 there will be no break<br/>\u00a0<br/>function []=disp_board(board)<br/>    StringBoard=string(board);<br/>    for i=1:9<br/>        for j=1:9<br/>            if board(i,j)==0 then<br/>                StringBoard(i,j)='\u00d7';<br/>            end<br/>        end<br/>    end<br/>\u00a0<br/>    StringBoard=[StringBoard, string(zeros(9,2))];<br/>    StringBoard=[StringBoard; string(zeros(2,11))];<br/>\u00a0<br/>    for i=1:9<br/>        StringBoard(i,:)=[StringBoard(i,1:3), '|', StringBoard(i,4:6), '|', StringBoard(i,7:9)]<br/>    end<br/>    StringBoard(9:11,:)=StringBoard(7:9,:);<br/>    StringBoard(8,:)=strsplit('-----------');<br/>    StringBoard(5:7,:)=StringBoard(4:6,:);<br/>    StringBoard(4,:)=strsplit('-----------');<br/>\u00a0<br/>    disp(StringBoard)<br/>endfunction<br/>\u00a0<br/>function varargout=validate_input(input,position,board)<br/>    row=board(position(1),:);<br/>    column=board(:,position(2));<br/>    block=zeros(3,3);<br/>    if position(1)&gt;=1 &amp; position(1)&lt;=3 then<br/>        i=0;<br/>    elseif position(1)&gt;=4 &amp; position(1)&lt;=6 then<br/>        i=3;<br/>    else<br/>        i=6;<br/>    end<br/>    if position(2)&gt;=1 &amp; position(2)&lt;=3 then<br/>        j=0;<br/>    elseif position(2)&gt;=4 &amp; position(2)&lt;=6 then<br/>        j=3;<br/>    else<br/>        j=6;<br/>    end<br/>    block=board(i+1:i+3,j+1:j+3)<br/>\u00a0<br/>    valid_input=%F;<br/>    valid_row=%F;<br/>    valid_col=%F;<br/>    valid_block=%F;<br/>\u00a0<br/>    if find(input==row)==[] then<br/>        valid_row=%T;<br/>    end<br/>    if find(input==column)==[] then<br/>        valid_col=%T;<br/>    end<br/>    if find(input==block)==[] then<br/>        valid_block=%T;<br/>    end<br/>    if valid_row &amp; valid_col &amp; valid_block then<br/>        valid_input=%T;<br/>    end<br/>\u00a0<br/>    varargout=list(valid_input,valid_row,valid_col,valid_block)<br/>endfunction<br/>\u00a0<br/>function varargout=validate_board(board)<br/>    valid_flag1=%T;<br/>    for i=1:9<br/>        for j=1:9<br/>            if board(i,j)~= 0 then<br/>                check_board=Init_board;<br/>                check_board(i,j)=0;<br/>                valid_flag1=validate_input(board(i,j),[i j],check_board);<br/>                if ~valid_flag1 then<br/>                    break<br/>                end<br/>            end<br/>        end<br/>        if ~valid_flag1 then<br/>            break<br/>        end<br/>    end<br/>\u00a0<br/>    valid_flag2 = (length( find(board) ) &gt;= 17); //enforces rule of minimum of 17 givens<br/>                                                 //set it to always\u00a0%T to ignore this rule<br/>    valid_board = (valid_flag1 &amp; valid_flag2);<br/>\u00a0<br/>    varargout=list(valid_board)<br/>endfunction<br/>\u00a0<br/>disp('Initial board:');<br/>disp_board(Init_board);<br/>\u00a0<br/>valid_init_board=validate_board(Init_board);<br/>\u00a0<br/>if ~valid_init_board then<br/>    error('Invalid initial board. Should follow sudoku rules and have at least 17 clues.');<br/>end<br/>\u00a0<br/>blank=[];<br/>for i=1:9<br/>    for j=1:9<br/>        if Init_board(i,j)== 0 then<br/>            blank=[blank; i j];<br/>        end<br/>    end<br/>end<br/>\u00a0<br/>Solved_board=Init_board;<br/>\u00a0<br/>tic();<br/>i=0; counter=0; breaked=%F;<br/>while i&lt;size(blank,'r')<br/>    i=i+1; <br/>    counter=counter+1;<br/>    pos=blank(i,:);<br/>\u00a0<br/>    value=Solved_board(pos(1),pos(2));<br/>\u00a0<br/>    valid_value=%F;<br/>\u00a0<br/>    while valid_value==%F<br/>        value=value+1;<br/>        if value&gt;=10<br/>            break<br/>        else<br/>            valid_value=validate_input(value,pos,Solved_board);<br/>        end<br/>    end<br/>\u00a0<br/>    if valid_value &amp; value&lt;10 then<br/>        Solved_board(pos(1),pos(2))=value<br/>    else<br/>        Solved_board(pos(1),pos(2))=0;<br/>        i=i-2;<br/>    end<br/>\u00a0<br/>    if counter==break_point<br/>        breaked=%T;<br/>        break<br/>    end<br/>end<br/>\u00a0<br/>valid_solved_board=validate_board(Solved_board);<br/>t2=toc();<br/>\u00a0<br/>if valid_solved_board &amp; ~breaked then<br/>    disp('Solved!');<br/>    disp('Solution:');<br/>    disp_board(Solved_board);<br/>    disp('Time: '+string(t2)+'s.');<br/>    disp('Steps: '+string(counter)+'.');<br/>elseif breaked<br/>    disp('Break point reached.');<br/>    disp('Time: '+string(t2)+'s.');<br/>    disp_board(Solved_board);<br/>elseif ~valid_solved_board &amp; ~breaked<br/>    disp('Invalid solution found.');<br/>    disp_board(Solved_board);<br/>end</pre>"}, {"lang": "Sidef", "loc": 49, "block": "<pre class=\"ruby highlighted_source\">func check<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> is cached <span class=\"br0\">{</span><br/>    var <span class=\"br0\">(</span>id, im<span class=\"br0\">)</span> = i.<span class=\"me1\">divmod</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>    var <span class=\"br0\">(</span>jd, jm<span class=\"br0\">)</span> = j.<span class=\"me1\">divmod</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>\u00a0<br/>    jd == id <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> <span class=\"kw2\">true</span><br/>    jm == im <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> <span class=\"kw2\">true</span><br/>\u00a0<br/>    <span class=\"br0\">(</span>id<span class=\"sy0\">//</span><span class=\"nu0\">3</span> == jd<span class=\"sy0\">//</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>    <span class=\"br0\">(</span>jm<span class=\"sy0\">//</span><span class=\"nu0\">3</span> == im<span class=\"sy0\">//</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func solve<span class=\"br0\">(</span>grid<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> ^grid <span class=\"br0\">{</span><br/>        grid<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">next</span><br/>        var t = <span class=\"br0\">[</span>grid<span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>j<span class=\"sy0\">|</span> check<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">grep</span><span class=\"br0\">(</span>^grid<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">freq</span><br/>\u00a0<br/>        <span class=\"br0\">{</span> <span class=\"sy0\">|</span>k<span class=\"sy0\">|</span><br/>            t.<span class=\"me1\">has_key</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">next</span><br/>            grid<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = k<br/>            solve<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">9</span><br/>\u00a0<br/>        grid<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"nu0\">0</span><br/>        <span class=\"kw2\">return</span> <span class=\"kw2\">nil</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> ^grid <span class=\"br0\">{</span><br/>        <span class=\"kw3\">print</span> <span class=\"st0\">\"#{grid[i]} \"</span><br/>        <span class=\"kw3\">print</span> <span class=\"st0\">\" \"</span>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span>  <span class=\"sy0\">-&gt;</span> divides<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">9</span>  <span class=\"sy0\">-&gt;</span> divides<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">27</span> <span class=\"sy0\">-&gt;</span> divides<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var grid = <span class=\"sy0\">%</span>i<span class=\"br0\">(</span><br/>    <span class=\"nu0\">5</span> <span class=\"nu0\">3</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span>  <span class=\"nu0\">7</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">2</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">8</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>    <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">7</span> <span class=\"nu0\">0</span> <span class=\"nu0\">3</span>  <span class=\"nu0\">9</span> <span class=\"nu0\">0</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">8</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">7</span> <span class=\"nu0\">2</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">4</span> <span class=\"nu0\">9</span><br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">2</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">9</span> <span class=\"nu0\">8</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">7</span> <span class=\"nu0\">0</span><br/>    <span class=\"nu0\">7</span> <span class=\"nu0\">9</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">8</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">3</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">5</span> <span class=\"nu0\">0</span> <span class=\"nu0\">6</span><br/>    <span class=\"nu0\">9</span> <span class=\"nu0\">6</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">3</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>    <span class=\"nu0\">0</span> <span class=\"nu0\">5</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">6</span> <span class=\"nu0\">9</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/>solve<span class=\"br0\">(</span>grid<span class=\"br0\">)</span></pre>"}, {"lang": "Stata", "loc": 101, "block": "<pre class=\"text highlighted_source\">mata<br/>function sudoku(a) {<br/>\ts = J(81,20,.)<br/>\tt = J(81,3,.)<br/>\tv = J(81,9,1)<br/>\tw = J(81,1,0)<br/>\tfor (i=1; i&lt;=9; i++) {<br/>\t\tfor (j=1; j&lt;=9; j++) {<br/>\t\t\tn = (i-1)*9+j<br/>\t\t\tk = floor((i-1)/3)*3+floor((j-1)/3)+1<br/>\t\t\tt[n,.] = i,j,k<br/>\t\t}<br/>\t}<br/>\tfor (i=1; i&lt;=81; i++) {<br/>\t\tfor (j=i+1; j&lt;=81; j++) {<br/>\t\t\tif (any(t[i,.]:==t[j,.])) {<br/>\t\t\t\tw[i]=w[i]+1<br/>\t\t\t\tw[j]=w[j]+1<br/>\t\t\t\ts[i,w[i]] = j<br/>\t\t\t\ts[j,w[j]] = i<br/>\t\t\t}<br/>\t\t}<br/>\t}<br/>\tw = J(81,1,1)<br/>\tfor (i=1; i&lt;=9; i++) {<br/>\t\tfor (j=1; j&lt;=9; j++) {<br/>\t\t\tif (a[i,j]&lt;.) {<br/>\t\t\t\tpush(a,s,t,v,w,(i-1)*9+j,a[i,j])<br/>\t\t\t}<br/>\t\t}<br/>\t}<br/>\treturn(solve(a,s,t,v,w))<br/>}<br/>\u00a0<br/>function solve(a,s,t,v,w) {<br/>\tfor (q=1; q;) {<br/>\t\tq = 0<br/>\t\tfor (n=1; n&lt;=81; n++) {<br/>\t\t\tif (w[n]) {<br/>\t\t\t\tr = sum(v[n,.])<br/>\t\t\t\tif (r==0) {<br/>\t\t\t\t\treturn(0)<br/>\t\t\t\t}<br/>\t\t\t\telse if (r==1) {<br/>\t\t\t\t\tq = 1<br/>\t\t\t\t\tpush(a,s,t,v,w,n,selectindex(v[n,.]))<br/>\t\t\t\t}<br/>\t\t\t}<br/>\t\t}<br/>\t}<br/>\u00a0<br/>\tif (all(w:==0)) {<br/>\t\treturn(1)<br/>\t}<br/>\telse {<br/>\t\tm0 = n0 = .<br/>\t\tfor (n=1; n&lt;=81; n++) {<br/>\t\t\tm = sum(v[n,.])<br/>\t\t\tif (w[n] &amp; m&gt;1 &amp; m&lt;m0) {<br/>\t\t\t\tm0 = m<br/>\t\t\t\tn0 = n<br/>\t\t\t}<br/>\t\t}<br/>\t\tz = selectindex(v[n0,.])<br/>\t\tfor (i=1; i&lt;=m0; i++) {<br/>\t\t\ta2 = a<br/>\t\t\tv2 = v<br/>\t\t\tw2 = w<br/>\t\t\tpush(a2,s,t,v2,w2,n0,z[i])<br/>\t\t\tif (solve(a2,s,t,v2,w2)) {<br/>\t\t\t\ta = a2<br/>\t\t\t\treturn(1)<br/>\t\t\t}<br/>\t\t}<br/>\t\treturn(0)<br/>\t}<br/>}<br/>\u00a0<br/>function push(a,s,t,v,w,n,z) {<br/>\tw[n] = 0<br/>\ti = t[n,1]<br/>\tj = t[n,2]<br/>\ta[i,j] = z<br/>\tfor (k=1; k&lt;=20; k++) {<br/>\t\tv[s[n,k],z] = 0<br/>\t}<br/>}<br/>\u00a0<br/>a = 5,3,.,.,7,.,.,.,.\\<br/>    6,.,.,1,9,5,.,.,.\\<br/>    .,9,8,.,.,.,.,6,.\\<br/>    8,.,.,.,6,.,.,.,3\\<br/>    4,.,.,8,.,3,.,.,1\\<br/>    7,.,.,.,2,.,.,.,6\\<br/>    .,6,.,.,.,.,2,8,.\\<br/>    .,.,.,4,1,9,.,.,5\\<br/>    .,.,.,.,8,.,.,7,9<br/>\u00a0<br/>sudoku(a)<br/>a<br/>end</pre>"}, {"lang": "Swift", "loc": 124, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>typealias SodukuPuzzle = [[Int]]<br/>\u00a0<br/>class Soduku {<br/>    let mBoardSize:Int!<br/>    let mBoxSize:Int!<br/>    var mBoard:SodukuPuzzle!<br/>    var mRowSubset:[[Bool]]!<br/>    var mColSubset:[[Bool]]!<br/>    var mBoxSubset:[[Bool]]!<br/>\u00a0<br/>    init(board:SodukuPuzzle) {<br/>        mBoard = board<br/>        mBoardSize = board.count<br/>        mBoxSize = Int(sqrt(Double(mBoardSize)))<br/>        mRowSubset = [[Bool]](count: mBoardSize, repeatedValue: [Bool](count: mBoardSize, repeatedValue: false))<br/>        mColSubset = [[Bool]](count: mBoardSize, repeatedValue: [Bool](count: mBoardSize, repeatedValue: false))<br/>        mBoxSubset = [[Bool]](count: mBoardSize, repeatedValue: [Bool](count: mBoardSize, repeatedValue: false))<br/>        initSubsets()<br/>    }<br/>\u00a0<br/>    func computeBoxNo(i:Int, _ j:Int) -&gt; Int {<br/>        let boxRow = i / mBoxSize<br/>        let boxCol = j / mBoxSize<br/>\u00a0<br/>        return boxRow * mBoxSize + boxCol<br/>    }<br/>\u00a0<br/>    func initSubsets() {<br/>        for i in 0..&lt;mBoard.count {<br/>            for j in 0..&lt;mBoard.count {<br/>                let value = mBoard[i][j]<br/>\u00a0<br/>                if value\u00a0!= 0 {<br/>                    setSubsetValue(i, j, value, true);<br/>                }<br/>            }<br/>        }<br/>    }<br/>\u00a0<br/>    func isValid(i:Int, _ j:Int, var _ val:Int) -&gt; Bool {<br/>        val--<br/>        let isPresent = mRowSubset[i][val] || mColSubset[j][val] || mBoxSubset[computeBoxNo(i, j)][val]<br/>        return\u00a0!isPresent<br/>    }<br/>\u00a0<br/>    func printBoard() {<br/>        for i in 0..&lt;mBoardSize {<br/>            if i\u00a0% mBoxSize == 0 {<br/>                println(\" -----------------------\")<br/>            }<br/>\u00a0<br/>            for j in 0..&lt;mBoardSize {<br/>                if j\u00a0% mBoxSize == 0 {<br/>                    print(\"| \")<br/>                }<br/>\u00a0<br/>                print(mBoard[i][j]\u00a0!= 0\u00a0? String(mBoard[i][j])\u00a0: \" \")<br/>                print(\" \")<br/>            }<br/>\u00a0<br/>            println(\"|\")<br/>        }<br/>\u00a0<br/>        println(\" -----------------------\")<br/>    }<br/>\u00a0<br/>    func setSubsetValue(i:Int, _ j:Int, _ value:Int, _ present:Bool) {<br/>        mRowSubset[i][value - 1] = present<br/>        mColSubset[j][value - 1] = present<br/>        mBoxSubset[computeBoxNo(i, j)][value - 1] = present<br/>    }<br/>\u00a0<br/>    func solve() {<br/>        solve(0, 0)<br/>    }<br/>\u00a0<br/>    func solve(var i:Int, var _ j:Int) -&gt; Bool {<br/>        if i == mBoardSize {<br/>            i = 0<br/>            j++<br/>            if j == mBoardSize {<br/>                return true<br/>            }<br/>        }<br/>\u00a0<br/>        if mBoard[i][j]\u00a0!= 0 {<br/>            return solve(i + 1, j)<br/>        }<br/>\u00a0<br/>        for value in 1...mBoardSize {<br/>            if isValid(i, j, value) {<br/>                mBoard[i][j] = value<br/>                setSubsetValue(i, j, value, true)<br/>\u00a0<br/>                if solve(i + 1, j) {<br/>                    return true<br/>                }<br/>\u00a0<br/>                setSubsetValue(i, j, value, false)<br/>            }<br/>        }<br/>\u00a0<br/>        mBoard[i][j] = 0<br/>        return false<br/>    }<br/>}<br/>\u00a0<br/>let board = [<br/>    [4, 0, 0, 0, 0, 0, 0, 6, 0],<br/>    [5, 0, 0, 0, 8, 0, 9, 0, 0],<br/>    [3, 0, 0, 0, 0, 1, 0, 0, 0],<br/>    [0, 2, 0, 7, 0, 0, 0, 0, 1],<br/>    [0, 9, 0, 0, 0, 0, 0, 4, 0],<br/>    [8, 0, 0, 0, 0, 3, 0, 5, 0],<br/>    [0, 0, 0, 2, 0, 0, 0, 0, 7],<br/>    [0, 0, 6, 0, 5, 0, 0, 0, 8],<br/>    [0, 1, 0, 0, 0, 0, 0, 0, 6]<br/>]<br/>\u00a0<br/>let puzzle = Soduku(board: board)<br/>puzzle.solve()<br/>puzzle.printBoard()</pre>"}, {"lang": "SystemVerilog", "loc": 131, "block": "<pre class=\"systemverilog highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"co1\">//////////////////////////////////////////////////////////////////////////////</span><br/><span class=\"co1\">/// SudokuSolver                                                           ///</span><br/><span class=\"co1\">///    A class that fills up a sudoku board, the initial board is given    ///</span><br/><span class=\"co1\">///    as an array preset_rows, the positions where preset_rows is zero    ///</span><br/><span class=\"co1\">///    are to be determined. Three views of the sudoku board are created   ///</span><br/><span class=\"co1\">///    and the uniqueness of its elements are defined by on constraint for ///</span><br/><span class=\"co1\">///    each view, one constraint ensures that the values are between 1 and ///</span><br/><span class=\"co1\">///    9, and two other constraints are used to ensure that the values in  ///</span><br/><span class=\"co1\">///    all three views agree to each other.                                ///</span><br/><span class=\"co1\">///                                                                        ///</span><br/><span class=\"co1\">///                                                                        ///</span><br/><span class=\"co1\">///    A solution using only the \"rows\" array would be possible, however   ///</span><br/><span class=\"co1\">///    this illustrates better how one can relate different variables in   ///</span><br/><span class=\"co1\">///    SystemVerilog Constrained randomization.                            ///</span><br/><span class=\"co1\">//////////////////////////////////////////////////////////////////////////////</span><br/><span class=\"kw4\">class</span> SudokuSolver<span class=\"sy0\">;</span><br/>  <span class=\"kw3\">rand</span> <span class=\"kw5\">int</span> tiles<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw3\">rand</span> <span class=\"kw5\">int</span> rows<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw3\">rand</span> <span class=\"kw5\">int</span> cols<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw5\">int</span> preset_rows<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw3\">constraint</span> board_input <span class=\"br0\">{</span><br/>    <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>preset_rows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"kw3\">foreach</span><span class=\"br0\">(</span>preset_rows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <br/>       <span class=\"kw3\">if</span><span class=\"br0\">(</span>preset_rows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> rows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> preset_rows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw3\">constraint</span> range <span class=\"br0\">{</span><br/>    <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>rows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>rows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        rows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"kw3\">inside</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"co1\">////////////////////////////////////////////////</span><br/>  <span class=\"co1\">/// Every number in a row is unique          ///</span><br/>  <span class=\"co1\">////////////////////////////////////////////////</span><br/>  <span class=\"kw3\">constraint</span> rows_permutation <span class=\"br0\">{</span><br/>    <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>rows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>rows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j1<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                     <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>rows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j2<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">if</span><span class=\"br0\">(</span>j1 <span class=\"sy0\">!=</span> j2<span class=\"br0\">)</span> rows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j1<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> rows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j2<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"co1\">///////////////////////////////////////////////</span><br/>  <span class=\"co1\">/// Every number in a column is unique      ///</span><br/>  <span class=\"co1\">///////////////////////////////////////////////</span><br/>  <span class=\"kw3\">constraint</span> cols_permutation <span class=\"br0\">{</span><br/>    <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>cols<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>cols<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j1<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                     <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>cols<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j2<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">if</span><span class=\"br0\">(</span>j1 <span class=\"sy0\">!=</span> j2<span class=\"br0\">)</span> cols<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j1<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> cols<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j2<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"co1\">/////////////////////////////////////////////////</span><br/>  <span class=\"co1\">/// Every number in a tile (square) is unique ///</span><br/>  <span class=\"co1\">/////////////////////////////////////////////////</span><br/>  <span class=\"kw3\">constraint</span> tiles_permutation <span class=\"br0\">{</span><br/>    <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>tiles<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>tiles<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j1<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                     <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>tiles<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j2<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">if</span><span class=\"br0\">(</span>j1 <span class=\"sy0\">!=</span> j2<span class=\"br0\">)</span> tiles<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j1<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> tiles<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j2<span class=\"br0\">]</span><span class=\"sy0\">;</span>     <br/>  <span class=\"br0\">}</span><br/>  <span class=\"co1\">///////////////////////////////////////////////////</span><br/>  <span class=\"co1\">/// Makes sure that sure that the numbers in    ///</span><br/>  <span class=\"co1\">/// each view agree with other views            ///</span><br/>  <span class=\"co1\">///////////////////////////////////////////////////</span><br/>  <span class=\"kw3\">constraint</span> rows_vs_tiles <span class=\"br0\">{</span><br/>    <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>tiles<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>tiles<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      tiles<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> rows<span class=\"br0\">[</span><span class=\"br0\">(</span>i<span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>j<span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>i<span class=\"sy0\">%</span>3<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"br0\">(</span>j<span class=\"sy0\">%</span>3<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw3\">constraint</span> rows_vs_cols <span class=\"br0\">{</span><br/>    <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>cols<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>cols<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      cols<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> rows<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"co1\">///////////////////////////////////////////////////</span><br/>  <span class=\"co1\">/// Print the current state of the board in the ///</span><br/>  <span class=\"co1\">/// standard output                             ///</span><br/>  <span class=\"co1\">///////////////////////////////////////////////////</span><br/>  <span class=\"kw4\">function</span> <span class=\"kw5\">void</span> printBoard<span class=\"sy0\">;</span><br/>    <span class=\"kw5\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>    <span class=\"kw3\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"kw4\">begin</span><br/>      <span class=\"kw3\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>$display<span class=\"br0\">(</span><span class=\"st0\">\"   -------------\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      $write<span class=\"br0\">(</span><span class=\"st0\">\"   \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw3\">for</span><span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>j<span class=\"br0\">)</span> <span class=\"kw4\">begin</span><br/>        <span class=\"kw3\">if</span><span class=\"br0\">(</span>j <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> $write<span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        $write<span class=\"br0\">(</span><span class=\"st0\">\"%c\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"0\"</span> <span class=\"sy0\">+</span> rows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw4\">end</span><br/>      $display<span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">end</span><br/>    $display<span class=\"br0\">(</span><span class=\"st0\">\"   -------------\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">endfunction</span><br/>  <span class=\"kw4\">function</span> <span class=\"kw5\">void</span> printInitial<span class=\"sy0\">;</span><br/>    <span class=\"kw5\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>    <span class=\"kw3\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"kw4\">begin</span><br/>      <span class=\"kw3\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>$display<span class=\"br0\">(</span><span class=\"st0\">\"-------------\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw3\">for</span><span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>j<span class=\"br0\">)</span> <span class=\"kw4\">begin</span><br/>        <span class=\"kw3\">if</span><span class=\"br0\">(</span>j <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> $write<span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">if</span><span class=\"br0\">(</span>preset_rows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw4\">begin</span><br/>          $write<span class=\"br0\">(</span><span class=\"st0\">\"%c\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"0\"</span> <span class=\"sy0\">+</span> preset_rows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">end</span><br/>        <span class=\"kw3\">else</span> <span class=\"kw4\">begin</span><br/>          $write<span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">end</span><br/>      <span class=\"kw4\">end</span><br/>      $display<span class=\"br0\">(</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">end</span><br/>    $display<span class=\"br0\">(</span><span class=\"st0\">\"-------------\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">endfunction</span><br/>\u00a0<br/><span class=\"kw4\">endclass</span><br/>\u00a0<br/><span class=\"co1\">//////////////////////////////////////////////////////</span><br/><span class=\"co1\">/// Simple program instantiating the sudoku object ///</span><br/><span class=\"co1\">//////////////////////////////////////////////////////</span><br/><span class=\"kw4\">program</span> SudokuTest<span class=\"sy0\">;</span><br/>  SudokuSolver board<span class=\"sy0\">;</span><br/><span class=\"kw4\">initial</span> <span class=\"kw4\">begin</span><br/>  board <span class=\"sy0\">=</span> <span class=\"kw3\">new</span><span class=\"sy0\">;</span><br/>  <span class=\"kw3\">foreach</span><span class=\"br0\">(</span>board.preset_rows<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> board.preset_rows<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  $display<span class=\"br0\">(</span><span class=\"st0\">\"Initial Board:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  board.printInitial<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\">// Generate two different solutions for the board</span><br/>  <span class=\"kw3\">if</span><span class=\"br0\">(</span>board.<span class=\"kw7\">randomize</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"kw4\">begin</span><br/>    $display<span class=\"br0\">(</span><span class=\"st0\">\"One solution:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    board.printBoard<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">end</span><br/>  <span class=\"kw3\">else</span> <span class=\"kw4\">begin</span><br/>    $display<span class=\"br0\">(</span><span class=\"st0\">\"ERROR: Failed to generate first solution\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">end</span><br/>  <span class=\"kw3\">if</span><span class=\"br0\">(</span>board.<span class=\"kw7\">randomize</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"kw4\">begin</span><br/>    $display<span class=\"br0\">(</span><span class=\"st0\">\"Another solution:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    board.printBoard<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">end</span><br/>  <span class=\"kw3\">else</span> <span class=\"kw4\">begin</span><br/>    $display<span class=\"br0\">(</span><span class=\"st0\">\"ERROR: Failed to generate second solution\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">end</span><br/><span class=\"kw4\">end</span><br/><span class=\"kw4\">endprogram</span><br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 249, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>oo::<span class=\"me1\">class</span> create Sudoku <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> idata<br/>\u00a0<br/>    <span class=\"kw1\">method</span> clear <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> y <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> x <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\tmy <span class=\"kw1\">set</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> <span class=\"kw2\">load</span> <span class=\"br0\">{</span>data<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> <span class=\"kw1\">error</span> <span class=\"st0\">\"data must be a 9-element list, each element also being a<span class=\"es0\">\\</span><br/>\t\tlist of 9 numbers from 1 to 9 or blank or an @ symbol.\"</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$data</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">9</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">error</span> <span class=\"re0\">$error</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> y <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">9</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> row <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$data</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$row</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">9</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">error</span> <span class=\"re0\">$error</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> x <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">9</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> d <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$row</span> <span class=\"re0\">$x</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">regexp</span> <span class=\"br0\">{</span>^<span class=\"br0\">[</span>@1-<span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy0\">?$</span><span class=\"br0\">}</span> <span class=\"re0\">$d</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">error</span> <span class=\"re0\">$d</span>-<span class=\"re0\">$error</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$d</span> eq <span class=\"st0\">\"@\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> d <span class=\"st0\">\"\"</span><span class=\"br0\">}</span><br/>\t\tmy <span class=\"kw1\">set</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span> <span class=\"re0\">$d</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> dump <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> rows <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> y <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> rows <span class=\"br0\">[</span>my getRow <span class=\"nu0\">0</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$rows</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> Log msg <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># Chance to print message</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> <span class=\"kw1\">set</span> <span class=\"br0\">{</span>x y value<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">catch</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> value <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"sy0\">%</span>d <span class=\"re0\">$value</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> value <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$value</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> || <span class=\"re0\">$value</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">9</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> idata<span class=\"br0\">(</span>sq<span class=\"re0\">$x</span><span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> idata<span class=\"br0\">(</span>sq<span class=\"re0\">$x</span><span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"re0\">$value</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> get <span class=\"br0\">{</span>x y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exists idata<span class=\"br0\">(</span>sq<span class=\"re0\">$x</span><span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$idata</span><span class=\"br0\">(</span>sq<span class=\"re0\">$x</span><span class=\"re0\">$y</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> getRow <span class=\"br0\">{</span>x y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> row <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> x <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">9</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> row <span class=\"br0\">[</span>my get <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$row</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> getCol <span class=\"br0\">{</span>x y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> col <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> y <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">9</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> col <span class=\"br0\">[</span>my get <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$col</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> getRegion <span class=\"br0\">{</span>x y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> xR <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$x</span>/<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> yR <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$y</span>/<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> regn <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> x <span class=\"re0\">$xR</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$xR</span>+<span class=\"nu0\">3</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> y <span class=\"re0\">$yR</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$yR</span>+<span class=\"nu0\">3</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> regn <span class=\"br0\">[</span>my get <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$regn</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># SudokuSolver inherits from Sudoku, and adds the ability to filter</span><br/><span class=\"co1\"># possibilities for a square by looking at all the squares in the row, column,</span><br/><span class=\"co1\"># and region that the square is a part of. The method 'solve' contains a list</span><br/><span class=\"co1\"># of rule-objects to use, and iterates over each square on the board, applying</span><br/><span class=\"co1\"># each rule sequentially until the square is allocated.</span><br/>\u00a0<br/>oo::<span class=\"me1\">class</span> create SudokuSolver <span class=\"br0\">{</span><br/>    superclass Sudoku<br/>    <span class=\"kw1\">method</span> validchoices <span class=\"br0\">{</span>x y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>my get <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span> ne <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>my get <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">set</span> row <span class=\"br0\">[</span>my getRow <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> col <span class=\"br0\">[</span>my getCol <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> regn <span class=\"br0\">[</span>my getRegion <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> eliminate <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$row</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$col</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$regn</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> eliminate <span class=\"br0\">[</span><span class=\"kw2\">lsearch</span> -all -inline -not <span class=\"re0\">$eliminate</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> eliminate <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -unique <span class=\"re0\">$eliminate</span><span class=\"br0\">]</span><br/>\u00a0<br/>\t<span class=\"kw1\">set</span> choices <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> c <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$c</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> c<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$c</span> ni <span class=\"re0\">$eliminate</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> choices <span class=\"re0\">$c</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$choices</span><span class=\"br0\">]</span>==<span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">error</span> <span class=\"st0\">\"No choices left for square $x,$y\"</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$choices</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> completion <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><br/>\t    <span class=\"nu0\">81</span>-<span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"br0\">[</span><span class=\"kw2\">lsearch</span> -all -inline <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"br0\">[</span>my dump<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> solve <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> ruleClass <span class=\"br0\">[</span><span class=\"kw2\">info</span> class subclass Rule<span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> rules <span class=\"br0\">[</span><span class=\"re0\">$ruleClass</span> new<span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> begin <span class=\"br0\">[</span>my completion<span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> y <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> x <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>my get <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span> eq <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">foreach</span> rule <span class=\"re0\">$rules</span> <span class=\"br0\">{</span><br/>\t\t\t    <span class=\"kw1\">set</span> c <span class=\"br0\">[</span><span class=\"re0\">$rule</span> solve <span class=\"br0\">[</span>self<span class=\"br0\">]</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>\t\t\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$c</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t\t\tmy <span class=\"kw1\">set</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span> <span class=\"re0\">$c</span><br/>\t\t\t\tmy Log <span class=\"st0\">\"[info object class $rule] solved [self] at $x,$y for $c\"</span><br/>\t\t\t\t<span class=\"kw1\">break</span><br/>\t\t\t    <span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t    <span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">set</span> end <span class=\"br0\">[</span>my completion<span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$end</span>==<span class=\"nu0\">81</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\tmy Log <span class=\"st0\">\"Finished solving!\"</span><br/>\t\t<span class=\"kw1\">break</span><br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$begin</span>==<span class=\"re0\">$end</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\tmy Log <span class=\"st0\">\"A round finished without solving any squares, giving up.\"</span><br/>\t\t<span class=\"kw1\">break</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">foreach</span> rule <span class=\"re0\">$rules</span> <span class=\"br0\">{</span><br/>\t    <span class=\"re0\">$rule</span> destroy<br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Rule is the template for the rules used in Solver. The other rule-objects</span><br/><span class=\"co1\"># apply their logic to the values passed in and return either '0' or a number</span><br/><span class=\"co1\"># to allocate to the requested square.</span><br/>oo::<span class=\"me1\">class</span> create Rule <span class=\"br0\">{</span><br/>    <span class=\"kw1\">method</span> solve <span class=\"br0\">{</span>hSudoku x y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> object isa typeof <span class=\"re0\">$hSudoku</span> SudokuSolver<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">error</span> <span class=\"st0\">\"hSudoku must be an instance of class SudokuSolver.\"</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\ttailcall my Solve <span class=\"re0\">$hSudoku</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span> <span class=\"br0\">[</span><span class=\"re0\">$hSudoku</span> validchoices <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Get all the allocated numbers for each square in the the row, column, and</span><br/><span class=\"co1\"># region containing $x,$y. If there is only one unallocated number among all</span><br/><span class=\"co1\"># three groups, it must be allocated at $x,$y</span><br/>oo::<span class=\"me1\">class</span> create RuleOnlyChoice <span class=\"br0\">{</span><br/>    superclass Rule<br/>    <span class=\"kw1\">method</span> Solve <span class=\"br0\">{</span>hSudoku x y choices<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$choices</span><span class=\"br0\">]</span>==<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> <span class=\"re0\">$choices</span> <br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Test each column to determine if $choice is an invalid choice for all other</span><br/><span class=\"co1\"># columns in row $X. If it is, it must only go in square $x,$y.</span><br/>oo::<span class=\"me1\">class</span> create RuleColumnChoice <span class=\"br0\">{</span><br/>    superclass Rule<br/>    <span class=\"kw1\">method</span> Solve <span class=\"br0\">{</span>hSudoku x y choices<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> choice <span class=\"re0\">$choices</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> failed <span class=\"nu0\">0</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> x2 <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$x2</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">9</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x2<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$x2</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$x</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$choice</span> <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"re0\">$hSudoku</span> validchoices <span class=\"re0\">$x2</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">set</span> failed <span class=\"nu0\">1</span><br/>\t\t    <span class=\"kw1\">break</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"re0\">$failed</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$choice</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Test each row to determine if $choice is an invalid choice for all other</span><br/><span class=\"co1\"># rows in column $y. If it is, it must only go in square $x,$y.</span><br/>oo::<span class=\"me1\">class</span> create RuleRowChoice <span class=\"br0\">{</span><br/>    superclass Rule<br/>    <span class=\"kw1\">method</span> Solve <span class=\"br0\">{</span>hSudoku x y choices<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> choice <span class=\"re0\">$choices</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> failed <span class=\"nu0\">0</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> y2 <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$y2</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">9</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> y2<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$y2</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$y</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$choice</span> <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"re0\">$hSudoku</span> validchoices <span class=\"re0\">$x</span> <span class=\"re0\">$y2</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">set</span> failed <span class=\"nu0\">1</span><br/>\t\t    <span class=\"kw1\">break</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"re0\">$failed</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$choice</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Test each square in the region occupied by $x,$y to determine if $choice is</span><br/><span class=\"co1\"># an invalid choice for all other squares in that region. If it is, it must</span><br/><span class=\"co1\"># only go in square $x,$y.</span><br/>oo::<span class=\"me1\">class</span> create RuleRegionChoice <span class=\"br0\">{</span><br/>    superclass Rule<br/>    <span class=\"kw1\">method</span> Solve <span class=\"br0\">{</span>hSudoku x y choices<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> choice <span class=\"re0\">$choices</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> failed <span class=\"nu0\">0</span><br/>\t    <span class=\"kw1\">set</span> regnX <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$x</span>/<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> regnY <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$y</span>/<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> y2 <span class=\"re0\">$regnY</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$y2</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$regnY</span>+<span class=\"nu0\">3</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> y2<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> x2 <span class=\"re0\">$regnX</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$x2</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$regnX</span>+<span class=\"nu0\">3</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x2<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"re0\">$x2</span><span class=\"sy0\">!</span>=<span class=\"re0\">$x</span> || <span class=\"re0\">$y2</span><span class=\"sy0\">!</span>=<span class=\"re0\">$y</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$choice</span> <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"re0\">$hSudoku</span> validchoices <span class=\"re0\">$x2</span> <span class=\"re0\">$y2</span><span class=\"br0\">]</span><br/>\t\t    <span class=\"br0\">}</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">set</span> failed <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw1\">break</span><br/>\t\t    <span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"re0\">$failed</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$choice</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ursala", "loc": 13, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>\u00a0<br/>sudoku =<br/>\u00a0<br/>@FL mat0+ block3+ mat` *+ block3*+ block9+ -+<br/>   ~&amp;rSL+ (psort (nleq+)* &lt;~&amp;blrl,~&amp;blrr&gt;)+ ~&amp;arg^&amp; -+<br/>      ~&amp;al?\\~&amp;ar ~&amp;aa^&amp;~&amp;afahPRPfafatPJPRY+ ~&amp;farlthlriNCSPDPDrlCS2DlrTS2J,<br/>      ^|J/~&amp; ~&amp;rt!=+ ^= ~&amp;s+ ~&amp;H(<br/>         -+.|=&amp;lrr;,|=&amp;lrl;,|=&amp;ll;+-,<br/>         ~&amp;rgg&amp;&amp; ~&amp;irtPFXlrjrXPS; ~&amp;lrK2tkZ2g&amp;&amp; ~&amp;llrSL2rDrlPrrPljXSPTSL)+-,<br/>   //~&amp;p ^|DlrDSLlrlPXrrPDSL(~&amp;,num*+ rep2 block3)*= num block27 ~&amp;iiK0 iota9,<br/>   * `0?=\\~&amp;iNC\u00a0! ~&amp;t digits+-</pre>"}, {"lang": "VBA", "loc": 102, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw4\">Dim</span> grid(9, 9)<br/><span class=\"kw4\">Dim</span> gridSolved(9, 9)<br/>\u00a0<br/><span class=\"kw2\">Public</span> <span class=\"kw2\">Sub</span> Solve(i, j)<br/>  <span class=\"kw3\">If</span> i &gt; 9 <span class=\"kw3\">Then</span><br/>    <span class=\"co1\">'exit with gridSolved = Grid<br/></span>    <span class=\"kw3\">For</span> r = 1 <span class=\"kw3\">To</span> 9<br/>      <span class=\"kw3\">For</span> c = 1 <span class=\"kw3\">To</span> 9<br/>        gridSolved(r, c) = grid(r, c)<br/>      <span class=\"kw3\">Next</span> c<br/>    <span class=\"kw3\">Next</span> r<br/>    <span class=\"kw2\">Exit</span> <span class=\"kw2\">Sub</span><br/>  <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>  <span class=\"kw3\">For</span> n = 1 <span class=\"kw3\">To</span> 9<br/>    <span class=\"kw3\">If</span> isSafe(i, j, n) <span class=\"kw3\">Then</span><br/>      nTmp = grid(i, j)<br/>      grid(i, j) = n<br/>      <span class=\"kw3\">If</span> j = 9 <span class=\"kw3\">Then</span><br/>        Solve i + 1, 1<br/>      <span class=\"kw3\">Else</span><br/>        Solve i, j + 1<br/>      <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>      grid(i, j) = nTmp<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>  <span class=\"kw3\">Next</span> n<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Public</span> <span class=\"kw2\">Function</span> isSafe(i, j, n) <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/><span class=\"kw4\">Dim</span> iMin <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw4\">Dim</span> jMin <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>\u00a0<br/><span class=\"kw3\">If</span> grid(i, j) &lt;&gt; 0 <span class=\"kw3\">Then</span><br/>  isSafe = (grid(i, j) = n)<br/>  <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/><span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\u00a0<br/><span class=\"co1\">'grid(i,j) is an empty cell. Check if n is OK<br/></span><span class=\"co1\">'first check the row i<br/></span><span class=\"kw3\">For</span> c = 1 <span class=\"kw3\">To</span> 9<br/>  <span class=\"kw3\">If</span> grid(i, c) = n <span class=\"kw3\">Then</span><br/>    isSafe = <span class=\"kw5\">False</span><br/>    <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>  <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">Next</span> c<br/>\u00a0<br/><span class=\"co1\">'now check the column j<br/></span><span class=\"kw3\">For</span> r = 1 <span class=\"kw3\">To</span> 9<br/> <span class=\"kw3\">If</span> grid(r, j) = n <span class=\"kw3\">Then</span><br/>   isSafe = <span class=\"kw5\">False</span><br/>   <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/> <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">Next</span> r<br/>\u00a0<br/><span class=\"co1\">'finally, check the 3x3 subsquare containing grid(i,j)<br/></span>iMin = 1 + 3 * Int((i - 1) / 3)<br/>jMin = 1 + 3 * Int((j - 1) / 3)<br/><span class=\"kw3\">For</span> r = iMin <span class=\"kw3\">To</span> iMin + 2<br/>  <span class=\"kw3\">For</span> c = jMin <span class=\"kw3\">To</span> jMin + 2<br/>    <span class=\"kw3\">If</span> grid(r, c) = n <span class=\"kw3\">Then</span><br/>      isSafe = <span class=\"kw5\">False</span><br/>      <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>  <span class=\"kw3\">Next</span> c<br/><span class=\"kw3\">Next</span> r<br/>\u00a0<br/><span class=\"co1\">'all tests were OK<br/></span>isSafe = <span class=\"kw5\">True</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Public</span> <span class=\"kw2\">Sub</span> Sudoku()<br/>  <span class=\"co1\">'main routine<br/></span>  <span class=\"co1\">'to use, fill in the grid and<br/></span>  <span class=\"co1\">'type \"Sudoku\" in the Immediate panel of the Visual Basic for Applications window<br/></span><br/>  <span class=\"kw4\">Dim</span> s(9) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>\u00a0<br/>  <span class=\"co1\">'initialise grid using 9 strings,one per row<br/></span>  s(1) = <span class=\"st0\">\"001005070\"</span><br/>  s(2) = <span class=\"st0\">\"920600000\"</span><br/>  s(3) = <span class=\"st0\">\"008000600\"</span><br/>  s(4) = <span class=\"st0\">\"090020401\"</span><br/>  s(5) = <span class=\"st0\">\"000000000\"</span><br/>  s(6) = <span class=\"st0\">\"304080090\"</span><br/>  s(7) = <span class=\"st0\">\"007000300\"</span><br/>  s(8) = <span class=\"st0\">\"000007069\"</span><br/>  s(9) = <span class=\"st0\">\"010800700\"</span><br/>  <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> 9<br/>    <span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> 9<br/>      grid(i, j) = Int(Val(Mid$(s(i), j, 1)))<br/>    <span class=\"kw3\">Next</span> j<br/>  <span class=\"kw3\">Next</span> i<br/>  <span class=\"co1\">'solve it!<br/></span>  Solve 1, 1<br/>  <span class=\"co1\">'print solution<br/></span>  Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Solution:\"</span><br/>  <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> 9<br/>    <span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> 9<br/>      Debug.<span class=\"kw4\">Print</span> Format$(gridSolved(i, j)); <span class=\"st0\">\" \"</span>;<br/>    <span class=\"kw3\">Next</span> j<br/>    Debug.<span class=\"kw4\">Print</span><br/>  <span class=\"kw3\">Next</span> i<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span></pre>"}, {"lang": "VBScript", "loc": 102, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw4\">Dim</span> grid(9, 9)<br/><span class=\"kw4\">Dim</span> gridSolved(9, 9)<br/>\u00a0<br/><span class=\"kw2\">Public</span> <span class=\"kw2\">Sub</span> Solve(i, j)<br/>    <span class=\"kw3\">If</span> i &gt; 9 <span class=\"kw3\">Then</span><br/>        <span class=\"co1\">'exit with gridSolved = Grid<br/></span>        <span class=\"kw3\">For</span> r = 1 <span class=\"kw3\">To</span> 9<br/>\t    <span class=\"kw3\">For</span> c = 1 <span class=\"kw3\">To</span> 9<br/>\t        gridSolved(r, c) = grid(r, c)<br/>\t    <span class=\"kw3\">Next</span> <span class=\"co1\">'c <br/></span>        <span class=\"kw3\">Next</span> <span class=\"co1\">'r<br/></span>        <span class=\"kw2\">Exit</span> <span class=\"kw2\">Sub</span><br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">For</span> n = 1 <span class=\"kw3\">To</span> 9<br/>        <span class=\"kw3\">If</span> isSafe(i, j, n) <span class=\"kw3\">Then</span><br/>          nTmp = grid(i, j)<br/>          grid(i, j) = n<br/>          <span class=\"kw3\">If</span> j = 9 <span class=\"kw3\">Then</span><br/>                Solve i + 1, 1<br/>          <span class=\"kw3\">Else</span><br/>                Solve i, j + 1<br/>          <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>          grid(i, j) = nTmp<br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Next</span> <span class=\"co1\">'n<br/></span><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span> <span class=\"co1\">'Solve<br/></span> <br/><span class=\"kw2\">Public</span> <span class=\"kw2\">Function</span> isSafe(i, j, n) <br/>    <span class=\"kw3\">If</span> grid(i, j) &lt;&gt; 0 <span class=\"kw3\">Then</span><br/>        isSafe = (grid(i, j) = n)<br/>        <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"co1\">'grid(i,j) is an empty cell. Check if n is OK<br/></span>    <span class=\"co1\">'first check the row i<br/></span>    <span class=\"kw3\">For</span> c = 1 <span class=\"kw3\">To</span> 9<br/>        <span class=\"kw3\">If</span> grid(i, c) = n <span class=\"kw3\">Then</span><br/>            isSafe = <span class=\"kw5\">False</span><br/>            <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Next</span> <span class=\"co1\">'c<br/></span>    <span class=\"co1\">'now check the column j<br/></span>    <span class=\"kw3\">For</span> r = 1 <span class=\"kw3\">To</span> 9<br/>        <span class=\"kw3\">If</span> grid(r, j) = n <span class=\"kw3\">Then</span><br/>            isSafe = <span class=\"kw5\">False</span><br/>            <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Next</span> <span class=\"co1\">'r<br/></span>    <span class=\"co1\">'finally, check the 3x3 subsquare containing grid(i,j)<br/></span>    iMin = 1 + 3 * Int((i - 1) / 3)<br/>    jMin = 1 + 3 * Int((j - 1) / 3)<br/>    <span class=\"kw3\">For</span> r = iMin <span class=\"kw3\">To</span> iMin + 2<br/>        <span class=\"kw3\">For</span> c = jMin <span class=\"kw3\">To</span> jMin + 2<br/>            <span class=\"kw3\">If</span> grid(r, c) = n <span class=\"kw3\">Then</span><br/>                isSafe = <span class=\"kw5\">False</span><br/>                <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>            <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>        <span class=\"kw3\">Next</span> <span class=\"co1\">'c<br/></span>    <span class=\"kw3\">Next</span> <span class=\"co1\">'r<br/></span>    <span class=\"co1\">'all tests were OK<br/></span>    isSafe = <span class=\"kw5\">True</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span> <span class=\"co1\">'isSafe<br/></span> <br/><span class=\"kw2\">Public</span> <span class=\"kw2\">Sub</span> Sudoku()<br/>    <span class=\"co1\">'main routine<br/></span>   <span class=\"kw4\">Dim</span> s(9) <br/>    s(1) = <span class=\"st0\">\"001005070\"</span><br/>    s(2) = <span class=\"st0\">\"920600000\"</span><br/>    s(3) = <span class=\"st0\">\"008000600\"</span><br/>    s(4) = <span class=\"st0\">\"090020401\"</span><br/>    s(5) = <span class=\"st0\">\"000000000\"</span><br/>    s(6) = <span class=\"st0\">\"304080090\"</span><br/>    s(7) = <span class=\"st0\">\"007000300\"</span><br/>    s(8) = <span class=\"st0\">\"000007069\"</span><br/>    s(9) = <span class=\"st0\">\"010800700\"</span><br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> 9<br/>        <span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> 9<br/>            grid(i, j) = Int(Mid(s(i), j, 1))<br/>        <span class=\"kw3\">Next</span> <span class=\"co1\">'j<br/></span>    <span class=\"kw3\">Next</span> <span class=\"co1\">'j<br/></span>    <span class=\"co1\">'print problem<br/></span>    Wscript.echo <span class=\"st0\">\"Problem:\"</span><br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> 9<br/>\t    c=<span class=\"st0\">\"\"</span><br/>        <span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> 9<br/>            c=c &amp; grid(i, j) &amp; <span class=\"st0\">\" \"</span><br/>        <span class=\"kw3\">Next</span> <span class=\"co1\">'j<br/></span>\t    Wscript.echo c<br/>    <span class=\"kw3\">Next</span> <span class=\"co1\">'i<br/></span>    <span class=\"co1\">'solve it!<br/></span>    Solve 1, 1<br/>    <span class=\"co1\">'print solution<br/></span>    Wscript.echo <span class=\"st0\">\"Solution:\"</span><br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> 9<br/>\t    c=<span class=\"st0\">\"\"</span><br/>        <span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> 9<br/>            c=c &amp; gridSolved(i, j) &amp; <span class=\"st0\">\" \"</span><br/>        <span class=\"kw3\">Next</span> <span class=\"co1\">'j<br/></span>\t    Wscript.echo c<br/>    <span class=\"kw3\">Next</span> <span class=\"co1\">'i<br/></span><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span> <span class=\"co1\">'Sudoku<br/></span><br/><span class=\"kw2\">Call</span> sudoku</pre>"}, {"lang": "XPL0", "loc": 71, "block": "<pre class=\"text highlighted_source\">code    ChOut=8, CrLf=9, IntOut=11, Text=12;<br/>\u00a0<br/>proc    Show(X);<br/>char    X;<br/>int     I, J;<br/>[for I:= 0 to 8 do<br/>        [if rem(I/3) = 0 then CrLf(0);<br/>        for J:= 0 to 8 do<br/>                [if rem(J/3) = 0 then ChOut(0, ^ );<br/>                ChOut(0, ^ );  IntOut(0, X(0));<br/>                X:= X+1;<br/>                ];<br/>        CrLf(0);<br/>        ];<br/>];<br/>\u00a0<br/>func    TryCell(X, Pos);<br/>char    X;<br/>int     Pos;<br/>int     Row, Col, I, J, Used;<br/>[Row:= Pos/9;<br/>Col:= rem(0);<br/>Used:= 0;<br/>\u00a0<br/>if Pos = 81 then return true;<br/>if X(Pos) then return TryCell(X, Pos+1);<br/>\u00a0<br/>for I:= 0 to 8 do Used:= Used\u00a0! 1 &lt;&lt; (X(I*9+Col)-1);<br/>for J:= 0 to 8 do Used:= Used\u00a0! 1 &lt;&lt; (X(Row*9+J)-1);<br/>\u00a0<br/>Row:= Row/3*3;<br/>Col:= Col/3*3;<br/>for I:= Row to Row+2 do<br/>        for J:= Col to Col+2 do<br/>                Used:= Used\u00a0! 1 &lt;&lt; (X(I*9+J)-1);<br/>\u00a0<br/>for I:= 1 to 9 do<br/>        [X(Pos):= I;<br/>        if (Used&amp;1)=0 &amp; TryCell(X, Pos+1) then return true;<br/>        Used:= Used&gt;&gt;1;<br/>        ];<br/>X(Pos):= 0;<br/>return false;<br/>];<br/>\u00a0<br/>proc    Solve(S);<br/>char    S;<br/>int     I, J, C;<br/>char    X(81);<br/>[J:= 0;<br/>for I:= 0 to 80 do<br/>        [repeat C:= S(J);<br/>                J:= J+1;<br/>        until   C&gt;=^1 &amp; C&lt;=^9\u00a0! C=^.;<br/>        X(I):= if C=^. then 0 else C-^0;<br/>        ];<br/>\u00a0<br/>if TryCell(X, 0) then Show(X)<br/>else Text(0, \"No solution\");<br/>];<br/>\u00a0<br/>[Solve(\"394 ..2 67.<br/>        ... 3.. 4..<br/>        5.. 69. .2.<br/>        .45 ... 9..<br/>        6.. ... ..7<br/>        ..7 ... 58.<br/>        .1. .67 ..8<br/>        ..9 ..8 ...<br/>        .26 4.. 735 \");<br/>]</pre>"}, {"lang": "zkl", "loc": 22, "block": "<pre class=\"text highlighted_source\">fcn trycell(sdku,pos=0){<br/>   row,col:=pos/9, pos%9;<br/>\u00a0<br/>   if(pos==81)   return(True);<br/>   if(sdku[pos]) return(trycell(sdku, pos + 1));<br/>\u00a0<br/>   used:=0;<br/>   foreach r in (9){ used=used.bitOr((1).shiftLeft(sdku[r*9 + col] - 1)) }<br/>   foreach c in (9){ used=used.bitOr((1).shiftLeft(sdku[row*9 + c] - 1)) }<br/>\u00a0<br/>   row,col = row/3*3, col/3*3;<br/>   foreach r,c in ([row..row+2], [col..col+2])<br/>      { used=used.bitOr((1).shiftLeft(sdku[r*9 + c] - 1)) }<br/>\u00a0<br/>   sdku[pos]=1; while(sdku[pos]&lt;=9){<br/>      if(used.isEven and trycell(sdku, pos + 1)) return(True);<br/>      sdku[pos]+=1; used/=2;<br/>   }<br/>\u00a0<br/>   sdku[pos]=0;<br/>   return(False);<br/>}</pre>"}]}