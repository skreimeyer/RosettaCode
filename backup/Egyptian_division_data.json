{"task": "Egyptian_division", "blocks": [{"lang": "Ada", "loc": 32, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Egyptian_Division <span class=\"kw1\">is</span><br/>\u00a0<br/>  <span class=\"kw3\">procedure</span> Divide  <span class=\"br0\">(</span>a\u00a0: Natural; b\u00a0: Positive; q, r\u00a0: <span class=\"kw3\">out</span> Natural<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>    doublings\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Natural;  <span class=\"co1\">-- The natural type holds values &lt; 2^32 so no need going beyond</span><br/>    m, sum, last_index_touched\u00a0: Natural\u00a0:= <span class=\"nu0\">0</span>;    <br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw3\">in</span> doublings'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      m\u00a0:= b * <span class=\"nu0\">2</span>**i; <br/>      <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> m &gt; a\u00a0;<br/>      doublings <span class=\"br0\">(</span>i<span class=\"br0\">)</span>\u00a0:= m;<br/>      last_index_touched\u00a0:= i;<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>    q\u00a0:= <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">for</span> i <span class=\"kw3\">in</span> <span class=\"kw3\">reverse</span> doublings'First .. <span class=\"me1\">last_index_touched</span> <span class=\"kw1\">loop</span><br/>        m\u00a0:= sum + doublings <span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">if</span> m &lt;= a <span class=\"kw1\">then</span> <br/>          sum\u00a0:= m; <br/>          q\u00a0:= q + <span class=\"nu0\">2</span>**i;<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>    r\u00a0:= a -sum;<br/>  <span class=\"kw1\">end</span> Divide;<br/>\u00a0<br/>  q, r\u00a0: Natural;<br/><span class=\"kw1\">begin</span><br/>  Divide <span class=\"br0\">(</span><span class=\"nu0\">580</span>,<span class=\"nu0\">34</span>, q, r<span class=\"br0\">)</span>;<br/>  Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">put_line</span> <span class=\"br0\">(</span><span class=\"st0\">\"Quotient=\"</span>&amp;q'Img &amp; <span class=\"st0\">\" Remainder=\"</span>&amp;r'img<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Egyptian_Division;<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 38, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw2\">BEGIN</span><br/>    <span class=\"coMULTI\"># performs Egyptian division of dividend by divisor, setting quotient and remainder #</span><br/>    <span class=\"coMULTI\"># this uses 32 bit numbers, so a table of 32 powers of 2 should be sufficient       #</span><br/>    <span class=\"coMULTI\"># ( divisors &gt; 2^30 will probably overflow - this is not checked here )             #</span><br/>    <span class=\"kw4\">PROC</span> egyptian division <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> dividend<span class=\"sy1\">,</span> divisor<span class=\"sy1\">,</span> <span class=\"kw4\">REF</span> <span class=\"kw3\">INT</span> quotient<span class=\"sy1\">,</span> remainder <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>         <span class=\"kw2\">BEGIN</span><br/>            <span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> 32 <span class=\"br0\">]</span><span class=\"kw3\">INT</span> powers of 2<span class=\"sy1\">,</span> doublings<span class=\"sy1\">;</span><br/>            <span class=\"coMULTI\"># initialise the powers of 2 and doublings tables #</span><br/>            powers of 2<span class=\"br0\">[</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>            doublings  <span class=\"br0\">[</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> divisor<span class=\"sy1\">;</span><br/>            <span class=\"kw3\">INT</span>   table pos  <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>            <span class=\"kw2\">WHILE</span> table pos <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>                  powers of 2<span class=\"br0\">[</span> table pos <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> powers of 2<span class=\"br0\">[</span> table pos <span class=\"sy1\">-</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">*</span> 2<span class=\"sy1\">;</span><br/>                  doublings  <span class=\"br0\">[</span> table pos <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> doublings  <span class=\"br0\">[</span> table pos <span class=\"sy1\">-</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">*</span> 2<span class=\"sy1\">;</span><br/>                  doublings<span class=\"br0\">[</span> table pos <span class=\"br0\">]</span> <span class=\"sy1\">&lt;=</span> dividend<br/>            <span class=\"kw2\">DO</span><br/>                <span class=\"kw7\">SKIP</span><br/>            <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>            <span class=\"coMULTI\"># construct the accumulator and answer #</span><br/>            <span class=\"kw3\">INT</span> accumulator <span class=\"sy1\">:=</span> 0<span class=\"sy1\">,</span> answer <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>            <span class=\"kw2\">WHILE</span> table pos <span class=\"sy1\">&gt;=</span>1<br/>            <span class=\"kw2\">DO</span><br/>                <span class=\"kw2\">IF</span> <span class=\"br0\">(</span> accumulator <span class=\"sy1\">+</span> doublings<span class=\"br0\">[</span> table pos <span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;=</span> dividend<br/>                <span class=\"kw2\">THEN</span><br/>                    accumulator <span class=\"sy1\">+:=</span> doublings  <span class=\"br0\">[</span> table pos <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                    answer      <span class=\"sy1\">+:=</span> powers of 2<span class=\"br0\">[</span> table pos <span class=\"br0\">]</span> <br/>                <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                table pos <span class=\"sy1\">-:=</span> 1<br/>            <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>            quotient  <span class=\"sy1\">:=</span> answer<span class=\"sy1\">;</span><br/>            remainder <span class=\"sy1\">:=</span> <span class=\"kw8\">ABS</span> <span class=\"br0\">(</span> accumulator <span class=\"sy1\">-</span> dividend <span class=\"br0\">)</span><br/>        <span class=\"kw2\">END</span> <span class=\"coMULTI\"># egyptian division #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># task test case #</span><br/>    <span class=\"kw3\">INT</span> quotient<span class=\"sy1\">,</span> remainder<span class=\"sy1\">;</span><br/>    egyptian division<span class=\"br0\">(</span> 580<span class=\"sy1\">,</span> 34<span class=\"sy1\">,</span> quotient<span class=\"sy1\">,</span> remainder <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"580 divided by 34 is: \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> quotient<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" remainder: \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> remainder<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">END</span></pre>"}, {"lang": "AppleScript", "loc": 95, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- EGYPTIAN DIVISION ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- egyptianQuotRem\u00a0:: Int -&gt; Int -&gt; (Int, Int)</span><br/><span class=\"kw3\">on</span> egyptianQuotRem<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> doubledRows<br/>        <span class=\"kw3\">script</span> double<br/>            <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                x <span class=\"sy0\">+</span> x<br/>            <span class=\"kw3\">end</span> |\u03bb|<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>ix<span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> <span class=\"kw1\">item</span> <span class=\"nu0\">2</span> <span class=\"kw3\">of</span> ix &gt; m <span class=\"kw3\">then</span><br/>                <span class=\"br0\">{</span>nothing:<span class=\"kw1\">true</span><span class=\"br0\">}</span><br/>            <span class=\"kw3\">else</span><br/>                <span class=\"br0\">{</span>just:ix, <span class=\"kw1\">new</span>:map<span class=\"br0\">(</span>double, ix<span class=\"br0\">)</span>, nothing:<span class=\"kw1\">false</span><span class=\"br0\">}</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">set</span> rows <span class=\"kw3\">to</span> unfoldr<span class=\"br0\">(</span>doubledRows, <span class=\"br0\">[</span><span class=\"nu0\">1</span>, n<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> quotientSum<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>ix, qr<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> <span class=\"br0\">{</span>i, x<span class=\"br0\">}</span> <span class=\"kw3\">to</span> ix<br/>            <span class=\"kw3\">set</span> <span class=\"br0\">{</span>q, r<span class=\"br0\">}</span> <span class=\"kw3\">to</span> qr<br/>\u00a0<br/>            <span class=\"kw3\">if</span> x <span class=\"sy0\">&lt;</span> r <span class=\"kw3\">then</span><br/>                <span class=\"br0\">{</span>q <span class=\"sy0\">+</span> i, r <span class=\"sy0\">-</span> x<span class=\"br0\">}</span><br/>            <span class=\"kw3\">else</span><br/>                <span class=\"br0\">{</span>q, r<span class=\"br0\">}</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldr<span class=\"br0\">(</span>quotientSum, <span class=\"br0\">{</span><span class=\"nu0\">0</span>, m<span class=\"br0\">}</span>, rows<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> egyptianQuotRem<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    egyptianQuotRem<span class=\"br0\">(</span><span class=\"nu0\">580</span>, <span class=\"nu0\">34</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; {17, 2}</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/><span class=\"co1\">-- foldr\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldr<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> lng <span class=\"kw3\">to</span> <span class=\"nu0\">1</span> <span class=\"kw1\">by</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, v, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldr<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- unfoldr\u00a0:: (b -&gt; Maybe (a, b)) -&gt; b -&gt; [a]</span><br/><span class=\"kw3\">on</span> unfoldr<span class=\"br0\">(</span>f, v<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> mf <span class=\"kw3\">to</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> recM <span class=\"kw3\">to</span> <span class=\"br0\">{</span>nothing:<span class=\"kw1\">false</span>, <span class=\"kw1\">new</span>:v<span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">not</span> <span class=\"br0\">(</span>nothing <span class=\"kw3\">of</span> recM<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> recM <span class=\"kw3\">to</span> mf<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw3\">of</span> recM<span class=\"br0\">)</span><br/>        <span class=\"kw3\">if</span> <span class=\"kw2\">not</span> nothing <span class=\"kw3\">of</span> recM <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> just <span class=\"kw3\">of</span> recM<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    lst<br/><span class=\"kw3\">end</span> unfoldr</pre>"}, {"lang": "C", "loc": 50, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;stdint.h&gt;</span><br/><span class=\"co2\">#include &lt;assert.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">uint64_t</span> egyptian_division<span class=\"br0\">(</span><span class=\"kw4\">uint64_t</span> dividend<span class=\"sy0\">,</span> <span class=\"kw4\">uint64_t</span> divisor<span class=\"sy0\">,</span> <span class=\"kw4\">uint64_t</span> <span class=\"sy0\">*</span>remainder<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\">// remainder is an out parameter, pass NULL if you do not need the remainder</span><br/>\u00a0<br/>\t<span class=\"kw4\">static</span> <span class=\"kw4\">uint64_t</span> powers<span class=\"br0\">[</span><span class=\"nu0\">64</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">static</span> <span class=\"kw4\">uint64_t</span> doublings<span class=\"br0\">[</span><span class=\"nu0\">64</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">64</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tpowers<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> i<span class=\"sy0\">;</span><br/>\t\tdoublings<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> divisor <span class=\"sy0\">&lt;&lt;</span> i<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>doublings<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> dividend<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">uint64_t</span> answer <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">uint64_t</span> accumulator <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"co1\">// If the current value of the accumulator added to the</span><br/>\t\t<span class=\"co1\">// doublings cell would be less than or equal to the</span><br/>\t\t<span class=\"co1\">// dividend then add it to the accumulator</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>accumulator <span class=\"sy0\">+</span> doublings<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> dividend<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\taccumulator <span class=\"sy0\">+=</span> doublings<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tanswer <span class=\"sy0\">+=</span> powers<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>remainder<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">*</span>remainder <span class=\"sy0\">=</span> dividend <span class=\"sy0\">-</span> accumulator<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> answer<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> go<span class=\"br0\">(</span><span class=\"kw4\">uint64_t</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">uint64_t</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">uint64_t</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">;</span><br/>\tx <span class=\"sy0\">=</span> egyptian_division<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%llu /\u00a0%llu =\u00a0%llu remainder\u00a0%llu<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span>a <span class=\"sy0\">==</span> b <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tgo<span class=\"br0\">(</span><span class=\"nu0\">580</span><span class=\"sy0\">,</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 155, "block": "<pre class=\"c highlighted_source\">\u00a0<br/>using System<span class=\"sy0\">;</span><br/>using System.<span class=\"me1\">Collections</span><span class=\"sy0\">;</span><br/>\u00a0<br/>namespace Egyptian_division<br/><span class=\"br0\">{</span><br/>\tclass Program<br/>\t<span class=\"br0\">{</span><br/>\t\tpublic <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span>string<span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tConsole.<span class=\"me1\">Clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\" Egyptian division \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\" Enter value of dividend\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw4\">int</span> dividend <span class=\"sy0\">=</span> <span class=\"kw4\">int</span>.<span class=\"me1\">Parse</span><span class=\"br0\">(</span>Console.<span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\tConsole.<span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\" Enter value of divisor\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw4\">int</span> divisor <span class=\"sy0\">=</span> <span class=\"kw4\">int</span>.<span class=\"me1\">Parse</span><span class=\"br0\">(</span>Console.<span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\tDivide<span class=\"br0\">(</span>dividend<span class=\"sy0\">,</span> divisor<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"Press any key to continue . . . \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw4\">static</span> <span class=\"kw4\">void</span> Divide<span class=\"br0\">(</span><span class=\"kw4\">int</span> dividend<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> divisor<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"co1\">//</span><br/>\t\t\t<span class=\"co1\">// Local variable declaration and initialization</span><br/>\t\t\t<span class=\"co1\">//</span><br/>\t\t\t<span class=\"kw4\">int</span> result   <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw4\">int</span> reminder <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw4\">int</span> powers_of_two <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw4\">int</span> doublings \t  <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw4\">int</span> answer \t<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw4\">int</span> accumulator <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw4\">int</span> two <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw4\">int</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw4\">int</span> row <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"co1\">//</span><br/>\t\t\t<span class=\"co1\">// Tables declaration</span><br/>\t\t\t<span class=\"co1\">//</span><br/>\t\t\tArrayList table_powers_of_two <span class=\"sy0\">=</span> new ArrayList<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tArrayList table_doublings     <span class=\"sy0\">=</span> new ArrayList<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"co1\">//</span><br/>\t\t\t<span class=\"co1\">// Fill and Show table values</span><br/>\t\t\t<span class=\"co1\">//</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"                           \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\" powers_of_2     doublings \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"                           \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"co1\">// Set initial values</span><br/>\t\t\tpowers_of_two <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\tdoublings <span class=\"sy0\">=</span> divisor<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> doublings <span class=\"sy0\">&lt;=</span> dividend <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"co1\">// Set table value</span><br/>\t\t\t\ttable_powers_of_two.<span class=\"me1\">Add</span><span class=\"br0\">(</span> powers_of_two <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\ttable_doublings.<span class=\"me1\">Add</span><span class=\"br0\">(</span> doublings <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t<span class=\"co1\">// Show new table row</span><br/>\t\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0,8}{1,16}\"</span><span class=\"sy0\">,</span>powers_of_two<span class=\"sy0\">,</span> doublings<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a><span class=\"sy0\">++;</span><br/>\u00a0<br/>\t\t\t\tpowers_of_two <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>Math.<span class=\"me1\">Pow</span><span class=\"br0\">(</span> two<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tdoublings <span class=\"sy0\">=</span> powers_of_two <span class=\"sy0\">*</span> divisor<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"                           \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"co1\">//</span><br/>\t\t\t<span class=\"co1\">// Calculate division and Show table values</span><br/>\t\t\t<span class=\"co1\">//</span><br/>\t\t\trow <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"                                                 \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\" powers_of_2     doublings   answer   accumulator\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"                                                 \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">SetCursorPosition</span><span class=\"br0\">(</span>Console.<span class=\"me1\">CursorLeft</span><span class=\"sy0\">,</span> Console.<span class=\"me1\">CursorTop</span> <span class=\"sy0\">+</span> row<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\tpow<span class=\"sy0\">--;</span><br/>\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> accumulator <span class=\"sy0\">&lt;</span> dividend <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"co1\">// Get values from tables</span><br/>\t\t\t\tdoublings <span class=\"sy0\">=</span> <span class=\"kw4\">int</span>.<span class=\"me1\">Parse</span><span class=\"br0\">(</span>table_doublings<span class=\"br0\">[</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a><span class=\"br0\">]</span>.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tpowers_of_two <span class=\"sy0\">=</span> <span class=\"kw4\">int</span>.<span class=\"me1\">Parse</span><span class=\"br0\">(</span>table_powers_of_two<span class=\"br0\">[</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a><span class=\"br0\">]</span>.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>accumulator <span class=\"sy0\">+</span> <span class=\"kw4\">int</span>.<span class=\"me1\">Parse</span><span class=\"br0\">(</span>table_doublings<span class=\"br0\">[</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a><span class=\"br0\">]</span>.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> dividend <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"co1\">// Set new values</span><br/>\t\t\t\t\taccumulator <span class=\"sy0\">+=</span> doublings<span class=\"sy0\">;</span><br/>\t\t\t\t\tanswer <span class=\"sy0\">+=</span> powers_of_two<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t\t<span class=\"co1\">// Show accumulated row values in different collor</span><br/>\t\t\t\t\tConsole.<span class=\"me1\">ForegroundColor</span> <span class=\"sy0\">=</span> ConsoleColor.<span class=\"me1\">Green</span><span class=\"sy0\">;</span><br/>\t\t\t\t\tConsole.<span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"{0,8}{1,16}\"</span><span class=\"sy0\">,</span>powers_of_two<span class=\"sy0\">,</span> doublings<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\tConsole.<span class=\"me1\">ForegroundColor</span> <span class=\"sy0\">=</span> ConsoleColor.<span class=\"me1\">Green</span><span class=\"sy0\">;</span><br/>\t\t\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0,10}{1,12}\"</span><span class=\"sy0\">,</span> answer<span class=\"sy0\">,</span> accumulator<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\tConsole.<span class=\"me1\">SetCursorPosition</span><span class=\"br0\">(</span>Console.<span class=\"me1\">CursorLeft</span><span class=\"sy0\">,</span> Console.<span class=\"me1\">CursorTop</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"co1\">// Show not accumulated row walues</span><br/>\t\t\t\t\tConsole.<span class=\"me1\">ForegroundColor</span> <span class=\"sy0\">=</span> ConsoleColor.<span class=\"me1\">DarkGray</span><span class=\"sy0\">;</span><br/>\t\t\t\t\tConsole.<span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"{0,8}{1,16}\"</span><span class=\"sy0\">,</span>powers_of_two<span class=\"sy0\">,</span> doublings<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\tConsole.<span class=\"me1\">ForegroundColor</span> <span class=\"sy0\">=</span> ConsoleColor.<span class=\"me1\">Gray</span><span class=\"sy0\">;</span><br/>\t\t\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0,10}{1,12}\"</span><span class=\"sy0\">,</span> answer<span class=\"sy0\">,</span> accumulator<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\tConsole.<span class=\"me1\">SetCursorPosition</span><span class=\"br0\">(</span>Console.<span class=\"me1\">CursorLeft</span><span class=\"sy0\">,</span> Console.<span class=\"me1\">CursorTop</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>\t\t\t\tpow<span class=\"sy0\">--;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">SetCursorPosition</span><span class=\"br0\">(</span>Console.<span class=\"me1\">CursorLeft</span><span class=\"sy0\">,</span> Console.<span class=\"me1\">CursorTop</span> <span class=\"sy0\">+</span> row <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">ResetColor</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"co1\">// Set result and reminder</span><br/>\t\t\tresult <span class=\"sy0\">=</span> answer<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> accumulator <span class=\"sy0\">&lt;</span> dividend <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\treminder <span class=\"sy0\">=</span> dividend <span class=\"sy0\">-</span> accumulator<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\" So \"</span> <span class=\"sy0\">+</span> dividend <span class=\"sy0\">+</span><br/>\t\t\t\t                  <span class=\"st0\">\" divided by \"</span> <span class=\"sy0\">+</span> divisor <span class=\"sy0\">+</span><br/>\t\t\t\t                  <span class=\"st0\">\" using the Egyptian method is <span class=\"es1\">\\n</span> \"</span> <span class=\"sy0\">+</span> result <span class=\"sy0\">+</span><br/>\t\t\t\t                  <span class=\"st0\">\" remainder (\"</span> <span class=\"sy0\">+</span> dividend <span class=\"sy0\">+</span> <span class=\"st0\">\" - \"</span> <span class=\"sy0\">+</span> accumulator <span class=\"sy0\">+</span><br/>\t\t\t\t                  <span class=\"st0\">\") or \"</span> <span class=\"sy0\">+</span> reminder<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\treminder <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\" So \"</span> <span class=\"sy0\">+</span> dividend <span class=\"sy0\">+</span><br/>\t\t\t\t                  <span class=\"st0\">\" divided by \"</span> <span class=\"sy0\">+</span> divisor <span class=\"sy0\">+</span><br/>\t\t\t\t                  <span class=\"st0\">\" using the Egyptian method is <span class=\"es1\">\\n</span> \"</span> <span class=\"sy0\">+</span> result <span class=\"sy0\">+</span><br/>\t\t\t\t                  <span class=\"st0\">\" remainder \"</span> <span class=\"sy0\">+</span> reminder<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 60, "block": "<pre class=\"d highlighted_source\">\u00a0<br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">version</span><span class=\"br0\">(</span><span class=\"kw4\">unittest</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// empty</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">import</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            stderr.<span class=\"me1\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">\"Usage: \"</span><span class=\"sy0\">,</span> args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\" dividend divisor\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">ulong</span> dividend <span class=\"sy0\">=</span> to<span class=\"sy0\">!</span><span class=\"kw4\">ulong</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">ulong</span> divisor <span class=\"sy0\">=</span> to<span class=\"sy0\">!</span><span class=\"kw4\">ulong</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">ulong</span> remainder<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">auto</span> ans <span class=\"sy0\">=</span> egyptian_division<span class=\"br0\">(</span>dividend<span class=\"sy0\">,</span> divisor<span class=\"sy0\">,</span> remainder<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        writeln<span class=\"br0\">(</span>dividend<span class=\"sy0\">,</span> <span class=\"st0\">\" / \"</span><span class=\"sy0\">,</span> divisor<span class=\"sy0\">,</span> <span class=\"st0\">\" = \"</span><span class=\"sy0\">,</span> ans<span class=\"sy0\">,</span> <span class=\"st0\">\" rem \"</span><span class=\"sy0\">,</span> remainder<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">ulong</span> egyptian_division<span class=\"br0\">(</span><span class=\"kw4\">ulong</span> dividend<span class=\"sy0\">,</span> <span class=\"kw4\">ulong</span> divisor<span class=\"sy0\">,</span> <span class=\"kw2\">out</span> <span class=\"kw4\">ulong</span> remainder<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> SIZE <span class=\"sy0\">=</span> <span class=\"nu0\">64</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">ulong</span><span class=\"br0\">[</span>SIZE<span class=\"br0\">]</span> powers<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">ulong</span><span class=\"br0\">[</span>SIZE<span class=\"br0\">]</span> doublings<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>SIZE<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        powers<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> i<span class=\"sy0\">;</span><br/>        doublings<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> divisor <span class=\"sy0\">&lt;&lt;</span> i<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>doublings<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> dividend<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">ulong</span> answer<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">ulong</span> accumulator<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i<span class=\"sy0\">=</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&gt;=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"sy0\">--</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>accumulator <span class=\"sy0\">+</span> doublings<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> dividend<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            accumulator <span class=\"sy0\">+=</span> doublings<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            answer <span class=\"sy0\">+=</span> powers<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    remainder <span class=\"sy0\">=</span> dividend <span class=\"sy0\">-</span> accumulator<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> answer<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">unittest</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">ulong</span> remainder<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>egyptian_division<span class=\"br0\">(</span>580UL<span class=\"sy0\">,</span> 34UL<span class=\"sy0\">,</span> remainder<span class=\"br0\">)</span> <span class=\"sy0\">==</span> 17UL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>remainder <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 5, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"co1\">// A function to perform Egyptian Division: Nigel Galloway August 11th., 2017</span><br/><span class=\"kw1\">let</span> egyptianDivision N G <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> fn n g <span class=\"sy0\">=</span> <span class=\"kw4\">seq</span><span class=\"br0\">{</span><span class=\"kw1\">yield</span> <span class=\"br0\">(</span>n,g<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">yield!</span> fn <span class=\"br0\">(</span>n<span class=\"sy0\">+</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span>g<span class=\"sy0\">+</span>g<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">foldBack</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>n,i<span class=\"br0\">)</span> <span class=\"br0\">(</span>g,e<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>i<span class=\"sy0\">&lt;=</span>g<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>g<span class=\"sy0\">-</span>i<span class=\"br0\">)</span>,<span class=\"br0\">(</span>e<span class=\"sy0\">+</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"br0\">(</span>g,e<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>fn <span class=\"nu0\">1</span> G <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">takeWhile</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>_,g<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>g<span class=\"sy0\">&lt;=</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>N,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 39, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 09-08-2017</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Data</span> <span class=\"nu0\">580</span>, <span class=\"nu0\">34</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> dividend, divisor, answer, accumulator, i<br/><span class=\"kw1\">ReDim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> table<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">32</span>, <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Read</span> dividend, divisor<br/>\u00a0<br/>i = <span class=\"nu0\">1</span><br/>table<span class=\"br0\">(</span>i, <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span>\u00a0: table<span class=\"br0\">(</span>i, <span class=\"nu0\">2</span><span class=\"br0\">)</span> = divisor<br/>\u00a0<br/><span class=\"kw1\">While</span> table<span class=\"br0\">(</span>i, <span class=\"nu0\">2</span><span class=\"br0\">)</span> &lt; dividend<br/>    i += <span class=\"nu0\">1</span><br/>    table<span class=\"br0\">(</span>i, <span class=\"nu0\">1</span><span class=\"br0\">)</span> = table<span class=\"br0\">(</span>i -<span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> * <span class=\"nu0\">2</span><br/>    table<span class=\"br0\">(</span>i, <span class=\"nu0\">2</span><span class=\"br0\">)</span> = table<span class=\"br0\">(</span>i -<span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> * <span class=\"nu0\">2</span><br/><span class=\"kw1\">Wend</span><br/>\u00a0<br/>i -= <span class=\"nu0\">1</span><br/>answer = table<span class=\"br0\">(</span>i, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>accumulator = table<span class=\"br0\">(</span>i, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">While</span> i &gt; <span class=\"nu0\">1</span><br/>    i -= <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> table<span class=\"br0\">(</span>i,<span class=\"nu0\">2</span><span class=\"br0\">)</span>+ accumulator &lt;= dividend <span class=\"kw1\">Then</span><br/>        answer += table<span class=\"br0\">(</span>i, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        accumulator += table<span class=\"br0\">(</span>i, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Wend</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>dividend<span class=\"br0\">)</span>; <span class=\"st0\">\" divided by \"</span>; <span class=\"kw1\">Str</span><span class=\"br0\">(</span>divisor<span class=\"br0\">)</span>; <span class=\"st0\">\" using Egytian division\"</span>;<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\" returns \"</span>; <span class=\"kw1\">Str</span><span class=\"br0\">(</span>answer<span class=\"br0\">)</span>; <span class=\"st0\">\" mod(ulus) \"</span>; <span class=\"kw1\">Str</span><span class=\"br0\">(</span>dividend-accumulator<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 43, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> egyptianDivide<span class=\"sy1\">(</span>dividend<span class=\"sy1\">,</span> divisor <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>quotient<span class=\"sy1\">,</span> remainder <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> dividend &lt; <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> divisor &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw3\">panic</span><span class=\"sy1\">(</span><span class=\"st0\">\"Invalid argument(s)\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> dividend &lt; divisor <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> dividend<br/>    <span class=\"sy1\">}</span><br/>    powersOfTwo <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">}</span><br/>    doublings <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span>divisor<span class=\"sy1\">}</span><br/>    doubling <span class=\"sy2\">:=</span> divisor<br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>        doubling <span class=\"sy2\">*=</span> <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">if</span> doubling &gt; dividend <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>        l <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>powersOfTwo<span class=\"sy1\">)</span><br/>        powersOfTwo <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>powersOfTwo<span class=\"sy1\">,</span> powersOfTwo<span class=\"sy1\">[</span>l<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><span class=\"sy3\">*</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>        doublings <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>doublings<span class=\"sy1\">,</span> doubling<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    answer <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    accumulator <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>doublings<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> accumulator<span class=\"sy3\">+</span>doublings<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> &lt;<span class=\"sy2\">=</span> dividend <span class=\"sy1\">{</span><br/>            accumulator <span class=\"sy2\">+=</span> doublings<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>            answer <span class=\"sy2\">+=</span> powersOfTwo<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>            <span class=\"kw1\">if</span> accumulator <span class=\"sy3\">==</span> dividend <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> answer<span class=\"sy1\">,</span> dividend <span class=\"sy3\">-</span> accumulator<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    dividend <span class=\"sy2\">:=</span> <span class=\"nu0\">580</span><br/>    divisor <span class=\"sy2\">:=</span> <span class=\"nu0\">34</span><br/>    quotient<span class=\"sy1\">,</span> remainder <span class=\"sy2\">:=</span> egyptianDivide<span class=\"sy1\">(</span>dividend<span class=\"sy1\">,</span> divisor<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>dividend<span class=\"sy1\">,</span> <span class=\"st0\">\"divided by\"</span><span class=\"sy1\">,</span> divisor<span class=\"sy1\">,</span> <span class=\"st0\">\"is\"</span><span class=\"sy1\">,</span> quotient<span class=\"sy1\">,</span> <span class=\"st0\">\"with remainder\"</span><span class=\"sy1\">,</span> remainder<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 21, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>unfoldr<span class=\"br0\">)</span><br/>\u00a0<br/>egyptianQuotRem <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><br/>egyptianQuotRem m n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> rows <span class=\"sy0\">=</span><br/>        unfoldr<br/>          <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>              <span class=\"kw1\">if</span> x <span class=\"sy0\">&gt;</span> m<br/>                <span class=\"kw1\">then</span> Nothing<br/>                <span class=\"kw1\">else</span> Just <span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> i<span class=\"sy0\">,</span> x <span class=\"sy0\">+</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr\"><span class=\"kw3\">foldr</span></a><br/>       <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span>q<span class=\"sy0\">,</span> r<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>           <span class=\"kw1\">if</span> x <span class=\"sy0\">&lt;</span> r<br/>             <span class=\"kw1\">then</span> <span class=\"br0\">(</span>q <span class=\"sy0\">+</span> i<span class=\"sy0\">,</span> r <span class=\"sy0\">-</span> x<span class=\"br0\">)</span><br/>             <span class=\"kw1\">else</span> <span class=\"br0\">(</span>q<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> m<span class=\"br0\">)</span><br/>       rows<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> egyptianQuotRem <span class=\"nu0\">580</span> <span class=\"nu0\">34</span></pre>"}, {"lang": "J", "loc": 3, "block": "<pre class=\"j highlighted_source\">doublings=:<span class=\"nu0\">_1</span> }. <span class=\"sy0\">(</span>+:@]^:<span class=\"sy0\">(</span>&gt; {:<span class=\"sy0\">)</span>^:a: <span class=\"sy0\">(</span>,~ 1:<span class=\"sy0\">))</span><br/>ansacc=: <span class=\"nu0\">1</span> }. <span class=\"sy0\">(</span>] + [ * {<a class=\"__cf_email__\" data-cfemail=\"a38de3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[ &gt;: {:@:+<span class=\"sy0\">)</span>/@<span class=\"sy0\">(</span>[,.doublings<span class=\"sy0\">)</span><br/>egydiv=: <span class=\"sy0\">(</span><span class=\"nu0\">0</span>,[<span class=\"sy0\">)</span>+<span class=\"nu0\">1</span> <span class=\"nu0\">_1</span>*ansacc</pre>"}, {"lang": "Java", "loc": 54, "block": "<pre class=\"java highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.ArrayList</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> EgyptianDivision <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co3\">/**<br/>     * Runs the method and divides 580 by 34<br/>     *<br/>     * @param args not used<br/>     */</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        divide<span class=\"br0\">(</span><span class=\"nu0\">580</span>, <span class=\"nu0\">34</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co3\">/**<br/>     * Divides &lt;code&gt;dividend&lt;/code&gt; by &lt;code&gt;divisor&lt;/code&gt; using the Egyptian Division-Algorithm and prints the<br/>     * result to the console<br/>     *<br/>     * @param dividend<br/>     * @param divisor<br/>     */</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> divide<span class=\"br0\">(</span><span class=\"kw4\">int</span> dividend, <span class=\"kw4\">int</span> divisor<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> powersOf2 <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> doublings <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">//populate the powersof2- and doublings-columns</span><br/>        <span class=\"kw4\">int</span> line <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, line<span class=\"br0\">)</span> <span class=\"sy0\">*</span> divisor<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> dividend<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">//&lt;- could also be done with a for-loop</span><br/>            <span class=\"kw4\">int</span> powerOf2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            powersOf2.<span class=\"me1\">add</span><span class=\"br0\">(</span>powerOf2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            doublings.<span class=\"me1\">add</span><span class=\"br0\">(</span>powerOf2 <span class=\"sy0\">*</span> divisor<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            line<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> answer <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> accumulator <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">//Consider the rows in reverse order of their construction (from back to front of the List&lt;&gt;s)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> powersOf2.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>accumulator <span class=\"sy0\">+</span> doublings.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> dividend<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                accumulator <span class=\"sy0\">+=</span> doublings.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                answer <span class=\"sy0\">+=</span> powersOf2.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%d, remainder\u00a0%d\"</span>, answer, dividend <span class=\"sy0\">-</span> accumulator<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "JavaScript", "loc": 77, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// EGYPTIAN DIVISION -----------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// egyptianQuotRem\u00a0:: Int -&gt; Int -&gt; (Int, Int)</span><br/>    <span class=\"kw1\">const</span> egyptianQuotRem <span class=\"sy0\">=</span> <span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> rows <span class=\"sy0\">=</span> unfoldr<span class=\"br0\">(</span><br/>            ix <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">const</span> v <span class=\"sy0\">=</span> ix.<span class=\"kw1\">new</span><br/>                <span class=\"kw1\">return</span> v.<span class=\"me1\">x</span> <span class=\"sy0\">&gt;</span> m <span class=\"sy0\">?</span> <span class=\"br0\">{</span><br/>                    nothing<span class=\"sy0\">:</span> <span class=\"kw2\">true</span><br/>                <span class=\"br0\">}</span> <span class=\"sy0\">:</span> <span class=\"br0\">{</span><br/>                    just<span class=\"sy0\">:</span> v<span class=\"sy0\">,</span><br/>                    <span class=\"kw1\">new</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span><br/>                        i<span class=\"sy0\">:</span> v.<span class=\"me1\">i</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span><br/>                        x<span class=\"sy0\">:</span> v.<span class=\"me1\">x</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>                i<span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>                x<span class=\"sy0\">:</span> n<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> foldr<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/>            i<span class=\"sy0\">:</span> i<span class=\"sy0\">,</span><br/>            x<span class=\"sy0\">:</span> x<br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>q<span class=\"sy0\">,</span> r<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">&lt;</span> r <span class=\"sy0\">?</span> <span class=\"br0\">[</span>q <span class=\"sy0\">+</span> i<span class=\"sy0\">,</span> r <span class=\"sy0\">-</span> x<span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span>q<span class=\"sy0\">,</span> r<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> m<span class=\"br0\">]</span><span class=\"sy0\">,</span> rows<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"co1\">// GENERIC FUNCTIONS -----------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// flip\u00a0:: (a -&gt; b -&gt; c) -&gt; b -&gt; a -&gt; c</span><br/>    <span class=\"kw1\">const</span> flip <span class=\"sy0\">=</span> f <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> f.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>b<span class=\"sy0\">,</span> a<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// foldr (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b</span><br/>    <span class=\"kw1\">const</span> foldr <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">reduceRight</span><span class=\"br0\">(</span>flip<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// show\u00a0:: a -&gt; String</span><br/>    <span class=\"kw1\">const</span> show <span class=\"sy0\">=</span> <span class=\"br0\">(</span>...<span class=\"me1\">x</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        JSON.<span class=\"me1\">stringify</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><br/>            <span class=\"kw2\">null</span><span class=\"sy0\">,</span> x.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span>x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw2\">null</span><span class=\"sy0\">,</span> x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> x<br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// unfoldr\u00a0:: (b -&gt; Maybe (a, b)) -&gt; b -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> unfoldr <span class=\"sy0\">=</span> <span class=\"br0\">(</span>mf<span class=\"sy0\">,</span> v<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        let xs <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>until<span class=\"br0\">(</span><br/>            m <span class=\"sy0\">=&gt;</span> m.<span class=\"me1\">nothing</span><span class=\"sy0\">,</span><br/>            m <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">const</span> m2 <span class=\"sy0\">=</span> mf<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span> <span class=\"br0\">(</span><br/>                    xs <span class=\"sy0\">=</span> m2.<span class=\"me1\">nothing</span> <span class=\"sy0\">?</span> xs <span class=\"sy0\">:</span> xs.<span class=\"me1\">concat</span><span class=\"br0\">(</span>m2.<span class=\"me1\">just</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                    m2<br/>                <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>                nothing<span class=\"sy0\">:</span> <span class=\"kw2\">false</span><span class=\"sy0\">,</span><br/>                just<span class=\"sy0\">:</span> v<span class=\"sy0\">,</span><br/>                <span class=\"kw1\">new</span><span class=\"sy0\">:</span> v<span class=\"sy0\">,</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// until\u00a0:: (a -&gt; Bool) -&gt; (a -&gt; a) -&gt; a -&gt; a</span><br/>    <span class=\"kw1\">const</span> until <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        let v <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>        while <span class=\"br0\">(</span><span class=\"sy0\">!</span>p<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span> v <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> v<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"co1\">// TEST ------------------------------------------------------------------</span><br/>    <span class=\"kw1\">return</span> show<span class=\"br0\">(</span><br/>        egyptianQuotRem<span class=\"br0\">(</span><span class=\"nu0\">580</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Julia", "loc": 33, "block": "<pre class=\"text highlighted_source\">function egyptiandivision(dividend::Int, divisor::Int)<br/>    N         = 64<br/>    powers    = Vector{Int}(N)<br/>    doublings = Vector{Int}(N)<br/>\u00a0<br/>    ind = 0<br/>    for i in 0:N-1<br/>        powers[i+1] = 1 &lt;&lt; i<br/>        doublings[i+1] = divisor &lt;&lt; i<br/>        if doublings[i+1] &gt; dividend ind = i-1; break end<br/>    end<br/>\u00a0<br/>    ans = acc = 0<br/>    for i in ind:-1:0<br/>        if acc + doublings[i+1] \u2264 dividend<br/>            acc += doublings[i+1]<br/>            ans += powers[i+1]<br/>        end<br/>    end<br/>\u00a0<br/>    return ans, dividend - acc<br/>end<br/>\u00a0<br/>q, r = egyptiandivision(580, 34)<br/>println(\"580 \u00f7 34 = $q (remains $r)\")<br/>\u00a0<br/>using Base.Test<br/>\u00a0<br/>@testset \"Equivalence to divrem builtin function\" begin<br/>    for x in rand(1:100, 100), y in rand(1:100, 10)<br/>    @test egyptiandivision(x, y) == divrem(x, y)<br/>    end<br/>end</pre>"}, {"lang": "Kotlin", "loc": 34, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.4</span><br/>\u00a0<br/>data <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> DivMod<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> quotient<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> remainder<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><br/>\u00a0<br/>fun egyptianDivide<span class=\"br0\">(</span>dividend<span class=\"sy0\">:</span> Int, divisor<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> DivMod <span class=\"br0\">{</span><br/>    require <span class=\"br0\">(</span>dividend <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> divisor <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>dividend <span class=\"sy0\">&lt;</span> divisor<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> DivMod<span class=\"br0\">(</span><span class=\"nu0\">0</span>, dividend<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> powersOfTwo <span class=\"sy0\">=</span> mutableListOf<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> doublings <span class=\"sy0\">=</span> mutableListOf<span class=\"br0\">(</span>divisor<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> doubling <span class=\"sy0\">=</span> divisor<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       doubling <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><br/>       <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>doubling <span class=\"sy0\">&gt;</span> dividend<span class=\"br0\">)</span> break<br/>       powersOfTwo.<span class=\"me1\">add</span><span class=\"br0\">(</span>powersOfTwo<span class=\"br0\">[</span>powersOfTwo.<span class=\"me1\">lastIndex</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>       doublings.<span class=\"me1\">add</span><span class=\"br0\">(</span>doubling<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> answer <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> accumulator <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in doublings.<span class=\"me1\">size</span> - <span class=\"nu0\">1</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>accumulator + doublings<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> dividend<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            accumulator +<span class=\"sy0\">=</span> doublings<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>            answer +<span class=\"sy0\">=</span> powersOfTwo<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>accumulator <span class=\"sy0\">==</span> dividend<span class=\"br0\">)</span> break<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> DivMod<span class=\"br0\">(</span>answer, dividend - accumulator<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dividend <span class=\"sy0\">=</span> <span class=\"nu0\">580</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> divisor <span class=\"sy0\">=</span> <span class=\"nu0\">34</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>quotient, remainder<span class=\"br0\">)</span> <span class=\"sy0\">=</span> egyptianDivide<span class=\"br0\">(</span>dividend, divisor<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"$dividend divided by $divisor is $quotient with remainder $remainder\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Modula-2", "loc": 43, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> EgyptianDivision;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> EgyptianDivision<span class=\"br0\">(</span>dividend<span class=\"sy0\">,</span>divisor <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span>; <span class=\"kw1\">VAR</span> remainder <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span>;<br/><span class=\"kw1\">CONST</span><br/>    SZ <span class=\"sy0\">=</span> <span class=\"nu0\">64</span>;<br/><span class=\"kw1\">VAR</span><br/>    powers<span class=\"sy0\">,</span>doublings <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..SZ<span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGCARD</span>;<br/>    answer<span class=\"sy0\">,</span>accumulator <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span>;<br/>    i <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> SZ<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>        powers<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> SHL i;<br/>        doublings<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> divisor SHL i;<br/>        <span class=\"kw1\">IF</span> doublings<span class=\"br0\">[</span>i<span class=\"br0\">]</span> &gt; dividend <span class=\"kw1\">THEN</span><br/>            BREAK<br/>        <span class=\"kw1\">END</span><br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    answer <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    accumulator <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">0</span> <span class=\"kw1\">BY</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>        <span class=\"kw1\">IF</span> accumulator <span class=\"sy0\">+</span> doublings<span class=\"br0\">[</span>i<span class=\"br0\">]</span> &lt;<span class=\"sy0\">=</span> dividend <span class=\"kw1\">THEN</span><br/>            accumulator <span class=\"sy0\">:=</span> accumulator <span class=\"sy0\">+</span> doublings<span class=\"br0\">[</span>i<span class=\"br0\">]</span>;<br/>            answer <span class=\"sy0\">:=</span> answer <span class=\"sy0\">+</span> powers<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        <span class=\"kw1\">END</span><br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    remainder <span class=\"sy0\">:=</span> dividend <span class=\"sy0\">-</span> accumulator;<br/>    <span class=\"kw1\">RETURN</span> answer<br/><span class=\"kw1\">END</span> EgyptianDivision;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    div<span class=\"sy0\">,</span>rem <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    div <span class=\"sy0\">:=</span> EgyptianDivision<span class=\"br0\">(</span><span class=\"nu0\">580</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"sy0\">,</span> rem<span class=\"br0\">)</span>;<br/>    FormatString<span class=\"br0\">(</span><span class=\"st0\">\"580 divided by 34 is\u00a0%l remainder\u00a0%l<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> div<span class=\"sy0\">,</span> rem<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>\u00a0<br/>    ReadChar<br/><span class=\"kw1\">END</span> EgyptianDivision.</pre>"}, {"lang": "Perl 6", "loc": 12, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> egyptian<span class=\"sy0\">-</span>divmod <span class=\"br0\">(</span>Real <span class=\"re0\">$dividend</span> <span class=\"kw1\">is</span> copy <span class=\"kw1\">where</span> <span class=\"sy0\">*</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> Real <span class=\"re0\">$divisor</span> <span class=\"kw1\">where</span> <span class=\"sy0\">*</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$accumulator</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$divisor</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> \u2026 <span class=\"sy0\">^</span> <span class=\"sy0\">*.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$dividend</span><span class=\"br0\">)</span><br/>      <span class=\"sy0\">.</span><span class=\"kw3\">reverse</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"re0\">$dividend</span> <span class=\"sy0\">-=</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$accumulator</span> <span class=\"sy0\">+=</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"re0\">$dividend</span> <span class=\"sy0\">&gt;=</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    <span class=\"re0\">$accumulator</span><span class=\"sy0\">,</span> <span class=\"re0\">$dividend</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#TESTING</span><br/><span class=\"kw1\">for</span> <span class=\"nu0\">580</span><span class=\"sy0\">,</span><span class=\"nu0\">34</span><span class=\"sy0\">,</span> <span class=\"nu0\">578</span><span class=\"sy0\">,</span><span class=\"nu0\">34</span><span class=\"sy0\">,</span> <span class=\"nu0\">7532795332300578</span><span class=\"sy0\">,</span><span class=\"nu0\">235117</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">printf</span> <span class=\"st0\">\"%s divmod\u00a0%s =\u00a0%s remainder\u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>        <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span>egyptian<span class=\"sy0\">-</span>divmod<span class=\"br0\">(</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span> <span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 20, "block": "<pre class=\"text highlighted_source\">procedure egyptian_division(integer dividend, divisor)<br/>integer p2 = 1, dbl = divisor, ans = 0, accum = 0<br/>sequence p2s = {}, dbls = {}, args<br/>    while dbl&lt;=dividend do<br/>        p2s = append(p2s,p2)<br/>        dbls = append(dbls,dbl)<br/>        dbl += dbl<br/>        p2 += p2<br/>    end while<br/>    for i=length(p2s) to 1 by -1 do<br/>        if accum+dbls[i]&lt;=dividend then<br/>            accum += dbls[i]<br/>            ans += p2s[i]<br/>        end if<br/>    end for<br/>    args = {dividend,divisor,ans,abs(accum-dividend)}<br/>    printf(1,\"%d divided by\u00a0%d is:\u00a0%d remainder\u00a0%d\\n\",args)<br/>end procedure<br/>\u00a0<br/>egyptian_division(580,34)</pre>"}, {"lang": "PicoLisp", "loc": 28, "block": "<pre class=\"text highlighted_source\">(seed (in \"/dev/urandom\" (rd 8)))<br/>\u00a0<br/>(de divmod (Dend Disor)<br/>   (cons (/ Dend Disor) (% Dend Disor)) )<br/>(de egyptian (Dend Disor)<br/>   (let<br/>      (P 0<br/>         D Disor<br/>         S<br/>         (make<br/>            (while (&gt;= Dend (setq @@ (+ D D)))<br/>               (yoke<br/>                  (cons<br/>                     (** 2 (swap 'P (inc P)))<br/>                     (swap 'D @@) ) ) ) )<br/>         P (** 2 P) )<br/>      (mapc<br/>         '((L)<br/>            (and<br/>               (&gt;= Dend (+ D (cdr L)))<br/>               (inc 'P (car L))<br/>               (inc 'D (cdr L)) ) )<br/>         S )<br/>      (cons P (abs (- Dend D))) ) )<br/>(for N 1000<br/>   (let (A (rand 1 1000)  B (rand 1 A))<br/>      (test (divmod A B) (egyptian A B)) ) )<br/>(println (egyptian 580 34))</pre>"}, {"lang": "Python", "loc": 22, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> egyptian_divmod<span class=\"br0\">(</span>dividend<span class=\"sy0\">,</span> divisor<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">assert</span> divisor <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><br/>    pwrs<span class=\"sy0\">,</span> dbls <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>divisor<span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> dbls<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> dividend:<br/>        pwrs.<span class=\"me1\">append</span><span class=\"br0\">(</span>pwrs<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> * <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        dbls.<span class=\"me1\">append</span><span class=\"br0\">(</span>pwrs<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> * divisor<span class=\"br0\">)</span><br/>    ans<span class=\"sy0\">,</span> accum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> pwr<span class=\"sy0\">,</span> dbl <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>pwrs<span class=\"br0\">[</span>-<span class=\"nu0\">2</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> dbls<span class=\"br0\">[</span>-<span class=\"nu0\">2</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> accum + dbl <span class=\"sy0\">&lt;=</span> dividend:<br/>            accum +<span class=\"sy0\">=</span> dbl<br/>            ans +<span class=\"sy0\">=</span> pwr<br/>    <span class=\"kw1\">return</span> ans<span class=\"sy0\">,</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span>accum - dividend<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Test it gives the same results as the divmod built-in</span><br/><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> product<br/><span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> j <span class=\"kw1\">in</span> product<span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">assert</span> egyptian_divmod<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"kw2\">divmod</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Mandated result</span><br/>i<span class=\"sy0\">,</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">580</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>f<span class=\"st0\">'{i} divided by {j} using the Egyption method is\u00a0%i remainder\u00a0%i'</span><br/>     \u00a0% egyptian_divmod<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 41, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define (quotient/remainder-egyptian dividend divisor (trace? #f))<br/>  (define table<br/>    (for*/list ((power_of_2 (sequence-map (curry expt 2) (in-naturals)))<br/>                (doubling (in-value (* divisor power_of_2)))<br/>                #:break (&gt; doubling dividend))<br/>      (list power_of_2 doubling)))<br/>\u00a0<br/>  (when trace?<br/>    (displayln \"Table\\npow_2\\tdoubling\")<br/>    (for ((row table)) (printf \"~a\\t~a~%\" (first row) (second row))))<br/>\u00a0<br/>  (define-values (answer accumulator)<br/>    (for*/fold ((answer 0) (accumulator 0))<br/>               ((row (reverse table))<br/>                (acc\u2032 (in-value (+ accumulator (second row)))))<br/>      (when trace? (printf \"row:~a\\tans/acc:~a ~a\\t\" row answer accumulator))<br/>      (cond<br/>        [(&lt;= acc\u2032 dividend)<br/>         (define ans\u2032 (+ answer (first row)))<br/>         (when trace? (printf \"~a &lt;= ~a -&gt; ans\u2032/acc\u2032:~a ~a~%\" acc\u2032 dividend ans\u2032 acc\u2032))<br/>         (values ans\u2032 acc\u2032)]<br/>        [else<br/>         (when trace? (printf \"~a &gt; ~a [----]~%\" acc\u2032 dividend))<br/>         (values answer accumulator)])))<br/>\u00a0<br/>  (values answer (- dividend accumulator)))<br/>\u00a0<br/>(module+ test<br/>  (require rackunit)<br/>  (let-values (([q r] (quotient/remainder-egyptian 580 34)))<br/>    (check-equal? q 17)<br/>    (check-equal? r 2))<br/>\u00a0<br/>  (let-values (([q r] (quotient/remainder-egyptian 192 3)))<br/>    (check-equal? q 64)<br/>    (check-equal? r 0)))<br/>\u00a0<br/>(module+ main<br/>  (quotient/remainder-egyptian 580 34 #t))</pre>"}, {"lang": "REXX", "loc": 23, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program performs division on positive integers using the Egyptian division method*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">1000</span>                              <span class=\"coMULTI\">/*support gihugic numbers &amp; be gung-ho.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n d <span class=\"sy0\">.</span>                                  <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> d==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> d==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  n=<span class=\"nu0\">580</span>;  d=<span class=\"nu0\">34</span>;  <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*Not specified?  Then use the defaults*/</span><br/><span class=\"kw1\">call</span> EgyptDiv n, d                               <span class=\"coMULTI\">/*invoke the Egyptina Division function*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> <span class=\"kw4\">result</span> q r                             <span class=\"coMULTI\">/*extract the quotient &amp; the remainder.*/</span><br/><span class=\"kw1\">say</span> n   <span class=\"st0\">' divided by '</span>       d       <span class=\"st0\">\" is \"</span>       q       <span class=\"st0\">' with a remainder of '</span>      r<br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>EgyptDiv: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> num,dem          <span class=\"coMULTI\">/*obtain the numerator and denominator.*/</span><br/>          p=<span class=\"nu0\">1</span>;                        t=dem      <span class=\"coMULTI\">/*initialize the double &amp; power values.*/</span><br/>                        <span class=\"kw1\">do</span> #=<span class=\"nu0\">1</span>  <span class=\"kw2\">until</span> t<span class=\"sy0\">&gt;</span>num      <span class=\"coMULTI\">/*construct the power &amp; doubling lists.*/</span><br/>                        pow<span class=\"sy0\">.</span>#=p;      p=p + p    <span class=\"coMULTI\">/*build power  entry; bump power value.*/</span><br/>                        dbl<span class=\"sy0\">.</span>#=t;      t=t + t    <span class=\"coMULTI\">/*  \"  doubling  \" \u00a0;   \" doubling val.*/</span><br/>                        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*#*/</span><br/>          acc=<span class=\"nu0\">0</span>; ans=<span class=\"nu0\">0</span>                           <span class=\"coMULTI\">/*initialize accumulator &amp; answer to 0 */</span><br/>                        <span class=\"kw1\">do</span> s=#  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #     <span class=\"coMULTI\">/* [\u2193]  process the table \"backwards\". */</span><br/>                        sum=acc + dbl<span class=\"sy0\">.</span>s          <span class=\"coMULTI\">/*compute the sum (to be used for test)*/</span><br/>                        <span class=\"kw1\">if</span> sum<span class=\"sy0\">&gt;</span>num  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> <span class=\"coMULTI\">/*Is sum to big?  Then ignore this step*/</span><br/>                        acc=sum                  <span class=\"coMULTI\">/*use the \"new\" sum for the accumulator*/</span><br/>                        ans=ans + pow<span class=\"sy0\">.</span>s          <span class=\"coMULTI\">/*calculate the (newer) running answer.*/</span><br/>                        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*s*/</span><br/>          <span class=\"kw1\">return</span> ans num-acc                     <span class=\"coMULTI\">/*return the answer and the remainder. */</span></pre>"}, {"lang": "Ring", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>load \"stdlib.ring\"<br/>\u00a0<br/>table = newlist(32, 2)<br/>dividend = 580<br/>divisor = 34<br/>\u00a0<br/>i = 1<br/>table[i][1] = 1<br/>table[i][2] = divisor<br/>\u00a0<br/>while table[i] [2] &lt; dividend<br/>      i = i + 1<br/>      table[i][1] = table[i -1] [1] * 2<br/>      table[i][2] = table[i -1] [2] * 2<br/>end <br/>i = i - 1<br/>answer = table[i][1]<br/>accumulator = table[i][2]<br/>\u00a0<br/>while i &gt; 1<br/>      i = i - 1<br/>      if table[i][2]+ accumulator &lt;= dividend <br/>         answer = answer + table[i][1]<br/>         accumulator = accumulator + table[i][2]<br/>      ok<br/>end<br/>\u00a0<br/>see string(dividend)  + \" divided by \" + string(divisor) + \" using egytian division\" + nl<br/>see \" returns \" + string(answer) + \" mod(ulus) \" + string(dividend-accumulator)<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 15, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> egyptian_divmod<span class=\"br0\">(</span>dividend, divisor<span class=\"br0\">)</span><br/>  table = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, divisor<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  table <span class=\"sy0\">&lt;&lt;</span> table.<span class=\"me1\">last</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>e<span class=\"sy0\">|</span> e<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"kw1\">while</span> table.<span class=\"me1\">last</span>.<span class=\"me1\">first</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;</span>= dividend<br/>  answer, accumulator = <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><br/>  table.<span class=\"me1\">reverse_each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>pow, double<span class=\"sy0\">|</span><br/>    <span class=\"kw1\">if</span> accumulator <span class=\"sy0\">+</span> double <span class=\"sy0\">&lt;</span>= dividend<br/>      accumulator <span class=\"sy0\">+</span>= double<br/>      answer <span class=\"sy0\">+</span>= pow<br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"br0\">[</span>answer, dividend <span class=\"sy0\">-</span> accumulator<span class=\"br0\">]</span> <br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"Quotient =\u00a0%s Remainder =\u00a0%s\"</span> <span class=\"sy0\">%</span> egyptian_divmod<span class=\"br0\">(</span><span class=\"nu0\">580</span>, <span class=\"nu0\">34</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 29, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> EgyptianDivision <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> divide<span class=\"br0\">(</span>dividend<span class=\"sy0\">:</span> Int, divisor<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> powersOf2, doublings <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> collection.<span class=\"me1\">mutable</span>.<span class=\"me1\">ListBuffer</span><span class=\"br0\">[</span>Integer<span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"co1\">//populate the powersof2- and doublings-columns</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> line <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>math.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, line<span class=\"br0\">)</span> <span class=\"sy0\">*</span> divisor<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> dividend<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> powerOf2 <span class=\"sy0\">=</span> math.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, line<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><br/>      powersOf2 +<span class=\"sy0\">=</span> powerOf2<br/>      doublings +<span class=\"sy0\">=</span> <span class=\"br0\">(</span>powerOf2 <span class=\"sy0\">*</span> divisor<span class=\"br0\">)</span><br/>      line +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> answer, accumulator <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"co1\">//Consider the rows in reverse order of their construction (from back to front of the List)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> powersOf2.<span class=\"me1\">size</span> - <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- powersOf2.<span class=\"me1\">size</span> - <span class=\"nu0\">1</span> to <span class=\"nu0\">0</span> by -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>accumulator + doublings<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> dividend<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        accumulator +<span class=\"sy0\">=</span> doublings<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        answer +<span class=\"sy0\">=</span> powersOf2<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span>f<span class=\"st0\">\"$answer%d, remainder ${dividend - accumulator}%d\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  divide<span class=\"br0\">(</span><span class=\"nu0\">580</span>, <span class=\"nu0\">34</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 15, "block": "<pre class=\"ruby highlighted_source\">func egyptian_divmod<span class=\"br0\">(</span>dividend, divisor<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  var table = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, divisor<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  table <span class=\"sy0\">&lt;&lt;</span> table<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>e<span class=\"sy0\">|</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>e <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>table<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span>= dividend<span class=\"br0\">)</span><br/>  var <span class=\"br0\">(</span>answer, accumulator<span class=\"br0\">)</span> = <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  table.<span class=\"me1\">reverse</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>pair<span class=\"sy0\">|</span><br/>    var <span class=\"br0\">(</span>pow, double<span class=\"br0\">)</span> = pair...<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>accumulator <span class=\"sy0\">+</span> double <span class=\"sy0\">&lt;</span>= dividend<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      accumulator <span class=\"sy0\">+</span>= double<br/>      answer <span class=\"sy0\">+</span>= pow<br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw2\">return</span> <span class=\"br0\">(</span>answer, dividend <span class=\"sy0\">-</span> accumulator<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"br0\">(</span><span class=\"st0\">\"Quotient =\u00a0%s Remainder =\u00a0%s\"</span> <span class=\"sy0\">%</span> egyptian_divmod<span class=\"br0\">(</span><span class=\"nu0\">580</span>, <span class=\"nu0\">34</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "VBA", "loc": 56, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw4\">Type</span> MyTable<br/>    powers_of_2 <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    doublings <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/><span class=\"kw3\">End</span> <span class=\"kw4\">Type</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw4\">Type</span> Assemble<br/>    answer <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    accumulator <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/><span class=\"kw3\">End</span> <span class=\"kw4\">Type</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw4\">Type</span> Division<br/>    Quotient <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    Remainder <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/><span class=\"kw3\">End</span> <span class=\"kw4\">Type</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw4\">Type</span> DivEgyp<br/>    Dividend <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    Divisor <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/><span class=\"kw3\">End</span> <span class=\"kw4\">Type</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> Deg <span class=\"kw4\">As</span> DivEgyp<br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main()<br/><span class=\"kw4\">Dim</span> d <span class=\"kw4\">As</span> Division<br/>    Deg.Dividend = 580<br/>    Deg.Divisor = 34<br/>    d = Divise(CreateTable)<br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Quotient = \"</span> &amp; d.Quotient &amp; <span class=\"st0\">\" Remainder = \"</span> &amp; d.Remainder<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> CreateTable() <span class=\"kw4\">As</span> MyTable()<br/><span class=\"kw4\">Dim</span> t() <span class=\"kw4\">As</span> MyTable, i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    <span class=\"kw3\">Do</span><br/>        i = i + 1<br/>        <span class=\"kw4\">ReDim</span> <span class=\"kw4\">Preserve</span> t(i)<br/>        t(i).powers_of_2 = 2 ^ (i - 1)<br/>        t(i).doublings = Deg.Divisor * t(i).powers_of_2<br/>    <span class=\"kw3\">Loop</span> <span class=\"kw3\">While</span> 2 * t(i).doublings &lt;= Deg.Dividend<br/>    CreateTable = t<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> Divise(t() <span class=\"kw4\">As</span> MyTable) <span class=\"kw4\">As</span> Division<br/><span class=\"kw4\">Dim</span> a <span class=\"kw4\">As</span> Assemble, i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    a.accumulator = 0<br/>    a.answer = 0<br/>    <span class=\"kw3\">For</span> i = <span class=\"kw4\">UBound</span>(t) <span class=\"kw3\">To</span> <span class=\"kw4\">LBound</span>(t) <span class=\"kw3\">Step</span> -1<br/>        <span class=\"kw3\">If</span> a.accumulator + t(i).doublings &lt;= Deg.Dividend <span class=\"kw3\">Then</span><br/>            a.accumulator = a.accumulator + t(i).doublings<br/>            a.answer = a.answer + t(i).powers_of_2<br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Next</span><br/>    Divise.Quotient = a.answer<br/>    Divise.Remainder = Deg.Dividend - a.accumulator<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "zkl", "loc": 9, "block": "<pre class=\"text highlighted_source\">fcn egyptianDivmod(dividend,divisor){<br/>   table:=[0..].pump(List, 'wrap(n){\t// (2^n,divisor*2^n)<br/>      r:=T( p:=(2).pow(n), s:=divisor*p); (s&lt;=dividend) and r or Void.Stop });<br/>   accumulator:=0;<br/>   foreach p2,d in (table.reverse()){ <br/>      if(dividend&gt;=d){ accumulator+=p2; dividend-=d; }<br/>   }<br/>   return(accumulator,dividend);<br/>}</pre>"}]}