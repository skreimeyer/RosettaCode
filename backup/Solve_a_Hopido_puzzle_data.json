{"task": "Solve_a_Hopido_puzzle", "blocks": [{"lang": "AutoHotkey", "loc": 70, "block": "<pre class=\"autohotkey highlighted_source\">SolveHopido<span class=\"br0\">(</span>Grid<span class=\"sy0\">,</span> Locked<span class=\"sy0\">,</span> Max<span class=\"sy0\">,</span> row<span class=\"sy0\">,</span> col<span class=\"sy0\">,</span> num<span class=\"sy0\">:=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> R<span class=\"sy0\">:=</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> C<span class=\"sy0\">:=</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>R<span class=\"sy0\">&amp;&amp;</span>C<span class=\"br0\">)</span>\t\t\t\t\t\t\t<span class=\"co1\">; if neighbors (not first iteration)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tGrid<span class=\"br0\">[</span>R<span class=\"sy0\">,</span> C<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"&gt;\"</span> num \t\t\t\t\t<span class=\"co1\">; place num in current neighbor and mark it visited \"&gt;\"</span><br/>\t\trow<span class=\"sy0\">:=</span>R<span class=\"sy0\">,</span> col<span class=\"sy0\">:=</span>C\t\t\t\t\t\t<span class=\"co1\">; move to current neighbor</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tnum<span class=\"sy0\">++</span>\t\t\t\t\t\t\t\t<span class=\"co1\">; increment num</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>num<span class=\"sy0\">=</span>max<span class=\"br0\">)</span>\t\t\t\t\t\t\t<span class=\"co1\">; if reached end</span><br/>\t\t<span class=\"kw1\">return</span> map<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span>\t\t\t\t\t<span class=\"co1\">; return solution</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> locked<span class=\"br0\">[</span>num<span class=\"br0\">]</span>\t\t\t\t\t\t\t<span class=\"co1\">; if current num is a locked value</span><br/>\t<span class=\"br0\">{</span><br/>\t\trow <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span><span class=\"br0\">(</span>StrSplit<span class=\"br0\">(</span>locked<span class=\"br0\">[</span>num<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>1<span class=\"br0\">)</span> <span class=\"sy0\">,</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>1\t<span class=\"co1\">; find row of num</span><br/>\t\tcol <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span><span class=\"br0\">(</span>StrSplit<span class=\"br0\">(</span>locked<span class=\"br0\">[</span>num<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>1<span class=\"br0\">)</span> <span class=\"sy0\">,</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>2\t<span class=\"co1\">; find col of num</span><br/>\t\t<span class=\"kw1\">if</span> SolveHopido<span class=\"br0\">(</span>Grid<span class=\"sy0\">,</span> Locked<span class=\"sy0\">,</span> Max<span class=\"sy0\">,</span> row<span class=\"sy0\">,</span> col<span class=\"sy0\">,</span> num<span class=\"br0\">)</span>\t<span class=\"co1\">; solve for current location and value</span><br/>\t\t\t<span class=\"kw1\">return</span> map<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span>\t\t\t\t<span class=\"co1\">; if solved, return solution</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span><br/>\t<span class=\"br0\">{</span><br/>\t\tfor each<span class=\"sy0\">,</span> value in StrSplit<span class=\"br0\">(</span>Neighbor<span class=\"br0\">(</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tR <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span>value<span class=\"sy0\">,</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>1<br/>\t\t\tC <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span>value<span class=\"sy0\">,</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>2<br/>\u00a0<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Grid<span class=\"br0\">[</span>R<span class=\"sy0\">,</span>C<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>\t\t\t\t<span class=\"co1\">; a hole or out of bounds</span><br/>\t\t\t|| <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>Grid<span class=\"br0\">[</span>R<span class=\"sy0\">,</span> C<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span>\t\t\t<span class=\"co1\">; visited</span><br/>\t\t\t|| Locked<span class=\"br0\">[</span>num<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span>\u00a0!<span class=\"br0\">(</span>Locked<span class=\"br0\">[</span>num<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>~<span class=\"sy0\">=</span> <span class=\"st0\">\"\\b\"</span> R <span class=\"st0\">\":\"</span> C <span class=\"st0\">\"\\b\"</span><span class=\"br0\">)</span> <span class=\"co1\">; not neighbor of locked[num+1]</span><br/>\t\t\t|| Locked<span class=\"br0\">[</span>num<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span>\u00a0!<span class=\"br0\">(</span>Locked<span class=\"br0\">[</span>num<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>~<span class=\"sy0\">=</span> <span class=\"st0\">\"\\b\"</span> R <span class=\"st0\">\":\"</span> C <span class=\"st0\">\"\\b\"</span><span class=\"br0\">)</span> <span class=\"co1\">; not neighbor of locked[num-1]</span><br/>\t\t\t|| Locked<span class=\"br0\">[</span>num<span class=\"br0\">]</span>\t\t\t\t\t<span class=\"co1\">; locked value</span><br/>\t\t\t|| Locked<span class=\"br0\">[</span>Grid<span class=\"br0\">[</span>R<span class=\"sy0\">,</span> C<span class=\"br0\">]</span><span class=\"br0\">]</span>\t\t\t\t<span class=\"co1\">; locked cell</span><br/>\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">continue</span></a><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">if</span> SolveHopido<span class=\"br0\">(</span>Grid<span class=\"sy0\">,</span> Locked<span class=\"sy0\">,</span> Max<span class=\"sy0\">,</span> row<span class=\"sy0\">,</span> col<span class=\"sy0\">,</span> num<span class=\"sy0\">,</span> R<span class=\"sy0\">,</span> C<span class=\"br0\">)</span>\t<span class=\"co1\">; solve for current location, neighbor and value</span><br/>\t\t\t\t<span class=\"kw1\">return</span> map<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">; if solved, return solution</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\tnum<span class=\"sy0\">--</span>\t\t\t\t\t\t\t\t<span class=\"co1\">; step back</span><br/>\tfor i<span class=\"sy0\">,</span> line in Grid<br/>\t\tfor j<span class=\"sy0\">,</span> element in line<br/>\t\t\t<span class=\"kw1\">if</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>element<span class=\"sy0\">,</span> <span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>StrReplace<span class=\"br0\">(</span>element<span class=\"sy0\">,</span> <span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> num<span class=\"br0\">)</span><br/>\t\t\t\tGrid<span class=\"br0\">[</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">;--------------------------------</span><br/><span class=\"co1\">;--------------------------------</span><br/><span class=\"co1\">;--------------------------------</span><br/>Neighbor<span class=\"br0\">(</span>row<span class=\"sy0\">,</span>col<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> Trim<span class=\"br0\">(</span> <span class=\"st0\">\"\"</span><br/>\t<span class=\"sy0\">.</span> <span class=\"st0\">\",\"</span>  row <span class=\"st0\">\":\"</span> col<span class=\"sy0\">-</span><span class=\"nu0\">3</span><br/>\t<span class=\"sy0\">.</span> <span class=\"st0\">\",\"</span>  row <span class=\"st0\">\":\"</span> col<span class=\"sy0\">+</span><span class=\"nu0\">3</span><br/>\t<span class=\"sy0\">.</span> <span class=\"st0\">\",\"</span>  row<span class=\"sy0\">-</span><span class=\"nu0\">3</span> <span class=\"st0\">\":\"</span> col<br/>\t<span class=\"sy0\">.</span> <span class=\"st0\">\",\"</span>  row<span class=\"sy0\">+</span><span class=\"nu0\">3</span> <span class=\"st0\">\":\"</span> col<br/>\u00a0<br/>\t<span class=\"sy0\">.</span> <span class=\"st0\">\",\"</span>  row<span class=\"sy0\">+</span><span class=\"nu0\">2</span> <span class=\"st0\">\":\"</span> col<span class=\"sy0\">+</span><span class=\"nu0\">2</span><br/>\t<span class=\"sy0\">.</span> <span class=\"st0\">\",\"</span>  row<span class=\"sy0\">+</span><span class=\"nu0\">2</span> <span class=\"st0\">\":\"</span> col<span class=\"sy0\">-</span><span class=\"nu0\">2</span><br/>\t<span class=\"sy0\">.</span> <span class=\"st0\">\",\"</span>  row<span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"st0\">\":\"</span> col<span class=\"sy0\">+</span><span class=\"nu0\">2</span><br/>\t<span class=\"sy0\">.</span> <span class=\"st0\">\",\"</span>  row<span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"st0\">\":\"</span> col<span class=\"sy0\">-</span><span class=\"nu0\">2</span><br/>\t<span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">;--------------------------------</span><br/>map<span class=\"br0\">(</span>Grid<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tfor i<span class=\"sy0\">,</span> row in Grid<br/>\t<span class=\"br0\">{</span><br/>\t\tfor j<span class=\"sy0\">,</span> element in row<br/>\t\t\tline <span class=\"sy0\">.=</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>\u00a0? <span class=\"st0\">\"`t\"</span>\u00a0: <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> element<br/>\t\tmap <span class=\"sy0\">.=</span> <span class=\"br0\">(</span>map<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\"\"</span>?<span class=\"st0\">\"`n\"</span>:<span class=\"st0\">\"\"</span><span class=\"br0\">)</span> line<br/>\t\tline <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> StrReplace<span class=\"br0\">(</span>map<span class=\"sy0\">,</span> <span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 135, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> node<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> val<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> neighbors<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> nSolver<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    nSolver<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tdx<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">2</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">2</span><span class=\"sy4\">;</span> dx<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">2</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span>  <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>\tdx<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span>  <span class=\"nu0\">2</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">2</span><span class=\"sy4\">;</span> dx<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span>  <span class=\"nu0\">2</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span>  <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>\tdx<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">3</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span>  <span class=\"nu0\">0</span><span class=\"sy4\">;</span> dx<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span>  <span class=\"nu0\">3</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span>  <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <br/>\tdx<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span>  <span class=\"nu0\">0</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">3</span><span class=\"sy4\">;</span> dx<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span>  <span class=\"nu0\">0</span><span class=\"sy4\">;</span> dy<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span>  <span class=\"nu0\">3</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> solve<span class=\"br0\">(</span> vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> puzz, <span class=\"kw4\">int</span> max_wid <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> puzz.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>\twid <span class=\"sy1\">=</span> max_wid<span class=\"sy4\">;</span> hei <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> puzz.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy2\">/</span> wid<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> len <span class=\"sy1\">=</span> wid <span class=\"sy2\">*</span> hei, c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> max <span class=\"sy1\">=</span> len<span class=\"sy4\">;</span><br/>\tarr <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> node<span class=\"br0\">[</span>len<span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"kw3\">memset</span><span class=\"br0\">(</span> arr, <span class=\"nu0\">0</span>, len <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> node <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> i <span class=\"sy1\">=</span> puzz.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> puzz.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"st0\">\"*\"</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> max<span class=\"sy2\">--</span><span class=\"sy4\">;</span> arr<span class=\"br0\">[</span>c<span class=\"sy2\">++</span><span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> <span class=\"kw1\">continue</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\t    arr<span class=\"br0\">[</span>c<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> <span class=\"kw3\">atoi</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span>.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    c<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tsolveIt<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> i <span class=\"sy1\">=</span> puzz.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> puzz.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"st0\">\".\"</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tostringstream o<span class=\"sy4\">;</span> o <span class=\"sy1\">&lt;&lt;</span> arr<span class=\"br0\">[</span>c<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span> <span class=\"sy1\">=</span> o.<span class=\"me1\">str</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    c<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> arr<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">bool</span> search<span class=\"br0\">(</span> <span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> w <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> w <span class=\"sy1\">&gt;</span> max <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tnode<span class=\"sy2\">*</span> n <span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>arr<span class=\"br0\">[</span>x <span class=\"sy2\">+</span> y <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\tn<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>neighbors <span class=\"sy1\">=</span> getNeighbors<span class=\"br0\">(</span> x, y <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> d <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> d <span class=\"sy1\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span> d<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> n<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>neighbors <span class=\"sy3\">&amp;</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> d <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> x <span class=\"sy2\">+</span> dx<span class=\"br0\">[</span>d<span class=\"br0\">]</span>, b <span class=\"sy1\">=</span> y <span class=\"sy2\">+</span> dy<span class=\"br0\">[</span>d<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> b <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> b <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> search<span class=\"br0\">(</span> a, b, w <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t\t    arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> b <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> getNeighbors<span class=\"br0\">(</span> <span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"kw4\">int</span> a, b<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> xx <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> xx <span class=\"sy1\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span> xx<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    a <span class=\"sy1\">=</span> x <span class=\"sy2\">+</span> dx<span class=\"br0\">[</span>xx<span class=\"br0\">]</span>, b <span class=\"sy1\">=</span> y <span class=\"sy2\">+</span> dy<span class=\"br0\">[</span>xx<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> a <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> b <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> a <span class=\"sy1\">&gt;=</span> wid <span class=\"sy3\">||</span> b <span class=\"sy1\">&gt;=</span> hei <span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> b <span class=\"sy2\">*</span> wid<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">&gt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> c <span class=\"sy3\">|</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> xx <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> c<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> solveIt<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> x, y, z<span class=\"sy4\">;</span> findStart<span class=\"br0\">(</span> x, y, z <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> z <span class=\"sy1\">==</span> <span class=\"nu0\">99999</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>Can't find start point!<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\tsearch<span class=\"br0\">(</span> x, y, z <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> findStart<span class=\"br0\">(</span> <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> x, <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> y, <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> z <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> b <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> b <span class=\"sy1\">&lt;</span> hei<span class=\"sy4\">;</span> b<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> a <span class=\"sy1\">&lt;</span> wid<span class=\"sy4\">;</span> a<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> wid <span class=\"sy2\">*</span> b<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <br/>\t\t<span class=\"br0\">{</span> <br/>\t\t    x <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span> y <span class=\"sy1\">=</span> b<span class=\"sy4\">;</span> z <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t\t    arr<span class=\"br0\">[</span>a <span class=\"sy2\">+</span> wid <span class=\"sy2\">*</span> b<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy1\">=</span> z<span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> wid, hei, max, dx<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span>, dy<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    node<span class=\"sy2\">*</span> arr<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> wid<span class=\"sy4\">;</span> string p<span class=\"sy4\">;</span><br/>    p <span class=\"sy1\">=</span> <span class=\"st0\">\"* . . * . . * . . . . . . . . . . . . . . * . . . . . * * * . . . * * * * * . * * *\"</span><span class=\"sy4\">;</span> wid <span class=\"sy1\">=</span> <span class=\"nu0\">7</span><span class=\"sy4\">;</span><br/>    istringstream iss<span class=\"br0\">(</span> p <span class=\"br0\">)</span><span class=\"sy4\">;</span> vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span> puzz<span class=\"sy4\">;</span><br/>    copy<span class=\"br0\">(</span> istream_iterator<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> iss <span class=\"br0\">)</span>, istream_iterator<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, back_inserter<span class=\"sy1\">&lt;</span>vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> puzz <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    nSolver s<span class=\"sy4\">;</span> s.<span class=\"me1\">solve</span><span class=\"br0\">(</span> puzz, wid <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> i <span class=\"sy1\">=</span> puzz.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> puzz.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"st0\">\"*\"</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"st0\">\".\"</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"kw3\">atoi</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span>.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span> <span class=\"br0\">)</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"0\"</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"   \"</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy2\">++</span>c <span class=\"sy1\">&gt;=</span> wid <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"pause\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 114, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">struct</span> HopidoPuzzle <span class=\"br0\">{</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw2\">alias</span> InputCellBaseType <span class=\"sy0\">=</span> <span class=\"kw4\">char</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">enum</span> InputCell <span class=\"sy0\">:</span> InputCellBaseType <span class=\"br0\">{</span> available <span class=\"sy0\">=</span> <span class=\"st0\">'#'</span><span class=\"sy0\">,</span> unavailable <span class=\"sy0\">=</span> <span class=\"st0\">'.'</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw2\">alias</span> Cell <span class=\"sy0\">=</span> <span class=\"kw4\">uint</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">enum</span> <span class=\"sy0\">:</span> Cell <span class=\"br0\">{</span> unknownCell <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> unavailableCell <span class=\"sy0\">=</span> Cell.<span class=\"me1\">max</span> <span class=\"br0\">}</span> <span class=\"co1\">// Special Cell values.</span><br/>\u00a0<br/>    <span class=\"co1\">// Neighbors, [shift row, shift column].</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">static</span> <span class=\"kw4\">immutable</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span> shifts <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                                                 <span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">immutable</span> <span class=\"kw4\">size_t</span> gridWidth<span class=\"sy0\">,</span> gridHeight<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">immutable</span> Cell nAvailableCells<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> <span class=\"coMULTI\">/*immutable*/</span> <span class=\"kw4\">const</span> InputCell<span class=\"br0\">[</span><span class=\"br0\">]</span> flatPuzzle<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> Cell<span class=\"br0\">[</span><span class=\"br0\">]</span> grid<span class=\"sy0\">;</span> <span class=\"co1\">// Flattened mutable game grid.</span><br/>\u00a0<br/>    <span class=\"kw4\">@disable</span> <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> rawPuzzle<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> @<span class=\"kw4\">safe</span><br/>    <span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>rawPuzzle.<span class=\"me1\">empty</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>rawPuzzle<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">empty</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span>rawPuzzle.<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>row <span class=\"sy0\">=&gt;</span> row.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> rawPuzzle<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Is rectangular.</span><br/>\u00a0<br/>        <span class=\"co1\">// Has at least one start point.</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span>rawPuzzle.<span class=\"me1\">join</span>.<span class=\"me1\">representation</span>.<span class=\"me1\">canFind</span><span class=\"br0\">(</span>InputCell.<span class=\"me1\">available</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">//immutable puzzle = rawPuzzle.to!(InputCell[][]);</span><br/>        <span class=\"kw4\">immutable</span> puzzle <span class=\"sy0\">=</span> rawPuzzle.<span class=\"me1\">map</span><span class=\"sy0\">!</span>representation.<span class=\"me1\">array</span>.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>InputCell<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        gridWidth <span class=\"sy0\">=</span> puzzle<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        gridHeight <span class=\"sy0\">=</span> puzzle.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        flatPuzzle <span class=\"sy0\">=</span> puzzle.<span class=\"me1\">join</span><span class=\"sy0\">;</span><br/>        nAvailableCells <span class=\"sy0\">=</span> flatPuzzle.<span class=\"me1\">representation</span>.<span class=\"me1\">count</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>ic <span class=\"sy0\">=&gt;</span> ic <span class=\"sy0\">==</span> InputCell.<span class=\"me1\">available</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        grid <span class=\"sy0\">=</span> flatPuzzle<br/>               .<span class=\"me1\">representation</span><br/>               .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>ic <span class=\"sy0\">=&gt;</span> ic <span class=\"sy0\">==</span> InputCell.<span class=\"me1\">available</span> <span class=\"sy0\">?</span> unknownCell <span class=\"sy0\">:</span> unavailableCell<span class=\"br0\">)</span><br/>               .<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>    Nullable<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> solve<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"coMULTI\">/*nothrow*/</span> @<span class=\"kw4\">safe</span><br/>    <span class=\"kw2\">out</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>result.<span class=\"me1\">isNull</span><span class=\"br0\">)</span><br/>            <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>grid.<span class=\"me1\">canFind</span><span class=\"br0\">(</span>unknownCell<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// Try all possible start positions.</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> r<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span>  <span class=\"me1\">gridHeight</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> c<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">gridWidth</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">immutable</span> pos <span class=\"sy0\">=</span> r <span class=\"sy0\">*</span> gridWidth <span class=\"sy0\">+</span> c<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">==</span> unknownCell<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw4\">immutable</span> Cell startCell <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">// To lay the first cell value.</span><br/>                    grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> startCell<span class=\"sy0\">;</span>        <span class=\"co1\">// Try.</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>search<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> startCell <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw4\">auto</span> result <span class=\"sy0\">=</span> zip<span class=\"br0\">(</span>flatPuzzle<span class=\"sy0\">,</span> grid<span class=\"br0\">)</span><br/>                                      <span class=\"co1\">//.map!({p, c} =&gt; ...</span><br/>                                      .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>pc <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>pc<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> InputCell.<span class=\"me1\">available</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span><br/>                                                  pc<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">text</span> <span class=\"sy0\">:</span><br/>                                                  InputCellBaseType<span class=\"br0\">(</span>pc<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">text</span><span class=\"br0\">)</span><br/>                                      .<span class=\"me1\">array</span><br/>                                      .<span class=\"me1\">chunks</span><span class=\"br0\">(</span>gridWidth<span class=\"br0\">)</span><br/>                                      .<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">return</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                    grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> unknownCell<span class=\"sy0\">;</span> <span class=\"co1\">// Restore.</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">bool</span> search<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> r<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> c<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Cell cell<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cell <span class=\"sy0\">&gt;</span> nAvailableCells<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span> <span class=\"co1\">// One solution found.</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> sh<span class=\"sy0\">;</span> shifts<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">immutable</span> r2 <span class=\"sy0\">=</span> r <span class=\"sy0\">+</span> sh<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                      c2 <span class=\"sy0\">=</span> c <span class=\"sy0\">+</span> sh<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                      pos <span class=\"sy0\">=</span> r2 <span class=\"sy0\">*</span> gridWidth <span class=\"sy0\">+</span> c2<span class=\"sy0\">;</span><br/>            <span class=\"co1\">// No need to test for &gt;= 0 because uint wraps around.</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c2 <span class=\"sy0\">&lt;</span> gridWidth <span class=\"sy0\">&amp;&amp;</span> r2 <span class=\"sy0\">&lt;</span> gridHeight <span class=\"sy0\">&amp;&amp;</span> grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">==</span> unknownCell<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> cell<span class=\"sy0\">;</span>        <span class=\"co1\">// Try.</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>search<span class=\"br0\">(</span>r2<span class=\"sy0\">,</span> c2<span class=\"sy0\">,</span> cell <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>                grid<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">=</span> unknownCell<span class=\"sy0\">;</span> <span class=\"co1\">// Restore.</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// enum HopidoPuzzle to catch malformed puzzles at compile-time.</span><br/>    <span class=\"kw4\">enum</span> puzzle <span class=\"sy0\">=</span> <span class=\"st0\">\".##.##.<br/>                   #######<br/>                   #######<br/>                   .#####.<br/>                   ..###..<br/>                   ...#...\"</span>.<span class=\"me1\">split</span>.<span class=\"me1\">HopidoPuzzle</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> solution <span class=\"sy0\">=</span> puzzle.<span class=\"me1\">solve</span><span class=\"sy0\">;</span> <span class=\"co1\">// Solved at run-time.</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>solution.<span class=\"me1\">isNull</span><span class=\"br0\">)</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"No solution found.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"One solution:<span class=\"es1\">\\n</span>%(%-(%2s\u00a0%)<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> solution<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 13, "block": "<pre class=\"text highlighted_source\"># require HLPsolver<br/>\u00a0<br/>adjacent = [{-3, 0}, {0, -3}, {0, 3}, {3, 0}, {-2, -2}, {-2, 2}, {2, -2}, {2, 2}]<br/>\u00a0<br/>board = \"\"\"<br/>. 0 0 . 0 0 .<br/>0 0 0 0 0 0 0<br/>0 0 0 0 0 0 0<br/>. 0 0 0 0 0 .<br/>. . 0 0 0 . .<br/>. . . 1 . . .<br/>\"\"\"<br/>HLPsolver.solve(board, adjacent)</pre>"}, {"lang": "Go", "loc": 123, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"sort\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> board <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>    <span class=\"st0\">\".00.00.\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"0000000\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"0000000\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\".00000.\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"..000..\"</span><span class=\"sy1\">,</span><br/>    <span class=\"st0\">\"...0...\"</span><span class=\"sy1\">,</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> moves <span class=\"sy2\">=</span> <span class=\"sy1\">[][</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><br/>    <span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">3</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">},</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> grid <span class=\"sy1\">[][]</span><span class=\"kw4\">int</span><br/>\u00a0<br/><span class=\"kw1\">var</span> totalToFill <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw4\">func</span> solve<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> c<span class=\"sy1\">,</span> count <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> count &gt; totalToFill <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">}</span><br/>    nbrs <span class=\"sy2\">:=</span> neighbors<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> c<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>nbrs<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> &amp;&amp; count <span class=\"sy2\">!=</span> totalToFill <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>    <span class=\"sy1\">}</span><br/>    sort<span class=\"sy3\">.</span>Slice<span class=\"sy1\">(</span>nbrs<span class=\"sy1\">,</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> nbrs<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> &lt; nbrs<span class=\"sy1\">[</span>j<span class=\"sy1\">][</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><br/>    <span class=\"sy1\">})</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> nb <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> nbrs <span class=\"sy1\">{</span><br/>        r <span class=\"sy2\">=</span> nb<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>        c <span class=\"sy2\">=</span> nb<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>        grid<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> count<br/>        <span class=\"kw1\">if</span> solve<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> c<span class=\"sy1\">,</span> count<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span><br/>        grid<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> neighbors<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> c <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>nbrs <span class=\"sy1\">[][</span><span class=\"nu0\">3</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> m <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> moves <span class=\"sy1\">{</span><br/>        x <span class=\"sy2\">:=</span> m<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>        y <span class=\"sy2\">:=</span> m<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>        <span class=\"kw1\">if</span> grid<span class=\"sy1\">[</span>r<span class=\"sy3\">+</span>y<span class=\"sy1\">][</span>c<span class=\"sy3\">+</span>x<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            num <span class=\"sy2\">:=</span> countNeighbors<span class=\"sy1\">(</span>r<span class=\"sy3\">+</span>y<span class=\"sy1\">,</span> c<span class=\"sy3\">+</span>x<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>            nbrs <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>nbrs<span class=\"sy1\">,</span> <span class=\"sy1\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span>r <span class=\"sy3\">+</span> y<span class=\"sy1\">,</span> c <span class=\"sy3\">+</span> x<span class=\"sy1\">,</span> num<span class=\"sy1\">})</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> countNeighbors<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> c <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    num <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> m <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> moves <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> grid<span class=\"sy1\">[</span>r<span class=\"sy3\">+</span>m<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]][</span>c<span class=\"sy3\">+</span>m<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            num<span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> num<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> printResult<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> row <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> grid <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> row <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> <span class=\"sy3\">==</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"   \"</span><span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%2d \"</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    nRows <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>board<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">6</span><br/>    nCols <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>board<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span> <span class=\"sy3\">+</span> <span class=\"nu0\">6</span><br/>    grid <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> nRows<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> r <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> r &lt; nRows<span class=\"sy1\">;</span> r<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        grid<span class=\"sy1\">[</span>r<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> nCols<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> c <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> c &lt; nCols<span class=\"sy1\">;</span> c<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            grid<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> c <span class=\"sy2\">:=</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span> c &lt; nCols<span class=\"sy3\">-</span><span class=\"nu0\">3</span><span class=\"sy1\">;</span> c<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> r &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">3</span> &amp;&amp; r &lt; nRows<span class=\"sy3\">-</span><span class=\"nu0\">3</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">if</span> board<span class=\"sy1\">[</span>r<span class=\"sy3\">-</span><span class=\"nu0\">3</span><span class=\"sy1\">][</span>c<span class=\"sy3\">-</span><span class=\"nu0\">3</span><span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"st0\">'0'</span> <span class=\"sy1\">{</span><br/>                    grid<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>                    totalToFill<span class=\"sy2\">++</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    pos<span class=\"sy1\">,</span> r<span class=\"sy1\">,</span> c <span class=\"sy2\">:=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>            pos<span class=\"sy2\">++</span><br/>            r <span class=\"sy2\">=</span> pos <span class=\"sy3\">/</span> nCols<br/>            c <span class=\"sy2\">=</span> pos <span class=\"sy3\">%</span> nCols<br/>            <span class=\"kw1\">if</span> grid<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">!=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        grid<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> solve<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> c<span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>        grid<span class=\"sy1\">[</span>r<span class=\"sy1\">][</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">if</span> pos &gt;<span class=\"sy2\">=</span> nRows<span class=\"sy3\">*</span>nCols <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    printResult<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Icon and Unicon", "loc": 98, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw2\">global</span> nCells<span class=\"sy0\">,</span> cMap<span class=\"sy0\">,</span> best<br/><span class=\"kw1\">record</span> Pos<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    puzzle <span class=\"sy0\">:=</span> showPuzzle<span class=\"br0\">(</span><span class=\"st0\">\"Input\"</span><span class=\"sy0\">,</span>readPuzzle<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span>findStart<span class=\"br0\">(</span>puzzle<span class=\"br0\">)</span><span class=\"sy0\">,&amp;</span><span class=\"kw3\">null</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    showPuzzle<span class=\"br0\">(</span><span class=\"st0\">\"Output\"</span><span class=\"sy0\">,</span> solvePuzzle<span class=\"br0\">(</span>puzzle<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"No solution!\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> readPuzzle<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\"># Start with a reduced puzzle space</span><br/>    p <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    nCells <span class=\"sy0\">:=</span> maxCols <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">every</span> line <span class=\"sy0\">:=</span> <span class=\"sy0\">!&amp;</span><span class=\"kw3\">input</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">put</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"sy0\">:</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">|</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">|</span> gencells<span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">|</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        maxCols <span class=\"sy0\">&lt;:=</span> <span class=\"sy0\">*</span>p<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">|</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"co1\"># Now normalize all rows to the same length</span><br/>    <span class=\"kw1\">every</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy0\">*</span>p <span class=\"kw1\">do</span> p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"sy0\">:</span> <span class=\"sy0\">!</span>p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"sy0\">|-</span><span class=\"nu0\">1</span><span class=\"sy0\">\\</span><span class=\"br0\">(</span>maxCols <span class=\"sy0\">-</span> <span class=\"sy0\">*</span>p<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> p<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> gencells<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">static</span> WS<span class=\"sy0\">,</span> NWS<br/>    <span class=\"kw1\">initial</span> <span class=\"br0\">{</span><br/>        NWS <span class=\"sy0\">:=</span> <span class=\"sy0\">~</span><span class=\"br0\">(</span>WS <span class=\"sy0\">:=</span> <span class=\"st0\">\" <span class=\"es0\">\\t</span>\"</span><span class=\"br0\">)</span><br/>        cMap <span class=\"sy0\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span>     <span class=\"co1\"># Map to/from internal model</span><br/>        cMap<span class=\"br0\">[</span><span class=\"st0\">\"#\"</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>  cMap<span class=\"br0\">[</span><span class=\"st0\">\"_\"</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span>  <span class=\"nu0\">0</span><br/>        cMap<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>  <span class=\"sy0\">:=</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span> cMap<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>   <span class=\"sy0\">:=</span> <span class=\"st0\">\"_\"</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    s <span class=\"sy0\">?</span> <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> <span class=\"kw4\">pos</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            w <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span>WS<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">|</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span>NWS<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">break</span><br/>            w <span class=\"sy0\">:=</span> <span class=\"kw4\">numeric</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>cMap<span class=\"br0\">[</span>w<span class=\"br0\">]</span><span class=\"sy0\">|</span>w<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">~=</span> w <span class=\"kw1\">then</span> nCells <span class=\"sy0\">+:=</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">suspend</span> w<br/>            <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> showPuzzle<span class=\"br0\">(</span>label<span class=\"sy0\">,</span> p<span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span>label<span class=\"sy0\">,</span><span class=\"st0\">\" with \"</span><span class=\"sy0\">,</span>nCells<span class=\"sy0\">,</span><span class=\"st0\">\" cells:\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> r <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>p <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">every</span> c <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>r <span class=\"kw1\">do</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"kw4\">right</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>cMap<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">|</span>c<span class=\"br0\">)</span><span class=\"sy0\">,*</span>nCells<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> p<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> findStart<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>p<span class=\"br0\">[</span>r <span class=\"sy0\">:=</span> <span class=\"sy0\">!*</span>p<span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">:=</span> <span class=\"sy0\">!*</span>p<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> Pos<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> solvePuzzle<span class=\"br0\">(</span>puzzle<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> path <span class=\"sy0\">:=</span> <span class=\"sy0\">\\</span>best <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">repeat</span> <span class=\"br0\">{</span><br/>            loc <span class=\"sy0\">:=</span> path<span class=\"sy0\">.</span><span class=\"me1\">getLoc</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            puzzle<span class=\"br0\">[</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"br0\">]</span><span class=\"br0\">[</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> path<span class=\"sy0\">.</span><span class=\"me1\">getVal</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            path <span class=\"sy0\">:=</span> <span class=\"sy0\">\\</span>path<span class=\"sy0\">.</span><span class=\"me1\">getParent</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">break</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> puzzle<br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">class</span> QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> loc<span class=\"sy0\">,</span> <span class=\"kw4\">parent</span><span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> getVal<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> val<span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> getLoc<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> loc<span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> getParent<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> <span class=\"kw4\">parent</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">method</span> atEnd<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> nCells <span class=\"sy0\">=</span> val<span class=\"sy0\">;</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> visit<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy0\">/</span>best <span class=\"sy0\">&amp;</span> validPos<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> Pos<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> validPos<span class=\"br0\">(</span>r<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><br/>        v <span class=\"sy0\">:=</span> val<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>        xv <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> puzzle<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">fail</span><br/>        <span class=\"kw1\">if</span> xv <span class=\"sy0\">=</span> <span class=\"br0\">(</span>v<span class=\"sy0\">|</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span>  <span class=\"co1\"># make sure this path hasn't already gone there</span><br/>            ancestor <span class=\"sy0\">:=</span> self<br/>            <span class=\"kw1\">while</span> xl <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>ancestor <span class=\"sy0\">:=</span> <span class=\"sy0\">\\</span>ancestor<span class=\"sy0\">.</span><span class=\"me1\">getParent</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">getLoc</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>xl<span class=\"sy0\">.</span><span class=\"me1\">r</span> <span class=\"sy0\">=</span> r<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>xl<span class=\"sy0\">.</span><span class=\"me1\">c</span> <span class=\"sy0\">=</span> c<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span><br/>            <span class=\"kw1\">return</span><br/>            <span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">initially</span><br/>    val <span class=\"sy0\">:=</span> val<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> atEnd<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> best <span class=\"sy0\">:=</span> self<br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>   self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">,</span>  loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">+</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>   self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">,</span>  loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">+</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/>    QMouse<span class=\"br0\">(</span>puzzle<span class=\"sy0\">,</span> visit<span class=\"br0\">(</span>loc<span class=\"sy0\">.</span><span class=\"me1\">r</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>loc<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> self<span class=\"sy0\">,</span> val<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Java", "loc": 109, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Hopido <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> board <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <span class=\"st0\">\".00.00.\"</span>,<br/>        <span class=\"st0\">\"0000000\"</span>,<br/>        <span class=\"st0\">\"0000000\"</span>,<br/>        <span class=\"st0\">\".00000.\"</span>,<br/>        <span class=\"st0\">\"..000..\"</span>,<br/>        <span class=\"st0\">\"...0...\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> moves <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">3</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">3</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> grid<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> totalToFill<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> nRows <span class=\"sy0\">=</span> board.<span class=\"me1\">length</span> <span class=\"sy0\">+</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> nCols <span class=\"sy0\">=</span> board<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        grid <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>nRows<span class=\"br0\">]</span><span class=\"br0\">[</span>nCols<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> nRows<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">fill</span><span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> nCols <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">3</span> <span class=\"sy0\">&amp;&amp;</span> r <span class=\"sy0\">&lt;</span> nRows <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>r <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>c <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                        totalToFill<span class=\"sy0\">++;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> pos <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, r, c<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>                pos<span class=\"sy0\">++;</span><br/>                r <span class=\"sy0\">=</span> pos <span class=\"sy0\">/</span> nCols<span class=\"sy0\">;</span><br/>                c <span class=\"sy0\">=</span> pos <span class=\"sy0\">%</span> nCols<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>solve<span class=\"br0\">(</span>r, c, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">&lt;</span> nRows <span class=\"sy0\">*</span> nCols<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        printResult<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> solve<span class=\"br0\">(</span><span class=\"kw4\">int</span> r, <span class=\"kw4\">int</span> c, <span class=\"kw4\">int</span> count<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>count <span class=\"sy0\">&gt;</span> totalToFill<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> nbrs <span class=\"sy0\">=</span> neighbors<span class=\"br0\">(</span>r, c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nbrs.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> count <span class=\"sy0\">!=</span> totalToFill<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acollections+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Collections</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">(</span>nbrs, <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> b<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> nb <span class=\"sy0\">:</span> nbrs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            r <span class=\"sy0\">=</span> nb<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            c <span class=\"sy0\">=</span> nb<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> count<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>solve<span class=\"br0\">(</span>r, c, count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> neighbors<span class=\"br0\">(</span><span class=\"kw4\">int</span> r, <span class=\"kw4\">int</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> nbrs <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m <span class=\"sy0\">:</span> moves<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> m<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> m<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r <span class=\"sy0\">+</span> y<span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">+</span> x<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> num <span class=\"sy0\">=</span> countNeighbors<span class=\"br0\">(</span>r <span class=\"sy0\">+</span> y, c <span class=\"sy0\">+</span> x<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                nbrs.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span>r <span class=\"sy0\">+</span> y, c <span class=\"sy0\">+</span> x, num<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> nbrs<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> countNeighbors<span class=\"br0\">(</span><span class=\"kw4\">int</span> r, <span class=\"kw4\">int</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> num <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m <span class=\"sy0\">:</span> moves<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r <span class=\"sy0\">+</span> m<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">+</span> m<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                num<span class=\"sy0\">++;</span><br/>        <span class=\"kw1\">return</span> num<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> printResult<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> row <span class=\"sy0\">:</span> grid<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">:</span> row<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%2s \"</span>, <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">else</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%2d \"</span>, i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 96, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.0</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> board <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>    <span class=\"st0\">\".00.00.\"</span>,<br/>    <span class=\"st0\">\"0000000\"</span>,<br/>    <span class=\"st0\">\"0000000\"</span>,<br/>    <span class=\"st0\">\".00000.\"</span>,<br/>    <span class=\"st0\">\"..000..\"</span>,<br/>    <span class=\"st0\">\"...0...\"</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> moves <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>    -<span class=\"nu0\">3</span> to <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span> to  <span class=\"nu0\">3</span>,  <span class=\"nu0\">3</span> to <span class=\"nu0\">0</span>,  <span class=\"nu0\">0</span> to -<span class=\"nu0\">3</span>,<br/>     <span class=\"nu0\">2</span> to <span class=\"nu0\">2</span>, <span class=\"nu0\">2</span> to -<span class=\"nu0\">2</span>, -<span class=\"nu0\">2</span> to <span class=\"nu0\">2</span>, -<span class=\"nu0\">2</span> to -<span class=\"nu0\">2</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/>lateinit <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> grid<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>IntArray<span class=\"sy0\">&gt;</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> totalToFill <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>fun solve<span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Int, c<span class=\"sy0\">:</span> Int, count<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>count <span class=\"sy0\">&gt;</span> totalToFill<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nbrs <span class=\"sy0\">=</span> neighbors<span class=\"br0\">(</span>r, c<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>nbrs.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> count <span class=\"sy0\">!=</span> totalToFill<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    nbrs.<span class=\"me1\">sortBy</span> <span class=\"br0\">{</span> it<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>nb in nbrs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rr <span class=\"sy0\">=</span> nb<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cc <span class=\"sy0\">=</span> nb<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        grid<span class=\"br0\">[</span>rr<span class=\"br0\">]</span><span class=\"br0\">[</span>cc<span class=\"br0\">]</span> <span class=\"sy0\">=</span> count<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>solve<span class=\"br0\">(</span>rr, cc, count + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>        grid<span class=\"br0\">[</span>rr<span class=\"br0\">]</span><span class=\"br0\">[</span>cc<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun neighbors<span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Int, c<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> MutableList<span class=\"sy0\">&lt;</span>IntArray<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nbrs <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>IntArray<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>m in moves<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x <span class=\"sy0\">=</span> m.<span class=\"me1\">first</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y <span class=\"sy0\">=</span> m.<span class=\"me1\">second</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r + y<span class=\"br0\">]</span><span class=\"br0\">[</span>c + x<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> num <span class=\"sy0\">=</span> countNeighbors<span class=\"br0\">(</span>r + y, c + x<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>            nbrs.<span class=\"me1\">add</span><span class=\"br0\">(</span>intArrayOf<span class=\"br0\">(</span>r + y, c + x, num<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> nbrs<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun countNeighbors<span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Int, c<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> num <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>m in moves<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>r + m.<span class=\"me1\">second</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c + m.<span class=\"me1\">first</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> num++<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> num<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun printResult<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>row in grid<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in row<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            print<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"   \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"%2d \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nRows <span class=\"sy0\">=</span> board.<span class=\"me1\">size</span> + <span class=\"nu0\">6</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nCols <span class=\"sy0\">=</span> board<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span> + <span class=\"nu0\">6</span><br/>    grid <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>nRows<span class=\"br0\">)</span> <span class=\"br0\">{</span> IntArray<span class=\"br0\">(</span>nCols<span class=\"br0\">)</span> <span class=\"br0\">{</span> -<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>r in <span class=\"nu0\">0</span> until nRows<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in <span class=\"nu0\">3</span> until nCols - <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>r in <span class=\"nu0\">3</span> until nRows - <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>board<span class=\"br0\">[</span>r - <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c - <span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    grid<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>                    totalToFill++<br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> pos <span class=\"sy0\">=</span> -<span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> rr<span class=\"sy0\">:</span> Int<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> cc<span class=\"sy0\">:</span> Int<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>            pos++<br/>            rr <span class=\"sy0\">=</span> pos / nCols<br/>            cc <span class=\"sy0\">=</span> pos <span class=\"sy0\">%</span> nCols<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>grid<span class=\"br0\">[</span>rr<span class=\"br0\">]</span><span class=\"br0\">[</span>cc<span class=\"br0\">]</span> <span class=\"sy0\">==</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>        grid<span class=\"br0\">[</span>rr<span class=\"br0\">]</span><span class=\"br0\">[</span>cc<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>solve<span class=\"br0\">(</span>rr, cc, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> break<br/>        grid<span class=\"br0\">[</span>rr<span class=\"br0\">]</span><span class=\"br0\">[</span>cc<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>pos <span class=\"sy0\">&lt;</span> nRows <span class=\"sy0\">*</span> nCols<span class=\"br0\">)</span><br/>\u00a0<br/>    printResult<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 98, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@adjacent</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>      <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>         <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>   <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>                <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>      <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>        <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>               <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>solveboard q<span class=\"sy0\">:</span>to<span class=\"sy0\">/</span><span class=\"kw2\">END</span><span class=\"sy0\">/;</span><br/>    <span class=\"sy0\">.</span> _ _ <span class=\"sy0\">.</span> _ _ <span class=\"sy0\">.</span><br/>    _ _ _ _ _ _ _<br/>    _ _ _ _ _ _ _<br/>    <span class=\"sy0\">.</span> _ _ _ _ _ <span class=\"sy0\">.</span><br/>    <span class=\"sy0\">.</span> <span class=\"sy0\">.</span> _ _ _ <span class=\"sy0\">.</span> <span class=\"sy0\">.</span><br/>    <span class=\"sy0\">.</span> <span class=\"sy0\">.</span> <span class=\"sy0\">.</span> <span class=\"nu0\">1</span> <span class=\"sy0\">.</span> <span class=\"sy0\">.</span> <span class=\"sy0\">.</span><br/>    <span class=\"kw2\">END</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> solveboard<span class=\"br0\">(</span><span class=\"re0\">$board</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$max</span> <span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">$board</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"br0\">(</span><span class=\"co2\">/\\w+/</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$width</span> <span class=\"sy0\">=</span> <span class=\"re0\">$max</span><span class=\"sy0\">.</span><span class=\"kw3\">chars</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@grid</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@known</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@neigh</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@degree</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"re0\">@grid</span> <span class=\"sy0\">=</span> <span class=\"re0\">$board</span><span class=\"sy0\">.</span><span class=\"me1\">lines</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$line</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">[</span> <span class=\"re0\">$line</span><span class=\"sy0\">.</span><span class=\"kw3\">words</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"co2\">/^_/</span> <span class=\"sy0\">??</span> <span class=\"nu0\">0</span> <span class=\"sy0\">!!</span> <span class=\"co2\">/^\\./</span> <span class=\"sy0\">??</span> Rat <span class=\"sy0\">!!</span> <span class=\"re0\">$_</span> <span class=\"br0\">}</span> <span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> neighbors<span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span> <span class=\"sy0\">--&gt;</span> List<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        eager gather <span class=\"kw1\">for</span> <span class=\"re0\">@adjacent</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$y1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$y</span> <span class=\"sy0\">+</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$x1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            take <span class=\"br0\">[</span><span class=\"re0\">$y1</span><span class=\"sy0\">,</span><span class=\"re0\">$x1</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"kw3\">defined</span> <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@grid</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$y</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$x</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$v</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">@known</span><span class=\"br0\">[</span><span class=\"re0\">$v</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw3\">defined</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">@neigh</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> neighbors<span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"re0\">@degree</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">@neigh</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[0H<span class=\"es0\">\\e</span>[0J\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$tries</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    try_fill <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">@known</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> try_fill<span class=\"br0\">(</span><span class=\"re0\">$v</span><span class=\"sy0\">,</span> <span class=\"re0\">$coord</span> <span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">--&gt;</span> Bool<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">True</span> <span class=\"kw1\">if</span> <span class=\"re0\">$v</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$max</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$tries</span><span class=\"sy0\">++;</span><br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$old</span> <span class=\"sy0\">=</span> <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">False</span> <span class=\"kw1\">if</span> <span class=\"sy0\">+</span><span class=\"re0\">$old</span> <span class=\"kw1\">and</span> <span class=\"re0\">$old</span> <span class=\"sy0\">!=</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">False</span> <span class=\"kw1\">if</span> <span class=\"re0\">@known</span><span class=\"br0\">[</span><span class=\"re0\">$v</span><span class=\"br0\">]</span> <span class=\"kw1\">and</span> <span class=\"re0\">@known</span><span class=\"br0\">[</span><span class=\"re0\">$v</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>eqv <span class=\"re0\">$coord</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span>               <span class=\"co1\"># conjecture grid value</span><br/>\u00a0<br/>        <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[0H\"</span><span class=\"sy0\">;</span>                    <span class=\"co1\"># show conjectured board</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@grid</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$r</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">say</span> <span class=\"kw1\">do</span> <span class=\"kw1\">for</span> <span class=\"sy0\">@</span><span class=\"re0\">$r</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">when</span> Rat <span class=\"br0\">{</span> <span class=\"st_h\">' '</span> <span class=\"kw1\">x</span> <span class=\"re0\">$width</span> <span class=\"br0\">}</span><br/>                <span class=\"kw1\">when</span> <span class=\"nu0\">0</span>   <span class=\"br0\">{</span> <span class=\"st_h\">'_'</span> <span class=\"kw1\">x</span> <span class=\"re0\">$width</span> <span class=\"br0\">}</span><br/>                <span class=\"kw1\">default</span>  <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"%{$width}d\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@neighbors</span> <span class=\"sy0\">=</span> <span class=\"re0\">@neigh</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@degrees</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@neighbors</span> <span class=\"sy0\">-&gt;</span> \\n <span class=\"br0\">[</span><span class=\"re0\">$yy</span><span class=\"sy0\">,</span><span class=\"re0\">$xx</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <span class=\"sy0\">--</span><span class=\"re0\">@degree</span><span class=\"br0\">[</span><span class=\"re0\">$yy</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$xx</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>  <span class=\"co1\"># conjecture new degrees</span><br/>            <span class=\"kw3\">push</span> <span class=\"re0\">@degrees</span><span class=\"br0\">[</span><span class=\"re0\">$d</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> n<span class=\"sy0\">;</span>         <span class=\"co1\"># and categorize by degree</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@degrees</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span><span class=\"sy0\">*.</span><span class=\"kw3\">defined</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@ties</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"re0\">@ties</span><span class=\"sy0\">.</span><span class=\"kw3\">reverse</span> <span class=\"br0\">{</span>           <span class=\"co1\"># reverse works better for this hidato anyway</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw1\">True</span> <span class=\"kw1\">if</span> try_fill <span class=\"re0\">$v</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@neighbors</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re0\">$yy</span><span class=\"sy0\">,</span><span class=\"re0\">$xx</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"sy0\">++</span><span class=\"re0\">@degree</span><span class=\"br0\">[</span><span class=\"re0\">$yy</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$xx</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>          <span class=\"co1\"># undo degree conjectures</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"re0\">@grid</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$old</span><span class=\"sy0\">;</span>             <span class=\"co1\"># undo grid value conjecture</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">False</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"$tries tries\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 61, "block": "<pre class=\"text highlighted_source\">sequence board<br/>\u00a0<br/>integer limit, tries<br/>\u00a0<br/>constant ROW = 1, COL = 2<br/>constant moves = {{-2,-2},{-2,2},{2,-2},{2,2},{-3,0},{3,0},{0,-3},{0,3}}<br/>\u00a0<br/>function solve(integer row, integer col, integer n)<br/>integer nrow, ncol<br/>    tries+= 1<br/>    if n&gt;limit then return 1 end if<br/>    for move=1 to length(moves) do<br/>        nrow = row+moves[move][ROW]<br/>        ncol = col+moves[move][COL]*3<br/>        if nrow&gt;=1 and nrow&lt;=length(board) <br/>        and ncol&gt;=1 and ncol&lt;=length(board[row])<br/>        and board[nrow][ncol]=' ' then<br/>            board[nrow][ncol-1..ncol] = sprintf(\"%2d\",n)<br/>            if solve(nrow,ncol,n+1) then return 1 end if<br/>            board[nrow][ncol-1..ncol] = \"  \"<br/>        end if<br/>    end for<br/>    return 0<br/>end function<br/>\u00a0<br/>procedure Hopido(sequence s, integer w, integer h)<br/>integer x, y<br/>atom t0 = time()<br/>    board = split(s,'\\n')<br/>    limit = 0<br/>    for x=1 to h do<br/>        for y=3 to w*3 by 3 do<br/>            if board[x][y]='0' then<br/>                board[x][y] = ' '<br/>                limit += 1<br/>            end if<br/>        end for<br/>    end for<br/>    while 1 do<br/>        x = rand(h)<br/>        y = rand(w)*3<br/>        if board[x][y]=' ' then exit end if<br/>    end while<br/>    board[x][y] = '1'<br/>    tries = 0<br/>    if solve(x,y,2) then<br/>        puts(1,join(board,\"\\n\"))<br/>        printf(1,\"\\nsolution found in\u00a0%d tries (%3.2fs)\\n\",{tries,time()-t0})<br/>    else<br/>        puts(1,\"no solutions found\\n\")<br/>    end if<br/>end procedure<br/>\u00a0<br/>constant board1 = \"\"\"<br/>  .  0  0  .  0  0  .<br/>  0  0  0  0  0  0  0<br/>  0  0  0  0  0  0  0<br/>  .  0  0  0  0  0  .<br/>  .  .  0  0  0  .  .<br/>  .  .  .  0  .  .  .\"\"\"<br/>Hopido(board1,7,6)</pre>"}, {"lang": "Python", "loc": 65, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">from</span> <span class=\"kw3\">sys</span> <span class=\"kw1\">import</span> stdout<br/>\u00a0<br/>neighbours <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>-<span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> -<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>-<span class=\"nu0\">2</span><span class=\"sy0\">,</span> -<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>-<span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> -<span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>cnt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>pWid <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>pHei <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> is_valid<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> -<span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> a <span class=\"sy0\">&lt;</span> pWid <span class=\"kw1\">and</span> -<span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> b <span class=\"sy0\">&lt;</span> pHei<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> iterate<span class=\"br0\">(</span>pa<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> v<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> v <span class=\"sy0\">&gt;</span> cnt:<br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>neighbours<span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>        a <span class=\"sy0\">=</span> x + neighbours<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        b <span class=\"sy0\">=</span> y + neighbours<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> is_valid<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"kw1\">and</span> pa<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>            pa<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">=</span> v<br/>            r <span class=\"sy0\">=</span> iterate<span class=\"br0\">(</span>pa<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> v + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> r <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>                <span class=\"kw1\">return</span> r<br/>            pa<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> solve<span class=\"br0\">(</span>pz<span class=\"sy0\">,</span> w<span class=\"sy0\">,</span> h<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">global</span> cnt<span class=\"sy0\">,</span> pWid<span class=\"sy0\">,</span> pHei<br/>\u00a0<br/>    pa <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>-<span class=\"nu0\">1</span> <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    f <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    pWid <span class=\"sy0\">=</span> w<br/>    pHei <span class=\"sy0\">=</span> h<br/>    <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>h<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> pz<span class=\"br0\">[</span>f<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"1\"</span>:<br/>                pa<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>                cnt +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            f +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>h<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> pa<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>                pa<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>                <span class=\"kw1\">if</span> <span class=\"nu0\">1</span> <span class=\"sy0\">==</span> iterate<span class=\"br0\">(</span>pa<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>:<br/>                    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> pa<br/>                pa<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> pa<br/>\u00a0<br/>r <span class=\"sy0\">=</span> solve<span class=\"br0\">(</span><span class=\"st0\">\"011011011111111111111011111000111000001000\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> r<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>    <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> r<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> -<span class=\"nu0\">1</span>:<br/>                stdout.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"   \"</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">else</span>:<br/>                stdout.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">\" {:0{}d}\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>r<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">else</span>:<br/>    stdout.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"No solution!\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 18, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require \"hidato-family-solver.rkt\")<br/>\u00a0<br/>(define hoppy-moore-neighbour-offsets<br/>  '((+3 0) (-3 0) (0 +3) (0 -3) (+2 +2) (-2 -2) (-2 +2) (+2 -2)))<br/>\u00a0<br/>(define solve-hopido (solve-hidato-family hoppy-moore-neighbour-offsets))<br/>\u00a0<br/>(displayln<br/> (puzzle-&gt;string<br/>  (solve-hopido<br/>   #(#(_ 0 0 _ 0 0 _)<br/>     #(0 0 0 0 0 0 0)<br/>     #(0 0 0 0 0 0 0)<br/>     #(_ 0 0 0 0 0 _)<br/>     #(_ _ 0 0 0 _ _)<br/>     #(_ _ _ 0 _ _ _)))))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 56, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program solves a Hopido puzzle,  it also displays the puzzle  and  the solution. */</span><br/><span class=\"kw1\">call</span> <span class=\"kw6\">time</span> <span class=\"st0\">'Reset'</span>                                <span class=\"coMULTI\">/*reset the REXX elapsed timer to zero.*/</span><br/>maxR=<span class=\"nu0\">0</span>;    maxC=<span class=\"nu0\">0</span>;    maxX=<span class=\"nu0\">0</span>;     minR=9e9;      minC=9e9;    minX=9e9;    cells=<span class=\"nu0\">0</span>;    @<span class=\"sy0\">.</span>=<br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> xxx                                    <span class=\"coMULTI\">/*get the cell definitions from the CL.*/</span><br/>xxx=<span class=\"kw6\">translate</span><span class=\"br0\">(</span>xxx, , <span class=\"st0\">\"/\\;:_\"</span>, <span class=\"st0\">','</span><span class=\"br0\">)</span>               <span class=\"coMULTI\">/*also allow other characters as comma.*/</span><br/>\u00a0<br/>               <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> xxx<span class=\"sy0\">\\</span>=<span class=\"st0\">''</span>;       <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  xxx    r  c  marks  <span class=\"st0\">','</span>  xxx<br/>                   <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> marks<span class=\"sy0\">\\</span>=<span class=\"st0\">''</span>;               <a class=\"__cf_email__\" data-cfemail=\"f6a9cbb6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c<br/>                   <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  marks  x  marks<br/>                   <span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>x,<span class=\"st0\">'N'</span><span class=\"br0\">)</span>   <span class=\"kw3\">then</span>  x=x<span class=\"sy0\">/</span><span class=\"nu0\">1</span>                   <span class=\"coMULTI\">/*normalize   X.  */</span><br/>                   minR=<span class=\"kw6\">min</span><span class=\"br0\">(</span>minR,r<span class=\"br0\">)</span>; maxR=<span class=\"kw6\">max</span><span class=\"br0\">(</span>maxR,r<span class=\"br0\">)</span>;  minC=<span class=\"kw6\">min</span><span class=\"br0\">(</span>minC,c<span class=\"br0\">)</span>; maxC=<span class=\"kw6\">max</span><span class=\"br0\">(</span>maxC,c<span class=\"br0\">)</span><br/>                   <span class=\"kw1\">if</span> x==<span class=\"nu0\">1</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; \u00a0!r=r; \u00a0!c=c;  <span class=\"kw3\">end</span>              <span class=\"coMULTI\">/*the START cell. */</span><br/>                   <span class=\"kw1\">if</span> _<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span> <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> err <span class=\"st0\">\"cell at\"</span>  r  c  <span class=\"st0\">'is already occupied with:'</span> _<br/>                   @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c=x;   c=c+<span class=\"nu0\">1</span>;    cells=cells+<span class=\"nu0\">1</span>                 <span class=\"coMULTI\">/*assign a mark.  */</span><br/>                   <span class=\"kw1\">if</span> x==<span class=\"sy0\">.</span>              <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>                  <span class=\"coMULTI\">/*is a hole?  Skip*/</span><br/>                   <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>x,<span class=\"st0\">'W'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> err <span class=\"st0\">'illegal marker specified:'</span> x<br/>                   minX=<span class=\"kw6\">min</span><span class=\"br0\">(</span>minX,x<span class=\"br0\">)</span>;    maxX=<span class=\"kw6\">max</span><span class=\"br0\">(</span>maxX,x<span class=\"br0\">)</span>              <span class=\"coMULTI\">/*min and max  X. */</span><br/>                   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while marks\u00ac='' */</span><br/>               <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*while xxx  \u00ac='' */</span><br/><span class=\"kw1\">call</span> show                                        <span class=\"coMULTI\">/* [\u2193]  is used for making fast moves. */</span><br/>Nr = <span class=\"st0\">'0  3   0  -3    -2   2   2  -2'</span>            <span class=\"coMULTI\">/*possible  row     for the next move. */</span><br/>Nc = <span class=\"st0\">'3  0  -3   0     2  -2   2  -2'</span>            <span class=\"coMULTI\">/*   \"      column   \"   \"    \"    \"   */</span><br/>pMoves=<span class=\"kw6\">words</span><span class=\"br0\">(</span>Nr<span class=\"br0\">)</span>                                 <span class=\"coMULTI\">/*the number of possible moves.  */</span><br/>                   <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> pMoves;   Nr<span class=\"sy0\">.</span>i=<span class=\"kw6\">word</span><span class=\"br0\">(</span>Nr, i<span class=\"br0\">)</span>;   Nc<span class=\"sy0\">.</span>i=<span class=\"kw6\">word</span><span class=\"br0\">(</span>Nc,i<span class=\"br0\">)</span>;   <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*i*/</span><br/><span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>next<span class=\"br0\">(</span><span class=\"nu0\">2</span>,!r,!c<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> err  <span class=\"st0\">'No solution possible for this Hopido puzzle.'</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'A solution for the Hopido exists.'</span>;      <span class=\"kw1\">say</span>;               <span class=\"kw1\">call</span> show<br/>etime= <span class=\"kw6\">format</span><span class=\"br0\">(</span><span class=\"kw6\">time</span><span class=\"br0\">(</span><span class=\"st0\">'Elapsed'</span><span class=\"br0\">)</span>, , <span class=\"nu0\">2</span><span class=\"br0\">)</span>              <span class=\"coMULTI\">/*obtain the elapsed time (in seconds).*/</span><br/><span class=\"kw1\">if</span> etime<span class=\"sy0\">&lt;.</span>1  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'and took less than  1/10  of a second.'</span><br/>             <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> <span class=\"st0\">'and took'</span>       etime         <span class=\"st0\">\"seconds.\"</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>err:  <span class=\"kw1\">say</span>;      <span class=\"kw1\">say</span> <span class=\"st0\">'***error*** (from Hopido): '</span>  <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;          <span class=\"kw1\">say</span>;           <span class=\"kw1\">exit</span> <span class=\"nu0\">13</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>next: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> @<span class=\"sy0\">.</span> Nr<span class=\"sy0\">.</span> Nc<span class=\"sy0\">.</span> cells pMoves;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> #,r,c;   ##=#+<span class=\"nu0\">1</span><br/>           <span class=\"kw1\">do</span> t=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> pMoves                                   <span class=\"coMULTI\">/* [\u2193]  try some moves. */</span><br/>           <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span>  r+Nr<span class=\"sy0\">.</span>t c+Nc<span class=\"sy0\">.</span>t  <span class=\"kw2\">with</span> nr nc  <span class=\"coMULTI\">/*next move co\u00f6rdinates*/</span><br/>           <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>nr<span class=\"sy0\">.</span>nc==<span class=\"sy0\">.</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;                @<span class=\"sy0\">.</span>nr<span class=\"sy0\">.</span>nc=#     <span class=\"coMULTI\">/*let's try this move.  */</span><br/>                               <span class=\"kw1\">if</span> #==cells        <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>    <span class=\"coMULTI\">/*is this the last move?*/</span><br/>                               <span class=\"kw1\">if</span> next<span class=\"br0\">(</span>##,nr,nc<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>                               @<span class=\"sy0\">.</span>nr<span class=\"sy0\">.</span>nc=<span class=\"sy0\">.</span>                        <span class=\"coMULTI\">/*undo the above move.  */</span><br/>                               <span class=\"kw1\">iterate</span>                          <span class=\"coMULTI\">/*go &amp; try another move.*/</span><br/>                               <span class=\"kw3\">end</span><br/>           <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>nr<span class=\"sy0\">.</span>nc==#  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>                               <span class=\"coMULTI\">/*this a fill-in move\u00a0? */</span><br/>                               <span class=\"kw1\">if</span> #==cells        <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"coMULTI\">/*this is the last move.*/</span><br/>                               <span class=\"kw1\">if</span> next<span class=\"br0\">(</span>##,nr,nc<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"coMULTI\">/*a fill-in move.       */</span><br/>                               <span class=\"kw3\">end</span><br/>           <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*t*/</span><br/><span class=\"kw1\">return</span> <span class=\"nu0\">0</span>                                                        <span class=\"coMULTI\">/*This ain't working.   */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>show: <span class=\"kw1\">if</span> maxR<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <span class=\"sy0\">|</span> maxC<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> err  <span class=\"st0\">'no legal cell was specified.'</span><br/>      <span class=\"kw1\">if</span> minX<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span>           <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> err  <span class=\"st0\">'no  1  was specified for the puzzle start'</span><br/>      w=<span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"kw6\">length</span><span class=\"br0\">(</span>cells<span class=\"br0\">)</span><span class=\"br0\">)</span>;  <span class=\"kw1\">do</span>    r=maxR  <span class=\"kw2\">to</span> minR  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>; _=<br/>                                  <span class=\"kw1\">do</span> c=minC  <span class=\"kw2\">to</span> maxC;        _=_ <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c,w<span class=\"br0\">)</span>; <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*c*/</span><br/>                               <span class=\"kw1\">say</span> _<br/>                               <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*r*/</span><br/>      <span class=\"kw1\">say</span>;    <span class=\"kw1\">return</span></pre>"}, {"lang": "Ruby", "loc": 15, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'HLPsolver'</span><br/>\u00a0<br/>ADJACENT = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">3</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">3</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">2</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>board1 = <span class=\"co4\">&lt;&lt;EOS<br/>. 0 0 . 0 0 .<br/>0 0 0 0 0 0 0<br/>0 0 0 0 0 0 0<br/>. 0 0 0 0 0 .<br/>. . 0 0 0 . .<br/>. . . 1 . . .<br/>EOS</span><br/>t0 = <span class=\"kw4\">Time</span>.<span class=\"me1\">now</span><br/>HLPsolver.<span class=\"me1\">new</span><span class=\"br0\">(</span>board1<span class=\"br0\">)</span>.<span class=\"me1\">solve</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\" #{Time.now - t0} sec\"</span></pre>"}, {"lang": "Tcl", "loc": 96, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>\u00a0<br/>oo::<span class=\"me1\">class</span> create HopidoSolver <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> grid start limit<br/>    constructor <span class=\"br0\">{</span>puzzle<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> grid <span class=\"re0\">$puzzle</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> y <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$grid</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> x <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$grid</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">set</span> cell <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$grid</span> <span class=\"re0\">$y</span> <span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">]</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">set</span> start <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$y</span> <span class=\"re0\">$x</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw2\">incr</span> limit <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$cell</span><span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exist start<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> -code <span class=\"kw1\">error</span> <span class=\"st0\">\"no starting position found\"</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> moves <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">{</span><br/>\t            <span class=\"nu0\">0</span> -<span class=\"nu0\">3</span><br/>\t      -<span class=\"nu0\">2</span> -<span class=\"nu0\">2</span>      -<span class=\"nu0\">2</span> <span class=\"nu0\">2</span><br/>\t    -<span class=\"nu0\">3</span> <span class=\"nu0\">0</span>            <span class=\"nu0\">3</span> <span class=\"nu0\">0</span><br/>              -<span class=\"nu0\">2</span> <span class=\"nu0\">2</span>        <span class=\"nu0\">2</span> <span class=\"nu0\">2</span><br/>\t            <span class=\"nu0\">0</span> <span class=\"nu0\">3</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> Moves <span class=\"br0\">{</span>g r c<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> valid <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>dr dc<span class=\"br0\">}</span> <span class=\"br0\">[</span>my moves<span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> R <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$r</span> + <span class=\"re0\">$dr</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> C <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$c</span> + <span class=\"re0\">$dc</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$g</span> <span class=\"re0\">$R</span> <span class=\"re0\">$C</span><span class=\"br0\">]</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> valid <span class=\"re0\">$R</span> <span class=\"re0\">$C</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$valid</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> Solve <span class=\"br0\">{</span>g r c v<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lset</span> g <span class=\"re0\">$r</span> <span class=\"re0\">$c</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> v<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$v</span> <span class=\"sy0\">&gt;</span>= <span class=\"re0\">$limit</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$g</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>r c<span class=\"br0\">}</span> <span class=\"br0\">[</span>my Moves <span class=\"re0\">$g</span> <span class=\"re0\">$r</span> <span class=\"re0\">$c</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>my Solve <span class=\"re0\">$g</span> <span class=\"re0\">$r</span> <span class=\"re0\">$c</span> <span class=\"re0\">$v</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> -code <span class=\"kw1\">continue</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> solve <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> i<span class=\"br0\">]</span>==<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> grid <span class=\"br0\">[</span>my Solve <span class=\"re0\">$grid</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$start</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">return</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> -code <span class=\"kw1\">error</span> <span class=\"st0\">\"solution not possible\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> solution <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$grid</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> parsePuzzle <span class=\"br0\">{</span>str<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> line <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$str</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> trim <span class=\"re0\">$line</span><span class=\"br0\">]</span> eq <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t<span class=\"kw2\">lappend</span> rows <span class=\"br0\">[</span>lmap <span class=\"br0\">{</span>- c<span class=\"br0\">}</span> <span class=\"br0\">[</span><span class=\"kw2\">regexp</span> -all -inline <span class=\"br0\">{</span><span class=\"br0\">(</span>.<span class=\"br0\">)</span>\\s<span class=\"sy0\">?</span><span class=\"br0\">}</span> <span class=\"re0\">$line</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">string</span> map <span class=\"br0\">{</span><span class=\"st0\">\" \"</span> -<span class=\"nu0\">1</span> <span class=\"st0\">\".\"</span> -<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"re0\">$c</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> len <span class=\"br0\">[</span>tcl::<span class=\"me1\">mathfunc</span>::<span class=\"me1\">max</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"br0\">[</span>lmap r <span class=\"re0\">$rows</span> <span class=\"br0\">{</span><span class=\"kw2\">llength</span> <span class=\"re0\">$r</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$rows</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$rows</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$len</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lset</span> rows <span class=\"re0\">$i</span> end+<span class=\"nu0\">1</span> -<span class=\"nu0\">1</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$rows</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> showPuzzle <span class=\"br0\">{</span>grid name<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> row <span class=\"re0\">$grid</span> <span class=\"br0\">{</span><span class=\"kw1\">foreach</span> cell <span class=\"re0\">$row</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> c <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$cell</span><span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> len <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$c</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> u <span class=\"br0\">[</span><span class=\"kw2\">string</span> repeat <span class=\"st0\">\"_\"</span> <span class=\"re0\">$len</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"$name with $c cells\"</span><br/>    <span class=\"kw1\">foreach</span> row <span class=\"re0\">$grid</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\" \u00a0%s\"</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"br0\">[</span>lmap c <span class=\"re0\">$row</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">format</span> <span class=\"st0\">\"%*s\"</span> <span class=\"re0\">$len</span> <span class=\"br0\">[</span><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$c</span>==-<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"kw2\">list</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$c</span>==<span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> u<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> c<span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> puzzle <span class=\"br0\">[</span>parsePuzzle <span class=\"br0\">{</span><br/>. <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> . <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> .<br/><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>. <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> .<br/>. . <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> . .<br/>. . . <span class=\"nu0\">1</span> . . .<br/><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>showPuzzle <span class=\"re0\">$puzzle</span> <span class=\"st0\">\"Input\"</span><br/>HopidoSolver create hop <span class=\"re0\">$puzzle</span><br/>hop solve<br/>showPuzzle <span class=\"br0\">[</span>hop solution<span class=\"br0\">]</span> <span class=\"st0\">\"Output\"</span></pre>"}, {"lang": "zkl", "loc": 21, "block": "<pre class=\"text highlighted_source\">hi:=  // 0==empty cell, X==not a cell<br/>#&lt;&lt;&lt;<br/>\"   X 0 0 X 0 0 X<br/>    0 0 0 0 0 0 0<br/>    0 0 0 0 0 0 0<br/>    X 0 0 0 0 0 X<br/>    X X 0 0 0 X X<br/>    X X X 0 X X X\";<br/>#&lt;&lt;&lt;<br/>adjacent:=T( T(-3,0),<br/>      T(-2,-2),   T(-2,2),<br/>    T(0,-3),         T(0,3),<br/>       T(2,-2),   T(2,2),<br/>             T(3,0) );<br/>\u00a0<br/>puzzle:=Puzzle(hi,adjacent);<br/>puzzle.print_board();<br/>puzzle.solve();<br/>println();<br/>puzzle.print_board();<br/>println();</pre>"}]}