{"task": "Set_puzzle", "blocks": [{"lang": "Ada", "loc": 18, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">package</span> Set_Puzzle <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Three <span class=\"kw1\">is</span> <span class=\"kw3\">range</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">3</span>;<br/>   <span class=\"kw3\">type</span> Card <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Three;<br/>   <span class=\"kw3\">type</span> Cards <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Card;   <br/>   <span class=\"kw3\">type</span> Set <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Three<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Positive;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Deal_Cards<span class=\"br0\">(</span>Dealt: <span class=\"kw3\">out</span> Cards<span class=\"br0\">)</span>;<br/>   <span class=\"co1\">-- ouputs an array with disjoint cards</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> To_String<span class=\"br0\">(</span>C: Card<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String;<br/>\u00a0<br/>   <span class=\"kw3\">generic</span><br/>      <span class=\"kw3\">with</span> <span class=\"kw3\">procedure</span> Do_something<span class=\"br0\">(</span>C: Cards; S: Set<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">procedure</span> Find_Sets<span class=\"br0\">(</span>Given: Cards<span class=\"br0\">)</span>;<br/>   <span class=\"co1\">-- calls Do_Something once for each set it finds. </span><br/>\u00a0<br/><span class=\"kw1\">end</span> Set_Puzzle;</pre>"}, {"lang": "AutoHotkey", "loc": 104, "block": "<pre class=\"autohotkey highlighted_source\"><span class=\"co1\">; Generate deck; card encoding from Perl6</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">81</span><br/>\tdeck <span class=\"sy0\">.=</span> ToBase<span class=\"br0\">(</span><span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1111</span> <span class=\"st0\">\",\"</span><br/>deck <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>deck<span class=\"sy0\">,</span> <span class=\"st0\">\"3\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"4\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Shuffle</span><br/>deck <span class=\"sy0\">:=</span> shuffle<span class=\"br0\">(</span>deck<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/Variables.htm#Clipboard\"><span class=\"kw2\">clipboard</span></a> <span class=\"sy0\">:=</span> allValidSets<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> deck<span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/Variables.htm#Clipboard\"><span class=\"kw2\">clipboard</span></a> <span class=\"sy0\">:=</span> allValidSets<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> deck<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Render a hand (or any list) of cards</span><br/>PrettyHand<span class=\"br0\">(</span>hand<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t Color1<span class=\"sy0\">:=</span><span class=\"st0\">\"red\"</span><span class=\"sy0\">,</span>Color2<span class=\"sy0\">:=</span><span class=\"st0\">\"green\"</span><span class=\"sy0\">,</span>Color4<span class=\"sy0\">:=</span><span class=\"st0\">\"purple\"</span><br/>\t<span class=\"sy0\">,</span>Symbl1<span class=\"sy0\">:=</span><span class=\"st0\">\"oval\"</span><span class=\"sy0\">,</span>Symbl2<span class=\"sy0\">:=</span><span class=\"st0\">\"squiggle\"</span><span class=\"sy0\">,</span>Symbl4<span class=\"sy0\">:=</span><span class=\"st0\">\"diamond\"</span><br/>\t<span class=\"sy0\">,</span>Numbr1<span class=\"sy0\">:=</span><span class=\"st0\">\"one\"</span><span class=\"sy0\">,</span>Numbr2<span class=\"sy0\">:=</span><span class=\"st0\">\"two\"</span><span class=\"sy0\">,</span>Numbr4<span class=\"sy0\">:=</span><span class=\"st0\">\"three\"</span><br/>\t<span class=\"sy0\">,</span>Shape1<span class=\"sy0\">:=</span><span class=\"st0\">\"solid\"</span><span class=\"sy0\">,</span>Shape2<span class=\"sy0\">:=</span><span class=\"st0\">\"open\"</span><span class=\"sy0\">,</span>Shape4<span class=\"sy0\">:=</span><span class=\"st0\">\"striped\"</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> hand<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>\t\ts <span class=\"sy0\">.=</span> <span class=\"st0\">\"`t\"</span> Color<span class=\"re0\">%i1%</span> <span class=\"st0\">\"`t\"</span> Symbl<span class=\"re0\">%i2%</span> <span class=\"st0\">\"`t\"</span> Numbr<span class=\"re0\">%i3%</span> <span class=\"st0\">\"`t\"</span> Shape<span class=\"re0\">%i4%</span> <span class=\"st0\">\"`n\"</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">Return</span> s<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">; Get all unique valid sets of three cards in a hand.</span><br/>allValidSets<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> deck<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">While</span> j\u00a0!<span class=\"sy0\">=</span> m<br/>\t<span class=\"br0\">{</span><br/>\t\tj <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"sy0\">,</span>hand <span class=\"sy0\">:=</span> draw<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> deck<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span>s <span class=\"sy0\">:=</span> <span class=\"st0\">\"Dealt \"</span> n <span class=\"st0\">\" cards:`n\"</span> <span class=\"sy0\">.</span> prettyhand<span class=\"br0\">(</span>hand<span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> set<span class=\"sy0\">,</span> hand<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\t\tcomb <span class=\"sy0\">:=</span> comb<span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> comb<span class=\"sy0\">,</span> `n<br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%A_Space%</span><br/>\t\t\t<span class=\"kw1\">If</span> isValidSet<span class=\"br0\">(</span>set<span class=\"re0\">%i1%</span><span class=\"sy0\">,</span> set<span class=\"re0\">%i2%</span><span class=\"sy0\">,</span> set<span class=\"re0\">%i3%</span><span class=\"br0\">)</span><br/>\t\t\t\ts <span class=\"sy0\">.=</span> <span class=\"st0\">\"`nSet \"</span> <span class=\"sy0\">++</span>j <span class=\"st0\">\":`n\"</span> <span class=\"sy0\">.</span> prettyhand<span class=\"br0\">(</span>set<span class=\"re0\">%i1%</span> <span class=\"st0\">\",\"</span> set<span class=\"re0\">%i2%</span> <span class=\"st0\">\",\"</span> set<span class=\"re0\">%i3%</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">Return</span> s<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">; Convert n to arbitrary base using recursion</span><br/>toBase<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"br0\">{</span>  <span class=\"co1\">; n &gt;= 0, 1 &lt; b &lt; StrLen(t), t = digits</span><br/>\tStatic t <span class=\"sy0\">:=</span> <span class=\"st0\">\"0123456789ABCDEF\"</span><br/>\t<span class=\"kw1\">Return</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> b\u00a0? <span class=\"st0\">\"\"</span>\u00a0: ToBase<span class=\"br0\">(</span>n<span class=\"sy0\">//</span>b<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>t<span class=\"sy0\">,</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">; Knuth shuffle from http://rosettacode.org/wiki/Knuth_Shuffle#AutoHotkey</span><br/>shuffle<span class=\"br0\">(</span>list<span class=\"br0\">)</span> <span class=\"br0\">{</span>\t\t\t\t\t\t\t\t\t<span class=\"co1\">; shuffle comma separated list, converted to array</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a> a<span class=\"sy0\">,</span> list<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span>\t\t\t\t\t\t<span class=\"co1\">; make array (length = a0)</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% a0<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a> i<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> a0\t\t\t\t\t<span class=\"co1\">; swap item 1,2... with a random item to the right of it</span><br/>\t\tt <span class=\"sy0\">:=</span> a<span class=\"re0\">%i%</span><span class=\"sy0\">,</span> a<span class=\"re0\">%i%</span> <span class=\"sy0\">:=</span> a<span class=\"re0\">%A_Index%</span><span class=\"sy0\">,</span> a<span class=\"re0\">%A_Index%</span> <span class=\"sy0\">:=</span> t<br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% a0\t\t\t\t\t\t\t\t\t<span class=\"co1\">; construct string from sorted array</span><br/>\t\ts <span class=\"sy0\">.=</span> <span class=\"st0\">\",\"</span> <span class=\"sy0\">.</span> a<span class=\"re0\">%A_Index%</span><br/>\t<span class=\"kw1\">Return</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>\t\t\t\t\t\t\t<span class=\"co1\">; drop leading comma</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">; Randomly pick a hand of cards from the deck</span><br/>draw<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> deck<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% n<br/>\t<span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">81</span><br/>\t\tcards <span class=\"sy0\">:=</span> deck<br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> cards<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\t\t\t<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">=</span> i<span class=\"br0\">)</span>\u00a0? <span class=\"br0\">(</span>hand <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span>\u00a0: <span class=\"br0\">(</span>cards <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>\t\tdeck <span class=\"sy0\">:=</span> cards<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">Return</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>hand<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">; Test if a particular group of three cards is a valid set</span><br/>isValidSet<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> a<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> b<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> c<br/>\t<span class=\"kw1\">Return</span>\u00a0!<span class=\"br0\">(</span><span class=\"br0\">(</span>a1|b1|c1 ~<span class=\"sy0\">=</span> <span class=\"st0\">\"[3,5,6]\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>a2|b2|c2 ~<span class=\"sy0\">=</span> <span class=\"st0\">\"[3,5,6]\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>a3|b3|c3 ~<span class=\"sy0\">=</span> <span class=\"st0\">\"[3,5,6]\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>a4|b4|c4 ~<span class=\"sy0\">=</span> <span class=\"st0\">\"[3,5,6]\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">; Get all combinations, from http://rosettacode.org/wiki/Combinations#AutoHotkey</span><br/>comb<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>t<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; Generate all n choose t combinations of 1..n, lexicographically</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/IfLess.htm\"><span class=\"kw3\">IfLess</span></a> n<span class=\"sy0\">,</span><span class=\"re0\">%t%</span><span class=\"sy0\">,</span> <span class=\"kw1\">Return</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"re0\">%t%</span><br/>\t\tc<span class=\"re0\">%A_Index%</span> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\ti <span class=\"sy0\">:=</span> t<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> c<span class=\"re0\">%i%</span> <span class=\"sy0\">:=</span> n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>\u00a0<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"re0\">%t%</span><br/>\t\t\ti <span class=\"sy0\">:=</span> t<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> c <span class=\"sy0\">.=</span> c<span class=\"re0\">%i%</span> <span class=\"st0\">\" \"</span><br/>\t\tc <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n\"</span>\t  <span class=\"co1\">; combinations in new lines</span><br/>\t\tj <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><br/>\t\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span>c<span class=\"re0\">%j%</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">=</span> c<span class=\"re0\">%i%</span><span class=\"br0\">)</span><br/>\t\t\t\t c<span class=\"re0\">%j%</span> <span class=\"sy0\">:=</span> j<span class=\"sy0\">,</span> <span class=\"sy0\">++</span>j<span class=\"sy0\">,</span> <span class=\"sy0\">++</span>i<br/>\t\t\t<span class=\"kw1\">Else</span> <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">Break</span></a><br/>\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&gt;</span> t<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">Return</span> c<br/>\t\tc<span class=\"re0\">%j%</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C", "loc": 95, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>names<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\t<span class=\"br0\">{</span> <span class=\"st0\">\"red\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"green\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"purple\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span> <span class=\"st0\">\"oval\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"squiggle\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"diamond\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span> <span class=\"st0\">\"one\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"two\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"three\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span> <span class=\"st0\">\"solid\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"open\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"striped\"</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> set<span class=\"br0\">[</span><span class=\"nu0\">81</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">81</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> init_sets<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">81</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">81</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>t <span class=\"sy0\">=</span> <span class=\"nu0\">27</span><span class=\"sy0\">;</span> t<span class=\"sy0\">;</span> t <span class=\"sy0\">/=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\ta <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i <span class=\"sy0\">/</span> t<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t\t\t\tb <span class=\"sy0\">=</span> <span class=\"br0\">(</span>j <span class=\"sy0\">/</span> t<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t\t\t\tset<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> t <span class=\"sy0\">*</span> <span class=\"br0\">(</span>a <span class=\"sy0\">==</span> b <span class=\"sy0\">?</span> a <span class=\"sy0\">:</span> <span class=\"nu0\">3</span> <span class=\"sy0\">-</span> a <span class=\"sy0\">-</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> deal<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>out<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> c<span class=\"br0\">[</span><span class=\"nu0\">81</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">81</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> c<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tj <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span><span class=\"nu0\">81</span> <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tt <span class=\"sy0\">=</span> c<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> c<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> out<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> c<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> get_sets<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>cards<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> sets<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>k <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>set<span class=\"br0\">[</span>cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>cards<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> cards<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t\tsets<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">,</span><br/>\t\t\t\t\tsets<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> j<span class=\"sy0\">,</span><br/>\t\t\t\t\tsets<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> k<span class=\"sy0\">,</span><br/>\t\t\t\t\ts<span class=\"sy0\">++;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> s<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> show_card<span class=\"br0\">(</span><span class=\"kw4\">int</span> c<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> t<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> t <span class=\"sy0\">=</span> <span class=\"nu0\">27</span><span class=\"sy0\">;</span> t<span class=\"sy0\">;</span> i<span class=\"sy0\">++,</span> t <span class=\"sy0\">/=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%9s\"</span><span class=\"sy0\">,</span> names<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">(</span>c<span class=\"sy0\">/</span>t<span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu19\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> deal_sets<span class=\"br0\">(</span><span class=\"kw4\">int</span> ncard<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> nset<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> c<span class=\"br0\">[</span><span class=\"nu0\">81</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> csets<span class=\"br0\">[</span><span class=\"nu0\">81</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">// might not be enough for large ncard</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> s<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">do</span> deal<span class=\"br0\">(</span>c<span class=\"sy0\">,</span> ncard<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"sy0\">=</span> get_sets<span class=\"br0\">(</span>c<span class=\"sy0\">,</span> ncard<span class=\"sy0\">,</span> csets<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> nset<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"dealt\u00a0%d cards<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> ncard<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> ncard<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%2d:\"</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tshow_card<span class=\"br0\">(</span>c<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>sets:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> s<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%2d:\"</span><span class=\"sy0\">,</span> csets<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tshow_card<span class=\"br0\">(</span>c<span class=\"br0\">[</span>csets<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tinit_sets<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tdeal_sets<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> deal_sets<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 133, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;time.h&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;iomanip&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/><span class=\"kw2\">enum</span> color <span class=\"br0\">{</span><br/>    red, green, purple <br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw2\">enum</span> symbol <span class=\"br0\">{</span><br/>    oval, squiggle, diamond <br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw2\">enum</span> number <span class=\"br0\">{</span><br/>    one, two, three <br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw2\">enum</span> shading <span class=\"br0\">{</span><br/>    solid, open, striped <br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw2\">class</span> card <span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    card<span class=\"br0\">(</span> color c, symbol s, number n, shading h <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        clr <span class=\"sy1\">=</span> c<span class=\"sy4\">;</span> smb <span class=\"sy1\">=</span> s<span class=\"sy4\">;</span> nbr <span class=\"sy1\">=</span> n<span class=\"sy4\">;</span> shd <span class=\"sy1\">=</span> h<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    color getColor<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        <span class=\"kw1\">return</span> clr<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    symbol getSymbol<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        <span class=\"kw1\">return</span> smb<span class=\"sy4\">;</span> <br/>    <span class=\"br0\">}</span><br/>    number getNumber<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> nbr<span class=\"sy4\">;</span> <br/>    <span class=\"br0\">}</span><br/>    shading getShading<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> shd<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"me2\">string</span> str <span class=\"sy1\">=</span> <span class=\"st0\">\"[\"</span><span class=\"sy4\">;</span><br/>        str <span class=\"sy2\">+</span><span class=\"sy1\">=</span> clr <span class=\"sy1\">==</span> red <span class=\"sy4\">?</span> <span class=\"st0\">\"red \"</span> <span class=\"sy4\">:</span> clr <span class=\"sy1\">==</span> green <span class=\"sy4\">?</span> <span class=\"st0\">\"green \"</span> <span class=\"sy4\">:</span> <span class=\"st0\">\"purple \"</span><span class=\"sy4\">;</span><br/>        str <span class=\"sy2\">+</span><span class=\"sy1\">=</span> nbr <span class=\"sy1\">==</span> one <span class=\"sy4\">?</span> <span class=\"st0\">\"one \"</span> <span class=\"sy4\">:</span> nbr <span class=\"sy1\">==</span> two <span class=\"sy4\">?</span> <span class=\"st0\">\"two \"</span> <span class=\"sy4\">:</span> <span class=\"st0\">\"three \"</span><span class=\"sy4\">;</span><br/>        str <span class=\"sy2\">+</span><span class=\"sy1\">=</span> smb <span class=\"sy1\">==</span> oval <span class=\"sy4\">?</span> <span class=\"st0\">\"oval \"</span> <span class=\"sy4\">:</span> smb <span class=\"sy1\">==</span> squiggle <span class=\"sy4\">?</span> <span class=\"st0\">\"squiggle \"</span> <span class=\"sy4\">:</span> <span class=\"st0\">\"diamond \"</span><span class=\"sy4\">;</span><br/>        str <span class=\"sy2\">+</span><span class=\"sy1\">=</span> shd <span class=\"sy1\">==</span> solid <span class=\"sy4\">?</span> <span class=\"st0\">\"solid\"</span> <span class=\"sy4\">:</span> shd <span class=\"sy1\">==</span> open <span class=\"sy4\">?</span> <span class=\"st0\">\"open\"</span> <span class=\"sy4\">:</span> <span class=\"st0\">\"striped\"</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> str <span class=\"sy2\">+</span> <span class=\"st0\">\"]\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    color    clr<span class=\"sy4\">;</span><br/>    symbol   smb<span class=\"sy4\">;</span><br/>    number   nbr<span class=\"sy4\">;</span><br/>    shading  shd<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">size_t</span><span class=\"sy1\">&gt;</span> index<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span> set<span class=\"sy4\">;</span><br/><span class=\"kw2\">class</span> setPuzzle <span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    setPuzzle<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">size_t</span> c <span class=\"sy1\">=</span> red<span class=\"sy4\">;</span> c <span class=\"sy1\">&lt;=</span> purple<span class=\"sy4\">;</span> c<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">size_t</span> s <span class=\"sy1\">=</span> oval<span class=\"sy4\">;</span> s <span class=\"sy1\">&lt;=</span> diamond<span class=\"sy4\">;</span> s<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">size_t</span> n <span class=\"sy1\">=</span> one<span class=\"sy4\">;</span> n <span class=\"sy1\">&lt;=</span> three<span class=\"sy4\">;</span> n<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">size_t</span> h <span class=\"sy1\">=</span> solid<span class=\"sy4\">;</span> h <span class=\"sy1\">&lt;=</span> striped<span class=\"sy4\">;</span> h<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        card crd<span class=\"br0\">(</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span>color<span class=\"sy1\">&gt;</span>  <span class=\"br0\">(</span> c <span class=\"br0\">)</span>, <br/>                                  <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span>symbol<span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span> s <span class=\"br0\">)</span>, <br/>                                  <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span>number<span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span> n <span class=\"br0\">)</span>, <br/>                                  <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span>shading<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> h <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                        _cards.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> crd <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> create<span class=\"br0\">(</span> <span class=\"kw4\">size_t</span> countCards, <span class=\"kw4\">size_t</span> countSets, std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>card<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> cards, std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>set<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> sets <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            sets.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            cards.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            std<span class=\"sy4\">::</span><span class=\"me2\">random_shuffle</span><span class=\"br0\">(</span> _cards.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, _cards.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">size_t</span> f <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> f <span class=\"sy1\">&lt;</span> countCards<span class=\"sy4\">;</span> f<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                cards.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> _cards.<span class=\"me1\">at</span><span class=\"br0\">(</span> f <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">size_t</span> c1 <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> c1 <span class=\"sy1\">&lt;</span> cards.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> c1<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">size_t</span> c2 <span class=\"sy1\">=</span> c1 <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> c2 <span class=\"sy1\">&lt;</span> cards.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> c2<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">size_t</span> c3 <span class=\"sy1\">=</span> c2 <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> c3 <span class=\"sy1\">&lt;</span> cards.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> c3<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span><span class=\"br0\">(</span> testSet<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>cards.<span class=\"me1\">at</span><span class=\"br0\">(</span> c1 <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>cards.<span class=\"me1\">at</span><span class=\"br0\">(</span> c2 <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>cards.<span class=\"me1\">at</span><span class=\"br0\">(</span> c3 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            set s<span class=\"sy4\">;</span><br/>                            s.<span class=\"me1\">index</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> c1 <span class=\"br0\">)</span><span class=\"sy4\">;</span> s.<span class=\"me1\">index</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> c2 <span class=\"br0\">)</span><span class=\"sy4\">;</span> s.<span class=\"me1\">index</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> c3 <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                            sets.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> s <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> sets.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> countSets <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">bool</span> testSet<span class=\"br0\">(</span> card<span class=\"sy2\">*</span> c1, card<span class=\"sy2\">*</span> c2, card<span class=\"sy2\">*</span> c3 <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span><br/>        c <span class=\"sy1\">=</span> <span class=\"br0\">(</span> c1<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>getColor<span class=\"br0\">(</span><span class=\"br0\">)</span>   <span class=\"sy2\">+</span> c2<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>getColor<span class=\"br0\">(</span><span class=\"br0\">)</span>   <span class=\"sy2\">+</span> c3<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>getColor<span class=\"br0\">(</span><span class=\"br0\">)</span>   <span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">3</span>,<br/>        s <span class=\"sy1\">=</span> <span class=\"br0\">(</span> c1<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>getSymbol<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"sy2\">+</span> c2<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>getSymbol<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"sy2\">+</span> c3<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>getSymbol<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">3</span>,<br/>        n <span class=\"sy1\">=</span> <span class=\"br0\">(</span> c1<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>getNumber<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"sy2\">+</span> c2<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>getNumber<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"sy2\">+</span> c3<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>getNumber<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">3</span>,<br/>        h <span class=\"sy1\">=</span> <span class=\"br0\">(</span> c1<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>getShading<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> c2<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>getShading<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> c3<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>getShading<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> c <span class=\"sy2\">+</span> s <span class=\"sy2\">+</span> n <span class=\"sy2\">+</span> h <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>card<span class=\"sy1\">&gt;</span> _cards<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">void</span> displayCardsSets<span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>card<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> cards, std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>set<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> sets <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">size_t</span> cnt <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" ** DEALT \"</span> <span class=\"sy1\">&lt;&lt;</span> cards.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" CARDS: **<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>card<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> i <span class=\"sy1\">=</span> cards.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> cards.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setw</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> cnt<span class=\"sy2\">++</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\": \"</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span> ** CONTAINING \"</span> <span class=\"sy1\">&lt;&lt;</span> sets.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" SETS: **<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>set<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> i <span class=\"sy1\">=</span> sets.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> sets.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">size_t</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span>.<span class=\"me1\">index</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> j<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setiosflags</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">ios</span><span class=\"sy4\">::</span><span class=\"me2\">left</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setw</span><span class=\"br0\">(</span> <span class=\"nu0\">34</span> <span class=\"br0\">)</span> <br/>                      <span class=\"sy1\">&lt;&lt;</span> cards.<span class=\"me1\">at</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span>.<span class=\"me1\">index</span>.<span class=\"me1\">at</span><span class=\"br0\">(</span> j <span class=\"br0\">)</span> <span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"\u00a0: \"</span><br/>                      <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">resetiosflags</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">ios</span><span class=\"sy4\">::</span><span class=\"me2\">left</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setw</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span>.<span class=\"me1\">index</span>.<span class=\"me1\">at</span><span class=\"br0\">(</span> j <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">srand</span><span class=\"br0\">(</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> <span class=\"kw3\">time</span><span class=\"br0\">(</span> <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    setPuzzle p<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>card<span class=\"sy1\">&gt;</span> v9, v12<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>set<span class=\"sy1\">&gt;</span>  s4, s6<span class=\"sy4\">;</span><br/>    p.<span class=\"me1\">create</span><span class=\"br0\">(</span>  <span class=\"nu0\">9</span>, <span class=\"nu0\">4</span>,  v9, s4 <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    p.<span class=\"me1\">create</span><span class=\"br0\">(</span> <span class=\"nu0\">12</span>, <span class=\"nu0\">6</span>, v12, s6 <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    displayCardsSets<span class=\"br0\">(</span>  v9, s4 <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    displayCardsSets<span class=\"br0\">(</span> v12, s6 <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Ceylon", "loc": 140, "block": "<pre class=\"text highlighted_source\">import ceylon.random {<br/>    Random,<br/>    DefaultRandom<br/>}<br/>\u00a0<br/>abstract class Feature() of Color | Symbol | NumberOfSymbols | Shading {}<br/>\u00a0<br/>abstract class Color()<br/>        of red | green | purple<br/>        extends Feature() {}<br/>object red extends Color() {<br/>    string =&gt; \"red\";<br/>}<br/>object green extends Color() {<br/>    string =&gt; \"green\";<br/>}<br/>object purple extends Color() {<br/>    string =&gt; \"purple\";<br/>}<br/>\u00a0<br/>abstract class Symbol()<br/>        of oval | squiggle | diamond<br/>        extends Feature() {}<br/>object oval extends Symbol() {<br/>    string =&gt; \"oval\";<br/>}<br/>object squiggle extends Symbol() {<br/>    string =&gt; \"squiggle\";<br/>}<br/>object diamond extends Symbol() {<br/>    string =&gt; \"diamond\";<br/>}<br/>\u00a0<br/>abstract class NumberOfSymbols()<br/>        of one | two | three<br/>        extends Feature() {}<br/>object one extends NumberOfSymbols() {<br/>    string =&gt; \"one\";<br/>}<br/>object two extends NumberOfSymbols() {<br/>    string =&gt; \"two\";<br/>}<br/>object three extends NumberOfSymbols() {<br/>    string =&gt; \"three\";<br/>}<br/>\u00a0<br/>abstract class Shading()<br/>        of solid | open | striped<br/>        extends Feature() {}<br/>object solid extends Shading() {<br/>    string =&gt; \"solid\";<br/>}<br/>object open extends Shading() {<br/>    string =&gt; \"open\";<br/>}<br/>object striped extends Shading() {<br/>    string =&gt; \"striped\";<br/>}<br/>\u00a0<br/>class Card(color, symbol, number, shading) {<br/>    shared Color color;<br/>    shared Symbol symbol;<br/>    shared NumberOfSymbols number;<br/>    shared Shading shading;<br/>\u00a0<br/>    value plural =&gt; number == one then \"\" else \"s\";<br/>    string =&gt; \"``number`` ``shading`` ``color`` ``symbol````plural``\";<br/>}<br/>\u00a0<br/>{Card*} deck = {<br/>    for(color in `Color`.caseValues)<br/>    for(symbol in `Symbol`.caseValues)<br/>    for(number in `NumberOfSymbols`.caseValues)<br/>    for(shading in `Shading`.caseValues)<br/>    Card(color, symbol, number, shading)<br/>};<br/>\u00a0<br/>alias CardSet =&gt; [Card+];<br/>\u00a0<br/>Boolean validSet(CardSet cards) {<br/>\u00a0<br/>    function allOrOne({Feature*} features) =&gt;<br/>            let(uniques = features.distinct.size)<br/>            uniques == 3 || uniques == 1;<br/>\u00a0<br/>    return allOrOne(cards*.color) &amp;&amp;<br/>            allOrOne(cards*.number) &amp;&amp;<br/>            allOrOne(cards*.shading) &amp;&amp;<br/>            allOrOne(cards*.symbol);<br/>}<br/>\u00a0<br/>{CardSet*} findSets(Card* cards) =&gt;<br/>        cards<br/>            .sequence()<br/>            .combinations(3)<br/>            .filter(validSet);<br/>\u00a0<br/>Random random = DefaultRandom();<br/>\u00a0<br/>class Mode of basic | advanced {<br/>\u00a0<br/>    shared Integer numberOfCards;<br/>    shared Integer numberOfSets;<br/>\u00a0<br/>    shared new basic {<br/>        numberOfCards = 9;<br/>        numberOfSets = 4;<br/>    }<br/>\u00a0<br/>    shared new advanced {<br/>        numberOfCards = 12;<br/>        numberOfSets = 6;<br/>    }<br/>}<br/>\u00a0<br/>[{Card*}, {CardSet*}] deal(Mode mode) {<br/>    value randomStream = random.elements(deck);<br/>    while(true) {<br/>        value cards = randomStream.distinct.take(mode.numberOfCards).sequence();<br/>        value sets = findSets(*cards);<br/>        if(sets.size == mode.numberOfSets) {<br/>            return [cards, sets];<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>shared void run() {<br/>    value [cards, sets] = deal(Mode.basic);<br/>    print(\"The cards dealt are:<br/>           \");<br/>    cards.each(print);<br/>    print(\"<br/>           Containing the sets:<br/>           \");<br/>    for(cardSet in sets) {<br/>        cardSet.each(print);<br/>        print(\"\");<br/>    }<br/>\u00a0<br/>}</pre>"}, {"lang": "D", "loc": 96, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">random</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">,</span><br/>       std.<span class=\"me1\">exception</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">class</span> SetDealer <span class=\"br0\">{</span><br/>    <span class=\"kw4\">protected</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">enum</span> Color<span class=\"sy0\">:</span>  <span class=\"kw4\">ubyte</span> <span class=\"br0\">{</span>green<span class=\"sy0\">,</span> purple<span class=\"sy0\">,</span> red<span class=\"br0\">}</span><br/>        <span class=\"kw4\">enum</span> Number<span class=\"sy0\">:</span> <span class=\"kw4\">ubyte</span> <span class=\"br0\">{</span>one<span class=\"sy0\">,</span> two<span class=\"sy0\">,</span> three<span class=\"br0\">}</span><br/>        <span class=\"kw4\">enum</span> Symbol<span class=\"sy0\">:</span> <span class=\"kw4\">ubyte</span> <span class=\"br0\">{</span>oval<span class=\"sy0\">,</span> diamond<span class=\"sy0\">,</span> squiggle<span class=\"br0\">}</span><br/>        <span class=\"kw4\">enum</span> Fill<span class=\"sy0\">:</span>   <span class=\"kw4\">ubyte</span> <span class=\"br0\">{</span>open<span class=\"sy0\">,</span> striped<span class=\"sy0\">,</span> solid<span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">static</span> <span class=\"kw4\">struct</span> Card <span class=\"br0\">{</span><br/>            Color c<span class=\"sy0\">;</span><br/>            Number n<span class=\"sy0\">;</span><br/>            Symbol s<span class=\"sy0\">;</span><br/>            Fill f<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">static</span> <span class=\"kw4\">immutable</span> Card<span class=\"br0\">[</span><span class=\"nu0\">81</span><span class=\"br0\">]</span> deck<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> colors <span class=\"sy0\">=</span> <span class=\"br0\">[</span>EnumMembers<span class=\"sy0\">!</span>Color<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> numbers <span class=\"sy0\">=</span> <span class=\"br0\">[</span>EnumMembers<span class=\"sy0\">!</span>Number<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> symbols <span class=\"sy0\">=</span> <span class=\"br0\">[</span>EnumMembers<span class=\"sy0\">!</span>Symbol<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> fill <span class=\"sy0\">=</span> <span class=\"br0\">[</span>EnumMembers<span class=\"sy0\">!</span>Fill<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        deck <span class=\"sy0\">=</span> deck.<span class=\"me1\">length</span>.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> Card<span class=\"br0\">(</span>colors<span class=\"br0\">[</span>i <span class=\"sy0\">/</span> <span class=\"nu0\">27</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                                               numbers<span class=\"br0\">[</span><span class=\"br0\">(</span>i <span class=\"sy0\">/</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                                               symbols<span class=\"br0\">[</span><span class=\"br0\">(</span>i <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                                               fill<span class=\"br0\">[</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// randomSample produces a sorted output that's convenient in our</span><br/>    <span class=\"co1\">// case because we're printing to stout. Normally you would want</span><br/>    <span class=\"co1\">// to shuffle.</span><br/>    <span class=\"kw4\">immutable</span><span class=\"br0\">(</span>Card<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span> deal<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> numCards<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>        enforce<span class=\"br0\">(</span>numCards <span class=\"sy0\">&lt;</span> deck.<span class=\"me1\">length</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Number of cards too large\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> deck<span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">randomSample</span><span class=\"br0\">(</span>numCards<span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// The summed enums of valid sets are always zero or a multiple</span><br/>    <span class=\"co1\">// of 3.</span><br/>    <span class=\"kw4\">bool</span> validSet<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw2\">ref</span> Card c1<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw2\">ref</span> Card c2<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw2\">ref</span> Card c3<span class=\"br0\">)</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"br0\">(</span>c1.<span class=\"me1\">c</span> <span class=\"sy0\">+</span> c2.<span class=\"me1\">c</span> <span class=\"sy0\">+</span> c3.<span class=\"me1\">c</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">||</span><br/>                 <span class=\"br0\">(</span>c1.<span class=\"me1\">n</span> <span class=\"sy0\">+</span> c2.<span class=\"me1\">n</span> <span class=\"sy0\">+</span> c3.<span class=\"me1\">n</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">||</span><br/>                 <span class=\"br0\">(</span>c1.<span class=\"me1\">s</span> <span class=\"sy0\">+</span> c2.<span class=\"me1\">s</span> <span class=\"sy0\">+</span> c3.<span class=\"me1\">s</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">||</span><br/>                 <span class=\"br0\">(</span>c1.<span class=\"me1\">f</span> <span class=\"sy0\">+</span> c2.<span class=\"me1\">f</span> <span class=\"sy0\">+</span> c3.<span class=\"me1\">f</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span><span class=\"br0\">(</span>Card<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> findSets<span class=\"br0\">(</span><span class=\"kw2\">in</span> Card<span class=\"br0\">[</span><span class=\"br0\">]</span> cards<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> target <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> len <span class=\"sy0\">=</span> cards.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>len <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span> sets<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">len</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">;</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">len</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> k<span class=\"sy0\">;</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">len</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>validSet<span class=\"br0\">(</span>cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> cards<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> cards<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        sets <span class=\"sy0\">~=</span> <span class=\"br0\">[</span>cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> cards<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> cards<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>target <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> sets.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> target<span class=\"br0\">)</span><br/>                            <span class=\"kw1\">return</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> sets<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">final</span> <span class=\"kw4\">class</span> SetPuzzleDealer <span class=\"sy0\">:</span> SetDealer <span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> <span class=\"br0\">{</span>basic <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> advanced <span class=\"sy0\">=</span> <span class=\"nu0\">12</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">override</span> <span class=\"kw4\">immutable</span><span class=\"br0\">(</span>Card<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span> deal<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> numCards <span class=\"sy0\">=</span> basic<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> numSets <span class=\"sy0\">=</span> numCards <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span> cards<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            cards <span class=\"sy0\">=</span> <span class=\"kw2\">super</span>.<span class=\"me1\">deal</span><span class=\"br0\">(</span>numCards<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>findSets<span class=\"br0\">(</span>cards<span class=\"sy0\">,</span> numSets<span class=\"br0\">)</span>.<span class=\"me1\">length</span> <span class=\"sy0\">!=</span> numSets<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> cards<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> dealer <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> SetPuzzleDealer<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> cards <span class=\"sy0\">=</span> dealer.<span class=\"me1\">deal</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"DEALT\u00a0%d CARDS:\"</span><span class=\"sy0\">,</span> cards.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%s<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> cards<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> sets <span class=\"sy0\">=</span> dealer.<span class=\"me1\">findSets</span><span class=\"br0\">(</span>cards<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> len <span class=\"sy0\">=</span> sets.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>FOUND\u00a0%d SET%s:\"</span><span class=\"sy0\">,</span> len<span class=\"sy0\">,</span> len <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"S\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%(%s<span class=\"es1\">\\n</span>%)<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> sets<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 52, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>require '<span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; a card is a vector  [id color number symb shading], 0 &lt;= id &lt; 81</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>deck <span class=\"br0\">(</span>id <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>for<span class=\"sy0\">*/</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span><br/>\t<span class=\"br0\">[</span> color '<span class=\"br0\">(</span>red green purple<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">[</span> number '<span class=\"br0\">(</span>one two three<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">[</span> symb '<span class=\"br0\">(</span> oval squiggle diamond<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">[</span> shading '<span class=\"br0\">(</span>solid open striped<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span> id<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">vector</span> id color number symb shading<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> DECK <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>deck<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; pre-generate  531441 ordered triples, among which 6561 are winners</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> TRIPLES <span class=\"br0\">(</span><span class=\"kw1\">make-vector</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">81</span> <span class=\"nu0\">81</span> <span class=\"nu0\">81</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>triples <span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>for<span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">81</span><span class=\"br0\">)</span><span class=\"br0\">(</span>j <span class=\"nu0\">81</span><span class=\"br0\">)</span><span class=\"br0\">(</span>k <span class=\"nu0\">81</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> TRIPLES <span class=\"br0\">(</span><span class=\"sy0\">+</span> i <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">81</span> j<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">6561</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>check<span class=\"sy0\">-</span>set <span class=\"br0\">[</span>DECK i<span class=\"br0\">]</span> <span class=\"br0\">[</span>DECK j<span class=\"br0\">]</span> <span class=\"br0\">[</span>DECK k<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; a deal is a list of cards id's.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>show<span class=\"sy0\">-</span>deal deal<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>card deal<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>writeln <span class=\"br0\">[</span>DECK card<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>set <span class=\"br0\">(</span>combinations deal <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>when <br/>     <span class=\"br0\">(</span>check<span class=\"sy0\">-</span>set <span class=\"br0\">[</span>DECK <span class=\"br0\">(</span>first set<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>DECK <span class=\"br0\">(</span>second set<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span>DECK <span class=\"br0\">(</span>third set<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>writeln 'winner set<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; rules of game here</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>check<span class=\"sy0\">-</span>set cards: a b c<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"nu0\">1</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; each feature</span><br/>\t#:continue <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">[</span>a i<span class=\"br0\">]</span> <span class=\"br0\">[</span>b i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">[</span>a i<span class=\"br0\">]</span> <span class=\"br0\">[</span>c i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t#:continue <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">!=</span> <span class=\"br0\">[</span>a i<span class=\"br0\">]</span> <span class=\"br0\">[</span>b i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">!=</span> <span class=\"br0\">[</span>a i<span class=\"br0\">]</span> <span class=\"br0\">[</span>c i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">!=</span> <span class=\"br0\">[</span>b i<span class=\"br0\">]</span><span class=\"br0\">[</span>c i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t#:break  #t <span class=\"sy0\">=&gt;</span>  #f <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; sets = list of triples (card-id card-id card-id)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>count<span class=\"sy0\">-</span>sets sets <span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span>sum <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">s</span> sets<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">[</span>TRIPLES <span class=\"br0\">(</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>first <span class=\"kw1\">s</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">81</span> <span class=\"br0\">(</span>second <span class=\"kw1\">s</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">6561</span> <span class=\"br0\">(</span>third <span class=\"kw1\">s</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;; task</span><br/><span class=\"br0\">(</span>make<span class=\"sy0\">-</span>triples<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>play <span class=\"br0\">(</span>n <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>cmax <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>sets<span class=\"br0\">)</span> <span class=\"br0\">(</span>deal<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>while #t<br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> deal <span class=\"br0\">(</span>take <span class=\"br0\">(</span>shuffle <span class=\"br0\">(</span>iota <span class=\"nu0\">81</span><span class=\"br0\">)</span><span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> sets <span class=\"br0\">(</span>combinations deal <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t#:break <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>count<span class=\"sy0\">-</span>sets sets<span class=\"br0\">)</span> cmax<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>show<span class=\"sy0\">-</span>deal deal<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 54, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def set_puzzle(deal, goal) do<br/>    {puzzle, sets} = get_puzzle_and_answer(deal, goal, produce_deck)<br/>    IO.puts \"Dealt #{length(puzzle)} cards:\"<br/>    print_cards(puzzle)<br/>    IO.puts \"Containing #{length(sets)} sets:\"<br/>    Enum.each(sets, fn set -&gt; print_cards(set) end)<br/>  end<br/>\u00a0<br/>  defp get_puzzle_and_answer(hand_size, num_sets_goal, deck) do<br/>    hand = Enum.take_random(deck, hand_size)<br/>    sets = get_all_sets(hand)<br/>    if length(sets) == num_sets_goal do<br/>      {hand, sets}<br/>    else<br/>      get_puzzle_and_answer(hand_size, num_sets_goal, deck)<br/>    end<br/>  end<br/>\u00a0<br/>  defp get_all_sets(hand) do<br/>    Enum.filter(comb(hand, 3), fn candidate -&gt;<br/>      List.flatten(candidate)<br/>      |&gt; Enum.group_by(&amp;(&amp;1))<br/>      |&gt; Map.values<br/>      |&gt; Enum.all?(fn v -&gt; length(v)\u00a0!= 2 end)<br/>    end)<br/>  end<br/>\u00a0<br/>  defp print_cards(cards) do<br/>    Enum.each(cards, fn card -&gt;<br/>     \u00a0:io.format \"  ~-8s  ~-8s  ~-8s  ~-8s~n\", card<br/>    end)<br/>    IO.puts \"\"<br/>  end<br/>\u00a0<br/>  @colors   ~w(red green purple)a<br/>  @symbols  ~w(oval squiggle diamond)a<br/>  @numbers  ~w(one two three)a<br/>  @shadings ~w(solid open striped)a<br/>\u00a0<br/>  defp produce_deck do<br/>    for color &lt;- @colors, symbol &lt;- @symbols, number &lt;- @numbers, shading &lt;- @shadings,<br/>      do: [color, symbol, number, shading]<br/>  end<br/>\u00a0<br/>  defp comb(_, 0), do: [[]]<br/>  defp comb([], _), do: []<br/>  defp comb([h|t], m) do<br/>    (for l &lt;- comb(t, m-1), do: [h|l]) ++ comb(t, m)<br/>  end<br/>end<br/>\u00a0<br/>RC.set_puzzle(9, 4)<br/>RC.set_puzzle(12, 6)</pre>"}, {"lang": "Erlang", "loc": 85, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> set <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>deck<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> is_set<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> shuffle_deck<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">record</span><span class=\"br0\">(</span> card<span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"kw4\">number</span><span class=\"sy1\">,</span> symbol<span class=\"sy1\">,</span> shading<span class=\"sy1\">,</span> colour<span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">deck</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span>#<span class=\"re7\">card</span><span class=\"br0\">{</span><span class=\"kw4\">number</span><span class=\"sy3\">=</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> symbol<span class=\"sy3\">=</span><span class=\"re5\">Sy</span><span class=\"sy1\">,</span> shading<span class=\"sy3\">=</span><span class=\"re5\">Sh</span><span class=\"sy1\">,</span> colour<span class=\"sy3\">=</span><span class=\"re5\">C</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Sy</span> <span class=\"sy3\">&lt;-</span> <span class=\"br0\">[</span>diamond<span class=\"sy1\">,</span> squiggle<span class=\"sy1\">,</span> oval<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Sh</span> <span class=\"sy3\">&lt;-</span> <span class=\"br0\">[</span>solid<span class=\"sy1\">,</span> striped<span class=\"sy1\">,</span> open<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span> <span class=\"sy3\">&lt;-</span> <span class=\"br0\">[</span>red<span class=\"sy1\">,</span> green<span class=\"sy1\">,</span> purple<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_set</span><span class=\"br0\">(</span> <span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">Card3</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re3\">is_colour_correct</span><span class=\"br0\">(</span> <span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">Card3</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">andalso</span> <span class=\"re3\">is_number_correct</span><span class=\"br0\">(</span> <span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">Card3</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">andalso</span> <span class=\"re3\">is_shading_correct</span><span class=\"br0\">(</span> <span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">Card3</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">andalso</span> <span class=\"re3\">is_symbol_correct</span><span class=\"br0\">(</span> <span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">Card3</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">shuffle_deck</span><span class=\"br0\">(</span> <span class=\"re5\">Deck</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">knuth_shuffle</span>:<span class=\"kw4\">list</span><span class=\"br0\">(</span> <span class=\"re5\">Deck</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">basic</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">advanced</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">advanced</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">common</span><span class=\"br0\">(</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">12</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">basic</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">common</span><span class=\"br0\">(</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">common</span><span class=\"br0\">(</span>\t<span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">Sets</span><span class=\"sy1\">,</span> <span class=\"re5\">Cards</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">find_x_sets_in_y_cards</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re3\">deck</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Cards ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Cards</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Gives sets:~n\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">S</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">S</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Sets</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">find_x_sets_in_y_cards</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Deck</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">Cards</span><span class=\"sy1\">,</span> <span class=\"re5\">_T</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">split</span><span class=\"br0\">(</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re3\">shuffle_deck</span><span class=\"br0\">(</span><span class=\"re5\">Deck</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">find_x_sets_in_y_cards</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Cards</span><span class=\"sy1\">,</span> <span class=\"re3\">make_sets1</span><span class=\"br0\">(</span><span class=\"re5\">Cards</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">find_x_sets_in_y_cards</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">_Y</span><span class=\"sy1\">,</span> <span class=\"re5\">_Deck</span><span class=\"sy1\">,</span> <span class=\"re5\">Cards</span><span class=\"sy1\">,</span> <span class=\"re5\">Sets</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">Sets</span><span class=\"br0\">)</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">X</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">Sets</span><span class=\"sy1\">,</span> <span class=\"re5\">Cards</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">find_x_sets_in_y_cards</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Deck</span><span class=\"sy1\">,</span> <span class=\"re5\">_Cards</span><span class=\"sy1\">,</span> <span class=\"re5\">_Sets</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">find_x_sets_in_y_cards</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Deck</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_colour_correct</span><span class=\"br0\">(</span> <span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">Card3</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">is_colour_different</span><span class=\"br0\">(</span> <span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">Card3</span> <span class=\"br0\">)</span> <span class=\"kw1\">orelse</span> <span class=\"re3\">is_colour_same</span><span class=\"br0\">(</span> <span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">Card3</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_colour_different</span><span class=\"br0\">(</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span><span class=\"re5\">C1</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span><span class=\"re5\">C2</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span><span class=\"re5\">C3</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">C1</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">C2</span><span class=\"sy1\">,</span> <span class=\"re5\">C1</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">C3</span><span class=\"sy1\">,</span> <span class=\"re5\">C2</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">C3</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_colour_different</span><span class=\"br0\">(</span> <span class=\"re5\">_Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">_Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">_Card3</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_colour_same</span><span class=\"br0\">(</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span><span class=\"re5\">C</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span><span class=\"re5\">C</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span>colour<span class=\"sy3\">=</span><span class=\"re5\">C</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_colour_same</span><span class=\"br0\">(</span> <span class=\"re5\">_Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">_Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">_Card3</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_number_correct</span><span class=\"br0\">(</span> <span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">Card3</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">is_number_different</span><span class=\"br0\">(</span> <span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">Card3</span> <span class=\"br0\">)</span> <span class=\"kw1\">orelse</span> <span class=\"re3\">is_number_same</span><span class=\"br0\">(</span> <span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">Card3</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_number_different</span><span class=\"br0\">(</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span><span class=\"kw4\">number</span><span class=\"sy3\">=</span><span class=\"re5\">N1</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span><span class=\"kw4\">number</span><span class=\"sy3\">=</span><span class=\"re5\">N2</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span><span class=\"kw4\">number</span><span class=\"sy3\">=</span><span class=\"re5\">N3</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N1</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">N2</span><span class=\"sy1\">,</span> <span class=\"re5\">N1</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">N3</span><span class=\"sy1\">,</span> <span class=\"re5\">N2</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">N3</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_number_different</span><span class=\"br0\">(</span> <span class=\"re5\">_Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">_Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">_Card3</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_number_same</span><span class=\"br0\">(</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span><span class=\"kw4\">number</span><span class=\"sy3\">=</span><span class=\"re5\">N</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span><span class=\"kw4\">number</span><span class=\"sy3\">=</span><span class=\"re5\">N</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span><span class=\"kw4\">number</span><span class=\"sy3\">=</span><span class=\"re5\">N</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_number_same</span><span class=\"br0\">(</span> <span class=\"re5\">_Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">_Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">_Card3</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_shading_correct</span><span class=\"br0\">(</span> <span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">Card3</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">is_shading_different</span><span class=\"br0\">(</span> <span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">Card3</span> <span class=\"br0\">)</span> <span class=\"kw1\">orelse</span> <span class=\"re3\">is_shading_same</span><span class=\"br0\">(</span> <span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">Card3</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_shading_different</span><span class=\"br0\">(</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span>shading<span class=\"sy3\">=</span><span class=\"re5\">S1</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span>shading<span class=\"sy3\">=</span><span class=\"re5\">S2</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span>shading<span class=\"sy3\">=</span><span class=\"re5\">S3</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">S1</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">S2</span><span class=\"sy1\">,</span> <span class=\"re5\">S1</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">S3</span><span class=\"sy1\">,</span> <span class=\"re5\">S2</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">S3</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_shading_different</span><span class=\"br0\">(</span> <span class=\"re5\">_Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">_Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">_Card3</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_shading_same</span><span class=\"br0\">(</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span>shading<span class=\"sy3\">=</span><span class=\"re5\">S</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span>shading<span class=\"sy3\">=</span><span class=\"re5\">S</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span>shading<span class=\"sy3\">=</span><span class=\"re5\">S</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_shading_same</span><span class=\"br0\">(</span> <span class=\"re5\">_Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">_Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">_Card3</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_symbol_correct</span><span class=\"br0\">(</span> <span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">Card3</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">is_symbol_different</span><span class=\"br0\">(</span> <span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">Card3</span> <span class=\"br0\">)</span> <span class=\"kw1\">orelse</span> <span class=\"re3\">is_symbol_same</span><span class=\"br0\">(</span> <span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">Card3</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_symbol_different</span><span class=\"br0\">(</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span>symbol<span class=\"sy3\">=</span><span class=\"re5\">S1</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span>symbol<span class=\"sy3\">=</span><span class=\"re5\">S2</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span>symbol<span class=\"sy3\">=</span><span class=\"re5\">S3</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">S1</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">S2</span><span class=\"sy1\">,</span> <span class=\"re5\">S1</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">S3</span><span class=\"sy1\">,</span> <span class=\"re5\">S2</span> <span class=\"sy3\">=/=</span> <span class=\"re5\">S3</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_symbol_different</span><span class=\"br0\">(</span> <span class=\"re5\">_Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">_Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">_Card3</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_symbol_same</span><span class=\"br0\">(</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span>symbol<span class=\"sy3\">=</span><span class=\"re5\">S</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span>symbol<span class=\"sy3\">=</span><span class=\"re5\">S</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> #<span class=\"re7\">card</span><span class=\"br0\">{</span>symbol<span class=\"sy3\">=</span><span class=\"re5\">S</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_symbol_same</span><span class=\"br0\">(</span> <span class=\"re5\">_Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">_Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">_Card3</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">.</span><br/><span class=\"co1\">%% Nested loops 1, 2 and 3</span><br/><span class=\"re3\">make_sets1</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">_Second_to_last</span><span class=\"sy1\">,</span> <span class=\"re5\">_Last</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Sets</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Sets</span><span class=\"sy1\">;</span><br/><span class=\"re3\">make_sets1</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">Card</span> | <span class=\"re5\">T</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Sets</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">make_sets1</span><span class=\"br0\">(</span> <span class=\"re5\">T</span><span class=\"sy1\">,</span> <span class=\"re3\">make_sets2</span><span class=\"br0\">(</span><span class=\"re5\">Card</span><span class=\"sy1\">,</span> <span class=\"re5\">T</span><span class=\"sy1\">,</span> <span class=\"re5\">Sets</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">make_sets2</span><span class=\"br0\">(</span> <span class=\"re5\">_Card</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">_Last</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Sets</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Sets</span><span class=\"sy1\">;</span><br/><span class=\"re3\">make_sets2</span><span class=\"br0\">(</span> <span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Card2</span> | <span class=\"re5\">T</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Sets</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">make_sets2</span><span class=\"br0\">(</span> <span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">T</span><span class=\"sy1\">,</span> <span class=\"re3\">make_sets3</span><span class=\"br0\">(</span> <span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">T</span><span class=\"sy1\">,</span>  <span class=\"re5\">Sets</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">make_sets3</span><span class=\"br0\">(</span> <span class=\"re5\">_Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">_Card2</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Sets</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Sets</span><span class=\"sy1\">;</span><br/><span class=\"re3\">make_sets3</span><span class=\"br0\">(</span> <span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">Card2</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Card3</span> | <span class=\"re5\">T</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Sets</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re3\">make_sets3</span><span class=\"br0\">(</span> <span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">T</span><span class=\"sy1\">,</span> <span class=\"re3\">make_sets_acc</span><span class=\"br0\">(</span><span class=\"re3\">is_set</span><span class=\"br0\">(</span><span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">Card3</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Card1</span><span class=\"sy1\">,</span> <span class=\"re5\">Card2</span><span class=\"sy1\">,</span> <span class=\"re5\">Card3</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Sets</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">make_sets_acc</span><span class=\"br0\">(</span> true<span class=\"sy1\">,</span> <span class=\"re5\">Set</span><span class=\"sy1\">,</span> <span class=\"re5\">Sets</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re5\">Set</span> | <span class=\"re5\">Sets</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">make_sets_acc</span><span class=\"br0\">(</span> false<span class=\"sy1\">,</span> <span class=\"re5\">_Set</span><span class=\"sy1\">,</span> <span class=\"re5\">Sets</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Sets</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 82, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"kw1\">type</span> Number <span class=\"sy0\">=</span> One | Two | Three<br/><span class=\"kw1\">type</span> Color <span class=\"sy0\">=</span> Red | Green | Purple<br/><span class=\"kw1\">type</span> Fill <span class=\"sy0\">=</span> Solid | Open | Striped<br/><span class=\"kw1\">type</span> Symbol <span class=\"sy0\">=</span> Oval | Squiggle | Diamond<br/>\u00a0<br/><span class=\"kw1\">type</span> Card <span class=\"sy0\">=</span> <span class=\"br0\">{</span> Number: Number<span class=\"sy0\">;</span> Color: Color<span class=\"sy0\">;</span> Fill: Fill<span class=\"sy0\">;</span> Symbol: Symbol <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// A 'Set' is 3 cards in which each individual feature is either all the SAME on each card, OR all DIFFERENT on each card.</span><br/><span class=\"kw1\">let</span> SetSize <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"kw1\">type</span> CardsGenerator<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> _rand <span class=\"sy0\">=</span> Random<span class=\"br0\">(</span><span class=\"br0\">)</span>    <br/>\u00a0<br/>    <span class=\"kw1\">let</span> shuffleInPlace data <span class=\"sy0\">=</span><br/>        <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">sortInPlaceBy</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>_rand.<span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">length</span> data<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> data<br/>\u00a0<br/>    <span class=\"kw1\">let</span> createCards<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        <span class=\"br0\">[</span>| <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">[</span>One<span class=\"sy0\">;</span> Two<span class=\"sy0\">;</span> Three<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>                <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> <span class=\"br0\">[</span>Red<span class=\"sy0\">;</span> Green<span class=\"sy0\">;</span> Purple<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>                    <span class=\"kw1\">for</span> f <span class=\"kw1\">in</span> <span class=\"br0\">[</span>Solid<span class=\"sy0\">;</span> Open<span class=\"sy0\">;</span> Striped<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>                        <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> <span class=\"br0\">[</span>Oval<span class=\"sy0\">;</span> Squiggle<span class=\"sy0\">;</span> Diamond<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>                            <span class=\"kw1\">yield</span> <span class=\"br0\">{</span> Number <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span> Color <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span> Fill <span class=\"sy0\">=</span> f<span class=\"sy0\">;</span> Symbol <span class=\"sy0\">=</span> s <span class=\"br0\">}</span> |<span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">let</span> _cards <span class=\"sy0\">=</span> createCards<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">member</span> x.<span class=\"me1\">GetHand</span> cardCount <span class=\"sy0\">=</span>        <br/>        shuffleInPlace _cards<br/>        <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">take</span> cardCount _cards <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">toList</span><br/>\u00a0<br/><span class=\"co1\">// Find all the combinations of n elements</span><br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> combinations n items <span class=\"sy0\">=</span> <br/>    <span class=\"kw1\">match</span> n, items <span class=\"kw1\">with</span><br/>    | <span class=\"nu0\">0</span>, _  <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    | _, <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    | k, <span class=\"br0\">(</span>x::xs<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>@<span class=\"br0\">)</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>combinations <span class=\"br0\">(</span>k<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> xs<span class=\"br0\">)</span> @ combinations k xs<br/>\u00a0<br/><span class=\"kw1\">let</span> validCardSet <span class=\"br0\">(</span>cards: Card list<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"co1\">// Valid feature if all features are the same or different</span><br/>    <span class=\"kw1\">let</span> validFeature <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>        | <span class=\"br0\">[</span>a<span class=\"sy0\">;</span> b<span class=\"sy0\">;</span> c<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a <span class=\"sy0\">=</span> b &amp;&amp; b <span class=\"sy0\">=</span> c<span class=\"br0\">)</span> || <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;&gt;</span> b &amp;&amp; a <span class=\"sy0\">&lt;&gt;</span> c &amp;&amp; b <span class=\"sy0\">&lt;&gt;</span> c<span class=\"br0\">)</span><br/>        | _ <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">false</span><br/>\u00a0<br/>    <span class=\"co1\">// Build and validate the feature lists</span><br/>    <span class=\"kw1\">let</span> isValid <span class=\"sy0\">=</span> cards <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">fold</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>ns, cs, fs, ss<span class=\"br0\">)</span> c <span class=\"sy0\">-&gt;</span>                                <br/>                               <span class=\"br0\">(</span>c.<span class=\"me1\">Number</span>::ns, c.<span class=\"me1\">Color</span>::cs, c.<span class=\"me1\">Fill</span>::fs, c.<span class=\"me1\">Symbol</span>::ss<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                        <span class=\"sy0\">|&gt;</span> <span class=\"kw1\">fun</span> <span class=\"br0\">(</span>ns, cs, fs, ss<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>                               <span class=\"br0\">(</span>validFeature ns<span class=\"br0\">)</span> &amp;&amp; <span class=\"br0\">(</span>validFeature cs<span class=\"br0\">)</span> &amp;&amp; <span class=\"br0\">(</span>validFeature fs<span class=\"br0\">)</span> &amp;&amp; <span class=\"br0\">(</span>validFeature ss<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> isValid <span class=\"kw1\">then</span> Some cards <span class=\"kw1\">else</span> None<br/>\u00a0<br/><span class=\"kw1\">let</span> findSolution cardCount setCount <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> cardsGen <span class=\"sy0\">=</span> CardsGenerator<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> search <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> hand <span class=\"sy0\">=</span> cardsGen.<span class=\"me1\">GetHand</span> cardCount<br/>        <span class=\"kw1\">let</span> foundSets <span class=\"sy0\">=</span> combinations SetSize hand <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">choose</span> validCardSet<br/>\u00a0<br/>        <span class=\"kw1\">if</span> foundSets.<span class=\"me1\">Length</span> <span class=\"sy0\">=</span> setCount <span class=\"kw1\">then</span> <span class=\"br0\">(</span>hand, foundSets<span class=\"br0\">)</span> <span class=\"kw1\">else</span> search<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    search<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> displaySolution <span class=\"br0\">(</span>hand: Card list, sets: Card list list<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> printCardDetails <span class=\"br0\">(</span>c: Card<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        printfn <span class=\"st0\">\"   \u00a0%A\u00a0%A\u00a0%A\u00a0%A\"</span> c.<span class=\"me1\">Number</span> c.<span class=\"me1\">Color</span> c.<span class=\"me1\">Symbol</span> c.<span class=\"me1\">Fill</span><br/>\u00a0<br/>    printfn <span class=\"st0\">\"Dealt\u00a0%d cards:\"</span> hand.<span class=\"me1\">Length</span><br/>    <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">iter</span> printCardDetails hand<br/>    printf <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>\u00a0<br/>    printfn <span class=\"st0\">\"Found\u00a0%d sets:\"</span> sets.<span class=\"me1\">Length</span><br/>    sets <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> cards <span class=\"sy0\">-&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">iter</span> printCardDetails cards<span class=\"sy0\">;</span> printf <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> playGame<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> solve cardCount setCount <span class=\"sy0\">=</span><br/>        displaySolution <span class=\"br0\">(</span>findSolution cardCount setCount<span class=\"br0\">)</span><br/>\u00a0<br/>    solve <span class=\"nu0\">9</span> <span class=\"nu0\">4</span><br/>    solve <span class=\"nu0\">12</span> <span class=\"nu0\">6</span><br/>\u00a0<br/>playGame<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Go", "loc": 74, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>    number <span class=\"sy2\">=</span> <span class=\"sy1\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"1\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"2\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"3\"</span><span class=\"sy1\">}</span><br/>    color  <span class=\"sy2\">=</span> <span class=\"sy1\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"red\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"green\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"purple\"</span><span class=\"sy1\">}</span><br/>    shade  <span class=\"sy2\">=</span> <span class=\"sy1\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"solid\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"open\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"striped\"</span><span class=\"sy1\">}</span><br/>    shape  <span class=\"sy2\">=</span> <span class=\"sy1\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"oval\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"squiggle\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"diamond\"</span><span class=\"sy1\">}</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> card <span class=\"kw4\">int</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c card<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> fmt<span class=\"sy3\">.</span>Sprintf<span class=\"sy1\">(</span><span class=\"st0\">\"%s\u00a0%s\u00a0%s\u00a0%s\"</span><span class=\"sy1\">,</span><br/>        number<span class=\"sy1\">[</span>c<span class=\"sy3\">/</span><span class=\"nu0\">27</span><span class=\"sy1\">],</span><br/>        color<span class=\"sy1\">[</span>c<span class=\"sy3\">/</span><span class=\"nu0\">9</span><span class=\"sy3\">%</span><span class=\"nu0\">3</span><span class=\"sy1\">],</span><br/>        shade<span class=\"sy1\">[</span>c<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy3\">%</span><span class=\"nu0\">3</span><span class=\"sy1\">],</span><br/>        shape<span class=\"sy1\">[</span>c<span class=\"sy3\">%</span><span class=\"nu0\">3</span><span class=\"sy1\">])</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    rand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>Unix<span class=\"sy1\">())</span><br/>    game<span class=\"sy1\">(</span><span class=\"st0\">\"Basic\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">)</span><br/>    game<span class=\"sy1\">(</span><span class=\"st0\">\"Advanced\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">12</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> game<span class=\"sy1\">(</span>level <span class=\"kw4\">string</span><span class=\"sy1\">,</span> cards<span class=\"sy1\">,</span> sets <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// create deck</span><br/>    d <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>card<span class=\"sy1\">,</span> <span class=\"nu0\">81</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> d <span class=\"sy1\">{</span><br/>        d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> card<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">var</span> found <span class=\"sy1\">[][</span><span class=\"nu0\">3</span><span class=\"sy1\">]</span>card<br/>    <span class=\"kw1\">for</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>found<span class=\"sy1\">)</span> <span class=\"sy2\">!=</span> sets <span class=\"sy1\">{</span><br/>        found <span class=\"sy2\">=</span> found<span class=\"sy1\">[:</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>        <span class=\"co1\">// deal</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; cards<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            j <span class=\"sy2\">:=</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"nu0\">81</span> <span class=\"sy3\">-</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>            d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> d<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> d<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">//  consider all triplets</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; cards<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            c1 <span class=\"sy2\">:=</span> d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>            <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> j &lt; <span class=\"nu2\">i</span><span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                c2 <span class=\"sy2\">:=</span> d<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><br/>            l3<span class=\"sy1\">:</span><br/>                <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> c3 <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> d<span class=\"sy1\">[:</span>j<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                    <span class=\"kw1\">for</span> f <span class=\"sy2\">:=</span> card<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">);</span> f &lt; <span class=\"nu0\">81</span><span class=\"sy1\">;</span> f <span class=\"sy2\">*=</span> <span class=\"nu0\">3</span> <span class=\"sy1\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"sy1\">(</span>c1<span class=\"sy3\">/</span>f<span class=\"sy3\">%</span><span class=\"nu0\">3</span> <span class=\"sy3\">+</span> c2<span class=\"sy3\">/</span>f<span class=\"sy3\">%</span><span class=\"nu0\">3</span> <span class=\"sy3\">+</span> c3<span class=\"sy3\">/</span>f<span class=\"sy3\">%</span><span class=\"nu0\">3</span><span class=\"sy1\">)</span> <span class=\"sy3\">%</span> <span class=\"nu0\">3</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                            <span class=\"kw1\">continue</span> l3 <span class=\"co1\">// not a set</span><br/>                        <span class=\"sy1\">}</span><br/>                    <span class=\"sy1\">}</span><br/>                    <span class=\"co1\">// it's a set</span><br/>                    found <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>found<span class=\"sy1\">,</span> <span class=\"sy1\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">]</span>card<span class=\"sy1\">{</span>c1<span class=\"sy1\">,</span> c2<span class=\"sy1\">,</span> c3<span class=\"sy1\">})</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// found the right number</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"%s game. \u00a0%d cards,\u00a0%d sets.<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> level<span class=\"sy1\">,</span> cards<span class=\"sy1\">,</span> sets<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"Cards:\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> c <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> d<span class=\"sy1\">[:</span>cards<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"  \"</span><span class=\"sy1\">,</span> c<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"Sets:\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> found <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\" \u00a0%s<span class=\"es1\">\\n</span> \u00a0%s<span class=\"es1\">\\n</span> \u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span>s<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span>s<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span>s<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">])</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 75, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><span class=\"sy0\">.</span>State  <br/>\u00a0<br/>combinations <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>combinations <span class=\"nu0\">0</span> <span class=\"sy0\">_</span>      <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>combinations <span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>     <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>combinations k <span class=\"br0\">(</span>y:ys<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>y:<span class=\"br0\">)</span> <span class=\"br0\">(</span>combinations <span class=\"br0\">(</span>k <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> ys<span class=\"br0\">)</span> <span class=\"sy0\">++</span> combinations k ys <br/>\u00a0<br/><span class=\"kw1\">data</span> Color <span class=\"sy0\">=</span> Red <span class=\"sy0\">|</span> Green <span class=\"sy0\">|</span> Purple <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Enum\"><span class=\"kw4\">Enum</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bounded\"><span class=\"kw4\">Bounded</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"br0\">)</span><br/><span class=\"kw1\">data</span> Symbol <span class=\"sy0\">=</span> Oval <span class=\"sy0\">|</span> Squiggle <span class=\"sy0\">|</span> Diamond <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Enum\"><span class=\"kw4\">Enum</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bounded\"><span class=\"kw4\">Bounded</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"br0\">)</span><br/><span class=\"kw1\">data</span> Count <span class=\"sy0\">=</span> One <span class=\"sy0\">|</span> Two <span class=\"sy0\">|</span> Three <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Enum\"><span class=\"kw4\">Enum</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bounded\"><span class=\"kw4\">Bounded</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"br0\">)</span><br/><span class=\"kw1\">data</span> Shading <span class=\"sy0\">=</span> Solid <span class=\"sy0\">|</span> Open <span class=\"sy0\">|</span> Striped <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Enum\"><span class=\"kw4\">Enum</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bounded\"><span class=\"kw4\">Bounded</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">data</span> Card <span class=\"sy0\">=</span> Card <span class=\"br0\">{</span><br/>              color <span class=\"sy0\">::</span> Color<span class=\"sy0\">,</span><br/>              symbol <span class=\"sy0\">::</span> Symbol<span class=\"sy0\">,</span><br/>              count <span class=\"sy0\">::</span> Count<span class=\"sy0\">,</span><br/>              shading <span class=\"sy0\">::</span> Shading<br/>            <span class=\"br0\">}</span> <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Identify a set of three cards by counting all attribute types.  </span><br/><span class=\"co1\">-- if each count is 3 or 1 ( not 2 ) the the cards compose a set.</span><br/>isSet <span class=\"sy0\">::</span> <span class=\"br0\">[</span>Card<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a> <br/>isSet cs <span class=\"sy0\">=</span> <br/>        <span class=\"kw1\">let</span> colorCount <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">$</span> nub <span class=\"sy0\">$</span> sort <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> color cs<br/>            symbolCount <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">$</span> nub <span class=\"sy0\">$</span> sort <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> symbol cs<br/>            countCount <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">$</span> nub <span class=\"sy0\">$</span> sort <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> count cs<br/>            shadingCount <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">$</span> nub <span class=\"sy0\">$</span> sort <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> shading cs<br/>        <span class=\"kw1\">in</span> colorCount <span class=\"sy0\">/=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> symbolCount <span class=\"sy0\">/=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> countCount <span class=\"sy0\">/=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> shadingCount <span class=\"sy0\">/=</span> <span class=\"nu0\">2</span> <br/>\u00a0<br/><span class=\"co1\">-- Get a random card from a deck. Returns the card and removes it from the deck.</span><br/>getCard <span class=\"sy0\">::</span> State <span class=\"br0\">(</span>StdGen<span class=\"sy0\">,</span> <span class=\"br0\">[</span>Card<span class=\"br0\">]</span><span class=\"br0\">)</span> Card<br/>getCard <span class=\"sy0\">=</span> state <span class=\"sy0\">$</span> \\<span class=\"br0\">(</span>gen<span class=\"sy0\">,</span> cs<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">let</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> newGen<span class=\"br0\">)</span> <span class=\"sy0\">=</span> randomR <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> cs <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> gen <br/>                                    <span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:splitAt\"><span class=\"kw3\">splitAt</span></a> i cs<br/>                                <span class=\"kw1\">in</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> b<span class=\"sy0\">,</span> <span class=\"br0\">(</span>newGen<span class=\"sy0\">,</span> a <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a> b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Get a hand of cards.  Starts with new deck and then removes the</span><br/><span class=\"co1\">-- appropriate number of cards from that deck.</span><br/>getHand <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> State StdGen <span class=\"br0\">[</span>Card<span class=\"br0\">]</span><br/>getHand n <span class=\"sy0\">=</span> state <span class=\"sy0\">$</span> \\gen <span class=\"sy0\">-&gt;</span> <br/>       <span class=\"kw1\">let</span> deck <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Card co sy ct sh <span class=\"sy0\">|</span> <br/>                  co <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:minBound\"><span class=\"kw3\">minBound</span></a><span class=\"sy0\">..</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:maxBound\"><span class=\"kw3\">maxBound</span></a><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                  sy <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:minBound\"><span class=\"kw3\">minBound</span></a><span class=\"sy0\">..</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:maxBound\"><span class=\"kw3\">maxBound</span></a><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                  ct <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:minBound\"><span class=\"kw3\">minBound</span></a><span class=\"sy0\">..</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:maxBound\"><span class=\"kw3\">maxBound</span></a><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                  sh <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:minBound\"><span class=\"kw3\">minBound</span></a><span class=\"sy0\">..</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:maxBound\"><span class=\"kw3\">maxBound</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>           <span class=\"br0\">(</span>a<span class=\"sy0\">,</span><span class=\"br0\">(</span>newGen<span class=\"sy0\">,</span> <span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> runState <span class=\"br0\">(</span>replicateM n getCard<span class=\"br0\">)</span> <span class=\"br0\">(</span>gen<span class=\"sy0\">,</span>deck<span class=\"br0\">)</span><br/>       <span class=\"kw1\">in</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> newGen<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Get an unbounded number of hands of the appropriate number of cards.</span><br/>getManyHands <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> State StdGen <span class=\"br0\">[</span><span class=\"br0\">[</span>Card<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>getManyHands n <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sequence\"><span class=\"kw3\">sequence</span></a><span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:repeat\"><span class=\"kw3\">repeat</span></a><span class=\"br0\">)</span> <span class=\"br0\">(</span>getHand n<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Deal out hands of the appropriate size until one with the desired number</span><br/><span class=\"co1\">-- of sets is found.  then print the hand and the sets.</span><br/>showSolutions <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>showSolutions cardCount solutionCount <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>       <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"Showing hand of \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> cardCount <span class=\"sy0\">++</span> <span class=\"st0\">\" cards with \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> solutionCount <span class=\"sy0\">++</span> <span class=\"st0\">\" solutions.\"</span><br/>       gen <span class=\"sy0\">&lt;-</span> newStdGen<br/>       <span class=\"kw1\">let</span> Just z <span class=\"sy0\">=</span> find <span class=\"br0\">(</span>\\ls <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> isSet <span class=\"sy0\">$</span> combinations <span class=\"nu0\">3</span> ls<span class=\"br0\">)</span> <span class=\"sy0\">==</span> solutionCount<span class=\"br0\">)</span> <span class=\"sy0\">$</span> <br/>               evalState <span class=\"br0\">(</span>getManyHands cardCount<span class=\"br0\">)</span> gen<br/>       <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> z<br/>       <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"\"</span><br/>       <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"Solutions:\"</span><br/>       <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> putSet  <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> isSet <span class=\"sy0\">$</span> combinations <span class=\"nu0\">3</span> z <span class=\"kw1\">where</span><br/>           putSet st <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>               <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> st<br/>               <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"\"</span><br/>\u00a0<br/><span class=\"co1\">-- Show a hand of 9 cards with 4 solutions </span><br/><span class=\"co1\">-- and a hand of 12 cards with 6 solutions.           </span><br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>       showSolutions <span class=\"nu0\">9</span> <span class=\"nu0\">4</span><br/>       showSolutions <span class=\"nu0\">12</span> <span class=\"nu0\">6</span></pre>"}, {"lang": "J", "loc": 24, "block": "<pre class=\"j highlighted_source\">require <span class=\"st_h\">'stats/base'</span><br/>\u00a0<br/>Number=:\u00a0;:<span class=\"st_h\">'one two three'</span><br/>Colour=:\u00a0;:<span class=\"st_h\">'red green purple'</span><br/>Fill=:\u00a0;:<span class=\"st_h\">'solid open striped'</span><br/>Symbol=:\u00a0;:<span class=\"st_h\">'oval squiggle diamond'</span><br/>Features=: Number\u00a0; Colour\u00a0; Fill\u00a0;&lt; Symbol<br/>Deck=: &gt;\u00a0; &lt;\"<span class=\"nu0\">1</span> { <a class=\"__cf_email__\" data-cfemail=\"9cf5b2dc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#&amp;.&gt; Features<br/>sayCards=: <span class=\"sy0\">(</span><span class=\"st_h\">', '</span> joinstring Features {&amp;&gt;~ ]<span class=\"sy0\">)</span>\"<span class=\"nu0\">1</span><br/>drawRandom=: ] {~ <span class=\"sy0\">(</span>? #<span class=\"sy0\">)</span><br/>isSet=: *./@:<span class=\"sy0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> e.~ [: #@~.\"<span class=\"nu0\">1</span> |:<span class=\"sy0\">)</span>\"<span class=\"nu0\">2</span><br/>getSets=: [: <span class=\"sy0\">(</span>] #~ isSet<span class=\"sy0\">)</span> ] {~ <span class=\"nu0\">3</span> comb #<br/>countSets=: #@:getSets<br/>\u00a0<br/>set_puzzle=: verb define<br/> target=. &lt;. -: <span class=\"kw2\">y</span><br/> <span class=\"kw1\">whilst.</span> target ~: countSets Hand <span class=\"kw1\">do.</span> <br/>   Hand=. <span class=\"kw2\">y</span> drawRandom Deck<br/> <span class=\"kw1\">end.</span><br/> echo <span class=\"st_h\">'Dealt '</span>,<span class=\"sy0\">(</span>\": <span class=\"kw2\">y</span><span class=\"sy0\">)</span>,<span class=\"st_h\">' Cards:'</span><br/> echo sayCards sort Hand<br/> echo LF,<span class=\"st_h\">'Found '</span>,<span class=\"sy0\">(</span>\":target<span class=\"sy0\">)</span>,<span class=\"st_h\">' Sets:'</span><br/> echo sayCards sort\"<span class=\"nu0\">2</span> getSets Hand<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 131, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> SetPuzzle <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">enum</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>        GREEN<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, PURPLE<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, RED<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a><span class=\"br0\">(</span><span class=\"kw4\">int</span> v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            val <span class=\"sy0\">=</span> v<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> val<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">enum</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Anumber+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Number</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>        ONE<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, TWO<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, THREE<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Anumber+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Number</span></a><span class=\"br0\">(</span><span class=\"kw4\">int</span> v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            val <span class=\"sy0\">=</span> v<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> val<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">enum</span> Symbol <span class=\"br0\">{</span><br/>\u00a0<br/>        OVAL<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, DIAMOND<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, SQUIGGLE<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> Symbol<span class=\"br0\">(</span><span class=\"kw4\">int</span> v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            val <span class=\"sy0\">=</span> v<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> val<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">enum</span> Fill <span class=\"br0\">{</span><br/>\u00a0<br/>        OPEN<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, STRIPED<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, SOLID<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> Fill<span class=\"br0\">(</span><span class=\"kw4\">int</span> v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            val <span class=\"sy0\">=</span> v<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> val<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> Card <span class=\"kw1\">implements</span> Comparable<span class=\"sy0\">&lt;</span>Card<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a> c<span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Anumber+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Number</span></a> n<span class=\"sy0\">;</span><br/>        Symbol s<span class=\"sy0\">;</span><br/>        Fill f<span class=\"sy0\">;</span><br/>\u00a0<br/>        @Override<br/>        <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"[Card:\u00a0%s,\u00a0%s,\u00a0%s,\u00a0%s]\"</span>, c, n, s, f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        @Override<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> compareTo<span class=\"br0\">(</span>Card o<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>c.<span class=\"me1\">val</span> <span class=\"sy0\">-</span> o.<span class=\"me1\">c</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">10</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>n.<span class=\"me1\">val</span> <span class=\"sy0\">-</span> o.<span class=\"me1\">n</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> Card<span class=\"br0\">[</span><span class=\"br0\">]</span> deck<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        deck <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Card<span class=\"br0\">[</span><span class=\"nu0\">81</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> colors <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Anumber+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Number</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> numbers <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Anumber+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Number</span></a>.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Symbol<span class=\"br0\">[</span><span class=\"br0\">]</span> symbols <span class=\"sy0\">=</span> Symbol.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Fill<span class=\"br0\">[</span><span class=\"br0\">]</span> fillmodes <span class=\"sy0\">=</span> Fill.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> deck.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            deck<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Card<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            deck<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">c</span> <span class=\"sy0\">=</span> colors<span class=\"br0\">[</span>i <span class=\"sy0\">/</span> <span class=\"nu0\">27</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            deck<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">n</span> <span class=\"sy0\">=</span> numbers<span class=\"br0\">[</span><span class=\"br0\">(</span>i <span class=\"sy0\">/</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            deck<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">s</span> <span class=\"sy0\">=</span> symbols<span class=\"br0\">[</span><span class=\"br0\">(</span>i <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            deck<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">f</span> <span class=\"sy0\">=</span> fillmodes<span class=\"br0\">[</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        findSets<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> findSets<span class=\"br0\">(</span><span class=\"kw4\">int</span> numCards<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> target <span class=\"sy0\">=</span> numCards <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        Card<span class=\"br0\">[</span><span class=\"br0\">]</span> cards<span class=\"sy0\">;</span><br/>        Card<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> sets <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Card<span class=\"br0\">[</span>target<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> cnt<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acollections+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Collections</span></a>.<span class=\"me1\">shuffle</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span>deck<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            cards <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">copyOfRange</span><span class=\"br0\">(</span>deck, <span class=\"nu0\">0</span>, numCards<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            cnt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            outer<span class=\"sy0\">:</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> cards.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> cards.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> cards.<span class=\"me1\">length</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>validSet<span class=\"br0\">(</span>cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, cards<span class=\"br0\">[</span>j<span class=\"br0\">]</span>, cards<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cnt <span class=\"sy0\">&lt;</span> target<span class=\"br0\">)</span><br/>                                sets<span class=\"br0\">[</span>cnt<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Card<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span>cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, cards<span class=\"br0\">[</span>j<span class=\"br0\">]</span>, cards<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>                            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>cnt <span class=\"sy0\">&gt;</span> target<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                <span class=\"kw1\">break</span> outer<span class=\"sy0\">;</span><br/>                            <span class=\"br0\">}</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>cnt <span class=\"sy0\">!=</span> target<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">(</span>cards<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"GIVEN\u00a0%d CARDS:<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span>, numCards<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Card c <span class=\"sy0\">:</span> cards<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"FOUND \"</span> <span class=\"sy0\">+</span> target <span class=\"sy0\">+</span> <span class=\"st0\">\" SETS:<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Card<span class=\"br0\">[</span><span class=\"br0\">]</span> set <span class=\"sy0\">:</span> sets<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Card c <span class=\"sy0\">:</span> set<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> validSet<span class=\"br0\">(</span>Card c1, Card c2, Card c3<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> tot <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        tot <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>c1.<span class=\"me1\">c</span>.<span class=\"me1\">val</span> <span class=\"sy0\">+</span> c2.<span class=\"me1\">c</span>.<span class=\"me1\">val</span> <span class=\"sy0\">+</span> c3.<span class=\"me1\">c</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>        tot <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>c1.<span class=\"me1\">n</span>.<span class=\"me1\">val</span> <span class=\"sy0\">+</span> c2.<span class=\"me1\">n</span>.<span class=\"me1\">val</span> <span class=\"sy0\">+</span> c3.<span class=\"me1\">n</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>        tot <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>c1.<span class=\"me1\">s</span>.<span class=\"me1\">val</span> <span class=\"sy0\">+</span> c2.<span class=\"me1\">s</span>.<span class=\"me1\">val</span> <span class=\"sy0\">+</span> c3.<span class=\"me1\">s</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>        tot <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>c1.<span class=\"me1\">f</span>.<span class=\"me1\">val</span> <span class=\"sy0\">+</span> c2.<span class=\"me1\">f</span>.<span class=\"me1\">val</span> <span class=\"sy0\">+</span> c3.<span class=\"me1\">f</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> tot <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 89, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Collections</span>.<span class=\"me1\">shuffle</span><br/>\u00a0<br/>enum <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Color   <span class=\"br0\">{</span> RED, GREEN, PURPLE <span class=\"br0\">}</span><br/>enum <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Symbol  <span class=\"br0\">{</span> OVAL, SQUIGGLE, DIAMOND <span class=\"br0\">}</span><br/>enum <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Number  <span class=\"br0\">{</span> ONE, TWO, THREE <span class=\"br0\">}</span><br/>enum <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Shading <span class=\"br0\">{</span> SOLID, OPEN, STRIPED <span class=\"br0\">}</span><br/>enum <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Degree  <span class=\"br0\">{</span> BASIC, ADVANCED <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Card<span class=\"br0\">(</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> color<span class=\"sy0\">:</span>   Color,<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> symbol<span class=\"sy0\">:</span>  Symbol,<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> number<span class=\"sy0\">:</span>  Number,<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> shading<span class=\"sy0\">:</span> Shading<br/><span class=\"br0\">)</span> <span class=\"sy0\">:</span> Comparable<span class=\"sy0\">&lt;</span>Card<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> value <span class=\"sy0\">=</span> <br/>        color.<span class=\"me1\">ordinal</span> <span class=\"sy0\">*</span> <span class=\"nu0\">27</span> + symbol.<span class=\"me1\">ordinal</span> <span class=\"sy0\">*</span> <span class=\"nu0\">9</span> + number.<span class=\"me1\">ordinal</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span>  + shading.<span class=\"me1\">ordinal</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun compareTo<span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Card<span class=\"br0\">)</span> <span class=\"sy0\">=</span> value.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>other.<span class=\"me1\">value</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>        color.<span class=\"me1\">name</span>.<span class=\"me1\">padEnd</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>   +<br/>        symbol.<span class=\"me1\">name</span>.<span class=\"me1\">padEnd</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> +<br/>        number.<span class=\"me1\">name</span>.<span class=\"me1\">padEnd</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>  + <br/>        shading.<span class=\"me1\">name</span>.<span class=\"me1\">padEnd</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span>.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    companion <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> zero <span class=\"sy0\">=</span> Card<span class=\"br0\">(</span>Color.<span class=\"me1\">RED</span>, Symbol.<span class=\"me1\">OVAL</span>, Number.<span class=\"me1\">ONE</span>, Shading.<span class=\"me1\">SOLID</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun createDeck<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/>    List<span class=\"sy0\">&lt;</span>Card<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">81</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> col <span class=\"sy0\">=</span> Color.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"br0\">[</span>it / <span class=\"nu0\">27</span><span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sym <span class=\"sy0\">=</span> Symbol.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">[</span>it / <span class=\"nu0\">9</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> num <span class=\"sy0\">=</span> Number.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">[</span>it / <span class=\"nu0\">3</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> shd <span class=\"sy0\">=</span> Shading.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">[</span>it <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span> <br/>        Card<span class=\"br0\">(</span>col, sym, num, shd<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>fun playGame<span class=\"br0\">(</span>degree<span class=\"sy0\">:</span> Degree<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> deck <span class=\"sy0\">=</span> createDeck<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nCards <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>degree <span class=\"sy0\">==</span> Degree.<span class=\"me1\">BASIC</span><span class=\"br0\">)</span> <span class=\"nu0\">9</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">12</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nSets <span class=\"sy0\">=</span> nCards / <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sets <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>nSets<span class=\"br0\">)</span> <span class=\"br0\">{</span> Array<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> Card.<span class=\"me1\">zero</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> hand<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Card<span class=\"sy0\">&gt;</span><br/>    outer<span class=\"sy0\">@</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        shuffle<span class=\"br0\">(</span>deck<span class=\"br0\">)</span><br/>        hand <span class=\"sy0\">=</span> deck.<span class=\"me1\">take</span><span class=\"br0\">(</span>nCards<span class=\"br0\">)</span>.<span class=\"me1\">toTypedArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>  <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until hand.<span class=\"me1\">size</span> - <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in i + <span class=\"nu0\">1</span> until hand.<span class=\"me1\">size</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k in j + <span class=\"nu0\">1</span> until hand.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> trio <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span>hand<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, hand<span class=\"br0\">[</span>j<span class=\"br0\">]</span>, hand<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> <br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isSet<span class=\"br0\">(</span>trio<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        sets<span class=\"br0\">[</span>count++<span class=\"br0\">]</span> <span class=\"sy0\">=</span> trio<br/>                        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> nSets<span class=\"br0\">)</span> break<span class=\"sy0\">@</span>outer<br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    hand.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"DEALT $nCards CARDS:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>hand.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>CONTAINING $nSets SETS:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>s in sets<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        s.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span>s.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span>  <br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun isSet<span class=\"br0\">(</span>trio<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>Card<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r1 <span class=\"sy0\">=</span> trio.<span class=\"me1\">sumBy</span> <span class=\"br0\">{</span> it.<span class=\"me1\">color</span>.<span class=\"me1\">ordinal</span>   <span class=\"br0\">}</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r2 <span class=\"sy0\">=</span> trio.<span class=\"me1\">sumBy</span> <span class=\"br0\">{</span> it.<span class=\"me1\">symbol</span>.<span class=\"me1\">ordinal</span>  <span class=\"br0\">}</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r3 <span class=\"sy0\">=</span> trio.<span class=\"me1\">sumBy</span> <span class=\"br0\">{</span> it.<span class=\"me1\">number</span>.<span class=\"me1\">ordinal</span>  <span class=\"br0\">}</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r4 <span class=\"sy0\">=</span> trio.<span class=\"me1\">sumBy</span> <span class=\"br0\">{</span> it.<span class=\"me1\">shading</span>.<span class=\"me1\">ordinal</span> <span class=\"br0\">}</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span>r1 + r2 + r3 + r4<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>   <br/>    playGame<span class=\"br0\">(</span>Degree.<span class=\"me1\">BASIC</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    playGame<span class=\"br0\">(</span>Degree.<span class=\"me1\">ADVANCED</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 18, "block": "<pre class=\"text highlighted_source\">colors = {Red, Green, Purple};<br/>symbols = {\"0\", \"\\[TildeTilde]\", \"\\[Diamond]\"};<br/>numbers = {1, 2, 3};<br/>shadings = {\"\\[FilledSquare]\", \"\\[Square]\", \"\\[DoublePrime]\"};<br/>\u00a0<br/>validTripleQ[l_List]\u00a0:= Entropy[l]\u00a0!= Entropy[{1, 1, 2}];<br/>validSetQ[cards_List]\u00a0:= And @@ (validTripleQ /@ Transpose[cards]);<br/>\u00a0<br/>allCards = Tuples[{colors, symbols, numbers, shadings}];<br/>\u00a0<br/>deal[{numDeal_, setNum_}]\u00a0:= Module[{cards, count = 0},<br/>   While[count\u00a0!= setNum,<br/>    cards = RandomSample[allCards, numDeal];<br/>    count = Count[Subsets[cards, {3}], _?validSetQ]];<br/>\u00a0<br/>   cards];<br/>\u00a0<br/>Row[{Style[#2, #1], #3, #4}] &amp; @@@ deal[{9, 4}]</pre>"}, {"lang": "PARI/GP", "loc": 28, "block": "<pre class=\"parigp highlighted_source\">dealraw<span class=\"br0\">(</span>cards<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span>cards<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">4</span><span class=\"sy0\">,</span>j<span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">&lt;&lt;</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>howmany<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><span class=\"sy0\">=</span>hammingweight<span class=\"br0\">(</span><span class=\"kw1\">bitor</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span><span class=\"kw1\">bitor</span><span class=\"br0\">(</span>b<span class=\"sy0\">,</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>name<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"red\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"green\"</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"st0\">\"purple\"</span><span class=\"br0\">]</span><span class=\"br0\">[</span>v<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\", \"</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">\"oval\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"squiggle\"</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"st0\">\"diamond\"</span><span class=\"br0\">]</span><span class=\"br0\">[</span>v<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\", \"</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">\"one\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"two\"</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"st0\">\"three\"</span><span class=\"br0\">]</span><span class=\"br0\">[</span>v<span class=\"br0\">[</span><span class=\"nu1\">3</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\", \"</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">\"solid\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"open\"</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"st0\">\"striped\"</span><span class=\"br0\">]</span><span class=\"br0\">[</span>v<span class=\"br0\">[</span><span class=\"nu1\">4</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>check<span class=\"br0\">(</span>D<span class=\"sy0\">,</span>sets<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>S<span class=\"sy0\">=</span><span class=\"kw1\">List</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#D<span class=\"sy0\">-</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#D<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>k<span class=\"sy0\">=</span>j<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#D<span class=\"sy0\">,</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>x<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">4</span><span class=\"sy0\">,</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>howmany<span class=\"br0\">(</span>D<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">,</span>D<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">,</span>D<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"kw1\">next</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">listput</span><span class=\"br0\">(</span>S<span class=\"sy0\">,</span><span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>#S<span class=\"sy0\">&gt;</span>sets<span class=\"sy0\">,</span><span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>#S<span class=\"sy0\">==</span>sets<span class=\"sy0\">,</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>S<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>deal<span class=\"br0\">(</span>cards<span class=\"sy0\">,</span>sets<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>v<span class=\"sy0\">,</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">until</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span><br/>    s<span class=\"sy0\">=</span>check<span class=\"br0\">(</span>v<span class=\"sy0\">=</span>dealraw<span class=\"br0\">(</span>cards<span class=\"br0\">)</span><span class=\"sy0\">,</span>sets<span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  v<span class=\"sy0\">=</span><span class=\"kw1\">apply</span><span class=\"br0\">(</span>name<span class=\"sy0\">,</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>cards<span class=\"sy0\">,</span><span class=\"kw1\">print</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>sets<span class=\"sy0\">,</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Set #\"</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"  \"</span>v<span class=\"br0\">[</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>deal<span class=\"br0\">(</span><span class=\"nu1\">9</span><span class=\"sy0\">,</span><span class=\"nu1\">4</span><span class=\"br0\">)</span><br/>deal<span class=\"br0\">(</span><span class=\"nu1\">12</span><span class=\"sy0\">,</span><span class=\"nu1\">6</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 80, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!perl</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># This code was adapted from the perl6 solution for this task.</span><br/>\u00a0<br/><span class=\"co1\"># Each element of the deck is an integer, which, when written</span><br/><span class=\"co1\"># in octal, has four digits, which are all either 1, 2, or 4.</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$fmt</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'%4o'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@deck</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span><span class=\"re0\">$fmt</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">!~</span> <a href=\"http://perldoc.perl.org/functions/tr.html\"><span class=\"kw3\">tr</span></a><span class=\"sy0\">/</span><span class=\"nu0\">124</span><span class=\"sy0\">//</span>c<span class=\"sy0\">,</span> 01111 <span class=\"sy0\">..</span> 04444<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Given a feature digit (1, 2, or 4), produce the feature's name.</span><br/><span class=\"co1\"># Note that digits 0 and 3 are unused.</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@features</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"st_h\">' '</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"co2\">/\\n/</span><span class=\"sy0\">,&lt;&lt;</span><span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">!</span> red   green    <span class=\"sy0\">!</span> purple<br/><span class=\"sy0\">!</span> one   two      <span class=\"sy0\">!</span> three<br/><span class=\"sy0\">!</span> oval  squiggle <span class=\"sy0\">!</span> diamond<br/><span class=\"sy0\">!</span> solid <a href=\"http://perldoc.perl.org/functions/open.html\"><span class=\"kw3\">open</span></a>     <span class=\"sy0\">!</span> striped<br/>\u00a0<br/><span class=\"nu0\">81</span> <span class=\"sy0\">==</span> <span class=\"re0\">@deck</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"There are \"</span><span class=\"sy0\">.</span><span class=\"re0\">@deck</span><span class=\"sy0\">.</span><span class=\"st0\">\" cards (should be 81)\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># By default, draw 9 cards, but if the user</span><br/><span class=\"co1\"># supplied a parameter, use that.</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$draw</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$goal</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><span class=\"re0\">$draw</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Get the possible combinations of 3 indices into $draw elements.</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@combinations</span> <span class=\"sy0\">=</span> combine<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$draw</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@sets</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># Shuffle the first $draw elements of @deck.</span><br/>\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$draw</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span> <span class=\"sy0\">+</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"re0\">@deck</span> <span class=\"sy0\">-</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">@deck</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">@deck</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\"># Find all valid sets using the shuffled elements.</span><br/>\t<span class=\"re0\">@sets</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$or</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$or</span> <span class=\"sy0\">|=</span> <span class=\"co5\">$_</span> <span class=\"kw1\">for</span> <span class=\"re0\">@deck</span><span class=\"br0\">[</span><span class=\"sy0\">@</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\"># If all colors (or whatever) are the same, then</span><br/>\t\t<span class=\"co1\"># a 1, 2, or 4 will result when we OR them together.</span><br/>\t\t<span class=\"co1\"># If they're all different, then a 7 will result.</span><br/>\t\t<span class=\"co1\"># If any other digit occurs, the set is invalid.</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span><span class=\"re0\">$fmt</span><span class=\"sy0\">,</span> <span class=\"re0\">$or</span><span class=\"br0\">)</span> <span class=\"sy0\">!~</span> <span class=\"co2\">tr/1247//c</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"re0\">@combinations</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\"># Continue until there are exactly $goal valid sets.</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">until</span> <span class=\"re0\">@sets</span> <span class=\"sy0\">==</span> <span class=\"re0\">$goal</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Drew $draw cards:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$#sets</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Set \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\":<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@cards</span> <span class=\"sy0\">=</span> <span class=\"re0\">@deck</span><span class=\"br0\">[</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$sets</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$card</span> <span class=\"br0\">(</span> <span class=\"re0\">@cards</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">@octal</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"sy0\">//,</span> <a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a> <span class=\"st_h\">'%4o'</span><span class=\"sy0\">,</span> <span class=\"re0\">$card</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">@f</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"re0\">$features</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$octal</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"   \u00a0%-6s\u00a0%-5s\u00a0%-8s\u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">@f</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># This function is adapted from the perl5i solution for the</span><br/><span class=\"co1\"># RosettaCode Combinations task.</span><br/><span class=\"kw2\">sub</span> combine <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw1\">unless</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"co5\">@_</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$head</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@result</span> <span class=\"sy0\">=</span> combine<span class=\"br0\">(</span> <span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"co5\">@_</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/unshift.html\"><span class=\"kw3\">unshift</span></a> <span class=\"sy0\">@</span><span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"re0\">$head</span> <span class=\"kw1\">for</span> <span class=\"re0\">@result</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">@result</span><span class=\"sy0\">,</span> combine<span class=\"br0\">(</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"co5\">@_</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">__END__</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 28, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">enum</span> Color <span class=\"br0\">(</span>red <span class=\"sy0\">=&gt;</span> 0o1000<span class=\"sy0\">,</span> green <span class=\"sy0\">=&gt;</span>  0o2000<span class=\"sy0\">,</span> purple <span class=\"sy0\">=&gt;</span> 0o4000<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">enum</span> Count <span class=\"br0\">(</span><span class=\"kw3\">one</span> <span class=\"sy0\">=&gt;</span>  0o100<span class=\"sy0\">,</span> two <span class=\"sy0\">=&gt;</span>     0o200<span class=\"sy0\">,</span> three <span class=\"sy0\">=&gt;</span>   0o400<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">enum</span> Shape <span class=\"br0\">(</span>oval <span class=\"sy0\">=&gt;</span>  0o10<span class=\"sy0\">,</span> squiggle <span class=\"sy0\">=&gt;</span> 0o20<span class=\"sy0\">,</span> diamond <span class=\"sy0\">=&gt;</span>  0o40<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">enum</span> Style <span class=\"br0\">(</span>solid <span class=\"sy0\">=&gt;</span>  0o1<span class=\"sy0\">,</span> open <span class=\"sy0\">=&gt;</span>      0o2<span class=\"sy0\">,</span> striped <span class=\"sy0\">=&gt;</span>   0o4<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@deck</span> <span class=\"sy0\">=</span> Color<span class=\"sy0\">.</span><span class=\"me1\">enums</span> <span class=\"kw1\">X</span> Count<span class=\"sy0\">.</span><span class=\"me1\">enums</span> <span class=\"kw1\">X</span> Shape<span class=\"sy0\">.</span><span class=\"me1\">enums</span> <span class=\"kw1\">X</span> Style<span class=\"sy0\">.</span><span class=\"me1\">enums</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> MAIN<span class=\"br0\">(</span><span class=\"re0\">$DRAW</span> <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"re0\">$GOAL</span> <span class=\"sy0\">=</span> <span class=\"re0\">$DRAW</span> <span class=\"kw1\">div</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">sub</span> show<span class=\"sy0\">-</span>cards<span class=\"br0\">(</span><span class=\"re0\">@c</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"kw3\">printf</span> <span class=\"st0\">\"%9s%7s%10s%9s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">@c</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"sy0\">;*</span><span class=\"br0\">]</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">key</span> <span class=\"br0\">}</span> <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@c</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@combinations</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"re0\">$DRAW</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">combinations</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@draw</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">repeat</span> <span class=\"kw1\">until</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">@sets</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"re0\">$GOAL</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">@draw</span> <span class=\"sy0\">=</span> <span class=\"re0\">@deck</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span><span class=\"br0\">(</span><span class=\"re0\">$DRAW</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@bits</span> <span class=\"sy0\">=</span> <span class=\"re0\">@draw</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@^enums</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">value</span> <span class=\"br0\">}</span><br/>        <span class=\"re0\">@sets</span> <span class=\"sy0\">=</span> gather <span class=\"kw1\">for</span> <span class=\"re0\">@combinations</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@c</span> <span class=\"br0\">{</span><br/>            take <span class=\"re0\">@draw</span><span class=\"br0\">[</span><span class=\"re0\">@c</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">item</span> <span class=\"kw1\">when</span> <span class=\"co2\">/^ &lt;[1247]&gt;+ $/</span> <span class=\"kw1\">given</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"sy0\">+|</span><span class=\"br0\">]</span> <span class=\"re0\">@bits</span><span class=\"br0\">[</span><span class=\"re0\">@c</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">base</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"Drew $DRAW cards:\"</span><span class=\"sy0\">;</span><br/>    show<span class=\"sy0\">-</span>cards <span class=\"re0\">@draw</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"re0\">@sets</span><span class=\"sy0\">.</span><span class=\"kw3\">kv</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">@cards</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">say</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Set {$i+1}:\"</span><span class=\"sy0\">;</span><br/>        show<span class=\"sy0\">-</span>cards <span class=\"re0\">@cards</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 66, "block": "<pre class=\"text highlighted_source\">function comb(sequence pool, integer needed, sequence res={}, integer done=0, sequence chosen={})<br/>    if needed=0 then    -- got a full set<br/>        sequence {a,b,c} = chosen<br/>        if not find_any({3,5,6},flatten(sq_or_bits(sq_or_bits(a,b),c))) then<br/>            res = append(res,chosen)<br/>        end if<br/>    elsif done+needed&lt;=length(pool) then<br/>        -- get all combinations with and without the next item:<br/>        done += 1<br/>        res = comb(pool,needed-1,res,done,append(chosen,pool[done]))<br/>        res = comb(pool,needed,res,done,chosen)<br/>    end if<br/>    return res<br/>end function            <br/>\u00a0<br/>constant m124 = {1,2,4}<br/>\u00a0<br/>function card(integer n)<br/>--returns the nth card (n is 1..81, res is length 4 of 1/2/4)<br/>    n -= 1<br/>    sequence res = repeat(0,4)<br/>    for i=1 to 4 do<br/>        res[i] = m124[remainder(n,3)+1]<br/>        n = floor(n/3)<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>constant colours = {\"red\", \"green\", 0, \"purple\"},<br/>         symbols = {\"oval\", \"squiggle\", 0, \"diamond\"},<br/>         numbers = {\"one\", \"two\", 0, \"three\"},<br/>         shades  = {\"solid\", \"open\", 0, \"striped\"}<br/>\u00a0<br/>procedure print_cards(sequence hand, sequence cards)<br/>    for i=1 to length(cards) do<br/>        integer {c,m,n,g} = cards[i],<br/>                id = find(cards[i],hand)<br/>        printf(1,\"%3d:\u00a0%-7s\u00a0%-9s\u00a0%-6s\u00a0%s\\n\",{id,colours[c],symbols[m],numbers[n],shades[g]})<br/>    end for<br/>    printf(1,\"\\n\")<br/>end procedure<br/>\u00a0<br/>procedure play(integer cards=9, integer sets=4)<br/>    integer deals = 1<br/>    while 1 do<br/>        sequence deck = shuffle(tagset(81))<br/>        sequence hand = deck[1..cards]<br/>        for i=1 to length(hand) do<br/>            hand[i] = card(hand[i])<br/>        end for<br/>        sequence res = comb(hand,3)<br/>        if length(res)=sets then<br/>            printf(1,\"dealt\u00a0%d cards (%d deals)\\n\",{cards,deals})<br/>            print_cards(hand,hand)<br/>            printf(1,\"with\u00a0%d sets\\n\",{sets})<br/>            for i=1 to sets do<br/>                print_cards(hand,res[i])<br/>            end for<br/>            exit<br/>        end if<br/>        deals += 1<br/>    end while<br/>end procedure<br/>play()<br/>--play(12,6)<br/>--play(9,6)</pre>"}, {"lang": "Python", "loc": 47, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\">#!/usr/bin/python</span><br/>\u00a0<br/><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> product<span class=\"sy0\">,</span> combinations<br/><span class=\"kw1\">from</span> <span class=\"kw3\">random</span> <span class=\"kw1\">import</span> sample<br/>\u00a0<br/><span class=\"co1\">## Major constants</span><br/>features <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"st0\">'green purple red'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>             <span class=\"st0\">'one two three'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>             <span class=\"st0\">'oval diamond squiggle'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>             <span class=\"st0\">'open striped solid'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>\u00a0<br/>deck <span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span>product<span class=\"br0\">(</span><span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> repeat<span class=\"sy0\">=</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>dealt <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><br/>\u00a0<br/><span class=\"co1\">## Functions</span><br/><span class=\"kw1\">def</span> printcard<span class=\"br0\">(</span>card<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'%8s'</span>\u00a0% f<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">for</span> f<span class=\"sy0\">,</span>i <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>features<span class=\"sy0\">,</span> card<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> getdeal<span class=\"br0\">(</span>dealt<span class=\"sy0\">=</span>dealt<span class=\"br0\">)</span>:<br/>    deal <span class=\"sy0\">=</span> sample<span class=\"br0\">(</span>deck<span class=\"sy0\">,</span> dealt<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> deal<br/>\u00a0<br/><span class=\"kw1\">def</span> getsets<span class=\"br0\">(</span>deal<span class=\"br0\">)</span>:<br/>    good_feature_count <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">sets</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span> comb <span class=\"kw1\">for</span> comb <span class=\"kw1\">in</span> combinations<span class=\"br0\">(</span>deal<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>             <span class=\"kw1\">if</span> <span class=\"kw2\">all</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw2\">set</span><span class=\"br0\">(</span>feature<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span> good_feature_count<span class=\"br0\">)</span><br/>                     <span class=\"kw1\">for</span> feature <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>*comb<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                   <span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">sets</span><br/>\u00a0<br/><span class=\"kw1\">def</span> printit<span class=\"br0\">(</span>deal<span class=\"sy0\">,</span> <span class=\"kw3\">sets</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Dealt\u00a0%i cards:'</span>\u00a0% <span class=\"kw2\">len</span><span class=\"br0\">(</span>deal<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> card <span class=\"kw1\">in</span> deal: printcard<span class=\"br0\">(</span>card<span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>Found\u00a0%i sets:'</span>\u00a0% <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw3\">sets</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> <span class=\"kw3\">sets</span>:<br/>        <span class=\"kw1\">for</span> card <span class=\"kw1\">in</span> s: printcard<span class=\"br0\">(</span>card<span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        deal <span class=\"sy0\">=</span> getdeal<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">sets</span> <span class=\"sy0\">=</span> getsets<span class=\"br0\">(</span>deal<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw3\">sets</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> dealt / <span class=\"nu0\">2</span>:<br/>           <span class=\"kw1\">break</span><br/>    printit<span class=\"br0\">(</span>deal<span class=\"sy0\">,</span> <span class=\"kw3\">sets</span><span class=\"br0\">)</span> <br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 38, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(struct card [bits name])<br/>\u00a0<br/>(define cards<br/>  (for/list ([C '(red   green    purple )] [Ci '(#o0001 #o0002 #o0004)]<br/>             #:when #t<br/>             [S '(oval  squiggle diamond)] [Si '(#o0010 #o0020 #o0040)]<br/>             #:when #t<br/>             [N '(one   two      three  )] [Ni '(#o0100 #o0200 #o0400)]<br/>             #:when #t<br/>             [D '(solid open     striped)] [Di '(#o1000 #o2000 #o4000)])<br/>    (card (bitwise-ior Ci Si Ni Di) (format \"~a, ~a, ~a, ~a\" C S N D))))<br/>\u00a0<br/>(define (nsubsets l n)<br/>  (cond [(zero? n) '(())] [(null? l) '()]<br/>        [else (append (for/list ([l2 (nsubsets (cdr l) (- n 1))])<br/>                        (cons (car l) l2))<br/>                      (nsubsets (cdr l) n))]))<br/>(define (set? cards)<br/>  (regexp-match? #rx\"^[1247]*$\"<br/>                 (number-&gt;string (apply bitwise-ior (map card-bits cards)) 8)))<br/>\u00a0<br/>(define (deal C S)<br/>  (define hand  (take (shuffle cards) C))<br/>  (define 3sets (filter set? (nsubsets hand 3)))<br/>  (cond [(not (= S (length 3sets))) (deal C S)]<br/>        [else (printf \"Dealt ~a cards:\\n\" C)<br/>              (for ([c hand]) (printf \"  ~a\\n\" (card-name c)))<br/>              (printf \"\\nContaining ~a sets:\\n\" S)<br/>              (for ([set 3sets])<br/>                (for ([c set]) (printf \"  ~a\\n\" (card-name c)))<br/>                (newline))]))<br/>\u00a0<br/>(deal 9 4)<br/>(deal 12 6)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 99, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  finds  \"sets\" (solutions)  for the   SET  puzzle   (game).    */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> game seed <span class=\"sy0\">.</span>                  <span class=\"coMULTI\">/*get optional # cards to deal and seed*/</span><br/><span class=\"kw1\">if</span> game ==<span class=\"st0\">','</span> <span class=\"sy0\">|</span> game==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> game=<span class=\"nu0\">9</span>  <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> seed==<span class=\"st0\">','</span>  <span class=\"sy0\">|</span> seed==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> seed=<span class=\"nu0\">77</span> <span class=\"coMULTI\">/* \"      \"         \"   \"   \"      \"   */</span><br/><span class=\"kw1\">call</span> aGame <span class=\"nu0\">0</span>                           <span class=\"coMULTI\">/*with tell=0:    suppress the output. */</span><br/><span class=\"kw1\">call</span> aGame <span class=\"nu0\">1</span>                           <span class=\"coMULTI\">/*with tell=1:    display   \"     \"    */</span><br/><span class=\"kw1\">exit</span> sets                              <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500AGAME subroutine\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>aGame: tell=<span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;        good=game%2 <span class=\"coMULTI\">/*enable/disable the showing of output.*/</span><br/>                                       <span class=\"coMULTI\">/* [\u2191]  the GOOD var is the right #sets*/</span><br/>       <span class=\"kw1\">do</span> seed=seed  <span class=\"kw2\">until</span> good==sets  <span class=\"coMULTI\">/*generate deals until good  # of sets.*/</span><br/>       <span class=\"kw1\">call</span> <span class=\"kw6\">random</span> ,,seed              <span class=\"coMULTI\">/*repeatability for the RANDOM invokes.*/</span><br/>       <span class=\"kw1\">call</span> genFeatures                <span class=\"coMULTI\">/*generate various card game features. */</span><br/>       <span class=\"kw1\">call</span> genDeck                    <span class=\"coMULTI\">/*generate a deck  (with  81  \"cards\").*/</span><br/>       <span class=\"kw1\">call</span> dealer   game              <span class=\"coMULTI\">/*deal a number of cards for the game. */</span><br/>       <span class=\"kw1\">call</span> findSets game%2            <span class=\"coMULTI\">/*find # of sets from the dealt cards. */</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*until*/</span>                 <span class=\"coMULTI\">/* [\u2193]   when leaving, SETS is right #.*/</span><br/><span class=\"kw1\">return</span>                                 <span class=\"coMULTI\">/*return to invoker of this subroutine.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500DEALER subroutine\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>dealer: <span class=\"kw1\">call</span> sey  <span class=\"st0\">'dealing'</span>  game  <span class=\"st0\">\"cards:\"</span>,,<span class=\"sy0\">.</span>  <span class=\"coMULTI\">/*shuffle and deal the cards. */</span><br/>    <span class=\"kw1\">do</span> cards=<span class=\"nu0\">1</span>  <span class=\"kw2\">until</span>  cards==game              <span class=\"coMULTI\">/*keep dealing until finished.*/</span><br/>    _=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"kw6\">words</span><span class=\"br0\">(</span>##<span class=\"br0\">)</span><span class=\"br0\">)</span>;   ##=<span class=\"kw6\">delword</span><span class=\"br0\">(</span>##,_,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*pick card;   delete a card. */</span><br/>    @<span class=\"sy0\">.</span>cards=deck<span class=\"sy0\">.</span>_                              <span class=\"coMULTI\">/*add the card to the tableau.*/</span><br/>    <span class=\"kw1\">call</span> sey <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"st0\">'card'</span> cards,<span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"st0\">\" \"</span> @<span class=\"sy0\">.</span>cards <span class=\"coMULTI\">/*display the card to screen. */</span><br/>        <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>cards<span class=\"br0\">)</span>              <span class=\"coMULTI\">/* [\u2193]  define cells for cards*/</span><br/>        @<span class=\"sy0\">.</span>cards<span class=\"sy0\">.</span>j=<span class=\"kw6\">word</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>cards,j<span class=\"br0\">)</span>               <span class=\"coMULTI\">/*define  a  cell for  a card.*/</span><br/>        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>    <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*cards*/</span><br/><span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500DEFFEATURES subroutine\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>defFeatures:  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> what,v; _=<span class=\"kw6\">words</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span>      <span class=\"coMULTI\">/*obtain what is to be defined*/</span><br/><span class=\"kw1\">if</span> _<span class=\"sy0\">\\</span>==values  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">call</span> sey <span class=\"st0\">'error,'</span>  what  <span class=\"st0\">\"features \u00ac=\"</span> values,<span class=\"sy0\">.</span>,<span class=\"sy0\">.</span><br/>                         <span class=\"kw1\">exit</span> -<span class=\"nu0\">1</span><br/>                    <span class=\"kw3\">end</span>                         <span class=\"coMULTI\">/* [\u2191]  check for typos/errors*/</span><br/>        <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>values<span class=\"br0\">)</span>               <span class=\"coMULTI\">/*define all the possible vals*/</span><br/>        <span class=\"kw1\">call</span> <span class=\"kw2\">value</span> what<span class=\"st0\">'.'</span>k, <span class=\"kw6\">word</span><span class=\"br0\">(</span>values,k<span class=\"br0\">)</span>     <span class=\"coMULTI\">/*define  a  card feature.    */</span><br/>        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/><span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500GENDECK subroutine\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>genDeck: #=<span class=\"nu0\">0</span>;  ##=                     <span class=\"coMULTI\">/*#:  cards in deck;  ##:  shuffle aid.*/</span><br/>      <span class=\"kw1\">do</span>       num=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> values;   xnum = <span class=\"kw6\">word</span><span class=\"br0\">(</span>numbers,  num<span class=\"br0\">)</span><br/>        <span class=\"kw1\">do</span>     col=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> values;   xcol = <span class=\"kw6\">word</span><span class=\"br0\">(</span>colors,   col<span class=\"br0\">)</span><br/>          <span class=\"kw1\">do</span>   sym=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> values;   xsym = <span class=\"kw6\">word</span><span class=\"br0\">(</span>symbols,  sym<span class=\"br0\">)</span><br/>            <span class=\"kw1\">do</span> sha=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> values;   xsha = <span class=\"kw6\">word</span><span class=\"br0\">(</span>shadings, sha<span class=\"br0\">)</span><br/>            #=#+<span class=\"nu0\">1</span>;  ##=## #;     deck<span class=\"sy0\">.</span>#=xnum xcol xsym xsha   <span class=\"coMULTI\">/*create a card.*/</span><br/>            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*sha*/</span><br/>          <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*num*/</span><br/>        <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*sym*/</span><br/>      <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*col*/</span><br/><span class=\"kw1\">return</span>                                 <span class=\"coMULTI\">/*#:  the number of cards in the deck. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500GENFEATURES subroutine\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>genFeatures: features=<span class=\"nu0\">3</span>; groups=<span class=\"nu0\">4</span>; values=<span class=\"nu0\">3</span> <span class=\"coMULTI\">/*define # features, groups, vals.*/</span><br/>numbers = <span class=\"st0\">'one two three'</span>          \u00a0;       <span class=\"kw1\">call</span> defFeatures <span class=\"st0\">'number'</span>,  numbers<br/>colors  = <span class=\"st0\">'red green purple'</span>       \u00a0;       <span class=\"kw1\">call</span> defFeatures <span class=\"st0\">'color'</span>,   colors<br/>symbols = <span class=\"st0\">'oval squiggle diamond'</span>  \u00a0;       <span class=\"kw1\">call</span> defFeatures <span class=\"st0\">'symbol'</span>,  symbols<br/>shadings= <span class=\"st0\">'solid open striped'</span>     \u00a0;       <span class=\"kw1\">call</span> defFeatures <span class=\"st0\">'shading'</span>, shadings<br/><span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500GENPOSS subroutine\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>genPoss: p=<span class=\"nu0\">0</span>; sets=<span class=\"nu0\">0</span>; sep=<span class=\"st0\">' \u2500\u2500\u2500\u2500\u2500 '</span>;\u00a0!<span class=\"sy0\">.</span>=    <span class=\"coMULTI\">/*define some REXX variables.     */</span><br/>  <span class=\"kw1\">do</span>     i=<span class=\"nu0\">1</span>    <span class=\"kw2\">for</span> game               <span class=\"coMULTI\">/* [\u2193]  the  IFs  eliminate duplicates.*/</span><br/>    <span class=\"kw1\">do</span>   j=i+<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span>  game<br/>      <span class=\"kw1\">do</span> k=j+<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span>  game<br/>      p=p+<span class=\"nu0\">1</span>;              \u00a0!<span class=\"sy0\">.</span>p<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"25141865\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>i;     \u00a0!<span class=\"sy0\">.</span>p<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"cffdf28f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>j;       \u00a0!<span class=\"sy0\">.</span>p<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"11222c51\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>k<br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>    <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*j*/</span><br/>  <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*i*/</span>                      <span class=\"coMULTI\">/* [\u2191]  generate the permutation list. */</span><br/><span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500FINDSETS subroutine\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>findSets:  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n;   <span class=\"kw1\">call</span> genPoss <span class=\"coMULTI\">/*N:  the number of sets to be found.  */</span><br/><span class=\"kw1\">call</span> sey                               <span class=\"coMULTI\">/*find any sets that were generated [\u2191]*/</span><br/>    <span class=\"kw1\">do</span>         j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> p              <span class=\"coMULTI\">/*P:  is the number of possible sets.  */</span><br/>        <span class=\"kw1\">do</span>     f=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> features<br/>            <span class=\"kw1\">do</span> g=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> groups;       \u00a0!!<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>f<span class=\"sy0\">.</span>g=<span class=\"kw6\">word</span><span class=\"br0\">(</span>!<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>f, g<span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*g*/</span><br/>        <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*f*/</span><br/>    ok=<span class=\"nu0\">1</span>                               <span class=\"coMULTI\">/*everything is peachy\u2500kean (OK) so far*/</span><br/>        <span class=\"kw1\">do</span> g=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> groups; _=!!<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>g <span class=\"coMULTI\">/*build strings to hold possibilities. */</span><br/>        equ=<span class=\"nu0\">1</span>                          <span class=\"coMULTI\">/* [\u2193]  handles all the equal features.*/</span><br/>               <span class=\"kw1\">do</span> f=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> features  <span class=\"kw2\">while</span> equ;         equ=equ <span class=\"sy0\">&amp;</span> _==!!<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>f<span class=\"sy0\">.</span>g<br/>               <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*f*/</span><br/>        dif=<span class=\"nu0\">1</span><br/>        __=!!<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>1<span class=\"sy0\">.</span>g                    <span class=\"coMULTI\">/* [\u2193]  handles all  unequal  features.*/</span><br/>                        <span class=\"kw1\">do</span> f=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span>  features  <span class=\"kw2\">while</span>  <span class=\"sy0\">\\</span>equ<br/>                        dif=dif <span class=\"sy0\">&amp;</span>  <span class=\"br0\">(</span><span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>!!<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>f<span class=\"sy0\">.</span>g,__<span class=\"br0\">)</span>==<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                        __=__\u00a0!!<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>f<span class=\"sy0\">.</span>g <span class=\"coMULTI\">/*append to the string for next test.  */</span><br/>                        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*f*/</span><br/>        ok=ok <span class=\"sy0\">&amp;</span>  <span class=\"br0\">(</span>equ <span class=\"sy0\">|</span> dif<span class=\"br0\">)</span>           <span class=\"coMULTI\">/*now, see if all are equal or unequal.*/</span><br/>        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*g*/</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>ok  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>               <span class=\"coMULTI\">/*Is this set OK?   Nope, then skip it.*/</span><br/>    sets=sets+<span class=\"nu0\">1</span>                        <span class=\"coMULTI\">/*bump the number of the sets found.   */</span><br/>    <span class=\"kw1\">call</span> sey  <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"st0\">'set'</span>  sets<span class=\"st0\">\":  \"</span>,<span class=\"nu0\">15</span><span class=\"br0\">)</span>     \u00a0!<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>1   sep  \u00a0!<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>2    sep  \u00a0!<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>3<br/>    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>\u00a0<br/><span class=\"kw1\">call</span> sey  sets   <span class=\"st0\">'sets found.'</span>,<span class=\"sy0\">.</span><br/><span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500SEY subroutine\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sey:  <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>tell  <span class=\"kw3\">then</span>  <span class=\"kw1\">return</span>           <span class=\"coMULTI\">/*\u00ac tell?    Then suppress the output. */</span><br/><span class=\"kw1\">if</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>==<span class=\"sy0\">.</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>;    <span class=\"kw1\">say</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;   <span class=\"kw1\">if</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>==<span class=\"sy0\">.</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>;          <span class=\"kw1\">return</span></pre>"}, {"lang": "Ruby", "loc": 36, "block": "<pre class=\"ruby highlighted_source\">COLORS   = <span class=\"sy0\">%</span>i<span class=\"br0\">(</span>red green purple<span class=\"br0\">)</span> <span class=\"co1\">#use [:red,\u00a0:green,\u00a0:purple] in Ruby &lt; 2.0</span><br/>SYMBOLS  = <span class=\"sy0\">%</span>i<span class=\"br0\">(</span>oval squiggle diamond<span class=\"br0\">)</span><br/>NUMBERS  = <span class=\"sy0\">%</span>i<span class=\"br0\">(</span>one two three<span class=\"br0\">)</span><br/>SHADINGS = <span class=\"sy0\">%</span>i<span class=\"br0\">(</span>solid <span class=\"kw3\">open</span> striped<span class=\"br0\">)</span><br/>DECK = COLORS.<span class=\"me1\">product</span><span class=\"br0\">(</span>SYMBOLS, NUMBERS, SHADINGS<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> get_all_sets<span class=\"br0\">(</span>hand<span class=\"br0\">)</span> <br/>  hand.<span class=\"me1\">combination</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"kw3\">select</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>candidate<span class=\"sy0\">|</span><br/>    grouped_features = candidate.<span class=\"me1\">flatten</span>.<span class=\"me1\">group_by</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>f<span class=\"sy0\">|</span> f<span class=\"br0\">}</span><br/>    grouped_features.<span class=\"me1\">values</span>.<span class=\"me1\">none</span>?<span class=\"br0\">{</span><span class=\"sy0\">|</span>v<span class=\"sy0\">|</span> v.<span class=\"me1\">size</span> == <span class=\"nu0\">2</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> get_puzzle_and_answer<span class=\"br0\">(</span>hand_size, num_sets_goal<span class=\"br0\">)</span><br/>  <span class=\"kw1\">begin</span><br/>    hand = DECK.<span class=\"me1\">sample</span><span class=\"br0\">(</span>hand_size<span class=\"br0\">)</span><br/>    sets = get_all_sets<span class=\"br0\">(</span>hand<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">until</span> sets.<span class=\"me1\">size</span> == num_sets_goal<br/>  <span class=\"br0\">[</span>hand, sets<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> print_cards<span class=\"br0\">(</span>cards<span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span> cards.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>card<span class=\"sy0\">|</span> <span class=\"st0\">\" \u00a0%-8s\"</span> <span class=\"sy0\">*</span> <span class=\"nu0\">4</span> <span class=\"sy0\">%</span> card<span class=\"br0\">}</span><br/>  <span class=\"kw3\">puts</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> set_puzzle<span class=\"br0\">(</span>deal, goal=deal<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  puzzle, sets = get_puzzle_and_answer<span class=\"br0\">(</span>deal, goal<span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"Dealt #{puzzle.size} cards:\"</span><br/>  print_cards<span class=\"br0\">(</span>puzzle<span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"Containing #{sets.size} sets:\"</span><br/>  sets.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>set<span class=\"sy0\">|</span> print_cards<span class=\"br0\">(</span>set<span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>set_puzzle<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>set_puzzle<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"br0\">)</span></pre>"}, {"lang": "Tcl", "loc": 82, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># Generate random integer uniformly on range [0..$n-1]</span><br/><span class=\"kw1\">proc</span> random n <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>int<span class=\"br0\">(</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Generate a shuffled deck of all cards; the card encoding was stolen from the</span><br/><span class=\"co1\"># Perl6 solution. This is done once and then used as a constant. Note that the</span><br/><span class=\"co1\"># rest of the code assumes that all cards in the deck are unique.</span><br/><span class=\"kw1\">set</span>\u00a0::<span class=\"me1\">AllCards</span> <span class=\"br0\">[</span>apply <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> cards <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> color <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> symbol <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">foreach</span> number <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">foreach</span> shading <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw2\">lappend</span> cards <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$color</span> <span class=\"re0\">$symbol</span> <span class=\"re0\">$number</span> <span class=\"re0\">$shading</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Knuth-Morris-Pratt shuffle (not that it matters)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$cards</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> j <span class=\"br0\">[</span>random <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> tmp <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$cards</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> i -<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">lset</span> cards <span class=\"re0\">$i</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$cards</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">lset</span> cards <span class=\"re0\">$j</span> <span class=\"re0\">$tmp</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$cards</span><br/><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\"># Randomly pick a hand of cards from the deck (itself in a global for</span><br/><span class=\"co1\"># convenience).</span><br/><span class=\"kw1\">proc</span> drawCards n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> cards <span class=\"sy0\">$</span>::<span class=\"me1\">AllCards</span><span class=\"sy0\">;</span>    <span class=\"co1\"># Copies...</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> idx <span class=\"br0\">[</span>random <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$cards</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">lappend</span> hand <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$cards</span> <span class=\"re0\">$idx</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> cards <span class=\"br0\">[</span><span class=\"kw2\">lreplace</span> <span class=\"re0\">$cards</span> <span class=\"re0\">$idx</span> <span class=\"re0\">$idx</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$hand</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Test if a particular group of three cards is a valid set</span><br/><span class=\"kw1\">proc</span> isValidSet <span class=\"br0\">{</span>a b c<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><br/>\t  <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$a</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span>|<span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$b</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span>|<span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$c</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span> <span class=\"sy0\">&amp;&amp;</span><br/>\t  <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$a</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>|<span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$b</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>|<span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$c</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span> <span class=\"sy0\">&amp;&amp;</span><br/>\t  <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$a</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span>|<span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$b</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span>|<span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$c</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span> <span class=\"sy0\">&amp;&amp;</span><br/>\t  <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$a</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span>|<span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$b</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span>|<span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$c</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Get all unique valid sets of three cards in a hand.</span><br/><span class=\"kw1\">proc</span> allValidSets <span class=\"br0\">{</span>hand<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> sets <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$hand</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> a <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$hand</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> hand <span class=\"br0\">[</span><span class=\"kw1\">set</span> cards2 <span class=\"br0\">[</span><span class=\"kw2\">lreplace</span> <span class=\"re0\">$hand</span> <span class=\"re0\">$i</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$cards2</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> b <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$cards2</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> cards2 <span class=\"br0\">[</span><span class=\"kw1\">set</span> cards3 <span class=\"br0\">[</span><span class=\"kw2\">lreplace</span> <span class=\"re0\">$cards2</span> <span class=\"re0\">$j</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">foreach</span> c <span class=\"re0\">$cards3</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>isValidSet <span class=\"re0\">$a</span> <span class=\"re0\">$b</span> <span class=\"re0\">$c</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw2\">lappend</span> sets <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$a</span> <span class=\"re0\">$b</span> <span class=\"re0\">$c</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$sets</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Solve a particular version of the set puzzle, by picking random hands until</span><br/><span class=\"co1\"># one is found that satisfies the constraints. This is usually much faster</span><br/><span class=\"co1\"># than a systematic search. On success, returns the hand found and the card</span><br/><span class=\"co1\"># sets within that hand.</span><br/><span class=\"kw1\">proc</span> SetPuzzle <span class=\"br0\">{</span>numCards numSets<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> hand <span class=\"br0\">[</span>drawCards <span class=\"re0\">$numCards</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> sets <span class=\"br0\">[</span>allValidSets <span class=\"re0\">$hand</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$sets</span><span class=\"br0\">]</span> == <span class=\"re0\">$numSets</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">break</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$hand</span> <span class=\"re0\">$sets</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 22, "block": "<pre class=\"text highlighted_source\">const nDraw=9, nGoal=(nDraw/2);  // Basic<br/>var [const] UH=Utils.Helpers; // baked in stash of goodies<br/>deck:=Walker.cproduct(\"red green purple\".split(), // Cartesian product of 4 lists of lists<br/>\t\t\"one two three\".split(),    // T(1,2,3) (ie numbers) also works<br/>\t\t\"oval squiggle diamond\".split(),<br/>\t\t\"solid open striped\".split()).walk();<br/>reg draw,sets,N=0;<br/>do{ N+=1;<br/>   draw=deck.shuffle()[0,nDraw]; // one draw per shuffle<br/>   sets=UH.pickNFrom(3,draw)  // 84 sets of 3 cards (each with 4 features)<br/>        .filter(fcn(set){    // list of 12 items (== 3 cards)<br/>                    set[0,4].zip(set[4,4],set[8,4]) // --&gt;4 tuples of 3 features<br/>\t\t    .pump(List,UH.listUnique,\"len\", // 1,3 (good) or 2 (bad)<br/>\t\t               '==(2))\t\t    // (F,F,F,F)==good<br/>\t\t    .sum(0) == 0 \t\t    // all 4 feature sets good<br/>\t\t });<br/>}while(sets.len()!=nGoal);<br/>\u00a0<br/>println(\"Dealt\u00a0%d cards\u00a0%d times:\".fmt(draw.len(),N));<br/>draw.pump(Void,fcn(card){ println((\"%8s \"*4).fmt(card.xplode())) });<br/>println(\"\\nContaining:\");<br/>sets.pump(Void,fcn(card){ println(((\"%8s \"*4 + \"\\n\")*3).fmt(card.xplode())) });</pre>"}]}