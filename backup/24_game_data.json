{"task": "24_game", "blocks": [{"lang": "8th", "loc": 111, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\\ Generate four random digits and display to the user<br/>\\ then get an expression from the user using +, -, / and * and the digits<br/>\\ the result must equal 24<br/>\\ http://8th-dev.com/24game.html<br/>\u00a0<br/>\\ Only the words in namespace 'game' are available to the player:<br/>ns: game<br/>\u00a0<br/>: + n:+\u00a0;<br/>: - n:-\u00a0;<br/>: * n:*\u00a0;<br/>: / n:/\u00a0;<br/>\u00a0<br/>ns: G<br/>\u00a0<br/>var random-digits<br/>var user-input<br/>\u00a0<br/>: one-digit \\ a -- a<br/>\trand n:abs 9 n:mod n:1+ a:push\u00a0;<br/>\u00a0<br/>: gen-digits \\ - a<br/>\t[] clone nip \\ the clone nip is not needed in versions past 1.0.2...<br/>\t' one-digit 4 times<br/>\t' n:cmp a:sort<br/>\trandom-digits\u00a0! \u00a0;<br/>\u00a0<br/>: prompt-user <br/>\tcr \"The digits are: \" .  random-digits @ . cr\u00a0;<br/>\u00a0<br/>: goodbye<br/>\tcr \"Thanks for playing!\\n\" . cr 0 die\u00a0;<br/>\u00a0<br/>: get-input<br/>\t70 null con:accept dup user-input\u00a0!<br/>\tnull? if drop goodbye then\u00a0;<br/>\u00a0<br/>: compare-digits<br/>\ttrue swap<br/>\t(<br/>\t\t\\ inputed-array index<br/>\t\tdup &gt;r<br/>\t\ta:@ <br/>\t\trandom-digits @ r&gt; a:@ nip<br/>\t\tn:= not if<br/>\t\t\tbreak<br/>\t\t\tswap drop false swap<br/>\t\tthen<br/>\t) 0 3 loop drop\u00a0;<br/>\u00a0<br/>/^\\D*(\\d)\\D+(\\d)\\D+(\\d)\\D+(\\d)\\D*$/  var, digits-regex<br/>\u00a0<br/>: all-digits? <br/>\tuser-input @ digits-regex @ r:match <br/>\tnull? if drop false else<br/>\t\t5 = not if<br/>\t\t\tfalse<br/>\t\telse<br/>\t\t\t\\ convert the captured digits in the regex into a sorted array:<br/>\t\t\tdigits-regex @ <br/>\t\t\t( r:@ &gt;n swap ) 1 4 loop drop<br/>\t\t\t4 a:close ' n:cmp a:sort<br/>\t\t\tcompare-digits<br/>\t\tthen<br/>\tthen\u00a0;<br/>\u00a0<br/>: does-eval?<br/>\t0 user-input @ eval 24 n:= <br/>\tdup not if<br/>\t\tcr \"Sorry, that expression is wrong\" . cr<br/>\tthen\u00a0;<br/>\u00a0<br/>: check-input<br/>\treset<br/>\tall-digits?  if <br/>\t\tdoes-eval? if<br/>\t\t\tcr \"Excellent!  Your expression: \\\"\" .<br/>\t\t\tuser-input @ .<br/>\t\t\t\"\\\" worked!\" . cr<br/>\t\tthen<br/>\telse<br/>\t\tcr \"You did not use the digits properly, try again.\" . cr<br/>\tthen\u00a0;<br/>\u00a0<br/>: intro quote |<br/>\u00a0<br/>Welcome to the '24 game'!<br/>\u00a0<br/>You will be shown four digits each time.  Using only the + - * and / operators<br/>and all the digits (and only the digits), produce the number '24'<br/>\u00a0<br/>Enter your result in 8th syntax, e.g.:  4 4 + 2 1 + *<br/>\u00a0<br/>To quit the game, just hit enter by itself. Enjoy!<br/>\u00a0<br/>\t| .\u00a0;<br/>\u00a0<br/>: start<br/>\t\\ don't allow anything but the desired words<br/>\tns:game only<br/>\tintro<br/>\trepeat<br/>\t\tgen-digits<br/>\t\tprompt-user<br/>\t\tget-input<br/>\t\tcheck-input<br/>\tagain\u00a0;<br/>\u00a0<br/>start<br/>\u00a0</pre>"}, {"lang": "ABAP", "loc": 83, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Discrete_Random</span>;<br/><span class=\"kw3\">procedure</span> Game_24 <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">subtype</span> Operation <span class=\"kw1\">is</span> Character;<br/>   <span class=\"kw3\">type</span> Op_Array <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Operation;<br/>   <span class=\"kw3\">type</span> Digit <span class=\"kw1\">is</span> <span class=\"kw3\">range</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">9</span>;<br/>   <span class=\"kw3\">type</span> Digit_Array <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Digit;<br/>   <span class=\"kw3\">package</span> Digit_IO <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Integer_IO</span> <span class=\"br0\">(</span>Digit<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">package</span> Random_Digit <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Discrete_Random</span> <span class=\"br0\">(</span>Digit<span class=\"br0\">)</span>;<br/>   Digit_Generator\u00a0: Random_Digit.<span class=\"me1\">Generator</span>;<br/>   Given_Digits\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Digit;<br/><span class=\"kw1\">begin</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"24 Game\"</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"Generating 4 digits...\"</span><span class=\"br0\">)</span>;<br/>   Random_Digit.<span class=\"me1\">Reset</span> <span class=\"br0\">(</span>Digit_Generator<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Given_Digits'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      Given_Digits <span class=\"br0\">(</span>I<span class=\"br0\">)</span>\u00a0:= Random_Digit.<span class=\"me1\">Random</span> <span class=\"br0\">(</span>Digit_Generator<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span><span class=\"st0\">\"Your Digits:\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Given_Digits'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      Digit_IO.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>Given_Digits <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span><span class=\"st0\">\"Enter your Expression: \"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">declare</span><br/>      Value\u00a0: Integer;<br/>      Input_Operations\u00a0: Op_Array <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>      Input_Digits\u00a0: Digit_Array <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>      Unused_Digits\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Given_Digits'<span class=\"kw3\">Range</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Boolean\u00a0:=<br/>        <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; True<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"co1\">-- get input</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">4</span> <span class=\"kw1\">loop</span><br/>         Digit_IO.<span class=\"me1\">Get</span> <span class=\"br0\">(</span>Input_Digits <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> I = <span class=\"nu0\">4</span>;<br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Get</span> <span class=\"br0\">(</span>Input_Operations <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"co1\">-- check input</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Input_Digits'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">declare</span><br/>            Found\u00a0: Boolean\u00a0:= False;<br/>         <span class=\"kw1\">begin</span><br/>            <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> Given_Digits'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>               <span class=\"kw1\">if</span> Unused_Digits <span class=\"br0\">(</span>J<span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"kw1\">then</span><br/>                 Given_Digits <span class=\"br0\">(</span>J<span class=\"br0\">)</span> = Input_Digits <span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                  Unused_Digits <span class=\"br0\">(</span>J<span class=\"br0\">)</span>\u00a0:= False;<br/>                  Found\u00a0:= True;<br/>                  <span class=\"kw3\">exit</span>;<br/>               <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>            <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> Found <span class=\"kw1\">then</span><br/>               Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"Illegal Number used:\"</span> &amp;<br/>                                     Digit'Image <span class=\"br0\">(</span>Input_Digits <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>               <span class=\"kw1\">return</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">end</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"co1\">-- check value</span><br/>      Value\u00a0:= Integer <span class=\"br0\">(</span>Input_Digits <span class=\"br0\">(</span>Input_Digits'First<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Input_Operations'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">case</span> Input_Operations <span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>            <span class=\"kw3\">when</span> '+' =&gt;<br/>               Value\u00a0:= Value + Integer <span class=\"br0\">(</span>Input_Digits <span class=\"br0\">(</span>I + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw3\">when</span> '-' =&gt;<br/>               Value\u00a0:= Value - Integer <span class=\"br0\">(</span>Input_Digits <span class=\"br0\">(</span>I + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw3\">when</span> '*' =&gt;<br/>               Value\u00a0:= Value * Integer <span class=\"br0\">(</span>Input_Digits <span class=\"br0\">(</span>I + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw3\">when</span> '/' =&gt;<br/>               Value\u00a0:= Value / Integer <span class=\"br0\">(</span>Input_Digits <span class=\"br0\">(</span>I + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw3\">when</span> <span class=\"kw3\">others</span> =&gt;<br/>               Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"Illegal Op used:\"</span> &amp;<br/>                                     Input_Operations <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>               <span class=\"kw1\">return</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">case</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">if</span> Value /= <span class=\"nu0\">24</span> <span class=\"kw1\">then</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"Value\"</span> &amp; Integer'Image <span class=\"br0\">(</span>Value<span class=\"br0\">)</span> &amp;<br/>                               <span class=\"st0\">\" is not 24!\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">else</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"You won!\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span>;<br/><span class=\"kw1\">end</span> Game_24;</pre>"}, {"lang": "Ada", "loc": 83, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Discrete_Random</span>;<br/><span class=\"kw3\">procedure</span> Game_24 <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">subtype</span> Operation <span class=\"kw1\">is</span> Character;<br/>   <span class=\"kw3\">type</span> Op_Array <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Operation;<br/>   <span class=\"kw3\">type</span> Digit <span class=\"kw1\">is</span> <span class=\"kw3\">range</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">9</span>;<br/>   <span class=\"kw3\">type</span> Digit_Array <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Digit;<br/>   <span class=\"kw3\">package</span> Digit_IO <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Integer_IO</span> <span class=\"br0\">(</span>Digit<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">package</span> Random_Digit <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Discrete_Random</span> <span class=\"br0\">(</span>Digit<span class=\"br0\">)</span>;<br/>   Digit_Generator\u00a0: Random_Digit.<span class=\"me1\">Generator</span>;<br/>   Given_Digits\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Digit;<br/><span class=\"kw1\">begin</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"24 Game\"</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"Generating 4 digits...\"</span><span class=\"br0\">)</span>;<br/>   Random_Digit.<span class=\"me1\">Reset</span> <span class=\"br0\">(</span>Digit_Generator<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Given_Digits'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      Given_Digits <span class=\"br0\">(</span>I<span class=\"br0\">)</span>\u00a0:= Random_Digit.<span class=\"me1\">Random</span> <span class=\"br0\">(</span>Digit_Generator<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span><span class=\"st0\">\"Your Digits:\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Given_Digits'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      Digit_IO.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>Given_Digits <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span><span class=\"st0\">\"Enter your Expression: \"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">declare</span><br/>      Value\u00a0: Integer;<br/>      Input_Operations\u00a0: Op_Array <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>      Input_Digits\u00a0: Digit_Array <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>      Unused_Digits\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Given_Digits'<span class=\"kw3\">Range</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Boolean\u00a0:=<br/>        <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; True<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"co1\">-- get input</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">4</span> <span class=\"kw1\">loop</span><br/>         Digit_IO.<span class=\"me1\">Get</span> <span class=\"br0\">(</span>Input_Digits <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> I = <span class=\"nu0\">4</span>;<br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Get</span> <span class=\"br0\">(</span>Input_Operations <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"co1\">-- check input</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Input_Digits'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">declare</span><br/>            Found\u00a0: Boolean\u00a0:= False;<br/>         <span class=\"kw1\">begin</span><br/>            <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> Given_Digits'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>               <span class=\"kw1\">if</span> Unused_Digits <span class=\"br0\">(</span>J<span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"kw1\">then</span><br/>                 Given_Digits <span class=\"br0\">(</span>J<span class=\"br0\">)</span> = Input_Digits <span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                  Unused_Digits <span class=\"br0\">(</span>J<span class=\"br0\">)</span>\u00a0:= False;<br/>                  Found\u00a0:= True;<br/>                  <span class=\"kw3\">exit</span>;<br/>               <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>            <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> Found <span class=\"kw1\">then</span><br/>               Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"Illegal Number used:\"</span> &amp;<br/>                                     Digit'Image <span class=\"br0\">(</span>Input_Digits <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>               <span class=\"kw1\">return</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">end</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"co1\">-- check value</span><br/>      Value\u00a0:= Integer <span class=\"br0\">(</span>Input_Digits <span class=\"br0\">(</span>Input_Digits'First<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Input_Operations'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">case</span> Input_Operations <span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>            <span class=\"kw3\">when</span> '+' =&gt;<br/>               Value\u00a0:= Value + Integer <span class=\"br0\">(</span>Input_Digits <span class=\"br0\">(</span>I + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw3\">when</span> '-' =&gt;<br/>               Value\u00a0:= Value - Integer <span class=\"br0\">(</span>Input_Digits <span class=\"br0\">(</span>I + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw3\">when</span> '*' =&gt;<br/>               Value\u00a0:= Value * Integer <span class=\"br0\">(</span>Input_Digits <span class=\"br0\">(</span>I + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw3\">when</span> '/' =&gt;<br/>               Value\u00a0:= Value / Integer <span class=\"br0\">(</span>Input_Digits <span class=\"br0\">(</span>I + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw3\">when</span> <span class=\"kw3\">others</span> =&gt;<br/>               Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"Illegal Op used:\"</span> &amp;<br/>                                     Input_Operations <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>               <span class=\"kw1\">return</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">case</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">if</span> Value /= <span class=\"nu0\">24</span> <span class=\"kw1\">then</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"Value\"</span> &amp; Integer'Image <span class=\"br0\">(</span>Value<span class=\"br0\">)</span> &amp;<br/>                               <span class=\"st0\">\" is not 24!\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">else</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"You won!\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span>;<br/><span class=\"kw1\">end</span> Game_24;</pre>"}, {"lang": "APL", "loc": 8, "block": "<pre class=\"text highlighted_source\">tfgame\u2190{\u2395IO\u21901<br/>    \u2395\u2190d\u2190?\u2375\u23749<br/>    i\u2190\u235e<br/>    u[\u234bu\u2190{\u234e\u00a8\u2363(0\u2260\u2262\u2375)\u22a2\u2375}(i\u220a'1234567890')\u2286i]\u2262d[\u234bd]:'nope'<br/>    ~\u2227/((~b\u2190i\u220a'1234567890')/i)\u220a'+-\u00d7\u00f7()':'nope'<br/>    24\u2260\u234ei:'nope'<br/>    'Yeah!'<br/>}</pre>"}, {"lang": "Argile", "loc": 111, "block": "<pre class=\"text highlighted_source\">use std, array, list<br/>\u00a0<br/>do<br/>  generate random digits<br/>  show random digits<br/>  let result = parse expression (get input line)<br/>  if result\u00a0!= ERROR<br/>    if some digits are unused<br/>      print \"Wrong\u00a0! (you didn't use all digits)\"\u00a0; failure++<br/>    else if result == 24.0<br/>      print \"Correct\u00a0!\"\u00a0; success++<br/>    else<br/>      print \"Wrong\u00a0! (you got \"result\")\"\u00a0; failure++<br/> while play again\u00a0?<br/>print \"success:\"success\" failure:\"failure\" total:\"(success+failure) as int<br/>\u00a0<br/>let success = 0, failure = 0.<br/>\u00a0<br/>.: generate random digits\u00a0:.<br/>   our nat seed = 0xc6f31 (: default seed when /dev/urandom doesn't exist\u00a0:)<br/>   let urandom = fopen \"/dev/urandom\" \"r\"<br/>   if  urandom isn't nil<br/>     fread &amp;seed size of seed 1 urandom<br/>     fclose urandom<br/>   Cfunc srandom seed<br/>   seed = (Cfunc random) as nat<br/>   for each (val int d) from 0 to 3<br/>     digits[d] = '1' + (seed\u00a0% 9)<br/>     seed /= 9<br/>\u00a0<br/>let digits be an array of 4 byte<br/>\u00a0<br/>.: show random digits\u00a0:.<br/>   print \"Enter an expression that equates to 24 using only all these digits:\"<br/>   printf \"%c ,\u00a0%c ,\u00a0%c ,\u00a0%c\\n\"(digits[0])(digits[1])(digits[2])(digits[3])<br/>   printf \"24 = \"<br/>\u00a0<br/>.: some digits are unused\u00a0:. -&gt; bool<br/>   for each (val int d) from 0 to 3<br/>     return true if digits[d]\u00a0!= '\\0'<br/>   false<br/>\u00a0<br/>.: get input line\u00a0:. -&gt; text<br/>   our array of 64 byte line<br/>   Cfunc fgets (line) (size of line) (stdin)<br/>   let int i<br/>   for (i = 0) (line[i]\u00a0!= 0) (i++)<br/>     line[i] = '\\0' if (line[i] == '\\n')<br/>   line as text<br/>\u00a0<br/>.: play again\u00a0?\u00a0:. -&gt; bool<br/>   while true<br/>     printf \"Play again\u00a0? (y/n) \"\u00a0; Cfunc fflush stdout<br/>     let answer = get input line<br/>     switch answer[0]<br/>       case 'n' {return false}<br/>       case 'y' {return true }<br/>       default  {continue    }<br/>   false<br/>\u00a0<br/>=: ERROR\u00a0:= -&gt; real {-32202.0}<br/>\u00a0<br/>.: parse expression &lt;text expr&gt;\u00a0:. -&gt; real<br/>   let x = 0.0, x_is_set = false, op = ' '.<br/>   let stack be a list of State\u00a0; class State {byte op; real x}<br/>   for (stack = nil) (*expr\u00a0!= 0) (expr++)<br/>     switch *expr<br/>       case '+'\u00a0; case '-'\u00a0; case '*'\u00a0; case '/'<br/>         error \"bad syntax\" if not x_is_set<br/>\t op = *expr<br/>       case '1'\u00a0; case '2'\u00a0; case '3'\u00a0; case '4'\u00a0; case '5'<br/>       case '6'\u00a0; case '7'\u00a0; case '8'\u00a0; case '9'<br/>\t error \"missing operator\" if (x_is_set and op == ' ')<br/>\t error \"unavailable digit\" unless consume digit expr[0]<br/>\t do operation with (expr[0] - '0') as real<br/>       case (Cgen \"'('\")<br/>\t error \"missing operator\" if (op == ' ' but x_is_set)<br/>\t (new list (new State) (code of del State())) &lt;&lt; stack<br/>\t op = ' '\u00a0; x_is_set = false (: start fresh state\u00a0:)<br/>       case (Cgen \"')'\")<br/>         error \"mismatched parenthesis\" if stack is nil<br/>\t error \"wrong syntax\" if not x_is_set<br/>\t let y = x<br/>\t x = stack.data.x\u00a0; op = stack.data.op<br/>\t delete pop stack<br/>\t do operation with y<br/>       default {error \"disallowed character\"}<br/>\u00a0<br/>       .:new State         \u00a0:. -&gt; State {let s=new(State); s.x=x; s.op=op; s}<br/>       .:del State &lt;State s&gt;:.          {               free s              }<br/>       .:do operation with &lt;real y&gt;:.<br/>  \t switch op<br/>\t   case '+' {x += y}<br/>\t   case '-' {x -= y}<br/>\t   case '*' {x *= y}<br/>\t   case '/' {x /= y}<br/>\t   default  {x  = y; x_is_set = true}<br/>         op = ' '<br/>   =:error&lt;text msg&gt;:= -&gt;real {eprint \"Error: \"msg\" at [\"expr\"]\";return ERROR}<br/>   .:consume digit &lt;byte b&gt;:. -&gt; bool<br/>     for each (val int d) from 0 to 3<br/>       if digits[d] == b<br/>         digits[d] = '\\0'<br/>       \t return true<br/>     false<br/>\u00a0<br/>   if stack isn't nil<br/>     delete all stack<br/>     error \"unclosed parenthesis\"<br/>   return x<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 108, "block": "<pre class=\"autohotkey highlighted_source\"><span class=\"re2\">AutoExecute: </span><br/>    Title <span class=\"sy0\">:=</span> <span class=\"st0\">\"24 Game\"</span> <br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>MinimizeBox <br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> w230 vPuzzle <br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Edit\"><span class=\"kw8\">Edit</span></a><span class=\"sy0\">,</span> wp vAnswer <br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> w70<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>Generate <br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> x<span class=\"sy0\">+</span><span class=\"nu0\">10</span> wp <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Default\"><span class=\"kw7\">Default</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Submit\"><span class=\"kw7\">Submit</span></a> <br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">Button</span></a><span class=\"sy0\">,</span> x<span class=\"sy0\">+</span><span class=\"nu0\">10</span> wp<span class=\"sy0\">,</span> E<span class=\"sy0\">&amp;</span>xit <br/>\u00a0<br/>\u00a0<br/><span class=\"re2\">ButtonGenerate: </span><span class=\"co1\">; new set of numbers </span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span> <br/>        <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> r<span class=\"re0\">%A_Index%</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span> <br/>    Puzzle <span class=\"sy0\">=</span> <span class=\"re0\">%r1%</span><span class=\"sy0\">,</span> <span class=\"re0\">%r2%</span><span class=\"sy0\">,</span> <span class=\"re0\">%r3%</span><span class=\"sy0\">,</span> <span class=\"kw1\">and</span> <span class=\"re0\">%r4%</span> <br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Puzzle<span class=\"sy0\">,</span> The numbers <span class=\"re2\">are: </span> <span class=\"re0\">%Puzzle%</span>  <span class=\"sy0\">-</span> Good luck! <br/>    <a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Answer <span class=\"co1\">; empty the edit box </span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/ControlFocus.htm\"><span class=\"kw3\">ControlFocus</span></a><span class=\"sy0\">,</span> Edit1 <br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>Disabled <br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a><span class=\"sy0\">,,</span> <span class=\"re0\">%Title%</span> <br/><span class=\"kw1\">Return</span> <span class=\"co1\">; end of auto execute section </span><br/>\u00a0<br/>\u00a0<br/><span class=\"re2\">ButtonSubmit: </span><span class=\"co1\">; check solution </span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Submit\"><span class=\"kw7\">Submit</span></a><span class=\"sy0\">,</span> NoHide <br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">+</span>Disabled <br/>\u00a0<br/>    <span class=\"co1\">; check numbers used </span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/RegExMatch.htm\"><span class=\"kw3\">RegExMatch</span></a><span class=\"br0\">(</span>Answer<span class=\"sy0\">,</span> <span class=\"st0\">\"(\\d)\\D+(\\d)\\D+(\\d)\\D+(\\d)\"</span><span class=\"sy0\">,</span> $<span class=\"br0\">)</span> <br/>    ListPuzzle <span class=\"sy0\">:=</span> r1 <span class=\"st0\">\",\"</span> r2 <span class=\"st0\">\",\"</span> r3 <span class=\"st0\">\",\"</span> r4 <br/>    ListAnswer <span class=\"sy0\">:=</span> $1 <span class=\"st0\">\",\"</span> $2 <span class=\"st0\">\",\"</span> $3 <span class=\"st0\">\",\"</span> $4 <br/>    <a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><span class=\"sy0\">,</span> ListPuzzle<span class=\"sy0\">,</span> D<span class=\"sy0\">,</span> <br/>    <a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><span class=\"sy0\">,</span> ListAnswer<span class=\"sy0\">,</span> D<span class=\"sy0\">,</span> <br/>    <span class=\"kw1\">If</span> Not ListPuzzle <span class=\"sy0\">=</span> ListAnswer <span class=\"br0\">{</span> <br/>        <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">48</span><span class=\"sy0\">,</span> Error <span class=\"sy0\">-</span> <span class=\"re0\">%Title%</span><span class=\"sy0\">,</span> Numbers used!`n<span class=\"re0\">%Answer%</span> <br/>        <a href=\"http://www.autohotkey.com/docs/commands/Goto.htm\"><span class=\"kw3\">Goto</span></a><span class=\"sy0\">,</span> TryAgain <br/>    <span class=\"br0\">}</span> <br/>\u00a0<br/>    <span class=\"co1\">; check operators used </span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> $<span class=\"sy0\">,</span> $<span class=\"sy0\">,</span> <span class=\"sy0\">+,,</span> All <br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> $<span class=\"sy0\">,</span> $<span class=\"sy0\">,</span> <span class=\"sy0\">-,,</span> All <br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> $<span class=\"sy0\">,</span> $<span class=\"sy0\">,</span> <span class=\"sy0\">*,,</span> All <br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> $<span class=\"sy0\">,</span> $<span class=\"sy0\">,</span> <span class=\"sy0\">/,,</span> All <br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> $<span class=\"sy0\">,</span> $<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">,,</span> All <br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> $<span class=\"sy0\">,</span> $<span class=\"sy0\">,</span> <span class=\"br0\">)</span><span class=\"sy0\">,,</span> All <br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">9</span> <br/>        <a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> $<span class=\"sy0\">,</span> $<span class=\"sy0\">,</span> <span class=\"re0\">%A_Index%</span><span class=\"sy0\">,,</span> All <br/>    <span class=\"kw1\">If</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>$<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <br/>    <span class=\"kw1\">Or</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>Answer<span class=\"sy0\">,</span> <span class=\"st0\">\"**\"</span><span class=\"br0\">)</span> <br/>    <span class=\"kw1\">Or</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>Answer<span class=\"sy0\">,</span> <span class=\"st0\">\"//\"</span><span class=\"br0\">)</span> <br/>    <span class=\"kw1\">Or</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>Answer<span class=\"sy0\">,</span> <span class=\"st0\">\"++\"</span><span class=\"br0\">)</span> <br/>    <span class=\"kw1\">Or</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>Answer<span class=\"sy0\">,</span> <span class=\"st0\">\"--\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">48</span><span class=\"sy0\">,</span> Error <span class=\"sy0\">-</span> <span class=\"re0\">%Title%</span><span class=\"sy0\">,</span> Operators used!`n<span class=\"re0\">%Answer%</span> <br/>        <a href=\"http://www.autohotkey.com/docs/commands/Goto.htm\"><span class=\"kw3\">Goto</span></a><span class=\"sy0\">,</span> TryAgain <br/>    <span class=\"br0\">}</span> <br/>\u00a0<br/>    <span class=\"co1\">; check result </span><br/>    Result <span class=\"sy0\">:=</span> Eval<span class=\"br0\">(</span>Answer<span class=\"br0\">)</span> <br/>    <span class=\"kw1\">If</span> Not Result <span class=\"sy0\">=</span> <span class=\"nu0\">24</span> <span class=\"br0\">{</span> <br/>        <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">48</span><span class=\"sy0\">,</span> Error <span class=\"sy0\">-</span> <span class=\"re0\">%Title%</span><span class=\"sy0\">,</span> Result incorrect!`n<span class=\"re0\">%Result%</span> <br/>        <a href=\"http://www.autohotkey.com/docs/commands/Goto.htm\"><span class=\"kw3\">Goto</span></a><span class=\"sy0\">,</span> TryAgain <br/>    <span class=\"br0\">}</span> <br/>\u00a0<br/>    <span class=\"co1\">; if we are sill here </span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"re0\">%Title%</span><span class=\"sy0\">,</span> Correct solution! Play again? <br/>    <a href=\"http://www.autohotkey.com/docs/commands/IfMsgBox.htm\"><span class=\"kw3\">IfMsgBox</span></a><span class=\"sy0\">,</span> Yes <br/>        <a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">Gosub</span></a><span class=\"sy0\">,</span> ButtonGenerate <br/>    <span class=\"kw1\">Else</span> <br/>        <a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a> <br/><span class=\"kw1\">Return</span> <br/>\u00a0<br/>\u00a0<br/><span class=\"re2\">TryAgain: </span><span class=\"co1\">; alternative ending of routine ButtonSubmit </span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/ControlFocus.htm\"><span class=\"kw3\">ControlFocus</span></a><span class=\"sy0\">,</span> Edit1 <br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>Disabled <br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a> <br/><span class=\"kw1\">Return</span> <br/>\u00a0<br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiClose\"><span class=\"kw7\">GuiClose</span></a>: <br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiEscape\"><span class=\"kw7\">GuiEscape</span></a>: <br/><span class=\"re2\">ButtonExit: </span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a> <br/><span class=\"kw1\">Return</span> <br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;--------------------------------------------------------------------------- </span><br/>Eval<span class=\"br0\">(</span>Expr<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; evaluate expression using separate AHK process </span><br/><span class=\"co1\">;--------------------------------------------------------------------------- </span><br/>    <span class=\"co1\">; credit for this function goes to AutoHotkey forum member Laszlo </span><br/>    <span class=\"co1\">; http://www.autohotkey.com/forum/topic9578.html </span><br/>    <span class=\"co1\">;----------------------------------------------------------------------- </span><br/>    static File <span class=\"sy0\">:=</span> <span class=\"st0\">\"24$Temp.ahk\"</span> <br/>\u00a0<br/>    <span class=\"co1\">; delete old temporary file, and write new </span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/FileDelete.htm\"><span class=\"kw3\">FileDelete</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%File%</span> <br/>    FileContent <span class=\"sy0\">:=</span> <span class=\"st0\">\"#NoTrayIcon`r`n\"</span> <br/>                <span class=\"sy0\">.</span>  <span class=\"st0\">\"FileDelete, \"</span> File <span class=\"st0\">\"`r`n\"</span> <br/>                <span class=\"sy0\">.</span>  <span class=\"st0\">\"FileAppend, `% \"</span> Expr <span class=\"st0\">\", \"</span> File <span class=\"st0\">\"`r`n\"</span> <br/>    <a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">FileAppend</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%FileContent%</span><span class=\"sy0\">,</span> <span class=\"re0\">%File%</span> <br/>\u00a0<br/>    <span class=\"co1\">; run AHK to execute temp script, evaluate expression </span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/RunWait.htm\"><span class=\"kw3\">RunWait</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%A_AhkPath%</span> <span class=\"re0\">%File%</span> <br/>\u00a0<br/>    <span class=\"co1\">; get result </span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/FileRead.htm\"><span class=\"kw3\">FileRead</span></a><span class=\"sy0\">,</span> Result<span class=\"sy0\">,</span> <span class=\"re0\">%File%</span> <br/>    <a href=\"http://www.autohotkey.com/docs/commands/FileDelete.htm\"><span class=\"kw3\">FileDelete</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%File%</span> <br/>    <span class=\"kw1\">Return</span><span class=\"sy0\">,</span> Result <br/><span class=\"br0\">}</span></pre>"}, {"lang": "AutoIt", "loc": 76, "block": "<pre class=\"autoit highlighted_source\">\u00a0<br/><span class=\"co0\">;AutoIt Script Example</span><br/><span class=\"co0\">;by Daniel Barnes</span><br/><span class=\"co0\">;spam me at djbarnes at orcon dot net dot en zed</span><br/><span class=\"co0\">;13/08/2012</span><br/>\u00a0<br/><span class=\"co0\">;Choose four random digits (1-9) with repetitions allowed:</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">global</span></a> <span class=\"re0\">$digits</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">FOR</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">TO</span></a> <span class=\"nu0\">4</span><br/>\t<span class=\"re0\">$digits</span> <span class=\"sy0\">&amp;=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">NEXT</span></a><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">While</span></a> <span class=\"nu0\">1</span><br/>\tmain<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">WEnd</span></a><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$text</span>  <span class=\"sy0\">=</span> <span class=\"st0\">\"Enter an equation (using all of, and only, the single digits \"</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$digits</span> <span class=\"sy0\">&amp;</span><span class=\"st0\">\")\"</span><span class=\"sy0\">&amp;</span><a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><br/>\t<span class=\"re0\">$text</span> <span class=\"sy0\">&amp;=</span> <span class=\"st0\">\"which evaluates to exactly 24. Only multiplication (*) division (/)\"</span><span class=\"sy0\">&amp;</span><a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><br/>\t<span class=\"re0\">$text</span> <span class=\"sy0\">&amp;=</span> <span class=\"st0\">\"addition (+) and subtraction (-) operations and parentheses are allowed:\"</span><br/>\t<span class=\"re0\">$input</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/InputBox.htm\"><span class=\"kw3\">InputBox</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"24 Game\"</span><span class=\"sy0\">,</span><span class=\"re0\">$text</span><span class=\"sy0\">,</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span><span class=\"nu0\">400</span><span class=\"sy0\">,</span><span class=\"nu0\">150</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@error</span></span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">exit</span></a><br/>\u00a0<br/>\t<span class=\"co0\">;remove any spaces in input</span><br/>\t<span class=\"re0\">$input</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"br0\">(</span><span class=\"re0\">$input</span><span class=\"sy0\">,</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"co0\">;check correct characters were used</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm\"><span class=\"kw3\">StringLen</span></a><span class=\"br0\">(</span><span class=\"re0\">$input</span><span class=\"br0\">)</span><br/>\t\t<span class=\"re0\">$chr</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringMid.htm\"><span class=\"kw3\">StringMid</span></a><span class=\"br0\">(</span><span class=\"re0\">$input</span><span class=\"sy0\">,</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Not</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringInStr.htm\"><span class=\"kw3\">StringInStr</span></a><span class=\"br0\">(</span><span class=\"st0\">\"123456789*/+-()\"</span><span class=\"sy0\">,</span><span class=\"re0\">$chr</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ERROR\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Invalid character used: '\"</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$chr</span><span class=\"sy0\">&amp;</span><span class=\"st0\">\"'\"</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">return</span></a><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">endif</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/>\t<span class=\"co0\">;validate the equation uses all of the 4 characters, and nothing else</span><br/>\t<span class=\"re0\">$test</span> <span class=\"sy0\">=</span> <span class=\"re0\">$input</span><br/>\t<span class=\"re0\">$test</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"br0\">(</span><span class=\"re0\">$test</span><span class=\"sy0\">,</span><span class=\"st0\">\"(\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$test</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"br0\">(</span><span class=\"re0\">$test</span><span class=\"sy0\">,</span><span class=\"st0\">\")\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"co0\">;validate the length of the input - if its not 7 characters long then the user has done something wrong</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm\"><span class=\"kw3\">StringLen</span></a> <span class=\"br0\">(</span><span class=\"re0\">$test</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">7</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"st0\">\"ERROR\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"The equation \"</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$test</span><span class=\"sy0\">&amp;</span><span class=\"st0\">\" is invalid\"</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">return</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">endif</span></a><br/>\u00a0<br/>\t<span class=\"re0\">$test</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"br0\">(</span><span class=\"re0\">$test</span><span class=\"sy0\">,</span><span class=\"st0\">\"/\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$test</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"br0\">(</span><span class=\"re0\">$test</span><span class=\"sy0\">,</span><span class=\"st0\">\"*\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$test</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"br0\">(</span><span class=\"re0\">$test</span><span class=\"sy0\">,</span><span class=\"st0\">\"-\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$test</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"br0\">(</span><span class=\"re0\">$test</span><span class=\"sy0\">,</span><span class=\"st0\">\"+\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm\"><span class=\"kw3\">StringLen</span></a><span class=\"br0\">(</span><span class=\"re0\">$digits</span><span class=\"br0\">)</span><br/>\t\t<span class=\"re0\">$digit</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringMid.htm\"><span class=\"kw3\">StringMid</span></a><span class=\"br0\">(</span><span class=\"re0\">$digits</span><span class=\"sy0\">,</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$ii</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm\"><span class=\"kw3\">StringLen</span></a><span class=\"br0\">(</span><span class=\"re0\">$test</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a>  <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringMid.htm\"><span class=\"kw3\">StringMid</span></a><span class=\"br0\">(</span><span class=\"re0\">$test</span><span class=\"sy0\">,</span><span class=\"re0\">$ii</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$digit</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t\t\t<span class=\"re0\">$test</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLeft.htm\"><span class=\"kw3\">StringLeft</span></a><span class=\"br0\">(</span><span class=\"re0\">$test</span><span class=\"sy0\">,</span><span class=\"re0\">$ii</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringRight.htm\"><span class=\"kw3\">StringRight</span></a><span class=\"br0\">(</span><span class=\"re0\">$test</span><span class=\"sy0\">,</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm\"><span class=\"kw3\">StringLen</span></a><span class=\"br0\">(</span><span class=\"re0\">$test</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"re0\">$ii</span><span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">ExitLoop</span></a><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">endif</span></a><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$test</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ERROR\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"The equation didn't use all 4 characters, and nothing else!\"</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">return</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">endif</span></a><br/>\u00a0<br/>\t<span class=\"re0\">$try</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/Execute.htm\"><span class=\"kw3\">Execute</span></a><span class=\"br0\">(</span><span class=\"re0\">$input</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$try</span> <span class=\"sy0\">=</span> <span class=\"nu0\">24</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"24 Game\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Well done. Your equation (\"</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$input</span><span class=\"sy0\">&amp;</span><span class=\"st0\">\") = 24!\"</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Exit</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Else</span></a><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"24 Game\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Fail. Your equation (\"</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$input</span><span class=\"sy0\">&amp;</span><span class=\"st0\">\") = \"</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$try</span><span class=\"sy0\">&amp;</span><span class=\"st0\">\"!\"</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">return</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">endif</span></a><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 66, "block": "<pre class=\"text highlighted_source\">      REM Choose four random digits (1-9) with repetitions allowed:<br/>      DIM digits%(4), check%(4)<br/>      FOR choice% = 1 TO 4<br/>        digits%(choice%) = RND(9)<br/>      NEXT choice%<br/>\u00a0<br/>      REM Prompt the player:<br/>      PRINT \"Enter an equation (using all of, and only, the single digits \";<br/>      FOR index% = 1 TO 4<br/>        PRINT\u00a0; digits%(index%)\u00a0;<br/>        IF index%&lt;&gt;4 PRINT \" \"\u00a0;<br/>      NEXT<br/>      PRINT \")\"<br/>      PRINT \"which evaluates to exactly 24.  Only multiplication (*), division (/),\"<br/>      PRINT \"addition (+) &amp; subtraction (-) operations and parentheses are allowed:\"<br/>      INPUT \"24 = \" equation$<br/>\u00a0<br/>      REPEAT<br/>\u00a0<br/>        REM Check that the correct digits are used:<br/>        check%() = 0<br/>        FOR char% = 1 TO LEN(equation$)<br/>          digit% = INSTR(\"0123456789\", MID$(equation$, char%, 1)) - 1<br/>          IF digit% &gt;= 0 THEN<br/>            FOR index% = 1 TO 4<br/>              IF digit% = digits%(index%) THEN<br/>                IF NOT check%(index%) check%(index%) = TRUE\u00a0: EXIT FOR<br/>              ENDIF<br/>            NEXT index%<br/>            IF index% &gt; 4 THEN<br/>              PRINT \"Sorry, you used the illegal digit \"; digit%<br/>              EXIT REPEAT<br/>            ENDIF<br/>          ENDIF<br/>        NEXT char%<br/>\u00a0<br/>        FOR index% = 1 TO 4<br/>          IF NOT check%(index%) THEN<br/>            PRINT \"Sorry, you failed to use the digit \"\u00a0; digits%(index%)<br/>            EXIT REPEAT<br/>          ENDIF<br/>        NEXT index%<br/>\u00a0<br/>        REM Check that no pairs of digits are used:<br/>        FOR pair% = 11 TO 99<br/>          IF INSTR(equation$, STR$(pair%)) THEN<br/>            PRINT \"Sorry, you may not use a pair of digits \"; pair%<br/>            EXIT REPEAT<br/>          ENDIF<br/>        NEXT pair%<br/>\u00a0<br/>        REM Check whether the equation evaluates to 24:<br/>        ON ERROR LOCAL PRINT \"Sorry, there was an error in the equation\"\u00a0: EXIT REPEAT<br/>        result = EVAL(equation$)<br/>        RESTORE ERROR<br/>        IF result = 24 THEN<br/>          PRINT \"Congratulations, you succeeded in the task!\"<br/>        ELSE<br/>          PRINT \"Sorry, your equation evaluated to \"\u00a0; result \" rather than 24!\"<br/>        ENDIF<br/>\u00a0<br/>      UNTIL TRUE<br/>\u00a0<br/>      INPUT '\"Play again\", answer$<br/>      IF LEFT$(answer$,1) = \"y\" OR LEFT$(answer$,1) = \"Y\" THEN CLS\u00a0: RUN<br/>      QUIT</pre>"}, {"lang": "Befunge", "loc": 26, "block": "<pre class=\"text highlighted_source\">v         &gt; &gt; &gt;&gt; v<br/>2           2                   1234<br/>4         ^1?3^4<br/>&gt;8*00p10p&gt; &gt;? \u00a0?5&gt; 68*+00g10gpv<br/>          v9?7v6              0<br/>            8                 0<br/>          &gt; &gt; &gt;&gt; ^            g<br/>         ^p00  _v#   `\\*49:+1 &lt;<br/>_&gt;\"rorrE\",,,,,$ &gt;~:67*-!#v_:167*+-!#v_:95*-!#v_:295*+-!#v_:586*+\\`#v_:97*2--!#v<br/>                         $          $        $          $         \u00a0:          $<br/>                         *          +        -          /          1         \u00a0:<br/>\t\t^        &lt;          &lt;        &lt;          &lt;          8          .<br/>                                                                   6          6<br/>                                                                   *          4<br/>                                                                   +          *<br/>                                                                   \\          -<br/>                                                                   `    &gt;    v_v<br/>                                                                             \"<br/> ^                                       &lt;                         _v        e<br/>\t\t^                       _^#+*28:p2\\*84\\-*86g2:-+*441&lt;        s<br/>                                                                             o<br/>                                                                             L<br/>                                                  &gt;    1                |-*49\"#&lt;<br/>                                                  |   -*84gg01g00&lt;p00*84&lt;v   &lt;<br/>                                                  &gt;00g:1+00p66*`#^_ \"niW\"&gt;:#,<a class=\"__cf_email__\" data-cfemail=\"97c8d7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>\u00a0</pre>"}, {"lang": "Bracmat", "loc": 78, "block": "<pre class=\"text highlighted_source\">  ( 24-game<br/>  =     m-w m-z 4numbers answer expr numbers<br/>      , seed get-random convertBinaryMinusToUnary<br/>      , convertDivisionToMultiplication isExpresssion reciprocal<br/>    .   (seed=.!arg:(~0:~/#?m-w.~0:~/#?m-z))<br/>      &amp; seed$!arg<br/>      &amp; ( get-random<br/>        =   <br/>          .   36969*mod$(!m-z.65536)+div$(!m-z.65536):?m-z<br/>            &amp; 18000*mod$(!m-w.65536)+div$(!m-w.65536):?m-w<br/>            &amp; mod$(!m-z*65536+!m-w.9)+1<br/>        )<br/>      &amp; ( convertBinaryMinusToUnary<br/>        =   a z<br/>          .     @(!arg:%?a \"-\"\u00a0?z)<br/>              &amp; str$(!a \"+-1*\" convertBinaryMinusToUnary$!z)<br/>            |\u00a0!arg<br/>        )<br/>      &amp; (reciprocal=.!arg^-1)<br/>      &amp; ( convertDivisionToMultiplication<br/>        =   a z<br/>          .     @(!arg:?a \"/\"\u00a0?z)<br/>              &amp; str$(!a \"*reciprocal$\" convertDivisionToMultiplication$!z)<br/>            |\u00a0!arg<br/>        )<br/>      &amp; ( isExpresssion<br/>        =   A Z expr<br/>          .   @(\u00a0!arg<br/>              \u00a0:  \u00a0?A<br/>                   (\"+\"|\"-\"|\"*\"|\"/\")<br/>                   (\u00a0?Z<br/>                   &amp; isExpresssion$!A<br/>                   &amp; isExpresssion$!Z<br/>                   )<br/>               )<br/>            |  \u00a0!numbers:?A\u00a0!arg\u00a0?Z<br/>              &amp;\u00a0!A\u00a0!Z:?numbers<br/>            |   ( @(!arg:\"(\"\u00a0?expr \")\")<br/>                | @(!arg:(\" \"|\\t)\u00a0?expr)<br/>                | @(!arg:?expr (\" \"|\\t))<br/>                )<br/>              &amp; isExpresssion$!expr<br/>        )<br/>      &amp;   out<br/>        $ \"Enter an expression that evaluates to 24 by combining the following numbers.\"<br/>      &amp; out$\"You may only use the operators + - * /\"<br/>      &amp; out$\"Parentheses and spaces are allowed.\"<br/>      &amp;   whl<br/>        ' (   get-random$() get-random$() get-random$() get-random$<br/>           \u00a0:\u00a0?4numbers<br/>          &amp; out$!4numbers<br/>          &amp;   whl<br/>            ' ( get'(,STR):?expr:~<br/>              &amp;\u00a0!4numbers:?numbers<br/>              &amp; ~(isExpresssion$!expr&amp;!numbers:)<br/>              &amp;   out<br/>                $ ( str<br/>                  $ ( \"[\"<br/>                     \u00a0!expr<br/>                      \"] is not a valid expression. Try another expression.\"<br/>                    )<br/>                  )<br/>              )<br/>          &amp;\u00a0!expr:~<br/>          &amp; convertBinaryMinusToUnary$!expr:?expr<br/>          &amp; convertDivisionToMultiplication$!expr:?expr<br/>          &amp; get$(!expr,MEM):?answer<br/>          &amp; out$(str$(!expr \" = \"\u00a0!answer))<br/>          &amp;  \u00a0!answer<br/>           \u00a0: ( 24&amp;out$Right!<br/>              | #&amp;out$Wrong!<br/>              )<br/>          &amp; out$\"Try another one:\"<br/>          )<br/>      &amp; out$bye<br/>  )<br/>&amp; 24-game$(13.14)<br/>&amp;\u00a0;</pre>"}, {"lang": "C", "loc": 281, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;ctype.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;setjmp.h&gt;</span><br/><span class=\"co2\">#include &lt;time.h&gt;</span><br/>\u00a0<br/>jmp_buf ctx<span class=\"sy0\">;</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>msg<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">enum</span> <span class=\"br0\">{</span> OP_NONE <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> OP_NUM<span class=\"sy0\">,</span> OP_ADD<span class=\"sy0\">,</span> OP_SUB<span class=\"sy0\">,</span> OP_MUL<span class=\"sy0\">,</span> OP_DIV <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> expr_t <span class=\"sy0\">*</span>expr<span class=\"sy0\">,</span> expr_t<span class=\"sy0\">;</span><br/><span class=\"kw4\">struct</span> expr_t <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> op<span class=\"sy0\">,</span> val<span class=\"sy0\">,</span> used<span class=\"sy0\">;</span><br/>\texpr left<span class=\"sy0\">,</span> right<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">#define N_DIGITS 4</span><br/>expr_t digits<span class=\"br0\">[</span>N_DIGITS<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> gen_digits<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> N_DIGITS<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tdigits<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#define MAX_INPUT 64</span><br/><span class=\"kw4\">char</span> str<span class=\"br0\">[</span>MAX_INPUT<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> pos<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">#define POOL_SIZE 8</span><br/>expr_t pool<span class=\"br0\">[</span>POOL_SIZE<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> pool_ptr<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> reset<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\tmsg <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\tpool_ptr <span class=\"sy0\">=</span> pos <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> POOL_SIZE<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tpool<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">op</span> <span class=\"sy0\">=</span> OP_NONE<span class=\"sy0\">;</span><br/>\t\tpool<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">left</span> <span class=\"sy0\">=</span> pool<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">right</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> N_DIGITS<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tdigits<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">used</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* longish jumpish back to input cycle */</span><br/><span class=\"kw4\">void</span> bail<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tmsg <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/longjmp.html\"><span class=\"kw3\">longjmp</span></a><span class=\"br0\">(</span>ctx<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>expr new_expr<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>pool_ptr <span class=\"sy0\">&lt;</span> POOL_SIZE<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> pool <span class=\"sy0\">+</span> pool_ptr<span class=\"sy0\">++;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* check next input char */</span><br/><span class=\"kw4\">int</span> next_tok<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isspace.html\"><span class=\"kw3\">isspace</span></a><span class=\"br0\">(</span>str<span class=\"br0\">[</span>pos<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> pos<span class=\"sy0\">++;</span><br/>\t<span class=\"kw1\">return</span> str<span class=\"br0\">[</span>pos<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* move input pointer forward */</span><br/><span class=\"kw4\">int</span> take<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>str<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"sy0\">++</span>pos<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* BNF(ish)<br/>expr = term { (\"+\")|(\"-\") term }<br/>term = fact { (\"*\")|(\"/\") expr }<br/>fact =\tnumber<br/>\t| '(' expr ')'<br/>*/</span><br/>\u00a0<br/>expr get_fact<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>expr get_term<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>expr get_expr<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>expr get_expr<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> c<span class=\"sy0\">;</span><br/>\texpr l<span class=\"sy0\">,</span> r<span class=\"sy0\">,</span> ret<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>ret <span class=\"sy0\">=</span> get_term<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> bail<span class=\"br0\">(</span><span class=\"st0\">\"Expected term\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>c <span class=\"sy0\">=</span> next_tok<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'+'</span> <span class=\"sy0\">||</span> c <span class=\"sy0\">==</span> <span class=\"st0\">'-'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>take<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> bail<span class=\"br0\">(</span><span class=\"st0\">\"Unexpected end of input\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>r <span class=\"sy0\">=</span> get_term<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> bail<span class=\"br0\">(</span><span class=\"st0\">\"Expected term\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tl <span class=\"sy0\">=</span> ret<span class=\"sy0\">;</span><br/>\t\tret <span class=\"sy0\">=</span> new_expr<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tret<span class=\"sy0\">-&gt;</span>op <span class=\"sy0\">=</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"st0\">'+'</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> OP_ADD <span class=\"sy0\">:</span> OP_SUB<span class=\"sy0\">;</span><br/>\t\tret<span class=\"sy0\">-&gt;</span>left <span class=\"sy0\">=</span> l<span class=\"sy0\">;</span><br/>\t\tret<span class=\"sy0\">-&gt;</span>right <span class=\"sy0\">=</span> r<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> ret<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>expr get_term<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> c<span class=\"sy0\">;</span><br/>\texpr l<span class=\"sy0\">,</span> r<span class=\"sy0\">,</span> ret<span class=\"sy0\">;</span><br/>\tret <span class=\"sy0\">=</span> get_fact<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span>c <span class=\"sy0\">=</span> next_tok<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'*'</span> <span class=\"sy0\">||</span> c <span class=\"sy0\">==</span> <span class=\"st0\">'/'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>take<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> bail<span class=\"br0\">(</span><span class=\"st0\">\"Unexpected end of input\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tr <span class=\"sy0\">=</span> get_fact<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tl <span class=\"sy0\">=</span> ret<span class=\"sy0\">;</span><br/>\t\tret <span class=\"sy0\">=</span> new_expr<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tret<span class=\"sy0\">-&gt;</span>op <span class=\"sy0\">=</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"st0\">'*'</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> OP_MUL <span class=\"sy0\">:</span> OP_DIV<span class=\"sy0\">;</span><br/>\t\tret<span class=\"sy0\">-&gt;</span>left <span class=\"sy0\">=</span> l<span class=\"sy0\">;</span><br/>\t\tret<span class=\"sy0\">-&gt;</span>right <span class=\"sy0\">=</span> r<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> ret<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>expr get_digit<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> c <span class=\"sy0\">=</span> next_tok<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\texpr ret<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'0'</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'9'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ttake<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tret <span class=\"sy0\">=</span> new_expr<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tret<span class=\"sy0\">-&gt;</span>op <span class=\"sy0\">=</span> OP_NUM<span class=\"sy0\">;</span><br/>\t\tret<span class=\"sy0\">-&gt;</span>val <span class=\"sy0\">=</span> c <span class=\"sy0\">-</span> <span class=\"st0\">'0'</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> N_DIGITS<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>digits<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">==</span> ret<span class=\"sy0\">-&gt;</span>val <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>digits<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">used</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\tdigits<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">used</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">return</span> ret<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\tbail<span class=\"br0\">(</span><span class=\"st0\">\"Invalid digit\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>expr get_fact<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> c<span class=\"sy0\">;</span><br/>\texpr l <span class=\"sy0\">=</span> get_digit<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"kw1\">return</span> l<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>c <span class=\"sy0\">=</span> next_tok<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'('</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ttake<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tl <span class=\"sy0\">=</span> get_expr<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>next_tok<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"st0\">')'</span><span class=\"br0\">)</span> bail<span class=\"br0\">(</span><span class=\"st0\">\"Unbalanced parens\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ttake<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> l<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>expr parse<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\texpr ret <span class=\"sy0\">=</span> get_expr<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>next_tok<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"br0\">)</span><br/>\t\tbail<span class=\"br0\">(</span><span class=\"st0\">\"Trailing garbage\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> N_DIGITS<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>digits<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">used</span><span class=\"br0\">)</span><br/>\t\t\tbail<span class=\"br0\">(</span><span class=\"st0\">\"Not all digits are used\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> ret<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> frac_t frac_t<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>frac<span class=\"sy0\">;</span><br/><span class=\"kw4\">struct</span> frac_t <span class=\"br0\">{</span> <span class=\"kw4\">int</span> denom<span class=\"sy0\">,</span> num<span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> gcd<span class=\"br0\">(</span><span class=\"kw4\">int</span> m<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> t<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tt <span class=\"sy0\">=</span> m<span class=\"sy0\">;</span> m <span class=\"sy0\">=</span> n <span class=\"sy0\">%</span> m<span class=\"sy0\">;</span> n <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* evaluate expression tree.  result in fraction form */</span><br/><span class=\"kw4\">void</span> eval_tree<span class=\"br0\">(</span>expr e<span class=\"sy0\">,</span> frac res<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tfrac_t l<span class=\"sy0\">,</span> r<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> t<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>e<span class=\"sy0\">-&gt;</span>op <span class=\"sy0\">==</span> OP_NUM<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tres<span class=\"sy0\">-&gt;</span>num <span class=\"sy0\">=</span> e<span class=\"sy0\">-&gt;</span>val<span class=\"sy0\">;</span><br/>\t\tres<span class=\"sy0\">-&gt;</span>denom <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\teval_tree<span class=\"br0\">(</span>e<span class=\"sy0\">-&gt;</span>left<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>l<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\teval_tree<span class=\"br0\">(</span>e<span class=\"sy0\">-&gt;</span>right<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span>e<span class=\"sy0\">-&gt;</span>op<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">case</span> OP_ADD<span class=\"sy0\">:</span><br/>\t\tres<span class=\"sy0\">-&gt;</span>num <span class=\"sy0\">=</span> l.<span class=\"me1\">num</span> <span class=\"sy0\">*</span> r.<span class=\"me1\">denom</span> <span class=\"sy0\">+</span> l.<span class=\"me1\">denom</span> <span class=\"sy0\">*</span> r.<span class=\"me1\">num</span><span class=\"sy0\">;</span><br/>\t\tres<span class=\"sy0\">-&gt;</span>denom <span class=\"sy0\">=</span> l.<span class=\"me1\">denom</span> <span class=\"sy0\">*</span> r.<span class=\"me1\">denom</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">case</span> OP_SUB<span class=\"sy0\">:</span><br/>\t\tres<span class=\"sy0\">-&gt;</span>num <span class=\"sy0\">=</span> l.<span class=\"me1\">num</span> <span class=\"sy0\">*</span> r.<span class=\"me1\">denom</span> <span class=\"sy0\">-</span> l.<span class=\"me1\">denom</span> <span class=\"sy0\">*</span> r.<span class=\"me1\">num</span><span class=\"sy0\">;</span><br/>\t\tres<span class=\"sy0\">-&gt;</span>denom <span class=\"sy0\">=</span> l.<span class=\"me1\">denom</span> <span class=\"sy0\">*</span> r.<span class=\"me1\">denom</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">case</span> OP_MUL<span class=\"sy0\">:</span><br/>\t\tres<span class=\"sy0\">-&gt;</span>num <span class=\"sy0\">=</span> l.<span class=\"me1\">num</span> <span class=\"sy0\">*</span> r.<span class=\"me1\">num</span><span class=\"sy0\">;</span><br/>\t\tres<span class=\"sy0\">-&gt;</span>denom <span class=\"sy0\">=</span> l.<span class=\"me1\">denom</span> <span class=\"sy0\">*</span> r.<span class=\"me1\">denom</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">case</span> OP_DIV<span class=\"sy0\">:</span><br/>\t\tres<span class=\"sy0\">-&gt;</span>num <span class=\"sy0\">=</span> l.<span class=\"me1\">num</span> <span class=\"sy0\">*</span> r.<span class=\"me1\">denom</span><span class=\"sy0\">;</span><br/>\t\tres<span class=\"sy0\">-&gt;</span>denom <span class=\"sy0\">=</span> l.<span class=\"me1\">denom</span> <span class=\"sy0\">*</span> r.<span class=\"me1\">num</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>t <span class=\"sy0\">=</span> gcd<span class=\"br0\">(</span>res<span class=\"sy0\">-&gt;</span>denom<span class=\"sy0\">,</span> res<span class=\"sy0\">-&gt;</span>num<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tres<span class=\"sy0\">-&gt;</span>denom <span class=\"sy0\">/=</span> t<span class=\"sy0\">;</span><br/>\t\tres<span class=\"sy0\">-&gt;</span>num <span class=\"sy0\">/=</span> t<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> get_input<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>reinput<span class=\"sy0\">:</span><br/>\treset<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Available digits are:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> N_DIGITS<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%d\"</span><span class=\"sy0\">,</span> digits<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\". Type an expression and I'll check it for you, or make new numbers.<span class=\"es1\">\\n</span>\"</span><br/>\t\t<span class=\"st0\">\"Your choice? [Expr/n/q] \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> MAX_INPUT<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> str<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fgets.html\"><span class=\"kw3\">fgets</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">,</span> MAX_INPUT<span class=\"sy0\">,</span> stdin<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>str <span class=\"sy0\">==</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"br0\">)</span> <span class=\"kw1\">goto</span> reinput<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>str<span class=\"br0\">[</span>MAX_INPUT <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><br/>\t\t\tbail<span class=\"br0\">(</span><span class=\"st0\">\"string too long\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> MAX_INPUT<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span> str<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>str<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'q'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Bye<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>str<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'n'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tgen_digits<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">goto</span> reinput<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tfrac_t f<span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/srand.html\"><span class=\"kw3\">srand</span></a><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/time.html\"><span class=\"kw3\">time</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tgen_digits<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tget_input<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/setjmp.html\"><span class=\"kw3\">setjmp</span></a><span class=\"br0\">(</span>ctx<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* if parse error, jump back here with err msg set */</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>msg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"coMULTI\">/* after error jump; announce, reset, redo */</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s at '%.*s'<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> msg<span class=\"sy0\">,</span> pos<span class=\"sy0\">,</span> str<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\teval_tree<span class=\"br0\">(</span>parse<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>f.<span class=\"me1\">denom</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> bail<span class=\"br0\">(</span><span class=\"st0\">\"Divide by zero\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>f.<span class=\"me1\">denom</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> f.<span class=\"me1\">num</span> <span class=\"sy0\">==</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"You got 24.  Very good.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>f.<span class=\"me1\">denom</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Eval to:\u00a0%d, \"</span><span class=\"sy0\">,</span> f.<span class=\"me1\">num</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Eval to:\u00a0%d/%d, \"</span><span class=\"sy0\">,</span> f.<span class=\"me1\">num</span><span class=\"sy0\">,</span> f.<span class=\"me1\">denom</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"no good.  Try again.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 98, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;random&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;stack&gt;</span><br/><span class=\"co2\">#include &lt;set&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;functional&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> RPNParse<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  stack<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> stk<span class=\"sy4\">;</span><br/>  multiset<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> digits<span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">void</span> op<span class=\"br0\">(</span>function<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"br0\">(</span><span class=\"kw4\">double</span>,<span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"sy1\">&gt;</span> f<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>stk.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">throw</span> <span class=\"st0\">\"Improperly written expression\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> b <span class=\"sy1\">=</span> stk.<span class=\"me1\">top</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> stk.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> stk.<span class=\"me1\">top</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> stk.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    stk.<span class=\"me1\">push</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">void</span> parse<span class=\"br0\">(</span><span class=\"kw4\">char</span> c<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>c <span class=\"sy1\">&gt;=</span> <span class=\"st0\">'0'</span> <span class=\"sy3\">&amp;&amp;</span> c <span class=\"sy1\">&lt;=</span> <span class=\"st0\">'9'</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      stk.<span class=\"me1\">push</span><span class=\"br0\">(</span>c <span class=\"sy2\">-</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      digits.<span class=\"me1\">insert</span><span class=\"br0\">(</span>c <span class=\"sy2\">-</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>c <span class=\"sy1\">==</span> <span class=\"st0\">'+'</span><span class=\"br0\">)</span><br/>      op<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">double</span> a, <span class=\"kw4\">double</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> a<span class=\"sy2\">+</span>b<span class=\"sy4\">;</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>c <span class=\"sy1\">==</span> <span class=\"st0\">'-'</span><span class=\"br0\">)</span><br/>      op<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">double</span> a, <span class=\"kw4\">double</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> a<span class=\"sy2\">-</span>b<span class=\"sy4\">;</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>c <span class=\"sy1\">==</span> <span class=\"st0\">'*'</span><span class=\"br0\">)</span><br/>      op<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">double</span> a, <span class=\"kw4\">double</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> a<span class=\"sy2\">*</span>b<span class=\"sy4\">;</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>c <span class=\"sy1\">==</span> <span class=\"st0\">'/'</span><span class=\"br0\">)</span><br/>      op<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">double</span> a, <span class=\"kw4\">double</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> a<span class=\"sy2\">/</span>b<span class=\"sy4\">;</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">void</span> parse<span class=\"br0\">(</span>string s<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> s.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>      parse<span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">double</span> getResult<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>stk.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">throw</span> <span class=\"st0\">\"Improperly written expression\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> stk.<span class=\"me1\">top</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  random_device seed<span class=\"sy4\">;</span><br/>  mt19937 engine<span class=\"br0\">(</span>seed<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  uniform_int_distribution<span class=\"sy1\">&lt;&gt;</span> distribution<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw4\">auto</span> rnd <span class=\"sy1\">=</span> bind<span class=\"br0\">(</span>distribution, engine<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  multiset<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> digits<span class=\"sy4\">;</span><br/>  <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Make 24 with the digits: \"</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> n <span class=\"sy1\">=</span> rnd<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">&lt;&lt;</span> n<span class=\"sy4\">;</span><br/>    digits.<span class=\"me1\">insert</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\u00a0<br/>  RPNParse parser<span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">try</span><br/>  <span class=\"br0\">{</span><br/>    string input<span class=\"sy4\">;</span><br/>    getline<span class=\"br0\">(</span><span class=\"kw3\">cin</span>, input<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    parser.<span class=\"me1\">parse</span><span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>digits <span class=\"sy3\">!</span><span class=\"sy1\">=</span> parser.<span class=\"me1\">digits</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Error: Not using the given digits\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">else</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw4\">double</span> r <span class=\"sy1\">=</span> parser.<span class=\"me1\">getResult</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Result: \"</span> <span class=\"sy1\">&lt;&lt;</span> r <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>r <span class=\"sy1\">&gt;</span> <span class=\"nu16\">23.999</span> <span class=\"sy3\">&amp;&amp;</span> r <span class=\"sy1\">&lt;</span> <span class=\"nu16\">24.001</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Good job!\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>      <span class=\"kw1\">else</span><br/>        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Try again.\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw2\">catch</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy2\">*</span> e<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Error: \"</span> <span class=\"sy1\">&lt;&lt;</span> e <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 98, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;random&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;stack&gt;</span><br/><span class=\"co2\">#include &lt;set&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;functional&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> RPNParse<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  stack<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> stk<span class=\"sy4\">;</span><br/>  multiset<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> digits<span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">void</span> op<span class=\"br0\">(</span>function<span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"br0\">(</span><span class=\"kw4\">double</span>,<span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"sy1\">&gt;</span> f<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>stk.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">throw</span> <span class=\"st0\">\"Improperly written expression\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> b <span class=\"sy1\">=</span> stk.<span class=\"me1\">top</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> stk.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> stk.<span class=\"me1\">top</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> stk.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    stk.<span class=\"me1\">push</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">void</span> parse<span class=\"br0\">(</span><span class=\"kw4\">char</span> c<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>c <span class=\"sy1\">&gt;=</span> <span class=\"st0\">'0'</span> <span class=\"sy3\">&amp;&amp;</span> c <span class=\"sy1\">&lt;=</span> <span class=\"st0\">'9'</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      stk.<span class=\"me1\">push</span><span class=\"br0\">(</span>c <span class=\"sy2\">-</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      digits.<span class=\"me1\">insert</span><span class=\"br0\">(</span>c <span class=\"sy2\">-</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>c <span class=\"sy1\">==</span> <span class=\"st0\">'+'</span><span class=\"br0\">)</span><br/>      op<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">double</span> a, <span class=\"kw4\">double</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> a<span class=\"sy2\">+</span>b<span class=\"sy4\">;</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>c <span class=\"sy1\">==</span> <span class=\"st0\">'-'</span><span class=\"br0\">)</span><br/>      op<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">double</span> a, <span class=\"kw4\">double</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> a<span class=\"sy2\">-</span>b<span class=\"sy4\">;</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>c <span class=\"sy1\">==</span> <span class=\"st0\">'*'</span><span class=\"br0\">)</span><br/>      op<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">double</span> a, <span class=\"kw4\">double</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> a<span class=\"sy2\">*</span>b<span class=\"sy4\">;</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>c <span class=\"sy1\">==</span> <span class=\"st0\">'/'</span><span class=\"br0\">)</span><br/>      op<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">double</span> a, <span class=\"kw4\">double</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> a<span class=\"sy2\">/</span>b<span class=\"sy4\">;</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">void</span> parse<span class=\"br0\">(</span>string s<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> s.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>      parse<span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">double</span> getResult<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>stk.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">throw</span> <span class=\"st0\">\"Improperly written expression\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> stk.<span class=\"me1\">top</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  random_device seed<span class=\"sy4\">;</span><br/>  mt19937 engine<span class=\"br0\">(</span>seed<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  uniform_int_distribution<span class=\"sy1\">&lt;&gt;</span> distribution<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw4\">auto</span> rnd <span class=\"sy1\">=</span> bind<span class=\"br0\">(</span>distribution, engine<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  multiset<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> digits<span class=\"sy4\">;</span><br/>  <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Make 24 with the digits: \"</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> n <span class=\"sy1\">=</span> rnd<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">&lt;&lt;</span> n<span class=\"sy4\">;</span><br/>    digits.<span class=\"me1\">insert</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\u00a0<br/>  RPNParse parser<span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">try</span><br/>  <span class=\"br0\">{</span><br/>    string input<span class=\"sy4\">;</span><br/>    getline<span class=\"br0\">(</span><span class=\"kw3\">cin</span>, input<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    parser.<span class=\"me1\">parse</span><span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>digits <span class=\"sy3\">!</span><span class=\"sy1\">=</span> parser.<span class=\"me1\">digits</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Error: Not using the given digits\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">else</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw4\">double</span> r <span class=\"sy1\">=</span> parser.<span class=\"me1\">getResult</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Result: \"</span> <span class=\"sy1\">&lt;&lt;</span> r <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>r <span class=\"sy1\">&gt;</span> <span class=\"nu16\">23.999</span> <span class=\"sy3\">&amp;&amp;</span> r <span class=\"sy1\">&lt;</span> <span class=\"nu16\">24.001</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Good job!\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>      <span class=\"kw1\">else</span><br/>        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Try again.\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw2\">catch</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy2\">*</span> e<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Error: \"</span> <span class=\"sy1\">&lt;&lt;</span> e <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 237, "block": "<pre class=\"text highlighted_source\">import ceylon.random {<br/>\tDefaultRandom<br/>}<br/>\u00a0<br/>class Rational(shared Integer numerator, shared Integer denominator = 1) satisfies Numeric&lt;Rational&gt; {<br/>\u00a0<br/>\tassert (denominator\u00a0!= 0);<br/>\u00a0<br/>\tInteger gcd(Integer a, Integer b) =&gt; if (b == 0) then a else gcd(b, a\u00a0% b);<br/>\u00a0<br/>\tshared Rational inverted =&gt; Rational(denominator, numerator);<br/>\u00a0<br/>\tshared Rational simplified =&gt;<br/>\t\tlet (largestFactor = gcd(numerator, denominator))<br/>\t\t\tRational(numerator / largestFactor, denominator / largestFactor);<br/>\u00a0<br/>\tdivided(Rational other) =&gt; (this * other.inverted).simplified;<br/>\u00a0<br/>\tnegated =&gt; Rational(-numerator, denominator).simplified;<br/>\u00a0<br/>\tplus(Rational other) =&gt;<br/>\t\t\tlet (top = numerator*other.denominator + other.numerator*denominator,<br/>\t\t\t\tbottom = denominator * other.denominator)<br/>\t\t\tRational(top, bottom).simplified;<br/>\u00a0<br/>\ttimes(Rational other) =&gt;<br/>\t\tRational(numerator * other.numerator, denominator * other.denominator).simplified;<br/>\u00a0<br/>\tshared Integer integer =&gt; numerator / denominator;<br/>\tshared Float float =&gt; numerator.float / denominator.float;<br/>\u00a0<br/>\tstring =&gt; denominator == 1 then numerator.string else \"``numerator``/``denominator``\";<br/>\u00a0<br/>\tshared actual Boolean equals(Object that) {<br/>\t\tif (is Rational that) {<br/>\t\t\tvalue simplifiedThis = this.simplified;<br/>\t\t\tvalue simplifiedThat = that.simplified;<br/>\t\t\treturn simplifiedThis.numerator==simplifiedThat.numerator &amp;&amp; <br/>\t\t\t\t\tsimplifiedThis.denominator==simplifiedThat.denominator;<br/>\t\t}<br/>\t\telse {<br/>\t\t\treturn false;<br/>\t\t}<br/>\t}<br/>}<br/>\u00a0<br/>interface Expression {<br/>\tshared formal Rational evaluate();<br/>}<br/>\u00a0<br/>class NumberExpression(Rational number) satisfies Expression {<br/>\tevaluate() =&gt; number;<br/>\tstring =&gt; number.string;<br/>}<br/>\u00a0<br/>class OperatorExpression(Expression left, Character operator, Expression right) satisfies Expression {<br/>\tshared actual Rational evaluate() {<br/>\t\tswitch (operator)<br/>\t\tcase ('*') {<br/>\t\t\treturn left.evaluate() * right.evaluate();<br/>\t\t}<br/>\t\tcase ('/') {<br/>\t\t\treturn left.evaluate() / right.evaluate();<br/>\t\t}<br/>\t\tcase ('-') {<br/>\t\t\treturn left.evaluate() - right.evaluate();<br/>\t\t}<br/>\t\tcase ('+') {<br/>\t\t\treturn left.evaluate() + right.evaluate();<br/>\t\t}<br/>\t\telse {<br/>\t\t\tthrow Exception(\"unknown operator ``operator``\");<br/>\t\t}<br/>\t}<br/>\u00a0<br/>\tstring =&gt; \"(``left.string`` ``operator.string`` ``right.string``)\";<br/>}<br/>\u00a0<br/>\"A simplified top down operator precedence parser. There aren't any right<br/> binding operators so we don't have to worry about that.\"<br/>class PrattParser(String input) {<br/>\u00a0<br/>\tvalue tokens = input.replace(\" \", \"\");<br/>\tvariable value index = -1;<br/>\u00a0<br/>\tshared Expression expression(Integer precedence = 0) {<br/>\t\tvalue token = advance();<br/>\t\tvariable value left = parseUnary(token);<br/>\t\twhile (precedence &lt; getPrecedence(peek())) {<br/>\t\t\tvalue nextToken = advance();<br/>\t\t\tleft = parseBinary(left, nextToken);<br/>\t\t}<br/>\t\treturn left;<br/>\t}<br/>\u00a0<br/>\tInteger getPrecedence(Character op) =&gt;<br/>\t\tswitch (op)<br/>\t\t\tcase ('*' | '/') 2<br/>\t\t\tcase ('+' | '-') 1<br/>\t\t\telse 0;<br/>\u00a0<br/>\tCharacter advance(Character? expected = null) {<br/>\t\tindex++;<br/>\t\tvalue token = tokens[index] else ' ';<br/>\t\tif (exists expected, token\u00a0!= expected) {<br/>\t\t\tthrow Exception(\"unknown character ``token``\");<br/>\t\t}<br/>\t\treturn token;<br/>\t}<br/>\u00a0<br/>\tCharacter peek() =&gt; tokens[index + 1] else ' ';<br/>\u00a0<br/>\tExpression parseBinary(Expression left, Character operator) =&gt;<br/>\t\tlet (right = expression(getPrecedence(operator)))<br/>\t\t\tOperatorExpression(left, operator, right);<br/>\u00a0<br/>\tExpression parseUnary(Character token) {<br/>\t\tif (token.digit) {<br/>\t\t\tassert (is Integer int = Integer.parse(token.string));<br/>\t\t\treturn NumberExpression(Rational(int));<br/>\t\t} <br/>\t\telse if (token == '(') {<br/>\t\t\tvalue exp = expression();<br/>\t\t\tadvance(')');<br/>\t\t\treturn exp;<br/>\t\t} <br/>\t\telse {<br/>\t\t\tthrow Exception(\"unknown character ``token``\");<br/>\t\t}<br/>\t}<br/>}<br/>\u00a0<br/>shared void run() {<br/>\u00a0<br/>\tvalue random = DefaultRandom();<br/>\u00a0<br/>\tfunction random4Numbers() =&gt;<br/>\t\trandom.elements(1..9).take(4).sequence();<br/>\u00a0<br/>\tfunction isValidGuess(String input, {Integer*} allowedNumbers) {<br/>\t\tvalue allowedOperators = set { *\"()+-/*\" };<br/>\t\tvalue extractedNumbers = input<br/>\t\t\t.split((Character ch) =&gt; ch in allowedOperators || ch.whitespace)<br/>\t\t\t.map((String element) =&gt; Integer.parse(element))<br/>\t\t\t.narrow&lt;Integer&gt;();<br/>\t\tif (extractedNumbers.any((Integer element) =&gt; element &gt; 9)) {<br/>\t\t\tprint(\"number too big!\");<br/>\t\t\treturn false;<br/>\t\t}<br/>\t\tif (extractedNumbers.any((Integer element) =&gt; element &lt; 1)) {<br/>\t\t\tprint(\"number too small!\");<br/>\t\t\treturn false;<br/>\t\t}<br/>\t\tif (extractedNumbers.sort(increasing)\u00a0!= allowedNumbers.sort(increasing)) {<br/>\t\t\tprint(\"use all the numbers, please!\");<br/>\t\t\treturn false;<br/>\t\t}<br/>\t\tif (!input.every((Character element) =&gt; element in allowedOperators || element.digit || element.whitespace)) {<br/>\t\t\tprint(\"only digits and mathematical operators, please\");<br/>\t\t\treturn false;<br/>\t\t}<br/>\t\tvariable value leftParens = 0;<br/>\t\tfor (c in input) {<br/>\t\t\tif (c == '(') {<br/>\t\t\t\tleftParens++;<br/>\t\t\t} else if (c == ')') {<br/>\t\t\t\tleftParens--;<br/>\t\t\t\tif (leftParens &lt; 0) {<br/>\t\t\t\t\tbreak;<br/>\t\t\t\t}<br/>\t\t\t}<br/>\t\t}<br/>\t\tif (leftParens\u00a0!= 0) {<br/>\t\t\tprint(\"unbalanced brackets!\");<br/>\t\t\treturn false;<br/>\t\t}<br/>\t\treturn true;<br/>\t}<br/>\u00a0<br/>\tfunction evaluate(String input) =&gt;<br/>\t\tlet (parser = PrattParser(input),<br/>\t\t\texp = parser.expression())<br/>\t\t\texp.evaluate();<br/>\u00a0<br/>\tprint(\"Welcome to The 24 Game.<br/>\t          Create a mathematical equation with four random<br/>\t          numbers that evaluates to 24.<br/>\t          You must use all the numbers once and only once,<br/>\t          but in any order.<br/>\t          Also, only + - / * and parentheses are allowed.<br/>\t          For example: (1 + 2 + 3) * 4<br/>\t          Also: enter n for new numbers and q to quit.<br/>\t          -----------------------------------------------\");<br/>\u00a0<br/>\tvalue twentyfour = Rational(24);<br/>\u00a0<br/>\twhile (true) {<br/>\u00a0<br/>\t\tvalue chosenNumbers = random4Numbers();<br/>\t\tvoid pleaseTryAgain() =&gt; print(\"Sorry, please try again. (Your numbers are ``chosenNumbers``)\");<br/>\u00a0<br/>\t\tprint(\"Your numbers are ``chosenNumbers``. Please turn them into 24.\");<br/>\u00a0<br/>\t\twhile (true) {<br/>\t\t\tvalue line = process.readLine()?.trimmed;<br/>\t\t\tif (exists line) {<br/>\t\t\t\tif (line.uppercased == \"Q\") { // quit<br/>\t\t\t\t\tprint(\"bye!\");<br/>\t\t\t\t\treturn;<br/>\t\t\t\t}<br/>\t\t\t\tif (line.uppercased == \"N\") { // new game<br/>\t\t\t\t\tbreak;<br/>\t\t\t\t}<br/>\t\t\t\tif (isValidGuess(line, chosenNumbers)) {<br/>\t\t\t\t\ttry {<br/>\t\t\t\t\t\tvalue result = evaluate(line);<br/>\t\t\t\t\t\tprint(\"= ``result``\");<br/>\t\t\t\t\t\tif (result == twentyfour) {<br/>\t\t\t\t\t\t\tprint(\"You did it!\");<br/>\t\t\t\t\t\t\tbreak;<br/>\t\t\t\t\t\t} <br/>\t\t\t\t\t\telse {<br/>\t\t\t\t\t\t\tpleaseTryAgain();<br/>\t\t\t\t\t\t}<br/>\t\t\t\t\t} <br/>\t\t\t\t\tcatch (Exception e) {<br/>\t\t\t\t\t\tprint(e.message);<br/>\t\t\t\t\t\tpleaseTryAgain();<br/>\t\t\t\t\t}<br/>\t\t\t\t} <br/>\t\t\t\telse {<br/>\t\t\t\t\tpleaseTryAgain();<br/>\t\t\t\t}<br/>\t\t\t}<br/>\t\t}<br/>\t}<br/>}</pre>"}, {"lang": "Clojure", "loc": 29, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">ns</span> rosettacode<span class=\"sy0\">.</span>24game<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> <span class=\"sy0\">^</span>:<span class=\"me1\">dynamic</span> <span class=\"sy0\">*</span>luser<span class=\"sy0\">*</span><br/><span class=\"st0\">\"You guessed wrong, or your input was not in prefix notation.\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> <span class=\"sy0\">^</span>:<span class=\"me1\">private</span> start #<span class=\"br0\">(</span>println <br/><span class=\"st0\">\"Your numbers are: \"</span> <span class=\"sy0\">%</span>1 <span class=\"st0\">\". Your goal is \"</span> <span class=\"sy0\">%</span>2 <span class=\"st0\">\".<span class=\"es0\">\\n</span>\"</span><br/><span class=\"st0\">\"Use the ops [+ - * /] in prefix notation to reach\"</span> <span class=\"sy0\">%</span>2 <span class=\"st0\">\".<span class=\"es0\">\\n</span>\"</span><br/><span class=\"st0\">\"q[enter] to quit.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> play<br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>play <span class=\"nu0\">24</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>goal<span class=\"br0\">]</span> <span class=\"br0\">(</span>play goal <span class=\"br0\">(</span><span class=\"kw1\">repeatedly</span> <span class=\"nu0\">4</span> #<span class=\"br0\">(</span><span class=\"kw1\">inc</span> <span class=\"br0\">(</span>rand<span class=\"sy0\">-</span>int <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>goal gns<span class=\"br0\">]</span><br/>     <span class=\"br0\">(</span>start gns goal<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>input <span class=\"br0\">(</span>read<span class=\"sy0\">-</span>string <span class=\"br0\">(</span>read<span class=\"sy0\">-</span>line<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           flat  <span class=\"br0\">(</span>flatten input<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span>println<br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">re-find</span> #<span class=\"st0\">\"^<span class=\"es0\">\\(</span>[<span class=\"es0\">\\d</span><span class=\"es0\">\\s</span>+*/-]+<span class=\"es0\">\\d</span>?<span class=\"es0\">\\)</span>$\"</span> <span class=\"br0\">(</span>pr<span class=\"sy0\">-</span><span class=\"kw1\">str</span> flat<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">set</span> gns<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">set</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> integer? flat<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"sy0\">=</span> goal <span class=\"br0\">(</span>eval input<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"st0\">\"You won the game!\"</span><br/>         <span class=\"sy0\">*</span>luser<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span><span class=\"sy0\">=</span> input 'q<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">recur</span> goal gns<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; * checks prefix form, then checks to see that the numbers used</span><br/><span class=\"co1\">; and the numbers generated by the game are the same.</span><br/>\u00a0</pre>"}, {"lang": "COBOL", "loc": 844, "block": "<pre class=\"cobol highlighted_source\">        &gt;&gt;<span class=\"kw1\">SOURCE</span> FORMAT FREE<br/><span class=\"co1\">*&gt; This code is dedicated to the public domain</span><br/><span class=\"co1\">*&gt; This is GNUCobol 2.0</span><br/><span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> twentyfour<span class=\"sy0\">.</span><br/>environment <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">configuration</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>repository<span class=\"sy0\">.</span> <span class=\"kw3\">function</span> <span class=\"kw3\">all</span> intrinsic<span class=\"sy0\">.</span><br/><span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  p <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  p1 <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  p-<span class=\"kw4\">max</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span> <span class=\"kw3\">value</span> <span class=\"nu0\">38</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  program-<span class=\"kw1\">syntax</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">494</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span><br/><span class=\"co1\">*&gt;statement = expression;</span><br/>        <span class=\"st0\">'001 001 000 n'</span><br/>    &amp;   <span class=\"st0\">'002 000 004 ='</span><br/>    &amp;   <span class=\"st0\">'003 005 000 n'</span><br/>    &amp;   <span class=\"st0\">'004 000 002\u00a0;'</span><br/><span class=\"co1\">*&gt;expression = term, {('+'|'-') term,};</span><br/>    &amp;   <span class=\"st0\">'005 005 000 n'</span><br/>    &amp;   <span class=\"st0\">'006 000 016 ='</span><br/>    &amp;   <span class=\"st0\">'007 017 000 n'</span><br/>    &amp;   <span class=\"st0\">'008 000 015 {'</span><br/>    &amp;   <span class=\"st0\">'009 011 013 ('</span><br/>    &amp;   <span class=\"st0\">'010 001 000 t'</span><br/>    &amp;   <span class=\"st0\">'011 013 000 |'</span><br/>    &amp;   <span class=\"st0\">'012 002 000 t'</span><br/>    &amp;   <span class=\"st0\">'013 000 009 )'</span><br/>    &amp;   <span class=\"st0\">'014 017 000 n'</span><br/>    &amp;   <span class=\"st0\">'015 000 008 }'</span><br/>    &amp;   <span class=\"st0\">'016 000 006\u00a0;'</span><br/><span class=\"co1\">*&gt;term = factor, {('*'|'/') factor,};</span><br/>    &amp;   <span class=\"st0\">'017 017 000 n'</span><br/>    &amp;   <span class=\"st0\">'018 000 028 ='</span><br/>    &amp;   <span class=\"st0\">'019 029 000 n'</span><br/>    &amp;   <span class=\"st0\">'020 000 027 {'</span><br/>    &amp;   <span class=\"st0\">'021 023 025 ('</span><br/>    &amp;   <span class=\"st0\">'022 003 000 t'</span><br/>    &amp;   <span class=\"st0\">'023 025 000 |'</span><br/>    &amp;   <span class=\"st0\">'024 004 000 t'</span><br/>    &amp;   <span class=\"st0\">'025 000 021 )'</span><br/>    &amp;   <span class=\"st0\">'026 029 000 n'</span><br/>    &amp;   <span class=\"st0\">'027 000 020 }'</span><br/>    &amp;   <span class=\"st0\">'028 000 018\u00a0;'</span><br/><span class=\"co1\">*&gt;factor = ('(' expression, ')' | digit,);</span><br/>    &amp;   <span class=\"st0\">'029 029 000 n'</span><br/>    &amp;   <span class=\"st0\">'030 000 038 ='</span><br/>    &amp;   <span class=\"st0\">'031 035 037 ('</span><br/>    &amp;   <span class=\"st0\">'032 005 000 t'</span><br/>    &amp;   <span class=\"st0\">'033 005 000 n'</span><br/>    &amp;   <span class=\"st0\">'034 006 000 t'</span><br/>    &amp;   <span class=\"st0\">'035 037 000 |'</span><br/>    &amp;   <span class=\"st0\">'036 000 000 n'</span><br/>    &amp;   <span class=\"st0\">'037 000 031 )'</span><br/>    &amp;   <span class=\"st0\">'038 000 030\u00a0;'</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">redefines</span> program-<span class=\"kw1\">syntax</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  p-entry <span class=\"kw3\">occurs</span> <span class=\"nu0\">038.</span><br/>        <span class=\"nu0\">05</span>  p-<span class=\"kw3\">address</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  p-definition <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  p-<span class=\"kw3\">alternate</span> <span class=\"kw3\">redefines</span> p-definition <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  p-matching <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  p-symbol <span class=\"kw3\">pic</span> x<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span>  t <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  t-len <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span> <span class=\"kw3\">value</span> <span class=\"nu0\">6</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  terminal-<span class=\"kw1\">symbols</span><br/>    <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">210</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span><br/>        <span class=\"st0\">'01 +                               '</span>                                                               <br/>    &amp;   <span class=\"st0\">'01 -                               '</span>                                                               <br/>    &amp;   <span class=\"st0\">'01 *                               '</span><br/>    &amp;   <span class=\"st0\">'01 /                               '</span><br/>    &amp;   <span class=\"st0\">'01 (                               '</span><br/>    &amp;   <span class=\"st0\">'01 )                               '</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">redefines</span> terminal-<span class=\"kw1\">symbols</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  terminal-symbol-entry <span class=\"kw3\">occurs</span> <span class=\"nu0\">6</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  terminal-symbol-len <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  terminal-symbol <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span>  nt <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  nt-lim <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span> <span class=\"kw3\">value</span> <span class=\"nu0\">5</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  nonterminal-statements <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">294</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span><br/>        <span class=\"st0\">\"000 ....,....,....,....,....,....,....,....,....,\"</span><br/>    &amp;   <span class=\"st0\">\"001 statement = expression;                      \"</span>                                                       <br/>    &amp;   <span class=\"st0\">\"005 expression = term, {('+'|'-') term,};        \"</span>                                                      <br/>    &amp;   <span class=\"st0\">\"017 term = factor, {('*'|'/') factor,};          \"</span>                                                             <br/>    &amp;   <span class=\"st0\">\"029 factor = ('(' expression, ')' | digit,);     \"</span>                                                           <br/>    &amp;   <span class=\"st0\">\"036 digit;                                       \"</span><span class=\"sy0\">.</span>                                                            <br/><span class=\"nu0\">01</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">redefines</span> nonterminal-statements<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  nonterminal-statement-entry <span class=\"kw3\">occurs</span> <span class=\"nu0\">5</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  nonterminal-statement-<span class=\"kw3\">number</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  nonterminal-statement <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">45</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span>  indent <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">64</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"kw3\">all</span> <span class=\"st0\">'|  '</span><span class=\"sy0\">.</span> <br/><span class=\"nu0\">01</span>  interpreter-stack<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  r <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span> *&gt; previous <span class=\"kw3\">top</span> <span class=\"kw3\">of</span> stack<br/>    <span class=\"nu0\">03</span>  s <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span> *&gt; current <span class=\"kw3\">top</span> <span class=\"kw3\">of</span> stack<br/>    <span class=\"nu0\">03</span>  s-<span class=\"kw4\">max</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span> <span class=\"kw3\">value</span> <span class=\"nu0\">32</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  s-entry <span class=\"kw3\">occurs</span> <span class=\"nu0\">32</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">'p='</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  s-p <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span> *&gt; callers <span class=\"kw2\">return</span> <span class=\"kw3\">address</span><br/>        <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">' sc='</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  s-start-<span class=\"kw3\">control</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span> *&gt; <span class=\"kw3\">sequence</span> <span class=\"kw3\">start</span> <span class=\"kw3\">address</span><br/>        <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">' ec='</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  s-end-<span class=\"kw3\">control</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span> *&gt; <span class=\"kw3\">sequence</span> <span class=\"kw3\">end</span> <span class=\"kw3\">address</span><br/>        <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">' al='</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  s-<span class=\"kw3\">alternate</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">999</span><span class=\"sy0\">.</span> *&gt; the <span class=\"kw3\">next</span> <span class=\"kw3\">alternate</span> <br/>        <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">' r='</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  s-result <span class=\"kw3\">pic</span> x<span class=\"sy0\">.</span> *&gt; S success<span class=\"sy0\">,</span> F failure<span class=\"sy0\">,</span> N <span class=\"kw3\">no</span> result<br/>        <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">' c='</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  s-<span class=\"kw3\">count</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span> *&gt; successes <span class=\"kw3\">in</span> a <span class=\"kw3\">sequence</span><br/>        <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">' x='</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  s-repeat <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span> *&gt; repeats <span class=\"kw3\">in</span> a <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"kw3\">sequence</span><br/>        <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">' nt='</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  s-nt <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span> *&gt; current nonterminal<br/>\u00a0<br/><span class=\"nu0\">01</span>  language-<span class=\"kw3\">area</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  l <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  l-lim <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  l-len <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span> <span class=\"kw3\">value</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  nd <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  number-definitions<span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  n <span class=\"kw3\">occurs</span> <span class=\"nu0\">4</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  nu <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  number-<span class=\"kw3\">use</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  u <span class=\"kw3\">occurs</span> <span class=\"nu0\">4</span> <span class=\"kw3\">pic</span> x<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  statement<span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  c <span class=\"kw3\">occurs</span> <span class=\"nu0\">32</span><span class=\"sy0\">.</span><br/>            <span class=\"nu0\">07</span>  c9 <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span>  number-validation<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  p4 <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  p4-lim <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span> <span class=\"kw3\">value</span> <span class=\"nu0\">24</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  permutations-<span class=\"nu0\">4</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">96</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span><br/>          <span class=\"st0\">'1234'</span><br/>        &amp; <span class=\"st0\">'1243'</span><br/>        &amp; <span class=\"st0\">'1324'</span><br/>        &amp; <span class=\"st0\">'1342'</span><br/>        &amp; <span class=\"st0\">'1423'</span><br/>        &amp; <span class=\"st0\">'1432'</span><br/>        &amp; <span class=\"st0\">'2134'</span><br/>        &amp; <span class=\"st0\">'2143'</span><br/>        &amp; <span class=\"st0\">'2314'</span><br/>        &amp; <span class=\"st0\">'2341'</span><br/>        &amp; <span class=\"st0\">'2413'</span><br/>        &amp; <span class=\"st0\">'2431'</span><br/>        &amp; <span class=\"st0\">'3124'</span><br/>        &amp; <span class=\"st0\">'3142'</span><br/>        &amp; <span class=\"st0\">'3214'</span><br/>        &amp; <span class=\"st0\">'3241'</span><br/>        &amp; <span class=\"st0\">'3423'</span><br/>        &amp; <span class=\"st0\">'3432'</span><br/>        &amp; <span class=\"st0\">'4123'</span><br/>        &amp; <span class=\"st0\">'4132'</span><br/>        &amp; <span class=\"st0\">'4213'</span><br/>        &amp; <span class=\"st0\">'4231'</span><br/>        &amp; <span class=\"st0\">'4312'</span><br/>        &amp; <span class=\"st0\">'4321'</span><span class=\"sy0\">.</span><br/>     <span class=\"nu0\">03</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">redefines</span> permutations-<span class=\"nu0\">4</span><span class=\"sy0\">.</span><br/>         <span class=\"nu0\">05</span>  permutation-<span class=\"nu0\">4</span> <span class=\"kw3\">occurs</span> <span class=\"nu0\">24</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>     <span class=\"nu0\">03</span>  current-permutation-<span class=\"nu0\">4</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>     <span class=\"nu0\">03</span>  cpx <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>     <span class=\"nu0\">03</span>  od1 <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>     <span class=\"nu0\">03</span>  od2 <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>     <span class=\"nu0\">03</span>  odx <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>     <span class=\"nu0\">03</span>  od-lim <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span> <span class=\"kw3\">value</span> <span class=\"nu0\">4</span><span class=\"sy0\">.</span><br/>     <span class=\"nu0\">03</span>  operator-definitions <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">'+-*/'</span><span class=\"sy0\">.</span><br/>     <span class=\"nu0\">03</span>  current-operators <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>     <span class=\"nu0\">03</span>  co3 <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>     <span class=\"nu0\">03</span>  rpx <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>     <span class=\"nu0\">03</span>  rpx-lim <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span> <span class=\"kw3\">value</span> <span class=\"nu0\">4</span><span class=\"sy0\">.</span><br/>     <span class=\"nu0\">03</span>  valid-rpn-forms <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">28</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span><br/>          <span class=\"st0\">'nnonono'</span><br/>        &amp; <span class=\"st0\">'nnnonoo'</span><br/>        &amp; <span class=\"st0\">'nnnoono'</span><br/>        &amp; <span class=\"st0\">'nnnnooo'</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">redefines</span> valid-rpn-forms<span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  rpn-form <span class=\"kw3\">occurs</span> <span class=\"nu0\">4</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  current-rpn-form <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span>  calculation-<span class=\"kw3\">area</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  osx <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  operator-stack <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  oqx <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  oqx1 <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  output-<span class=\"kw3\">queue</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  work-<span class=\"kw3\">number</span> <span class=\"kw3\">pic</span> s9999<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  top-numerator <span class=\"kw3\">pic</span> s9999 <span class=\"kw3\">sign</span> <span class=\"kw3\">leading</span> <span class=\"kw3\">separate</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  top-denominator <span class=\"kw3\">pic</span> s9999 <span class=\"kw3\">sign</span> <span class=\"kw3\">leading</span> <span class=\"kw3\">separate</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  rsx <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  result-stack <span class=\"kw3\">occurs</span> <span class=\"nu0\">8</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  numerator <span class=\"kw3\">pic</span> s9999<span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  denominator <span class=\"kw3\">pic</span> s9999<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span>  error-found <span class=\"kw3\">pic</span> x<span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  divide-by-zero-<span class=\"kw3\">error</span> <span class=\"kw3\">pic</span> x<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"co1\">*&gt;  diagnostics</span><br/><span class=\"nu0\">01</span>  NL <span class=\"kw3\">pic</span> x <span class=\"kw3\">value</span> x<span class=\"st0\">'0A'</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  NL-flag <span class=\"kw3\">pic</span> x <span class=\"kw3\">value</span> <span class=\"kw3\">space</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  display-level <span class=\"kw3\">pic</span> x <span class=\"kw3\">value</span> <span class=\"st0\">'0'</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  loop-lim <span class=\"kw3\">pic</span> <span class=\"nu0\">9999</span> <span class=\"kw3\">value</span> <span class=\"nu0\">1500</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  loop-<span class=\"kw3\">count</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">9999</span> <span class=\"kw3\">value</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  message-<span class=\"kw3\">area</span> <span class=\"kw3\">value</span> <span class=\"kw3\">spaces</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  message-level <span class=\"kw3\">pic</span> x<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  message-<span class=\"kw3\">value</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">128</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"co1\">*&gt;  input and examples</span><br/><span class=\"nu0\">01</span>  instruction <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"kw3\">spaces</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  tsx <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  tsx-lim <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span> <span class=\"kw3\">value</span> <span class=\"nu0\">14</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  test-statements<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">'1234;1 + 2 + 3 + 4'</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">'1234;1 * 2 * 3 * 4'</span><span class=\"sy0\">.</span> <br/>    <span class=\"nu0\">03</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">'1234;((1)) * (((2 * 3))) * 4'</span><span class=\"sy0\">.</span> <br/>    <span class=\"nu0\">03</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">'1234;((1)) * ((2 * 3))) * 4'</span><span class=\"sy0\">.</span> <br/>    <span class=\"nu0\">03</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">'1234;(1 + 2 + 3 + 4'</span><span class=\"sy0\">.</span> <br/>    <span class=\"nu0\">03</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">'1234;)1 + 2 + 3 + 4'</span><span class=\"sy0\">.</span> <br/>    <span class=\"nu0\">03</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">'1234;1 * * 2 * 3 * 4'</span><span class=\"sy0\">.</span> <br/>    <span class=\"nu0\">03</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">'5679;6 - (5 - 7) * 9'</span><span class=\"sy0\">.</span> <br/>    <span class=\"nu0\">03</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">'1268;((1 * (8 * 6) / 2))'</span><span class=\"sy0\">.</span> <br/>    <span class=\"nu0\">03</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">'4583;-5-3+(8*4)'</span><span class=\"sy0\">.</span> <br/>    <span class=\"nu0\">03</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">'4583;8 * 4 - 5 - 3'</span><span class=\"sy0\">.</span> <br/>    <span class=\"nu0\">03</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">'4583;8 * 4 - (5 + 3)'</span><span class=\"sy0\">.</span> <br/>    <span class=\"nu0\">03</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">'1223;1 * 3 / (2 - 2)'</span><span class=\"sy0\">.</span> <br/>    <span class=\"nu0\">03</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">'2468;(6 * 8) / 4 / 2'</span><span class=\"sy0\">.</span> <br/><span class=\"nu0\">01</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">redefines</span> test-statements<span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">occurs</span> <span class=\"nu0\">14</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  test-numbers <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> x<span class=\"sy0\">.</span><br/>        <span class=\"nu0\">05</span>  test-statement <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>start-twentyfour<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'start twentyfour'</span><br/>    <span class=\"kw2\">perform</span> generate-numbers<br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'type h &lt;enter&gt; to see instructions'</span><br/>    <span class=\"kw2\">accept</span> instruction<br/>    <span class=\"kw2\">perform</span> <span class=\"kw2\">until</span> instruction <span class=\"sy0\">=</span> <span class=\"kw3\">spaces</span> <span class=\"kw3\">or</span> <span class=\"st0\">'q'</span><br/>        <span class=\"kw2\">evaluate</span> <span class=\"kw3\">true</span><br/>        <span class=\"kw3\">when</span> instruction <span class=\"sy0\">=</span> <span class=\"st0\">'h'</span><br/>            <span class=\"kw2\">perform</span> display-instructions<br/>        <span class=\"kw3\">when</span> instruction <span class=\"sy0\">=</span> <span class=\"st0\">'n'</span><br/>            <span class=\"kw2\">perform</span> generate-numbers<br/>        <span class=\"kw3\">when</span> instruction<span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'m'</span><br/>            <span class=\"kw2\">move</span> instruction<span class=\"br0\">(</span><span class=\"nu0\">2</span>:<span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> number-definitions<br/>            <span class=\"kw2\">perform</span> validate-<span class=\"kw3\">number</span><br/>            <span class=\"kw1\">if</span> divide-by-zero-<span class=\"kw3\">error</span> <span class=\"sy0\">=</span> <span class=\"kw3\">space</span><br/>            <span class=\"kw3\">and</span> <span class=\"nu0\">24</span><span class=\"sy0\"> * </span>top-denominator <span class=\"sy0\">=</span> top-numerator<br/>                <span class=\"kw2\">display</span> number-definitions <span class=\"st0\">' is solved by '</span> output-<span class=\"kw3\">queue</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>:oqx<span class=\"br0\">)</span><br/>            <span class=\"kw3\">else</span><br/>                <span class=\"kw2\">display</span> number-definitions <span class=\"st0\">' is not solvable'</span><br/>            end-<span class=\"kw1\">if</span><br/>        <span class=\"kw3\">when</span> instruction <span class=\"sy0\">=</span> <span class=\"st0\">'d0'</span> <span class=\"kw3\">or</span> <span class=\"st0\">'d1'</span> <span class=\"kw3\">or</span> <span class=\"st0\">'d2'</span> <span class=\"kw3\">or</span> <span class=\"st0\">'d3'</span><br/>            <span class=\"kw2\">move</span> instruction<span class=\"br0\">(</span><span class=\"nu0\">2</span>:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> display-level<br/>        <span class=\"kw3\">when</span> instruction <span class=\"sy0\">=</span> <span class=\"st0\">'e'</span><br/>            <span class=\"kw2\">display</span> <span class=\"st0\">'examples:'</span><br/>            <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> tsx <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw2\">until</span> tsx &gt; tsx-lim<br/>                <span class=\"kw2\">move</span> <span class=\"kw3\">spaces</span> <span class=\"kw2\">to</span> statement<br/>                <span class=\"kw2\">move</span> test-numbers<span class=\"br0\">(</span>tsx<span class=\"br0\">)</span> <span class=\"kw2\">to</span> number-definitions<br/>                <span class=\"kw2\">move</span> test-statement<span class=\"br0\">(</span>tsx<span class=\"br0\">)</span> <span class=\"kw2\">to</span> statement<br/>                <span class=\"kw2\">perform</span> evaluate-statement<br/>                <span class=\"kw2\">perform</span> show-result<br/>            end-<span class=\"kw2\">perform</span><br/>        <span class=\"kw3\">when</span> <span class=\"kw3\">other</span><br/>            <span class=\"kw2\">move</span> instruction <span class=\"kw2\">to</span> statement<br/>            <span class=\"kw2\">perform</span> evaluate-statement<br/>            <span class=\"kw2\">perform</span> show-result<br/>        end-<span class=\"kw2\">evaluate</span><br/>        <span class=\"kw2\">move</span> <span class=\"kw3\">spaces</span> <span class=\"kw2\">to</span> instruction<br/>        <span class=\"kw2\">display</span> <span class=\"st0\">'instruction? '</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>        <span class=\"kw2\">accept</span> instruction<br/>    end-<span class=\"kw2\">perform</span><br/>\u00a0<br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'exit twentyfour'</span><br/>    <span class=\"kw3\">stop</span> <span class=\"kw3\">run</span><br/>    <span class=\"sy0\">.</span><br/>generate-numbers<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">perform</span> <span class=\"kw3\">with</span> <span class=\"kw3\">test</span> <span class=\"kw3\">after</span> <span class=\"kw2\">until</span> divide-by-zero-<span class=\"kw3\">error</span> <span class=\"sy0\">=</span> <span class=\"kw3\">space</span><br/>    <span class=\"kw3\">and</span> <span class=\"nu0\">24</span><span class=\"sy0\"> * </span>top-denominator <span class=\"sy0\">=</span> top-numerator<br/>        <span class=\"kw2\">compute</span> n<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">random</span><span class=\"br0\">(</span>seconds-past-midnight<span class=\"br0\">)</span><span class=\"sy0\"> * </span><span class=\"nu0\">10</span> *&gt; seed<br/>        <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> nd <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> nd &gt; <span class=\"nu0\">4</span><br/>            <span class=\"kw2\">compute</span> n<span class=\"br0\">(</span>nd<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\"> * </span><span class=\"nu0\">10</span><br/>            <span class=\"kw2\">perform</span> <span class=\"kw2\">until</span> n<span class=\"br0\">(</span>nd<span class=\"br0\">)</span> &lt;&gt; <span class=\"nu0\">0</span><br/>                <span class=\"kw2\">compute</span> n<span class=\"br0\">(</span>nd<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\"> * </span><span class=\"nu0\">10</span><br/>            end-<span class=\"kw2\">perform</span><br/>        end-<span class=\"kw2\">perform</span><br/>        <span class=\"kw2\">perform</span> validate-<span class=\"kw3\">number</span><br/>    end-<span class=\"kw2\">perform</span><br/>    <span class=\"kw2\">display</span> NL <span class=\"st0\">'numbers:'</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>    <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> nd <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> nd &gt; <span class=\"nu0\">4</span><br/>        <span class=\"kw2\">display</span> <span class=\"kw3\">space</span> n<span class=\"br0\">(</span>nd<span class=\"br0\">)</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>    end-<span class=\"kw2\">perform</span><br/>    <span class=\"kw2\">display</span> <span class=\"kw3\">space</span><br/>    <span class=\"sy0\">.</span><br/>validate-<span class=\"kw3\">number</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> p4 <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> p4 &gt; p4-lim<br/>        <span class=\"kw2\">move</span> permutation-<span class=\"nu0\">4</span><span class=\"br0\">(</span>p4<span class=\"br0\">)</span> <span class=\"kw2\">to</span> current-permutation-<span class=\"nu0\">4</span> <br/>        <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> od1 <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> od1 &gt; od-lim<br/>            <span class=\"kw2\">move</span> operator-definitions<span class=\"br0\">(</span>od1:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> current-operators<span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> od2 <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> od2 &gt; od-lim<br/>                <span class=\"kw2\">move</span> operator-definitions<span class=\"br0\">(</span>od2:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> current-operators<span class=\"br0\">(</span><span class=\"nu0\">2</span>:<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> odx <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> odx &gt; od-lim<br/>                    <span class=\"kw2\">move</span> operator-definitions<span class=\"br0\">(</span>odx:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> current-operators<span class=\"br0\">(</span><span class=\"nu0\">3</span>:<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> rpx <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> rpx &gt; rpx-lim<br/>                        <span class=\"kw2\">move</span> rpn-form<span class=\"br0\">(</span>rpx<span class=\"br0\">)</span> <span class=\"kw2\">to</span> current-rpn-form<br/>                        <span class=\"kw2\">move</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> cpx co3<br/>                        <span class=\"kw2\">move</span> <span class=\"kw3\">spaces</span> <span class=\"kw2\">to</span> output-<span class=\"kw3\">queue</span><br/>                        <span class=\"kw2\">move</span> <span class=\"nu0\">7</span> <span class=\"kw2\">to</span> oqx<br/>                        <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> oqx1 <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> oqx1 &gt; oqx<br/>                            <span class=\"kw1\">if</span> current-rpn-form<span class=\"br0\">(</span>oqx1:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'n'</span><br/>                                <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> cpx<br/>                                <span class=\"kw2\">move</span> current-permutation-<span class=\"nu0\">4</span><span class=\"br0\">(</span>cpx:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> nd<br/>                                <span class=\"kw2\">move</span> n<span class=\"br0\">(</span>nd<span class=\"br0\">)</span> <span class=\"kw2\">to</span> output-<span class=\"kw3\">queue</span><span class=\"br0\">(</span>oqx1:<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                            <span class=\"kw3\">else</span><br/>                                <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> co3<br/>                                <span class=\"kw2\">move</span> current-operators<span class=\"br0\">(</span>co3:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> output-<span class=\"kw3\">queue</span><span class=\"br0\">(</span>oqx1:<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                            end-<span class=\"kw1\">if</span><br/>                        end-<span class=\"kw2\">perform</span><br/>                    end-<span class=\"kw2\">perform</span><br/>                    <span class=\"kw2\">perform</span> evaluate-rpn<br/>                    <span class=\"kw1\">if</span> divide-by-zero-<span class=\"kw3\">error</span> <span class=\"sy0\">=</span> <span class=\"kw3\">space</span><br/>                    <span class=\"kw3\">and</span> <span class=\"nu0\">24</span><span class=\"sy0\"> * </span>top-denominator <span class=\"sy0\">=</span> top-numerator<br/>                        <span class=\"kw2\">exit</span> paragraph<br/>                    end-<span class=\"kw1\">if</span><br/>                end-<span class=\"kw2\">perform</span><br/>            end-<span class=\"kw2\">perform</span><br/>        end-<span class=\"kw2\">perform</span><br/>    end-<span class=\"kw2\">perform</span><br/>    <span class=\"sy0\">.</span>  <br/>display-instructions<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'1)  Type h &lt;enter&gt; to repeat these instructions.'</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'2)  The program will display four randomly-generated'</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'    single-digit numbers and will then prompt you to enter'</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'    an arithmetic expression followed by &lt;enter&gt; to sum'</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'    the given numbers to 24.'</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'    The four numbers may contain duplicates and the entered'</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'    expression must reference all the generated numbers and duplicates.'</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'    Warning:  the program converts the entered infix expression'</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'    to a reverse polish notation (rpn) expression'</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'    which is then interpreted from RIGHT to LEFT.'</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'    So, for instance, 8*4 - 5 - 3 will not sum to 24.'</span> <br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'3)  Type n &lt;enter&gt; to generate a new set of four numbers.'</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'    The program will ensure the generated numbers are solvable.'</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'4)  Type m#### &lt;enter&gt; (e.g. m1234) to create a fixed set of numbers'</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'    for testing purposes.'</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'    The program will test the solvability of the entered numbers.'</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'    For example, m1234 is solvable and m9999 is not solvable.'</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'5)  Type d0, d1, d2 or d3 followed by &lt;enter&gt; to display none or'</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'    increasingly detailed diagnostic information as the program evaluates'</span> <br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'    the entered expression.'</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'6)  Type e &lt;enter&gt; to see a list of example expressions and results'</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'7)  Type &lt;enter&gt; or q &lt;enter&gt; to exit the program'</span> <br/>    <span class=\"sy0\">.</span><br/>show-result<span class=\"sy0\">.</span><br/>    <span class=\"kw1\">if</span> error-found <span class=\"sy0\">=</span> <span class=\"st0\">'y'</span><br/>    <span class=\"kw3\">or</span> divide-by-zero-<span class=\"kw3\">error</span> <span class=\"sy0\">=</span> <span class=\"st0\">'y'</span><br/>        <span class=\"kw2\">exit</span> paragraph<br/>    end-<span class=\"kw1\">if</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'statement in RPN is'</span> <span class=\"kw3\">space</span> output-<span class=\"kw3\">queue</span><br/>    <span class=\"kw2\">evaluate</span> <span class=\"kw3\">true</span><br/>    <span class=\"kw3\">when</span> top-numerator <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw3\">when</span> top-denominator <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw3\">when</span> <span class=\"nu0\">24</span><span class=\"sy0\"> * </span>top-denominator &lt;&gt; top-numerator<br/>        <span class=\"kw2\">display</span> <span class=\"st0\">'result ('</span> top-numerator <span class=\"st0\">'/'</span> top-denominator <span class=\"st0\">') is not 24'</span><br/>    <span class=\"kw3\">when</span> <span class=\"kw3\">other</span><br/>        <span class=\"kw2\">display</span> <span class=\"st0\">'result is 24'</span><br/>    end-<span class=\"kw2\">evaluate</span><br/>    <span class=\"sy0\">.</span><br/>evaluate-statement<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">compute</span> l-lim <span class=\"sy0\">=</span> <span class=\"kw4\">length</span><span class=\"br0\">(</span>trim<span class=\"br0\">(</span>statement<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw2\">display</span> NL <span class=\"st0\">'numbers:'</span> <span class=\"kw3\">space</span> n<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">space</span> n<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw3\">space</span> n<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw3\">space</span> n<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">move</span> number-definitions <span class=\"kw2\">to</span> number-<span class=\"kw3\">use</span><br/>    <span class=\"kw2\">display</span> <span class=\"st0\">'statement is'</span> <span class=\"kw3\">space</span> statement  <br/>\u00a0<br/>    <span class=\"kw2\">move</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> l<br/>    <span class=\"kw2\">move</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> loop-<span class=\"kw3\">count</span><br/>    <span class=\"kw2\">move</span> <span class=\"kw3\">space</span> <span class=\"kw2\">to</span> error-found<br/>\u00a0<br/>    <span class=\"kw2\">move</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> osx oqx<br/>    <span class=\"kw2\">move</span> <span class=\"kw3\">spaces</span> <span class=\"kw2\">to</span> output-<span class=\"kw3\">queue</span><br/>\u00a0<br/>    <span class=\"kw2\">move</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> p<br/>    <span class=\"kw2\">move</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> nt<br/>    <span class=\"kw2\">move</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> s<br/>    <span class=\"kw2\">perform</span> increment-s<br/>    <span class=\"kw2\">perform</span> display-start-nonterminal<br/>    <span class=\"kw2\">perform</span> increment-p<br/>\u00a0<br/>    *&gt;<span class=\"sy0\">===================================</span><br/>    *&gt; interpret ebnf<br/>    *&gt;<span class=\"sy0\">===================================</span> <br/>    <span class=\"kw2\">perform</span> <span class=\"kw2\">until</span> s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <br/>    <span class=\"kw3\">or</span> error-found <span class=\"sy0\">=</span> <span class=\"st0\">'y'</span><br/>\u00a0<br/>        <span class=\"kw2\">evaluate</span> <span class=\"kw3\">true</span><br/>\u00a0<br/>        <span class=\"kw3\">when</span> p-symbol<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'n'</span><br/>        <span class=\"kw3\">and</span> p-definition<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">000</span> *&gt; a variable<br/>           <span class=\"kw2\">perform</span> test-variable<br/>       <span class=\"kw1\">if</span> s-result<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'S'</span><br/>               <span class=\"kw2\">perform</span> increment-l<br/>           end-<span class=\"kw1\">if</span><br/>           <span class=\"kw2\">perform</span> increment-p<br/>\u00a0<br/>       <span class=\"kw3\">when</span> p-symbol<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'n'</span><br/>       <span class=\"kw3\">and</span> p-<span class=\"kw3\">address</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> &lt;&gt; p-definition<span class=\"br0\">(</span>p<span class=\"br0\">)</span> *&gt; nonterminal <span class=\"kw3\">reference</span><br/>           <span class=\"kw2\">move</span> p <span class=\"kw2\">to</span> s-p<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>           <span class=\"kw2\">move</span> p-definition<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw2\">to</span> p<br/>\u00a0<br/>       <span class=\"kw3\">when</span> p-symbol<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'n'</span><br/>       <span class=\"kw3\">and</span> p-<span class=\"kw3\">address</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">=</span> p-definition<span class=\"br0\">(</span>p<span class=\"br0\">)</span> *&gt; nonterminal definition<br/>           <span class=\"kw2\">perform</span> increment-s<br/>           <span class=\"kw2\">perform</span> display-start-nonterminal<br/>           <span class=\"kw2\">perform</span> increment-p<br/>\u00a0<br/>        <span class=\"kw3\">when</span> p-symbol<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'='</span> *&gt; nonterminal <span class=\"kw3\">control</span><br/>            <span class=\"kw2\">move</span> p <span class=\"kw2\">to</span> s-start-<span class=\"kw3\">control</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>            <span class=\"kw2\">move</span> p-matching<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw2\">to</span> s-end-<span class=\"kw3\">control</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>            <span class=\"kw2\">perform</span> increment-p<br/>\u00a0<br/>        <span class=\"kw3\">when</span> p-symbol<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">';'</span> *&gt; <span class=\"kw3\">end</span> nonterminal<br/>            <span class=\"kw2\">perform</span> display-end-<span class=\"kw3\">control</span><br/>            <span class=\"kw2\">perform</span> display-end-nonterminal<br/>            <span class=\"kw2\">perform</span> decrement-s<br/>            <span class=\"kw1\">if</span> s &gt; <span class=\"nu0\">0</span><br/>                <span class=\"kw2\">evaluate</span> <span class=\"kw3\">true</span><br/>                <span class=\"kw3\">when</span> s-result<span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'S'</span><br/>                    <span class=\"kw2\">perform</span> set-success<br/>                <span class=\"kw3\">when</span> s-result<span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'F'</span><br/>                    <span class=\"kw2\">perform</span> set-failure<br/>                end-<span class=\"kw2\">evaluate</span><br/>                <span class=\"kw2\">move</span> s-p<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw2\">to</span> p<br/>                <span class=\"kw2\">perform</span> increment-p<br/>                <span class=\"kw2\">perform</span> display-continue-nonterminal<br/>            end-<span class=\"kw1\">if</span><br/>\u00a0<br/>    <span class=\"kw3\">when</span> p-symbol<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'{'</span> *&gt; <span class=\"kw3\">start</span> repeat <span class=\"kw3\">sequence</span><br/>            <span class=\"kw2\">perform</span> increment-s<br/>            <span class=\"kw2\">perform</span> display-start-<span class=\"kw3\">control</span><br/>            <span class=\"kw2\">move</span> p <span class=\"kw2\">to</span> s-start-<span class=\"kw3\">control</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>            <span class=\"kw2\">move</span> p-<span class=\"kw3\">alternate</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw2\">to</span> s-<span class=\"kw3\">alternate</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>            <span class=\"kw2\">move</span> p-matching<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw2\">to</span> s-end-<span class=\"kw3\">control</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>            <span class=\"kw2\">move</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> s-<span class=\"kw3\">count</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>            <span class=\"kw2\">perform</span> increment-p<br/>\u00a0<br/>        <span class=\"kw3\">when</span> p-symbol<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'}'</span> *&gt; <span class=\"kw3\">end</span> repeat <span class=\"kw3\">sequence</span><br/>            <span class=\"kw2\">perform</span> display-end-<span class=\"kw3\">control</span><br/>            <span class=\"kw2\">evaluate</span> <span class=\"kw3\">true</span><br/>            <span class=\"kw3\">when</span> s-result<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'S'</span> *&gt; repeat the <span class=\"kw3\">sequence</span><br/>                <span class=\"kw2\">perform</span> display-repeat-<span class=\"kw3\">control</span><br/>                <span class=\"kw2\">perform</span> set-nothing<br/>                <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> s-repeat<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>                <span class=\"kw2\">move</span> s-start-<span class=\"kw3\">control</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw2\">to</span> p<br/>                <span class=\"kw2\">perform</span> increment-p<br/>           <span class=\"kw3\">when</span> <span class=\"kw3\">other</span><br/>               <span class=\"kw2\">perform</span> decrement-s<br/>               <span class=\"kw2\">evaluate</span> <span class=\"kw3\">true</span><br/>               <span class=\"kw3\">when</span> s-result<span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'N'</span><br/>               <span class=\"kw3\">and</span> s-repeat<span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> *&gt; <span class=\"kw3\">no</span> result<br/>                   <span class=\"kw2\">perform</span> increment-p<br/>               <span class=\"kw3\">when</span> s-result<span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'N'</span><br/>               <span class=\"kw3\">and</span> s-repeat<span class=\"br0\">(</span>r<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> *&gt; <span class=\"kw3\">no</span> result <span class=\"kw3\">after</span> success<br/>                   <span class=\"kw2\">perform</span> set-success<br/>                   <span class=\"kw2\">perform</span> increment-p<br/>               <span class=\"kw3\">when</span> <span class=\"kw3\">other</span> *&gt; fail the <span class=\"kw3\">sequence</span><br/>                   <span class=\"kw2\">perform</span> increment-p<br/>               end-<span class=\"kw2\">evaluate</span><br/>           end-<span class=\"kw2\">evaluate</span><br/>\u00a0<br/>        <span class=\"kw3\">when</span> p-symbol<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'('</span> *&gt; <span class=\"kw3\">start</span> <span class=\"kw3\">sequence</span><br/>            <span class=\"kw2\">perform</span> increment-s<br/>            <span class=\"kw2\">perform</span> display-start-<span class=\"kw3\">control</span><br/>            <span class=\"kw2\">move</span> p <span class=\"kw2\">to</span> s-start-<span class=\"kw3\">control</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>            <span class=\"kw2\">move</span> p-<span class=\"kw3\">alternate</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw2\">to</span> s-<span class=\"kw3\">alternate</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>            <span class=\"kw2\">move</span> p-matching<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw2\">to</span> s-end-<span class=\"kw3\">control</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>            <span class=\"kw2\">move</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> s-<span class=\"kw3\">count</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>            <span class=\"kw2\">perform</span> increment-p<br/>\u00a0<br/>       <span class=\"kw3\">when</span> p-symbol<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">')'</span> *&gt; <span class=\"kw3\">end</span> <span class=\"kw3\">sequence</span><br/>           <span class=\"kw2\">perform</span> display-end-<span class=\"kw3\">control</span><br/>           <span class=\"kw2\">perform</span> decrement-s<br/>           <span class=\"kw2\">evaluate</span> <span class=\"kw3\">true</span><br/>           <span class=\"kw3\">when</span> s-result<span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'S'</span> *&gt; success<br/>               <span class=\"kw2\">perform</span> set-success<br/>               <span class=\"kw2\">perform</span> increment-p<br/>           <span class=\"kw3\">when</span> s-result<span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'N'</span> *&gt; <span class=\"kw3\">no</span> result<br/>               <span class=\"kw2\">perform</span> set-failure<br/>               <span class=\"kw2\">perform</span> increment-p<br/>            <span class=\"kw3\">when</span> <span class=\"kw3\">other</span> *&gt; fail the <span class=\"kw3\">sequence</span><br/>               <span class=\"kw2\">perform</span> set-failure<br/>               <span class=\"kw2\">perform</span> increment-p<br/>           end-<span class=\"kw2\">evaluate</span><br/>\u00a0<br/>        <span class=\"kw3\">when</span> p-symbol<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'|'</span> *&gt; <span class=\"kw3\">alternate</span><br/>            <span class=\"kw2\">evaluate</span> <span class=\"kw3\">true</span><br/>            <span class=\"kw3\">when</span> s-result<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'S'</span> *&gt; <span class=\"kw2\">exit</span> the <span class=\"kw3\">sequence</span><br/>                <span class=\"kw2\">perform</span> display-skip-<span class=\"kw3\">alternate</span><br/>                <span class=\"kw2\">move</span> s-end-<span class=\"kw3\">control</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw2\">to</span> p<br/>            <span class=\"kw3\">when</span> <span class=\"kw3\">other</span><br/>                <span class=\"kw2\">perform</span> display-take-<span class=\"kw3\">alternate</span><br/>                <span class=\"kw2\">move</span> p-<span class=\"kw3\">alternate</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw2\">to</span> s-<span class=\"kw3\">alternate</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> *&gt; the <span class=\"kw3\">next</span> <span class=\"kw3\">alternate</span><br/>                <span class=\"kw2\">perform</span> increment-p<br/>                <span class=\"kw2\">perform</span> set-nothing<br/>            end-<span class=\"kw2\">evaluate</span><br/>\u00a0<br/>        <span class=\"kw3\">when</span> p-symbol<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'t'</span> *&gt; <span class=\"kw3\">terminal</span><br/>            <span class=\"kw2\">move</span> p-definition<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw2\">to</span> t<br/>            <span class=\"kw2\">move</span> terminal-symbol-len<span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw2\">to</span> t-len<br/>            <span class=\"kw2\">perform</span> display-<span class=\"kw3\">terminal</span><br/>            <span class=\"kw2\">evaluate</span> <span class=\"kw3\">true</span><br/>            <span class=\"kw3\">when</span> statement<span class=\"br0\">(</span>l:t-len<span class=\"br0\">)</span> <span class=\"sy0\">=</span> terminal-symbol<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>:t-len<span class=\"br0\">)</span> *&gt; successful match<br/>               <span class=\"kw2\">perform</span> set-success<br/>               <span class=\"kw2\">perform</span> display-recognize-<span class=\"kw3\">terminal</span><br/>               <span class=\"kw2\">perform</span> process-token<br/>               <span class=\"kw2\">move</span> t-len <span class=\"kw2\">to</span> l-len<br/>               <span class=\"kw2\">perform</span> increment-l<br/>               <span class=\"kw2\">perform</span> increment-p<br/>            <span class=\"kw3\">when</span> s-<span class=\"kw3\">alternate</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> &lt;&gt; <span class=\"nu0\">000</span> *&gt; we are <span class=\"kw3\">in</span> an <span class=\"kw3\">alternate</span> <span class=\"kw3\">sequence</span><br/>               <span class=\"kw2\">move</span> s-<span class=\"kw3\">alternate</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw2\">to</span> p<br/>            <span class=\"kw3\">when</span> <span class=\"kw3\">other</span> *&gt; fail the <span class=\"kw3\">sequence</span><br/>               <span class=\"kw2\">perform</span> set-failure<br/>               <span class=\"kw2\">move</span> s-end-<span class=\"kw3\">control</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw2\">to</span> p<br/>            end-<span class=\"kw2\">evaluate</span><br/>\u00a0<br/>        <span class=\"kw3\">when</span> <span class=\"kw3\">other</span> *&gt; <span class=\"kw3\">end</span> <span class=\"kw3\">control</span><br/>            <span class=\"kw2\">perform</span> display-control-failure *&gt; shouldnt happen<br/>\u00a0<br/>        end-<span class=\"kw2\">evaluate</span><br/>\u00a0<br/>     end-<span class=\"kw2\">perform</span><br/>\u00a0<br/>     <span class=\"kw2\">evaluate</span> <span class=\"kw3\">true</span> *&gt; <span class=\"kw3\">at</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> evaluation<br/>     <span class=\"kw3\">when</span> error-found <span class=\"sy0\">=</span> <span class=\"st0\">'y'</span><br/>         <span class=\"kw2\">continue</span><br/>     <span class=\"kw3\">when</span> l &lt;<span class=\"sy0\">=</span> l-lim *&gt; <span class=\"kw3\">not</span> <span class=\"kw3\">all</span> tokens parsed<br/>         <span class=\"kw2\">display</span> <span class=\"st0\">'error: invalid statement'</span><br/>         <span class=\"kw2\">perform</span> statement-<span class=\"kw3\">error</span><br/>     <span class=\"kw3\">when</span> number-<span class=\"kw3\">use</span> &lt;&gt; <span class=\"kw3\">spaces</span><br/>         <span class=\"kw2\">display</span> <span class=\"st0\">'error:  not all numbers were used: '</span> number-<span class=\"kw3\">use</span><br/>         <span class=\"kw2\">move</span> <span class=\"st0\">'y'</span> <span class=\"kw2\">to</span> error-found<br/>     end-<span class=\"kw2\">evaluate</span><br/>    <span class=\"sy0\">.</span><br/>increment-l<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">evaluate</span> <span class=\"kw3\">true</span><br/>    <span class=\"kw3\">when</span> l &gt; l-lim *&gt; <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> statement<br/>        <span class=\"kw2\">continue</span><br/>    <span class=\"kw3\">when</span> <span class=\"kw3\">other</span><br/>        <span class=\"kw2\">add</span> l-len <span class=\"kw2\">to</span> l<br/>        <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> l <span class=\"kw3\">from</span> l <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <br/>        <span class=\"kw2\">until</span> c<span class=\"br0\">(</span>l<span class=\"br0\">)</span> &lt;&gt; <span class=\"kw3\">space</span><br/>        <span class=\"kw3\">or</span> l &gt; l-lim<br/>            <span class=\"kw2\">continue</span><br/>        end-<span class=\"kw2\">perform</span><br/>        <span class=\"kw2\">move</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> l-len<br/>        <span class=\"kw1\">if</span> l &gt; l-lim<br/>            <span class=\"kw2\">perform</span> end-tokens<br/>        end-<span class=\"kw1\">if</span><br/>    end-<span class=\"kw2\">evaluate</span><br/>    <span class=\"sy0\">.</span><br/>increment-p<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">evaluate</span> <span class=\"kw3\">true</span><br/>    <span class=\"kw3\">when</span> p &gt;<span class=\"sy0\">=</span> p-<span class=\"kw4\">max</span><br/>        <span class=\"kw2\">display</span> <span class=\"st0\">'at'</span> <span class=\"kw3\">space</span> p <span class=\"st0\">' parse overflow'</span><br/>            <span class=\"kw3\">space</span> <span class=\"st0\">'s=&lt;'</span> s <span class=\"kw3\">space</span> s-entry<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"st0\">'&gt;'</span><br/>        <span class=\"kw2\">move</span> <span class=\"st0\">'y'</span> <span class=\"kw2\">to</span> error-found<br/>    <span class=\"kw3\">when</span> <span class=\"kw3\">other</span><br/>        <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> p<br/>        <span class=\"kw2\">perform</span> display-statement<br/>    end-<span class=\"kw2\">evaluate</span><br/>    <span class=\"sy0\">.</span><br/>increment-s<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">evaluate</span> <span class=\"kw3\">true</span><br/>    <span class=\"kw3\">when</span> s &gt;<span class=\"sy0\">=</span> s-<span class=\"kw4\">max</span><br/>        <span class=\"kw2\">display</span> <span class=\"st0\">'at'</span> <span class=\"kw3\">space</span> p <span class=\"st0\">' stack overflow '</span><br/>            <span class=\"kw3\">space</span> <span class=\"st0\">'s=&lt;'</span> s <span class=\"kw3\">space</span> s-entry<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"st0\">'&gt;'</span><br/>        <span class=\"kw2\">move</span> <span class=\"st0\">'y'</span> <span class=\"kw2\">to</span> error-found<br/>    <span class=\"kw3\">when</span> <span class=\"kw3\">other</span><br/>        <span class=\"kw2\">move</span> s <span class=\"kw2\">to</span> r<br/>        <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> s<br/>        <span class=\"kw2\">initialize</span> s-entry<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>        <span class=\"kw2\">move</span> <span class=\"st0\">'N'</span> <span class=\"kw2\">to</span> s-result<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>        <span class=\"kw2\">move</span> p <span class=\"kw2\">to</span> s-p<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>        <span class=\"kw2\">move</span> nt <span class=\"kw2\">to</span> s-nt<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    end-<span class=\"kw2\">evaluate</span><br/>    <span class=\"sy0\">.</span><br/>decrement-s<span class=\"sy0\">.</span><br/>    <span class=\"kw1\">if</span> s &gt; <span class=\"nu0\">0</span><br/>        <span class=\"kw2\">move</span> s <span class=\"kw2\">to</span> r<br/>        <span class=\"kw3\">subtract</span> <span class=\"nu0\">1</span> <span class=\"kw3\">from</span> s<br/>        <span class=\"kw1\">if</span> s &gt; <span class=\"nu0\">0</span><br/>            <span class=\"kw2\">move</span> s-nt<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw2\">to</span> nt<br/>        end-<span class=\"kw1\">if</span><br/>    end-<span class=\"kw1\">if</span><br/>    <span class=\"sy0\">.</span><br/>set-failure<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> <span class=\"st0\">'F'</span> <span class=\"kw2\">to</span> s-result<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> s-<span class=\"kw3\">count</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span><br/>        <span class=\"kw2\">display</span> <span class=\"st0\">'sequential parse failure'</span><br/>        <span class=\"kw2\">perform</span> statement-<span class=\"kw3\">error</span><br/>    end-<span class=\"kw1\">if</span><br/>    <span class=\"sy0\">.</span><br/>set-success<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> <span class=\"st0\">'S'</span> <span class=\"kw2\">to</span> s-result<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> s-<span class=\"kw3\">count</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"sy0\">.</span><br/>set-nothing<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> <span class=\"st0\">'N'</span> <span class=\"kw2\">to</span> s-result<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">move</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> s-<span class=\"kw3\">count</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"sy0\">.</span><br/>statement-<span class=\"kw3\">error</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">display</span> statement<br/>    <span class=\"kw2\">move</span> <span class=\"kw3\">spaces</span> <span class=\"kw2\">to</span> statement<br/>    <span class=\"kw2\">move</span> <span class=\"st0\">'^ syntax error'</span> <span class=\"kw2\">to</span> statement<span class=\"br0\">(</span>l:<span class=\"br0\">)</span><br/>    <span class=\"kw2\">display</span> statement<br/>    <span class=\"kw2\">move</span> <span class=\"st0\">'y'</span> <span class=\"kw2\">to</span> error-found<br/>    <span class=\"sy0\">.</span><br/><span class=\"co1\">*&gt;=====================</span><br/><span class=\"co1\">*&gt; twentyfour semantics</span><br/><span class=\"co1\">*&gt;=====================</span><br/>test-variable<span class=\"sy0\">.</span><br/>    *&gt; <span class=\"kw1\">check</span> validity<br/>    <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> nd <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> nd &gt; <span class=\"nu0\">4</span><br/>    <span class=\"kw3\">or</span> c<span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n<span class=\"br0\">(</span>nd<span class=\"br0\">)</span><br/>        <span class=\"kw2\">continue</span><br/>    end-<span class=\"kw2\">perform</span><br/>    *&gt; <span class=\"kw1\">check</span> <span class=\"kw3\">usage</span><br/>    <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> nu <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> nu &gt; <span class=\"nu0\">4</span><br/>    <span class=\"kw3\">or</span> c<span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"sy0\">=</span> u<span class=\"br0\">(</span>nu<span class=\"br0\">)</span><br/>        <span class=\"kw2\">continue</span><br/>    end-<span class=\"kw2\">perform</span><br/>    <span class=\"kw2\">evaluate</span> <span class=\"kw3\">true</span><br/>    <span class=\"kw3\">when</span> l &gt; l-lim<br/>        <span class=\"kw2\">perform</span> set-failure<br/>    <span class=\"kw3\">when</span> c9<span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"kw3\">not</span> <span class=\"kw3\">numeric</span><br/>        <span class=\"kw2\">perform</span> set-failure<br/>    <span class=\"kw3\">when</span> nd &gt; <span class=\"nu0\">4</span><br/>        <span class=\"kw2\">display</span> <span class=\"st0\">'invalid number'</span><br/>        <span class=\"kw2\">perform</span> statement-<span class=\"kw3\">error</span><br/>    <span class=\"kw3\">when</span> nu &gt; <span class=\"nu0\">4</span><br/>        <span class=\"kw2\">display</span> <span class=\"st0\">'number already used'</span><br/>        <span class=\"kw2\">perform</span> statement-<span class=\"kw3\">error</span><br/>    <span class=\"kw3\">when</span> <span class=\"kw3\">other</span><br/>        <span class=\"kw2\">move</span> <span class=\"kw3\">space</span> <span class=\"kw2\">to</span> u<span class=\"br0\">(</span>nu<span class=\"br0\">)</span><br/>        <span class=\"kw2\">perform</span> set-success<br/>        <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> oqx<br/>        <span class=\"kw2\">move</span> c<span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"kw2\">to</span> output-<span class=\"kw3\">queue</span><span class=\"br0\">(</span>oqx:<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    end-<span class=\"kw2\">evaluate</span><br/>    <span class=\"sy0\">.</span><br/><span class=\"co1\">*&gt; ==================================</span><br/><span class=\"co1\">*&gt; Dijkstra Shunting-Yard Algorithm</span><br/><span class=\"co1\">*&gt; to convert infix to rpn</span><br/><span class=\"co1\">*&gt; ==================================</span><br/>process-token<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">evaluate</span> <span class=\"kw3\">true</span><br/>    <span class=\"kw3\">when</span> c<span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'('</span><br/>        <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> osx<br/>        <span class=\"kw2\">move</span> c<span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"kw2\">to</span> operator-stack<span class=\"br0\">(</span>osx:<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">when</span> c<span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">')'</span><br/>        <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> osx <span class=\"kw3\">from</span> osx <span class=\"kw3\">by</span> -<span class=\"nu0\">1</span> <span class=\"kw2\">until</span> osx &lt; <span class=\"nu0\">1</span><br/>        <span class=\"kw3\">or</span> operator-stack<span class=\"br0\">(</span>osx:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'('</span><br/>            <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> oqx<br/>            <span class=\"kw2\">move</span> operator-stack<span class=\"br0\">(</span>osx:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> output-<span class=\"kw3\">queue</span><span class=\"br0\">(</span>oqx:<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        end-<span class=\"kw2\">perform</span><br/>        <span class=\"kw1\">if</span> osx &lt; <span class=\"nu0\">1</span><br/>            <span class=\"kw2\">display</span> <span class=\"st0\">'parenthesis error'</span><br/>            <span class=\"kw2\">perform</span> statement-<span class=\"kw3\">error</span><br/>            <span class=\"kw2\">exit</span> paragraph<br/>        end-<span class=\"kw1\">if</span><br/>        <span class=\"kw3\">subtract</span> <span class=\"nu0\">1</span> <span class=\"kw3\">from</span> osx<br/>    <span class=\"kw3\">when</span> <span class=\"br0\">(</span>c<span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'+'</span> <span class=\"kw3\">or</span> <span class=\"st0\">'-'</span><span class=\"br0\">)</span> <span class=\"kw3\">and</span> <span class=\"br0\">(</span>operator-stack<span class=\"br0\">(</span>osx:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'*'</span> <span class=\"kw3\">or</span> <span class=\"st0\">'/'</span><span class=\"br0\">)</span><br/>        *&gt; lesser operator precedence<br/>        <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> oqx<br/>        <span class=\"kw2\">move</span> operator-stack<span class=\"br0\">(</span>osx:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> output-<span class=\"kw3\">queue</span><span class=\"br0\">(</span>oqx:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>        <span class=\"kw2\">move</span> c<span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"kw2\">to</span> operator-stack<span class=\"br0\">(</span>osx:<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">when</span> <span class=\"kw3\">other</span><br/>        *&gt; <span class=\"kw3\">greater</span> operator precedence<br/>        <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> osx<br/>        <span class=\"kw2\">move</span> c<span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"kw2\">to</span> operator-stack<span class=\"br0\">(</span>osx:<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    end-<span class=\"kw2\">evaluate</span><br/>    <span class=\"sy0\">.</span> <br/>end-tokens<span class=\"sy0\">.</span><br/>    *&gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">copy</span> stacked operators <span class=\"kw2\">to</span> the output-<span class=\"kw3\">queue</span><br/>    <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> osx <span class=\"kw3\">from</span> osx <span class=\"kw3\">by</span> -<span class=\"nu0\">1</span> <span class=\"kw2\">until</span> osx &lt; <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">or</span> operator-stack<span class=\"br0\">(</span>osx:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'('</span><br/>        <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> oqx<br/>        <span class=\"kw2\">move</span> operator-stack<span class=\"br0\">(</span>osx:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> output-<span class=\"kw3\">queue</span><span class=\"br0\">(</span>oqx:<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    end-<span class=\"kw2\">perform</span><br/>    <span class=\"kw1\">if</span> osx &gt; <span class=\"nu0\">0</span><br/>        <span class=\"kw2\">display</span> <span class=\"st0\">'parenthesis error'</span><br/>        <span class=\"kw2\">perform</span> statement-<span class=\"kw3\">error</span><br/>        <span class=\"kw2\">exit</span> paragraph<br/>    end-<span class=\"kw1\">if</span><br/>    *&gt; <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw2\">evaluate</span> the rpn statement<br/>    <span class=\"kw2\">perform</span> evaluate-rpn<br/>    <span class=\"kw1\">if</span> divide-by-zero-<span class=\"kw3\">error</span> <span class=\"sy0\">=</span> <span class=\"st0\">'y'</span><br/>        <span class=\"kw2\">display</span> <span class=\"st0\">'divide by zero error'</span><br/>    end-<span class=\"kw1\">if</span><br/>    <span class=\"sy0\">.</span><br/>evaluate-rpn<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> <span class=\"kw3\">space</span> <span class=\"kw2\">to</span> divide-by-zero-<span class=\"kw3\">error</span><br/>    <span class=\"kw2\">move</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> rsx *&gt; stack depth<br/>    <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> oqx1 <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> oqx1 &gt; oqx<br/>        <span class=\"kw1\">if</span> output-<span class=\"kw3\">queue</span><span class=\"br0\">(</span>oqx1:<span class=\"nu0\">1</span><span class=\"br0\">)</span> &gt;<span class=\"sy0\">=</span> <span class=\"st0\">'1'</span> <span class=\"kw3\">and</span> &lt;<span class=\"sy0\">=</span> <span class=\"st0\">'9'</span><br/>            *&gt; push current <span class=\"kw3\">data</span> onto the stack<br/>            <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> rsx<br/>            <span class=\"kw2\">move</span> top-numerator <span class=\"kw2\">to</span> numerator<span class=\"br0\">(</span>rsx<span class=\"br0\">)</span><br/>            <span class=\"kw2\">move</span> top-denominator <span class=\"kw2\">to</span> denominator<span class=\"br0\">(</span>rsx<span class=\"br0\">)</span><br/>            <span class=\"kw2\">move</span> output-<span class=\"kw3\">queue</span><span class=\"br0\">(</span>oqx1:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> top-numerator<br/>            <span class=\"kw2\">move</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> top-denominator<br/>        <span class=\"kw3\">else</span><br/>            *&gt; apply the operation<br/>            <span class=\"kw2\">evaluate</span> <span class=\"kw3\">true</span><br/>            <span class=\"kw3\">when</span> output-<span class=\"kw3\">queue</span><span class=\"br0\">(</span>oqx1:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'+'</span><br/>                <span class=\"kw2\">compute</span> top-numerator <span class=\"sy0\">=</span> top-numerator<span class=\"sy0\"> * </span>denominator<span class=\"br0\">(</span>rsx<span class=\"br0\">)</span><br/>                   <span class=\"sy0\"> + </span>top-denominator<span class=\"sy0\"> * </span>numerator<span class=\"br0\">(</span>rsx<span class=\"br0\">)</span><br/>                <span class=\"kw2\">compute</span> top-denominator <span class=\"sy0\">=</span> top-denominator<span class=\"sy0\"> * </span>denominator<span class=\"br0\">(</span>rsx<span class=\"br0\">)</span>  <br/>            <span class=\"kw3\">when</span> output-<span class=\"kw3\">queue</span><span class=\"br0\">(</span>oqx1:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'-'</span> <br/>                <span class=\"kw2\">compute</span> top-numerator <span class=\"sy0\">=</span> top-denominator<span class=\"sy0\"> * </span>numerator<span class=\"br0\">(</span>rsx<span class=\"br0\">)</span><br/>                   <span class=\"sy0\"> - </span>top-numerator<span class=\"sy0\"> * </span>denominator<span class=\"br0\">(</span>rsx<span class=\"br0\">)</span><br/>                <span class=\"kw2\">compute</span> top-denominator <span class=\"sy0\">=</span> top-denominator<span class=\"sy0\"> * </span>denominator<span class=\"br0\">(</span>rsx<span class=\"br0\">)</span>  <br/>            <span class=\"kw3\">when</span> output-<span class=\"kw3\">queue</span><span class=\"br0\">(</span>oqx1:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'*'</span> <br/>                <span class=\"kw2\">compute</span> top-numerator <span class=\"sy0\">=</span> top-numerator<span class=\"sy0\"> * </span>numerator<span class=\"br0\">(</span>rsx<span class=\"br0\">)</span><br/>                <span class=\"kw2\">compute</span> top-denominator <span class=\"sy0\">=</span> top-denominator<span class=\"sy0\"> * </span>denominator<span class=\"br0\">(</span>rsx<span class=\"br0\">)</span>  <br/>            <span class=\"kw3\">when</span> output-<span class=\"kw3\">queue</span><span class=\"br0\">(</span>oqx1:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'/'</span><br/>                <span class=\"kw2\">compute</span> work-<span class=\"kw3\">number</span> <span class=\"sy0\">=</span> numerator<span class=\"br0\">(</span>rsx<span class=\"br0\">)</span><span class=\"sy0\"> * </span>top-denominator<br/>                <span class=\"kw2\">compute</span> top-denominator <span class=\"sy0\">=</span> denominator<span class=\"br0\">(</span>rsx<span class=\"br0\">)</span><span class=\"sy0\"> * </span>top-numerator<br/>                <span class=\"kw1\">if</span> top-denominator <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>                    <span class=\"kw2\">move</span> <span class=\"st0\">'y'</span> <span class=\"kw2\">to</span> divide-by-zero-<span class=\"kw3\">error</span><br/>                    <span class=\"kw2\">exit</span> paragraph<br/>                end-<span class=\"kw1\">if</span><br/>                <span class=\"kw2\">move</span> work-<span class=\"kw3\">number</span> <span class=\"kw2\">to</span> top-numerator<br/>            end-<span class=\"kw2\">evaluate</span><br/>            *&gt; pop the stack<br/>            <span class=\"kw3\">subtract</span> <span class=\"nu0\">1</span> <span class=\"kw3\">from</span> rsx<br/>        end-<span class=\"kw1\">if</span><br/>    end-<span class=\"kw2\">perform</span> <br/>    <span class=\"sy0\">.</span><br/><span class=\"co1\">*&gt;====================</span><br/><span class=\"co1\">*&gt; diagnostic displays</span><br/><span class=\"co1\">*&gt;====================</span><br/>display-start-nonterminal<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> nt <span class=\"kw3\">from</span> nt-lim <span class=\"kw3\">by</span> -<span class=\"nu0\">1</span> <span class=\"kw2\">until</span> nt &lt; <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">or</span> p-definition<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">=</span> nonterminal-statement-<span class=\"kw3\">number</span><span class=\"br0\">(</span>nt<span class=\"br0\">)</span><br/>        <span class=\"kw2\">continue</span><br/>    end-<span class=\"kw2\">perform</span><br/>    <span class=\"kw1\">if</span> nt &gt; <span class=\"nu0\">0</span><br/>        <span class=\"kw2\">move</span> <span class=\"st0\">'1'</span> <span class=\"kw2\">to</span> NL-flag<br/>        <span class=\"kw3\">string</span> <span class=\"st0\">'1'</span> indent<span class=\"br0\">(</span><span class=\"nu0\">1</span>:s<span class=\"sy0\"> + </span>s<span class=\"br0\">)</span> <span class=\"st0\">'at '</span> s <span class=\"kw3\">space</span> p <span class=\"st0\">' start '</span> trim<span class=\"br0\">(</span>nonterminal-statement<span class=\"br0\">(</span>nt<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw2\">into</span> message-<span class=\"kw3\">area</span> <span class=\"kw2\">perform</span> display-<span class=\"kw3\">message</span><br/>        <span class=\"kw2\">move</span> nt <span class=\"kw2\">to</span> s-nt<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    end-<span class=\"kw1\">if</span><br/>    <span class=\"sy0\">.</span><br/>display-continue-nonterminal<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> s-nt<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw2\">to</span> nt<br/>    <span class=\"kw3\">string</span> <span class=\"st0\">'1'</span> indent<span class=\"br0\">(</span><span class=\"nu0\">1</span>:s<span class=\"sy0\"> + </span>s<span class=\"br0\">)</span> <span class=\"st0\">'at '</span> s <span class=\"kw3\">space</span> p <span class=\"kw3\">space</span> p-symbol<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"st0\">' continue '</span> trim<span class=\"br0\">(</span>nonterminal-statement<span class=\"br0\">(</span>nt<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">' with result '</span> s-result<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>            <span class=\"kw2\">into</span> message-<span class=\"kw3\">area</span> <span class=\"kw2\">perform</span> display-<span class=\"kw3\">message</span><br/>    <span class=\"sy0\">.</span><br/>display-end-nonterminal<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">move</span> s-nt<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw2\">to</span> nt<br/>    <span class=\"kw2\">move</span> <span class=\"st0\">'2'</span> <span class=\"kw2\">to</span> NL-flag<br/>    <span class=\"kw3\">string</span> <span class=\"st0\">'1'</span> indent<span class=\"br0\">(</span><span class=\"nu0\">1</span>:s<span class=\"sy0\"> + </span>s<span class=\"br0\">)</span> <span class=\"st0\">'at '</span> s <span class=\"kw3\">space</span> p <span class=\"st0\">' end '</span> trim<span class=\"br0\">(</span>nonterminal-statement<span class=\"br0\">(</span>nt<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">' with result '</span> s-result<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>            <span class=\"kw2\">into</span> message-<span class=\"kw3\">area</span> <span class=\"kw2\">perform</span> display-<span class=\"kw3\">message</span><br/>    <span class=\"sy0\">.</span><br/>display-start-<span class=\"kw3\">control</span><span class=\"sy0\">.</span><br/>    <span class=\"kw3\">string</span> <span class=\"st0\">'2'</span> indent<span class=\"br0\">(</span><span class=\"nu0\">1</span>:s<span class=\"sy0\"> + </span>s<span class=\"br0\">)</span> <span class=\"st0\">'at '</span> s <span class=\"kw3\">space</span> p <span class=\"st0\">' start '</span> p-symbol<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"st0\">' in '</span> trim<span class=\"br0\">(</span>nonterminal-statement<span class=\"br0\">(</span>nt<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">into</span> message-<span class=\"kw3\">area</span> <span class=\"kw2\">perform</span> display-<span class=\"kw3\">message</span><br/>    <span class=\"sy0\">.</span><br/>display-repeat-<span class=\"kw3\">control</span><span class=\"sy0\">.</span><br/>    <span class=\"kw3\">string</span> <span class=\"st0\">'2'</span> indent<span class=\"br0\">(</span><span class=\"nu0\">1</span>:s<span class=\"sy0\"> + </span>s<span class=\"br0\">)</span> <span class=\"st0\">'at '</span> s <span class=\"kw3\">space</span> p <span class=\"st0\">' repeat '</span> p-symbol<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"st0\">' in '</span> trim<span class=\"br0\">(</span>nonterminal-statement<span class=\"br0\">(</span>nt<span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"st0\">' with result '</span> s-result<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>        <span class=\"kw2\">into</span> message-<span class=\"kw3\">area</span> <span class=\"kw2\">perform</span> display-<span class=\"kw3\">message</span><br/>    <span class=\"sy0\">.</span><br/>display-end-<span class=\"kw3\">control</span><span class=\"sy0\">.</span><br/>    <span class=\"kw3\">string</span> <span class=\"st0\">'2'</span> indent<span class=\"br0\">(</span><span class=\"nu0\">1</span>:s<span class=\"sy0\"> + </span>s<span class=\"br0\">)</span> <span class=\"st0\">'at '</span> s <span class=\"kw3\">space</span> p <span class=\"st0\">' end '</span> p-symbol<span class=\"br0\">(</span>p<span class=\"br0\">)</span>  <span class=\"st0\">' in '</span> trim<span class=\"br0\">(</span>nonterminal-statement<span class=\"br0\">(</span>nt<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">' with result '</span> s-result<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>        <span class=\"kw2\">into</span> message-<span class=\"kw3\">area</span> <span class=\"kw2\">perform</span> display-<span class=\"kw3\">message</span><br/>    <span class=\"sy0\">.</span><br/>display-take-<span class=\"kw3\">alternate</span><span class=\"sy0\">.</span><br/>    <span class=\"kw3\">string</span> <span class=\"st0\">'2'</span> indent<span class=\"br0\">(</span><span class=\"nu0\">1</span>:s<span class=\"sy0\"> + </span>s<span class=\"br0\">)</span> <span class=\"st0\">'at '</span> s <span class=\"kw3\">space</span> p <span class=\"st0\">' take alternate'</span> <span class=\"st0\">' in '</span> trim<span class=\"br0\">(</span>nonterminal-statement<span class=\"br0\">(</span>nt<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">into</span> message-<span class=\"kw3\">area</span> <span class=\"kw2\">perform</span> display-<span class=\"kw3\">message</span><br/>    <span class=\"sy0\">.</span><br/>display-skip-<span class=\"kw3\">alternate</span><span class=\"sy0\">.</span><br/>    <span class=\"kw3\">string</span> <span class=\"st0\">'2'</span> indent<span class=\"br0\">(</span><span class=\"nu0\">1</span>:s<span class=\"sy0\"> + </span>s<span class=\"br0\">)</span> <span class=\"st0\">'at '</span> s <span class=\"kw3\">space</span> p <span class=\"st0\">' skip alternate'</span> <span class=\"st0\">' in '</span> trim<span class=\"br0\">(</span>nonterminal-statement<span class=\"br0\">(</span>nt<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">into</span> message-<span class=\"kw3\">area</span> <span class=\"kw2\">perform</span> display-<span class=\"kw3\">message</span><br/>    <span class=\"sy0\">.</span><br/>display-<span class=\"kw3\">terminal</span><span class=\"sy0\">.</span><br/>    <span class=\"kw3\">string</span> <span class=\"st0\">'1'</span> indent<span class=\"br0\">(</span><span class=\"nu0\">1</span>:s<span class=\"sy0\"> + </span>s<span class=\"br0\">)</span> <span class=\"st0\">'at '</span> s <span class=\"kw3\">space</span> p<br/>        <span class=\"st0\">' compare '</span> statement<span class=\"br0\">(</span>l:t-len<span class=\"br0\">)</span> <span class=\"st0\">' to '</span> terminal-symbol<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>:t-len<span class=\"br0\">)</span><br/>        <span class=\"st0\">' in '</span> trim<span class=\"br0\">(</span>nonterminal-statement<span class=\"br0\">(</span>nt<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">into</span> message-<span class=\"kw3\">area</span> <span class=\"kw2\">perform</span> display-<span class=\"kw3\">message</span><br/>    <span class=\"sy0\">.</span><br/>display-recognize-<span class=\"kw3\">terminal</span><span class=\"sy0\">.</span><br/>    <span class=\"kw3\">string</span> <span class=\"st0\">'1'</span> indent<span class=\"br0\">(</span><span class=\"nu0\">1</span>:s<span class=\"sy0\"> + </span>s<span class=\"br0\">)</span> <span class=\"st0\">'at '</span> s <span class=\"kw3\">space</span> p <span class=\"st0\">' recognize terminal: '</span> c<span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"st0\">' in '</span> trim<span class=\"br0\">(</span>nonterminal-statement<span class=\"br0\">(</span>nt<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">into</span> message-<span class=\"kw3\">area</span> <span class=\"kw2\">perform</span> display-<span class=\"kw3\">message</span><br/>    <span class=\"sy0\">.</span><br/>display-recognize-variable<span class=\"sy0\">.</span><br/>    <span class=\"kw3\">string</span> <span class=\"st0\">'1'</span> indent<span class=\"br0\">(</span><span class=\"nu0\">1</span>:s<span class=\"sy0\"> + </span>s<span class=\"br0\">)</span> <span class=\"st0\">'at '</span> s <span class=\"kw3\">space</span> p <span class=\"st0\">' recognize digit: '</span> c<span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"st0\">' in '</span> trim<span class=\"br0\">(</span>nonterminal-statement<span class=\"br0\">(</span>nt<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">into</span> message-<span class=\"kw3\">area</span> <span class=\"kw2\">perform</span> display-<span class=\"kw3\">message</span><br/>    <span class=\"sy0\">.</span><br/>display-statement<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">compute</span> p1 <span class=\"sy0\">=</span> p<span class=\"sy0\"> - </span>s-start-<span class=\"kw3\">control</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw3\">string</span> <span class=\"st0\">'3'</span> indent<span class=\"br0\">(</span><span class=\"nu0\">1</span>:s<span class=\"sy0\"> + </span>s<span class=\"br0\">)</span> <span class=\"st0\">'at '</span> s <span class=\"kw3\">space</span> p<br/>        <span class=\"st0\">' statement: '</span> s-start-<span class=\"kw3\">control</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"st0\">'/'</span> p1<br/>        <span class=\"kw3\">space</span> p-symbol<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw3\">space</span> s-result<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>        <span class=\"st0\">' in '</span> trim<span class=\"br0\">(</span>nonterminal-statement<span class=\"br0\">(</span>nt<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">into</span> message-<span class=\"kw3\">area</span> <span class=\"kw2\">perform</span> display-<span class=\"kw3\">message</span><br/>    <span class=\"sy0\">.</span><br/>display-control-failure<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">display</span> loop-<span class=\"kw3\">count</span> <span class=\"kw3\">space</span> indent<span class=\"br0\">(</span><span class=\"nu0\">1</span>:s<span class=\"sy0\"> + </span>s<span class=\"br0\">)</span> <span class=\"st0\">'at'</span> <span class=\"kw3\">space</span> p <span class=\"st0\">' control failure'</span> <span class=\"st0\">' in '</span> trim<span class=\"br0\">(</span>nonterminal-statement<span class=\"br0\">(</span>nt<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">display</span> loop-<span class=\"kw3\">count</span> <span class=\"kw3\">space</span> indent<span class=\"br0\">(</span><span class=\"nu0\">1</span>:s<span class=\"sy0\"> + </span>s<span class=\"br0\">)</span> <span class=\"st0\">'   '</span> <span class=\"st0\">'p=&lt;'</span> p p-entry<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"st0\">'&gt;'</span><br/>    <span class=\"kw2\">display</span> loop-<span class=\"kw3\">count</span> <span class=\"kw3\">space</span> indent<span class=\"br0\">(</span><span class=\"nu0\">1</span>:s<span class=\"sy0\"> + </span>s<span class=\"br0\">)</span> <span class=\"st0\">'   '</span> <span class=\"st0\">'s=&lt;'</span> s <span class=\"kw3\">space</span> s-entry<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"st0\">'&gt;'</span><br/>    <span class=\"kw2\">display</span> loop-<span class=\"kw3\">count</span> <span class=\"kw3\">space</span> indent<span class=\"br0\">(</span><span class=\"nu0\">1</span>:s<span class=\"sy0\"> + </span>s<span class=\"br0\">)</span> <span class=\"st0\">'   '</span> <span class=\"st0\">'l=&lt;'</span> l <span class=\"kw3\">space</span> c<span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"st0\">'&gt;'</span><br/>    <span class=\"kw2\">perform</span> statement-<span class=\"kw3\">error</span><br/>    <span class=\"sy0\">.</span><br/>display-<span class=\"kw3\">message</span><span class=\"sy0\">.</span><br/>    <span class=\"kw1\">if</span> display-level <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw2\">move</span> <span class=\"kw3\">space</span> <span class=\"kw2\">to</span> NL-flag<br/>    end-<span class=\"kw1\">if</span><br/>    <span class=\"kw2\">evaluate</span> <span class=\"kw3\">true</span><br/>    <span class=\"kw3\">when</span> loop-<span class=\"kw3\">count</span> &gt; loop-lim *&gt; loop <span class=\"kw3\">control</span><br/>        <span class=\"kw2\">display</span> <span class=\"st0\">'display count exceeds '</span> loop-lim<br/>        <span class=\"kw3\">stop</span> <span class=\"kw3\">run</span><br/>    <span class=\"kw3\">when</span> message-level &lt;<span class=\"sy0\">=</span> display-level<br/>        <span class=\"kw2\">evaluate</span> <span class=\"kw3\">true</span><br/>        <span class=\"kw3\">when</span> NL-flag <span class=\"sy0\">=</span> <span class=\"st0\">'1'</span><br/>             <span class=\"kw2\">display</span> NL loop-<span class=\"kw3\">count</span> <span class=\"kw3\">space</span> trim<span class=\"br0\">(</span>message-<span class=\"kw3\">value</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">when</span> NL-flag <span class=\"sy0\">=</span> <span class=\"st0\">'2'</span><br/>             <span class=\"kw2\">display</span> loop-<span class=\"kw3\">count</span> <span class=\"kw3\">space</span> trim<span class=\"br0\">(</span>message-<span class=\"kw3\">value</span><span class=\"br0\">)</span> NL<br/>        <span class=\"kw3\">when</span> <span class=\"kw3\">other</span><br/>             <span class=\"kw2\">display</span> loop-<span class=\"kw3\">count</span> <span class=\"kw3\">space</span> trim<span class=\"br0\">(</span>message-<span class=\"kw3\">value</span><span class=\"br0\">)</span><br/>        end-<span class=\"kw2\">evaluate</span><br/>    end-<span class=\"kw2\">evaluate</span><br/>    <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> loop-<span class=\"kw3\">count</span><br/>    <span class=\"kw2\">move</span> <span class=\"kw3\">spaces</span> <span class=\"kw2\">to</span> message-<span class=\"kw3\">area</span><br/>    <span class=\"kw2\">move</span> <span class=\"kw3\">space</span> <span class=\"kw2\">to</span> NL-flag<br/>    <span class=\"sy0\">.</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">program</span> twentyfour<span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 54, "block": "<pre class=\"coffeescript highlighted_source\">tty = require <span class=\"st0\">'tty'</span><br/>tty.<span class=\"me1\">setRawMode</span> <span class=\"kw4\">true</span><br/>\u00a0<br/>buffer  = <span class=\"st0\">\"\"</span><br/>numbers = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>...<span class=\"nu0\">4</span><span class=\"br0\">]</span><br/>    numbers.<span class=\"me1\">push</span> Math.<span class=\"me1\">max</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> Math.<span class=\"me1\">floor</span><span class=\"br0\">(</span>Math.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span> <span class=\"st0\">\"You can use the numbers: #{numbers.join ' '}\"</span><br/>\u00a0<br/>process.<span class=\"me1\">stdin</span>.<span class=\"kw4\">on</span> <span class=\"st0\">'keypress'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>char<span class=\"sy0\">,</span> key<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>\u00a0<br/>    <span class=\"co1\"># accept operator</span><br/>    <span class=\"kw1\">if</span> char <span class=\"kw2\">and</span> isNaN<span class=\"br0\">(</span>char<span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"sy0\">/</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>\\<span class=\"sy0\">/+-</span><span class=\"br0\">]</span><span class=\"sy0\">/</span>.<span class=\"me1\">test</span><span class=\"br0\">(</span>char<span class=\"br0\">)</span> <span class=\"kw2\">and</span> buffer.<span class=\"me1\">substr</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">isnt</span> char<br/>        buffer <span class=\"sy0\">+</span>= char<br/>        process.<span class=\"me1\">stdout</span>.<span class=\"me1\">write</span> char<br/>    <span class=\"co1\"># accept number</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"sy0\">!</span>isNaN<span class=\"br0\">(</span><span class=\"sy0\">+</span>char<span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span>buffer == <span class=\"st0\">''</span> <span class=\"kw2\">or</span> isNaN<span class=\"br0\">(</span>buffer.<span class=\"me1\">substr</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        buffer <span class=\"sy0\">+</span>= char<br/>        process.<span class=\"me1\">stdout</span>.<span class=\"me1\">write</span> char<br/>\u00a0<br/>    <span class=\"co1\"># check then evaluate expression</span><br/>    <span class=\"kw1\">if</span> key<span class=\"sy0\">?</span>.<span class=\"me1\">name</span> <span class=\"kw2\">is</span> <span class=\"st0\">'enter'</span><br/>        result = calculate<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        process.<span class=\"me1\">stdout</span>.<span class=\"me1\">write</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><br/>        <span class=\"kw1\">if</span> result <span class=\"kw2\">and</span> result <span class=\"kw2\">is</span> <span class=\"nu0\">24</span><br/>            console.<span class=\"me1\">log</span> <span class=\"st0\">\" = 24! congratulations.\"</span><br/>        <span class=\"kw1\">else</span><br/>            console.<span class=\"me1\">log</span> <span class=\"st0\">\"#{result}. nope.\"</span><br/>        process.<span class=\"me1\">exit</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"co1\"># quit</span><br/>    <span class=\"kw1\">if</span> key<span class=\"sy0\">?</span>.<span class=\"me1\">name</span> <span class=\"kw2\">is</span> <span class=\"st0\">'escape'</span> <span class=\"kw2\">or</span> <span class=\"br0\">(</span>key<span class=\"sy0\">?</span>.<span class=\"me1\">name</span> == <span class=\"st0\">'c'</span> <span class=\"kw2\">and</span> key.<span class=\"me1\">ctrl</span><span class=\"br0\">)</span><br/>        process.<span class=\"me1\">exit</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>calculate = <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">/</span><span class=\"br0\">[</span><span class=\"sy0\">^</span>\\d\\s<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">+*</span>\\<span class=\"sy0\">/-</span><span class=\"br0\">]</span><span class=\"sy0\">/</span>.<span class=\"me1\">test</span> buffer<br/>        console.<span class=\"me1\">log</span> <span class=\"st0\">\"invalid characters\"</span><br/>        process.<span class=\"me1\">exit</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    used = buffer.<span class=\"me1\">match</span><span class=\"br0\">(</span><span class=\"sy0\">/</span>\\d<span class=\"sy0\">/</span>g<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> used<span class=\"sy0\">?</span>.<span class=\"me1\">length</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">4</span> <span class=\"kw2\">or</span> used.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!</span>= numbers.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        console.<span class=\"me1\">log</span> <span class=\"st0\">\"you must use the 4 numbers provided\"</span><br/>        process.<span class=\"me1\">exit</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    res = <span class=\"kw1\">try</span> eval buffer <span class=\"kw1\">catch</span> e<br/>    <span class=\"kw1\">return</span> res <span class=\"kw2\">or</span> <span class=\"st0\">'invalid expression'</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\"># begin taking input</span><br/>process.<span class=\"me1\">stdin</span>.<span class=\"me1\">resume</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 36, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>define-condition choose-digits <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define-condition bad-equation <span class=\"br0\">(</span><span class=\"kw1\">error</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> <span class=\"nu0\">24</span>-game <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span>chosen-digits<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span>prompt <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>format t <span class=\"st0\">\"Chosen digits: ~{~D~^, ~}~%~<br/>                          Enter expression (or `bye' to quit, `!' to choose new digits): \"</span><br/>                       chosen-digits<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>read<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>lose <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">error</span> 'bad-equation<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>choose <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> chosen-digits <span class=\"br0\">(</span>loop repeat <span class=\"nu0\">4</span> collecting <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>check <span class=\"br0\">(</span>e<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>typecase e<br/>                 <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eql</span> bye<span class=\"br0\">)</span> <span class=\"br0\">(</span>return-from <span class=\"nu0\">24</span>-game<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eql</span> <span class=\"sy0\">!</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>signal 'choose-digits<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">atom</span> <span class=\"br0\">(</span>lose<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>check-sub <span class=\"br0\">(</span><span class=\"kw1\">car</span> e<span class=\"br0\">)</span> <span class=\"br0\">(</span>check-sub <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> e<span class=\"br0\">)</span> chosen-digits<span class=\"br0\">)</span><span class=\"br0\">)</span> e<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>check-sub <span class=\"br0\">(</span>sub allowed-digits<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>typecase sub<br/>                 <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">member</span> <span class=\"kw1\">nil</span><span class=\"sy0\"> + </span>-<span class=\"sy0\"> * </span>/<span class=\"br0\">)</span> allowed-digits<span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">integer</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">member</span> sub allowed-digits<span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span><span class=\"kw1\">remove</span> sub allowed-digits <span class=\"sy0\">:</span><span class=\"me1\">count</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span>lose<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>check-sub <span class=\"br0\">(</span><span class=\"kw1\">car</span> sub<span class=\"br0\">)</span> <span class=\"br0\">(</span>check-sub <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> sub<span class=\"br0\">)</span> allowed-digits<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>t <span class=\"br0\">(</span>lose<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>win <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>format t <span class=\"st0\">\"You win.~%\"</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>return-from <span class=\"nu0\">24</span>-game<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>choose<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>loop<br/>       <span class=\"br0\">(</span>handler-<span class=\"kw1\">case</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">24</span> <span class=\"br0\">(</span><span class=\"kw1\">eval</span> <span class=\"br0\">(</span>check <span class=\"br0\">(</span>prompt<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>win<span class=\"br0\">)</span> <span class=\"br0\">(</span>lose<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">error</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"Bad equation, try again.~%\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>choose-digits <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>choose<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 37, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">random</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span><br/>       std.<span class=\"me1\">typetuple</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">void</span> op<span class=\"br0\">(</span><span class=\"kw4\">char</span> c<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>stack.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"Wrong expression.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        stack<span class=\"br0\">[</span>$ <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">mixin</span><span class=\"br0\">(</span><span class=\"st0\">\"stack[$ - 2]\"</span> <span class=\"sy0\">~</span> c <span class=\"sy0\">~</span> <span class=\"st0\">\"stack[$ - 1]\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        stack.<span class=\"me1\">popBack</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">const</span> problem <span class=\"sy0\">=</span> iota<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>_ <span class=\"sy0\">=&gt;</span> uniform<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Make 24 with the digits: \"</span><span class=\"sy0\">,</span> problem<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> stack<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> digits<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> c<span class=\"sy0\">;</span> readln<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">'<span class=\"es1\">\\t</span>'</span><span class=\"sy0\">,</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy0\">:</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'1'</span><span class=\"sy0\">:</span> <span class=\"sy0\">..</span> <span class=\"kw1\">case</span> <span class=\"st0\">'9'</span><span class=\"sy0\">:</span><br/>                stack <span class=\"sy0\">~=</span> c <span class=\"sy0\">-</span> <span class=\"st0\">'0'</span><span class=\"sy0\">;</span><br/>                digits <span class=\"sy0\">~=</span> c <span class=\"sy0\">-</span> <span class=\"st0\">'0'</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>o<span class=\"sy0\">;</span> TypeTuple<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"st0\">'+'</span><span class=\"sy0\">,</span> <span class=\"st0\">'-'</span><span class=\"sy0\">,</span> <span class=\"st0\">'*'</span><span class=\"sy0\">,</span> <span class=\"st0\">'/'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">case</span> o<span class=\"sy0\">:</span> op<span class=\"sy0\">!</span>o<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">default</span><span class=\"sy0\">:</span> <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"Wrong char: \"</span> <span class=\"sy0\">~</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>digits.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">equal</span><span class=\"br0\">(</span>problem.<span class=\"me1\">dup</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"Not using the given digits.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>stack.<span class=\"me1\">length</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"Wrong expression.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Result: \"</span><span class=\"sy0\">,</span> stack<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>abs<span class=\"br0\">(</span>stack<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu16\">0.001</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"Good job!\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"Try again.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 33, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>string<span class=\"sy0\">-</span>delimiter <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; check that nums are in expr, and only once</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>is<span class=\"sy0\">-</span>valid? expr sorted: nums<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>when <span class=\"br0\">(</span><span class=\"kw1\">equal?</span> 'q expr<span class=\"br0\">)</span> <span class=\"br0\">(</span>error <span class=\"st0\">\"24-game\"</span> <span class=\"st0\">\"Thx for playing\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>unless <span class=\"br0\">(</span><span class=\"kw1\">and</span> <br/>        <span class=\"br0\">(</span><span class=\"kw1\">list?</span> expr<span class=\"br0\">)</span> <br/>        <span class=\"br0\">(</span><span class=\"kw1\">equal?</span> nums <span class=\"br0\">(</span>list<span class=\"sy0\">-</span>sort <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>filter <span class=\"kw1\">number?</span> <span class=\"br0\">(</span>flatten expr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>writeln <span class=\"st0\">\"\ud83c\udf83 Please use\"</span> nums<span class=\"br0\">)</span><br/>    #f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; 4 random  digits</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>gen24<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span>range <span class=\"nu0\">1</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">(</span>range <span class=\"nu0\">1</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> shuffle <span class=\"br0\">(</span>take <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>list<span class=\"sy0\">-</span>sort <span class=\"sy0\">&lt;</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>is<span class=\"sy0\">-</span><span class=\"nu0\">24</span>? num<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>unless <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">24</span> num<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>writeln <span class=\"st0\">\"\ud83d\ude27 Sorry - Result = \"</span> num<span class=\"br0\">)</span><br/>    #f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>check<span class=\"sy0\">-</span><span class=\"nu0\">24</span> expr<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <br/>        <span class=\"br0\">(</span>is<span class=\"sy0\">-</span>valid? expr nums<span class=\"br0\">)</span> <br/>        <span class=\"br0\">(</span>is<span class=\"sy0\">-</span><span class=\"nu0\">24</span>?  <span class=\"br0\">(</span>js<span class=\"sy0\">-</span>eval <span class=\"br0\">(</span><span class=\"kw1\">string</span> expr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; use js evaluator</span><br/>        <span class=\"st0\">\"\ud83c\udf40 \ud83c\udf38 Congrats - (play24) for another one.\"</span><br/>        <span class=\"br0\">(</span>input<span class=\"sy0\">-</span>expr check<span class=\"sy0\">-</span><span class=\"nu0\">24</span> <span class=\"br0\">(</span><span class=\"kw1\">string</span> nums<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> nums null<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>play24<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">set!</span> nums <span class=\"br0\">(</span>gen24<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>writeln <span class=\"st0\">\"24-game - Can you combine\"</span> nums <span class=\"st0\">\"to get 24 \u2753 (q to exit)\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>input<span class=\"sy0\">-</span>expr check<span class=\"sy0\">-</span><span class=\"nu0\">24</span> <span class=\"br0\">(</span><span class=\"kw1\">string-append</span>  <span class=\"br0\">(</span><span class=\"kw1\">string</span> nums<span class=\"br0\">)</span> <span class=\"st0\">\" -&gt; 24 \u2753\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 175, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import system'collections.<br/>import system'dynamic.<br/>import extensions.<br/>\u00a0<br/>class ExpressionTree<br/>{<br/>    object theTree.<br/>\u00a0<br/>    constructor new\u00a0: aLiteral<br/>    [<br/>        auto aLevel\u00a0:= Integer new:0.<br/>\u00a0<br/>        aLiteral forEach(:ch)<br/>        [<br/>            var node\u00a0:= DynamicStruct new.<br/>\u00a0<br/>            ch =&gt;<br/>                $43 [ node level\u00a0:= aLevel + 1. node operation\u00a0:=\u00a0%add ];       // +<br/>                $45 [ node level\u00a0:= aLevel + 1. node operation\u00a0:=\u00a0%subtract ];  // -<br/>                $42 [ node level\u00a0:= aLevel + 2. node operation\u00a0:=\u00a0%multiply ];  // *<br/>                $47 [ node level\u00a0:= aLevel + 2. node operation\u00a0:=\u00a0%divide ];    // /<br/>                $40 [ aLevel append(10). ^ self ]; // (<br/>                $41 [ aLevel reduce(10). ^ self ]; // )<br/>               \u00a0! [<br/>                    node leaf\u00a0:= ch literal; toReal.<br/>                    node level\u00a0:= aLevel + 3.<br/>                ].<br/>\u00a0<br/>            if (nil == theTree)<br/>                [ theTree\u00a0:= node ];<br/>                [<br/>                    if (theTree level &gt;= node level)<br/>                        [<br/>                            node left\u00a0:= theTree.<br/>                            node right\u00a0:= nilValue.<br/>\u00a0<br/>                            theTree\u00a0:= node<br/>                        ];<br/>                        [<br/>                            var aTop\u00a0:= theTree.<br/>                            while ((nilValue\u00a0!= aTop right)&amp;&amp;(aTop right; level &lt; node level))<br/>                                [ aTop\u00a0:= aTop right ].<br/>\u00a0<br/>                            node left\u00a0:= aTop right.<br/>                            node right\u00a0:= nilValue.<br/>\u00a0<br/>                            aTop right\u00a0:= node<br/>                        ]<br/>                ]<br/>        ]<br/>    ]<br/>\u00a0<br/>    eval\u00a0: aNode<br/>    [<br/>        if (aNode containsProperty:%leaf)<br/>            [ ^ aNode leaf ];<br/>            [<br/>                var aLeft\u00a0:= self eval:(aNode left).<br/>                var aRight\u00a0:= self eval:(aNode right).<br/>\u00a0<br/>                ^ aLeft~(aNode operation) eval:aRight<br/>            ]<br/>    ]<br/>\u00a0<br/>    value<br/>        &lt;= eval:theTree.<br/>\u00a0<br/>    readLeaves\u00a0: aList at:aNode<br/>    [<br/>        if (nil == aNode)<br/>            [ InvalidArgumentException new; raise ].<br/>\u00a0<br/>        if (aNode containsProperty:%leaf)<br/>            [ aList append(aNode leaf) ];<br/>            [<br/>                self readLeaves:aList at(aNode left).<br/>                self readLeaves:aList at(aNode right).<br/>            ].<br/>    ]        <br/>\u00a0<br/>    readLeaves\u00a0: aList<br/>        &lt;= readLeaves:aList at:theTree.<br/>}<br/>\u00a0<br/>class TwentyFourGame<br/>{<br/>    object theNumbers.<br/>\u00a0<br/>    constructor new<br/>    [<br/>        self newPuzzle.        <br/>    ]<br/>\u00a0<br/>    newPuzzle<br/>    [<br/>        theNumbers\u00a0:= (<br/>            1 + randomGenerator eval:9, <br/>            1 + randomGenerator eval:9, <br/>            1 + randomGenerator eval:9, <br/>            1 + randomGenerator eval:9).<br/>    ]<br/>\u00a0<br/>    help<br/>    [<br/>        console <br/>            printLine:\"------------------------------- Instructions ------------------------------\";<br/>            printLine:\"Four digits will be displayed.\";<br/>            printLine:\"Enter an equation using all of those four digits that evaluates to 24\";<br/>            printLine:\"Only * / + - operators and () are allowed\";<br/>            printLine:\"Digits can only be used once, but in any order you need.\";<br/>            printLine:\"Digits cannot be combined - i.e.: 12 + 12 when given 1,2,2,1 is not allowed\";<br/>            printLine:\"Submit a blank line to skip the current puzzle.\";<br/>            printLine:\"Type 'q' to quit\";<br/>            writeLine;<br/>            printLine:\"Example: given 2 3 8 2, answer should resemble 8*3-(2-2)\";<br/>            printLine:\"------------------------------- --------------------------------------------\".<br/>    ]<br/>\u00a0<br/>    prompt<br/>    [<br/>        theNumbers forEach(:n) [ console print(n,\" \") ].<br/>\u00a0<br/>        console print:\": \"<br/>    ]<br/>\u00a0<br/>    resolve\u00a0: aLine<br/>    [<br/>        var exp\u00a0:= ExpressionTree new:aLine.<br/>\u00a0<br/>        var Leaves\u00a0:= ArrayList new.<br/>        exp readLeaves:Leaves.<br/>\u00a0<br/>        ifnot (Leaves ascendant; sequenceEqual(theNumbers ascendant))<br/>            [ console printLine:\"Invalid input. Enter an equation using all of those four digits. Try again.\". ^ self ].<br/>\u00a0<br/>        var aResult\u00a0:= exp value.<br/>        if (aResult == 24)<br/>            [<br/>                console printLine(\"Good work. \",aLine,\"=\",aResult).<br/>\u00a0<br/>                self newPuzzle.<br/>            ];<br/>            [ console printLine(\"Incorrect. \",aLine,\"=\",aResult) ]<br/>    ]    <br/>}<br/>\u00a0<br/>extension gameOp<br/>{<br/>    playRound\u00a0: aLine<br/>    [<br/>        if (aLine == \"q\")<br/>            [ ^ false ];<br/>            [<br/>                if (aLine == \"\")<br/>                    [ console printLine:\"Skipping this puzzle\". self newPuzzle. ];<br/>                    [<br/>                        try(self resolve:aLine)<br/>                        {<br/>                            on(Exception e) [<br/>                                   console writeLine:\"An error occurred.  Check your input and try again.\"<br/>                                ]<br/>                        }<br/>                    ].                    <br/>                ^ true<br/>            ].<br/>    ]<br/>}<br/>\u00a0<br/>public program<br/>[<br/>    var aGame\u00a0:= TwentyFourGame new; help.<br/>\u00a0<br/>    while (aGame prompt; playRound(console readLine)) [].<br/>]</pre>"}, {"lang": "Elixir", "loc": 39, "block": "<pre class=\"text highlighted_source\">defmodule Game24 do<br/>  def main do<br/>    IO.puts \"24 Game\"<br/>    play<br/>  end<br/>\u00a0<br/>  defp play do<br/>    IO.puts \"Generating 4 digits...\"<br/>    digts = for _ &lt;- 1..4, do: Enum.random(1..9)<br/>    IO.puts \"Your digits\\t#{inspect digts, char_lists:\u00a0:as_lists}\"<br/>    read_eval(digts)<br/>    play<br/>  end<br/>\u00a0<br/>  defp read_eval(digits) do<br/>    exp = IO.gets(\"Your expression: \") |&gt; String.strip<br/>    if exp in [\"\",\"q\"], do: exit(:normal)        # give up<br/>    case {correct_nums(exp, digits), eval(exp)} do<br/>      {:ok, x} when x==24 -&gt; IO.puts \"You Win!\"<br/>      {:ok, x} -&gt; IO.puts \"You Lose with #{inspect x}!\"<br/>      {err, _} -&gt; IO.puts \"The following numbers are wrong: #{inspect err, char_lists:\u00a0:as_lists}\"<br/>    end<br/>  end<br/>\u00a0<br/>  defp correct_nums(exp, digits) do<br/>    nums = String.replace(exp, ~r/\\D/, \" \") |&gt; String.split |&gt; Enum.map(&amp;String.to_integer &amp;1)<br/>    if length(nums)==4 and (nums--digits)==[], do:\u00a0:ok, else: nums<br/>  end<br/>\u00a0<br/>  defp eval(exp) do<br/>    try do<br/>      Code.eval_string(exp) |&gt; elem(0)<br/>    rescue<br/>      e -&gt; Exception.message(e)<br/>    end<br/>  end<br/>end<br/>\u00a0<br/>Game24.main</pre>"}, {"lang": "Erlang", "loc": 66, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>g24<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>main<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">seed</span><span class=\"br0\">(</span><span class=\"kw3\">now</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"24 Game~n\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">play</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">play</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Generating 4 digits...~n\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Digts</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Your digits<span class=\"es0\">\\t</span>~w~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Digts</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">read_eval</span><span class=\"br0\">(</span><span class=\"re5\">Digts</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">play</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">read_eval</span><span class=\"br0\">(</span><span class=\"re5\">Digits</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Exp</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/string.html\"><span class=\"kw5\">string</span></a>:<span class=\"re3\">strip</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"kw3\">get</span>_<span class=\"re3\">line</span><span class=\"br0\">(</span>standard_io<span class=\"sy1\">,</span> <span class=\"st0\">\"Your expression: \"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> both<span class=\"sy1\">,</span> $\\n<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"kw1\">case</span> <span class=\"br0\">{</span><span class=\"re3\">correct_nums</span><span class=\"br0\">(</span><span class=\"re5\">Exp</span><span class=\"sy1\">,</span> <span class=\"re5\">Digits</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"re5\">Exp</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"kw1\">of</span><br/>        <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"br0\">}</span> <span class=\"kw1\">when</span> <span class=\"re5\">X</span> <span class=\"sy3\">==</span> <span class=\"nu0\">24</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"You Win!~n\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"You Lose with ~p!~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"br0\">{</span><span class=\"re5\">List</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"The following numbers are wrong: ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">List</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">correct_nums</span><span class=\"br0\">(</span><span class=\"re5\">Exp</span><span class=\"sy1\">,</span> <span class=\"re5\">Digits</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">case</span> <a href=\"http://erlang.org/doc/man/re.html\"><span class=\"kw5\">re</span></a>:<span class=\"re3\">run</span><span class=\"br0\">(</span><span class=\"re5\">Exp</span><span class=\"sy1\">,</span> <span class=\"st0\">\"([0-9]+)\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>global<span class=\"sy1\">,</span> <span class=\"br0\">{</span>capture<span class=\"sy1\">,</span> all_but_first<span class=\"sy1\">,</span> <span class=\"kw4\">list</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>        nomatch <span class=\"sy1\">-&gt;</span><br/>            <span class=\"st0\">\"No number entered\"</span><span class=\"sy1\">;</span><br/>        <span class=\"br0\">{</span>match<span class=\"sy1\">,</span> <span class=\"re5\">IntLs</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>            <span class=\"kw1\">case</span> <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">||</span> <span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"br0\">]</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">IntLs</span><span class=\"sy1\">,</span> <span class=\"kw2\">not</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">member</span><span class=\"br0\">(</span><span class=\"kw3\">list_to_integer</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Digits</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span><br/>                <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">ok</span><span class=\"sy1\">;</span><br/>                <span class=\"re5\">L</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">L</span><br/>            <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"re5\">Exp</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">eval</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/re.html\"><span class=\"kw5\">re</span></a>:<span class=\"re3\">replace</span><span class=\"br0\">(</span><span class=\"re5\">Exp</span><span class=\"sy1\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\\\</span>s\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">{</span>return<span class=\"sy1\">,</span> <span class=\"kw4\">list</span><span class=\"br0\">}</span><span class=\"sy1\">,</span>global<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                  <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">X</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Val</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">Val</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"br0\">[</span>$<span class=\"br0\">(</span>|Rest<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Val</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">NewVal</span><span class=\"sy1\">,</span> <span class=\"re5\">Exp</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"re5\">Rest</span><span class=\"sy1\">,</span> <span class=\"re5\">Val</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"re5\">Exp</span><span class=\"sy1\">,</span> <span class=\"re5\">NewVal</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"br0\">[</span>$<span class=\"br0\">)</span>|Rest<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Val</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">Val</span><span class=\"sy1\">,</span> <span class=\"re5\">Rest</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"br0\">[</span>$<span class=\"br0\">[</span>|Rest<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Val</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">NewVal</span><span class=\"sy1\">,</span> <span class=\"re5\">Exp</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"re5\">Rest</span><span class=\"sy1\">,</span> <span class=\"re5\">Val</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"re5\">Exp</span><span class=\"sy1\">,</span> <span class=\"re5\">NewVal</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"br0\">[</span>$<span class=\"br0\">]</span>|Rest<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Val</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">Val</span><span class=\"sy1\">,</span> <span class=\"re5\">Rest</span><span class=\"br0\">}</span><span class=\"sy1\">;</span><br/><span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"br0\">[</span>$<span class=\"sy3\">+</span>|Rest<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Val</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">NewOperand</span><span class=\"sy1\">,</span> <span class=\"re5\">Exp</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"re5\">Rest</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"re5\">Exp</span><span class=\"sy1\">,</span> <span class=\"re5\">Val</span> <span class=\"sy3\">+</span> <span class=\"re5\">NewOperand</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"br0\">[</span>$<span class=\"sy3\">-</span>|Rest<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Val</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">NewOperand</span><span class=\"sy1\">,</span> <span class=\"re5\">Exp</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"re5\">Rest</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"re5\">Exp</span><span class=\"sy1\">,</span> <span class=\"re5\">Val</span> <span class=\"sy3\">-</span> <span class=\"re5\">NewOperand</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"br0\">[</span>$<span class=\"sy3\">*</span>|Rest<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Val</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">NewOperand</span><span class=\"sy1\">,</span> <span class=\"re5\">Exp</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"re5\">Rest</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"re5\">Exp</span><span class=\"sy1\">,</span> <span class=\"re5\">Val</span> <span class=\"sy3\">*</span> <span class=\"re5\">NewOperand</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"br0\">[</span>$<span class=\"sy3\">/</span>|Rest<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Val</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">NewOperand</span><span class=\"sy1\">,</span> <span class=\"re5\">Exp</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"re5\">Rest</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"re5\">Exp</span><span class=\"sy1\">,</span> <span class=\"re5\">Val</span> <span class=\"sy3\">/</span> <span class=\"re5\">NewOperand</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">X</span>|Rest<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">X</span> <span class=\"sy3\">&gt;=</span> <span class=\"re6\">$1</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span> <span class=\"sy3\">=&lt;</span> <span class=\"re6\">$9</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">eval</span><span class=\"br0\">(</span><span class=\"re5\">Rest</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"sy3\">-</span><span class=\"re6\">$0</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 106, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/><span class=\"kw1\">open</span> System.<span class=\"me1\">Text</span>.<span class=\"me1\">RegularExpressions</span><br/>\u00a0<br/><span class=\"co1\">// Some utilities</span><br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span>|Parse|_|<span class=\"br0\">)</span> regex str <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">let</span> m <span class=\"sy0\">=</span> Regex<span class=\"br0\">(</span>regex<span class=\"br0\">)</span>.<span class=\"me1\">Match</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>   <span class=\"kw1\">if</span> m.<span class=\"me1\">Success</span> <span class=\"kw1\">then</span> Some <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw1\">for</span> g <span class=\"kw1\">in</span> m.<span class=\"me1\">Groups</span> <span class=\"sy0\">-&gt;</span> g.<span class=\"me1\">Value</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> None<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> gcd x y <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> x <span class=\"sy0\">=</span> y || x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> y <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> x <span class=\"sy0\">&lt;</span> y <span class=\"kw1\">then</span> gcd y x <span class=\"kw1\">else</span> gcd y <span class=\"br0\">(</span>x<span class=\"sy0\">-</span>y<span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> <span class=\"kw3\">abs</span> <span class=\"br0\">(</span>x\u00a0: <span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">Abs</span> x<br/><span class=\"kw1\">let</span> <span class=\"kw3\">sign</span> <span class=\"br0\">(</span>x: <span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">Sign</span> x<br/><span class=\"kw1\">let</span> cint s <span class=\"sy0\">=</span> Int32.<span class=\"me1\">Parse</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> replace m <span class=\"br0\">(</span>s\u00a0: <span class=\"kw4\">string</span><span class=\"br0\">)</span> t <span class=\"sy0\">=</span> Regex.<span class=\"me1\">Replace</span><span class=\"br0\">(</span>t, m, s<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">// computing in Rationals</span><br/><span class=\"kw1\">type</span> Rat<span class=\"br0\">(</span>x\u00a0: <span class=\"kw4\">int</span>, y\u00a0: <span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> g <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> y <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> gcd <span class=\"br0\">(</span><span class=\"kw3\">abs</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw3\">abs</span> y<span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"kw5\">raise</span> <span class=\"sy0\">&lt;|</span> DivideByZeroException<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">member</span> this.<span class=\"me1\">n</span> <span class=\"sy0\">=</span> <span class=\"kw3\">sign</span> y <span class=\"sy0\">*</span> x <span class=\"sy0\">/</span> g   <span class=\"co1\">// store a minus sign in the numerator</span><br/>    <span class=\"kw1\">member</span> this.<span class=\"me1\">d</span> <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">if</span> y <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw3\">sign</span> y <span class=\"sy0\">*</span> y <span class=\"sy0\">/</span> g <span class=\"kw1\">else</span> <span class=\"kw5\">raise</span> <span class=\"sy0\">&lt;|</span> DivideByZeroException<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">member</span> <span class=\"br0\">(</span><span class=\"sy0\">~-</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>x\u00a0: Rat<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Rat<span class=\"br0\">(</span><span class=\"sy0\">-</span>x.<span class=\"me1\">n</span>, x.<span class=\"me1\">d</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">member</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>x\u00a0: Rat, y\u00a0: Rat<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Rat<span class=\"br0\">(</span>x.<span class=\"me1\">n</span> <span class=\"sy0\">*</span> y.<span class=\"me1\">d</span> <span class=\"sy0\">+</span> y.<span class=\"me1\">n</span> <span class=\"sy0\">*</span> x.<span class=\"me1\">d</span>, x.<span class=\"me1\">d</span> <span class=\"sy0\">*</span> y.<span class=\"me1\">d</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">member</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>x\u00a0: Rat, y\u00a0: Rat<span class=\"br0\">)</span> <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> Rat<span class=\"br0\">(</span><span class=\"sy0\">-</span>y.<span class=\"me1\">n</span>, y.<span class=\"me1\">d</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">member</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>x\u00a0: Rat, y\u00a0: Rat<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Rat<span class=\"br0\">(</span>x.<span class=\"me1\">n</span> <span class=\"sy0\">*</span> y.<span class=\"me1\">n</span>, x.<span class=\"me1\">d</span> <span class=\"sy0\">*</span> y.<span class=\"me1\">d</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">member</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>x\u00a0: Rat, y\u00a0: Rat<span class=\"br0\">)</span> <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> Rat<span class=\"br0\">(</span>y.<span class=\"me1\">d</span>, y.<span class=\"me1\">n</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">override</span> this.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> sprintf <span class=\"st_h\">@\"&lt;%d,%d&gt;\"</span> this.<span class=\"me1\">n</span> this.<span class=\"me1\">d</span><br/>    <span class=\"kw1\">new</span><span class=\"br0\">(</span>x\u00a0: <span class=\"kw4\">string</span>, y\u00a0: <span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> y <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> Rat<span class=\"br0\">(</span>cint x, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> Rat<span class=\"br0\">(</span>cint x, cint y<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">// Due to the constraints imposed by the game (reduced set</span><br/><span class=\"co1\">// of operators, all left associativ) we can get away with a repeated reduction</span><br/><span class=\"co1\">// to evaluate the algebraic expression.</span><br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> reduce <span class=\"br0\">(</span>str\u00a0:<span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> eval <span class=\"br0\">(</span>x\u00a0: Rat<span class=\"br0\">)</span> <span class=\"br0\">(</span>y\u00a0: Rat<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>    | <span class=\"st0\">\"*\"</span> <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">*</span> y | <span class=\"st0\">\"/\"</span> <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">/</span> y | <span class=\"st0\">\"+\"</span> <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">+</span> y | <span class=\"st0\">\"-\"</span> <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">-</span> y | _ <span class=\"sy0\">-&gt;</span> <span class=\"kw5\">failwith</span> <span class=\"st0\">\"unknown op\"</span><br/>    <span class=\"kw1\">let</span> subst s r <span class=\"sy0\">=</span> str.<span class=\"me1\">Replace</span><span class=\"br0\">(</span>s, r.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> rstr <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">match</span> str <span class=\"kw1\">with</span><br/>        | Parse <span class=\"st_h\">@\"\\(&lt;(-?\\d+),(\\d+)&gt;([*/+-])&lt;(-?\\d+),(\\d+)&gt;\\)\"</span> <span class=\"br0\">[</span>matched<span class=\"sy0\">;</span> xn<span class=\"sy0\">;</span> xd<span class=\"sy0\">;</span> op<span class=\"sy0\">;</span> yn<span class=\"sy0\">;</span> yd<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <br/>            subst matched <span class=\"sy0\">&lt;|</span> eval <span class=\"br0\">(</span>Rat<span class=\"br0\">(</span>xn,xd<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Rat<span class=\"br0\">(</span>yn,yd<span class=\"br0\">)</span><span class=\"br0\">)</span> op<br/>        | Parse <span class=\"st_h\">@\"&lt;(-?\\d+),(\\d+)&gt;([*/])&lt;(-?\\d+),(\\d+)&gt;\"</span> <span class=\"br0\">[</span>matched<span class=\"sy0\">;</span> xn<span class=\"sy0\">;</span> xd<span class=\"sy0\">;</span> op<span class=\"sy0\">;</span> yn<span class=\"sy0\">;</span> yd<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <br/>            subst matched <span class=\"sy0\">&lt;|</span> eval <span class=\"br0\">(</span>Rat<span class=\"br0\">(</span>xn,xd<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Rat<span class=\"br0\">(</span>yn,yd<span class=\"br0\">)</span><span class=\"br0\">)</span> op<br/>        | Parse <span class=\"st_h\">@\"&lt;(-?\\d+),(\\d+)&gt;([+-])&lt;(-?\\d+),(\\d+)&gt;\"</span> <span class=\"br0\">[</span>matched<span class=\"sy0\">;</span> xn<span class=\"sy0\">;</span> xd<span class=\"sy0\">;</span> op<span class=\"sy0\">;</span> yn<span class=\"sy0\">;</span> yd<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <br/>            subst matched <span class=\"sy0\">&lt;|</span> eval <span class=\"br0\">(</span>Rat<span class=\"br0\">(</span>xn,xd<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Rat<span class=\"br0\">(</span>yn,yd<span class=\"br0\">)</span><span class=\"br0\">)</span> op<br/>        | Parse <span class=\"st_h\">@\"\\(&lt;(-?\\d+),(\\d+)&gt;\\)\"</span> <span class=\"br0\">[</span>matched<span class=\"sy0\">;</span> xn<span class=\"sy0\">;</span> xd<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <br/>            subst matched <span class=\"sy0\">&lt;|</span> Rat<span class=\"br0\">(</span>xn,xd<span class=\"br0\">)</span><br/>        | Parse <span class=\"st_h\">@\"(?&lt;!&gt;)-&lt;(-?\\d+),(\\d+)&gt;\"</span> <span class=\"br0\">[</span>matched<span class=\"sy0\">;</span> xn<span class=\"sy0\">;</span> xd<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <br/>            subst matched <span class=\"sy0\">&lt;|</span> <span class=\"sy0\">-</span>Rat<span class=\"br0\">(</span>xn,xd<span class=\"br0\">)</span><br/>        | _ <span class=\"sy0\">-&gt;</span> str<br/>    <span class=\"kw1\">if</span> str <span class=\"sy0\">=</span> rstr <span class=\"kw1\">then</span> str <span class=\"kw1\">else</span> reduce rstr<br/>\u00a0<br/><span class=\"kw1\">let</span> gameLoop<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> checkInput dddd input <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">match</span> input <span class=\"kw1\">with</span><br/>        | <span class=\"st0\">\"n\"</span> | <span class=\"st0\">\"q\"</span> <span class=\"sy0\">-&gt;</span> Some<span class=\"br0\">(</span>input<span class=\"br0\">)</span><br/>        | Parse <span class=\"st_h\">@\"[^1-9()*/+-]\"</span> <span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span><br/>            printfn <span class=\"st0\">\"You used an illegal character in your expression:\u00a0%s\"</span> c<br/>            None<br/>        | Parse <span class=\"st_h\">@\"^\\D*(\\d)\\D+(\\d)\\D+(\\d)\\D+(\\d)(?:\\D*(\\d))*\\D*$\"</span> <span class=\"br0\">[</span>m<span class=\"sy0\">;</span> d1<span class=\"sy0\">;</span> d2<span class=\"sy0\">;</span> d3<span class=\"sy0\">;</span> d4<span class=\"sy0\">;</span> d5<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span><br/>            <span class=\"kw1\">if</span> d5 <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span> &amp;&amp; <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">sort</span> <span class=\"br0\">[</span>|d1<span class=\"sy0\">;</span>d2<span class=\"sy0\">;</span>d3<span class=\"sy0\">;</span>d4|<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> dddd <span class=\"kw1\">then</span> Some<span class=\"br0\">(</span>input<span class=\"br0\">)</span><br/>            <span class=\"kw1\">elif</span> d5 <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span><br/>                printfn <span class=\"st0\">\"Use this 4 digits with operators in between:\u00a0%s.\"</span> dddd<br/>                None<br/>            <span class=\"kw1\">else</span> <br/>                printfn <span class=\"st0\">\"Use only this 4 digits with operators in between:\u00a0%s.\"</span> dddd<br/>                None<br/>        | _ <span class=\"sy0\">-&gt;</span><br/>            printfn <span class=\"st0\">\"Use all 4 digits with operators in between:\u00a0%s.\"</span> dddd<br/>            None<br/>\u00a0<br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> userLoop dddd  <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> tryAgain msg <span class=\"sy0\">=</span><br/>            printfn <span class=\"st0\">\"%s\"</span> msg<br/>            userLoop dddd<br/>        printf <span class=\"st0\">\"[Expr|n|q]: \"</span><br/>        <span class=\"kw1\">match</span> Console.<span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> replace <span class=\"st_h\">@\"\\s\"</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">|&gt;</span> checkInput dddd <span class=\"kw1\">with</span><br/>        | Some<span class=\"br0\">(</span>input<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <br/>            <span class=\"kw1\">let</span> data <span class=\"sy0\">=</span> input <span class=\"sy0\">|&gt;</span> replace <span class=\"st_h\">@\"((?&lt;!\\d)-)?\\d+\"</span> <span class=\"st_h\">@\"&lt;$&amp;,1&gt;\"</span><br/>            <span class=\"kw1\">match</span> data <span class=\"kw1\">with</span><br/>            | <span class=\"st0\">\"n\"</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">true</span> | <span class=\"st0\">\"q\"</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">false</span><br/>            | _ <span class=\"sy0\">-&gt;</span><br/>                <span class=\"kw1\">try</span><br/>                    <span class=\"kw1\">match</span> reduce data <span class=\"kw1\">with</span><br/>                    | Parse <span class=\"st_h\">@\"^&lt;(-?\\d+),(\\d+)&gt;$\"</span> <span class=\"br0\">[</span>_<span class=\"sy0\">;</span> x<span class=\"sy0\">;</span> y<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span><br/>                        <span class=\"kw1\">let</span> n, d <span class=\"sy0\">=</span> <span class=\"br0\">(</span>cint x<span class=\"br0\">)</span>, <span class=\"br0\">(</span>cint y<span class=\"br0\">)</span><br/>                        <span class=\"kw1\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">24</span> <span class=\"kw1\">then</span><br/>                            printfn <span class=\"st0\">\"Correct!\"</span><br/>                            <span class=\"kw1\">true</span><br/>                        <span class=\"kw1\">elif</span> d<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span> tryAgain <span class=\"sy0\">&lt;|</span> sprintf <span class=\"st0\">\"Wrong! Value =\u00a0%d.\"</span> n<br/>                        <span class=\"kw1\">else</span> tryAgain <span class=\"sy0\">&lt;|</span> sprintf <span class=\"st0\">\"Wrong! Value =\u00a0%d/%d.\"</span> n d<br/>                    | _ <span class=\"sy0\">-&gt;</span> tryAgain <span class=\"st0\">\"Wrong! not a well-formed expression!\"</span><br/>                <span class=\"kw1\">with</span><br/>                    |\u00a0:? System.<span class=\"me1\">DivideByZeroException</span> <span class=\"sy0\">-&gt;</span><br/>                        tryAgain <span class=\"st0\">\"Wrong! Your expression results in a division by zero!\"</span><br/>                    | ex <span class=\"sy0\">-&gt;</span><br/>                        tryAgain <span class=\"sy0\">&lt;|</span> sprintf <span class=\"st0\">\"There is an unforeseen problem with yout input:\u00a0%s\"</span> ex.<span class=\"me1\">Message</span><br/>        | None <span class=\"sy0\">-&gt;</span> userLoop dddd<br/>\u00a0<br/>    <span class=\"kw1\">let</span> random <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Random<span class=\"br0\">(</span>DateTime.<span class=\"me1\">Now</span>.<span class=\"me1\">Millisecond</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> loop<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> dddd <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">init</span> <span class=\"nu0\">4</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> random.<span class=\"me1\">Next</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">)</span><br/>        printfn <span class=\"st0\">\"<span class=\"es0\">\\n</span>Compute 24 from the following 4 numbers:\u00a0%s\"</span> dddd<br/>        printfn <span class=\"st0\">\"Use them in any order with * / + - and parentheses; n = new numbers; q = quit\"</span><br/>        <span class=\"kw1\">if</span> userLoop dddd <span class=\"kw1\">then</span> loop<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    loop<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>gameLoop<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 43, "block": "<pre class=\"text highlighted_source\">USING:<br/>    combinators.short-circuit<br/>    continuations<br/>    eval<br/>    formatting<br/>    fry<br/>    kernel<br/>    io<br/>    math math.ranges<br/>    prettyprint<br/>    random<br/>    sequences<br/>    sets\u00a0;<br/>IN: 24game<br/>\u00a0<br/>: choose4 ( -- seq )<br/>    4 [ 9 [1,b] random ] replicate\u00a0;<br/>\u00a0<br/>: step ( numbers --\u00a0? )<br/>    readln<br/>    [<br/>        parse-string<br/>        {<br/>           \u00a0! Is only allowed tokens used?<br/>            [ swap { + - / * } append subset? ]<br/>           \u00a0! Digit count in expression should be equal to the given numbers.<br/>            [ [ number? ] count swap length = ]<br/>           \u00a0! Of course it must evaluate to 24<br/>            [ nip call( -- x ) 24 = ]<br/>        } 2&amp;&amp;<br/>        [ f \"You got it!\" ]<br/>        [ t \"Expression isnt valid, or doesnt evaluate to 24.\" ]<br/>        if<br/>    ]<br/>    [ 3drop f \"Could not parse that.\" ]<br/>    recover print flush\u00a0;<br/>\u00a0<br/>: main ( -- )<br/>    choose4<br/>    [ \"Your numbers are\u00a0%[%s,\u00a0%], make an expression\\n\" printf flush ]<br/>    [ '[ _ step ] loop ]<br/>    bi\u00a0;<br/>\u00a0</pre>"}, {"lang": "Falcon", "loc": 71, "block": "<pre class=\"falcon highlighted_source\"><span class=\"kw4\">load</span> compiler<br/>\u00a0<br/><span class=\"kw1\">function</span> genRandomNumbers<span class=\"br0\">(</span> amount <span class=\"br0\">)</span><br/>  rtn <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">for</span> i <span class=\"kw3\">in</span> <span class=\"br0\">[</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> amount <span class=\"br0\">]</span><span class=\"sy0\">:</span> rtn <span class=\"sy0\">+=</span> <a href=\"http://falconpl.org/project_docs/core/functions.html#random\"><span class=\"kw6\">random</span></a><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span> <span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span><span class=\"br0\">(</span> rtn <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> getAnswer<span class=\"br0\">(</span> <a href=\"http://falconpl.org/project_docs/core/functions.html#exp\"><span class=\"kw6\">exp</span></a> <span class=\"br0\">)</span><br/>  ic <span class=\"sy0\">=</span> ICompiler<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  ic.<span class=\"me0\">compileAll</span><span class=\"br0\">(</span><a href=\"http://falconpl.org/project_docs/core/functions.html#exp\"><span class=\"kw6\">exp</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span><span class=\"br0\">(</span> ic.<span class=\"me0\">result</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> validInput<span class=\"br0\">(</span> str <span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> i <span class=\"kw3\">in</span> <span class=\"br0\">[</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> str.<a href=\"http://falconpl.org/project_docs/core/functions.html#len\"><span class=\"kw6\">len</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> str<span class=\"br0\">[</span><span class=\"re0\">i</span><span class=\"br0\">]</span> <span class=\"kw3\">notin</span> <span class=\"st0\">' ()[]0123456789-+/*'</span><br/>      <span class=\"sy0\">&gt;</span> <span class=\"st0\">'INVALID Character = '</span><span class=\"sy0\">,</span> str<span class=\"br0\">[</span><span class=\"re0\">i</span><span class=\"br0\">]</span><br/>      <span class=\"kw1\">return</span><span class=\"br0\">(</span> <span class=\"kw2\">false</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><a href=\"http://falconpl.org/project_docs/core/functions.html#printl\"><span class=\"kw6\">printl</span></a><span class=\"br0\">(</span><span class=\"st0\">'<br/>The 24 Game<br/>\u00a0<br/>Given any four digits in the range 1 to 9, which may have repetitions,<br/>Using just the +, -, *, and / operators; and the possible use of<br/>brackets, (), show how to make an answer of 24.<br/>\u00a0<br/>An answer of \"q\" will quit the game.<br/>An answer of \"!\" will generate a new set of four digits.<br/>Otherwise you are repeatedly asked for an expression until it evaluates to 24<br/>\u00a0<br/>Note: you cannot form multiple digit numbers from the supplied digits,<br/>so an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.<br/>'</span><span class=\"br0\">)</span><br/>\u00a0<br/>num <span class=\"sy0\">=</span> genRandomNumbers<span class=\"br0\">(</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"sy0\">&gt;&gt;</span>  <span class=\"st0\">\"Here are the numbers to choose from: \"</span><br/>  <a href=\"http://falconpl.org/project_docs/core/functions.html#map\"><span class=\"kw6\">map</span></a><span class=\"br0\">(</span><span class=\"br0\">{</span> a <span class=\"sy0\">=&gt;</span> <a href=\"http://falconpl.org/project_docs/core/functions.html#print\"><span class=\"kw6\">print</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> num<span class=\"br0\">)</span><br/>  <span class=\"sy0\">&gt;</span><br/>\u00a0<br/>  <a href=\"http://falconpl.org/project_docs/core/functions.html#exp\"><span class=\"kw6\">exp</span></a> <span class=\"sy0\">=</span> <a href=\"http://falconpl.org/project_docs/core/functions.html#input\"><span class=\"kw6\">input</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">switch</span> <a href=\"http://falconpl.org/project_docs/core/functions.html#exp\"><span class=\"kw6\">exp</span></a><br/>    <span class=\"kw1\">case</span> <span class=\"st0\">\"q\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Q\"</span><br/>      <a href=\"http://falconpl.org/project_docs/core/functions.html#exit\"><span class=\"kw6\">exit</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">case</span> <span class=\"st0\">\"!\"</span><br/>      <span class=\"sy0\">&gt;</span> <span class=\"st0\">'Generating new numbers list'</span><br/>      num <span class=\"sy0\">=</span> genRandomNumbers<span class=\"br0\">(</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">default</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw3\">not</span> validInput<span class=\"br0\">(</span> <a href=\"http://falconpl.org/project_docs/core/functions.html#exp\"><span class=\"kw6\">exp</span></a> <span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw1\">continue</span><br/>\u00a0<br/>      answer <span class=\"sy0\">=</span> getAnswer<span class=\"br0\">(</span> <a href=\"http://falconpl.org/project_docs/core/functions.html#exp\"><span class=\"kw6\">exp</span></a> <span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span> answer <span class=\"sy0\">==</span> <span class=\"nu0\">24</span><br/>        <span class=\"sy0\">&gt;</span> <span class=\"st0\">\"By George you GOT IT! Your expression equals 24\"</span><br/>      <span class=\"kw1\">else</span><br/>        <span class=\"sy0\">&gt;</span> <span class=\"st0\">\"Ahh Sorry, So Sorry your answer of \"</span><span class=\"sy0\">,</span> answer<span class=\"sy0\">,</span> <span class=\"st0\">\" does not equal 24.\"</span><br/>      <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Fortran", "loc": 112, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> game_24<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">real</span>               <span class=\"sy0\">::</span> <span class=\"me2\">vector</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>, reals<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span>, <span class=\"kw3\">result</span>, a, b, c, d<br/>  <span class=\"kw3\">integer</span>            <span class=\"sy0\">::</span> <span class=\"me2\">numbers</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>, ascii<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span>, i<br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">11</span><span class=\"br0\">)</span>  <span class=\"sy0\">::</span> <span class=\"me2\">expression</span><br/>  <span class=\"kw3\">character</span>          <span class=\"sy0\">::</span> <span class=\"me2\">syntax</span><span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">! patterns:</span><br/>  <span class=\"kw3\">character</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">one</span><span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span>   <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"st0\">'('</span>,<span class=\"st0\">'('</span>,<span class=\"st0\">'1'</span>,<span class=\"st0\">'x'</span>,<span class=\"st0\">'1'</span>,<span class=\"st0\">')'</span>,<span class=\"st0\">'x'</span>,<span class=\"st0\">'1'</span>,<span class=\"st0\">')'</span>,<span class=\"st0\">'x'</span>,<span class=\"st0\">'1'</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">character</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">two</span><span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span>   <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"st0\">'('</span>,<span class=\"st0\">'1'</span>,<span class=\"st0\">'x'</span>,<span class=\"st0\">'('</span>,<span class=\"st0\">'1'</span>,<span class=\"st0\">'x'</span>,<span class=\"st0\">'1'</span>,<span class=\"st0\">')'</span>,<span class=\"st0\">')'</span>,<span class=\"st0\">'x'</span>,<span class=\"st0\">'1'</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">character</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">three</span><span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"st0\">'1'</span>,<span class=\"st0\">'x'</span>,<span class=\"st0\">'('</span>,<span class=\"st0\">'('</span>,<span class=\"st0\">'1'</span>,<span class=\"st0\">'x'</span>,<span class=\"st0\">'1'</span>,<span class=\"st0\">')'</span>,<span class=\"st0\">'x'</span>,<span class=\"st0\">'1'</span>,<span class=\"st0\">')'</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">character</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">four</span><span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span>  <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"st0\">'1'</span>,<span class=\"st0\">'x'</span>,<span class=\"st0\">'('</span>,<span class=\"st0\">'1'</span>,<span class=\"st0\">'x'</span>,<span class=\"st0\">'('</span>,<span class=\"st0\">'1'</span>,<span class=\"st0\">'x'</span>,<span class=\"st0\">'1'</span>,<span class=\"st0\">')'</span>,<span class=\"st0\">')'</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">character</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">five</span><span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span>  <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"st0\">'('</span>,<span class=\"st0\">'1'</span>,<span class=\"st0\">'x'</span>,<span class=\"st0\">'1'</span>,<span class=\"st0\">')'</span>,<span class=\"st0\">'x'</span>,<span class=\"st0\">'('</span>,<span class=\"st0\">'1'</span>,<span class=\"st0\">'x'</span>,<span class=\"st0\">'1'</span>,<span class=\"st0\">')'</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">call</span> <span class=\"kw4\">random_number</span><span class=\"br0\">(</span>vector<span class=\"br0\">)</span><br/>    numbers <span class=\"sy0\">=</span> <span class=\"nu0\">9</span> <span class=\"sy0\">*</span> vector <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    write <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Digits: '</span>,numbers<br/>    write <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(a)'</span>,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> <span class=\"st0\">'Your expression: '</span><br/>    read <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(a11)'</span><span class=\"br0\">)</span> expression<br/>\u00a0<br/>    forall <span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">11</span><span class=\"br0\">)</span> syntax<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> expression<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><br/>    ascii <span class=\"sy0\">=</span> <span class=\"kw4\">iachar</span><span class=\"br0\">(</span>syntax<span class=\"br0\">)</span><br/>    <span class=\"kw1\">where</span> <span class=\"br0\">(</span>syntax &gt;<span class=\"sy0\">=</span> <span class=\"st0\">'0'</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> syntax &lt;<span class=\"sy0\">=</span> <span class=\"st0\">'9'</span><span class=\"br0\">)</span><br/>      syntax <span class=\"sy0\">=</span> <span class=\"st0\">'1'</span>  <span class=\"co1\">! number</span><br/>    <span class=\"kw1\">elsewhere</span> <span class=\"br0\">(</span>syntax <span class=\"sy0\">==</span> <span class=\"st0\">'+'</span> <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> syntax <span class=\"sy0\">==</span> <span class=\"st0\">'-'</span> <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> syntax <span class=\"sy0\">==</span> <span class=\"st0\">'*'</span> <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> syntax <span class=\"sy0\">==</span> <span class=\"st0\">'/'</span><span class=\"br0\">)</span><br/>      syntax <span class=\"sy0\">=</span> <span class=\"st0\">'x'</span>  <span class=\"co1\">! op</span><br/>    <span class=\"kw1\">elsewhere</span> <span class=\"br0\">(</span>syntax <span class=\"sy0\">/=</span> <span class=\"st0\">'('</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> syntax <span class=\"sy0\">/=</span> <span class=\"st0\">')'</span><span class=\"br0\">)</span><br/>      syntax <span class=\"sy0\">=</span> <span class=\"st0\">'-'</span>  <span class=\"co1\">! error</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">where</span><br/>\u00a0<br/>    reals <span class=\"sy0\">=</span> <span class=\"kw3\">real</span><span class=\"br0\">(</span>ascii<span class=\"sy0\">-</span><span class=\"nu0\">48</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw4\">all</span><span class=\"br0\">(</span>syntax <span class=\"sy0\">==</span> one<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      a <span class=\"sy0\">=</span> reals<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>; b <span class=\"sy0\">=</span> reals<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>; c <span class=\"sy0\">=</span> reals<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>; d <span class=\"sy0\">=</span> reals<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">call</span> check_numbers<span class=\"br0\">(</span>a,b,c,d<span class=\"br0\">)</span><br/>      <span class=\"kw3\">result</span> <span class=\"sy0\">=</span> op<span class=\"br0\">(</span>op<span class=\"br0\">(</span>op<span class=\"br0\">(</span>a,<span class=\"nu0\">4</span>,b<span class=\"br0\">)</span>,<span class=\"nu0\">7</span>,c<span class=\"br0\">)</span>,<span class=\"nu0\">10</span>,d<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw4\">all</span><span class=\"br0\">(</span>syntax <span class=\"sy0\">==</span> two<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      a <span class=\"sy0\">=</span> reals<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>; b <span class=\"sy0\">=</span> reals<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>; c <span class=\"sy0\">=</span> reals<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>; d <span class=\"sy0\">=</span> reals<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">call</span> check_numbers<span class=\"br0\">(</span>a,b,c,d<span class=\"br0\">)</span><br/>      <span class=\"kw3\">result</span> <span class=\"sy0\">=</span> op<span class=\"br0\">(</span>op<span class=\"br0\">(</span>a,<span class=\"nu0\">3</span>,op<span class=\"br0\">(</span>b,<span class=\"nu0\">6</span>,c<span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"nu0\">10</span>,d<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw4\">all</span><span class=\"br0\">(</span>syntax <span class=\"sy0\">==</span> three<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      a <span class=\"sy0\">=</span> reals<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>; b <span class=\"sy0\">=</span> reals<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>; c <span class=\"sy0\">=</span> reals<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>; d <span class=\"sy0\">=</span> reals<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">call</span> check_numbers<span class=\"br0\">(</span>a,b,c,d<span class=\"br0\">)</span><br/>      <span class=\"kw3\">result</span> <span class=\"sy0\">=</span> op<span class=\"br0\">(</span>a,<span class=\"nu0\">2</span>,op<span class=\"br0\">(</span>op<span class=\"br0\">(</span>b,<span class=\"nu0\">6</span>,c<span class=\"br0\">)</span>,<span class=\"nu0\">9</span>,d<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw4\">all</span><span class=\"br0\">(</span>syntax <span class=\"sy0\">==</span> four<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      a <span class=\"sy0\">=</span> reals<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>; b <span class=\"sy0\">=</span> reals<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>; c <span class=\"sy0\">=</span> reals<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>; d <span class=\"sy0\">=</span> reals<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">call</span> check_numbers<span class=\"br0\">(</span>a,b,c,d<span class=\"br0\">)</span><br/>      <span class=\"kw3\">result</span> <span class=\"sy0\">=</span> op<span class=\"br0\">(</span>a,<span class=\"nu0\">2</span>,op<span class=\"br0\">(</span>b,<span class=\"nu0\">5</span>,op<span class=\"br0\">(</span>c,<span class=\"nu0\">8</span>,d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw4\">all</span><span class=\"br0\">(</span>syntax <span class=\"sy0\">==</span> five<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      a <span class=\"sy0\">=</span> reals<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>; b <span class=\"sy0\">=</span> reals<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>; c <span class=\"sy0\">=</span> reals<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>; d <span class=\"sy0\">=</span> reals<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">call</span> check_numbers<span class=\"br0\">(</span>a,b,c,d<span class=\"br0\">)</span><br/>      <span class=\"kw3\">result</span> <span class=\"sy0\">=</span> op<span class=\"br0\">(</span>op<span class=\"br0\">(</span>a,<span class=\"nu0\">3</span>,b<span class=\"br0\">)</span>,<span class=\"nu0\">6</span>,op<span class=\"br0\">(</span>c,<span class=\"nu0\">9</span>,d<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">stop</span> <span class=\"st0\">'Input string: incorrect syntax.'</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw4\">abs</span><span class=\"br0\">(</span>result<span class=\"sy0\">-</span><span class=\"nu0\">24.0</span><span class=\"br0\">)</span> &lt; <span class=\"kw4\">epsilon</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      write <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'You won!'</span><br/>    <span class=\"kw1\">else</span><br/>      write <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">'Your result ('</span>,<span class=\"kw3\">result</span>,<span class=\"st0\">') is incorrect!'</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>    write <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(a)'</span>,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> <span class=\"st0\">'Another one? [y/n] '</span><br/>    read <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(a1)'</span><span class=\"br0\">)</span> expression<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> expression<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'n'</span> <span class=\"kw2\">.<span class=\"me1\">or</span>.</span> expression<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'N'</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">stop</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>  <br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  pure <span class=\"kw3\">real</span> <span class=\"kw1\">function</span> op<span class=\"br0\">(</span>x,c,y<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">c</span><br/>    <span class=\"kw3\">real</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span>,y<br/>    <span class=\"kw1\">select</span> <span class=\"kw1\">case</span> <span class=\"br0\">(</span> <span class=\"kw4\">char</span><span class=\"br0\">(</span>ascii<span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>      <span class=\"kw1\">case</span> <span class=\"br0\">(</span><span class=\"st0\">'+'</span><span class=\"br0\">)</span><br/>        op <span class=\"sy0\">=</span> x<span class=\"sy0\">+</span>y<br/>      <span class=\"kw1\">case</span> <span class=\"br0\">(</span><span class=\"st0\">'-'</span><span class=\"br0\">)</span><br/>        op <span class=\"sy0\">=</span> x<span class=\"sy0\">-</span>y<br/>      <span class=\"kw1\">case</span> <span class=\"br0\">(</span><span class=\"st0\">'*'</span><span class=\"br0\">)</span><br/>        op <span class=\"sy0\">=</span> x<span class=\"sy0\">*</span>y<br/>      <span class=\"kw1\">case</span> <span class=\"br0\">(</span><span class=\"st0\">'/'</span><span class=\"br0\">)</span><br/>        op <span class=\"sy0\">=</span> x<span class=\"sy0\">/</span>y<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">select</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> op<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> check_numbers<span class=\"br0\">(</span>a,b,c,d<span class=\"br0\">)</span><br/>    <span class=\"kw3\">real</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span>,b,c,d<br/>    <span class=\"kw3\">integer</span>          <span class=\"sy0\">::</span> <span class=\"me2\">test</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    test <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"kw4\">nint</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>,<span class=\"kw4\">nint</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span>,<span class=\"kw4\">nint</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span>,<span class=\"kw4\">nint</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> Insertion_Sort<span class=\"br0\">(</span>numbers<span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> Insertion_Sort<span class=\"br0\">(</span>test<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw4\">any</span><span class=\"br0\">(</span>test <span class=\"sy0\">/=</span> numbers<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">stop</span> <span class=\"st0\">'You cheat\u00a0;-) (Incorrect numbers)'</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> check_numbers<br/>\u00a0<br/>  pure <span class=\"kw1\">subroutine</span> Insertion_Sort<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>                <span class=\"sy0\">::</span> <span class=\"me2\">temp</span>, i, j<br/>    <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">2</span>,<span class=\"kw4\">size</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>      j <span class=\"sy0\">=</span> i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      temp <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span> j&gt;<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> a<span class=\"br0\">(</span>j<span class=\"br0\">)</span>&gt;temp <span class=\"br0\">)</span><br/>        a<span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>        j <span class=\"sy0\">=</span> j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>      a<span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> temp<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> Insertion_Sort<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> game_24<br/>\u00a0</pre>"}, {"lang": "GAP", "loc": 91, "block": "<pre class=\"text highlighted_source\">Play24\u00a0:= function()<br/>\tlocal input, digits, line, c, chars, stack, stackptr, cur, p, q, ok, a, b, run;<br/>\tinput\u00a0:= InputTextUser();<br/>\trun\u00a0:= true;<br/>\twhile run do<br/>\t\tdigits\u00a0:= List([1 .. 4], n -&gt; Random(1, 9));<br/>\t\twhile true do<br/>\t\t\tDisplay(digits);<br/>\t\t\tline\u00a0:= ReadLine(input);<br/>\t\t\tline\u00a0:= Chomp(line);<br/>\t\t\tif line = \"end\" then<br/>\t\t\t\trun\u00a0:= false;<br/>\t\t\t\tbreak;<br/>\t\t\telif line = \"next\" then<br/>\t\t\t\tbreak;<br/>\t\t\telse<br/>\t\t\t\tok\u00a0:= true;<br/>\t\t\t\tstack\u00a0:= [ ];<br/>\t\t\t\tstackptr\u00a0:= 0;<br/>\t\t\t\tchars\u00a0:= \"123456789+-*/ \";<br/>\t\t\t\tcur\u00a0:= ShallowCopy(digits);<br/>\t\t\t\tfor c in line do<br/>\t\t\t\t\tif c = ' ' then<br/>\t\t\t\t\t\tcontinue;<br/>\t\t\t\t\tfi;<br/>\t\t\t\t\tp\u00a0:= Position(chars, c);<br/>\t\t\t\t\tif p = fail then<br/>\t\t\t\t\t\tok\u00a0:= false;<br/>\t\t\t\t\t\tbreak;<br/>\t\t\t\t\tfi;<br/>\t\t\t\t\tif p &lt; 10 then<br/>\t\t\t\t\t\tq\u00a0:= Position(cur, p);<br/>\t\t\t\t\t\tif q = fail then<br/>\t\t\t\t\t\t\tok\u00a0:= false;<br/>\t\t\t\t\t\t\tbreak;<br/>\t\t\t\t\t\tfi;<br/>\t\t\t\t\t\tUnbind(cur[q]);<br/>\t\t\t\t\t\tstackptr\u00a0:= stackptr + 1;<br/>\t\t\t\t\t\tstack[stackptr]\u00a0:= p;<br/>\t\t\t\t\telse<br/>\t\t\t\t\t\tif stackptr &lt; 2 then<br/>\t\t\t\t\t\t\tok\u00a0:= false;<br/>\t\t\t\t\t\t\tbreak;<br/>\t\t\t\t\t\tfi;<br/>\t\t\t\t\t\tb\u00a0:= stack[stackptr];<br/>\t\t\t\t\t\ta\u00a0:= stack[stackptr - 1];<br/>\t\t\t\t\t\tstackptr\u00a0:= stackptr - 1;<br/>\t\t\t\t\t\tif c = '+' then<br/>\t\t\t\t\t\t\ta\u00a0:= a + b;<br/>\t\t\t\t\t\telif c = '-' then<br/>\t\t\t\t\t\t\ta\u00a0:= a - b;<br/>\t\t\t\t\t\telif c = '*' then<br/>\t\t\t\t\t\t\ta\u00a0:= a * b;<br/>\t\t\t\t\t\telif c = '/' then<br/>\t\t\t\t\t\t\tif b = 0 then<br/>\t\t\t\t\t\t\t\tok\u00a0:= false;<br/>\t\t\t\t\t\t\t\tbreak;<br/>\t\t\t\t\t\t\tfi;<br/>\t\t\t\t\t\t\ta\u00a0:= a / b;<br/>\t\t\t\t\t\telse<br/>\t\t\t\t\t\t\tok\u00a0:= false;<br/>\t\t\t\t\t\t\tbreak;<br/>\t\t\t\t\t\tfi;<br/>\t\t\t\t\t\tstack[stackptr]\u00a0:= a;<br/>\t\t\t\t\tfi;<br/>\t\t\t\tod;<br/>\t\t\t\tif ok and stackptr = 1 and Size(cur) = 0 then<br/>\t\t\t\t\tif stack[1] = 24 then<br/>\t\t\t\t\t\tPrint(\"Good\u00a0!\\n\");<br/>\t\t\t\t\t\tbreak;<br/>\t\t\t\t\telse<br/>\t\t\t\t\t\tPrint(\"Bad value: \", stack[1], \"\\n\");<br/>\t\t\t\t\t\tcontinue;<br/>\t\t\t\t\tfi;<br/>\t\t\t\tfi;<br/>\t\t\t\tPrint(\"Invalid expression\\n\");<br/>\t\t\tfi;<br/>\t\tod;<br/>\tod;<br/>\tCloseStream(input);<br/>end;<br/>\u00a0<br/># example session<br/># type \"end\" to quit the game, \"next\" to try another list of digits<br/>gap&gt; Play24();<br/>[ 7, 6, 8, 5 ]<br/>86*75-/<br/>Good\u00a0!<br/>[ 5, 9, 2, 7 ]<br/>end<br/>gap&gt;</pre>"}, {"lang": "Go", "loc": 68, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    rand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>Unix<span class=\"sy1\">())</span><br/>    n <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>rune<span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> n <span class=\"sy1\">{</span><br/>        n<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> rune<span class=\"sy1\">(</span>rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"nu0\">9</span><span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"st0\">'1'</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"Your numbers:\u00a0%c<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Print</span><span class=\"sy1\">(</span><span class=\"st0\">\"Enter RPN: \"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">var</span> expr <span class=\"kw4\">string</span><br/>    fmt<span class=\"sy3\">.</span>Scan<span class=\"sy1\">(</span>&amp;expr<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>expr<span class=\"sy1\">)</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">7</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"invalid. expression length must be 7.\"</span> <span class=\"sy3\">+</span><br/>            <span class=\"st0\">\" (4 numbers, 3 operators, no spaces)\"</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    stack <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">float64</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> expr <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> r &gt;<span class=\"sy2\">=</span> <span class=\"st0\">'0'</span> <span class=\"sy3\">&amp;&amp;</span> r <span class=\"sy3\">&lt;=</span> <span class=\"st0\">'9'</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>n<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"too many numbers.\"</span><span class=\"sy1\">)</span><br/>                <span class=\"kw1\">return</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>            <span class=\"kw1\">for</span> n<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">!=</span> r <span class=\"sy1\">{</span><br/>                <span class=\"nu2\">i</span><span class=\"sy2\">++</span><br/>                <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> <span class=\"sy3\">==</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>n<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"wrong numbers.\"</span><span class=\"sy1\">)</span><br/>                    <span class=\"kw1\">return</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>            n <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>n<span class=\"sy1\">[:</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> n<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span><span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>            stack <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>stack<span class=\"sy1\">,</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>r<span class=\"sy3\">-</span><span class=\"st0\">'0'</span><span class=\"sy1\">))</span><br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>stack<span class=\"sy1\">)</span> &lt; <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"invalid expression syntax.\"</span><span class=\"sy1\">)</span><br/>            <span class=\"kw1\">return</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">switch</span> r <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">case</span> <span class=\"st0\">'+'</span><span class=\"sy1\">:</span><br/>            stack<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>stack<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"sy2\">+=</span> stack<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>stack<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>        <span class=\"kw1\">case</span> <span class=\"st0\">'-'</span><span class=\"sy1\">:</span><br/>            stack<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>stack<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"sy2\">-=</span> stack<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>stack<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>        <span class=\"kw1\">case</span> <span class=\"st0\">'*'</span><span class=\"sy1\">:</span><br/>            stack<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>stack<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"sy2\">*=</span> stack<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>stack<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>        <span class=\"kw1\">case</span> <span class=\"st0\">'/'</span><span class=\"sy1\">:</span><br/>            stack<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>stack<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"sy2\">/=</span> stack<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>stack<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>        <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%c invalid.<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> r<span class=\"sy1\">)</span><br/>            <span class=\"kw1\">return</span><br/>        <span class=\"sy1\">}</span><br/>        stack <span class=\"sy2\">=</span> stack<span class=\"sy1\">[:</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>stack<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> math<span class=\"sy3\">.</span>Abs<span class=\"sy1\">(</span>stack<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">-</span><span class=\"nu0\">24</span><span class=\"sy1\">)</span> &gt; 1e<span class=\"sy3\">-</span><span class=\"nu0\">6</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"incorrect.\"</span><span class=\"sy1\">,</span> stack<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> <span class=\"st0\">\"!= 24\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"correct.\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Gosu", "loc": 107, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>uses java.lang.Double<br/>uses java.lang.Integer<br/>uses java.util.ArrayList<br/>uses java.util.List<br/>uses java.util.Scanner<br/>uses java.util.Stack<br/>\u00a0<br/>function doEval( scanner\u00a0: Scanner, allowed\u00a0: List&lt;Integer&gt; )\u00a0: double {<br/>    var stk = new Stack&lt;Double&gt;()<br/>\u00a0<br/>    while( scanner.hasNext() ) {<br/>        if( scanner.hasNextInt() ) {<br/>            var n = scanner.nextInt()<br/>\u00a0<br/>            // Make sure they're allowed to use n<br/>            if( n &lt;= 0 || n &gt;= 10 ) {<br/>                print( n + \" isn't allowed\" )<br/>                return 0<br/>            }<br/>            var idx = allowed.indexOf( n )<br/>            if( idx == -1 ) {<br/>                print( \"You aren't allowed to use so many \" + n + \"s!\" )<br/>                return 0<br/>            }<br/>\u00a0<br/>            // Add the input number to the stack<br/>            stk.push( new Double( n ) )<br/>\u00a0<br/>            // Mark n as used<br/>            allowed.remove( idx )<br/>        } else {<br/>            // It has to be an operator...<br/>            if( stk.size() &lt; 2 ) {<br/>                print( \"Invalid Expression: Stack underflow!\" )<br/>                return 0<br/>            }<br/>\u00a0<br/>            // Gets the next operator as a single character token<br/>            var s = scanner.next(\"[\\\\+-/\\\\*]\")<br/>\u00a0<br/>            // Get the operands<br/>            var r = stk.pop().doubleValue()<br/>            var l = stk.pop().doubleValue()<br/>\u00a0<br/>            // Determine which operator and invoke it<br/>            if( s.equals( \"+\" ) ) {<br/>                stk.push( new Double( l + r ) )<br/>            } else if( s.equals( \"-\" ) ) {<br/>                stk.push( new Double( l - r ) )<br/>            } else if( s.equals( \"*\" ) ) {<br/>                stk.push( new Double( l * r ) )<br/>            } else if( s.equals( \"/\" ) ) {<br/>                if( r == 0.0 ) {<br/>                    print( \"Invalid Expression: Division by zero!\" )<br/>                    return 0<br/>                }<br/>                stk.push( new Double( l / r ) )<br/>            } else {<br/>                print( \"Internal Error: looking for operator yielded '\" + s + \"'\" )<br/>                return 0<br/>            }<br/>        }<br/>    }<br/>\u00a0<br/>    // Did they skip any numbers?<br/>    if( allowed.size()\u00a0!= 0 ) {<br/>        print( \"You didn't use ${allowed}\" )<br/>        return 0<br/>    }<br/>\u00a0<br/>    // Did they use enough operators?<br/>    if( stk.size()\u00a0!= 1 ) {<br/>        print( \"Invalid Expression: Not enough operators!\" )<br/>        return 0<br/>    }<br/>\u00a0<br/>    return stk.pop().doubleValue()<br/>}<br/>\u00a0<br/>// Pick 4 random numbers from [1..9]<br/>var nums = new ArrayList&lt;Integer&gt;()<br/>var gen = new java.util.Random( new java.util.Date().getTime() )<br/>for( i in 0..3 ) {<br/>    nums.add( gen.nextInt(9) + 1 )<br/>}<br/>\u00a0<br/>// Prompt the user<br/>print( \"Using addition, subtraction, multiplication and division, write an\" )<br/>print( \"expression that evaluates to 24 using\" )<br/>print( \"${nums.get(0)}, ${nums.get(1)}, ${nums.get(2)} and ${nums.get(3)}\" )<br/>print( \"\" )<br/>print( \"Please enter your expression in RPN\" )<br/>\u00a0<br/>// Build a tokenizer over a line of input<br/>var sc = new Scanner( new java.io.BufferedReader( new java.io.InputStreamReader( java.lang.System.in ) ).readLine() )<br/>\u00a0<br/>// eval the expression<br/>var val = doEval( sc, nums )<br/>\u00a0<br/>// winner?<br/>if( java.lang.Math.abs( val - 24.0 ) &lt; 0.001 ) {<br/>    print( \"You win!\" )<br/>} else {<br/>    print( \"You lose!\" )<br/>}<br/>\u00a0</pre>"}, {"lang": "Groovy", "loc": 67, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> random <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=Random&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> input <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Scanner<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=System&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">System</span></a>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20in\"><span class=\"kw1\">in</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> evaluate <span class=\"sy0\">=</span> <span class=\"br0\">{</span> expr <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>expr <span class=\"sy0\">==</span> <span class=\"st0\">'QUIT'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> <span class=\"st0\">'QUIT'</span><br/>    <span class=\"br0\">}</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20else\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20try\"><span class=\"kw2\">try</span></a> <span class=\"br0\">{</span> Eval.<span class=\"me1\">me</span><span class=\"br0\">(</span>expr.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span>/<span class=\"br0\">(</span>\\d<span class=\"br0\">)</span>/, <span class=\"st0\">'$1.0'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20catch\"><span class=\"kw2\">catch</span></a> <span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"st0\">'syntax error'</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> readGuess <span class=\"sy0\">=</span> <span class=\"br0\">{</span> digits <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true\"><span class=\"kw2\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20print\"><span class=\"kw8\">print</span></a> <span class=\"st0\">\"Enter your guess using ${digits} (q to quit): \"</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> expr <span class=\"sy0\">=</span> input.<span class=\"me1\">nextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20switch\"><span class=\"kw1\">switch</span></a> <span class=\"br0\">(</span>expr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> ~/^<span class=\"br0\">[</span>qQ<span class=\"br0\">]</span>.<span class=\"sy0\">*</span>/:<br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> <span class=\"st0\">'QUIT'</span><br/>\u00a0<br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> ~/.<span class=\"sy0\">*</span><span class=\"br0\">[</span>^\\d\\s\\<span class=\"sy0\">+</span>\\<span class=\"sy0\">*</span>\\/\\<span class=\"br0\">(</span>\\<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"br0\">]</span>.<span class=\"sy0\">*</span>/:<br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> badChars <span class=\"sy0\">=</span> expr.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span>~/<span class=\"br0\">[</span>\\d\\s\\<span class=\"sy0\">+</span>\\<span class=\"sy0\">*</span>\\/\\<span class=\"br0\">(</span>\\<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"br0\">]</span>/, <span class=\"st0\">''</span><span class=\"br0\">)</span><br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"invalid characters in input: ${(badChars as List) as Set}\"</span><br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>\u00a0<br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"br0\">{</span> <span class=\"br0\">(</span>it.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span>~/\\D/, <span class=\"st0\">''</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20sort\"><span class=\"kw5\">sort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>digits<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20sort\"><span class=\"kw5\">sort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>:<br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">'''you didn't use the right digits'''</span><br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>\u00a0<br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> ~/.<span class=\"sy0\">*</span>\\d\\d.<span class=\"sy0\">*</span>/:<br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">'no multi-digit numbers allowed'</span><br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>\u00a0<br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20default\"><span class=\"kw2\">default</span></a>:<br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> expr<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> digits <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">4</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> <span class=\"br0\">(</span>random.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true\"><span class=\"kw2\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> guess <span class=\"sy0\">=</span> readGuess<span class=\"br0\">(</span>digits<span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> result <span class=\"sy0\">=</span> evaluate<span class=\"br0\">(</span>guess<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20switch\"><span class=\"kw1\">switch</span></a> <span class=\"br0\">(</span>result<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"st0\">'QUIT'</span>:<br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">'Awwww. Maybe next time?'</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a><br/>\u00a0<br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"nu0\">24</span>:<br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">'Yes! You got it.'</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a><br/>\u00a0<br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"st0\">'syntax error'</span>:<br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"A ${result} was found in ${guess}\"</span> <br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>\u00a0<br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20default\"><span class=\"kw2\">default</span></a>:<br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"Nope: ${guess} == ${result}, not 24\"</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">'One more try, then?'</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 53, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>sort<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"br0\">(</span>isDigit<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">(</span>fromJust<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>foldM<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random <span class=\"br0\">(</span>randomRs<span class=\"sy0\">,</span> getStdGen<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span>hSetBuffering<span class=\"sy0\">,</span> stdout<span class=\"sy0\">,</span> BufferMode<span class=\"br0\">(</span>NoBuffering<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  hSetBuffering stdout NoBuffering<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a><br/>    <span class=\"br0\">[</span> <span class=\"st0\">\"THE 24 GAME<span class=\"es0\">\\n</span>\"</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"Given four digits in the range 1 to 9\"</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"Use the +, -, *, and / operators in reverse polish notation\"</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"To show how to make an answer of 24.<span class=\"es0\">\\n</span>\"</span><br/>    <span class=\"br0\">]</span><br/>  digits <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span>sort <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">4</span> <span class=\"sy0\">.</span> randomRs <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span> getStdGen <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"Your digits: \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unwords\"><span class=\"kw3\">unwords</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> digits<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  guessLoop digits<br/>  <span class=\"kw1\">where</span><br/>    guessLoop digits <span class=\"sy0\">=</span><br/>      <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"st0\">\"Your expression: \"</span> <span class=\"sy0\">&gt;&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span>processGuess digits <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:words\"><span class=\"kw3\">words</span></a><span class=\"br0\">)</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:getLine\"><span class=\"kw3\">getLine</span></a> <span class=\"sy0\">&gt;&gt;=</span><br/>      <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:either\"><span class=\"kw3\">either</span></a> <span class=\"br0\">(</span>\\m <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> m <span class=\"sy0\">&gt;&gt;</span> guessLoop digits<span class=\"br0\">)</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a><br/>\u00a0<br/>processGuess <span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> Right <span class=\"st0\">\"\"</span><br/>processGuess digits xs<br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not\"><span class=\"kw3\">not</span></a> matches <span class=\"sy0\">=</span> Left <span class=\"st0\">\"Wrong digits used\"</span><br/>  <span class=\"kw1\">where</span><br/>    matches <span class=\"sy0\">=</span> digits <span class=\"sy0\">==</span> <span class=\"br0\">(</span>sort <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all\"><span class=\"kw3\">all</span></a> isDigit<span class=\"br0\">)</span> xs<span class=\"br0\">)</span><br/>processGuess digits xs <span class=\"sy0\">=</span> calc xs <span class=\"sy0\">&gt;&gt;=</span> check<br/>  <span class=\"kw1\">where</span><br/>    check <span class=\"nu0\">24</span> <span class=\"sy0\">=</span> Right <span class=\"st0\">\"Correct\"</span><br/>    check x <span class=\"sy0\">=</span> Left <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromRational\"><span class=\"kw3\">fromRational</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Rational\"><span class=\"kw4\">Rational</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">++</span> <span class=\"st0\">\" is wrong\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- A Reverse Polish Notation calculator with full error handling</span><br/>calc xs <span class=\"sy0\">=</span><br/>  foldM simplify <span class=\"br0\">[</span><span class=\"br0\">]</span> xs <span class=\"sy0\">&gt;&gt;=</span><br/>  \\ns <span class=\"sy0\">-&gt;</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">case</span> ns <span class=\"kw1\">of</span><br/>        <span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> Right n<br/>        <span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> Left <span class=\"st0\">\"Too few operators\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>simplify <span class=\"br0\">(</span>a:b:ns<span class=\"br0\">)</span> s<br/>  <span class=\"sy0\">|</span> isOp s <span class=\"sy0\">=</span> Right <span class=\"br0\">(</span><span class=\"br0\">(</span>fromJust <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lookup\"><span class=\"kw3\">lookup</span></a> s ops<span class=\"br0\">)</span> b a\u00a0: ns<span class=\"br0\">)</span><br/>simplify <span class=\"sy0\">_</span> s<br/>  <span class=\"sy0\">|</span> isOp s <span class=\"sy0\">=</span> Left <span class=\"br0\">(</span><span class=\"st0\">\"Too few values before \"</span> <span class=\"sy0\">++</span> s<span class=\"br0\">)</span><br/>simplify ns s<br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all\"><span class=\"kw3\">all</span></a> isDigit s <span class=\"sy0\">=</span> Right <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> s<span class=\"br0\">)</span>\u00a0: ns<span class=\"br0\">)</span><br/>simplify <span class=\"sy0\">_</span> s <span class=\"sy0\">=</span> Left <span class=\"br0\">(</span><span class=\"st0\">\"Unrecognized symbol: \"</span> <span class=\"sy0\">++</span> s<span class=\"br0\">)</span><br/>\u00a0<br/>isOp v <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a> v <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> ops<br/>\u00a0<br/>ops <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"st0\">\"*\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"st0\">\"/\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span></pre>"}, {"lang": "HicEst", "loc": 35, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">DIMENSION</span> digits<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> input_digits<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> difference<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"kw1\">CHARACTER</span> expression<span class=\"sy1\">*</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span> prompt<span class=\"sy1\">*</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span> answers<span class=\"sy1\">=</span><span class=\"st0\">'Wrong,Correct,'</span><span class=\"sy1\">,</span> protocol<span class=\"sy1\">=</span><span class=\"st0\">'24 game.txt'</span><br/>\u00a0<br/><span class=\"nu0\">1</span>  digits <span class=\"sy1\">=</span> <span class=\"kw1\">CEILING</span><span class=\"br0\">(</span> <span class=\"kw1\">RAN</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"nu0\">2</span>  <span class=\"kw1\">DLG</span><span class=\"br0\">(</span><span class=\"kw1\">Edit</span><span class=\"sy1\">=</span>expression<span class=\"sy1\">,</span> Text<span class=\"sy1\">=</span>digits<span class=\"sy1\">,</span> TItle<span class=\"sy1\">=</span>prompt<span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">READ</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>expression<span class=\"sy1\">,</span> ItemS<span class=\"sy1\">=</span>n<span class=\"br0\">)</span> input_digits<br/>   <span class=\"kw1\">IF</span><span class=\"br0\">(</span>n <span class=\"sy1\">==</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>     <span class=\"kw1\">ALIAS</span><span class=\"br0\">(</span>input_digits<span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>  input<span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">SORT</span><span class=\"br0\">(</span>Vector<span class=\"sy1\">=</span>digits<span class=\"sy1\">,</span> Sorted<span class=\"sy1\">=</span>digits<span class=\"br0\">)</span><br/>     <span class=\"kw1\">SORT</span><span class=\"br0\">(</span>Vector<span class=\"sy1\">=</span>input<span class=\"sy1\">,</span> Sorted<span class=\"sy1\">=</span>input<span class=\"br0\">)</span><br/>     difference <span class=\"sy1\">=</span> <span class=\"kw1\">ABS</span><span class=\"br0\">(</span>digits <span class=\"sy1\">-</span> input<span class=\"br0\">)</span><br/>     <span class=\"kw1\">IF</span><span class=\"br0\">(</span> <span class=\"kw1\">SUM</span><span class=\"br0\">(</span>difference<span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>       <span class=\"kw1\">EDIT</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>expression<span class=\"sy1\">,</span> ScaNnot<span class=\"sy1\">=</span><span class=\"st0\">'123456789+-*/ ()'</span><span class=\"sy1\">,</span> GetPos<span class=\"sy1\">=</span>i<span class=\"sy1\">,</span> CoPyto<span class=\"sy1\">=</span>prompt<span class=\"br0\">)</span><br/>       <span class=\"kw1\">IF</span><span class=\"br0\">(</span> i <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>         prompt <span class=\"sy1\">=</span> TRIM<span class=\"br0\">(</span>expression<span class=\"br0\">)</span> <span class=\"sy1\">//</span> <span class=\"st0\">': '</span> <span class=\"sy1\">//</span>TRIM<span class=\"br0\">(</span>prompt<span class=\"br0\">)</span> <span class=\"sy1\">//</span> <span class=\"st0\">' is an illegal character'</span><br/>       <span class=\"kw1\">ELSE</span><br/>         prompt <span class=\"sy1\">=</span> TRIM<span class=\"br0\">(</span>expression<span class=\"br0\">)</span> <span class=\"sy1\">//</span> <span class=\"st0\">': Syntax error'</span><br/>         result <span class=\"sy1\">=</span> <span class=\"kw1\">XEQ</span><span class=\"br0\">(</span>expression<span class=\"sy1\">,</span> <span class=\"sy1\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">! on error branch to label 2</span><br/>         <span class=\"kw1\">EDIT</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>answers<span class=\"sy1\">,</span> ITeM<span class=\"sy1\">=</span><span class=\"br0\">(</span>result<span class=\"sy1\">==</span><span class=\"nu0\">24</span><span class=\"br0\">)</span><span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> Parse<span class=\"sy1\">=</span>answer<span class=\"br0\">)</span><br/>         <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>prompt<span class=\"sy1\">,</span> Name<span class=\"br0\">)</span> TRIM<span class=\"br0\">(</span>expression<span class=\"br0\">)</span><span class=\"sy1\">//</span><span class=\"st0\">': '</span><span class=\"sy1\">,</span> answer<span class=\"sy1\">,</span> result<br/>       <span class=\"kw1\">ENDIF</span><br/>     <span class=\"kw1\">ELSE</span><br/>       <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>prompt<span class=\"br0\">)</span> TRIM<span class=\"br0\">(</span>expression<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">': You used '</span><span class=\"sy1\">,</span> input<span class=\"sy1\">,</span> <span class=\"st0\">' instead '</span><span class=\"sy1\">,</span> digits<br/>     <span class=\"kw1\">ENDIF</span><br/>   <span class=\"kw1\">ELSE</span><br/>     prompt <span class=\"sy1\">=</span> TRIM<span class=\"br0\">(</span>expression<span class=\"br0\">)</span> <span class=\"sy1\">//</span> <span class=\"st0\">': Instead 4 digits you used '</span> <span class=\"sy1\">//</span> n<br/>   <span class=\"kw1\">ENDIF</span><br/>\u00a0<br/>   <span class=\"kw1\">OPEN</span><span class=\"br0\">(</span>FIle<span class=\"sy1\">=</span>protocol<span class=\"sy1\">,</span> APPend<span class=\"br0\">)</span><br/>   <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>FIle<span class=\"sy1\">=</span>protocol<span class=\"sy1\">,</span> CLoSe<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> prompt<br/>\u00a0<br/>   <span class=\"kw1\">DLG</span><span class=\"br0\">(</span>TItle<span class=\"sy1\">=</span>prompt<span class=\"sy1\">,</span> Button<span class=\"sy1\">=</span><span class=\"st0\">'&gt;2:Try again'</span><span class=\"sy1\">,</span> B<span class=\"sy1\">=</span><span class=\"st0\">'&gt;1:New game'</span><span class=\"sy1\">,</span> B<span class=\"sy1\">=</span><span class=\"st0\">'Quit'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">END</span></pre>"}, {"lang": "Huginn", "loc": 54, "block": "<pre class=\"text highlighted_source\">#! /bin/sh<br/>exec huginn --no-argv -E \"${0}\"<br/>#! huginn<br/>\u00a0<br/>import Algorithms as algo;<br/>import Mathematics as math;<br/>import RegularExpressions as re;<br/>\u00a0<br/>make_game( rndGen_ ) {<br/>  board = \"\";<br/>  for ( i\u00a0: algo.range( 4 ) ) {<br/>    board += ( \" \" + string( character( rndGen_.next() + integer( '1' ) ) ) );<br/>  }<br/>  return ( board.strip() );<br/>}<br/>\u00a0<br/>main() {<br/>  rndGen = math.randomizer( 9 );<br/>  no = 0;<br/>  dd = re.compile( \"\\\\d\\\\d\" );<br/>  while ( true ) {<br/>    no += 1;<br/>    board = make_game( rndGen );<br/>    print( \"Your four digits: {}\\nExpression {}: \".format( board, no ) );<br/>    line = input();<br/>    if ( line == none ) {<br/>      print( \"\\n\" );<br/>      break;<br/>    }<br/>    line = line.strip();<br/>    try {<br/>      if ( line == \"q\" ) {<br/>        break;<br/>      }<br/>      if ( ( pos = line.find_other_than( \"{}+-*/() \".format( board ) ) ) &gt;= 0 ) {<br/>        print( \"Invalid input found at: {}, `{}`\\n\".format( pos, line ) );<br/>        continue;<br/>      }<br/>      if ( dd.match( line ).matched() ) {<br/>        print( \"Digit concatenation is forbidden.\\n\" );<br/>        continue;<br/>      }<br/>      res = real( line );<br/>      if ( res == 24.0 ) {<br/>        print( \"Thats right!\\n\" );<br/>      } else {<br/>        print( \"Bad answer!\\n\" );<br/>      }<br/>    } catch ( Exception e ) {<br/>      print( \"Not an expression: {}\\n\".format( e.what() ) );<br/>    }<br/>  }<br/>  return ( 0 );<br/>}</pre>"}, {"lang": "Icon and Unicon", "loc": 58, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">invocable</span> all <br/><span class=\"kw1\">link</span> strings   <span class=\"co1\"># for csort, deletec</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>help<span class=\"br0\">(</span><span class=\"br0\">)</span>  <br/><span class=\"kw1\">repeat</span> <span class=\"br0\">{</span> <br/>   <span class=\"kw1\">every</span> <span class=\"br0\">(</span>n <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy1\">||:=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"kw4\">string</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">+?</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\"Your four digits are\u00a0: \"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"sy1\">!</span>n<span class=\"sy1\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>   e <span class=\"sy1\">:=</span> <span class=\"kw4\">trim</span><span class=\"br0\">(</span><span class=\"kw4\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw1\">fail</span><br/>   <span class=\"kw1\">case</span> e <span class=\"kw1\">of</span> <span class=\"br0\">{</span><br/>      <span class=\"st0\">\"q\"</span><span class=\"sy1\">|</span><span class=\"st0\">\"quit\"</span><span class=\"sy1\">:</span> <span class=\"kw1\">return</span><br/>      <span class=\"st0\">\"?\"</span><span class=\"sy1\">|</span><span class=\"st0\">\"help\"</span><span class=\"sy1\">:</span> help<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">default</span><span class=\"sy1\">:</span> <span class=\"br0\">{</span><br/>         e <span class=\"sy1\">:=</span> deletec<span class=\"br0\">(</span>e<span class=\"sy1\">,</span><span class=\"st0\">' <span class=\"es0\">\\t</span>'</span><span class=\"br0\">)</span>         <span class=\"co1\"># no whitespace</span><br/>         d <span class=\"sy1\">:=</span> deletec<span class=\"br0\">(</span>e<span class=\"sy1\">,~&amp;</span><span class=\"kw3\">digits</span><span class=\"br0\">)</span>      <span class=\"co1\"># just digits</span><br/>         <span class=\"kw1\">if</span> csort<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy1\">~==</span> csort<span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"co1\"># and only the 4 given digits</span><br/>            <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Invalid repsonse.\"</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"kw1\">next</span> <br/>\u00a0<br/>         <span class=\"kw1\">if</span> e <span class=\"sy1\">?</span> <span class=\"br0\">(</span>ans <span class=\"sy1\">:=</span> eval<span class=\"br0\">(</span>E<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw4\">pos</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"co1\"># parse and evaluate</span><br/>            <span class=\"kw1\">if</span> ans <span class=\"sy1\">=</span> <span class=\"nu0\">24</span> <span class=\"kw1\">then</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Congratulations you win!\"</span><span class=\"br0\">)</span> <br/>            <span class=\"kw1\">else</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Your answer was \"</span><span class=\"sy1\">,</span>ans<span class=\"sy1\">,</span><span class=\"st0\">\". Try again.\"</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">else</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Invalid expression.\"</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> eval<span class=\"br0\">(</span>X<span class=\"br0\">)</span>    <span class=\"co1\">#: return the evaluated AST</span><br/>   <span class=\"kw1\">if</span> <span class=\"kw4\">type</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"st0\">\"list\"</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>      x <span class=\"sy1\">:=</span> eval<span class=\"br0\">(</span><span class=\"kw4\">get</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">while</span> x <span class=\"sy1\">:=</span> <span class=\"kw4\">get</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">real</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw4\">real</span><span class=\"br0\">(</span>eval<span class=\"br0\">(</span><span class=\"kw4\">get</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"Malformed expression.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"sy1\">\\</span>x <span class=\"sy1\">|</span> X<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> E<span class=\"br0\">(</span><span class=\"br0\">)</span>    <span class=\"co1\">#: expression</span><br/>   <span class=\"kw4\">put</span><span class=\"br0\">(</span>lex <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"kw7\">T</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">while</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>lex<span class=\"sy1\">,</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">any</span><span class=\"br0\">(</span><span class=\"st0\">'+-*/'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw4\">put</span><span class=\"br0\">(</span>lex<span class=\"sy1\">,</span><span class=\"kw7\">T</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/>   <span class=\"kw1\">suspend</span> <span class=\"kw1\">if</span> <span class=\"sy1\">*</span>lex <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> lex<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">else</span> lex     <span class=\"co1\"># strip useless []  </span><br/><span class=\"kw1\">end</span>   <br/>\u00a0<br/><span class=\"kw1\">procedure</span> <span class=\"kw7\">T</span><span class=\"br0\">(</span><span class=\"br0\">)</span>                   <span class=\"co1\">#: Term</span><br/>   <span class=\"kw1\">suspend</span> <span class=\"nu0\">2</span><span class=\"br0\">(</span><span class=\"sy1\">=</span><span class=\"st0\">\"(\"</span><span class=\"sy1\">,</span> E<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"sy1\">=</span><span class=\"st0\">\")\"</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"co1\"># parenthesized subexpression, or ...</span><br/>       <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">any</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">digits</span><span class=\"br0\">)</span><span class=\"br0\">)</span>        <span class=\"co1\"># just a value</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> help<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">return</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><br/>   <span class=\"st0\">\"Welcome to 24<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>   <span class=\"st0\">\"Combine the 4 given digits to make 24 using only + - * / and ( ).<span class=\"es0\">\\n</span> \"</span><span class=\"sy1\">,</span><br/>   <span class=\"st0\">\"All operations have equal precedence and are evaluated left to right.<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>   <span class=\"st0\">\"Combining (concatenating) digits is not allowed.<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>   <span class=\"st0\">\"Enter 'help', 'quit', or an expression.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>  <br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 11, "block": "<pre class=\"j highlighted_source\">require<span class=\"st_h\">'misc'</span><br/>deal=: <span class=\"nu0\">1</span> +\u00a0? bind <span class=\"nu0\">9</span> <span class=\"nu0\">9</span> <span class=\"nu0\">9</span> <span class=\"nu0\">9</span><br/>rules=: smoutput bind <span class=\"st_h\">'see http://en.wikipedia.org/wiki/24_Game'</span><br/>input=: prompt @ <span class=\"sy0\">(</span><span class=\"st_h\">'enter 24 expression using '</span>, \":, <span class=\"st_h\">': '</span>\"<span class=\"nu0\">_</span><span class=\"sy0\">)</span><br/>\u00a0<br/>wellformed=: <span class=\"sy0\">(</span><span class=\"st_h\">' '</span>&lt;;.<span class=\"nu0\">_1</span>@, \":@[<span class=\"sy0\">)</span> -:&amp;<span class=\"sy0\">(</span>/:~<span class=\"sy0\">)</span>  <span class=\"st_h\">'(+-*%)'</span> -.&amp;;:~ ]<br/>is24=: <span class=\"nu0\">24</span> -: \".\u00a0::0:@]<br/>\u00a0<br/>respond=: <span class=\"sy0\">(</span>;:<span class=\"st_h\">'no yes'</span><span class=\"sy0\">)</span> {::~ wellformed * is24<br/>\u00a0<br/>game24=: <span class=\"sy0\">(</span>respond input<span class=\"sy0\">)</span>@<a class=\"__cf_email__\" data-cfemail=\"462223272a0634332a2335\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></pre>"}, {"lang": "Java", "loc": 62, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Game24 <span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a> r <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> digits <span class=\"sy0\">=</span> randomDigits<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Scanner in <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Scanner<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">in</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Make 24 using these digits: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>digits<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"&gt; \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Stack<span class=\"sy0\">&lt;</span>Float<span class=\"sy0\">&gt;</span> s <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Stack<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">long</span> total <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> c <span class=\"sy0\">:</span> in.<span class=\"me1\">nextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"st0\">'0'</span> <span class=\"sy0\">&lt;=</span> c <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'9'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> d <span class=\"sy0\">=</span> c <span class=\"sy0\">-</span> <span class=\"st0\">'0'</span><span class=\"sy0\">;</span><br/>                total <span class=\"sy0\">+=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>d <span class=\"sy0\">*</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                s.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">float</span><span class=\"br0\">)</span> d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"st0\">\"+/-*\"</span>.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                s.<span class=\"me1\">push</span><span class=\"br0\">(</span>applyOperator<span class=\"br0\">(</span>s.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, s.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tallyDigits<span class=\"br0\">(</span>digits<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> total<span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Not the same digits. \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">abs</span><span class=\"br0\">(</span><span class=\"nu0\">24</span> <span class=\"sy0\">-</span> s.<span class=\"me1\">peek</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> 0.001F<span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Correct!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Not correct.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">float</span> applyOperator<span class=\"br0\">(</span><span class=\"kw4\">float</span> a, <span class=\"kw4\">float</span> b, <span class=\"kw4\">char</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'+'</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">return</span> a <span class=\"sy0\">+</span> b<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'-'</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">return</span> b <span class=\"sy0\">-</span> a<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'*'</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">return</span> a <span class=\"sy0\">*</span> b<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'/'</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">return</span> b <span class=\"sy0\">/</span> a<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afloat+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Float</span></a>.<span class=\"me1\">NaN</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">long</span> tallyDigits<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">long</span> total <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            total <span class=\"sy0\">+=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> total<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> randomDigits<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>        <br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> result <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            result<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> r.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 53, "block": "<pre class=\"javascript highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> twentyfour<span class=\"br0\">(</span>numbers<span class=\"sy0\">,</span> input<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> invalidChars <span class=\"sy0\">=</span> <span class=\"co2\">/[^\\d\\+\\*\\/\\s-\\(\\)]/</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> validNums <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// Create a duplicate of our input numbers, so that</span><br/>        <span class=\"co1\">// both lists will be sorted.</span><br/>        <span class=\"kw1\">var</span> mnums <span class=\"sy0\">=</span> numbers.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        mnums.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Sort after mapping to numbers, to make comparisons valid.</span><br/>        <span class=\"kw1\">return</span> str.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"co2\">/[^\\d\\s]/g</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">trim</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"co2\">/\\s+/</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> parseInt<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">every</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> v <span class=\"sy0\">===</span> mnums<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> validEval <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>input<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> eval<span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">{</span>error<span class=\"sy0\">:</span> e.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>input.<span class=\"me1\">trim</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"You must enter a value.\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>input.<span class=\"me1\">match</span><span class=\"br0\">(</span>invalidChars<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"Invalid chars used, try again. Use only:<span class=\"es0\">\\n</span> + - * / ( )\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>validNums<span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"Wrong numbers used, try again.\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> calc <span class=\"sy0\">=</span> validEval<span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">typeof</span> calc <span class=\"sy0\">!==</span> <span class=\"st0\">'number'</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"That is not a valid input; please try again.\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>calc <span class=\"sy0\">!==</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"Wrong answer: \"</span> <span class=\"sy0\">+</span> <span class=\"kw4\">String</span><span class=\"br0\">(</span>calc<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"; please try again.\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> input <span class=\"sy0\">+</span> <span class=\"st0\">\" == 24.  Congratulations!\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// I/O below.</span><br/>\u00a0<br/>while <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> numbers <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">8</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> input <span class=\"sy0\">=</span> prompt<span class=\"br0\">(</span><br/>        <span class=\"st0\">\"Your numbers are:<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">+</span> numbers.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>        <span class=\"st0\">\"<span class=\"es0\">\\n</span>Enter expression. (use only + - * / and parens).<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">+</span><span class=\"st0\">\"'x' to exit.\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>input <span class=\"sy0\">===</span> <span class=\"st0\">'x'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    alert<span class=\"br0\">(</span>twentyfour<span class=\"br0\">(</span>numbers<span class=\"sy0\">,</span> input<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 28, "block": "<pre class=\"text highlighted_source\">validexpr(ex::Expr) = ex.head ==\u00a0:call &amp;&amp; ex.args[1] in [:*,:/,:+,:-] &amp;&amp; all(validexpr, ex.args[2:end])<br/>validexpr(ex::Int) = true<br/>validexpr(ex::Any) = false<br/>findnumbers(ex::Number) = Int[ex]<br/>findnumbers(ex::Expr) = vcat(map(findnumbers, ex.args)...)<br/>findnumbers(ex::Any) = Int[]<br/>function twentyfour()<br/>    digits = sort!(rand(1:9, 4))<br/>    while true<br/>        print(\"enter expression using $digits =&gt; \")<br/>        ex = parse(readline())<br/>        try<br/>            validexpr(ex) || error(\"only *, /, +, - of integers is allowed\")<br/>            nums = sort!(findnumbers(ex))<br/>            nums == digits || error(\"expression $ex used numbers $nums\u00a0!= $digits\")<br/>            val = eval(ex)<br/>            val == 24 || error(\"expression $ex evaluated to $val, not 24\")<br/>            println(\"you won!\")<br/>            return<br/>        catch e<br/>            if isa(e, ErrorException)<br/>                println(\"incorrect: \", e.msg)<br/>            else<br/>                rethrow()<br/>            end<br/>        end<br/>    end<br/>end</pre>"}, {"lang": "Kotlin", "loc": 52, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Scanner</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Stack</span><br/>\u00a0<br/>internal <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Game24 <span class=\"br0\">{</span><br/>    fun run<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> digits <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> r.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Make 24 using these digits: $digits\"</span><span class=\"br0\">)</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"&gt; \"</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> Stack<span class=\"sy0\">&lt;</span>Float<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> total <span class=\"sy0\">=</span> 0L<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cin <span class=\"sy0\">=</span> Scanner<span class=\"br0\">(</span>System.`in`<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in cin.<span class=\"me1\">nextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            when <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                in <span class=\"st0\">'0'</span>..<span class=\"st0\">'9'</span> -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d <span class=\"sy0\">=</span> c - <span class=\"st0\">'0'</span><br/>                    total +<span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> shl <span class=\"br0\">(</span>d <span class=\"sy0\">*</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                    s +<span class=\"sy0\">=</span> d.<span class=\"me1\">toFloat</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"sy0\">&gt;</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"+/-*\"</span>.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        s +<span class=\"sy0\">=</span> c.<span class=\"me1\">applyOperator</span><span class=\"br0\">(</span>s.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, s.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        when <span class=\"br0\">{</span><br/>            tally<span class=\"br0\">(</span>digits<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> total -<span class=\"sy0\">&gt;</span><br/>                print<span class=\"br0\">(</span><span class=\"st0\">\"Not the same digits. \"</span><span class=\"br0\">)</span><br/>            s.<span class=\"me1\">peek</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>target<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> -<span class=\"sy0\">&gt;</span><br/>                println<span class=\"br0\">(</span><span class=\"st0\">\"Correct!\"</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"sy0\">&gt;</span><br/>                print<span class=\"br0\">(</span><span class=\"st0\">\"Not correct.\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun Char.<span class=\"me1\">applyOperator</span><span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Float, b<span class=\"sy0\">:</span> Float<span class=\"br0\">)</span> <span class=\"sy0\">=</span> when <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"st0\">'+'</span> -<span class=\"sy0\">&gt;</span> a + b<br/>        <span class=\"st0\">'-'</span> -<span class=\"sy0\">&gt;</span> b - a<br/>        <span class=\"st0\">'*'</span> -<span class=\"sy0\">&gt;</span> a <span class=\"sy0\">*</span> b<br/>        <span class=\"st0\">'/'</span> -<span class=\"sy0\">&gt;</span> b / a<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"sy0\">&gt;</span> Float.<span class=\"me1\">NaN</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun tally<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Long <span class=\"sy0\">=</span> a.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">{</span> t, i -<span class=\"sy0\">&gt;</span> t + <span class=\"br0\">(</span><span class=\"nu0\">1</span> shl <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> target <span class=\"sy0\">=</span> <span class=\"nu0\">24</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> Game24.<span class=\"me1\">run</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Lasso", "loc": 70, "block": "<pre class=\"text highlighted_source\">[<br/>if(sys_listunboundmethods\u00a0!&gt;&gt; 'randoms') =&gt; {<br/>\tdefine randoms()::array =&gt; {<br/>\t\tlocal(out = array)<br/>\t\tloop(4) =&gt; { #out-&gt;insert(math_random(9,1)) }<br/>\t\treturn #out<br/>\t}<br/>}<br/>if(sys_listunboundmethods\u00a0!&gt;&gt; 'checkvalid') =&gt; {<br/>\tdefine checkvalid(str::string, nums::array)::boolean =&gt; {<br/>\t\tlocal(chk = array('*','/','+','-','(',')',' '), chknums = array, lastintpos = -1, poscounter = 0)<br/>\t\tloop(9) =&gt; { #chk-&gt;insert(loop_count) }<br/>\t\twith s in #str-&gt;values do =&gt; {<br/>\t\t\t#poscounter++<br/>\t\t\t#chk\u00a0!&gt;&gt; #s &amp;&amp; #chk\u00a0!&gt;&gt; integer(#s)\u00a0? return false<br/>\t\t\tinteger(#s) &gt; 0 &amp;&amp; #lastintpos + 1 &gt;= #poscounter\u00a0? return false<br/>\t\t\tinteger(#s) &gt; 0\u00a0? #chknums-&gt;insert(integer(#s))<br/>\t\t\tinteger(#s) &gt; 0\u00a0? #lastintpos = #poscounter<br/>\t\t}<br/>\t\t#chknums-&gt;size\u00a0!= 4\u00a0? return false<br/>\t\t#nums-&gt;sort<br/>\t\t#chknums-&gt;sort<br/>\t\tloop(4) =&gt; { #nums-&gt;get(loop_count)\u00a0!= #chknums(loop_count)\u00a0? return false }<br/>\t\treturn true<br/>\t}<br/>}<br/>if(sys_listunboundmethods\u00a0!&gt;&gt; 'executeexpr') =&gt; {<br/>\tdefine executeexpr(expr::string)::integer =&gt; {<br/>\t\tlocal(keep = string)<br/>\t\twith i in #expr-&gt;values do =&gt; {<br/>\t\t\tif(array('*','/','+','-','(',')') &gt;&gt; #i) =&gt; {<br/>\t\t\t\t#keep-&gt;append(#i)<br/>\t\t\telse<br/>\t\t\t\tinteger(#i) &gt; 0\u00a0? #keep-&gt;append(decimal(#i))<br/>\t\t\t}<br/>\t\t}<br/>\t\treturn integer(sourcefile('['+#keep+']','24game',true,true)-&gt;invoke)<br/>\t}<br/>}<br/>\u00a0<br/>local(numbers = array, exprsafe = true, exprcorrect = false, exprresult = 0)<br/>if(web_request-&gt;param('nums')-&gt;asString-&gt;size) =&gt; {<br/>\twith n in web_request-&gt;param('nums')-&gt;asString-&gt;split(',') do =&gt; { #numbers-&gt;insert(integer(#n-&gt;trim&amp;)) }<br/>}<br/>#numbers-&gt;size\u00a0!= 4\u00a0? #numbers = randoms()<br/>if(web_request-&gt;param('nums')-&gt;asString-&gt;size) =&gt; {<br/>\t#exprsafe = checkvalid(web_request-&gt;param('expr')-&gt;asString,#numbers)<br/>\tif(#exprsafe) =&gt; {<br/>\t\t#exprresult = executeexpr(web_request-&gt;param('expr')-&gt;asString)<br/>\t\t#exprresult == 24\u00a0? #exprcorrect = true<br/>\t}<br/>}<br/>\u00a0<br/>]&lt;h1&gt;24 Game&lt;/h1&gt;<br/>&lt;p&gt;&lt;b&gt;Rules:&lt;/b&gt;&lt;br&gt;<br/>Enter an expression that evaluates to 24&lt;/p&gt;<br/>&lt;ul&gt;<br/>&lt;li&gt;Only multiplication, division, addition, and subtraction operators/functions are allowed.&lt;/li&gt;<br/>&lt;li&gt;Brackets are allowed.&lt;/li&gt;<br/>&lt;li&gt;Forming multiple digit numbers from the supplied digits is disallowed. (So an answer of 12+12 when given 1, 2, 2, and 1 is wrong).&lt;/li&gt;<br/>&lt;li&gt;The order of the digits when given does not have to be preserved.&lt;/li&gt;<br/>&lt;/ul&gt;<br/>\u00a0<br/>&lt;h2&gt;Numbers&lt;/h2&gt;<br/>&lt;p&gt;[#numbers-&gt;join(', ')] (&lt;a href=\"?\"&gt;Reload&lt;/a&gt;)&lt;/p&gt;<br/>[!#exprsafe\u00a0? '&lt;p&gt;Please provide a valid expression&lt;/p&gt;']<br/>&lt;form&gt;&lt;input type=\"hidden\" value=\"[#numbers-&gt;join(',')]\" name=\"nums\"&gt;&lt;input type=\"text\" name=\"expr\" value=\"[web_request-&gt;param('expr')-&gt;asString]\"&gt;&lt;input type=\"submit\" name=\"submit\" value=\"submit\"&gt;&lt;/form&gt;<br/>[if(#exprsafe)]<br/>&lt;p&gt;Result: &lt;b&gt;[#exprresult]&lt;/b&gt; [#exprcorrect\u00a0? 'is CORRECT!' | 'is incorrect']&lt;/p&gt;<br/>[/if]</pre>"}, {"lang": "Liberty BASIC", "loc": 87, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">dim</span> d<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"kw1\">dim</span> chk<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"The 24 Game\"</span><br/><span class=\"kw1\">print</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Given four digits and using just the +, -, *, and / operators; and the\"</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"possible use of brackets, (), enter an expression that equates to 24.\"</span><br/>\u00a0<br/><span class=\"kw1\">do</span><br/>    d$<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">4</span><br/>        d<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw2\">rnd</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span>    <span class=\"co1\">'1..9</span><br/>        chk<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>d<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        d$<span class=\"sy0\">=</span>d$;d<span class=\"br0\">(</span>i<span class=\"br0\">)</span>  <span class=\"co1\">'valid digits, to check with Instr</span><br/>    <span class=\"kw1\">next</span><br/>\u00a0<br/>    <span class=\"kw1\">print</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"These are your four digits: \"</span>;<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">4</span><br/>        <span class=\"kw1\">print</span> d<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<span class=\"kw2\">left$</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"sy0\">,</span>i<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">next</span><br/>    <span class=\"kw1\">print</span><br/>\u00a0<br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"Enter expression:\"</span><br/>    <span class=\"kw1\">Input</span> <span class=\"st0\">\"24 = \"</span>;expr$<br/>    <span class=\"co1\">'check expr$ for validity</span><br/>\u00a0<br/>    <span class=\"co1\">'check right digits used</span><br/>    failed <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>expr$<span class=\"br0\">)</span><br/>        c$<span class=\"sy0\">=</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span>expr$<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span><span class=\"st0\">\"123456789\"</span><span class=\"sy0\">,</span> c$<span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"co1\">'digit</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span>d$<span class=\"sy0\">,</span> c$<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> failed <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">for</span><br/>            <span class=\"kw1\">if</span> i<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span> <span class=\"kw1\">and</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span><span class=\"st0\">\"123456789\"</span><span class=\"sy0\">,</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span>expr$<span class=\"sy0\">,</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> failed <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">for</span><br/>            <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">4</span><br/>                <span class=\"kw1\">if</span> chk<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw2\">val</span><span class=\"br0\">(</span>c$<span class=\"br0\">)</span> <span class=\"kw1\">then</span> chk<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">for</span><br/>            <span class=\"kw1\">next</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">next</span><br/>    <span class=\"kw1\">if</span> failed<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"Wrong digit (\"</span>;c$;<span class=\"st0\">\")\"</span><br/>        <span class=\"kw1\">goto</span> <span class=\"br0\">[</span>fail<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> failed<span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"Multiple digit numbers is disallowed.\"</span><br/>        <span class=\"kw1\">goto</span> <span class=\"br0\">[</span>fail<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>    <span class=\"co1\">'check all digits used</span><br/>    <span class=\"kw1\">if</span> chk<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span> chk<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span> chk<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">+</span> chk<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"Not all digits used\"</span><br/>        <span class=\"kw1\">goto</span> <span class=\"br0\">[</span>fail<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>    <span class=\"co1\">'check valid operations</span><br/>    failed <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>expr$<span class=\"br0\">)</span><br/>        c$<span class=\"sy0\">=</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span>expr$<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span><span class=\"st0\">\"+-*/()\"</span><span class=\"sy0\">+</span>d$<span class=\"sy0\">,</span> c$<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> failed <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">next</span><br/>    <span class=\"kw1\">if</span> failed <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"Wrong operation (\"</span>;c$;<span class=\"st0\">\")\"</span><br/>        <span class=\"kw1\">goto</span> <span class=\"br0\">[</span>fail<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"co1\">'some errors (like brackets) trapped by error handler</span><br/>    <span class=\"kw3\">Err$</span><span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>    res<span class=\"sy0\">=</span>evalWithErrCheck<span class=\"br0\">(</span>expr$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">Err</span>$<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"Error in expression\"</span><br/>        <span class=\"kw1\">goto</span> <span class=\"br0\">[</span>fail<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">if</span> res <span class=\"sy0\">=</span> <span class=\"nu0\">24</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"Correct!\"</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"Wrong! (you got \"</span>;res\u00a0;<span class=\"st0\">\")\"</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"br0\">[</span>fail<span class=\"br0\">]</span><br/>    <span class=\"kw1\">Input</span> <span class=\"st0\">\"Play again (y/n)? \"</span>; ans$<br/><span class=\"kw1\">loop</span> <span class=\"kw1\">while</span> ans$<span class=\"sy0\">=</span><span class=\"st0\">\"y\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> evalWithErrCheck<span class=\"br0\">(</span>expr$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">on</span> <span class=\"kw1\">error</span> <span class=\"kw1\">goto</span> <span class=\"br0\">[</span>handler<span class=\"br0\">]</span><br/>    evalWithErrCheck<span class=\"sy0\">=</span><span class=\"kw2\">eval</span><span class=\"br0\">(</span>expr$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">exit</span> <span class=\"kw1\">function</span><br/><span class=\"br0\">[</span>handler<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "LiveCode", "loc": 5, "block": "<pre class=\"text highlighted_source\">on mouseUp<br/>    put empty into fld \"EvalField\"<br/>    put empty into fld \"AnswerField\"<br/>    put random(9) &amp; comma &amp; random(9) &amp; comma &amp; random(9) &amp; comma &amp; random(9) into fld \"YourNumbersField\"<br/>end mouseUp</pre>"}, {"lang": "Locomotive Basic", "loc": 54, "block": "<pre class=\"locobasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">CLS</span>:<span class=\"kw1\">RANDOMIZE</span> <span class=\"kw1\">TIME</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"The 24 Game\"</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"===========\"</span>:<span class=\"kw1\">PRINT</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Enter an arithmetic expression\"</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"that evaluates to 24,\"</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"using only the provided digits\"</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"and +, -, *, /, (, ).\"</span><br/><span class=\"nu0\">80</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"(Just hit Return for new digits.)\"</span><br/><span class=\"nu0\">90</span> <span class=\"co1\">' create new digits</span><br/><span class=\"nu0\">100</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">4</span>:a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>=<span class=\"kw2\">INT</span><span class=\"br0\">(</span><span class=\"kw2\">RND</span>*<span class=\"nu0\">9</span><span class=\"br0\">)</span>+<span class=\"nu0\">1</span>:<span class=\"kw1\">NEXT</span><br/><span class=\"nu0\">110</span> <span class=\"kw1\">PRINT</span><br/><span class=\"nu0\">120</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"The digits are\"</span>;a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;a<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>;a<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"nu0\">130</span> <span class=\"kw1\">PRINT</span><br/><span class=\"nu0\">140</span> <span class=\"co1\">' user enters solution</span><br/><span class=\"nu0\">150</span> <span class=\"kw1\">INPUT</span> <span class=\"st0\">\"Your solution\"</span>;s$<br/><span class=\"nu0\">160</span> <span class=\"kw1\">IF</span> s$=<span class=\"st0\">\"\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Creating new digits...\"</span>:<span class=\"kw1\">GOTO</span> <span class=\"nu0\">100</span><br/><span class=\"nu0\">170</span> <span class=\"kw1\">GOTO</span> <span class=\"nu0\">300</span><br/><span class=\"nu0\">180</span> <span class=\"co1\">' a little hack to create something like an EVAL function</span><br/><span class=\"nu0\">190</span> <span class=\"kw1\">OPENOUT</span> <span class=\"st0\">\"exp.bas\"</span><br/><span class=\"nu0\">200</span> <span class=\"kw1\">PRINT</span> #<span class=\"nu0\">9</span>,<span class=\"st0\">\"1000 x=\"</span>s$<span class=\"st0\">\":return\"</span><br/><span class=\"nu0\">210</span> <span class=\"kw1\">CLOSEOUT</span><br/><span class=\"nu0\">220</span> <span class=\"kw1\">CHAIN</span> <span class=\"kw1\">MERGE</span> <span class=\"st0\">\"exp\"</span>,<span class=\"nu0\">240</span><br/><span class=\"nu0\">230</span> <span class=\"co1\">' now evaluate the expression</span><br/><span class=\"nu0\">240</span> <span class=\"kw1\">ON</span> <span class=\"kw1\">ERROR</span> <span class=\"kw1\">GOTO</span> <span class=\"nu0\">530</span><br/><span class=\"nu0\">250</span> <span class=\"kw1\">GOSUB</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">260</span> <span class=\"kw1\">IF</span> x=<span class=\"nu0\">24</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Well done!\"</span>:<span class=\"kw1\">END</span><br/><span class=\"nu0\">270</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"No, this evaluates to\"</span>x:<span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Please try again.\"</span><br/><span class=\"nu0\">280</span> <span class=\"kw1\">GOTO</span> <span class=\"nu0\">150</span><br/><span class=\"nu0\">290</span> <span class=\"co1\">' check input for correctness</span><br/><span class=\"nu0\">300</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"kw2\">LEN</span><span class=\"br0\">(</span>s$<span class=\"br0\">)</span><br/><span class=\"nu0\">310</span> q=<span class=\"kw2\">ASC</span><span class=\"br0\">(</span><span class=\"kw2\">MID</span>$<span class=\"br0\">(</span>s$,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">320</span> <span class=\"kw1\">IF</span> q=<span class=\"nu0\">32</span> <span class=\"kw1\">OR</span> <span class=\"br0\">(</span>q&gt;<span class=\"nu0\">39</span> <span class=\"kw1\">AND</span> q&lt;<span class=\"nu0\">44</span><span class=\"br0\">)</span> <span class=\"kw1\">OR</span> q=<span class=\"nu0\">45</span> <span class=\"kw1\">OR</span> <span class=\"br0\">(</span>q&gt;<span class=\"nu0\">46</span> <span class=\"kw1\">AND</span> q&lt;<span class=\"nu0\">58</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">NEXT</span><br/><span class=\"nu0\">330</span> <span class=\"kw1\">IF</span> i-<span class=\"nu0\">1</span>=<span class=\"kw2\">LEN</span><span class=\"br0\">(</span>s$<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"nu0\">370</span><br/><span class=\"nu0\">340</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Bad character in expression:\"</span><span class=\"kw2\">CHR</span>$<span class=\"br0\">(</span>q<span class=\"br0\">)</span><br/><span class=\"nu0\">350</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Try again\"</span>:<span class=\"kw1\">GOTO</span> <span class=\"nu0\">150</span><br/><span class=\"nu0\">360</span> <span class=\"co1\">' new numbers in solution?</span><br/><span class=\"nu0\">370</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"kw2\">LEN</span><span class=\"br0\">(</span>s$<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><br/><span class=\"nu0\">380</span> q=<span class=\"kw2\">ASC</span><span class=\"br0\">(</span><span class=\"kw2\">MID</span>$<span class=\"br0\">(</span>s$,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:p=<span class=\"kw2\">ASC</span><span class=\"br0\">(</span><span class=\"kw2\">MID</span>$<span class=\"br0\">(</span>s$,i+<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">390</span> <span class=\"kw1\">IF</span> q&gt;<span class=\"nu0\">47</span> <span class=\"kw1\">AND</span> q&lt;<span class=\"nu0\">58</span> <span class=\"kw1\">AND</span> p&gt;<span class=\"nu0\">47</span> <span class=\"kw1\">AND</span> p&lt;<span class=\"nu0\">58</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"No forming of new numbers, please!\"</span>:<span class=\"kw1\">GOTO</span> <span class=\"nu0\">150</span><br/><span class=\"nu0\">400</span> <span class=\"kw1\">NEXT</span><br/><span class=\"nu0\">410</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">9</span>:orig<span class=\"br0\">(</span>i<span class=\"br0\">)</span>=<span class=\"nu0\">0</span>:guess<span class=\"br0\">(</span>i<span class=\"br0\">)</span>=<span class=\"nu0\">0</span>:<span class=\"kw1\">NEXT</span><br/><span class=\"nu0\">420</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">4</span>:orig<span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>=orig<span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>+<span class=\"nu0\">1</span>:<span class=\"kw1\">NEXT</span><br/><span class=\"nu0\">430</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"kw2\">LEN</span><span class=\"br0\">(</span>s$<span class=\"br0\">)</span><br/><span class=\"nu0\">440</span> v$=<span class=\"kw2\">MID</span>$<span class=\"br0\">(</span>s$,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"nu0\">450</span> va=<span class=\"kw2\">ASC</span><span class=\"br0\">(</span>v$<span class=\"br0\">)</span>-<span class=\"nu0\">48</span><br/><span class=\"nu0\">460</span> <span class=\"kw1\">IF</span> va&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">AND</span> va&lt;<span class=\"nu0\">10</span> <span class=\"kw1\">THEN</span> guess<span class=\"br0\">(</span>va<span class=\"br0\">)</span>=guess<span class=\"br0\">(</span>va<span class=\"br0\">)</span>+<span class=\"nu0\">1</span><br/><span class=\"nu0\">470</span> <span class=\"kw1\">NEXT</span><br/><span class=\"nu0\">480</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">9</span><br/><span class=\"nu0\">490</span> <span class=\"kw1\">IF</span> guess<span class=\"br0\">(</span>i<span class=\"br0\">)</span>&lt;&gt;orig<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Only use all the provided digits!\"</span>:<span class=\"kw1\">GOTO</span> <span class=\"nu0\">150</span><br/><span class=\"nu0\">500</span> <span class=\"kw1\">NEXT</span><br/><span class=\"nu0\">510</span> <span class=\"kw1\">GOTO</span> <span class=\"nu0\">190</span><br/><span class=\"nu0\">520</span> <span class=\"co1\">' syntax error, e.g. non-matching parentheses</span><br/><span class=\"nu0\">530</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Error in expression, please try again.\"</span><br/><span class=\"nu0\">540</span> <span class=\"kw1\">RESUME</span> <span class=\"nu0\">150</span></pre>"}, {"lang": "Logo", "loc": 74, "block": "<pre class=\"text highlighted_source\">; useful constants<br/>make \"false 1=0<br/>make \"true  1=1<br/>make \"lf char 10<br/>make \"sp char 32<br/>\u00a0<br/>; non-digits legal in expression<br/>make \"operators (lput sp [+ - * / \\( \\)])<br/>\u00a0<br/>; display help message<br/>to show_help\u00a0:digits<br/>  type lf<br/>  print sentence quoted [Using only these digits:]\u00a0:digits <br/>  print sentence quoted [and these operators:] [* / + -]<br/>  print quoted [\\(and parentheses as needed\\),]<br/>  print quoted [enter an arithmetic expression <br/>     which evaluates to exactly 24.]<br/>  type lf<br/>  print quoted [Enter \\\"!\\\" to get fresh numbers.]<br/>  print quoted [Enter \\\"q\\\" to quit.]<br/>  type lf<br/>end<br/>\u00a0<br/>make \"digits []<br/>make \"done false<br/>until [done] [<br/>\u00a0<br/>  if empty? digits [<br/>    make \"digits (map [(random 9) + 1] [1 2 3 4])<br/>  ]<br/>\u00a0<br/>  (type \"Solution sp \"for sp digits \"? sp )<br/>  make \"expression readrawline<br/>\u00a0<br/>  ifelse [expression = \"?] [<br/>\u00a0<br/>    show_help digits<br/>\u00a0<br/>  ] [ifelse [expression = \"q] [<br/>\u00a0<br/>    print \"Bye!<br/>    make \"done true<br/>\u00a0<br/>  ] [ifelse [expression = \"!] [<br/>\u00a0<br/>    make \"digits []<br/>\u00a0<br/>  ] [<br/>    make \"exprchars ` expression<br/>    make \"allowed (sentence digits operators)<br/>\u00a0<br/>    ifelse (member? false (map [[c] member? c allowed] exprchars)) [<br/>      (print quoted [Illegal character in input.])<br/>    ] [<br/>      catch \"error [<br/>        make \"syntax_error true<br/>        make \"testval (run expression)<br/>        make \"syntax_error false<br/>      ]<br/>      ifelse syntax_error [<br/>        (print quoted [Invalid expression.])<br/>      ] [<br/>        ifelse (testval = 24) [<br/>          print quoted [You win!]<br/>          make \"done true<br/>        ] [<br/>          (print (sentence <br/>            quoted [Incorrect \\(got ] testval quoted [instead of 24\\).]))<br/>        ]<br/>      ]<br/>    ]<br/>  ]]]<br/>] <br/>bye</pre>"}, {"lang": "Lua", "loc": 100, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">local</span> <span class=\"kw1\">function</span> help<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"kw3\">print</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><br/> The <span class=\"nu0\">24</span> Game<br/>\u00a0<br/> Given any four digits <span class=\"kw2\">in</span> the range <span class=\"nu0\">1</span> to <span class=\"nu0\">9</span><span class=\"sy0\">,</span> which may have repetitions<span class=\"sy0\">,</span><br/> Using just the <span class=\"sy0\">+,</span> <span class=\"sy0\">-,</span> <span class=\"sy0\">*,</span> <span class=\"kw2\">and</span> <span class=\"sy0\">/</span> operators<span class=\"sy0\">;</span> <span class=\"kw2\">and</span> the possible use of<br/> brackets<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> show how to make an answer of <span class=\"nu0\">24</span><span class=\"sy0\">.</span><br/>\u00a0<br/> An answer of <span class=\"st0\">\"q\"</span> will quit the game<span class=\"sy0\">.</span><br/> An answer of <span class=\"st0\">\"!\"</span> will generate a new set of four digits<span class=\"sy0\">.</span><br/>\u00a0<br/> Note<span class=\"sy0\">:</span> you cannot form multiple digit numbers from the supplied digits<span class=\"sy0\">,</span><br/> so an answer of <span class=\"nu0\">12</span><span class=\"sy0\">+</span><span class=\"nu0\">12</span> when given <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"kw2\">and</span> <span class=\"nu0\">1</span> would <span class=\"kw2\">not</span> be allowed<span class=\"sy0\">.</span><br/>\u00a0<br/> <span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> <span class=\"kw1\">function</span> generate<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\tresult <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>n <span class=\"kw1\">do</span><br/>\t\tresult<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">return</span> result<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> <span class=\"kw1\">function</span> check<span class=\"br0\">(</span>answer<span class=\"sy0\">,</span> digits<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> adig <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">local</span> ddig <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">local</span> index<br/>\t<span class=\"kw1\">local</span> lastWasDigit <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><br/>\t<span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span> <span class=\"kw1\">do</span> adig<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> ddig<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">end</span><br/>\tallowed <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"st0\">'('</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw4\">true</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">')'</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw4\">true</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">' '</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw4\">true</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">'+'</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw4\">true</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">'-'</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw4\">true</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">'*'</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw4\">true</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">'/'</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw4\">true</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">'<span class=\"es1\">\\t</span>'</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw4\">true</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">'1'</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw4\">true</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">'2'</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw4\">true</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">'3'</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw4\">true</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">'4'</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw4\">true</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">'5'</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw4\">true</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">'6'</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw4\">true</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">'7'</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw4\">true</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">'8'</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw4\">true</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">'9'</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw4\">true</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"kw3\">string.len</span><span class=\"br0\">(</span>answer<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"kw2\">not</span> allowed<span class=\"br0\">[</span><span class=\"kw3\">string.sub</span><span class=\"br0\">(</span>answer<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>i<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"kw4\">false</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t\tindex <span class=\"sy0\">=</span> <span class=\"kw3\">string.byte</span><span class=\"br0\">(</span>answer<span class=\"sy0\">,</span>i<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">48</span><br/>\t\t<span class=\"kw1\">if</span> index <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> index <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span> <span class=\"kw1\">then</span><br/>\t\t\t<span class=\"kw1\">if</span> lastWasDigit <span class=\"kw1\">then</span><br/>\t\t\t\t<span class=\"kw1\">return</span> <span class=\"kw4\">false</span><br/>\t\t\t<span class=\"kw1\">end</span><br/>\t\t\tlastWasDigit <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><br/>\t\t\tadig<span class=\"br0\">[</span>index<span class=\"br0\">]</span> <span class=\"sy0\">=</span> adig<span class=\"br0\">[</span>index<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\tlastWasDigit <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">for</span> i<span class=\"sy0\">,</span>digit <span class=\"kw2\">in</span> <span class=\"kw3\">next</span><span class=\"sy0\">,</span>digits <span class=\"kw1\">do</span><br/>\t\tddig<span class=\"br0\">[</span>digit<span class=\"br0\">]</span> <span class=\"sy0\">=</span> ddig<span class=\"br0\">[</span>digit<span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span> <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">if</span> adig<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">~=</span> ddig<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"kw4\">false</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw3\">loadstring</span><span class=\"br0\">(</span><span class=\"st0\">'return '</span><span class=\"sy0\">..</span>answer<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> <span class=\"kw1\">function</span> game24<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\thelp<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"kw3\">math.randomseed</span><span class=\"br0\">(</span><span class=\"kw3\">os.time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> digits <span class=\"sy0\">=</span> generate<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> trial <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">local</span> answer <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">local</span> ans <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><br/>\t<span class=\"kw3\">io.write</span> <span class=\"st0\">'Your four digits:'</span><br/>\t<span class=\"kw1\">for</span> i<span class=\"sy0\">,</span>digit <span class=\"kw2\">in</span> <span class=\"kw3\">next</span><span class=\"sy0\">,</span>digits <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw3\">io.write</span> <span class=\"br0\">(</span><span class=\"st0\">' '</span> <span class=\"sy0\">..</span> digit<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">while</span> ans <span class=\"sy0\">~=</span> <span class=\"nu0\">24</span> <span class=\"kw1\">do</span><br/>\t\ttrial <span class=\"sy0\">=</span> trial <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw3\">io.write</span><span class=\"br0\">(</span><span class=\"st0\">\"Expression \"</span><span class=\"sy0\">..</span>trial<span class=\"sy0\">..</span><span class=\"st0\">\": \"</span><span class=\"br0\">)</span><br/>\t\tanswer <span class=\"sy0\">=</span> <span class=\"kw3\">io.read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"kw3\">string.lower</span><span class=\"br0\">(</span>answer<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'q'</span> <span class=\"kw1\">then</span><br/>\t\t\t<span class=\"kw1\">break</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t\t<span class=\"kw1\">if</span> answer <span class=\"sy0\">==</span> <span class=\"st0\">'!'</span> <span class=\"kw1\">then</span><br/>\t\t\tdigits <span class=\"sy0\">=</span> generate<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">io.write</span> <span class=\"br0\">(</span><span class=\"st0\">\"New digits:\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">for</span> i<span class=\"sy0\">,</span>digit <span class=\"kw2\">in</span> <span class=\"kw3\">next</span><span class=\"sy0\">,</span>digits <span class=\"kw1\">do</span><br/>\t\t\t\t<span class=\"kw3\">io.write</span> <span class=\"br0\">(</span><span class=\"st0\">' '</span> <span class=\"sy0\">..</span> digit<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">end</span><br/>\t\t\t<span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\tans <span class=\"sy0\">=</span> check<span class=\"br0\">(</span>answer<span class=\"sy0\">,</span>digits<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> ans <span class=\"sy0\">==</span> <span class=\"kw4\">false</span> <span class=\"kw1\">then</span><br/>\t\t\t\t<span class=\"kw3\">print</span> <span class=\"br0\">(</span><span class=\"st0\">'The input '</span><span class=\"sy0\">..</span> answer <span class=\"sy0\">..</span><span class=\"st0\">' was wonky!'</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t<span class=\"kw3\">print</span> <span class=\"br0\">(</span><span class=\"st0\">' = '</span><span class=\"sy0\">..</span> ans<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">if</span> ans <span class=\"sy0\">==</span> <span class=\"nu0\">24</span> <span class=\"kw1\">then</span><br/>\t\t\t\t\t<span class=\"kw3\">print</span> <span class=\"br0\">(</span><span class=\"st0\">\"Thats right!\"</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">end</span><br/>\t\t\t<span class=\"kw1\">end</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>game24<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 84, "block": "<pre class=\"text highlighted_source\">play24\u00a0:= module()<br/>\texport ModuleApply;<br/>\tlocal cheating;<br/>\tcheating\u00a0:= proc(input, digits)<br/>\t\tlocal i, j, stringDigits;<br/>\t\tuse StringTools in<br/>\t\t\tstringDigits\u00a0:= Implode([seq(convert(i, string), i in digits)]);<br/>\t\t\tfor i in digits do<br/>\t\t\t\tfor j in digits do<br/>\t\t\t\t\tif Search(cat(convert(i, string), j), input) &gt; 0 then<br/>\t\t\t\t\t\treturn true, \": Please don't combine digits to form another number.\"<br/>\t\t\t\t\tend if;<br/>\t\t\t\tend do;<br/>\t\t\tend do;<br/>\t\t\tfor i in digits do<br/>\t\t\t\tif CountCharacterOccurrences(input, convert(i, string)) &lt; CountCharacterOccurrences(stringDigits, convert(i, string)) then<br/>\t\t\t\t\treturn true, \": Please use all digits.\";<br/>\t\t\t\tend if;<br/>\t\t\tend do;<br/>\t\t\tfor i in digits do<br/>\t\t\t\tif CountCharacterOccurrences(input, convert(i, string)) &gt; CountCharacterOccurrences(stringDigits, convert(i, string)) then<br/>\t\t\t\t\treturn true, \": Please only use a digit once.\";<br/>\t\t\t\tend if;<br/>\t\t\tend do;<br/>\t\t\tfor i in input do<br/>\t\t\t\ttry<br/>\t\t\t\t\tif type(parse(i), numeric) and not member(parse(i), digits) then<br/>\t\t\t\t\t\treturn true, \": Please only use the digits you were given.\";<br/>\t\t\t\t\tend if;<br/>\t\t\t\tcatch:<br/>\t\t\t\tend try;<br/>\t\t\tend do;<br/>\t\t\treturn false, \"\";<br/>\t\tend use;<br/>\tend proc:<br/>\u00a0<br/>\tModuleApply\u00a0:= proc()<br/>\t\tlocal replay, digits, err, message, answer;<br/>\t\trandomize():<br/>\t\treplay\u00a0:= \"\":<br/>\t\twhile not replay = \"END\" do<br/>\t\t\tif not replay = \"YES\" then<br/>\t\t\t\tdigits\u00a0:= [seq(rand(1..9)(), i = 1..4)]:<br/>\t\t\tend if;<br/>\t\t\terr\u00a0:= true:<br/>\t\t\twhile err do<br/>\t\t\t\tmessage\u00a0:= \"\";<br/>\t\t\t\tprintf(\"Please make 24 from the digits:\u00a0%a. Press enter for a new set of numbers or type END to quit\\n\", digits);<br/>\t\t\t\tanswer\u00a0:= StringTools[UpperCase](readline());<br/>\t\t\t\tif not answer = \"\" and not answer = \"END\" then<br/>\t\t\t\t\ttry<br/>\t\t\t\t\t\tif not type(parse(answer), numeric) then<br/>\t\t\t\t\t\t\terror;<br/>\t\t\t\t\t\telif cheating(answer, digits)[1] then<br/>\t\t\t\t\t\t\tmessage\u00a0:= cheating(answer, digits)[2];<br/>\t\t\t\t\t\t\terror;<br/>\t\t\t\t\t\tend if;<br/>\t\t\t\t\t\terr\u00a0:= false;<br/>\t\t\t\t\tcatch:<br/>\t\t\t\t\t\tprintf(\"Invalid Input%s\\n\\n\", message);<br/>\t\t\t\t\tend try;<br/>\t\t\t\telse<br/>\t\t\t\t\terr\u00a0:= false;<br/>\t\t\t\tend if;<br/>\t\t\tend do:<br/>\t\t\tif not answer = \"\" and not answer = \"END\" then<br/>\t\t\t\tif parse(answer) = 24 then<br/>\t\t\t\t\tprintf(\"You win! Do you wish to play another game? (Press enter for a new set of numbers or END to quit.)\\n\");<br/>\t\t\t\t\treplay\u00a0:= StringTools[UpperCase](readline());<br/>\t\t\t\telse <br/>\t\t\t\t\tprintf(\"Your expression evaluated to\u00a0%a. Try again!\\n\", parse(answer));<br/>\t\t\t\t\treplay\u00a0:= \"YES\";<br/>\t\t\t\tend if;<br/>\t\t\telse<br/>\t\t\t\treplay\u00a0:= answer;<br/>\t\t\tend if;<br/>\u00a0<br/>\t\t\tprintf(\"\\n\");<br/>\t\tend do:<br/>\t\tprintf(\"GAME OVER\\n\");<br/>\tend proc:<br/>end module:<br/>\u00a0<br/>play24();</pre>"}, {"lang": "Mathematica", "loc": 15, "block": "<pre class=\"text highlighted_source\">isLegal[n_List, x_String]\u00a0:= <br/> Quiet[Check[<br/>   With[{h = ToExpression[x, StandardForm, HoldForm]}, <br/>    If[Cases[Level[h, {2, \\[Infinity]}, Hold, Heads -&gt; True], <br/>        Except[_Integer | Plus | _Plus | Times | _Times | Power | <br/>          Power[_, -1]]] === {} &amp;&amp; <br/>      Sort[Level[h /. Power[q_, -1] -&gt; q, {-1}] /. <br/>         q_Integer -&gt; Abs[q]] === Sort[n], ReleaseHold[h]]], Null]]<br/>Grid[{{Button[<br/>    \"new numbers\", {a, b, c, d} = Table[RandomInteger[{1, 9}], {4}]], <br/>   InputField[Dynamic[x], String]}, {Dynamic[{a, b, c, d}], <br/>   Dynamic[Switch[isLegal[{a, b, c, d}, x], Null, <br/>     \"Sorry, that is invalid.\", 24, \"Congrats! That's 24!\", _, <br/>     \"Sorry, that makes \" &lt;&gt; ToString[<a class=\"__cf_email__\" data-cfemail=\"e1b58ea4999193849292888e8fa199\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, InputForm] &lt;&gt; <br/>      \", not 24.\"]]}}]</pre>"}, {"lang": "MATLAB / Octave", "loc": 27, "block": "<pre class=\"matlab highlighted_source\">  <span class=\"kw1\">function</span> twentyfour<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  N = <span class=\"nu0\">4</span>;<br/>  n = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ceil.html\"><span class=\"kw2\">ceil</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/rand.html\"><span class=\"kw2\">rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>,N<span class=\"br0\">)</span>*<span class=\"nu0\">9</span><span class=\"br0\">)</span>;<br/>  printf<span class=\"br0\">(</span><span class=\"co2\">'Generate a equation with the numbers\u00a0%i,\u00a0%i,\u00a0%i,\u00a0%i and +, -, *, /, () operators\u00a0! \\n'</span>,n<span class=\"br0\">)</span>;<br/>  s = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/input.html\"><span class=\"kw2\">input</span></a><span class=\"br0\">(</span><span class=\"co2\">': '</span>,<span class=\"co2\">'s'</span><span class=\"br0\">)</span>;<br/>  t = s;<br/>  <span class=\"kw1\">for</span> k = <span class=\"nu0\">1</span>:N,<br/>    <span class=\"br0\">[</span>x,t<span class=\"br0\">]</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/strtok.html\"><span class=\"kw2\">strtok</span></a><span class=\"br0\">(</span>t,<span class=\"co2\">'+-*/() \\t'</span><span class=\"br0\">)</span>;<br/>     <span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span>~=<span class=\"nu0\">1</span>,<br/>       <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/error.html\"><span class=\"kw2\">error</span></a><span class=\"br0\">(</span><span class=\"co2\">'invalid sign\u00a0%s\\n'</span>,x<span class=\"br0\">)</span>;<br/>     <span class=\"kw1\">end</span>; <br/>     y = x-<span class=\"co2\">'0'</span>;<br/>     <span class=\"kw1\">if</span> ~<span class=\"br0\">(</span><span class=\"nu0\">0</span> &lt; y &amp; y &lt; <span class=\"nu0\">10</span><span class=\"br0\">)</span> <br/>       <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/error.html\"><span class=\"kw2\">error</span></a><span class=\"br0\">(</span><span class=\"co2\">'invalid sign\u00a0%s\\n'</span>,x<span class=\"br0\">)</span>;<br/>     <span class=\"kw1\">end</span>;<br/>     z<span class=\"br0\">(</span><span class=\"nu0\">1</span>,k<span class=\"br0\">)</span> = y;  \t<br/>  <span class=\"kw1\">end</span>; <br/>  <span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/any.html\"><span class=\"kw2\">any</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sort.html\"><span class=\"kw2\">sort</span></a><span class=\"br0\">(</span>z<span class=\"br0\">)</span>-<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sort.html\"><span class=\"kw2\">sort</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/error.html\"><span class=\"kw2\">error</span></a><span class=\"br0\">(</span><span class=\"co2\">'numbers do not match.\\n'</span><span class=\"br0\">)</span>;\t<br/>  <span class=\"kw1\">end</span>; <br/>\u00a0<br/>  val =  <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/eval.html\"><span class=\"kw2\">eval</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">if</span> val==<span class=\"nu0\">24</span>,<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'expression \"%s\" results in\u00a0%i.\\n'</span>,s,val<span class=\"br0\">)</span>;\t<br/>  <span class=\"kw1\">else</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'expression \"%s\" does not result in 24 but\u00a0%i.\\n'</span>,s,val<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">end</span>; \t</pre>"}, {"lang": "mIRC Scripting Language", "loc": 33, "block": "<pre class=\"mirc highlighted_source\"><span class=\"kw1\">alias</span> 24 <span class=\"br0\">{</span><br/>  <span class=\"kw1\">dialog</span> <span class=\"re4\">-m</span> 24-Game 24-Game<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">dialog</span> 24-Game <span class=\"br0\">{</span><br/>  title \"24-Game\"<br/>  size <span class=\"re4\">-1</span> <span class=\"re4\">-1</span> 100 70<br/>  option dbu<br/>  text \"\", 1, 29 7 42 8<br/>  text \"Equation\", 2, 20 21 21 8<br/>  edit \"\", 3, 45 20 40 10<br/>  text \"Status\", 4, 10 34 80 8, center<br/>  button \"Calculate\", 5, 5 45 40 20<br/>  button \"New\", 6, 57 47 35 15<br/><span class=\"br0\">}</span><br/>\u00a0<br/>on *:<span class=\"kw1\">DIALOG</span>:24-Game:init:*: <span class=\"br0\">{</span><br/>  did <span class=\"re4\">-o</span> 24-Game 1 1 Numbers: <span class=\"re0\">$rand</span><span class=\"br0\">(</span>1,9<span class=\"br0\">)</span> <span class=\"re0\">$rand</span><span class=\"br0\">(</span>1,9<span class=\"br0\">)</span> <span class=\"re0\">$rand</span><span class=\"br0\">(</span>1,9<span class=\"br0\">)</span> <span class=\"re0\">$rand</span><span class=\"br0\">(</span>1,9<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>on *:<span class=\"kw1\">DIALOG</span>:24-Game:sclick:*: <span class=\"br0\">{</span><br/>  <span class=\"kw2\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$did</span> == 5<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$regex</span><span class=\"br0\">(</span><span class=\"re0\">$did</span><span class=\"br0\">(</span>3<span class=\"br0\">)</span>,<span class=\"sy0\">/</span>^<span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"br0\">]</span>*\\d *<span class=\"br0\">[</span>-+*<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"br0\">]</span>*\\d<span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span>*<span class=\"br0\">[</span>-+*<span class=\"sy0\">/</span><span class=\"br0\">]</span><span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span>*\\d<span class=\"br0\">[</span> <span class=\"br0\">)</span><span class=\"br0\">]</span>*<span class=\"br0\">[</span>-+*<span class=\"sy0\">/</span><span class=\"br0\">]</span> *\\d<span class=\"br0\">[</span> <span class=\"br0\">)</span><span class=\"br0\">]</span>*$<span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &amp;&amp; <span class=\"br0\">(</span><span class=\"re0\">$sorttok</span><span class=\"br0\">(</span><span class=\"re0\">$regsubex</span><span class=\"br0\">(</span><span class=\"re0\">$did</span><span class=\"br0\">(</span>3<span class=\"br0\">)</span>,<span class=\"sy0\">/</span><span class=\"br0\">[</span>^\\d<span class=\"br0\">]</span>+<span class=\"re7\">/g</span>,<span class=\"re0\">$chr</span><span class=\"br0\">(</span>32<span class=\"br0\">)</span><span class=\"br0\">)</span>,32<span class=\"br0\">)</span> == <span class=\"re0\">$sorttok</span><span class=\"br0\">(</span><span class=\"re0\">$remove</span><span class=\"br0\">(</span><span class=\"re0\">$did</span><span class=\"br0\">(</span>1<span class=\"br0\">)</span>,Numbers:<span class=\"br0\">)</span>,32<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      did <span class=\"re4\">-o</span> 24-Game 4 1 <span class=\"re0\">$iif</span><span class=\"br0\">(</span><span class=\"re0\">$calc</span><span class=\"br0\">(</span><span class=\"re0\">$did</span><span class=\"br0\">(</span>3<span class=\"br0\">)</span><span class=\"br0\">)</span> == 24,Correct,Wrong<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">else</span> <span class=\"br0\">{</span><br/>      did <span class=\"re4\">-o</span> 24-Game 4 1 Wrong Numbers or Syntax<br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw2\">elseif</span> <span class=\"br0\">(</span><span class=\"re0\">$did</span> == 6<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    did <span class=\"re4\">-o</span> 24-Game 1 1 Numbers: <span class=\"re0\">$rand</span><span class=\"br0\">(</span>1,9<span class=\"br0\">)</span> <span class=\"re0\">$rand</span><span class=\"br0\">(</span>1,9<span class=\"br0\">)</span> <span class=\"re0\">$rand</span><span class=\"br0\">(</span>1,9<span class=\"br0\">)</span> <span class=\"re0\">$rand</span><span class=\"br0\">(</span>1,9<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Modula-2", "loc": 179, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> TwentyFour;<br/>\u00a0<br/><span class=\"kw1\">FROM</span>\tInOut\t\t\t<span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span> WriteLn<span class=\"sy0\">,</span> Write<span class=\"sy0\">,</span> ReadString<span class=\"sy0\">,</span> WriteInt;<br/><span class=\"kw1\">FROM</span>\tRandomGenerator <span class=\"kw1\">IMPORT</span> Random;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span>\toperator_t \t\t<span class=\"sy0\">=</span> <span class=\"br0\">(</span>add<span class=\"sy0\">,</span> sub<span class=\"sy0\">,</span> mul<span class=\"sy0\">,</span> div<span class=\"br0\">)</span>;<br/>\t\texpr_t\t\t\t<span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span><br/>\t\t\t\t\t\t\toperand\t\t<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CARDINAL</span>;<br/>\t\t\t\t\t  \t\toperator \t<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> operator_t;<br/>\t\t\t\t\t\t  <span class=\"kw1\">END</span>;<span class=\"coMULTI\">(*of RECORD*)</span><br/>\t\tnumbers_t\t\t<span class=\"sy0\">=</span> <span class=\"kw1\">SET</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>\u00a0<br/><span class=\"kw1\">VAR</span>\t\texpr \t<span class=\"sy0\">:</span> expr_t;<br/>\t\tnumbers\t<span class=\"sy0\">:</span> numbers_t;<br/><span class=\"coMULTI\">(*******************************************************************createExpr*)</span><br/><span class=\"coMULTI\">(*analyse the input string                                                    *)</span><br/><span class=\"kw1\">PROCEDURE</span> createExpr<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">VAR</span> index<span class=\"sy0\">,</span> counter\t<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\ttoken \t\t\t<span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span>;<br/>\ttemp_expr \t\t<span class=\"sy0\">:</span> expr_t;<br/>\toperand   \t\t<span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>;<br/>\toperator\t\t<span class=\"sy0\">:</span> operator_t;<br/>\u00a0<br/>\t<span class=\"coMULTI\">(************************************nextToken*)</span><br/>\t<span class=\"coMULTI\">(* returns the next CHAR that isn`t a space    *)</span><br/>\t<span class=\"kw1\">PROCEDURE</span> nextToken<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>index<span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>index<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st_h\">' '</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>index<span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">END</span>;<span class=\"coMULTI\">(*of WHILE*)</span><br/>\t\t<span class=\"kw1\">RETURN</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span>index<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">END</span> nextToken;<br/>\t<span class=\"coMULTI\">(***********************************set_operand*)</span><br/>\t<span class=\"coMULTI\">(* checks if the CHAR o inerhits a valid number*)</span><br/>\t<span class=\"coMULTI\">(* and sets 'operand' to its value             *)</span>\t<br/>\t<span class=\"kw1\">PROCEDURE</span> set_operand<span class=\"br0\">(</span>o<span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">CASE</span> o <span class=\"kw1\">OF</span><br/>\t\t\t<span class=\"st_h\">'0'</span>..<span class=\"st_h\">'9'</span><span class=\"sy0\">:</span>\t<span class=\"kw1\">IF</span> o <span class=\"kw1\">IN</span> numbers <span class=\"kw1\">THEN</span><br/>\t\t\t\t\t\t\toperand <span class=\"sy0\">:=</span> <span class=\"kw3\">ORD</span><span class=\"br0\">(</span>o<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">48</span>;<br/>\t\t\t\t\t\t\tnumbers <span class=\"sy0\">:=</span> numbers <span class=\"sy0\">-</span> numbers_t<span class=\"br0\">{</span>o<span class=\"br0\">}</span>;<br/>\t\t\t\t\t\t<span class=\"kw1\">ELSE</span><br/>\t\t\t\t\t\t\tWriteString<span class=\"br0\">(</span><span class=\"st0\">\"ERROR: '\"</span><span class=\"br0\">)</span>;<br/>\t\t\t\t\t\t\tWrite<span class=\"br0\">(</span>\t\t\t\t\to<span class=\"br0\">)</span>;<br/>\t\t\t\t\t\t\tWriteString<span class=\"br0\">(</span>\t\t\t\t<span class=\"st0\">\"' isn`t a available number \"</span><span class=\"br0\">)</span>;<br/>\t\t\t\t\t\t\tWriteLn;<br/>\t\t\t\t\t\t\t<span class=\"kw3\">HALT</span>;<br/>\t\t\t\t\t\t<span class=\"kw1\">END</span>;<span class=\"coMULTI\">(*of IF*)</span>|<br/>\t\t\t<span class=\"nu0\">0</span>  <span class=\"sy0\">:</span> WriteString<span class=\"br0\">(</span><span class=\"st0\">\"ERROR: error in input \"</span><span class=\"br0\">)</span>;<br/>\t\t\t\t\tWriteLn;<br/>\t\t\t\t\t<span class=\"kw3\">HALT</span>;<br/>\t\t\t<span class=\"kw1\">ELSE</span><br/>\t\t\t\tWriteString<span class=\"br0\">(</span><span class=\"st0\">\"ERROR: '\"</span><span class=\"br0\">)</span>;<br/>\t\t\t\tWrite<span class=\"br0\">(</span>\t\t\t\t\to<span class=\"br0\">)</span>;<br/>\t\t\t\tWriteString<span class=\"br0\">(</span>\t\t\t\t<span class=\"st0\">\"' isn`t a number \"</span><span class=\"br0\">)</span>;<br/>\t\t\t\tWriteLn;<br/>\t\t\t\t<span class=\"kw3\">HALT</span>;<br/>\t\t<span class=\"kw1\">END</span>;<span class=\"coMULTI\">(*of CASE*)</span><br/>\t<span class=\"kw1\">END</span> set_operand;<br/>\t<span class=\"coMULTI\">(**********************************set_operator*)</span><br/>\t<span class=\"coMULTI\">(* checks if the CHAR o inerhits a valid       *)</span><br/>\t<span class=\"coMULTI\">(* operator and sets 'operator' to its value   *)</span><br/>\t<span class=\"kw1\">PROCEDURE</span> set_operator<span class=\"br0\">(</span>o<span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">CASE</span> o <span class=\"kw1\">OF</span><br/>\t\t\t<span class=\"st_h\">'+'</span> <span class=\"sy0\">:</span> operator <span class=\"sy0\">:=</span> add;|<br/>\t\t\t<span class=\"st_h\">'-'</span> <span class=\"sy0\">:</span> operator <span class=\"sy0\">:=</span> sub;|<br/>\t\t\t<span class=\"st_h\">'*'</span> <span class=\"sy0\">:</span> operator <span class=\"sy0\">:=</span> mul;|<br/>\t\t\t<span class=\"st_h\">'/'</span> <span class=\"sy0\">:</span> operator <span class=\"sy0\">:=</span> div;|<br/>\t\t\t<span class=\"nu0\">0</span>  <span class=\"sy0\">:</span> WriteString<span class=\"br0\">(</span><span class=\"st0\">\"ERROR: error in input \"</span><span class=\"br0\">)</span>;<br/>\t\t\t\t\tWriteLn;<br/>\t\t\t\t\t<span class=\"kw3\">HALT</span>;<br/>\t\t<span class=\"kw1\">ELSE</span><br/>\t\t\tWriteString<span class=\"br0\">(</span><span class=\"st0\">\"ERROR: '\"</span><span class=\"br0\">)</span>;<br/>\t\t\t\tWrite<span class=\"br0\">(</span>\t\t\t\t\to<span class=\"br0\">)</span>;<br/>\t\t\t\tWriteString<span class=\"br0\">(</span>\t\t\t\t<span class=\"st0\">\"' isn`t a operator \"</span><span class=\"br0\">)</span>;<br/>\t\t\t\tWriteLn;<br/>\t\t\t\t<span class=\"kw3\">HALT</span>;<br/>\t\t<span class=\"kw1\">END</span>;<span class=\"coMULTI\">(*of CASE*)</span><br/>\t<span class=\"kw1\">END</span> set_operator;<br/>\t<span class=\"coMULTI\">(************************************************)</span><br/><span class=\"kw1\">BEGIN</span><br/>\tindex <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>;<br/>\u00a0<br/>\ttoken <span class=\"sy0\">:=</span> nextToken<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\tset_operand<span class=\"br0\">(</span>token<span class=\"br0\">)</span>;<br/>\texpr.operand<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> operand;<br/>\u00a0<br/>\ttoken <span class=\"sy0\">:=</span> nextToken<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\tset_operator<span class=\"br0\">(</span>token<span class=\"br0\">)</span>;<br/>\texpr.operator<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> operator;<br/>\u00a0<br/>\u00a0<br/>\ttoken <span class=\"sy0\">:=</span> nextToken<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\tset_operand<span class=\"br0\">(</span>token<span class=\"br0\">)</span>;<br/>\texpr.operand<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> operand;<br/>\u00a0<br/>\ttoken <span class=\"sy0\">:=</span> nextToken<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\tset_operator<span class=\"br0\">(</span>token<span class=\"br0\">)</span>;<br/>\texpr.operator<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> operator;<br/>\u00a0<br/>\ttoken <span class=\"sy0\">:=</span> nextToken<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\tset_operand<span class=\"br0\">(</span>token<span class=\"br0\">)</span>;<br/>\texpr.operand<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> operand;<br/>\u00a0<br/>\ttoken <span class=\"sy0\">:=</span> nextToken<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\tset_operator<span class=\"br0\">(</span>token<span class=\"br0\">)</span>;<br/>\texpr.operator<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> operator;<br/>\u00a0<br/>\ttoken <span class=\"sy0\">:=</span> nextToken<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\tset_operand<span class=\"br0\">(</span>token<span class=\"br0\">)</span>;<br/>\texpr.operand<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> operand;<br/><span class=\"kw1\">END</span> createExpr;<br/>\u00a0<br/><span class=\"coMULTI\">(*****************************************************************evaluateExpr*)</span><br/><span class=\"coMULTI\">(* evaluate the expresion that was createt by 'createExpr'                    *)</span><br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> evaluateExpr<span class=\"br0\">(</span><span class=\"kw1\">VAR</span> num<span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">VAR</span>\tindex\t<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw1\">WITH</span> expr <span class=\"kw1\">DO</span><br/>\t\tnum <span class=\"sy0\">:=</span> <span class=\"kw3\">VAL</span><span class=\"br0\">(</span><span class=\"kw4\">REAL</span><span class=\"sy0\">,</span>operand<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">FOR</span> index <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">3</span> <span class=\"kw1\">DO</span><br/>\t\t\t<span class=\"kw1\">CASE</span> operator<span class=\"br0\">[</span>index<span class=\"br0\">]</span> <span class=\"kw1\">OF</span><br/>\t\t\t\tadd <span class=\"sy0\">:</span> num <span class=\"sy0\">:=</span> num <span class=\"sy0\">+</span> <span class=\"kw3\">VAL</span><span class=\"br0\">(</span><span class=\"kw4\">REAL</span><span class=\"sy0\">,</span>operand<span class=\"br0\">[</span>index<span class=\"br0\">]</span><span class=\"br0\">)</span>;|<br/>\t\t\t\tsub <span class=\"sy0\">:</span> num <span class=\"sy0\">:=</span> num <span class=\"sy0\">-</span> <span class=\"kw3\">VAL</span><span class=\"br0\">(</span><span class=\"kw4\">REAL</span><span class=\"sy0\">,</span>operand<span class=\"br0\">[</span>index<span class=\"br0\">]</span><span class=\"br0\">)</span>;|<br/>\t\t\t\tmul <span class=\"sy0\">:</span> num <span class=\"sy0\">:=</span> num <span class=\"sy0\">*</span> <span class=\"kw3\">VAL</span><span class=\"br0\">(</span><span class=\"kw4\">REAL</span><span class=\"sy0\">,</span>operand<span class=\"br0\">[</span>index<span class=\"br0\">]</span><span class=\"br0\">)</span>;|<br/>\t\t\t\tdiv <span class=\"sy0\">:</span> num <span class=\"sy0\">:=</span> num <span class=\"sy0\">/</span> <span class=\"kw3\">VAL</span><span class=\"br0\">(</span><span class=\"kw4\">REAL</span><span class=\"sy0\">,</span>operand<span class=\"br0\">[</span>index<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\t\t\t<span class=\"kw1\">END</span>;<span class=\"coMULTI\">(*of CASE*)</span><br/>\t\t<span class=\"kw1\">END</span>;<span class=\"coMULTI\">(*of FOR*)</span><br/>\t<span class=\"kw1\">END</span>;<span class=\"coMULTI\">(*of WIHT*)</span><br/><span class=\"kw1\">END</span> evaluateExpr;<br/>\u00a0<br/><span class=\"coMULTI\">(**************************************************************generateNumbers*)</span><br/><span class=\"coMULTI\">(* generates the 4 random numbers ond write them                              *)</span><br/><span class=\"kw1\">PROCEDURE</span> generateNumbers;<br/><span class=\"kw1\">VAR</span>\tindex<span class=\"sy0\">,</span>ran <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tnumbers <span class=\"sy0\">:=</span> numbers_t<span class=\"br0\">{</span><span class=\"br0\">}</span>;<br/>\tran <span class=\"sy0\">:=</span> Random<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">FOR</span> index <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">4</span> <span class=\"kw1\">DO</span><br/>\t\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span><span class=\"kw3\">CHR</span><span class=\"br0\">(</span>ran<span class=\"sy0\">+</span><span class=\"nu0\">48</span><span class=\"br0\">)</span> <span class=\"kw1\">IN</span> numbers <span class=\"br0\">)</span><span class=\"kw1\">DO</span><br/>\t\t\tran <span class=\"sy0\">:=</span> Random<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">END</span>;<span class=\"coMULTI\">(*of While*)</span><br/>\t\tWrite<span class=\"br0\">(</span><span class=\"kw3\">CHR</span><span class=\"br0\">(</span>ran<span class=\"sy0\">+</span><span class=\"nu0\">48</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t\tWriteLn;<br/>\t\tnumbers <span class=\"sy0\">:=</span> numbers <span class=\"sy0\">+</span> numbers_t<span class=\"br0\">{</span><span class=\"kw3\">CHR</span><span class=\"br0\">(</span>ran<span class=\"sy0\">+</span><span class=\"nu0\">48</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">END</span>;<span class=\"coMULTI\">(*of FOR*)</span><br/><span class=\"kw1\">END</span> generateNumbers;<br/><span class=\"coMULTI\">(****************************************************************Main Programm*)</span><br/><span class=\"kw1\">VAR</span>\tstr <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">255</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>\tsum <span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tWriteString<span class=\"br0\">(</span><span class=\"st0\">\"Welcome to the 24 game in MODULA-2\"</span><span class=\"br0\">)</span>;<br/>\tWriteLn;<br/>\tWriteString<span class=\"br0\">(</span><span class=\"st0\">\"Here are your numbers:\"</span><span class=\"br0\">)</span>;<br/>\tWriteLn;<br/>\tgenerateNumbers;<br/>\tWriteString<span class=\"br0\">(</span><span class=\"st0\">\"Enter your equation(This implementation dosn`t support brackets yet): \"</span><span class=\"br0\">)</span>;<br/>\tWriteLn;<br/>\tReadString<span class=\"br0\">(</span>str<span class=\"br0\">)</span>;<br/>\tcreateExpr<span class=\"br0\">(</span>str<span class=\"br0\">)</span>;<br/>\tevaluateExpr<span class=\"br0\">(</span>sum<span class=\"br0\">)</span>;<br/>\tWriteLn;<br/>\tWriteString<span class=\"br0\">(</span><span class=\"st0\">\"Result:\"</span><span class=\"br0\">)</span>;<br/>\tWriteLn;<br/>\tWriteInt<span class=\"br0\">(</span><span class=\"kw3\">TRUNC</span><span class=\"br0\">(</span>sum<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>\tWriteLn;<br/>\t<span class=\"kw1\">CASE</span> <span class=\"br0\">(</span><span class=\"kw3\">TRUNC</span><span class=\"br0\">(</span>sum<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span> <span class=\"kw1\">OF</span><br/>\t\t<span class=\"nu0\">0</span> <span class=\"sy0\">:</span> WriteString<span class=\"br0\">(</span><span class=\"st0\">\"Perfect!\"</span><span class=\"br0\">)</span>;|<br/>\t\t<span class=\"nu0\">1</span> <span class=\"sy0\">:</span> WriteString<span class=\"br0\">(</span><span class=\"st0\">\"Almost perfect.\"</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">ELSE</span> <br/>\t\t\tWriteString<span class=\"br0\">(</span><span class=\"st0\">\"You loose!\"</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">END</span>;<span class=\"coMULTI\">(*of CASE*)</span><br/>\tWriteLn;<br/><span class=\"kw1\">END</span> TwentyFour.</pre>"}, {"lang": "MUMPS", "loc": 81, "block": "<pre class=\"text highlighted_source\">24Game<br/>\tk number, operator, bracket<br/>\t; generate 4 random numbers each between 1 &amp; 9<br/>\t; duplicates allowed!<br/>\ts n1=$r(9)+1, n2=$r(9)+1, n3=$r(9)+1, n4=$r(9)+1<br/>\t; save a copy of them so that we can keep restarting<br/>\t; if the user gets it wrong<br/>\ts s1=n1,s2=n2,s3=n3,s4=n4<br/>Question<br/>\ts (numcount,opcount,lbrackcount,rbrackcount)=0<br/>\t; restart with the random numbers already found<br/>\ts n1=s1,n2=s2,n3=s3,n4=s4<br/>\tw\u00a0!,\"Enter an arithmetic expression that evaluates to 24 using (\",<br/>\tn1,\" \",n2,\" \",n3,\" \",n4,\"): \"<br/>\tr\u00a0!,expr<br/>\tq:expr=\"\"<br/>\t; validate numbers and operators<br/>\ts error=\"\"<br/>\tf n=1:1:$l(expr) {<br/>\t\ts char=$e(expr,n)<br/>\t\tif char?1n {<br/>\t\t\ts number($i(numcount))=char<br/>\t\t\tw\u00a0!<br/>\t\t\tzw char<br/>\t\t}<br/>\t\telseif char?1(1\"*\",1\"/\",1\"+\",1\"-\") {<br/>\t\t\ts operator($i(opcount))=char<br/>\t\t}<br/>\t\telseif char?1\"(\" {<br/>\t\t\ts bracket($i(lbrackcount))=char<br/>\t\t}<br/>\t\telseif char?1\")\" {<br/>\t\t\ts bracket($i(rbrackcount))=char<br/>\t\t}<br/>\t\telse {<br/>\t\t\ts error=\"That ain't no character I wanted to see\"<br/>\t\t\tq<br/>\t\t}<br/>\t}<br/>\tif error'=\"\" w error g Question<br/>\tif numcount'=4 {<br/>\t\tw \"Does not have 4 numbers, do it again.\"<br/>\t\tg Question<br/>\t}<br/>\ts error=\"\"<br/>\tf n=1:1:4 {<br/>\t\tif number(n)=n1 {<br/>\t\t\ts n1=\"dont use again\" continue<br/>\t\t}<br/>\t\tif number(n)=n2 {<br/>\t\t\ts n2=\"dont use again\" continue<br/>\t\t}<br/>\t\tif number(n)=n3 {<br/>\t\t\ts n3=\"dont use again\" continue<br/>\t\t}<br/>\t\tif number(n)=n4 {<br/>\t\t\ts n4=\"dont use again\" continue<br/>\t\t}<br/>\t\ts error=\"Numbers entered do not match all of the randomly generated numbers.\"<br/>\t\tq<br/>\t}<br/>\tif error'=\"\" {<br/>\t\tw error<br/>\t\tg Question<br/>\t}<br/>\tif opcount'=3 {<br/>\t\tw \"Does not have 3 operators.\"<br/>\t\tg Question<br/>\t}<br/>\tif lbrackcount'=rbrackcount {<br/>\t\tw \"brackets must be in pairs.\"<br/>\t\tg Question<br/>\t}<br/>\tx \"s x=\"_expr<br/>\tif x'=24 {<br/>\t\tw\u00a0!,\"Answer does not = 24\"<br/>\t\tg Question<br/>\t}<br/>\tw x<br/>\tq<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 43, "block": "<pre class=\"text highlighted_source\">from random import randomize, random<br/>from strutils import Whitespace<br/>from algorithm import sort<br/>from sequtils import deduplicate<br/>randomize()<br/>\u00a0<br/>template newSeqWith(len: int, init: untyped): untyped =<br/>  var result = newSeq[type(init)](len)<br/>  for i in 0 .. &lt;len:<br/>    result[i] = init<br/>  result<br/>\u00a0<br/>var<br/>  problem = newSeqWith(4, random(1..9))<br/>  stack = newSeq[float]()<br/>  digits = newSeq[int]()<br/>\u00a0<br/>echo \"Make 24 with the digits: \", problem<br/>\u00a0<br/>template op(c) =<br/>  let a = stack.pop<br/>  stack.add c(stack.pop, a)<br/>\u00a0<br/>for c in stdin.readLine:<br/>  case c<br/>  of '1'..'9':<br/>    digits.add c.ord - '0'.ord<br/>    stack.add float(c.ord - '0'.ord)<br/>  of '+': op `+`<br/>  of '*': op `*`<br/>  of '-': op `-`<br/>  of '/': op `/`<br/>  of Whitespace: discard<br/>  else: raise ValueError.newException \"Wrong char: \" &amp; c<br/>\u00a0<br/>sort digits, cmp[int]<br/>sort problem, cmp[int]<br/>if digits.deduplicate\u00a0!= problem.deduplicate:<br/>  raise ValueError.newException \"Not using the given digits.\"<br/>if stack.len\u00a0!= 1:<br/>  raise ValueError.newException \"Wrong expression.\"<br/>echo \"Result: \", stack[0]<br/>echo if abs(stack[0] - 24) &lt; 0.001: \"Good job!\" else: \"Try again.\"</pre>"}, {"lang": "Nit", "loc": 149, "block": "<pre class=\"text highlighted_source\">redef class Char<br/>\tfun is_op: Bool do return \"-+/*\".has(self)<br/>end<br/>\u00a0<br/># Get `numbers` and `operands` from string `operation` collect with `gets` in `main` function<br/># Fill `numbers` and `operands` array with previous extraction<br/>fun exportation(operation: String, numbers: Array[Int], operands: Array[Char]) do<br/>\tvar previous_char: nullable Char = null<br/>\tvar number: nullable Int = null<br/>\tvar negative = false<br/>\u00a0<br/>\tfor i in operation.length.times do<br/>\t\tvar current_char = operation[i]<br/>\t\tvar current_int = current_char.to_i<br/>\u00a0<br/>\t\tif (previous_char == null or previous_char.is_op) and current_char == '-' then<br/>\t\t\tnegative = true<br/>\t\t\tcontinue<br/>\t\tend<br/>\u00a0<br/>\t\tif current_char.is_digit then<br/>\t\t\tif number == null then<br/>\t\t\t\tnumber = current_int<br/>\t\t\telse<br/>\t\t\t\tnumber = number * 10 + current_int<br/>\t\t\tend<br/>\t\tend<br/>\u00a0<br/>\t\tif negative and (current_char.is_op or i == operation.length - 1) then<br/>\t\t\tnumber = number - number * 2<br/>\t\t\tnegative = false<br/>\t\tend<br/>\u00a0<br/>\t\tif (current_char.is_op or i == operation.length - 1) and number\u00a0!= null then<br/>\t\t\tnumbers.add(number)<br/>\t\t\tnumber = null<br/>\t\tend<br/>\u00a0<br/>\t\tif not negative and current_char.is_op then<br/>\t\t\toperands.add(current_char)<br/>\t\tend<br/>\t\tprevious_char = current_char<br/>\tend<br/>\t# Update `numbers` and `operands` array in main function with pointer<br/>end<br/>\u00a0<br/># Create random numbers between 1 to 9<br/>fun random: Array[Int] do<br/>\treturn [for i in 4.times do 1 + 9.rand]<br/>end<br/>\u00a0<br/># Make mathematical operation with `numbers` and `operands` and add the operation result into `random_numbers`<br/>fun calculation(random_numbers, numbers: Array[Int], operands: Array[Char]) do<br/>\tvar number = 0<br/>\tvar temp_numbers = numbers.clone<br/>\u00a0<br/>\twhile temp_numbers.length &gt; 1 do<br/>\t\tvar operand = operands.shift<br/>\t\tvar a = temp_numbers.shift<br/>\t\tvar b = temp_numbers.shift<br/>\u00a0<br/>\t\tif operand == '+' then number = a + b<br/>\t\tif operand == '-' then number = a - b<br/>\t\tif operand == '*' then number = a * b<br/>\t\tif operand == '/' then number = a / b<br/>\u00a0<br/>\t\ttemp_numbers.unshift(number)<br/>\tend<br/>\tif number\u00a0!= 0 then random_numbers.add(number)<br/>end<br/>\u00a0<br/># Check if used `numbers` exist in the `random_numbers` created<br/>fun numbers_exists(random_numbers, numbers: Array[Int]): Bool do<br/>\tfor number in numbers do<br/>\t\tif not random_numbers.count(number) &gt;= numbers.count(number) then return false<br/>\tend<br/>\treturn true<br/>end<br/>\u00a0<br/># Remove `numbers` when they are used<br/>fun remove_numbers(random_numbers, numbers: Array[Int]) do<br/>\tfor number in numbers do random_numbers.remove(number)<br/>end<br/>\u00a0<br/># Check if the mathematical `operation` is valid<br/>fun check(operation: String): Bool do<br/>\tvar previous_char: nullable Char = null<br/>\tvar next_char: nullable Char = null<br/>\tvar next_1_char: nullable Char = null<br/>\u00a0<br/>\tfor i in operation.length.times do<br/>\t\tvar current_char = operation[i]<br/>\u00a0<br/>\t\tif i + 1 &lt; operation.length then<br/>\t\t\tnext_char = operation[i + 1]<br/>\t\t\tif i + 2 &lt; operation.length then<br/>\t\t\t\tnext_1_char = operation[i + 2]<br/>\t\t\telse<br/>\t\t\t\tnext_1_char = null<br/>\t\t\tend<br/>\t\telse<br/>\t\t\tnext_char = null<br/>\t\tend<br/>\u00a0<br/>\t\tif not current_char.is_op and not current_char.is_digit then return false<br/>\t\tif next_char == null and current_char.is_op then return false<br/>\u00a0<br/>\t\tif previous_char == null  then<br/>\t\t\tif next_char == null or next_1_char == null then return false<br/>\t\t\tif current_char == '-' and not next_char.is_digit then return false<br/>\t\t\tif current_char\u00a0!= '-' and not current_char.is_digit then return false<br/>\t\telse<br/>\t\t\tif next_char\u00a0!= null then<br/>\t\t\t\tif previous_char.is_digit and current_char.is_op and<br/>\t\t\t\tnot (next_char == '-' and next_1_char\u00a0!= null and<br/>\t\t\t\tnext_1_char.is_digit or next_char.is_digit) then<br/>\t\t\t\t\treturn false<br/>\t\t\t\tend<br/>\t\t\tend<br/>\t\tend<br/>\t\tprevious_char = current_char<br/>\tend<br/>\treturn true<br/>end<br/>\u00a0<br/>var random_numbers = new Array[Int]<br/>var operation = \"\"<br/>\u00a0<br/>random_numbers = random<br/>while not random_numbers.has(24) and random_numbers.length &gt; 1 do<br/>\tvar numbers = new Array[Int]<br/>\tvar operands = new Array[Char]<br/>\u00a0<br/>\tprint \"numbers: \" + random_numbers.join(\", \")<br/>\toperation = gets<br/>\tif check(operation) then<br/>\t\texportation(operation, numbers, operands)<br/>\t\tif numbers_exists(random_numbers, numbers) then<br/>\t\t\tcalculation(random_numbers, numbers, operands)<br/>\t\t\tremove_numbers(random_numbers, numbers)<br/>\t\telse<br/>\t\t\tprint \"NUMBERS ERROR!\"<br/>\t\tend<br/>\telse<br/>\t\tprint \"STRING ERROR!\"<br/>\tend<br/>end<br/>\u00a0<br/>if random_numbers.has(24) then print \"CONGRATULATIONS\" else print \"YOU LOSE\"</pre>"}, {"lang": "OCaml", "loc": 1, "block": "<pre>ocamlopt -pp camlp4o g24.ml -o g24.opt\n</pre>"}, {"lang": "Oforth", "loc": 22, "block": "<pre class=\"text highlighted_source\">import: mapping<br/>\u00a0<br/>: game<br/>| l expr w n i |<br/>   4 #[ 9 rand ] Array init -&gt;l<br/>\u00a0<br/>   System.Out \"Digits\u00a0: \" &lt;&lt; l &lt;&lt; \" --&gt; RPN Expression for 24\u00a0: \" &lt;&lt; drop <br/>   System.Console accept -&gt;expr<br/>\u00a0<br/>   expr words forEach: w [<br/>      w \"+\" == ifTrue: [ + continue ]<br/>      w \"-\" == ifTrue: [ - continue ]<br/>      w \"*\" == ifTrue: [ * continue ]<br/>      w \"/\" == ifTrue: [ &gt;float / continue ]<br/>\u00a0<br/>      w &gt;integer dup -&gt;n  ifNull: [ System.Out \"Word \" &lt;&lt; w &lt;&lt; \" not allowed \" &lt;&lt; cr break ]<br/>      n l indexOf dup -&gt;i ifNull: [ System.Out \"Integer \" &lt;&lt; n &lt;&lt; \" is wrong \" &lt;&lt; cr break ]<br/>      n l put(i, null)<br/>      ]<br/>   #null? l conform? ifFalse: [ \"Sorry, all numbers must be used...\" . return ]<br/>   24 if=: [ \"You won\u00a0!\" ] else: [ \"You loose...\" ] .<br/>;</pre>"}, {"lang": "ooRexx", "loc": 68, "block": "<pre class=\"progress highlighted_source\"><span class=\"kw1\">DEFINE TEMP-TABLE</span> tt <span class=\"kw1\">NO-UNDO</span> <span class=\"kw4\">FIELD</span> ii <span class=\"kw3\">AS</span> <span class=\"kw3\">INTEGER</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> p_deanswer    <span class=\"kw3\">AS</span> <span class=\"kw3\">DECIMAL</span>     <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> idigits       <span class=\"kw3\">AS</span> <span class=\"kw3\">INTEGER</span>     <span class=\"kw1\">NO-UNDO</span> <span class=\"kw4\">EXTENT</span> <span class=\"nu0\">4</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> ii            <span class=\"kw3\">AS</span> <span class=\"kw3\">INTEGER</span>     <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> Digits        <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span>   <span class=\"kw1\">NO-UNDO</span> <span class=\"kw4\">FORMAT</span> <span class=\"st0\">\"x(7)\"</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> Answer        <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span>   <span class=\"kw1\">NO-UNDO</span> <span class=\"kw4\">FORMAT</span> <span class=\"st0\">\"x(7)\"</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> cexpression   <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span>   <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> cmessage      <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span>   <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> cchar         <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span>   <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> calculate <span class=\"kw1\">RETURNS</span> <span class=\"kw3\">LOGICAL</span> <span class=\"br0\">(</span><br/>   i_de <span class=\"kw3\">AS</span> <span class=\"kw3\">DECIMAL</span><br/><span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>   <span class=\"me0\">p_deanswer</span> <span class=\"sy0\">=</span> i_de<span class=\"sy0\">.</span><br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"coMULTI\">/* generate problem */</span><br/><span class=\"kw1\">DO</span> ii <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">4</span><span class=\"sy0\">:</span><br/>   <span class=\"kw1\">ASSIGN</span><br/>      idigits <span class=\"br0\">[</span>ii<span class=\"br0\">]</span>   <span class=\"sy0\">=</span>  <span class=\"kw3\">RANDOM</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>      Digits         <span class=\"sy0\">=</span>  Digits <span class=\"sy0\">+</span> <span class=\"kw1\">STRING</span><span class=\"br0\">(</span> idigits <span class=\"br0\">[</span>ii<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><br/>      <span class=\"sy0\">.</span><br/><span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"coMULTI\">/* ui */</span><br/><span class=\"kw1\">DISPLAY</span> Digits<span class=\"sy0\">.</span><br/><span class=\"kw1\">UPDATE</span> Answer<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"coMULTI\">/* check valid input */</span><br/><span class=\"kw1\">DO</span> ii <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">7</span><span class=\"sy0\">:</span><br/>   <span class=\"me0\">cchar</span> <span class=\"sy0\">=</span> <span class=\"kw1\">SUBSTRING</span><span class=\"br0\">(</span> Answer<span class=\"sy0\">,</span> ii<span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">IF</span> cchar <span class=\"sy0\">&gt;</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">DO</span><span class=\"sy0\">:</span><br/>      <span class=\"kw1\">IF</span> ii <span class=\"kw1\">MODULO</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">DO</span><span class=\"sy0\">:</span><br/>         <span class=\"kw1\">IF</span> <span class=\"kw2\">LOOKUP</span><span class=\"br0\">(</span> cchar<span class=\"sy0\">,</span> Digits<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>            cmessage <span class=\"sy0\">=</span> cmessage <span class=\"sy0\">+</span> <span class=\"kw3\">SUBSTITUTE</span><span class=\"br0\">(</span> <span class=\"st0\">\"Invalid digit: &amp;1.~r\"</span><span class=\"sy0\">,</span> cchar <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>         <span class=\"kw1\">ELSE</span> <br/>            <span class=\"kw1\">ENTRY</span><span class=\"br0\">(</span> <span class=\"kw2\">LOOKUP</span><span class=\"br0\">(</span> cchar<span class=\"sy0\">,</span> Digits<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> Digits<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">.</span><br/>      <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>      <span class=\"kw1\">ELSE</span> <span class=\"kw1\">DO</span><span class=\"sy0\">:</span><br/>         <span class=\"kw1\">IF</span> <span class=\"kw2\">LOOKUP</span><span class=\"br0\">(</span> cchar<span class=\"sy0\">,</span> <span class=\"st0\">\"+,-,/,*\"</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>            cmessage <span class=\"sy0\">=</span> cmessage <span class=\"sy0\">+</span> <span class=\"kw3\">SUBSTITUTE</span><span class=\"br0\">(</span> <span class=\"st0\">\"&amp;1 is not a valid operator.~r\"</span><span class=\"sy0\">,</span> cchar <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>      <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">IF</span> <span class=\"kw3\">TRIM</span><span class=\"br0\">(</span> Digits <span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">THEN</span><br/>   cmessage <span class=\"sy0\">=</span> cmessage <span class=\"sy0\">+</span> <span class=\"kw3\">SUBSTITUTE</span><span class=\"br0\">(</span> <span class=\"st0\">\"You did not use digits: &amp;1\"</span><span class=\"sy0\">:</span><span class=\"me0\">U</span><span class=\"sy0\">,</span> <span class=\"kw3\">TRIM</span><span class=\"br0\">(</span> Digits <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">IF</span> cmessage <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">DO</span><span class=\"sy0\">:</span><br/>   <span class=\"coMULTI\">/* expressions need spacing */</span><br/>   <span class=\"kw1\">DO</span> ii <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">7</span><span class=\"sy0\">:</span><br/>      <span class=\"me0\">cexpression</span> <span class=\"sy0\">=</span> cexpression <span class=\"sy0\">+</span> <span class=\"kw1\">SUBSTRING</span><span class=\"br0\">(</span> Answer<span class=\"sy0\">,</span> ii<span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>   <span class=\"coMULTI\">/* use dynamic query to parse expression */</span><br/>   <span class=\"kw1\">TEMP-TABLE</span> tt<span class=\"sy0\">:</span><span class=\"kw4\">DEFAULT-BUFFER-HANDLE</span><span class=\"sy0\">:</span><span class=\"kw2\">FIND-FIRST</span><span class=\"br0\">(</span> <br/>      <span class=\"kw3\">SUBSTITUTE</span><span class=\"br0\">(</span><br/>         <span class=\"st0\">\"WHERE NOT DYNAMIC-FUNCTION( 'calculate', DECIMAL( &amp;1 ) )\"</span><span class=\"sy0\">,</span><br/>         cexpression<br/>      <span class=\"br0\">)</span><br/>   <span class=\"br0\">)</span> <span class=\"kw1\">NO-ERROR</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">IF</span> p_deanswer <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">24</span> <span class=\"kw1\">THEN</span><br/>      cmessage <span class=\"sy0\">=</span> cmessage <span class=\"sy0\">+</span> <span class=\"kw3\">SUBSTITUTE</span><span class=\"br0\">(</span> <span class=\"st0\">\"The expression evaluates to &amp;1.\"</span><span class=\"sy0\">,</span> p_deanswer <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">ELSE</span> <br/>      cmessage <span class=\"sy0\">=</span> <span class=\"st0\">\"Solved!\"</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">MESSAGE</span> cmessage <span class=\"kw1\">VIEW-AS</span> <span class=\"kw1\">ALERT-BOX</span><span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "OpenEdge/Progress", "loc": 68, "block": "<pre class=\"progress highlighted_source\"><span class=\"kw1\">DEFINE TEMP-TABLE</span> tt <span class=\"kw1\">NO-UNDO</span> <span class=\"kw4\">FIELD</span> ii <span class=\"kw3\">AS</span> <span class=\"kw3\">INTEGER</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> p_deanswer    <span class=\"kw3\">AS</span> <span class=\"kw3\">DECIMAL</span>     <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> idigits       <span class=\"kw3\">AS</span> <span class=\"kw3\">INTEGER</span>     <span class=\"kw1\">NO-UNDO</span> <span class=\"kw4\">EXTENT</span> <span class=\"nu0\">4</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> ii            <span class=\"kw3\">AS</span> <span class=\"kw3\">INTEGER</span>     <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> Digits        <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span>   <span class=\"kw1\">NO-UNDO</span> <span class=\"kw4\">FORMAT</span> <span class=\"st0\">\"x(7)\"</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> Answer        <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span>   <span class=\"kw1\">NO-UNDO</span> <span class=\"kw4\">FORMAT</span> <span class=\"st0\">\"x(7)\"</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> cexpression   <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span>   <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> cmessage      <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span>   <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> cchar         <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span>   <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> calculate <span class=\"kw1\">RETURNS</span> <span class=\"kw3\">LOGICAL</span> <span class=\"br0\">(</span><br/>   i_de <span class=\"kw3\">AS</span> <span class=\"kw3\">DECIMAL</span><br/><span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>   <span class=\"me0\">p_deanswer</span> <span class=\"sy0\">=</span> i_de<span class=\"sy0\">.</span><br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"coMULTI\">/* generate problem */</span><br/><span class=\"kw1\">DO</span> ii <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">4</span><span class=\"sy0\">:</span><br/>   <span class=\"kw1\">ASSIGN</span><br/>      idigits <span class=\"br0\">[</span>ii<span class=\"br0\">]</span>   <span class=\"sy0\">=</span>  <span class=\"kw3\">RANDOM</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>      Digits         <span class=\"sy0\">=</span>  Digits <span class=\"sy0\">+</span> <span class=\"kw1\">STRING</span><span class=\"br0\">(</span> idigits <span class=\"br0\">[</span>ii<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><br/>      <span class=\"sy0\">.</span><br/><span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"coMULTI\">/* ui */</span><br/><span class=\"kw1\">DISPLAY</span> Digits<span class=\"sy0\">.</span><br/><span class=\"kw1\">UPDATE</span> Answer<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"coMULTI\">/* check valid input */</span><br/><span class=\"kw1\">DO</span> ii <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">7</span><span class=\"sy0\">:</span><br/>   <span class=\"me0\">cchar</span> <span class=\"sy0\">=</span> <span class=\"kw1\">SUBSTRING</span><span class=\"br0\">(</span> Answer<span class=\"sy0\">,</span> ii<span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">IF</span> cchar <span class=\"sy0\">&gt;</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">DO</span><span class=\"sy0\">:</span><br/>      <span class=\"kw1\">IF</span> ii <span class=\"kw1\">MODULO</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">DO</span><span class=\"sy0\">:</span><br/>         <span class=\"kw1\">IF</span> <span class=\"kw2\">LOOKUP</span><span class=\"br0\">(</span> cchar<span class=\"sy0\">,</span> Digits<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>            cmessage <span class=\"sy0\">=</span> cmessage <span class=\"sy0\">+</span> <span class=\"kw3\">SUBSTITUTE</span><span class=\"br0\">(</span> <span class=\"st0\">\"Invalid digit: &amp;1.~r\"</span><span class=\"sy0\">,</span> cchar <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>         <span class=\"kw1\">ELSE</span> <br/>            <span class=\"kw1\">ENTRY</span><span class=\"br0\">(</span> <span class=\"kw2\">LOOKUP</span><span class=\"br0\">(</span> cchar<span class=\"sy0\">,</span> Digits<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> Digits<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">.</span><br/>      <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>      <span class=\"kw1\">ELSE</span> <span class=\"kw1\">DO</span><span class=\"sy0\">:</span><br/>         <span class=\"kw1\">IF</span> <span class=\"kw2\">LOOKUP</span><span class=\"br0\">(</span> cchar<span class=\"sy0\">,</span> <span class=\"st0\">\"+,-,/,*\"</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>            cmessage <span class=\"sy0\">=</span> cmessage <span class=\"sy0\">+</span> <span class=\"kw3\">SUBSTITUTE</span><span class=\"br0\">(</span> <span class=\"st0\">\"&amp;1 is not a valid operator.~r\"</span><span class=\"sy0\">,</span> cchar <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>      <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">IF</span> <span class=\"kw3\">TRIM</span><span class=\"br0\">(</span> Digits <span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">THEN</span><br/>   cmessage <span class=\"sy0\">=</span> cmessage <span class=\"sy0\">+</span> <span class=\"kw3\">SUBSTITUTE</span><span class=\"br0\">(</span> <span class=\"st0\">\"You did not use digits: &amp;1\"</span><span class=\"sy0\">:</span><span class=\"me0\">U</span><span class=\"sy0\">,</span> <span class=\"kw3\">TRIM</span><span class=\"br0\">(</span> Digits <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">IF</span> cmessage <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">DO</span><span class=\"sy0\">:</span><br/>   <span class=\"coMULTI\">/* expressions need spacing */</span><br/>   <span class=\"kw1\">DO</span> ii <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">7</span><span class=\"sy0\">:</span><br/>      <span class=\"me0\">cexpression</span> <span class=\"sy0\">=</span> cexpression <span class=\"sy0\">+</span> <span class=\"kw1\">SUBSTRING</span><span class=\"br0\">(</span> Answer<span class=\"sy0\">,</span> ii<span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>   <span class=\"coMULTI\">/* use dynamic query to parse expression */</span><br/>   <span class=\"kw1\">TEMP-TABLE</span> tt<span class=\"sy0\">:</span><span class=\"kw4\">DEFAULT-BUFFER-HANDLE</span><span class=\"sy0\">:</span><span class=\"kw2\">FIND-FIRST</span><span class=\"br0\">(</span> <br/>      <span class=\"kw3\">SUBSTITUTE</span><span class=\"br0\">(</span><br/>         <span class=\"st0\">\"WHERE NOT DYNAMIC-FUNCTION( 'calculate', DECIMAL( &amp;1 ) )\"</span><span class=\"sy0\">,</span><br/>         cexpression<br/>      <span class=\"br0\">)</span><br/>   <span class=\"br0\">)</span> <span class=\"kw1\">NO-ERROR</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">IF</span> p_deanswer <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">24</span> <span class=\"kw1\">THEN</span><br/>      cmessage <span class=\"sy0\">=</span> cmessage <span class=\"sy0\">+</span> <span class=\"kw3\">SUBSTITUTE</span><span class=\"br0\">(</span> <span class=\"st0\">\"The expression evaluates to &amp;1.\"</span><span class=\"sy0\">,</span> p_deanswer <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">ELSE</span> <br/>      cmessage <span class=\"sy0\">=</span> <span class=\"st0\">\"Solved!\"</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">MESSAGE</span> cmessage <span class=\"kw1\">VIEW-AS</span> <span class=\"kw1\">ALERT-BOX</span><span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 45, "block": "<pre class=\"parigp highlighted_source\">game<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>v<span class=\"sy0\">=</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">4</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">8</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Form 24 using */+-() and: \"</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><br/>    my<span class=\"br0\">(</span>ans<span class=\"sy0\">=</span><span class=\"kw1\">input</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>valid<span class=\"br0\">(</span>s<span class=\"sy0\">,</span>v<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">next</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">trap</span><span class=\"br0\">(</span><span class=\"sy0\">,</span><br/>      <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Arithmetic error\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">next</span><br/>    <span class=\"sy0\">,</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">eval</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu1\">24</span><span class=\"sy0\">,</span> <span class=\"kw1\">break</span><span class=\"sy0\">,</span> <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Bad sum\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"You win!\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>valid<span class=\"br0\">(</span>s<span class=\"sy0\">,</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>op<span class=\"sy0\">=</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span><span class=\"st0\">\"+-*/()\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>u<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  s<span class=\"sy0\">=</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#s<span class=\"sy0\">,</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">setsearch</span><span class=\"br0\">(</span>op<span class=\"sy0\">,</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">next</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">trap</span><span class=\"br0\">(</span><span class=\"sy0\">,</span><br/>      <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Invalid character \"</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">setsearch</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span><span class=\"kw1\">eval</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        u<span class=\"sy0\">=</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span>u<span class=\"sy0\">,</span><span class=\"kw1\">eval</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"sy0\">,</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"st0\">\" not allowed\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>#s<span class=\"sy0\">,</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"kw1\">setsearch</span><span class=\"br0\">(</span>op<span class=\"sy0\">,</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;!</span><span class=\"kw1\">setsearch</span><span class=\"br0\">(</span>op<span class=\"sy0\">,</span>s<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>      <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Concatenating digits is not allowed!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span><span class=\"sy0\">!=</span>v<span class=\"sy0\">,</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Invalid digits\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"nu1\">0</span><br/>  <span class=\"sy0\">,</span><br/>    <span class=\"nu1\">1</span><br/>  <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 46, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/env perl</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> feature <span class=\"st_h\">'say'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"co4\">&lt;&lt;'EOF';<br/>The 24 Game<br/>\u00a0<br/>Given any four digits in the range 1 to 9, which may have repetitions,<br/>Using just the +, -, *, and / operators; and the possible use of<br/>parentheses, (), show how to make an answer of 24.<br/>\u00a0<br/>An answer of \"q\" or EOF will quit the game.<br/>A blank answer will generate a new set of four digits.<br/>Otherwise you are repeatedly asked for an expression until it evaluates to 24.<br/>\u00a0<br/>Note: you cannot form multiple digit numbers from the supplied digits,<br/>so an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.<br/>EOF</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$try</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">@digits</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">+</span><a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>  say <span class=\"st0\">\"<span class=\"es0\">\\n</span>Your four digits: \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <span class=\"re0\">@digits</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Expression (try \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$try</span><span class=\"sy0\">++,</span> <span class=\"st0\">\"): \"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$entry</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;&gt;;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$entry</span> <span class=\"sy0\">||</span> <span class=\"re0\">$entry</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'q'</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">{</span> say <span class=\"st0\">\"Goodbye.  Sorry you couldn't win.\"</span><span class=\"sy0\">;</span> <span class=\"kw1\">last</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"re0\">$entry</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/\\s+//g</span><span class=\"sy0\">;</span>  <span class=\"co1\"># remove all white space</span><br/>  <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$entry</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$given_digits</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <span class=\"re0\">@digits</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$entry_digits</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"co2\">/\\d/</span> <span class=\"br0\">}</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a><span class=\"br0\">(</span><span class=\"sy0\">//,</span> <span class=\"re0\">$entry</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$given_digits</span> <span class=\"kw1\">ne</span> <span class=\"re0\">$entry_digits</span> <span class=\"sy0\">||</span>  <span class=\"co1\"># not correct digits</span><br/>      <span class=\"re0\">$entry</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/\\d\\d/</span> <span class=\"sy0\">||</span>                <span class=\"co1\"># combined digits</span><br/>      <span class=\"re0\">$entry</span> <span class=\"sy0\">=~</span> <a href=\"http://perldoc.perl.org/functions/m.html\"><span class=\"kw3\">m</span></a><span class=\"sy0\">|</span><span class=\"br0\">[</span><span class=\"sy0\">-+*/</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy0\">|</span> <span class=\"sy0\">||</span>          <span class=\"co1\"># combined operators</span><br/>      <span class=\"re0\">$entry</span> <span class=\"sy0\">=~</span> <a href=\"http://perldoc.perl.org/functions/tr.html\"><span class=\"kw3\">tr</span></a><span class=\"sy0\">|-</span><span class=\"nu0\">0</span><span class=\"sy0\">-</span><span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">+*/||</span>c<span class=\"br0\">)</span>         <span class=\"co1\"># Invalid characters</span><br/>    <span class=\"br0\">{</span> say <span class=\"st0\">\"That's not valid\"</span><span class=\"sy0\">;</span>  <span class=\"kw1\">next</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/eval.html\"><span class=\"kw3\">eval</span></a> <span class=\"re0\">$entry</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span>    <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> say <span class=\"st0\">\"Invalid expression\"</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">elsif</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span>    <span class=\"br0\">{</span> say <span class=\"st0\">\"You win!\"</span><span class=\"sy0\">;</span> <span class=\"kw1\">last</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">else</span>                <span class=\"br0\">{</span> say <span class=\"st0\">\"Sorry, your expression is $n, not 24\"</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 27, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> MONKEY<span class=\"sy0\">-</span>SEE<span class=\"sy0\">-</span>NO<span class=\"sy0\">-</span>EVAL<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Here are your digits: \"</span><span class=\"sy0\">,</span> <br/><span class=\"kw1\">constant</span> <span class=\"re0\">@digits</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">roll</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">Str</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">grammar</span> Exp24 <span class=\"br0\">{</span><br/>    <span class=\"kw2\">token</span> TOP <span class=\"br0\">{</span> <span class=\"sy0\">^</span> <span class=\"sy0\">&lt;</span>exp<span class=\"sy0\">&gt;</span> $ <span class=\"br0\">{</span> <span class=\"kw1\">fail</span> <span class=\"kw1\">unless</span> EVAL<span class=\"br0\">(</span>$<span class=\"sy0\">/</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">24</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">rule</span> <span class=\"kw3\">exp</span> <span class=\"br0\">{</span> <span class=\"sy0\">&lt;</span>term<span class=\"sy0\">&gt;+</span> <span class=\"sy0\">%</span> <span class=\"sy0\">&lt;</span>op<span class=\"sy0\">&gt;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">rule</span> term <span class=\"br0\">{</span> <span class=\"st_h\">'('</span> <span class=\"sy0\">&lt;</span>exp<span class=\"sy0\">&gt;</span> <span class=\"st_h\">')'</span> <span class=\"sy0\">|</span> <span class=\"sy0\">&lt;</span><span class=\"re0\">@digits</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">token</span> op <span class=\"br0\">{</span> <span class=\"sy0\">&lt;</span> <span class=\"sy0\">+</span> <span class=\"sy0\">-</span> <span class=\"sy0\">*</span> <span class=\"sy0\">/</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"kw1\">my</span> <span class=\"re0\">$exp</span> <span class=\"sy0\">=</span> prompt <span class=\"st0\">\"<span class=\"es0\">\\n</span>24? \"</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> try Exp24<span class=\"sy0\">.</span><span class=\"me1\">parse</span><span class=\"sy0\">:</span> <span class=\"re0\">$exp</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">say</span> <span class=\"st0\">\"You win\u00a0:)\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">last</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">say</span> <span class=\"br0\">(</span><br/>            <span class=\"st_h\">'Sorry.  Try again.'</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span><br/>            <span class=\"st_h\">'Try harder.'</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span><br/>            <span class=\"st_h\">'Nope.  Not even close.'</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span><br/>            <span class=\"st_h\">'Are you five or something?'</span><span class=\"sy0\">,</span><br/>            <span class=\"st_h\">'Come on, you can do better than that.'</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">flat</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Phix", "loc": 179, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>-- Note this uses simple/strict left association, so for example:<br/>--  1+2*1*8 is ((1+2)*1)*8 not 1+((2*1)*8) [or 1+(2*(1*8))], and<br/>--  7-(2*2)*8 is (7-(2*2))*8 not 7-((2*2)*8)<br/>--  Does not allow unary minus on the first digit.<br/>-- Uses solve24() from the next task, when it can.<br/>--  (you may want to comment out the last 2 lines/uncomment the if 0, in that file)<br/>--<br/>--include 24_game_solve.exw<br/>\u00a0<br/>--with trace<br/>forward function eval(string equation, sequence unused, integer idx=1)<br/>-- (the above definition is entirely optional, but good coding style)<br/>\u00a0<br/>constant errorcodes = {\"digit expected\",                    -- 1<br/>                       \"')' expected\",                      -- 2<br/>                       \"digit already used\",                -- 3<br/>                       \"digit not offered\",                 -- 4<br/>                       \"operand expected\"}                  -- 5<br/>\u00a0<br/>function card(integer idx)  -- (for error handling)<br/>    if idx=1 then return \"1st\" end if<br/>    if idx=2 then return \"2nd\" end if<br/>    -- (assumes expression is less than 21 characters)<br/>    return sprintf(\"%dth\",idx)<br/>end function<br/>\u00a0<br/>function errorchar(sequence equation, integer idx)<br/>    if idx&gt;length(equation) then return \"\" end if<br/>    return sprintf(\"(%s)\",equation[idx])<br/>end function<br/>\u00a0<br/>sequence rset = repeat(0,4)<br/>\u00a0<br/>procedure new_rset()<br/>    for i=1 to length(rset) do<br/>        rset[i] = rand(9)<br/>    end for<br/>end procedure<br/>\u00a0<br/>function get_operand(string equation, integer idx, sequence unused)<br/>integer ch, k,<br/>        error = 1 -- \"digit expected\"<br/>atom res<br/>\u00a0<br/>    if idx&lt;=length(equation) then<br/>        ch = equation[idx]<br/>        if ch='(' then<br/>            {error,res,unused,idx} = eval(equation,unused,idx+1)<br/>            if error=0<br/>            and idx&lt;=length(equation) then<br/>                ch = equation[idx]<br/>                if ch=')' then<br/>                    return {0,res,unused,idx+1}<br/>                end if<br/>            end if<br/>            if error=0 then<br/>                error = 2   -- \"')' expected\"<br/>            end if<br/>        elsif ch&gt;='0' and ch&lt;='9' then<br/>            res = ch-'0'<br/>            k = find(res,unused)<br/>            if k!=0 then<br/>                unused[k..k] = {}<br/>                return {0,res,unused,idx+1}<br/>            end if<br/>            if find(res,rset) then<br/>                error = 3  -- \"digit already used\"<br/>            else<br/>                error = 4  -- \"digit not offered\"<br/>            end if<br/>        end if<br/>    end if<br/>    return {error,0,unused,idx}<br/>end function<br/>\u00a0<br/>function get_operator(string equation, integer idx)<br/>integer ch, error = 5 -- \"operand expected\"<br/>    if idx&lt;=length(equation) then<br/>        ch = equation[idx]<br/>        if find(ch,\"+-/*\") then<br/>            return {0,ch,idx+1}<br/>        end if<br/>    end if<br/>    return {error,0,idx}<br/>end function<br/>\u00a0<br/>function eval(string equation, sequence unused, integer idx=1)<br/>atom lhs, rhs<br/>integer ch, error<br/>    {error,lhs,unused,idx} = get_operand(equation,idx,unused)<br/>    if error=0 then<br/>        while 1 do<br/>            {error,ch,idx} = get_operator(equation,idx)<br/>            if error!=0 then exit end if<br/>            {error,rhs,unused,idx} = get_operand(equation,idx,unused)<br/>            if error!=0 then exit end if<br/>            if    ch='+' then       lhs += rhs<br/>            elsif ch='-' then       lhs -= rhs<br/>            elsif ch='/' then       lhs /= rhs<br/>            elsif ch='*' then       lhs *= rhs<br/>            else\u00a0?9/0 -- (should not happen)<br/>            end if<br/>            if idx&gt;length(equation) then<br/>                return {0,lhs,unused,idx}<br/>            end if<br/>            ch = equation[idx]<br/>            if ch=')' then<br/>                return {0,lhs,unused,idx}<br/>            end if<br/>        end while<br/>    end if<br/>    return {error,0,unused,idx}<br/>end function<br/>\u00a0<br/>function strip(string equation)<br/>    for i=length(equation) to 1 by -1 do<br/>        if find(equation[i],\" \\t\\r\\n\") then<br/>            equation[i..i] = \"\"<br/>        end if<br/>    end for<br/>    return equation<br/>end function<br/>\u00a0<br/>function strip0(atom a) -- (for error handling)<br/>string res = sprintf(\"%f\",a)<br/>integer ch<br/>    for i=length(res) to 2 by -1 do<br/>        ch = res[i]<br/>        if ch='.' then return res[1..i-1] end if<br/>        if ch!='0' then return res[1..i] end if<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>procedure play()<br/>sequence unused<br/>string equation<br/>integer error,idx<br/>atom res<br/>\u00a0<br/>    new_rset()<br/>    printf(1,\"Enter an expression which evaluates to exactly 24\\n\"&amp;<br/>           \"Use all of, and only, the digits\u00a0%d,\u00a0%d,\u00a0%d, and\u00a0%d\\n\"&amp;<br/>           \"You may only use the operators + - * /\\n\"&amp;<br/>           \"Parentheses and spaces are allowed\\n\",rset)<br/>    while 1 do<br/>        equation = strip(gets(0))<br/>        if upper(equation)=\"Q\" then exit end if<br/>        if equation=\"?\" then<br/>            puts(1,\"\\n\")<br/>            integer r_solve24 = routine_id(\"solve24\") -- see below<br/>            if r_solve24=-1 then -- (someone copied just this code out?)<br/>                puts(1,\"no solve24 routine\\n\")<br/>            else<br/>                call_proc(r_solve24,{rset})<br/>            end if<br/>        else<br/>            {error,res,unused,idx} = eval(equation, rset)<br/>            if error!=0 then<br/>                printf(1,\" \u00a0%s on the\u00a0%s character%s\\n\",{errorcodes[error],card(idx),errorchar(equation,idx)})<br/>            elsif idx&lt;=length(equation) then<br/>                printf(1,\"\\neval() returned only having processed\u00a0%d of\u00a0%d characters\\n\",{idx,length(equation)})<br/>            elsif length(unused) then<br/>                printf(1,\" not all the digits were used\\n\",error)<br/>            elsif res!=24 then<br/>                printf(1,\"\\nresult is\u00a0%s, not 24\\n\",{strip0(res)})<br/>            else<br/>                puts(1,\" correct!  Press any key to quit\\n\")<br/>                if getc(0) then end if<br/>                exit<br/>            end if<br/>        end if<br/>        puts(1,\"enter Q to give up and quit\\n\")<br/>    end while<br/>end procedure<br/>\u00a0<br/>    play()<br/>\u00a0</pre>"}, {"lang": "PHP", "loc": 94, "block": "<pre class=\"php highlighted_source\">#!/usr/bin/env php<br/>The 24 Game<br/>\u00a0<br/>Given any four digits in the range 1 to 9, which may have repetitions,<br/>Using just the +, -, *, and / operators; and the possible use of<br/>brackets, (), show how to make an answer of 24.<br/>\u00a0<br/>An answer of \"q\" will quit the game.<br/>An answer of \"!\" will generate a new set of four digits.<br/>Otherwise you are repeatedly asked for an expression until it evaluates to 24<br/>\u00a0<br/>Note: you cannot form multiple digit numbers from the supplied digits,<br/>so an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.<br/>\u00a0<br/><span class=\"kw2\">&lt;?php</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw4\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$numbers</span> <span class=\"sy0\">=</span> make_numbers<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$iteration_num</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"sy0\">;</span> <span class=\"re0\">$iteration_num</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">echo</span> <span class=\"st0\">\"Expresion <span class=\"es4\">$iteration_num</span>: \"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"re0\">$entry</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/rtrim\"><span class=\"kw3\">rtrim</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/fgets\"><span class=\"kw3\">fgets</span></a><span class=\"br0\">(</span>STDIN<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$entry</span> <span class=\"sy0\">===</span> <span class=\"st_h\">'!'</span><span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$entry</span> <span class=\"sy0\">===</span> <span class=\"st_h\">'q'</span><span class=\"br0\">)</span> <a href=\"http://www.php.net/exit\"><span class=\"kw3\">exit</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"re0\">$result</span> <span class=\"sy0\">=</span> play<span class=\"br0\">(</span><span class=\"re0\">$numbers</span><span class=\"sy0\">,</span> <span class=\"re0\">$entry</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$result</span> <span class=\"sy0\">===</span> <span class=\"kw4\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">echo</span> <span class=\"st0\">\"That's not valid<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">elseif</span> <span class=\"br0\">(</span><span class=\"re0\">$result</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">echo</span> <span class=\"st0\">\"Sorry, that's <span class=\"es4\">$result</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">echo</span> <span class=\"st0\">\"That's right! 24!!<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.php.net/exit\"><span class=\"kw3\">exit</span></a><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> make_numbers<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$numbers</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">echo</span> <span class=\"st0\">\"Your four digits: \"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$number</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/rand\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">// The check is needed to avoid E_NOTICE from PHP</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.php.net/isset\"><span class=\"kw3\">isset</span></a><span class=\"br0\">(</span><span class=\"re0\">$numbers</span><span class=\"br0\">[</span><span class=\"re0\">$number</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$numbers</span><span class=\"br0\">[</span><span class=\"re0\">$number</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"re0\">$numbers</span><span class=\"br0\">[</span><span class=\"re0\">$number</span><span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"<span class=\"es4\">$number</span> \"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$numbers</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> play<span class=\"br0\">(</span><span class=\"re0\">$numbers</span><span class=\"sy0\">,</span> <span class=\"re0\">$expression</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$operator</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$length</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$expression</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$length</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$character</span> <span class=\"sy0\">=</span> <span class=\"re0\">$expression</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/in_array\"><span class=\"kw3\">in_array</span></a><span class=\"br0\">(</span><span class=\"re0\">$character</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st_h\">'('</span><span class=\"sy0\">,</span> <span class=\"st_h\">')'</span><span class=\"sy0\">,</span> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"re0\">$operator</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span><span class=\"re0\">$operator</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"re0\">$operator</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.php.net/empty\"><span class=\"kw3\">empty</span></a><span class=\"br0\">(</span><span class=\"re0\">$numbers</span><span class=\"br0\">[</span><span class=\"re0\">$character</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$numbers</span><span class=\"br0\">[</span><span class=\"re0\">$character</span><span class=\"br0\">]</span><span class=\"sy0\">--;</span><br/>                <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">elseif</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.php.net/in_array\"><span class=\"kw3\">in_array</span></a><span class=\"br0\">(</span><span class=\"re0\">$character</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st_h\">'+'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'-'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'*'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'/'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$numbers</span> <span class=\"kw1\">as</span> <span class=\"re0\">$remaining</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$remaining</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <a href=\"http://www.php.net/eval\"><span class=\"kw3\">eval</span></a><span class=\"br0\">(</span><span class=\"st0\">\"return <span class=\"es4\">$expression</span>;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 31, "block": "<pre class=\"text highlighted_source\">(de checkExpression (Lst Exe)<br/>   (make<br/>      (when (diff Lst (fish num? Exe))<br/>         (link \"Not all numbers used\" ) )<br/>      (when (diff (fish num? Exe) Lst)<br/>         (link \"Using wrong number(s)\") )<br/>      (when (diff (fish sym? Exe) '(+ - * /))<br/>         (link \"Using illegal operator(s)\") ) ) )<br/>\u00a0<br/>(loop<br/>   (setq Numbers (make (do 4 (link (rand 1 9)))))<br/>   (prinl<br/>      \"Please enter a Lisp expression using (, ), +, -, *, / and \"<br/>      (glue \", \" Numbers) )<br/>   (prin \"Or a single dot '.' to stop: \")<br/>   (T (= \".\" (setq Reply (catch '(NIL) (in NIL (read)))))<br/>      (bye) )<br/>   (cond<br/>      ((str? Reply)<br/>         (prinl \"-- Input error: \" Reply) )<br/>      ((checkExpression Numbers Reply)<br/>         (prinl \"-- Illegal Expression\")<br/>         (for S @<br/>            (space 3)<br/>            (prinl S) ) )<br/>      ((str? (setq Result (catch '(NIL) (eval Reply))))<br/>         (prinl \"-- Evaluation error: \" @) )<br/>      ((= 24 Result)<br/>         (prinl \"++ Congratulations! Correct result\u00a0:-)\") )<br/>      (T (prinl \"Sorry, this gives \" Result)) )<br/>   (prinl) )</pre>"}, {"lang": "PL/I", "loc": 138, "block": "<pre class=\"pli highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* Plays the game of 24. */</span><br/>\u00a0<br/>TWENTYFOUR<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"kw1\">options</span> <span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>            <span class=\"coMULTI\">/* 14 August 2010 */</span><br/>\u00a0<br/>CTP<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>E<span class=\"br0\">)</span> <span class=\"kw1\">returns</span> <span class=\"br0\">(</span><span class=\"kw1\">character</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"kw1\">varying</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> E <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">varying</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> OUT <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span><span class=\"br0\">(</span>E<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">varying</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> S <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span><span class=\"br0\">(</span>E<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">varying</span> <span class=\"kw1\">controlled</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> c <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> i <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* This procedure converts an arithmetic expression to Reverse Polish Form. */</span><br/><span class=\"coMULTI\">/* A push-down pop-up stack is used for operators. */</span><br/><span class=\"kw1\">priority</span><span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">returns</span> <span class=\"br0\">(</span><span class=\"kw1\">fixed</span> <span class=\"kw1\">decimal</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> a <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> ops <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">initial</span> <span class=\"br0\">(</span><span class=\"st0\">'#+-*/'</span><span class=\"br0\">)</span> <span class=\"kw1\">varying</span> <span class=\"kw1\">static</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> pri<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">decimal</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">initial</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">static</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> i <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   i <span class=\"sy0\">=</span> <span class=\"kw1\">index</span><span class=\"br0\">(</span>ops<span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span>pri<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">priority</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">allocate</span> S<span class=\"sy0\">;</span> S <span class=\"sy0\">=</span> <span class=\"st0\">'#'</span><span class=\"sy0\">;</span> out <span class=\"sy0\">=</span> <span class=\"st0\">''</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span>E<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      c <span class=\"sy0\">=</span> <span class=\"kw1\">substr</span><span class=\"br0\">(</span>E<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw1\">index</span><span class=\"br0\">(</span><span class=\"st0\">'+-*/'</span><span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">do</span><span class=\"sy0\">;</span><br/>            <span class=\"coMULTI\">/* Copy any higher priority operators on the stack to the output. */</span><br/>            <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span> <span class=\"kw1\">priority</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"kw1\">priority</span><span class=\"br0\">(</span><span class=\"br0\">(</span>S<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>               out <span class=\"sy0\">=</span> out <span class=\"sy0\">||</span> S<span class=\"sy0\">;</span><br/>               <span class=\"kw1\">free</span> S<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>            <span class=\"coMULTI\">/* Copy the input character to the stack. */</span><br/>            <span class=\"kw1\">allocate</span> S<span class=\"sy0\">;</span> S <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span><br/>         <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span> <span class=\"kw1\">index</span><span class=\"br0\">(</span><span class=\"st0\">'123456789'</span><span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>         out <span class=\"sy0\">=</span> out <span class=\"sy0\">||</span> c<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">allocation</span><span class=\"br0\">(</span>S<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      out <span class=\"sy0\">=</span> out <span class=\"sy0\">||</span> s<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">free</span> S<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span>out<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> CTP<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Given a push-down pop-up stack, and an expresion in  */</span><br/><span class=\"coMULTI\">/* Reverse Polish notation, evaluate the expression.    */</span><br/>EVAL<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>E<span class=\"br0\">)</span> <span class=\"kw1\">returns</span> <span class=\"br0\">(</span><span class=\"kw1\">fixed</span> <span class=\"kw1\">decimal</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> E <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">varying</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> S <span class=\"kw1\">fixed</span> <span class=\"kw1\">decimal</span> <span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"kw1\">controlled</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">decimal</span> <span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> c <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> p <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>empty_stack<span class=\"sy0\">,</span> invalid_expression<span class=\"br0\">)</span> <span class=\"kw1\">condition</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">on</span> <span class=\"kw1\">condition</span> <span class=\"br0\">(</span>empty_stack<span class=\"br0\">)</span> <span class=\"kw1\">begin</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'Your expression is not valid.'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">stop</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">on</span> <span class=\"kw1\">condition</span> <span class=\"br0\">(</span>invalid_expression<span class=\"br0\">)</span> <span class=\"kw1\">begin</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'Your expression is not valid.'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">stop</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">do</span> p <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span>E<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      c <span class=\"sy0\">=</span> <span class=\"kw1\">substr</span><span class=\"br0\">(</span>E<span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw1\">index</span><span class=\"br0\">(</span><span class=\"st0\">'123456789'</span><span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">do</span><span class=\"sy0\">;</span> <span class=\"kw1\">allocate</span> S<span class=\"sy0\">;</span> S <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span> <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">else</span><br/>         <span class=\"kw1\">do</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw1\">allocation</span><span class=\"br0\">(</span>S<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">signal</span> <span class=\"kw1\">condition</span> <span class=\"br0\">(</span>empty_stack<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            b <span class=\"sy0\">=</span> S<span class=\"sy0\">;</span> <span class=\"kw1\">free</span> S<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw1\">allocation</span><span class=\"br0\">(</span>S<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">signal</span> <span class=\"kw1\">condition</span> <span class=\"br0\">(</span>empty_stack<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            a <span class=\"sy0\">=</span> S<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">select</span> <span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>               <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"st0\">'+'</span><span class=\"br0\">)</span> S <span class=\"sy0\">=</span> a <span class=\"sy0\">+</span> b<span class=\"sy0\">;</span> <br/>               <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"st0\">'-'</span><span class=\"br0\">)</span> S <span class=\"sy0\">=</span> a <span class=\"sy0\">-</span> b<span class=\"sy0\">;</span><br/>               <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"st0\">'*'</span><span class=\"br0\">)</span> S <span class=\"sy0\">=</span> a <span class=\"sy0\">*</span> b<span class=\"sy0\">;</span><br/>               <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"st0\">'/'</span><span class=\"br0\">)</span> S <span class=\"sy0\">=</span> a <span class=\"sy0\">/</span> b<span class=\"sy0\">;</span><br/>               <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"st0\">'^'</span><span class=\"br0\">)</span> S <span class=\"sy0\">=</span> a <span class=\"sy0\">**</span> b<span class=\"sy0\">;</span><br/>               <span class=\"kw1\">otherwise</span> <span class=\"kw1\">signal</span> <span class=\"kw1\">condition</span> <span class=\"br0\">(</span>invalid_expression<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span> <span class=\"kw1\">allocation</span><span class=\"br0\">(</span>S<span class=\"br0\">)</span> <span class=\"sy0\">^=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">signal</span> <span class=\"kw1\">condition</span> <span class=\"br0\">(</span>invalid_expression<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span>S<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">END</span> eval<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Check that the player has used every digit and no others. */</span><br/>VALIDATE<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>E<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> E <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">varying</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> E2 <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span><span class=\"br0\">(</span>E<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> digits<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">static</span> <span class=\"kw1\">initial</span><br/>      <span class=\"br0\">(</span><span class=\"st0\">'1'</span><span class=\"sy0\">,</span> <span class=\"st0\">'2'</span><span class=\"sy0\">,</span> <span class=\"st0\">'3'</span><span class=\"sy0\">,</span> <span class=\"st0\">'4'</span><span class=\"sy0\">,</span> <span class=\"st0\">'5'</span><span class=\"sy0\">,</span> <span class=\"st0\">'6'</span><span class=\"sy0\">,</span> <span class=\"st0\">'7'</span><span class=\"sy0\">,</span> <span class=\"st0\">'8'</span><span class=\"sy0\">,</span> <span class=\"st0\">'9'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   E2 <span class=\"sy0\">=</span> <span class=\"kw1\">translate</span><span class=\"br0\">(</span>E<span class=\"sy0\">,</span> <span class=\"st0\">'    '</span><span class=\"sy0\">,</span> <span class=\"st0\">'+-*/'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>      j <span class=\"sy0\">=</span> <span class=\"kw1\">index</span><span class=\"br0\">(</span>E2<span class=\"sy0\">,</span> digits<span class=\"br0\">(</span>k<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> j <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">substr</span><span class=\"br0\">(</span>E2<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">else</span><br/>         <span class=\"kw1\">do</span><span class=\"sy0\">;</span> <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'You must use the digits supplied.'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">stop</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span> E2 <span class=\"sy0\">^=</span> <span class=\"st0\">''</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">do</span><span class=\"sy0\">;</span> <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'You must use every digit supplied, and no others.'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">stop</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> VALIDATE<span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">declare</span> E <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span> <span class=\"kw1\">varying</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> k<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">decimal</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span><span class=\"kw1\">time</span><span class=\"sy0\">,</span> <span class=\"kw1\">random</span><span class=\"br0\">)</span> <span class=\"kw1\">builtin</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> V <span class=\"kw1\">fixed</span> <span class=\"kw1\">decimal</span> <span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   k <span class=\"sy0\">=</span> <span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"kw1\">TIME</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   k <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><span class=\"sy0\">*</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span><span class=\"st0\">'Here are four integers:'</span><span class=\"sy0\">,</span> k<span class=\"br0\">)</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'With these integers, make up an arithmetic expression'</span> <span class=\"sy0\">||</span><br/>      <span class=\"st0\">' that evaluates to 24.'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'You can use any of the operators +, -, *, and /'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'E.g., Given the integers 1, 3, 7, and 6,'</span> <span class=\"sy0\">||</span><br/>      <span class=\"st0\">' the expression 6*3+7-1 evaluates to 24.'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'Please type an arithmetic expression\u00a0:'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">get</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span>E<span class=\"br0\">)</span> <span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"kw1\">COPY</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">CALL</span> VALIDATE <span class=\"br0\">(</span>E<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* Check that the player has used every digit and no others. */</span><br/>\u00a0<br/>   E <span class=\"sy0\">=</span> CTP<span class=\"br0\">(</span>E<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   V <span class=\"sy0\">=</span> EVAL <span class=\"br0\">(</span>E<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span> V <span class=\"sy0\">=</span> <span class=\"nu0\">24</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'Congratulations: the expression evaluates to 24.'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span><span class=\"st0\">'The result is '</span><span class=\"sy0\">,</span> <span class=\"kw1\">trim</span><span class=\"br0\">(</span>V<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">' which is not correct'</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span> TWENTYFOUR<span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Potion", "loc": 40, "block": "<pre class=\"text highlighted_source\">is_num = (s):<br/>  x = s ord(0)<br/>  if (x &gt;= \"0\"ord &amp;&amp; x &lt;= \"9\"ord): true.<br/>  else: false.<br/>  .<br/>\u00a0<br/>nums = (s):<br/>  res = ()<br/>  0 to (s length, (b):<br/>    c = s(b)<br/>    if (is_num(c)):<br/>      res push(c).<br/>  .)<br/>  res.<br/>\u00a0<br/>try = 1<br/>while (true):<br/>  r = rand string<br/>  digits = (r(0),r(1),r(2),r(3))<br/>  \"\\nMy next four digits: \" print<br/>  digits join(\" \") say<br/>  digit_s = digits ins_sort string<br/>\u00a0<br/>  (\"Your expression to create 24 (try \", try, \"): \") print<br/>  entry = read slice(0,-1)<br/>  expr = entry eval<br/>  parse = nums(entry)<br/>  parse_s = parse clone ins_sort string<br/>  try++<br/>  if (parse length\u00a0!= 4):<br/>    (\"Wrong number of digits:\", parse) say.<br/>  elsif (parse_s\u00a0!= digit_s):<br/>    (\"Wrong digits:\", parse) say.<br/>  elsif (expr == 24):<br/>    \"You won!\" say<br/>    entry print, \" =&gt; 24\" say<br/>    return().<br/>  else:<br/>    (entry, \" =&gt; \", expr string, \"\u00a0!= 24\") join(\"\") say.<br/>.</pre>"}, {"lang": "PowerShell", "loc": 75, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw2\">CLS</span><br/>\u00a0<br/><span class=\"kw3\">Function</span> isNumeric <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"re0\">$x2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>    <br/>    <span class=\"re0\">$isNum</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>System.Int32<span class=\"br0\">]</span>::TryParse<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"re3\">ref</span><span class=\"br0\">]</span><span class=\"re0\">$x2</span><span class=\"br0\">)</span><br/><span class=\"kw3\">Return</span> <span class=\"re0\">$isNum</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$NumberArray</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw3\">While</span><span class=\"br0\">(</span> <span class=\"re0\">$NumberArray</span>.Count <span class=\"kw4\">-lt</span> <span class=\"nu0\">4</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"re0\">$NumberArray</span> <span class=\"sy0\">+=</span> Random <span class=\"kw5\">-Minimum</span> <span class=\"nu0\">1</span> <span class=\"kw5\">-Maximum</span> <span class=\"nu0\">10</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">Write-Host</span> <span class=\"sy0\">@</span><span class=\"st0\">\"<br/>Welcome to the 24 game!<br/>\u00a0<br/>Here are your numbers: $($NumberArray -join \"</span><span class=\"sy0\">,</span><span class=\"st0\">\").<br/>Use division, multiplication, subtraction and addition to get 24 as a result with these 4 numbers.<br/>\"</span><span class=\"sy0\">@</span><br/>\u00a0<br/><span class=\"kw3\">Do</span><br/><span class=\"br0\">{</span><br/><span class=\"re0\">$Wrong</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"re0\">$EndResult</span> <span class=\"sy0\">=</span> <span class=\"re0\">$null</span><br/><span class=\"re0\">$TempChar</span> <span class=\"sy0\">=</span> <span class=\"re0\">$null</span><br/><span class=\"re0\">$TempChar2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$null</span><br/><span class=\"re0\">$Count</span> <span class=\"sy0\">=</span> <span class=\"re0\">$null</span><br/>\u00a0<br/><span class=\"re0\">$AllowableCharacters</span> <span class=\"sy0\">=</span> <span class=\"re0\">$NumberArray</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"+-*/()\"</span>.ToCharArray<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"re0\">$Result</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Read-Host</span><br/>        <span class=\"kw3\">Foreach</span><span class=\"br0\">(</span><span class=\"re0\">$Char</span> <span class=\"kw3\">in</span> <span class=\"re0\">$Result</span>.ToCharArray<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw3\">If</span><span class=\"br0\">(</span> <span class=\"re0\">$AllowableCharacters</span> <span class=\"kw4\">-notcontains</span> <span class=\"re0\">$Char</span> <span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"re0\">$Wrong</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw3\">If</span><span class=\"br0\">(</span><span class=\"re0\">$Wrong</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">Write-Warning</span> <span class=\"st0\">\"Wrong input! Please use only the given numbers.\"</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">Foreach</span><span class=\"br0\">(</span><span class=\"re0\">$Char</span> <span class=\"kw3\">in</span> <span class=\"re0\">$Result</span>.ToCharArray<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw3\">If</span><span class=\"br0\">(</span><span class=\"br0\">(</span>IsNumeric <span class=\"re0\">$TempChar</span><span class=\"br0\">)</span> <span class=\"kw4\">-AND</span> <span class=\"br0\">(</span>IsNumeric <span class=\"re0\">$Char</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">Write-Warning</span> <span class=\"st0\">\"Wrong input! Combining two or more numbers together is not allowed!\"</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"re0\">$TempChar</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Char</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">Foreach</span><span class=\"br0\">(</span><span class=\"re0\">$Char</span> <span class=\"kw3\">in</span> <span class=\"re0\">$Result</span>.ToCharArray<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw3\">If</span><span class=\"br0\">(</span>IsNumeric <span class=\"re0\">$Char</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"re0\">$Count</span><span class=\"sy0\">++</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">If</span><span class=\"br0\">(</span><span class=\"re0\">$Count</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"re0\">$EndResult</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Invoke-Expression</span> <span class=\"re0\">$Result</span><br/>                <span class=\"kw3\">If</span><span class=\"br0\">(</span><span class=\"re0\">$EndResult</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">Write-Host</span> <span class=\"st0\">\"<span class=\"es0\">`n</span>You've won the game!\"</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw3\">Else</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">Write-Host</span> <span class=\"st0\">\"<span class=\"es0\">`n</span>$EndResult is not 24! Too bad.\"</span><br/>                <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">Else</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">Write-Warning</span> <span class=\"st0\">\"Wrong input! You did not supply four numbers.\"</span><br/>        <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">While</span><span class=\"br0\">(</span><span class=\"re0\">$EndResult</span> <span class=\"kw4\">-ne</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "ProDOS", "loc": 11, "block": "<pre class=\"text highlighted_source\">:a<br/>editvar /modify -random- = &lt;10<br/>printline These are your four digits: -random- -random- -random- -random-<br/>printline Use an algorithm to make the number 24.<br/>editvar /newvar /value=a /userinput=1 /title=Algorithm:<br/>do -a-<br/>if -a- /hasvalue 24 printline Your algorithm worked! &amp; goto\u00a0:b (<br/>) else printline Your algorithm did not work.<br/>:b <br/>editvar /newvar /value=b /userinput=1 /title=Do you want to play again?<br/>if -b- /hasvalue y goto\u00a0:a else exitcurrentprogram</pre>"}, {"lang": "Prolog", "loc": 30, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">initialization</span></a><span class=\"br0\">(</span>main<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>answer<span class=\"br0\">(</span><span class=\"nu0\">24</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>play <span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">round</span></a><span class=\"sy4\">,</span> play <span class=\"sy4\">;</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"sy4\">.</span><br/>\u00a0<br/><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">round</span></a> <span class=\"sy1\">:-</span><br/>    prompt<span class=\"br0\">(</span>Ns<span class=\"br0\">)</span><span class=\"sy4\">,</span> get_line<span class=\"br0\">(</span>Input<span class=\"br0\">)</span><span class=\"sy4\">,</span> Input \\<span class=\"sy6\">=</span> \"stop\"<br/>  <span class=\"sy4\">,</span> <span class=\"br0\">(</span> phrase<span class=\"br0\">(</span>parse<span class=\"br0\">(</span>Ns<span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> Input<span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> Result <span class=\"sy6\">=</span> <span class=\"st_h\">'correct'</span><br/>                                   <span class=\"sy4\">;</span> Result <span class=\"sy6\">=</span> <span class=\"st_h\">'wrong'</span><br/>    <span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span>Result<span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><br/>  <span class=\"sy4\">.</span> <span class=\"co1\">% where</span><br/>    prompt<span class=\"br0\">(</span>Ns<span class=\"br0\">)</span>  <span class=\"sy1\">:-</span> length<span class=\"br0\">(</span>Ns<span class=\"sy4\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> maplist<span class=\"br0\">(</span>random<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> Ns<span class=\"br0\">)</span><br/>                 <span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span><span class=\"st_h\">'Digits: '</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span>Ns<span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><br/>                 <span class=\"sy4\">.</span><br/>\u00a0<br/>parse<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>X<span class=\"br0\">]</span><span class=\"br0\">)</span>     <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">{</span> answer<span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy4\">.</span><br/>parse<span class=\"br0\">(</span>Ns<span class=\"sy4\">,</span><span class=\"br0\">[</span>Y<span class=\"sy4\">,</span>X<span class=\"sy5\">|</span>S<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> \"<span class=\"sy3\">+</span>\"<span class=\"sy4\">,</span> <span class=\"br0\">{</span> Z <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X  <span class=\"sy3\">+</span>  Y <span class=\"br0\">}</span><span class=\"sy4\">,</span> parse<span class=\"br0\">(</span>Ns<span class=\"sy4\">,</span><span class=\"br0\">[</span>Z<span class=\"sy5\">|</span>S<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>parse<span class=\"br0\">(</span>Ns<span class=\"sy4\">,</span><span class=\"br0\">[</span>Y<span class=\"sy4\">,</span>X<span class=\"sy5\">|</span>S<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> \"<span class=\"sy3\">-</span>\"<span class=\"sy4\">,</span> <span class=\"br0\">{</span> Z <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X  <span class=\"sy3\">-</span>  Y <span class=\"br0\">}</span><span class=\"sy4\">,</span> parse<span class=\"br0\">(</span>Ns<span class=\"sy4\">,</span><span class=\"br0\">[</span>Z<span class=\"sy5\">|</span>S<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>parse<span class=\"br0\">(</span>Ns<span class=\"sy4\">,</span><span class=\"br0\">[</span>Y<span class=\"sy4\">,</span>X<span class=\"sy5\">|</span>S<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> \"<span class=\"sy3\">*</span>\"<span class=\"sy4\">,</span> <span class=\"br0\">{</span> Z <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X  <span class=\"sy3\">*</span>  Y <span class=\"br0\">}</span><span class=\"sy4\">,</span> parse<span class=\"br0\">(</span>Ns<span class=\"sy4\">,</span><span class=\"br0\">[</span>Z<span class=\"sy5\">|</span>S<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>parse<span class=\"br0\">(</span>Ns<span class=\"sy4\">,</span><span class=\"br0\">[</span>Y<span class=\"sy4\">,</span>X<span class=\"sy5\">|</span>S<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> \"<span class=\"sy3\">/</span>\"<span class=\"sy4\">,</span> <span class=\"br0\">{</span> Z <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X div Y <span class=\"br0\">}</span><span class=\"sy4\">,</span> parse<span class=\"br0\">(</span>Ns<span class=\"sy4\">,</span><span class=\"br0\">[</span>Z<span class=\"sy5\">|</span>S<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>parse<span class=\"br0\">(</span>Ns<span class=\"sy4\">,</span>Stack<span class=\"br0\">)</span>   <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> \" \"<span class=\"sy4\">,</span> parse<span class=\"br0\">(</span>Ns<span class=\"sy4\">,</span>Stack<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>parse<span class=\"br0\">(</span>Ns<span class=\"sy4\">,</span>Stack<span class=\"br0\">)</span>   <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">{</span> select<span class=\"br0\">(</span>N<span class=\"sy4\">,</span>Ns<span class=\"sy4\">,</span>Ns1<span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">number_codes</span></a><span class=\"br0\">(</span>N<span class=\"sy4\">,</span><span class=\"br0\">[</span>Code<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>                    <span class=\"sy4\">,</span> <span class=\"br0\">[</span>Code<span class=\"br0\">]</span><span class=\"sy4\">,</span> parse<span class=\"br0\">(</span>Ns1<span class=\"sy4\">,</span><span class=\"br0\">[</span>N<span class=\"sy5\">|</span>Stack<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                    <span class=\"sy4\">.</span><br/>\u00a0<br/>get_line<span class=\"br0\">(</span>Xs<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">get_code</span></a><span class=\"br0\">(</span>X<span class=\"br0\">)</span><br/>              <span class=\"sy4\">,</span> <span class=\"br0\">(</span> X <span class=\"sy6\">==</span> <span class=\"nu0\">10</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> Xs <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy4\">;</span> Xs <span class=\"sy6\">=</span> <span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Ys<span class=\"br0\">]</span><span class=\"sy4\">,</span> get_line<span class=\"br0\">(</span>Ys<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>              <span class=\"sy4\">.</span><br/>main <span class=\"sy1\">:-</span> randomize<span class=\"sy4\">,</span> play<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">halt</span></a><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 160, "block": "<pre class=\"purebasic highlighted_source\">#digitCount <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/><span class=\"kw1\">Global</span> <span class=\"kw1\">Dim</span> digits<span class=\"br0\">(</span>#digitCount <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">;holds random digits</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> showDigits<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"These are your four digits: \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i<br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> #digitCount <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>digits<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> i <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>#digitCount <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Else</span><br/>      <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"24 = \"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> playAgain<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> answer.s<br/>  <span class=\"kw1\">Repeat</span> <br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Play again (y/n)? \"</span><span class=\"br0\">)</span><br/>    answer <span class=\"sy0\">=</span> <span class=\"kw2\">LCase</span><span class=\"br0\">(</span><span class=\"kw2\">Left</span><span class=\"br0\">(</span><span class=\"kw2\">Trim</span><span class=\"br0\">(</span><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Select</span> answer<br/>      <span class=\"kw1\">Case</span> <span class=\"st0\">\"n\"</span><br/>        <span class=\"kw1\">ProcedureReturn</span> #False<br/>      <span class=\"kw1\">Case</span> <span class=\"st0\">\"y\"</span><br/>        <span class=\"kw1\">ProcedureReturn</span> #True<br/>      <span class=\"kw1\">Default</span><br/>        <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Continue</span><br/>    <span class=\"kw1\">EndSelect</span><br/>  <span class=\"kw1\">ForEver</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> allDigitsUsed<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i<br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> #digitCount <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> digits<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">ProcedureReturn</span> #False<br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span> <br/>  <span class=\"kw1\">ProcedureReturn</span> #True <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> isValidDigit<span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> #digitCount <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> digits<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> d<br/>      digits<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">ProcedureReturn</span> #True<br/>    <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">Next</span> <br/>  <span class=\"kw1\">ProcedureReturn</span> #False<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> doOperation<span class=\"br0\">(</span>List op.c<span class=\"br0\">(</span><span class=\"br0\">)</span>, List operand.f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> x.f, y.f, op.c<br/>  op <span class=\"sy0\">=</span> op<span class=\"br0\">(</span><span class=\"br0\">)</span>: <span class=\"kw2\">DeleteElement</span><span class=\"br0\">(</span>op<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> op <span class=\"sy0\">=</span> '<span class=\"br0\">(</span>'<br/>    <span class=\"kw1\">ProcedureReturn</span> #False <span class=\"co1\">;end of sub-expression</span><br/>  <span class=\"kw1\">EndIf</span> <br/>\u00a0<br/>  y <span class=\"sy0\">=</span> operand<span class=\"br0\">(</span><span class=\"br0\">)</span>: <span class=\"kw2\">DeleteElement</span><span class=\"br0\">(</span>operand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  x <span class=\"sy0\">=</span> operand<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Select</span> op<br/>    <span class=\"kw1\">Case</span> '<span class=\"sy0\">+</span>'<br/>      x <span class=\"sy0\">+</span> y<br/>    <span class=\"kw1\">Case</span> '<span class=\"sy0\">-</span>'<br/>      x <span class=\"sy0\">-</span> y<br/>    <span class=\"kw1\">Case</span> '<span class=\"sy0\">*</span>' <br/>      x <span class=\"sy0\">*</span> y<br/>    <span class=\"kw1\">Case</span> '<span class=\"sy0\">/</span>' <br/>      x <span class=\"sy0\">/</span> y<br/>  <span class=\"kw1\">EndSelect</span><br/>  operand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x<br/>  <span class=\"kw1\">ProcedureReturn</span> #True <span class=\"co1\">;operation completed</span><br/><span class=\"kw1\">EndProcedure</span> <br/>\u00a0<br/><span class=\"co1\">;returns error if present and the expression results in *result\\f</span><br/><span class=\"kw1\">Procedure</span>.s parseExpression<span class=\"br0\">(</span>expr.s, <span class=\"sy0\">*</span>result.Float<span class=\"br0\">)</span><br/>  <span class=\"kw1\">NewList</span> op.c<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">NewList</span> operand.f<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  expr <span class=\"sy0\">=</span> <span class=\"kw2\">ReplaceString</span><span class=\"br0\">(</span>expr, <span class=\"st0\">\" \"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"co1\">;remove spaces</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>expr<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>: <span class=\"sy0\">*</span>result<span class=\"sy0\">\\</span>f <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>: <span class=\"kw1\">ProcedureReturn</span> <span class=\"st0\">\"\"</span>: <span class=\"kw1\">EndIf</span> <span class=\"co1\">;no expression, return zero</span><br/>\u00a0<br/>  <span class=\"kw1\">Protected</span> <span class=\"sy0\">*</span>ech.Character <span class=\"sy0\">=</span> @expr, lastWasDigit, lastWasOper, parenCheck, c.c<br/>  <span class=\"kw1\">While</span> <span class=\"sy0\">*</span>ech<span class=\"sy0\">\\</span>c<br/>    c <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>ech<span class=\"sy0\">\\</span>c<br/>    <span class=\"kw1\">Select</span> c<br/>      <span class=\"kw1\">Case</span> '<span class=\"sy0\">*</span>', '<span class=\"sy0\">/</span>', '<span class=\"sy0\">-</span>', '<span class=\"sy0\">+</span>'<br/>        <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> lastWasDigit: <span class=\"kw1\">ProcedureReturn</span> <span class=\"st0\">\"Improper syntax, need a digit between operators.\"</span>: <span class=\"kw1\">EndIf</span><br/>        <span class=\"kw1\">If</span> ListSize<span class=\"br0\">(</span>op<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">And</span> <span class=\"br0\">(</span><span class=\"kw2\">FindString</span><span class=\"br0\">(</span><span class=\"st0\">\"*/\"</span>, <span class=\"kw2\">Chr</span><span class=\"br0\">(</span>op<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Or</span> <span class=\"br0\">(</span><span class=\"kw2\">FindString</span><span class=\"br0\">(</span><span class=\"st0\">\"+-\"</span>, <span class=\"kw2\">Chr</span><span class=\"br0\">(</span>op<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">And</span> <span class=\"kw2\">FindString</span><span class=\"br0\">(</span><span class=\"st0\">\"+-\"</span>, <span class=\"kw2\">Chr</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          doOperation<span class=\"br0\">(</span>op<span class=\"br0\">(</span><span class=\"br0\">)</span>, operand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">EndIf</span> <br/>        <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>op<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: op<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> c<br/>        lastWasOper <span class=\"sy0\">=</span> #True: lastWasDigit <span class=\"sy0\">=</span> #False<br/>      <span class=\"kw1\">Case</span> '<span class=\"br0\">(</span>'<br/>        <span class=\"kw1\">If</span> lastWasDigit: <span class=\"kw1\">ProcedureReturn</span> <span class=\"st0\">\"Improper syntax, need an operator before left paren.\"</span>: <span class=\"kw1\">EndIf</span><br/>        <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>op<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: op<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> c<br/>        parenCheck <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>: lastWasOper <span class=\"sy0\">=</span> #False<br/>      <span class=\"kw1\">Case</span> '<span class=\"br0\">)</span>'<br/>        parenCheck <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>: <span class=\"kw1\">If</span> parenCheck <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span>: <span class=\"kw1\">ProcedureReturn</span> <span class=\"st0\">\"Improper syntax, missing a left paren.\"</span>: <span class=\"kw1\">EndIf</span><br/>        <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> lastWasDigit: <span class=\"kw1\">ProcedureReturn</span> <span class=\"st0\">\"Improper syntax, missing a digit before right paren.\"</span>: <span class=\"kw1\">EndIf</span><br/>        <span class=\"kw1\">Repeat</span>: <span class=\"kw1\">Until</span> <span class=\"kw1\">Not</span> doOperation<span class=\"br0\">(</span>op<span class=\"br0\">(</span><span class=\"br0\">)</span>,operand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        lastWasDigit <span class=\"sy0\">=</span> #True<br/>      <span class=\"kw1\">Case</span> '<span class=\"nu0\">1</span>' <span class=\"kw1\">To</span> '<span class=\"nu0\">9</span>'<br/>        <span class=\"kw1\">If</span> lastWasDigit: <span class=\"kw1\">ProcedureReturn</span> <span class=\"st0\">\"Improper syntax, need an operator between digits.\"</span>: <span class=\"kw1\">EndIf</span><br/>        <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>operand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: operand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> c <span class=\"sy0\">-</span> '<span class=\"nu0\">0</span>'<br/>        <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> isValidDigit<span class=\"br0\">(</span>operand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: <span class=\"kw1\">ProcedureReturn</span> <span class=\"st0\">\"'\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Chr</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"' is not a valid digit.\"</span>: <span class=\"kw1\">EndIf</span><br/>        lastWasDigit <span class=\"sy0\">=</span> #True: lastWasOper <span class=\"sy0\">=</span> #False<br/>      <span class=\"kw1\">Default</span><br/>        <span class=\"kw1\">ProcedureReturn</span> <span class=\"st0\">\"'\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Chr</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"' is not allowed in the expression.\"</span><br/>    <span class=\"kw1\">EndSelect</span><br/>    <span class=\"sy0\">*</span>ech <span class=\"sy0\">+</span> <span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Character<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Wend</span> <br/>\u00a0<br/>  <span class=\"kw1\">If</span> parenCheck <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Or</span> lastWasOper: <span class=\"kw1\">ProcedureReturn</span> <span class=\"st0\">\"Improper syntax, missing a right paren or digit.\"</span>: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Repeat</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> ListSize<span class=\"br0\">(</span>op<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>: <span class=\"kw1\">Break</span>: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Until</span> <span class=\"kw1\">Not</span> doOperation<span class=\"br0\">(</span>op<span class=\"br0\">(</span><span class=\"br0\">)</span>,operand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">*</span>result<span class=\"sy0\">\\</span>f <span class=\"sy0\">=</span> operand<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"st0\">\"\"</span> <span class=\"co1\">;no error</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Define</span> success, failure, result.f, error.s, i<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"The 24 Game\"</span> <span class=\"sy0\">+</span> #CRLF$<span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Given four digits and using just the +, -, *, and / operators; and the\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"possible use of brackets, (), enter an expression that equates to 24.\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Repeat</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> #digitCount <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      digits<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    showDigits<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    error <span class=\"sy0\">=</span> parseExpression<span class=\"br0\">(</span><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, @result<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> error <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>      <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> allDigitsUsed<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span> <span class=\"st0\">\"Wrong! (you didn't use all digits)\"</span><span class=\"br0\">)</span>: failure <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">ElseIf</span> result <span class=\"sy0\">=</span> <span class=\"nu0\">24.0</span><br/>        <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Correct!\"</span><span class=\"br0\">)</span>: success <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">Else</span><br/>        <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Wrong! (you got \"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> result <span class=\"sy0\">&lt;&gt;</span> <span class=\"kw2\">Int</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span><br/>          <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">StrF</span><span class=\"br0\">(</span>result, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Else</span><br/>          <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">EndIf</span> <br/>        failure <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">EndIf</span> <br/>    <span class=\"kw1\">Else</span><br/>      <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>error<span class=\"br0\">)</span>: failure <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">Until</span> <span class=\"kw1\">Not</span> playAgain<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"success:\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>success<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" failure:\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>failure<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" total:\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>success <span class=\"sy0\">+</span> failure<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 68, "block": "<pre class=\"python highlighted_source\"><span class=\"st0\">'''<br/> The 24 Game<br/>\u00a0<br/> Given any four digits in the range 1 to 9, which may have repetitions,<br/> Using just the +, -, *, and / operators; and the possible use of<br/> brackets, (), show how to make an answer of 24.<br/>\u00a0<br/> An answer of \"q\" will quit the game.<br/> An answer of \"!\" will generate a new set of four digits.<br/> Otherwise you are repeatedly asked for an expression until it evaluates to 24<br/>\u00a0<br/> Note: you cannot form multiple digit numbers from the supplied digits,<br/> so an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.<br/>\u00a0<br/>'''</span><br/>\u00a0<br/><span class=\"kw1\">from</span> <span class=\"kw3\">__future__</span> <span class=\"kw1\">import</span> division<span class=\"sy0\">,</span> print_function<br/><span class=\"kw1\">import</span> <span class=\"kw3\">random</span><span class=\"sy0\">,</span> ast<span class=\"sy0\">,</span> <span class=\"kw3\">re</span><br/><span class=\"kw1\">import</span> <span class=\"kw3\">sys</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"kw3\">sys</span>.<span class=\"me1\">version_info</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span>: <span class=\"kw2\">input</span> <span class=\"sy0\">=</span> <span class=\"kw2\">raw_input</span><br/>\u00a0<br/><span class=\"kw1\">def</span> choose4<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'four random digits &gt;0 as characters'</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">str</span><span class=\"br0\">(</span><span class=\"kw3\">random</span>.<span class=\"me1\">randint</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> welcome<span class=\"br0\">(</span>digits<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span> <span class=\"br0\">(</span>__doc__<span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"st0\">\"Your four digits: \"</span> + <span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>digits<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> check<span class=\"br0\">(</span>answer<span class=\"sy0\">,</span> digits<span class=\"br0\">)</span>:<br/>    allowed <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"st0\">'() +-*/<span class=\"es0\">\\t</span>'</span>+<span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>digits<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    ok <span class=\"sy0\">=</span> <span class=\"kw2\">all</span><span class=\"br0\">(</span>ch <span class=\"kw1\">in</span> allowed <span class=\"kw1\">for</span> ch <span class=\"kw1\">in</span> answer<span class=\"br0\">)</span> <span class=\"kw1\">and</span> \\<br/>         <span class=\"kw2\">all</span><span class=\"br0\">(</span>digits.<span class=\"me1\">count</span><span class=\"br0\">(</span>dig<span class=\"br0\">)</span> <span class=\"sy0\">==</span> answer.<span class=\"me1\">count</span><span class=\"br0\">(</span>dig<span class=\"br0\">)</span> <span class=\"kw1\">for</span> dig <span class=\"kw1\">in</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span>digits<span class=\"br0\">)</span><span class=\"br0\">)</span> \\<br/>         <span class=\"kw1\">and</span> <span class=\"kw1\">not</span> <span class=\"kw3\">re</span>.<span class=\"me1\">search</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\d</span><span class=\"es0\">\\d</span>'</span><span class=\"sy0\">,</span> answer<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> ok:<br/>        <span class=\"kw1\">try</span>:<br/>            ast.<span class=\"me1\">parse</span><span class=\"br0\">(</span>answer<span class=\"br0\">)</span><br/>        <span class=\"kw1\">except</span>:<br/>            ok <span class=\"sy0\">=</span> <span class=\"kw2\">False</span><br/>    <span class=\"kw1\">return</span> ok<br/>\u00a0<br/><span class=\"kw1\">def</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>:    <br/>    digits <span class=\"sy0\">=</span> choose4<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    welcome<span class=\"br0\">(</span>digits<span class=\"br0\">)</span><br/>    trial <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    answer <span class=\"sy0\">=</span> <span class=\"st0\">''</span><br/>    chk <span class=\"sy0\">=</span> ans <span class=\"sy0\">=</span> <span class=\"kw2\">False</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span>chk <span class=\"kw1\">and</span> ans <span class=\"sy0\">==</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span>:<br/>        trial +<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>        answer <span class=\"sy0\">=</span> <span class=\"kw2\">input</span><span class=\"br0\">(</span><span class=\"st0\">\"Expression\u00a0%i: \"</span>\u00a0% trial<span class=\"br0\">)</span><br/>        chk <span class=\"sy0\">=</span> check<span class=\"br0\">(</span>answer<span class=\"sy0\">,</span> digits<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> answer.<span class=\"me1\">lower</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">'q'</span>:<br/>            <span class=\"kw1\">break</span><br/>        <span class=\"kw1\">if</span> answer <span class=\"sy0\">==</span> <span class=\"st0\">'!'</span>:<br/>            digits <span class=\"sy0\">=</span> choose4<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"st0\">\"New digits:\"</span><span class=\"sy0\">,</span> <span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>digits<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> chk:<br/>            <span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"st0\">\"The input '%s' was wonky!\"</span>\u00a0% answer<span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span>:<br/>            ans <span class=\"sy0\">=</span> <span class=\"kw2\">eval</span><span class=\"br0\">(</span>answer<span class=\"br0\">)</span><br/>            <span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"st0\">\" = \"</span><span class=\"sy0\">,</span> ans<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> ans <span class=\"sy0\">==</span> <span class=\"nu0\">24</span>:<br/>                <span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"st0\">\"Thats right!\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"st0\">\"Thank you and goodbye\"</span><span class=\"br0\">)</span>   <br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>: main<span class=\"br0\">(</span><span class=\"br0\">)</span> </pre>"}, {"lang": "R", "loc": 54, "block": "<pre class=\"text highlighted_source\">twenty.four &lt;- function(operators=c(\"+\", \"-\", \"*\", \"/\", \"(\"),<br/>                        selector=function() sample(1:9, 4, replace=TRUE),<br/>                        arguments=selector(),<br/>                        goal=24) {<br/>  newdigits &lt;- function() {<br/>    arguments &lt;&lt;- selector()<br/>    cat(\"New digits:\", paste(arguments, collapse=\", \"), \"\\n\")<br/>  } <br/>  help &lt;- function() cat(\"Make\", goal,<br/>      \"out of the numbers\",paste(arguments, collapse=\", \"),<br/>      \"and the operators\",paste(operators, collapse=\", \"), \".\",<br/>      \"\\nEnter 'q' to quit, '!' to select new digits,\",<br/>      \"or '?' to repeat this message.\\n\")<br/>  help()<br/>  repeat {<br/>    switch(input &lt;- readline(prompt=\"&gt; \"),<br/>           q={ cat(\"Goodbye!\\n\"); break },<br/>           `?`=help(),<br/>           `!`=newdigits(),<br/>           tryCatch({<br/>             expr &lt;- parse(text=input, n=1)[[1]]<br/>             check.call(expr, operators, arguments)<br/>             result &lt;- eval(expr)<br/>             if (isTRUE(all.equal(result, goal))) {<br/>               cat(\"Correct!\\n\")<br/>               newdigits()<br/>             } else {<br/>               cat(\"Evaluated to\", result, \"( goal\", goal, \")\\n\")<br/>             }<br/>           },error=function(e) cat(e$message, \"\\n\")))<br/>  }<br/>}<br/>\u00a0<br/>check.call &lt;- function(expr, operators, arguments) {<br/>  unexpr &lt;- function(x) {<br/>    if (is.call(x))<br/>      unexpr(as.list(x))<br/>    else if (is.list(x))<br/>      lapply(x,unexpr)<br/>    else x<br/>  }<br/>  leaves &lt;- unlist(unexpr(expr))<br/>  if (any(disallowed &lt;-<br/>         \u00a0!leaves\u00a0%in% c(lapply(operators, as.name),<br/>                         as.list(arguments)))) {<br/>    stop(\"'\", paste(sapply(leaves[disallowed], as.character),<br/>                    collapse=\", \"),<br/>         \"' not allowed. \")<br/>  }<br/>  numbers.used &lt;- unlist(leaves[sapply(leaves, mode) == 'numeric'])<br/>\u00a0<br/>  if (! isTRUE(all.equal(sort(numbers.used), sort(arguments))))<br/>   stop(\"Must use each number once.\")<br/>}</pre>"}, {"lang": "Racket", "loc": 37, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define (interprete expr numbers)<br/> \u00a0;; the cashe for used numbers<br/>  (define cashe numbers)<br/>\u00a0<br/> \u00a0;; updating the cashe and handling invalid cases<br/>  (define (update-cashe! x)<br/>    (unless (member x numbers) (error \"Number is not in the given set:\" x))<br/>    (unless (member x cashe)   (error \"Number is used more times then it was given:\" x))<br/>    (set! cashe (remq x cashe)))<br/>\u00a0<br/> \u00a0;; the parser<br/>  (define parse<br/>    (match-lambda<br/>     \u00a0;; parsing arythmetics<br/>      [`(,x ... + ,y ...) (+ (parse x) (parse y))]<br/>      [`(,x ... - ,y ...) (- (parse x) (parse y))]<br/>      [`(,x ... * ,y ...) (* (parse x) (parse y))]<br/>      [`(,x ... / ,y ...) (/ (parse x) (parse y))]<br/>      [`(,x ,op ,y ...)   (error \"Unknown operator: \" op)]<br/>     \u00a0;; opening redundant brackets<br/>      [`(,expr)           (parse expr)]<br/>     \u00a0;; parsing numbers<br/>      [(? number? x)      (update-cashe! x) x]<br/>     \u00a0;; unknown token<br/>      [x                  (error \"Not a number: \" x)]))<br/>\u00a0<br/> \u00a0;; parse the expresion<br/>  (define result (parse expr))<br/>\u00a0<br/> \u00a0;; return the result if cashe is empty<br/>  (if (empty? cashe)<br/>      result<br/>      (error \"You didn`t use all numbers!\")))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 1, "block": "<pre>   \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n   \u2551 Argument for the   24    REXX program is either of three forms:  (blank)    \u2551\n   \u2551                                                                  ssss       \u2551\n   \u2551                                                                  ssss-ffff  \u2551\n   \u2551                                                                             \u2551\n   \u2551 where   SSSS  and  FFFF   must be exactly four numerals (digits) comprised  \u2551\n   \u2551 solely of the numerals (digits)    1 \u2500\u2500\u25ba 9     (inclusive, with no zeroes). \u2551\n   \u2551                                                                             \u2551\n   \u2551                            SSSS  is the start,                              \u2551\n   \u2551                            FFFF  is the finish.                             \u2551\n   \u2551                                                                             \u2551\n   \u2551 If no argument is specified,  the program finds a  four digit number  (with \u2551\n   \u2551 no zeroes)  which has at least one solution,  and then displays the number  \u2551\n   \u2551 to the user,  requesting that they enter a solution in the form of:         \u2551\n   \u2551                                                                             \u2551\n   \u2551                    w   operator   x   operator   y   operator   z           \u2551\n   \u2551                                                                             \u2551\n   \u2551 where    w   x   y   and   z    are single digit numbers  (no zeroes).      \u2551\n   \u2551 and    operator   can be any one of:     +    -    *    /                   \u2551\n   \u2551 Parentheses ( ),   brackets [ ],   and/or  braces { }   may be used in the  \u2551\n   \u2551 normal manner for grouping expressions.       Leading signs are permitted.  \u2551\n   \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n</pre>"}, {"lang": "Ring", "loc": 62, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: 24 game<br/>\u00a0<br/>load \"stdlib.ring\"<br/>digits = list(4)<br/>check = list(4)<br/>for choice = 1 to 4<br/>     digits[choice] = random(9)<br/>next <br/>\u00a0<br/>see \"enter an equation (using all of, and only, the single digits \" + nl<br/>for index = 1 to 4<br/>     see digits[index] <br/>     if index\u00a0!= 4 <br/>        see \" \"<br/>    ok<br/>next<br/>see \")\"<br/>see \" which evaluates to exactly 24. only multiplication (*), division (/),\" + nl<br/>see \"addition (+) &amp; subtraction (-) operations and parentheses are allowed:\" + nl<br/>see \"24 = \"<br/>give equation<br/>see \"equation = \" + equation + nl<br/>\u00a0<br/>while true<br/>        for char = 1 to len(equation)<br/>             digit = substr(\"0123456789\", equation[char]) - 1<br/>             if digit &gt;= 0<br/>                for index = 1 to 4<br/>                     if digit = digits[index] <br/>                        if not check[index]<br/>                           check[index] = 1<br/>                           exit<br/>                        ok<br/>                     ok<br/>                next <br/>                if index &gt; 4 <br/>                   see \"sorry, you used the illegal digit \" + digit + nl<br/>                   exit 2 <br/>                ok<br/>            ok<br/>        next <br/>        for index = 1 to 4<br/>             if check[index] = 0<br/>                see \"sorry, you failed to use the digit \" + digits[index] + nl<br/>                exit 2<br/>             ok<br/>        next <br/>        for pair = 11 to 99<br/>             if substr(equation, string(pair))<br/>                see \"sorry, you may not use a pair of digits \" + pair + nl<br/>             ok <br/>        next <br/>        eval(\"result = \" + equation)<br/>        if result = 24<br/>           see \"congratulations, you succeeded in the task!\" + nl<br/>           exit<br/>        else<br/>           see \"sorry, your equation evaluated to \" + result + \" rather than 24!\" + nl<br/>        ok<br/>end<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 40, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> Guess <span class=\"sy0\">&lt;</span> <span class=\"kw3\">String</span><br/>  <span class=\"kw1\">def</span> <span class=\"kw2\">self</span>.<span class=\"me1\">play</span><br/>    nums = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">loop</span> <span class=\"kw1\">do</span><br/>      result = get<span class=\"br0\">(</span>nums<span class=\"br0\">)</span>.<span class=\"me1\">evaluate</span>!<br/>      <span class=\"kw1\">break</span> <span class=\"kw1\">if</span> result == <span class=\"nu0\">24.0</span><br/>      <span class=\"kw3\">puts</span> <span class=\"st0\">\"Try again! That gives #{result}!\"</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"You win!\"</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> <span class=\"kw2\">self</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span>nums<span class=\"br0\">)</span><br/>    <span class=\"kw3\">loop</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Enter a guess using #{nums}: \"</span><br/>      input = <span class=\"kw3\">gets</span>.<span class=\"kw3\">chomp</span><br/>      <span class=\"kw2\">return</span> new<span class=\"br0\">(</span>input<span class=\"br0\">)</span> <span class=\"kw1\">if</span> validate<span class=\"br0\">(</span>input, nums<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> <span class=\"kw2\">self</span>.<span class=\"me1\">validate</span><span class=\"br0\">(</span>guess, nums<span class=\"br0\">)</span><br/>    name, error =<br/>      <span class=\"br0\">{</span><br/>        invalid_character:  <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">{</span>\u00a0!str.<span class=\"me1\">scan</span><span class=\"br0\">(</span><span class=\"sy0\">%</span>r<span class=\"br0\">{</span><span class=\"br0\">[</span>^\\d\\s<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">+*/-</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">empty</span>? <span class=\"br0\">}</span>,<br/>        wrong_number:       <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">{</span> str.<span class=\"me1\">scan</span><span class=\"br0\">(</span><span class=\"sy0\">/</span>\\d<span class=\"sy0\">/</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:to_i<span class=\"br0\">)</span>.<span class=\"me1\">sort</span>\u00a0!= nums.<span class=\"me1\">sort</span> <span class=\"br0\">}</span>,<br/>        multi_digit_number: <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">{</span> str.<span class=\"me1\">match</span><span class=\"br0\">(</span><span class=\"sy0\">/</span>\\d\\d<span class=\"sy0\">/</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>        .<span class=\"me1\">find</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>name, validator<span class=\"sy0\">|</span> validator<span class=\"br0\">[</span>guess<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    error\u00a0? <span class=\"kw3\">puts</span><span class=\"br0\">(</span><span class=\"st0\">\"Invalid input of a(n) #{name.to_s.tr('_',' ')}!\"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw2\">true</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> evaluate!<br/>    as_rat = <span class=\"kw3\">gsub</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>\\d<span class=\"br0\">)</span><span class=\"sy0\">/</span>, <span class=\"st0\">'<span class=\"es0\">\\1</span>r'</span><span class=\"br0\">)</span>        <span class=\"co1\"># r\u00a0: Rational suffix</span><br/>    <span class=\"kw3\">eval</span> <span class=\"st0\">\"(#{as_rat}).to_f\"</span><br/>  <span class=\"kw1\">rescue</span> <span class=\"kw4\">SyntaxError</span><br/>    <span class=\"st0\">\"[syntax error]\"</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>Guess.<span class=\"me1\">play</span></pre>"}, {"lang": "Rust", "loc": 102, "block": "<pre class=\"text highlighted_source\">use std::io::{self,BufRead};<br/>extern crate rand;<br/>use rand::Rng;<br/>\u00a0<br/>fn op_type(x: char) -&gt; i32{<br/>    match x {<br/>        '-' | '+' =&gt; return 1,<br/>        '/' | '*' =&gt; return 2,<br/>        '(' | ')' =&gt; return -1,<br/>        _   =&gt; return 0,<br/>    }<br/>}<br/>\u00a0<br/>fn to_rpn(input: &amp;mut String){<br/>\u00a0<br/>    let mut rpn_string\u00a0: String = String::new();<br/>    let mut rpn_stack\u00a0: String = String::new();<br/>    let mut last_token = '#';<br/>    for token in input.chars(){<br/>        if token.is_digit(10) {<br/>            rpn_string.push(token);<br/>        }<br/>        else if op_type(token) == 0 {<br/>            continue;<br/>        }<br/>        else if op_type(token) &gt; op_type(last_token) || token == '(' {<br/>                rpn_stack.push(token);<br/>                last_token=token;<br/>        }<br/>        else {<br/>            while let Some(top) = rpn_stack.pop() {<br/>                if top=='(' {<br/>                    break;<br/>                }<br/>                rpn_string.push(top);<br/>            }<br/>            if token\u00a0!= ')'{<br/>                rpn_stack.push(token);<br/>            }<br/>        }<br/>    }<br/>    while let Some(top) = rpn_stack.pop() {<br/>        rpn_string.push(top);<br/>    }<br/>\u00a0<br/>    println!(\"you formula results in {}\", rpn_string);<br/>\u00a0<br/>    *input=rpn_string;<br/>}<br/>\u00a0<br/>fn calculate(input: &amp;String, list\u00a0: &amp;mut [u32;4]) -&gt; f32{<br/>    let mut stack\u00a0: Vec&lt;f32&gt; = Vec::new();<br/>    let mut accumulator\u00a0: f32 = 0.0;<br/>\u00a0<br/>    for token in input.chars(){<br/>        if token.is_digit(10) {<br/>            let test = token.to_digit(10).unwrap() as u32;<br/>            match list.iter().position(|&amp;x| x == test){<br/>                Some(idx) =&gt; list[idx]=10 ,<br/>                _         =&gt; println!(\" invalid digit: {} \",test),<br/>            }<br/>            stack.push(accumulator);<br/>            accumulator = test as f32;<br/>        }else{<br/>            let a = stack.pop().unwrap();<br/>            accumulator = match token {<br/>                '-' =&gt; a-accumulator,<br/>                '+' =&gt; a+accumulator,<br/>                '/' =&gt; a/accumulator,<br/>                '*' =&gt; a*accumulator,<br/>                _ =&gt; {accumulator},//NOP<br/>            };<br/>        }<br/>    }<br/>    println!(\"you formula results in {}\",accumulator);<br/>    accumulator<br/>}<br/>\u00a0<br/>fn main() {<br/>\u00a0<br/>    let mut rng = rand::thread_rng();<br/>    let mut list\u00a0:[u32;4]=[rng.gen::&lt;u32&gt;()%10,rng.gen::&lt;u32&gt;()%10,rng.gen::&lt;u32&gt;()%10,rng.gen::&lt;u32&gt;()%10];<br/>\u00a0<br/>    println!(\"form 24 with using + - / * {:?}\",list);<br/>    //get user input<br/>    let mut input = String::new();<br/>    io::stdin().read_line(&amp;mut input).unwrap();<br/>    //convert to rpn<br/>    to_rpn(&amp;mut input);<br/>    let result = calculate(&amp;input, &amp;mut list);<br/>\u00a0<br/>    if list.iter().any(|&amp;list| list\u00a0!=10){<br/>        println!(\"and you used all numbers\");<br/>        match result {<br/>            24.0 =&gt; println!(\"you won\"),<br/>            _ =&gt; println!(\"but your formulla doesn't result in 24\"),<br/>        }<br/>    }else{<br/>        println!(\"you didn't use all the numbers\");<br/>    }<br/>\u00a0<br/>}</pre>"}, {"lang": "Scala", "loc": 154, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> TwentyFourGame <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> Parser.<span class=\"me1\">TwentyFourParser</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span>welcome<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> parser <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> TwentyFourParser<span class=\"br0\">(</span>problemsIterator.<span class=\"me1\">next</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Your four digits: \"</span>+parser+<span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> finished <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> expressionCount <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> line <span class=\"sy0\">=</span> Console.<span class=\"me1\">readLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Expression \"</span>+expressionCount+<span class=\"st0\">\": \"</span><span class=\"br0\">)</span><br/>      line <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"st0\">\"!\"</span> <span class=\"sy0\">=&gt;</span><br/>          parser <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> TwentyFourParser<span class=\"br0\">(</span>problemsIterator.<span class=\"me1\">next</span><span class=\"br0\">)</span><br/>          println<span class=\"br0\">(</span><span class=\"st0\">\"New digits: \"</span>+parser+<span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"st0\">\"q\"</span> <span class=\"sy0\">=&gt;</span><br/>          finished <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span><br/>          parser readExpression line <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Some<span class=\"br0\">(</span><span class=\"nu0\">24</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span><span class=\"st0\">\"That's right!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> finished <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Some<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span><span class=\"st0\">\"Sorry, that's \"</span>+n+<span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> None <span class=\"sy0\">=&gt;</span><br/>          <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      expressionCount +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>finished<span class=\"br0\">)</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Thank you and goodbye!\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> welcome <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"|The 24 Game<br/>                   |<br/>                   |Given any four digits in the range 1 to 9, which may have repetitions,<br/>                   |Using just the +, -, *, and / operators; and the possible use of<br/>                   |brackets, (), show how to make an answer of 24.<br/>                   |<br/>                   |An answer of \"</span>q<span class=\"st0\">\" will quit the game.<br/>                   |An answer of \"</span><span class=\"sy0\">!</span><span class=\"st0\">\" will generate a new set of four digits.<br/>                   |Otherwise you are repeatedly asked for an expression until it evaluates to 24<br/>                   |<br/>                   |Note: you cannot form multiple digit numbers from the supplied digits,<br/>                   |so an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.<br/>                   |\"</span><span class=\"st0\">\"\"</span>.<span class=\"me1\">stripMargin</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> problemsIterator <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>    Iterator <br/>    continually List.<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">(</span>scala.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span>.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span> toDouble<span class=\"br0\">)</span> <br/>    filter hasSolution<br/>  <span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> hasSolution<span class=\"br0\">(</span>l<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Double<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> permute<span class=\"br0\">(</span>l<span class=\"br0\">)</span> flatMap computeAllOperations exists <span class=\"br0\">(</span><span class=\"sy0\">_</span> <span class=\"sy0\">==</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> computeAllOperations<span class=\"br0\">(</span>l<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Double<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Double<span class=\"br0\">]</span> <span class=\"sy0\">=</span> l <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Nil <span class=\"sy0\">=&gt;</span> Nil<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> x <span class=\"sy0\">::</span> Nil <span class=\"sy0\">=&gt;</span> l<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> x <span class=\"sy0\">::</span> xs <span class=\"sy0\">=&gt;</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">{</span><br/>        y <span class=\"sy0\">&lt;</span>- computeAllOperations<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>        z <span class=\"sy0\">&lt;</span>- <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>y <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> List<span class=\"br0\">(</span>x<span class=\"sy0\">*</span>y, x+y, x-y<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> List<span class=\"br0\">(</span>x<span class=\"sy0\">*</span>y, x/y, x+y, x-y<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> z<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> permute<span class=\"br0\">(</span>l<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Double<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>List<span class=\"br0\">[</span>Double<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> l <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Nil <span class=\"sy0\">=&gt;</span> List<span class=\"br0\">(</span>Nil<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> x <span class=\"sy0\">::</span> xs <span class=\"sy0\">=&gt;</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">{</span><br/>        ys <span class=\"sy0\">&lt;</span>- permute<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>        position <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> to ys.<span class=\"me1\">length</span><br/>        <span class=\"br0\">(</span>left, right<span class=\"br0\">)</span> <span class=\"sy0\">=</span> ys splitAt position<br/>      <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> left <span class=\"sy0\">:::</span> <span class=\"br0\">(</span>x <span class=\"sy0\">::</span> right<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Parser <span class=\"br0\">{</span><br/>    <span class=\"coMULTI\">/*  Arithmetic expression grammar production rules in EBNF form:<br/>     *<br/>     * &lt;expr&gt; --&gt; &lt;term&gt; ( '+' &lt;term&gt; | '-' &lt;term&gt; )*<br/>     * &lt;term&gt; --&gt; &lt;factor&gt; ( '*'  &lt;factor&gt; | '/'  &lt;factor&gt; )*<br/>     * &lt;factor&gt; --&gt; '(' &lt;expr&gt; ')' | &lt;digit&gt;<br/>     * &lt;digit&gt; --&gt; 0 | 1  | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9<br/>     * <br/>     * Semantically, &lt;digit&gt; can only be a digit from the list of remaining digits.<br/>     */</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> TwentyFourParser<span class=\"br0\">(</span>digits<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Double<span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> scala.<span class=\"me1\">util</span>.<span class=\"me1\">parsing</span>.<span class=\"me1\">combinator</span>.<span class=\"me1\">RegexParsers</span> <span class=\"br0\">{</span><br/>      require<span class=\"br0\">(</span>digits.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">4</span> <span class=\"sy0\">&amp;&amp;</span> digits.<span class=\"me1\">forall</span><span class=\"br0\">(</span>d <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> d <span class=\"sy0\">&amp;&amp;</span> d <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> toString <span class=\"sy0\">=</span> digits.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">toInt</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"co1\">// Grammar</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> exprConsumingAllDigits <span class=\"sy0\">=</span> expr ^<span class=\"sy0\">?</span> <span class=\"br0\">(</span>remainingDigits.<span class=\"me1\">allDigitsConsumed</span>, digitsRemainingError<span class=\"br0\">)</span> <span class=\"co1\">// Guarantees all digits consumed</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> expr <span class=\"sy0\">:</span> Parser<span class=\"br0\">[</span>Double<span class=\"br0\">]</span> <span class=\"sy0\">=</span> term ~ rep<span class=\"br0\">(</span> <span class=\"st0\">\"+\"</span> ~ term | <span class=\"st0\">\"-\"</span> ~ term<span class=\"br0\">)</span> ^^ solveOperationChain<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> term <span class=\"sy0\">=</span> factor ~ rep<span class=\"br0\">(</span> <span class=\"st0\">\"*\"</span> ~ factor | <span class=\"st0\">\"/\"</span> ~ factor<span class=\"br0\">)</span> ^^ solveOperationChain<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> factor <span class=\"sy0\">=</span> <span class=\"st0\">\"(\"</span> ~<span class=\"sy0\">&gt;</span> expr <span class=\"sy0\">&lt;</span>~ <span class=\"st0\">\")\"</span> | digit<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> digit <span class=\"sy0\">=</span> digitRegex ^<span class=\"sy0\">?</span> <span class=\"br0\">(</span>remainingDigits.<span class=\"me1\">consumeDigit</span>, digitNotAllowedError<span class=\"br0\">)</span> <br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> digitRegex <span class=\"sy0\">=</span> <span class=\"st0\">\"<span class=\"es1\">\\\\</span>d\"</span>.<span class=\"me1\">r</span> | digitExpected<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> digitExpected<span class=\"sy0\">:</span> Parser<span class=\"br0\">[</span>String<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\".\"</span>.<span class=\"me1\">r</span> <span class=\"sy0\">&lt;</span>~ failure<span class=\"br0\">(</span>expectedDigitError<span class=\"br0\">)</span> <span class=\"co1\">// Produces clear error messages</span><br/>\u00a0<br/>      <span class=\"co1\">// Evaluate expressions</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> readExpression<span class=\"br0\">(</span>input<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>Double<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        remainingDigits <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> DigitList<span class=\"br0\">(</span>digits<span class=\"br0\">)</span> <span class=\"co1\">// Initialize list of digits to be consumed</span><br/>        parseAll<span class=\"br0\">(</span>exprConsumingAllDigits, input<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Success<span class=\"br0\">(</span>result, <span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Some<span class=\"br0\">(</span>result<span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> NoSuccess<span class=\"br0\">(</span>msg, next<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>            println<span class=\"br0\">(</span>ParsingErrorFormatter<span class=\"br0\">(</span>msg, next<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            None<br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"co1\">// List of digits to be consumed</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> remainingDigits<span class=\"sy0\">:</span> DigitList <span class=\"sy0\">=</span> <span class=\"sy0\">_</span><br/>\u00a0<br/>      <span class=\"co1\">// Solve partial results from parsing</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> solveOperationChain<span class=\"br0\">(</span>partialResult<span class=\"sy0\">:</span> ~<span class=\"br0\">[</span>Double,List<span class=\"br0\">[</span>~<span class=\"br0\">[</span>String,Double<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"sy0\">=</span> partialResult <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> first ~ chain <span class=\"sy0\">=&gt;</span> chain.<span class=\"me1\">foldLeft</span><span class=\"br0\">(</span>first<span class=\"br0\">)</span><span class=\"br0\">(</span>doOperation<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> doOperation<span class=\"br0\">(</span>acc<span class=\"sy0\">:</span> Double, op<span class=\"sy0\">:</span> ~<span class=\"br0\">[</span>String, Double<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"sy0\">=</span> op <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"st0\">\"+\"</span> ~ operand <span class=\"sy0\">=&gt;</span> acc + operand<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"st0\">\"-\"</span> ~ operand <span class=\"sy0\">=&gt;</span> acc - operand<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"st0\">\"*\"</span> ~ operand <span class=\"sy0\">=&gt;</span> acc <span class=\"sy0\">*</span> operand<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"st0\">\"/\"</span> ~ operand <span class=\"sy0\">=&gt;</span> acc / operand<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> x <span class=\"sy0\">=&gt;</span> error<span class=\"br0\">(</span><span class=\"st0\">\"Unknown operation \"</span>+x+<span class=\"st0\">\".\"</span><span class=\"br0\">)</span> <br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"co1\">// Error messages</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> digitNotAllowedError<span class=\"br0\">(</span>d<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Digit \"</span>+d+<span class=\"st0\">\" is not allowed here. Available digits: \"</span>+remainingDigits+<span class=\"st0\">\".\"</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> digitsRemainingError<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Any<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Not all digits were consumed. Digits remaining: \"</span>+remainingDigits+<span class=\"st0\">\".\"</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> expectedDigitError <span class=\"sy0\">=</span> <span class=\"st0\">\"Unexpected input. Expected a digit from the list: \"</span>+remainingDigits+<span class=\"st0\">\".\"</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> ParsingErrorFormatter <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> apply<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">(</span>msg<span class=\"sy0\">:</span> String, next<span class=\"sy0\">:</span> scala.<span class=\"me1\">util</span>.<span class=\"me1\">parsing</span>.<span class=\"me1\">input</span>.<span class=\"me1\">Reader</span><span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        <span class=\"st0\">\"%s<span class=\"es1\">\\n</span>%s<span class=\"es1\">\\n</span>%s<span class=\"es1\">\\n</span>\"</span> format <span class=\"br0\">(</span>msg, next.<span class=\"me1\">source</span>.<span class=\"me1\">toString</span>.<span class=\"me1\">trim</span>, <span class=\"st0\">\" \"</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>next.<span class=\"me1\">offset</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span>+<span class=\"st0\">\"^\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> DigitList<span class=\"br0\">(</span>digits<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Double<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> remainingDigits <span class=\"sy0\">=</span> digits<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString <span class=\"sy0\">=</span> remainingDigits.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">toInt</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> consumeDigit<span class=\"sy0\">:</span> PartialFunction<span class=\"br0\">[</span>String, Double<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> d <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> remainingDigits contains d.<span class=\"me1\">toDouble</span> <span class=\"sy0\">=&gt;</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> d.<span class=\"me1\">toDouble</span><br/>          remainingDigits <span class=\"sy0\">=</span> remainingDigits diff List<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>          n<br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> allDigitsConsumed<span class=\"sy0\">:</span> PartialFunction<span class=\"br0\">[</span>Double, Double<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> n <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> remainingDigits.<span class=\"me1\">isEmpty</span> <span class=\"sy0\">=&gt;</span> n<br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 64, "block": "<pre class=\"scheme highlighted_source\">#lang scheme<br/><span class=\"br0\">(</span>require srfi<span class=\"sy0\">/</span><span class=\"nu0\">27</span> srfi<span class=\"sy0\">/</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">;; random-integer, every</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>play<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let*</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>numbers <span class=\"br0\">(</span>build<span class=\"sy0\">-</span><span class=\"kw1\">list</span> <span class=\"nu0\">4</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>                                  <span class=\"br0\">(</span>add1 <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>integer <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>         <span class=\"br0\">[</span>valid?  <span class=\"br0\">(</span>curryr valid? numbers<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>printf startup<span class=\"sy0\">-</span>message numbers<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw1\">exp</span> <span class=\"br0\">(</span><span class=\"kw1\">read</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>with<span class=\"sy0\">-</span>handlers <span class=\"br0\">(</span><span class=\"br0\">[</span>exn:fail? <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>err<span class=\"br0\">)</span><br/>                                   <span class=\"br0\">(</span>printf error<span class=\"sy0\">-</span>message <span class=\"kw1\">exp</span> <span class=\"br0\">(</span>exn<span class=\"sy0\">-</span>message err<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                   <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"kw1\">read</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">eq?</span> <span class=\"kw1\">exp</span> '<span class=\"sy0\">!</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>play<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>             <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">eq?</span> <span class=\"kw1\">exp</span> 'q<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">eof-object?</span> <span class=\"kw1\">exp</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>printf quit<span class=\"sy0\">-</span>message<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>             <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>valid? <span class=\"kw1\">exp</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>printf bad<span class=\"sy0\">-</span>exp<span class=\"sy0\">-</span>message <span class=\"kw1\">exp</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"kw1\">read</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>             <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>eval <span class=\"kw1\">exp</span><span class=\"br0\">)</span> <span class=\"nu0\">24</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>printf bad<span class=\"sy0\">-</span>result<span class=\"sy0\">-</span>message <span class=\"kw1\">exp</span> <span class=\"br0\">(</span>eval <span class=\"kw1\">exp</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"kw1\">read</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>             <span class=\"br0\">[</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span>printf winning<span class=\"sy0\">-</span>message<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>valid? <span class=\"kw1\">exp</span> numbers<span class=\"br0\">)</span><br/>  <span class=\"co1\">;; must contain each number exactly once and only valid symbols</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>valid<span class=\"sy0\">-</span><span class=\"kw1\">symbol?</span> sym<span class=\"br0\">)</span><br/>    <span class=\"co1\">;; only +, -, *, and / are valid</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">case</span> sym<br/>      <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"sy0\">-</span> <span class=\"sy0\">*</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span> #t<span class=\"br0\">]</span><br/>      <span class=\"br0\">[</span><span class=\"kw1\">else</span> #f<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"br0\">(</span><span class=\"kw1\">let*</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>ls <span class=\"br0\">(</span>flatten <span class=\"kw1\">exp</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>         <span class=\"br0\">[</span>numbers<span class=\"sy0\">*</span> <span class=\"br0\">(</span>filter <span class=\"kw1\">number?</span> ls<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>         <span class=\"br0\">[</span>symbols  <span class=\"br0\">(</span>remove <span class=\"kw1\">number?</span> ls<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">equal?</span> <span class=\"br0\">(</span>sort numbers <span class=\"sy0\">&lt;</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>sort numbers<span class=\"sy0\">*</span> <span class=\"sy0\">&lt;</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>every valid<span class=\"sy0\">-</span><span class=\"kw1\">symbol?</span> symbols<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> startup<span class=\"sy0\">-</span>message <span class=\"st0\">\"<br/>Write a lisp expression that evaluates to 24<br/>using only (, ), +, -, *, /<br/>and these four numbers: ~a<br/>\u00a0<br/>or '!' to get a new set of numbers<br/>or 'q' to quit\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> error<span class=\"sy0\">-</span>message <span class=\"st0\">\"<br/>Your expression ~a raised an exception:<br/>\u00a0<br/>  <span class=\"es0\">\\\"</span>~a<span class=\"es0\">\\\"</span><br/>\u00a0<br/>Please try again\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> bad<span class=\"sy0\">-</span>exp<span class=\"sy0\">-</span>message <span class=\"st0\">\"Sorry, ~a is a bad expression.\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> bad<span class=\"sy0\">-</span>result<span class=\"sy0\">-</span>message <span class=\"st0\">\"Sorry, ~a evaluates to ~a, not 24.\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> quit<span class=\"sy0\">-</span>message <span class=\"st0\">\"Thanks for playing...\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> winning<span class=\"sy0\">-</span>message <span class=\"st0\">\"You win!\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>provide play<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 36, "block": "<pre class=\"ruby highlighted_source\">const digits  = <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">9</span> <span class=\"sy0\">-&gt;</span> pick<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>const grammar = Regex<span class=\"br0\">(</span><br/>    <span class=\"st0\">'^ (?&amp;exp) <span class=\"es0\">\\z</span><br/>      (?(DEFINE)<br/>          (?&lt;exp&gt; ( (?&amp;term) (?&amp;op) (?&amp;term) )+ )<br/>          (?&lt;term&gt; <span class=\"es0\">\\(</span> (?&amp;exp) <span class=\"es0\">\\)</span> | ['</span> <span class=\"sy0\">+</span> digits.<span class=\"me1\">join</span> <span class=\"sy0\">+</span> <span class=\"st0\">'])<br/>          (?&lt;op&gt; [<span class=\"es0\">\\-</span>+*/] )<br/>      )'</span>, <span class=\"st0\">'x'</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/>say <span class=\"st0\">\"Here are your digits: #{digits.join(' ')}\"</span><br/>\u00a0<br/><span class=\"kw3\">loop</span> <span class=\"br0\">{</span><br/>    var input = read<span class=\"br0\">(</span><span class=\"st0\">\"Expression: \"</span>, <span class=\"kw3\">String</span><span class=\"br0\">)</span><br/>\u00a0<br/>    var expr = input<br/>    expr <span class=\"sy0\">-</span>= <span class=\"sy0\">/</span>\\s<span class=\"sy0\">+/</span>g     <span class=\"co1\"># remove all whitespace</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>input == <span class=\"st0\">'q'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        say <span class=\"st0\">\"Goodbye.  Sorry you couldn't win.\"</span><br/>        <span class=\"kw1\">break</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    var given_digits = digits.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">to_s</span><span class=\"br0\">}</span>.<span class=\"me1\">sort</span>.<span class=\"me1\">join</span><br/>    var entry_digits = input.<span class=\"me1\">scan</span><span class=\"br0\">(</span><span class=\"sy0\">/</span>\\d<span class=\"sy0\">/</span><span class=\"br0\">)</span>.<span class=\"me1\">sort</span>.<span class=\"me1\">join</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>given_digits\u00a0!= entry_digits<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>expr\u00a0!~ grammar<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        say <span class=\"st0\">\"That's not valid\"</span><br/>        <span class=\"kw1\">next</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    given<span class=\"br0\">(</span>var n = <span class=\"kw3\">eval</span><span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"nu0\">24</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> say <span class=\"st0\">\"You win!\"</span>; <span class=\"kw1\">break</span> <span class=\"br0\">}</span><br/>        default   <span class=\"br0\">{</span> say <span class=\"st0\">\"Sorry, your expression is #{n}, not 24\"</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Simula", "loc": 297, "block": "<pre class=\"text highlighted_source\">BEGIN<br/>\u00a0<br/>    CLASS EXPR;<br/>    BEGIN<br/>\u00a0<br/>\u00a0<br/>        REAL PROCEDURE POP;<br/>        BEGIN<br/>            IF STACKPOS &gt; 0 THEN<br/>            BEGIN STACKPOS\u00a0:= STACKPOS - 1; POP\u00a0:= STACK(STACKPOS); END;<br/>        END POP;<br/>\u00a0<br/>\u00a0<br/>        PROCEDURE PUSH(NEWTOP); REAL NEWTOP;<br/>        BEGIN<br/>            STACK(STACKPOS)\u00a0:= NEWTOP;<br/>            STACKPOS\u00a0:= STACKPOS + 1;<br/>        END PUSH;<br/>\u00a0<br/>\u00a0<br/>        REAL PROCEDURE CALC(OPERATOR, ERR); CHARACTER OPERATOR; LABEL ERR;<br/>        BEGIN<br/>            REAL X, Y; X\u00a0:= POP; Y\u00a0:= POP;<br/>            IF      OPERATOR = '+' THEN PUSH(Y + X)<br/>            ELSE IF OPERATOR = '-' THEN PUSH(Y - X)<br/>            ELSE IF OPERATOR = '*' THEN PUSH(Y * X)<br/>            ELSE IF OPERATOR = '/' THEN BEGIN<br/>                                            IF X = 0 THEN<br/>                                            BEGIN<br/>                                                EVALUATEDERR\u00a0:- \"DIV BY ZERO\";<br/>                                                GOTO ERR;<br/>                                            END;<br/>                                            PUSH(Y / X);<br/>                                        END<br/>            ELSE<br/>            BEGIN<br/>                EVALUATEDERR\u00a0:- \"UNKNOWN OPERATOR\";<br/>                GOTO ERR;<br/>            END<br/>        END CALC;<br/>\u00a0<br/>\u00a0<br/>        PROCEDURE READCHAR(CH); NAME CH; CHARACTER CH;<br/>        BEGIN<br/>            IF T.MORE THEN CH\u00a0:= T.GETCHAR ELSE CH\u00a0:= EOT;<br/>        END READCHAR;<br/>\u00a0<br/>\u00a0<br/>        PROCEDURE SKIPWHITESPACE(CH); NAME CH; CHARACTER CH;<br/>        BEGIN<br/>            WHILE (CH = SPACE) OR (CH = TAB) OR (CH = CR) OR (CH = LF) DO<br/>                READCHAR(CH);<br/>        END SKIPWHITESPACE;<br/>\u00a0<br/>\u00a0<br/>        PROCEDURE BUSYBOX(OP, ERR); INTEGER OP; LABEL ERR;<br/>        BEGIN<br/>            CHARACTER OPERATOR;<br/>            REAL NUMBR;<br/>            BOOLEAN NEGATIVE;<br/>\u00a0<br/>            SKIPWHITESPACE(CH);<br/>\u00a0<br/>            IF OP = EXPRESSION THEN<br/>            BEGIN<br/>\u00a0<br/>                NEGATIVE\u00a0:= FALSE;<br/>                WHILE (CH = '+') OR (CH = '-') DO<br/>                BEGIN<br/>                    IF CH = '-' THEN NEGATIVE\u00a0:=  NOT NEGATIVE;<br/>                    READCHAR(CH);<br/>                END;<br/>\u00a0<br/>                BUSYBOX(TERM, ERR);<br/>\u00a0<br/>                IF NEGATIVE THEN<br/>                BEGIN<br/>                    NUMBR\u00a0:= POP; PUSH(0 - NUMBR);<br/>                END;<br/>\u00a0<br/>                WHILE (CH = '+') OR (CH = '-') DO<br/>                BEGIN<br/>                    OPERATOR\u00a0:= CH; READCHAR(CH);<br/>                    BUSYBOX(TERM, ERR); CALC(OPERATOR, ERR);<br/>                END;<br/>\u00a0<br/>            END<br/>            ELSE IF OP = TERM THEN<br/>            BEGIN<br/>\u00a0<br/>                BUSYBOX(FACTOR, ERR);<br/>                WHILE (CH = '*') OR (CH = '/') DO<br/>                BEGIN<br/>                    OPERATOR\u00a0:= CH; READCHAR(CH);<br/>                    BUSYBOX(FACTOR, ERR); CALC(OPERATOR, ERR)<br/>                END<br/>\u00a0<br/>            END<br/>            ELSE IF OP = FACTOR THEN<br/>            BEGIN<br/>\u00a0<br/>                IF (CH = '+') OR (CH = '-') THEN<br/>                  BUSYBOX(EXPRESSION, ERR)<br/>                ELSE IF (CH &gt;= '0') AND (CH &lt;= '9') THEN<br/>                  BUSYBOX(NUMBER, ERR)<br/>                ELSE IF CH = '(' THEN<br/>                BEGIN<br/>                    READCHAR(CH);<br/>                    BUSYBOX(EXPRESSION, ERR);<br/>                    IF CH = ')' THEN READCHAR(CH) ELSE GOTO ERR;<br/>                END<br/>                ELSE GOTO ERR;<br/>\u00a0<br/>            END<br/>            ELSE IF OP = NUMBER THEN<br/>            BEGIN<br/>\u00a0<br/>                NUMBR\u00a0:= 0;<br/>                WHILE (CH &gt;= '0') AND (CH &lt;= '9') DO<br/>                BEGIN<br/>                    NUMBR\u00a0:= 10 * NUMBR + RANK(CH) - RANK('0'); READCHAR(CH);<br/>                END;<br/>                IF CH = '.' THEN<br/>                BEGIN<br/>                    REAL FAKTOR;<br/>                    READCHAR(CH);<br/>                    FAKTOR\u00a0:= 10;<br/>                    WHILE (CH &gt;= '0') AND (CH &lt;= '9') DO<br/>                    BEGIN<br/>                        NUMBR\u00a0:= NUMBR + (RANK(CH) - RANK('0')) / FAKTOR;<br/>                        FAKTOR\u00a0:= 10 * FAKTOR;<br/>                        READCHAR(CH);<br/>                    END;<br/>                END;<br/>                PUSH(NUMBR);<br/>\u00a0<br/>            END;<br/>\u00a0<br/>            SKIPWHITESPACE(CH);<br/>\u00a0<br/>        END BUSYBOX;<br/>\u00a0<br/>\u00a0<br/>        BOOLEAN PROCEDURE EVAL(INP); TEXT INP;<br/>        BEGIN<br/>            EVALUATEDERR\u00a0:- NOTEXT;<br/>            STACKPOS\u00a0:= 0;<br/>            T\u00a0:- COPY(INP.STRIP);<br/>            READCHAR(CH);<br/>            BUSYBOX(EXPRESSION, ERRORLABEL);<br/>         \u00a0! OUTTEXT(\"T = '\");<br/>         \u00a0! OUTTEXT(T);<br/>         \u00a0! OUTTEXT(\"'\");<br/>         \u00a0! OUTTEXT(\", T.POS = \");<br/>         \u00a0! OUTINT(T.POS, 0);<br/>         \u00a0! OUTTEXT(\", STACKPOS = \");<br/>         \u00a0! OUTINT(STACKPOS, 0);<br/>         \u00a0! OUTTEXT(\", T.MORE = \");<br/>         \u00a0! OUTCHAR(IF T.MORE THEN 'T' ELSE 'F');<br/>         \u00a0! OUTTEXT(\", CH = \");<br/>         \u00a0! OUTCHAR(CH);<br/>         \u00a0! OUTIMAGE;<br/>            IF NOT T.MORE AND STACKPOS = 1 AND CH = EOT THEN<br/>            BEGIN<br/>                EVALUATED\u00a0:= POP;<br/>                EVAL\u00a0:= TRUE;<br/>                GOTO NOERRORLABEL;<br/>            END;<br/>    ERRORLABEL:<br/>            EVAL\u00a0:= FALSE;<br/>            IF EVALUATEDERR = NOTEXT THEN<br/>                EVALUATEDERR\u00a0:- \"INVALID EXPRESSION: \" &amp; INP;<br/>    NOERRORLABEL:<br/>        END EVAL;<br/>\u00a0<br/>\u00a0<br/>        REAL PROCEDURE RESULT;<br/>            RESULT\u00a0:= EVALUATED;<br/>\u00a0<br/>        TEXT PROCEDURE ERR;<br/>            ERR\u00a0:- EVALUATEDERR;<br/>\u00a0<br/>        TEXT T;<br/>\u00a0<br/>        INTEGER EXPRESSION;<br/>        INTEGER TERM;<br/>        INTEGER FACTOR;<br/>        INTEGER NUMBER;<br/>\u00a0<br/>        CHARACTER TAB;<br/>        CHARACTER LF;<br/>        CHARACTER CR;<br/>        CHARACTER SPACE;<br/>        CHARACTER EOT;<br/>\u00a0<br/>        CHARACTER CH;<br/>        REAL ARRAY STACK(0:31);<br/>        INTEGER STACKPOS;<br/>\u00a0<br/>        REAL EVALUATED;<br/>        TEXT EVALUATEDERR;<br/>\u00a0<br/>        EXPRESSION\u00a0:= 1;<br/>        TERM\u00a0:= 2;<br/>        FACTOR\u00a0:= 3;<br/>        NUMBER\u00a0:= 4;<br/>\u00a0<br/>        TAB\u00a0:= CHAR(9);<br/>        LF\u00a0:= CHAR(10);<br/>        CR\u00a0:= CHAR(13);<br/>        SPACE\u00a0:= CHAR(32);<br/>        EOT\u00a0:= CHAR(0);<br/>\u00a0<br/>    END EXPR;<br/>\u00a0<br/>    INTEGER ARRAY DIGITS(1:4);<br/>    INTEGER SEED, I;<br/>    REF(EXPR) E;<br/>\u00a0<br/>    E\u00a0:- NEW EXPR;<br/>    OUTTEXT(\"ENTER RANDOM SEED: \");<br/>    OUTIMAGE;<br/>    SEED\u00a0:= ININT;<br/>    FOR I\u00a0:= 1 STEP 1 UNTIL 4 DO DIGITS(I)\u00a0:= RANDINT(0, 9, SEED);<br/>\u00a0<br/>L:  BEGIN<br/>        INTEGER ARRAY DIGITSUSED(0:9);<br/>        INTEGER ARRAY DIGITSTAKEN(0:9);<br/>        CHARACTER C, LASTC;<br/>        TEXT INP;<br/>\u00a0<br/>        LASTC\u00a0:= CHAR(0);<br/>        OUTTEXT(\"MAKE 24 USING THESE DIGITS: \");<br/>        FOR I\u00a0:= 1 STEP 1 UNTIL 4 DO<br/>        BEGIN<br/>            OUTINT(DIGITS(I), 2);<br/>            DIGITSUSED( DIGITS(I) )\u00a0:= DIGITSUSED( DIGITS(I) ) + 1;<br/>        END;<br/>        OUTIMAGE;<br/>        INIMAGE;<br/>        INP\u00a0:- COPY(SYSIN.IMAGE.STRIP);<br/>        OUTIMAGE;<br/>        WHILE INP.MORE DO<br/>        BEGIN<br/>            C\u00a0:= INP.GETCHAR;<br/>            IF (C &gt;= '0') AND (C &lt;= '9') THEN<br/>            BEGIN<br/>                INTEGER D;<br/>                IF (LASTC &gt;= '0') AND (LASTC &lt;= '9') THEN<br/>                BEGIN<br/>                    OUTTEXT(\"NUMBER HAS TOO MANY DIGITS: \");<br/>                    OUTCHAR(LASTC);<br/>                    OUTCHAR(C);<br/>                    OUTIMAGE;<br/>                    GOTO L;<br/>                END;<br/>                D\u00a0:= RANK(C) - RANK('0');<br/>                DIGITSTAKEN(D)\u00a0:= DIGITSTAKEN(D) + 1;<br/>            END<br/>            ELSE IF NOT ((C = '+') OR (C = '-') OR (C = '/') OR (C = '*') OR<br/>                         (C = ' ') OR (C = '(') OR (C = ')')) THEN<br/>            BEGIN<br/>                OUTTEXT(\"ILLEGAL INPUT CHARACTER: \");<br/>                OUTCHAR(C);<br/>                OUTIMAGE;<br/>                GOTO L;<br/>            END;<br/>            LASTC\u00a0:= C;<br/>        END;<br/>        FOR I\u00a0:= 0 STEP 1 UNTIL 9 DO<br/>        BEGIN<br/>            IF DIGITSUSED(I) &lt;&gt; DIGITSTAKEN(I) THEN<br/>            BEGIN<br/>                OUTTEXT(\"NOT THE SAME DIGITS.\");<br/>                OUTIMAGE;<br/>                GOTO L;<br/>            END;<br/>        END;<br/>        IF E.EVAL(INP) THEN<br/>        BEGIN<br/>            OUTTEXT(\"RESULT IS \");<br/>            OUTFIX(E.RESULT, 4, 10);<br/>            OUTIMAGE;<br/>            OUTTEXT(IF ABS(E.RESULT - 24) &lt; 0.001<br/>                    THEN \"YOU WIN\"<br/>                    ELSE \"YOU LOOSE\");<br/>            OUTIMAGE;<br/>        END<br/>        ELSE<br/>        BEGIN<br/>            OUTTEXT(E.ERR);<br/>            OUTIMAGE;<br/>        END;<br/>    END;<br/>\u00a0<br/>END.<br/>\u00a0</pre>"}, {"lang": "Swift", "loc": 75, "block": "<pre class=\"text highlighted_source\">import Darwin<br/>import Foundation<br/>\u00a0<br/>println(\"24 Game\")<br/>println(\"Generating 4 digits...\")<br/>\u00a0<br/>func randomDigits() -&gt; Int[] {<br/>    var result = Int[]();<br/>    for var i = 0; i &lt; 4; i++ {<br/>        result.append(Int(arc4random_uniform(9)+1))<br/>    }<br/>    return result;<br/>}<br/>\u00a0<br/>// Choose 4 digits<br/>let digits = randomDigits()<br/>\u00a0<br/>print(\"Make 24 using these digits\u00a0: \")<br/>\u00a0<br/>for digit in digits {<br/>    print(\"\\(digit) \")<br/>}<br/>println()<br/>\u00a0<br/>// get input from operator<br/>var input = NSString(data:NSFileHandle.fileHandleWithStandardInput().availableData, encoding:NSUTF8StringEncoding)<br/>\u00a0<br/>var enteredDigits = Int[]()<br/>\u00a0<br/>var enteredOperations = Character[]()<br/>\u00a0<br/>let inputString = input as String<br/>\u00a0<br/>// store input in the appropriate table<br/>for character in inputString {<br/>    switch character {<br/>        case \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\":<br/>            let digit = String(character)<br/>            enteredDigits.append(digit.toInt()!)<br/>        case \"+\", \"-\", \"*\", \"/\":<br/>            enteredOperations.append(character)<br/>        case \"\\n\":<br/>            println()<br/>        default:<br/>            println(\"Invalid expression\")<br/>    }<br/>}<br/>\u00a0<br/>// check value of expression provided by the operator<br/>var value = Int()<br/>\u00a0<br/>if enteredDigits.count == 4 &amp;&amp; enteredOperations.count == 3 {<br/>    value = enteredDigits[0]<br/>    for (i, operation) in enumerate(enteredOperations) {<br/>        switch operation {<br/>            case \"+\":<br/>                value = value + enteredDigits[i+1]<br/>            case \"-\":<br/>                value = value - enteredDigits[i+1]<br/>            case \"*\":<br/>                value = value * enteredDigits[i+1]<br/>            case \"/\":<br/>                value = value / enteredDigits[i+1]<br/>            default:<br/>                println(\"This message should never happen!\")<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>if value\u00a0!= 24 {<br/>    println(\"The value of the provided expression is \\(value) instead of 24!\")<br/>} else {<br/>    println(\"Congratulations, you found a solution!\")<br/>}<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 75, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># Four random non-zero digits</span><br/><span class=\"kw1\">proc</span> choose4 <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> digits <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> x <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> digits <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>int<span class=\"br0\">(</span><span class=\"nu0\">1</span>+rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> <span class=\"re0\">$digits</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Print out a welcome message</span><br/><span class=\"kw1\">proc</span> welcome digits <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> trim <span class=\"st0\">\"<br/>The 24 Game<br/>\u00a0<br/>Given any four digits in the range 1 to 9, which may have repetitions,<br/>Using just the +, -, *, and / operators; and the possible use of<br/>brackets, (), show how to make an answer of 24.<br/>\u00a0<br/>An answer of <span class=\"es0\">\\\"</span>q<span class=\"es0\">\\\"</span> will quit the game.<br/>An answer of <span class=\"es0\">\\\"</span>!<span class=\"es0\">\\\"</span> will generate a new set of four digits.<br/>Otherwise you are repeatedly asked for an expression until it evaluates to 24<br/>\u00a0<br/>Note: you cannot form multiple digit numbers from the supplied digits,<br/>so an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.<br/>    \"</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Your four digits: $digits\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Check whether we've got a legal answer</span><br/><span class=\"kw1\">proc</span> check <span class=\"br0\">{</span>answer digits<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><br/>\t<span class=\"br0\">[</span><span class=\"kw2\">regexp</span> <span class=\"st0\">\"<span class=\"es0\">\\[</span>^-+*/() <span class=\"es0\">\\t</span>[join $digits {}]<span class=\"es0\">\\]</span>\"</span> <span class=\"re0\">$answer</span><span class=\"br0\">]</span><br/>\t|| <span class=\"br0\">[</span><span class=\"kw2\">regexp</span> <span class=\"br0\">{</span>\\d\\d<span class=\"br0\">}</span> <span class=\"re0\">$answer</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> false<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> digs <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> <span class=\"br0\">[</span><span class=\"kw2\">regexp</span> -inline -all <span class=\"br0\">{</span>\\d<span class=\"br0\">}</span> <span class=\"re0\">$answer</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$digs</span> ne <span class=\"re0\">$digits</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> false<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw1\">catch</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"re0\">$answer</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># The main game loop</span><br/><span class=\"kw1\">proc</span> main <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">fconfigure</span> stdout -buffering none<br/>\u00a0<br/>    <span class=\"kw1\">set</span> digits <span class=\"br0\">[</span>choose4<span class=\"br0\">]</span><br/>    welcome <span class=\"re0\">$digits</span><br/>    <span class=\"kw1\">set</span> trial <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> true <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">puts</span> -nonewline <span class=\"st0\">\"Expression [incr trial]: \"</span><br/>\t<span class=\"kw2\">gets</span> stdin answer<br/>\u00a0<br/>        <span class=\"co1\"># Check for various types of non-answer</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">eof</span> stdin<span class=\"br0\">]</span> || <span class=\"re0\">$answer</span> eq <span class=\"st0\">\"q\"</span> || <span class=\"re0\">$answer</span> eq <span class=\"st0\">\"Q\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">break</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$answer</span> eq <span class=\"st0\">\"!\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> digits <span class=\"br0\">[</span>choose4<span class=\"br0\">]</span><br/>\t    <span class=\"kw2\">puts</span> <span class=\"st0\">\"New digits: $digits\"</span><br/>\t    <span class=\"kw1\">continue</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span>check <span class=\"re0\">$answer</span> <span class=\"re0\">$digits</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">puts</span> <span class=\"st0\">\"The input '$answer' was wonky!\"</span><br/>            <span class=\"kw1\">continue</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\"># Check to see if it is the right answer</span><br/>\t<span class=\"kw1\">set</span> ans <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">[</span><span class=\"kw2\">regsub</span> <span class=\"br0\">{</span>\\d<span class=\"br0\">}</span> <span class=\"re0\">$answer</span> <span class=\"br0\">{</span><span class=\"sy0\">&amp;</span>.0<span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"st0\">\" = [string trimright $ans .0]\"</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$ans</span> == <span class=\"nu0\">24.0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">puts</span> <span class=\"st0\">\"That's right!\"</span><br/>            <span class=\"kw1\">break</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"Thank you and goodbye\"</span><br/><span class=\"br0\">}</span><br/>main</pre>"}, {"lang": "TorqueScript", "loc": 167, "block": "<pre class=\"text highlighted_source\">function startTwentyFourGame()<br/>{<br/>\tif($numbers\u00a0!$= \"\")<br/>\t{<br/>\t\techo(\"Ending current 24 game...\");<br/>\t\tendTwentyFourGame();<br/>\t}<br/>\u00a0<br/>\techo(\"Welcome to the 24 game!\");<br/>\techo(\"Generating 4 numbers...\");<br/>\tfor(%a = 0;\u00a0%a &lt; 4;\u00a0%a++)<br/>\t\t$numbers = setWord($numbers,\u00a0%a, getRandom(0, 9));<br/>\u00a0<br/>\techo(\"Numbers generated! Here are your numbers:\");<br/>\techo($numbers);<br/>\techo(\"Use try24Equation( equation ); to try and guess the equation.\");<br/>\u00a0<br/>\t$TwentyFourGame = 1;<br/>}<br/>\u00a0<br/>function endTwentyFourGame()<br/>{<br/>\tif(!$TwentyFourGame)<br/>\t{<br/>\t\techo(\"No 24 game is active!\");<br/>\t\treturn false;<br/>\t}<br/>\u00a0<br/>\techo(\"Ending the 24 game.\");<br/>\t$numbers = \"\";<br/>\t$TwentyFourGame = 0;<br/>}<br/>\u00a0<br/>function try24Equation(%equ)<br/>{<br/>\tif(!$TwentyFourGame)<br/>\t{<br/>\t\techo(\"No 24 game is active!\");<br/>\t\treturn false;<br/>\t}<br/>\t%numbers = \"0123456789\";<br/>\t%operators = \"+-*x/()\";<br/>\t%tempchars = $numbers;<br/>\t%other = strReplace(%tempchars, \" \", \"\");<br/>\u00a0<br/>\t//Check it and make sure it has all the stuff<br/>\t%equ = strReplace(%equ, \" \", \"\");<br/>\t%length = strLen(%equ);<br/>\u00a0<br/>\tfor(%a = 0;\u00a0%a &lt;\u00a0%Length;\u00a0%a++)<br/>\t{<br/>\t\t%Char = getSubStr(%equ,\u00a0%a, 1);<br/>\t\tif(%a+1\u00a0!=\u00a0%Length)<br/>\t\t\t%Next = getSubStr(%equ,\u00a0%a+1, 1);<br/>\t\telse<br/>\t\t\t%Next = \" \";<br/>\u00a0<br/>\t\tif(strPos(%numbers @\u00a0%operators,\u00a0%char) &lt; 0)<br/>\t\t{<br/>\t\t\techo(\"The equation you entered is invalid! Try again.\");<br/>\t\t\treturn false;<br/>\t\t}<br/>\t\tif(strPos(%tempchars,\u00a0%char) &lt; 0 &amp;&amp; strPos(%operators,\u00a0%char) &lt; 0)<br/>\t\t{<br/>\t\t\techo(\"The equation you entered uses a number you were not given! Try again.\");<br/>\t\t\treturn false;<br/>\t\t}<br/>\t\telse if(strPos(%numbers,\u00a0%next) &gt;= 0 &amp;&amp; strPos(%numbers,\u00a0%char) &gt;= 0)<br/>\t\t{<br/>\t\t\techo(\"No numbers above 9 please! Try again.\");<br/>\t\t\techo(%next SPC\u00a0%char SPC\u00a0%a);<br/>\t\t\treturn false;<br/>\t\t}<br/>\t\telse if(strPos(%operators,\u00a0%char) &gt; 0)<br/>\t\t\tcontinue;<br/>\u00a0<br/>\t\t%pos = 2*strPos(%other,\u00a0%char);<br/>\t\tif(%pos &lt; 0)<br/>\t\t\treturn \"ERROROMG\";<br/>\u00a0<br/>\t\t//Remove it from the allowed numbers<br/>\t\t%tempchars = removeWord(%tempchars,\u00a0%pos/2);<br/>\t\t%other = getSubStr(%other, 0,\u00a0%pos) @ getSubStr(%other,\u00a0%pos+1, strLen(%other));<br/>    }<br/>\u00a0<br/>   \u00a0%result = doEquation(%equ);<br/>\u00a0<br/>    if(%result\u00a0!= 24)<br/>    {<br/>        echo(\"Your equation resulted to\" SPC\u00a0%result @ \", not 24! Try again.\");<br/>        return false;<br/>    }<br/>\u00a0<br/>    for(%a = 0;\u00a0%a &lt; 4;\u00a0%a++)<br/>        $numbers = setWord($numbers,\u00a0%a, getRandom(0, 9));<br/>\u00a0<br/>    echo(\"Great job!\" SPC\u00a0%equ SPC \"Does result to 24! Here's another set for you:\");<br/>    echo($numbers);<br/>}<br/>\u00a0<br/>//Evaluates an equation without using eval.<br/>function doEquation(%equ)<br/>{   //Validate the input<br/>   \u00a0%equ = strReplace(%equ, \" \", \"\");%equ = strReplace(%equ, \"*\", \"x\");<br/>   \u00a0%equ = strReplace(%equ, \"+\", \" + \");%equ = strReplace(%equ, \"x\", \" x \");<br/>   \u00a0%equ = strReplace(%equ, \"/\", \" / \");%equ = strReplace(%equ, \"-\", \" - \");<br/>\u00a0<br/>    //Parenthesis'<br/>    while(strPos(%equ, \"(\") &gt; -1 &amp;&amp; strPos(%equ, \")\") &gt; 0)<br/>    {<br/>       \u00a0%start = strPos(%equ, \"(\");<br/>       \u00a0%end =\u00a0%start;<br/>       \u00a0%level = 1;<br/>        while(%level\u00a0!= 0 &amp;&amp;\u00a0%end\u00a0!= strLen(%equ))<br/>        {<br/>           \u00a0%end++;<br/>            if(getsubStr(%equ,\u00a0%end, 1) $= \"(\")\u00a0%level++;<br/>            if(getsubStr(%equ,\u00a0%end, 1) $= \")\")\u00a0%level--;<br/>        }<br/>        if(%level\u00a0!= 0)<br/>            return \"ERROR\";<br/>       \u00a0%inbrackets = getsubStr(%equ,\u00a0%start+1,\u00a0%end - strLen(getsubStr(%equ, 0,\u00a0%start + 1)));<br/>       \u00a0%leftofbrackets = getsubStr(%equ, 0,\u00a0%start);<br/>       \u00a0%rightofbrackets = getsubStr(%equ,\u00a0%end + 1, strLen(%equ) -\u00a0%end);<br/>       \u00a0%equ =\u00a0%leftofbrackets @ doEquation(%inbrackets) @\u00a0%rightofbrackets;<br/>    }<br/>\u00a0<br/>    if(strPos(%equ, \"ERROR\") &gt;= 0)<br/>        return \"ERROR\";<br/>\u00a0<br/>    //Multiplication/Division loop<br/>    for(%a = 0;\u00a0%a &lt; getWordCount(%equ);\u00a0%a++)<br/>    {<br/>        if(getWord(%equ,\u00a0%a) $= \"x\" || getWord(%equ,\u00a0%a) $= \"/\" &amp;&amp;\u00a0%a\u00a0!= 0)<br/>        {<br/>           \u00a0%f = getWord(%equ,\u00a0%a - 1);<br/>           \u00a0%l = getWord(%equ,\u00a0%a + 1);<br/>           \u00a0%o = getWord(%equ,\u00a0%a);<br/>            switch$(%o)<br/>            {<br/>                case \"x\":\u00a0%a--;<br/>                   \u00a0%equ = removeWord(removeWord(setWord(%equ,\u00a0%a+1,\u00a0%f *\u00a0%l),\u00a0%a+2),\u00a0%a);<br/>                case \"/\":\u00a0%a--;<br/>                   \u00a0%equ = removeWord(removeWord(setWord(%equ,\u00a0%a+1,\u00a0%f /\u00a0%l),\u00a0%a+2),\u00a0%a);<br/>            }<br/>        }<br/>    }<br/>\u00a0<br/>    //Addition/Subraction loop<br/>    for(%a = 0;\u00a0%a &lt; getWordCount(%equ);\u00a0%a++)<br/>    {<br/>        if(getWord(%equ,\u00a0%a) $= \"+\" || getWord(%equ,\u00a0%a) $= \"-\" &amp;&amp;\u00a0%a\u00a0!= 0)<br/>        {<br/>           \u00a0%f = getWord(%equ,\u00a0%a - 1);<br/>           \u00a0%l = getWord(%equ,\u00a0%a + 1);<br/>           \u00a0%o = getWord(%equ,\u00a0%a);<br/>            switch$(%o)<br/>            {<br/>                case \"+\":\u00a0%a--;<br/>                   \u00a0%equ = removeWord(removeWord(setWord(%equ,\u00a0%a+1,\u00a0%f +\u00a0%l),\u00a0%a+2),\u00a0%a);<br/>                case \"-\":\u00a0%a--;<br/>                   \u00a0%equ = removeWord(removeWord(setWord(%equ,\u00a0%a+1,\u00a0%f -\u00a0%l),\u00a0%a+2),\u00a0%a);<br/>            }<br/>        }<br/>    }<br/>    return\u00a0%equ;<br/>}</pre>"}, {"lang": "TUSCRIPT", "loc": 75, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>BUILD X_TABLE blanks = \":':\u00a0:\"<br/>\u00a0<br/>SECTION game<br/>operators=\"*'/'+'-'(')\",numbers=\"\"<br/>\u00a0<br/>LOOP n=1,4<br/>number=RANDOM_NUMBERS (1,9,1)<br/>numbers=APPEND(numbers,number)<br/>ENDLOOP<br/>\u00a0<br/>SET allowed=APPEND (numbers,operators)<br/>SET allowed=MIXED_SORT (allowed)<br/>SET allowed=REDUCE (allowed)<br/>BUILD S_TABLE ALLOWED =*<br/>DATA '{allowed}'<br/>\u00a0<br/>SET checksum=DIGIT_SORT (numbers)<br/>\u00a0<br/>printnumbers=EXCHANGE (numbers,blanks)<br/>printoperat=EXCHANGE (operators,blanks)<br/>\u00a0<br/>PRINT \"Your numbers \", printnumbers<br/>PRINT \"Use only these operators \", printoperat<br/>PRINT \"Enter an expression that equates to 24\"<br/>PRINT \"Enter 'l' for new numbers\"<br/>PRINT \"Your 4 digits: \",printnumbers<br/>\u00a0<br/>DO play<br/>ENDSECTION<br/>\u00a0<br/>SECTION check_expr<br/> SET pos = VERIFY (expr,allowed)<br/> IF (pos!=0) THEN<br/>  PRINT \"wrong entry on position \",pos<br/>  DO play<br/>  STOP<br/> ELSE<br/>  SET yourdigits   = STRINGS (expr,\":&gt;/:\")<br/>  SET yourchecksum = DIGIT_SORT (yourdigits)<br/>   IF (checksum!=yourchecksum) THEN<br/>    PRINT/ERROR \"wrong digits\"<br/>    DO play<br/>    STOP<br/>   ELSE<br/>    CONTINUE<br/>   ENDIF<br/> ENDIF<br/>ENDSECTION<br/>\u00a0<br/>SECTION play<br/>LOOP n=1,3<br/>ASK   \"Expression {n}\": expr=\"\"<br/>IF (expr==\"l\") THEN<br/>RELEASE S_TABLE allowed<br/>PRINT \"Your new numbers\"<br/>DO game<br/>ELSEIF (expr!=\"\") THEN<br/>DO check_expr<br/>sum={expr}<br/> IF (sum!=24) THEN<br/>  PRINT/ERROR expr,\" not equates 24 but \",sum<br/>  CYCLE<br/> ELSE<br/>  PRINT \"BINGO \", expr,\" equates \", sum<br/>  STOP<br/> ENDIF<br/>ELSE<br/> CYCLE<br/>ENDIF<br/>ENDLOOP<br/>ENDSECTION<br/>DO game<br/>\u00a0</pre>"}, {"lang": "UNIX Shell", "loc": 30, "block": "<pre class=\"bash highlighted_source\">gen_digits<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">awk</span> <span class=\"st_h\">'BEGIN { srand()<br/>                 for(i = 1; i &lt;= 4; i++) print 1 + int(9 * rand())<br/>         }'</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sort</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>same_digits<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es4\">$(tr -dc 0-9 | sed 's/./&amp;\\n/g' | grep . | sort)</span>\"</span> = <span class=\"st0\">\"$*\"</span> <span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>guessed<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es4\">$(echo \"$1\" | tr -dc '\\n0-9()</span>*/+-' | bc 2&gt;/dev/null)\"</span> = <span class=\"nu0\">24</span> <span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">while</span>\u00a0:<br/><span class=\"kw1\">do</span><br/>    <span class=\"re2\">digits</span>=$<span class=\"br0\">(</span>gen_digits<span class=\"br0\">)</span><br/>    <span class=\"kw3\">echo</span><br/>    <span class=\"kw3\">echo</span> Digits: <span class=\"re1\">$digits</span><br/>    <span class=\"kw2\">read</span> <span class=\"re5\">-r</span> <span class=\"kw2\">expr</span><br/>\u00a0<br/>    <span class=\"kw3\">echo</span> <span class=\"st0\">\" <span class=\"es2\">$expr</span>\"</span> <span class=\"sy0\">|</span> same_digits <span class=\"st0\">\"<span class=\"es2\">$digits</span>\"</span> <span class=\"sy0\">||</span> \\<br/>        <span class=\"br0\">{</span> <span class=\"kw3\">echo</span> digits should be: <span class=\"re1\">$digits</span>; <span class=\"kw3\">continue</span>; <span class=\"br0\">}</span><br/>\u00a0<br/>    guessed <span class=\"st0\">\"<span class=\"es2\">$expr</span>\"</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re2\">message</span>=correct \\<br/>                    <span class=\"sy0\">||</span> <span class=\"re2\">message</span>=wrong<br/>\u00a0<br/>    <span class=\"kw3\">echo</span> <span class=\"re1\">$message</span><br/><span class=\"kw1\">done</span></pre>"}, {"lang": "VBA", "loc": 125, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Sub</span> Rosetta_24game()<br/>\u00a0<br/><span class=\"kw4\">Dim</span> Digit(4) <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, i <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, iDigitCount <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw4\">Dim</span> stUserExpression <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw4\">Dim</span> stFailMessage <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, stFailDigits <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw4\">Dim</span> bValidExpression <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span>, bValidDigits <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span>, bValidChars <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/><span class=\"kw4\">Dim</span> vResult <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>, vTryAgain <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>, vSameDigits <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span><br/>\u00a0<br/><span class=\"co1\">' Generate 4 random digits<br/></span>GenerateNewDigits:<br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> 4<br/>        Digit(i) = [randbetween(1,9)]<br/>    <span class=\"kw3\">Next</span> i<br/>\u00a0<br/><span class=\"co1\">' Get user expression<br/></span>GetUserExpression:<br/>    bValidExpression = <span class=\"kw5\">True</span><br/>    stFailMessage = <span class=\"st0\">\"\"</span><br/>    stFailDigits = <span class=\"st0\">\"\"</span><br/>    stUserExpression = InputBox(<span class=\"st0\">\"Enter a mathematical expression which results in 24, using the following digits: \"</span> &amp; _<br/>        Digit(1) &amp; <span class=\"st0\">\", \"</span> &amp; Digit(2) &amp; <span class=\"st0\">\", \"</span> &amp; Digit(3) &amp; <span class=\"st0\">\" and \"</span> &amp; Digit(4), <span class=\"st0\">\"Rosetta Code | 24 Game\"</span>)<br/>\u00a0<br/><span class=\"co1\">' Check each digit is included in user expression<br/></span>    bValidDigits = <span class=\"kw5\">True</span><br/>    stFailDigits = <span class=\"st0\">\"\"</span><br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> 4<br/>        <span class=\"kw3\">If</span> InStr(stUserExpression, Digit(i)) = 0 <span class=\"kw3\">Then</span><br/>            bValidDigits = <span class=\"kw5\">False</span><br/>            stFailDigits = stFailDigits &amp; <span class=\"st0\">\" \"</span> &amp; Digit(i)<br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Next</span> i<br/>    <span class=\"kw3\">If</span> bValidDigits = <span class=\"kw5\">False</span> <span class=\"kw3\">Then</span><br/>        bValidExpression = <span class=\"kw5\">False</span><br/>        stFailMessage = <span class=\"st0\">\"Your expression excluded the following required digits: \"</span> &amp; stFailDigits &amp; vbCr &amp; vbCr<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\u00a0<br/><span class=\"co1\">' Check each character of user expression is a valid character type<br/></span>    bValidDigits = <span class=\"kw5\">True</span><br/>    stFailDigits = <span class=\"st0\">\"\"</span><br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> Len(stUserExpression)<br/>        <span class=\"kw3\">If</span> InStr(<span class=\"st0\">\"0123456789+-*/()\"</span>, Mid(stUserExpression, i, 1)) = 0 <span class=\"kw3\">Then</span><br/>            bValidDigits = <span class=\"kw5\">False</span><br/>            stFailDigits = stFailDigits &amp; <span class=\"st0\">\" \"</span> &amp; Mid(stUserExpression, i, 1)<br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Next</span> i<br/>    <span class=\"kw3\">If</span> bValidDigits = <span class=\"kw5\">False</span> <span class=\"kw3\">Then</span><br/>        bValidExpression = <span class=\"kw5\">False</span><br/>        stFailMessage = stFailMessage &amp; <span class=\"st0\">\"Your expression contained invalid characters:\"</span> &amp; stFailDigits &amp; vbCr &amp; vbCr<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\u00a0<br/><span class=\"co1\">' Check no disallowed integers entered<br/></span>    bValidDigits = <span class=\"kw5\">True</span><br/>    stFailDigits = <span class=\"st0\">\"\"</span><br/>    iDigitCount = 0<br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> Len(stUserExpression)<br/>        <span class=\"kw3\">If</span> <span class=\"kw3\">Not</span> InStr(<span class=\"st0\">\"0123456789\"</span>, Mid(stUserExpression, i, 1)) = 0 <span class=\"kw3\">Then</span><br/>            iDigitCount = iDigitCount + 1<br/>            <span class=\"kw3\">If</span> IsError(Application.Match(--(Mid(stUserExpression, i, 1)), Digit, <span class=\"kw5\">False</span>)) <span class=\"kw3\">Then</span><br/>                bValidDigits = <span class=\"kw5\">False</span><br/>                stFailDigits = stFailDigits &amp; <span class=\"st0\">\" \"</span> &amp; Mid(stUserExpression, i, 1)<br/>            <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Next</span> i<br/>    <span class=\"kw3\">If</span> iDigitCount &gt; 4 <span class=\"kw3\">Then</span><br/>        bValidExpression = <span class=\"kw5\">False</span><br/>        stFailMessage = stFailMessage &amp; <span class=\"st0\">\"Your expression contained more than 4 digits\"</span> &amp; vbCr &amp; vbCr<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>        <span class=\"kw3\">If</span> iDigitCount &lt; 4 <span class=\"kw3\">Then</span><br/>        bValidExpression = <span class=\"kw5\">False</span><br/>        stFailMessage = stFailMessage &amp; <span class=\"st0\">\"Your expression contained less than 4 digits\"</span> &amp; vbCr &amp; vbCr<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">If</span> bValidDigits = <span class=\"kw5\">False</span> <span class=\"kw3\">Then</span><br/>        bValidExpression = <span class=\"kw5\">False</span><br/>        stFailMessage = stFailMessage &amp; <span class=\"st0\">\"Your expression contained invalid digits:\"</span> &amp; stFailDigits &amp; vbCr &amp; vbCr<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\u00a0<br/><span class=\"co1\">' Check no double digit numbers entered<br/></span>    bValidDigits = <span class=\"kw5\">True</span><br/>    stFailDigits = <span class=\"st0\">\"\"</span><br/>    <span class=\"kw3\">For</span> i = 11 <span class=\"kw3\">To</span> 99<br/>        <span class=\"kw3\">If</span> <span class=\"kw3\">Not</span> InStr(stUserExpression, i) = 0 <span class=\"kw3\">Then</span><br/>            bValidDigits = <span class=\"kw5\">False</span><br/>            stFailDigits = stFailDigits &amp; <span class=\"st0\">\" \"</span> &amp; i<br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Next</span> i<br/>    <span class=\"kw3\">If</span> bValidDigits = <span class=\"kw5\">False</span> <span class=\"kw3\">Then</span><br/>        bValidExpression = <span class=\"kw5\">False</span><br/>        stFailMessage = stFailMessage &amp; <span class=\"st0\">\"Your expression contained invalid numbers:\"</span> &amp; stFailDigits &amp; vbCr &amp; vbCr<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\u00a0<br/><span class=\"co1\">' Check result of user expression<br/></span>    <span class=\"kw4\">On</span> <span class=\"kw4\">Error</span> <span class=\"kw3\">GoTo</span> EvalFail<br/>    vResult = Evaluate(stUserExpression)<br/>    <span class=\"kw3\">If</span> <span class=\"kw3\">Not</span> vResult = 24 <span class=\"kw3\">Then</span><br/>        bValidExpression = <span class=\"kw5\">False</span><br/>        stFailMessage = stFailMessage &amp; <span class=\"st0\">\"Your expression did not result in 24. It returned: \"</span> &amp; vResult<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\u00a0<br/><span class=\"co1\">' Return results<br/></span>    <span class=\"kw3\">If</span> bValidExpression = <span class=\"kw5\">False</span> <span class=\"kw3\">Then</span><br/>        vTryAgain = MsgBox(stFailMessage &amp; vbCr &amp; vbCr &amp; <span class=\"st0\">\"Would you like to try again?\"</span>, vbCritical + vbRetryCancel, <span class=\"st0\">\"Rosetta Code | 24 Game | FAILED\"</span>)<br/>            <span class=\"kw3\">If</span> vTryAgain = vbRetry <span class=\"kw3\">Then</span><br/>                vSameDigits = MsgBox(<span class=\"st0\">\"Do you want to use the same numbers?\"</span>, vbQuestion + vbYesNo, <span class=\"st0\">\"Rosetta Code | 24 Game | RETRY\"</span>)<br/>                <span class=\"kw3\">If</span> vSameDigits = vbYes <span class=\"kw3\">Then</span><br/>                    <span class=\"kw3\">GoTo</span> GetUserExpression<br/>                <span class=\"kw3\">Else</span><br/>                    <span class=\"kw3\">GoTo</span> GenerateNewDigits<br/>                <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>            <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Else</span><br/>        vTryAgain = MsgBox(<span class=\"st0\">\"You entered: \"</span> &amp; stUserExpression &amp; vbCr &amp; vbCr &amp; <span class=\"st0\">\"which resulted in: \"</span> &amp; vResult, _<br/>            vbInformation + vbRetryCancel, <span class=\"st0\">\"Rosetta Code | 24 Game | SUCCESS\"</span>)<br/>        <span class=\"kw3\">If</span> vTryAgain = vbRetry <span class=\"kw3\">Then</span><br/>            <span class=\"kw3\">GoTo</span> GenerateNewDigits<br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw2\">Exit</span> <span class=\"kw2\">Sub</span><br/>EvalFail:<br/>    bValidExpression = <span class=\"kw5\">False</span><br/>    vResult = Err.Description<br/>    <span class=\"kw4\">Resume</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Yabasic", "loc": 118, "block": "<pre class=\"text highlighted_source\">operadores$ = \"*/+-\"<br/>espacios$ = \"                                                                                \"<br/>\u00a0<br/>clear screen<br/>print \"24 Game\"<br/>print \"============\\n\"<br/>print \"The player is provided with 4 numbers with which to perform operations\"<br/>print \"of addition (+), subtraction (-), multiplication (*) or division (/) to attempt\"<br/>print \"to get 24 as result.\"<br/>print \"Use reverse Polish notation (first the operands and then the operators).\"<br/>print \"For example: instead of 2 + 4, type 2 4 +\\n\\n\"<br/>\u00a0<br/>repeat<br/>\tprint at(0,9) espacios$, espacios$, espacios$, espacios$, espacios$, espacios$<br/>\tprint at(0,9);<br/>\tserie$ = ordenaCadena$(genSerie$())<br/>\tvalidos$ = serie$+operadores$<br/>\tline input \"Enter your formula in reverse Polish notation: \" entrada$<br/>\tentrada$ = quitaEspacios$(entrada$)<br/>\tentradaOrd$ = ordenaCadena$(entrada$)<br/>\tif (right$(entradaOrd$,4) &lt;&gt; serie$) or (len(entradaOrd$)&lt;&gt;7) then<br/>\t\tprint \"Error in the entered series\"<br/>\telse<br/>\t\tresultado = evaluaEntrada(entrada$)<br/>\t\tprint \"The result is = \",resultado,\" \"<br/>\t\tif resultado = 24 then<br/>\t\t\tprint \"Correct!\"<br/>\t\telse<br/>\t\t\tprint \"Error!\"<br/>\t\tend if<br/>\tend if<br/>\tprint \"Want to try again? (press N to exit, or another key to continue)\"<br/>until(upper$(left$(inkey$(),1)) = \"N\")<br/>\u00a0<br/>sub genSerie$()<br/>\tlocal i, c$, s$<br/>\u00a0<br/>\tprint \"The numbers to be used are: \";<br/>\ti = ran()<br/>\tfor i = 1 to 4<br/>\t\tc$ = str$(int(ran(9))+1)<br/>\t\tprint c$,\" \";<br/>\t\ts$ = s$ + c$<br/>\tnext i<br/>\tprint<br/>\treturn s$<br/>end sub<br/>\u00a0<br/>\u00a0<br/>sub evaluaEntrada(entr$)<br/>\tlocal d1, d2, c$, n(4), i<br/>\u00a0<br/>\twhile(entr$&lt;&gt;\"\")<br/>\t\tc$ = left$(entr$,1)<br/>\t\tentr$ = mid$(entr$,2)\t\t<br/>\t\tif instr(serie$,c$) then<br/>\t\t\ti = i + 1<br/>\t\t\tn(i) = val(c$)<br/>\t\telseif instr(operadores$,c$) then<br/>\t\t\td2 = n(i)<br/>\t\t\tn(i) = 0<br/>\t\t\ti = i - 1<br/>\t\t\td1 = n(i)<br/>\t\t\tn(i) = evaluador(d1, d2, c$)<br/>\t\telse<br/>\t\t\tprint \"Invalid sign\"<br/>\t\t\treturn<br/>\t\tend if<br/>\twend<br/>\u00a0<br/>\treturn n(i)<br/>\u00a0<br/>end sub<br/>\u00a0<br/>\u00a0<br/>sub evaluador(d1, d2, op$)<br/>\tlocal t<br/>\u00a0<br/>\tswitch op$<br/>\t\tcase \"+\": t = d1 + d2\u00a0: break<br/>\t\tcase \"-\": t = d1 - d2\u00a0: break<br/>\t\tcase \"*\": t = d1 * d2\u00a0: break<br/>\t\tcase \"/\": t = d1 / d2\u00a0: break<br/>\tend switch<br/>\u00a0<br/>\treturn t<br/>end sub<br/>\u00a0<br/>\u00a0<br/>sub quitaEspacios$(entr$)<br/>\tlocal n, i, s$, t$(1)<br/>\u00a0<br/>\tn = token(entr$,t$(),\" \")<br/>\u00a0<br/>\tfor i=1 to n<br/>\t\ts$ = s$ + t$(i)<br/>\tnext i<br/>\treturn s$<br/>end sub<br/>\u00a0<br/>\u00a0<br/>sub ordenaCadena$(cadena$)<br/>\tlocal testigo, n, fin, c$<br/>\u00a0<br/>\tfin = len(cadena$)-1<br/>\trepeat<br/>\t\ttestigo = false<br/>\t\tfor n = 1 to fin<br/>\t\t\tif mid$(cadena$,n,1) &gt; mid$(cadena$,n+1,1) then<br/>\t\t\t\ttestigo = true<br/>\t\t\t\tc$ = mid$(cadena$,n,1)<br/>\t\t\t\tmid$(cadena$,n,1) = mid$(cadena$,n+1,1)<br/>\t\t\t\tmid$(cadena$,n+1,1) = c$<br/>\t\t\tend if<br/>\t\tnext n<br/>\tuntil(testigo = false)<br/>\treturn cadena$<br/>end sub</pre>"}, {"lang": "zkl", "loc": 19, "block": "<pre class=\"text highlighted_source\">while(1){<br/>   digits\u00a0:= [1..4].pump(String,(0).random.fpM(\"11-\",1,9));<br/>   exp\u00a0:= ask(\"Enter an expression using the digits \",digits,<br/>\t      \" that evals to 24: \") - \" \\n\";<br/>   expf:=exp.apply(fcn(c){if (\"1\"&lt;=c&lt;=\"9\") \"(%s).toFloat()\".fmt(c) else c});<br/>   reg r;<br/>   try { Compiler.Compiler.compileText(expf).__constructor(); r=vm.regX }<br/>   catch { println(\"bad expression\"); continue; }<br/>   else{ <br/>      extra\u00a0:= (exp - \"+-/*()\" - digits);<br/>      if (extra) { println(\"Extra goodies in expression: \",extra); continue; }<br/>      (digits.split(\"\").sort()\u00a0!= (exp - \"+-/*()\").split(\"\").sort())\u00a0:<br/>         if(_) { println(\"You can only use the digits \",digits,\" once each\"); continue; };<br/>      if (exp.matches(\"*[1-9][1-9]*\"))<br/>\t { println(\"no repeated digits\"); continue; }<br/>      if (r.closeTo(24,0.001)) \"nice!\".println();<br/>      else println(\"That evaled to \",r,\", not 24\");<br/>   }<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 52, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> n$=<span class=\"st0\">\"\"</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">RANDOMIZE</span> <br/><span class=\"nu0\">30</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">4</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">LET</span> n$=n$+<span class=\"kw3\">STR</span>$ <span class=\"br0\">(</span><span class=\"kw3\">INT</span> <span class=\"br0\">(</span><span class=\"kw3\">RND</span>*<span class=\"nu0\">9</span><span class=\"br0\">)</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">60</span> <span class=\"kw1\">LET</span> i$=<span class=\"st0\">\"\"</span>: <span class=\"kw1\">LET</span> f$=<span class=\"st0\">\"\"</span>: <span class=\"kw1\">LET</span> p$=<span class=\"st0\">\"\"</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">CLS</span> <br/><span class=\"nu0\">80</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"24 game\"</span><br/><span class=\"nu0\">90</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Allowed characters:\"</span><br/><span class=\"nu0\">100</span> <span class=\"kw1\">LET</span> i$=n$+<span class=\"st0\">\"+-*/()\"</span><br/><span class=\"nu0\">110</span> <span class=\"kw1\">PRINT</span> <span class=\"kw4\">AT</span> <span class=\"nu0\">4</span>,<span class=\"nu0\">0</span>;<br/><span class=\"nu0\">120</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span><br/><span class=\"nu0\">130</span> <span class=\"kw1\">PRINT</span> i$<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<span class=\"st0\">\" \"</span>;<br/><span class=\"nu0\">140</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">150</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"(0 to end)\"</span><br/><span class=\"nu0\">160</span> INPUT <span class=\"st0\">\"Enter the formula\"</span>;f$<br/><span class=\"nu0\">170</span> <span class=\"kw1\">IF</span> f$=<span class=\"st0\">\"0\"</span> <span class=\"kw1\">THEN</span> STOP <br/><span class=\"nu0\">180</span> <span class=\"kw1\">PRINT</span> <span class=\"kw4\">AT</span> <span class=\"nu0\">6</span>,<span class=\"nu0\">0</span>;f$;<span class=\"st0\">\" = \"</span>;<br/><span class=\"nu0\">190</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span> f$<br/><span class=\"nu0\">200</span> <span class=\"kw1\">LET</span> c$=f$<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"nu0\">210</span> <span class=\"kw1\">IF</span> c$=<span class=\"st0\">\" \"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> f$<span class=\"br0\">(</span>i<span class=\"br0\">)</span>=<span class=\"st0\">\"\"</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">250</span><br/><span class=\"nu0\">220</span> <span class=\"kw1\">IF</span> c$=<span class=\"st0\">\"+\"</span> <span class=\"kw4\">OR</span> c$=<span class=\"st0\">\"-\"</span> <span class=\"kw4\">OR</span> c$=<span class=\"st0\">\"*\"</span> <span class=\"kw4\">OR</span> c$=<span class=\"st0\">\"/\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> p$=p$+<span class=\"st0\">\"o\"</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">250</span><br/><span class=\"nu0\">230</span> <span class=\"kw1\">IF</span> c$=<span class=\"st0\">\"(\"</span> <span class=\"kw4\">OR</span> c$=<span class=\"st0\">\")\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> p$=p$+c$: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">250</span><br/><span class=\"nu0\">240</span> <span class=\"kw1\">LET</span> p$=p$+<span class=\"st0\">\"n\"</span><br/><span class=\"nu0\">250</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">260</span> RESTORE <br/><span class=\"nu0\">270</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">11</span><br/><span class=\"nu0\">280</span> READ t$<br/><span class=\"nu0\">290</span> <span class=\"kw1\">IF</span> t$=p$ <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> i=<span class=\"nu0\">11</span><br/><span class=\"nu0\">300</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">310</span> <span class=\"kw1\">IF</span> t$&lt;&gt;p$ <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> <span class=\"kw1\">INVERSE</span> <span class=\"nu0\">1</span>;<span class=\"st0\">\"Bad construction!\"</span>: <span class=\"kw1\">BEEP</span> <span class=\"nu0\">1</span>,.1: <span class=\"kw1\">PAUSE</span> <span class=\"nu0\">0</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">60</span><br/><span class=\"nu0\">320</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span> f$<br/><span class=\"nu0\">330</span> <span class=\"kw1\">FOR</span> j=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span><br/><span class=\"nu0\">340</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>f$<span class=\"br0\">(</span>i<span class=\"br0\">)</span>=i$<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw4\">AND</span> f$<span class=\"br0\">(</span>i<span class=\"br0\">)</span>&gt;<span class=\"st0\">\"0\"</span> <span class=\"kw4\">AND</span> f$<span class=\"br0\">(</span>i<span class=\"br0\">)</span>&lt;=<span class=\"st0\">\"9\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> i$<span class=\"br0\">(</span>j<span class=\"br0\">)</span>=<span class=\"st0\">\" \"</span><br/><span class=\"nu0\">350</span> <span class=\"kw1\">NEXT</span> j<br/><span class=\"nu0\">360</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">370</span> <span class=\"kw1\">IF</span> i$<span class=\"br0\">(</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span>&lt;&gt;<span class=\"st0\">\"    \"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> <span class=\"kw1\">FLASH</span> <span class=\"nu0\">1</span>;<span class=\"st0\">\"Invalid arguments!\"</span>: <span class=\"kw1\">BEEP</span> <span class=\"nu0\">1</span>,.01: <span class=\"kw1\">PAUSE</span> <span class=\"nu0\">0</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">60</span><br/><span class=\"nu0\">380</span> <span class=\"kw1\">LET</span> r=<span class=\"kw3\">VAL</span> f$<br/><span class=\"nu0\">390</span> <span class=\"kw1\">PRINT</span> r;<span class=\"st0\">\" \"</span>;<br/><span class=\"nu0\">400</span> <span class=\"kw1\">IF</span> r&lt;&gt;<span class=\"nu0\">24</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> <span class=\"kw1\">FLASH</span> <span class=\"nu0\">1</span>;<span class=\"st0\">\"Wrong!\"</span>: <span class=\"kw1\">BEEP</span> <span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>: <span class=\"kw1\">PAUSE</span> <span class=\"nu0\">0</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">60</span><br/><span class=\"nu0\">410</span> <span class=\"kw1\">PRINT</span> <span class=\"kw1\">FLASH</span> <span class=\"nu0\">1</span>;<span class=\"st0\">\"Correct!\"</span>: <span class=\"kw1\">PAUSE</span> <span class=\"nu0\">0</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span><br/><span class=\"nu0\">420</span> DATA <span class=\"st0\">\"nononon\"</span><br/><span class=\"nu0\">430</span> DATA <span class=\"st0\">\"(non)onon\"</span><br/><span class=\"nu0\">440</span> DATA <span class=\"st0\">\"nono(non)\"</span><br/><span class=\"nu0\">450</span> DATA <span class=\"st0\">\"no(no(non))\"</span><br/><span class=\"nu0\">460</span> DATA <span class=\"st0\">\"((non)on)on\"</span><br/><span class=\"nu0\">470</span> DATA <span class=\"st0\">\"no(non)on\"</span><br/><span class=\"nu0\">480</span> DATA <span class=\"st0\">\"(non)o(non)\"</span><br/><span class=\"nu0\">485</span> DATA <span class=\"st0\">\"no((non)on)\"</span><br/><span class=\"nu0\">490</span> DATA <span class=\"st0\">\"(nonon)on\"</span><br/><span class=\"nu0\">495</span> DATA <span class=\"st0\">\"(no(non))on\"</span><br/><span class=\"nu0\">500</span> DATA <span class=\"st0\">\"no(nonon)\"</span></pre>"}]}