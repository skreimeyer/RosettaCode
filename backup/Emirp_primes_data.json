{"task": "Emirp_primes", "blocks": [{"lang": "Ada", "loc": 69, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Miller_Rabin;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Emirp_Gen <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Num <span class=\"kw1\">is</span> <span class=\"kw3\">range</span> <span class=\"nu0\">0</span> .. <span class=\"nu0\">2</span>**<span class=\"nu0\">63</span>-<span class=\"nu0\">1</span>; <span class=\"co1\">-- maximum for the gnat Ada compiler</span><br/>\u00a0<br/>   MR_Iterations: <span class=\"kw3\">constant</span> Positive\u00a0:= <span class=\"nu0\">25</span>; <br/>     <span class=\"co1\">-- the probability Pr[Is_Prime(N, MR_Iterations) = Probably_Prime] </span><br/>     <span class=\"co1\">-- is 1 for prime N and &lt; 4**(-MR_Iterations) for composed N</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> Is_Emirp<span class=\"br0\">(</span>E: Num<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">package</span> MR <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Miller_Rabin<span class=\"br0\">(</span>Num<span class=\"br0\">)</span>; <span class=\"kw3\">use</span> MR;<br/>\u00a0<br/>      <span class=\"kw3\">function</span> Rev<span class=\"br0\">(</span>E: Num<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Num <span class=\"kw1\">is</span><br/>\t N: Num\u00a0:= E;<br/>\t R: Num\u00a0:= <span class=\"nu0\">0</span>;<br/>      <span class=\"kw1\">begin</span><br/>\t <span class=\"kw1\">while</span> N &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">loop</span><br/>\t    R\u00a0:= <span class=\"nu0\">10</span>*R + N <span class=\"kw2\">mod</span> <span class=\"nu0\">10</span>; <span class=\"co1\">-- N mod 10 is least significant digit of N</span><br/>\t    N\u00a0:= N / <span class=\"nu0\">10</span>;          <span class=\"co1\">-- delete least significant digit of N</span><br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\t <span class=\"kw1\">return</span> R;<br/>      <span class=\"kw1\">end</span> Rev;<br/>\u00a0<br/>      R: Num\u00a0:= Rev<span class=\"br0\">(</span>E<span class=\"br0\">)</span>; <br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> E /= R <span class=\"kw2\">and</span> <span class=\"kw1\">then</span><br/>\t     <span class=\"br0\">(</span>Is_Prime<span class=\"br0\">(</span>E, MR_Iterations<span class=\"br0\">)</span> = Probably_Prime<span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"kw1\">then</span><br/>\t     <span class=\"br0\">(</span>Is_Prime<span class=\"br0\">(</span>R, MR_Iterations<span class=\"br0\">)</span> = Probably_Prime<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Is_Emirp;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Next<span class=\"br0\">(</span>P: Num<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Num <span class=\"kw1\">is</span><br/>      N: Num\u00a0:= P+<span class=\"nu0\">1</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">while</span> <span class=\"kw2\">not</span> <span class=\"br0\">(</span>Is_Emirp<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Loop</span><br/>\t N\u00a0:= N + <span class=\"nu0\">1</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> N;<br/>   <span class=\"kw1\">end</span> Next;<br/>\u00a0<br/>   Current: Num;<br/>   Count: Num\u00a0:= <span class=\"nu0\">0</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"co1\">-- show the first twenty emirps</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"First 20 emirps:\"</span><span class=\"br0\">)</span>;<br/>   Current\u00a0:= <span class=\"nu0\">1</span>;<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">20</span> <span class=\"kw1\">loop</span><br/>      Current\u00a0:= Next<span class=\"br0\">(</span>Current<span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Num'Image<span class=\"br0\">(</span>Current<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- show the emirps between 7700 and 8000</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"Emirps between 7700 and 8000:\"</span><span class=\"br0\">)</span>;<br/>   Current\u00a0:= <span class=\"nu0\">7699</span>;<br/>   <span class=\"kw1\">loop</span><br/>      Current\u00a0:= Next<span class=\"br0\">(</span>Current<span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> Current &gt; <span class=\"nu0\">8000</span>;<br/>       Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Num'Image<span class=\"br0\">(</span>Current<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- the 10_000th emirp</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"The 10_000'th emirp:\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">10</span>_000 <span class=\"kw1\">loop</span><br/>      Current\u00a0:= Next<span class=\"br0\">(</span>Current<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>Num'Image<span class=\"br0\">(</span>Current<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Emirp_Gen;</pre>"}, {"lang": "ALGOL 68", "loc": 92, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># sieve of Eratosthenes: sets s[i] to TRUE if i is prime, FALSE otherwise     #</span><br/><span class=\"kw4\">PROC</span> sieve <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">BOOL</span> s <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>        <span class=\"coMULTI\"># start with everything flagged as prime                              #</span> <br/>        <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> s <span class=\"kw2\">DO</span> s<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"coMULTI\"># sieve out the non-primes                                            #</span><br/>        s<span class=\"br0\">[</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> <span class=\"kw8\">ENTIER</span> <span class=\"kw24\">sqrt</span><span class=\"br0\">(</span> <span class=\"kw8\">UPB</span> s <span class=\"br0\">)</span> <span class=\"kw2\">DO</span><br/>            <span class=\"kw2\">IF</span> s<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span> <span class=\"kw2\">FOR</span> p <span class=\"kw2\">FROM</span> i <span class=\"sy1\">*</span> i <span class=\"kw2\">BY</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> s <span class=\"kw2\">DO</span> s<span class=\"br0\">[</span> p <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span> <span class=\"kw2\">OD</span> <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><br/>     <span class=\"kw2\">END</span> <span class=\"coMULTI\"># sieve #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># parse the command line - ignore errors                                      #</span><br/><span class=\"kw3\">INT</span>  emirp from  <span class=\"sy1\">:=</span>  1<span class=\"sy1\">;</span>        <span class=\"coMULTI\"># lowest emirp required                        #</span><br/><span class=\"kw3\">INT</span>  emirp to    <span class=\"sy1\">:=</span> 10<span class=\"sy1\">;</span>        <span class=\"coMULTI\"># highest emirp required                       #</span><br/><span class=\"kw3\">BOOL</span> value range <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span>     <span class=\"coMULTI\"># TRUE if the range is the value of the emirps #</span><br/>                               <span class=\"coMULTI\"># FALSE if the range is the ordinal of the     #</span><br/>                               <span class=\"coMULTI\"># emirps                                       #</span><br/><span class=\"kw3\">INT</span>  max number  <span class=\"sy1\">:=</span> 1 000 000<span class=\"sy1\">;</span> <span class=\"coMULTI\"># sieve size                                   #</span><br/><span class=\"coMULTI\"># returns s converted to an integer - does not check s is a valid integer     #</span><br/><span class=\"kw4\">PROC</span> to int <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> s <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>        <span class=\"kw3\">INT</span> result <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> ch pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> s <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> s <span class=\"kw2\">DO</span><br/>            result <span class=\"sy1\">*:=</span> 10<span class=\"sy1\">;</span><br/>            result <span class=\"sy1\">+:=</span> <span class=\"kw8\">ABS</span> s<span class=\"br0\">[</span> ch pos <span class=\"br0\">]</span> <span class=\"sy1\">-</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"0\"</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        result<br/>     <span class=\"kw2\">END</span> <span class=\"coMULTI\"># to int #</span> <span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> arg pos <span class=\"kw2\">TO</span> <span class=\"kw27\">argc</span> <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">IF</span>   <span class=\"kw27\">argv</span><span class=\"br0\">(</span> arg pos <span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"FROM\"</span>    <span class=\"kw2\">THEN</span><br/>        emirp from  <span class=\"sy1\">:=</span> to int<span class=\"br0\">(</span> <span class=\"kw27\">argv</span><span class=\"br0\">(</span> arg pos <span class=\"sy1\">+</span> 1 <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">ELIF</span> <span class=\"kw27\">argv</span><span class=\"br0\">(</span> arg pos <span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"TO\"</span>      <span class=\"kw2\">THEN</span><br/>        emirp to    <span class=\"sy1\">:=</span> to int<span class=\"br0\">(</span> <span class=\"kw27\">argv</span><span class=\"br0\">(</span> arg pos <span class=\"sy1\">+</span> 1 <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">ELIF</span> <span class=\"kw27\">argv</span><span class=\"br0\">(</span> arg pos <span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"VALUE\"</span>   <span class=\"kw2\">THEN</span><br/>        value range <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><br/>    <span class=\"kw2\">ELIF</span> <span class=\"kw27\">argv</span><span class=\"br0\">(</span> arg pos <span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"ORDINAL\"</span> <span class=\"kw2\">THEN</span><br/>        value range <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><br/>    <span class=\"kw2\">ELIF</span> <span class=\"kw27\">argv</span><span class=\"br0\">(</span> arg pos <span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"SIEVE\"</span>   <span class=\"kw2\">THEN</span><br/>        max number  <span class=\"sy1\">:=</span> to int<span class=\"br0\">(</span> <span class=\"kw27\">argv</span><span class=\"br0\">(</span> arg pos <span class=\"sy1\">+</span> 1 <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">FI</span><br/><span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># construct a sieve of primes up to the maximum number required for the task  #</span><br/><span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> max number <span class=\"br0\">]</span><span class=\"kw3\">BOOL</span> is prime<span class=\"sy1\">;</span><br/>sieve<span class=\"br0\">(</span> is prime <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># return TRUE if p is an emirp, FALSE otherwise                               #</span><br/><span class=\"kw4\">PROC</span> is emirp <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> p <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> is prime<span class=\"br0\">[</span> p <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span><br/>        <span class=\"kw7\">FALSE</span><br/>     <span class=\"kw2\">ELSE</span><br/>        <span class=\"coMULTI\"># reverse the digits of p, if this is a prime different from p,       #</span><br/>        <span class=\"coMULTI\"># p is an emirp                                                       #</span><br/>        <span class=\"kw3\">INT</span> q    <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">INT</span> rest <span class=\"sy1\">:=</span> <span class=\"kw8\">ABS</span> p<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">WHILE</span> rest <span class=\"sy1\">&gt;</span> 0 <span class=\"kw2\">DO</span><br/>            q    <span class=\"kw17\">TIMESAB</span> 10<span class=\"sy1\">;</span><br/>            q    <span class=\"kw17\">PLUSAB</span>  rest <span class=\"kw12\">MOD</span> 10<span class=\"sy1\">;</span><br/>            rest <span class=\"kw17\">OVERAB</span>  10<br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        is prime<span class=\"br0\">[</span> q <span class=\"br0\">]</span> <span class=\"kw16\">AND</span> q <span class=\"sy1\">/=</span> p<br/>     <span class=\"kw2\">FI</span> <span class=\"coMULTI\"># is emirp #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># generate the required emirp list                                            #</span><br/><span class=\"kw2\">IF</span> value range <span class=\"kw2\">THEN</span><br/>    <span class=\"coMULTI\"># find emirps with values in the specified range                          #</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"emirps between \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> emirp from<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" and \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> emirp to<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\":\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> p <span class=\"kw2\">FROM</span> emirp from <span class=\"kw2\">TO</span> emirp to <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">IF</span> is emirp<span class=\"br0\">(</span> p <span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>            <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> p<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><br/><span class=\"kw2\">ELSE</span><br/>    <span class=\"coMULTI\"># find emirps with ordinals in the specified range                        #</span><br/>    <span class=\"kw3\">INT</span> emirp count <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> emirp from <span class=\"sy1\">=</span> emirp to <span class=\"kw2\">THEN</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"emirp \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> emirp from<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\":\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">ELSE</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"emirps \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> emirp from<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" to \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> emirp to<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\":\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> p <span class=\"kw2\">TO</span> max number <span class=\"kw2\">WHILE</span> emirp count <span class=\"sy1\">&lt;</span> emirp to <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">IF</span> is emirp<span class=\"br0\">(</span> p <span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>            <span class=\"coMULTI\"># have another emirp                                              #</span><br/>            emirp count <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>            <span class=\"kw2\">IF</span> emirp count <span class=\"sy1\">&gt;=</span> emirp from <span class=\"kw2\">THEN</span><br/>                <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> p<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>            <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><br/><span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 61, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/SetBatchLines.htm\"><span class=\"kw3\">SetBatchLines</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>p <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">20</span> <span class=\"br0\">{</span><br/>\tp <span class=\"sy0\">:=</span> NextEmirp<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>\ta <span class=\"sy0\">.=</span> p <span class=\"st0\">\" \"</span><br/><span class=\"br0\">}</span><br/>p <span class=\"sy0\">:=</span> <span class=\"nu0\">7700</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"br0\">{</span><br/>\tp <span class=\"sy0\">:=</span> NextEmirp<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"sy0\">&gt;</span> <span class=\"nu0\">8000</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">break</span></a><br/>\tb <span class=\"sy0\">.=</span> p <span class=\"st0\">\" \"</span><br/><span class=\"br0\">}</span><br/>p <span class=\"sy0\">:=</span><span class=\"nu0\">1</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">10000</span><br/>\tp <span class=\"sy0\">:=</span> NextEmirp<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"First twenty emirps: \"</span> a<br/>\t<span class=\"sy0\">.</span> <span class=\"st0\">\"`nEmirps between 7,700 and 8,000: \"</span> b<br/>\t<span class=\"sy0\">.</span> <span class=\"st0\">\"`n10,000th emirp: \"</span> p<br/>\u00a0<br/>IsPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\tr <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Floor</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Sqrt</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\tf <span class=\"sy0\">:=</span> <span class=\"nu0\">5</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>f <span class=\"sy0\">&lt;=</span> r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"br0\">(</span>f <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\t\t\tf <span class=\"sy0\">+=</span> <span class=\"nu0\">6</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>NextEmirp<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>IsPrime<span class=\"br0\">(</span><span class=\"sy0\">++</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\trev <span class=\"sy0\">:=</span> Reverse<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>rev <span class=\"sy0\">=</span> n<span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">continue</span></a><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>IsPrime<span class=\"br0\">(</span>rev<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">return</span> n<br/>\t\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Reverse<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> s<br/>\t\tr <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> r<br/>\t<span class=\"kw1\">return</span> r<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 47, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"kw6\">function</span> is_prime<span class=\"br0\">(</span>n,\tp<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span><span class=\"br0\">(</span>n<span class=\"sy3\">%</span>2<span class=\"br0\">)</span> <span class=\"sy1\">||</span> <span class=\"sy1\">!</span><span class=\"br0\">(</span>n<span class=\"sy3\">%</span>3<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw6\">return</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>        p = <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span>p<span class=\"sy3\">*</span>p <span class=\"sy2\">&lt;</span> n<span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy3\">%</span><span class=\"br0\">(</span>p <span class=\"sy3\">+</span>= <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy2\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">||</span> n<span class=\"sy3\">%</span><span class=\"br0\">(</span>p <span class=\"sy3\">+</span>= <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        <span class=\"kw6\">return</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>        <span class=\"kw6\">return</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> reverse<span class=\"br0\">(</span>n,\tr<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tr = <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>r = <span class=\"nu0\">0</span>; <span class=\"kw4\">int</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span>; n <span class=\"sy3\">/</span>= <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>                r = r<span class=\"sy3\">*</span><span class=\"nu0\">10</span> <span class=\"sy3\">+</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span>n<span class=\"sy3\">%</span>10<span class=\"br0\">)</span>;<br/>        <span class=\"kw6\">return</span> r<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> is_emirp<span class=\"br0\">(</span>n,   r<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        r = reverse<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t<span class=\"kw6\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>r <span class=\"sy2\">!=</span> n<span class=\"br0\">)</span> <span class=\"sy1\">&amp;&amp;</span> is_prime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy1\">&amp;&amp;</span> is_prime<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy5\">?</span> <span class=\"nu0\">1</span> <span class=\"sy5\">:</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>\tc = <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>x = <span class=\"nu0\">11</span>; c <span class=\"sy2\">&lt;</span> <span class=\"nu0\">20</span>; x <span class=\"sy3\">+</span>= <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>is_emirp<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%i,\"</span>, x<span class=\"br0\">)</span>; <span class=\"sy3\">++</span>c <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>x = <span class=\"nu0\">7701</span>; x <span class=\"sy2\">&lt;</span> <span class=\"nu0\">8000</span>; x <span class=\"sy3\">+</span>= <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>is_emirp<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%i,\"</span>, x<span class=\"br0\">)</span>; <span class=\"sy3\">++</span>c <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\tc = <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>x = <span class=\"nu0\">11</span>;\u00a0; x <span class=\"sy3\">+</span>= <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>is_emirp<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy1\">&amp;&amp;</span> <span class=\"sy3\">++</span>c <span class=\"sy2\">==</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%i\"</span>, x<span class=\"br0\">)</span>;<br/>                                <span class=\"kw1\">break</span>;<br/>                        <span class=\"br0\">}</span><br/>\t<span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C", "loc": 52, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> uint<span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> is_prime<span class=\"br0\">(</span>uint n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>n<span class=\"sy0\">%</span><span class=\"nu19\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>n<span class=\"sy0\">%</span><span class=\"nu19\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        uint p <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span>p<span class=\"sy0\">*</span>p <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">%</span><span class=\"br0\">(</span>p <span class=\"sy0\">+=</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> n<span class=\"sy0\">%</span><span class=\"br0\">(</span>p <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>uint reverse<span class=\"br0\">(</span>uint n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        uint r<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> n<span class=\"sy0\">;</span> n <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>                r <span class=\"sy0\">=</span> r<span class=\"sy0\">*</span><span class=\"nu0\">10</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>n<span class=\"sy0\">%</span><span class=\"nu19\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> is_emirp<span class=\"br0\">(</span>uint n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        uint r <span class=\"sy0\">=</span> reverse<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> r <span class=\"sy0\">!=</span> n <span class=\"sy0\">&amp;&amp;</span> is_prime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> is_prime<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>argv<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        uint x<span class=\"sy0\">,</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">switch</span><span class=\"br0\">(</span>argc<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// advanced args parsing</span><br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">11</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span> x <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>is_emirp<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%u\"</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">++</span>c<span class=\"sy0\">;</span><br/>                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">7701</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8000</span><span class=\"sy0\">;</span> x <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>is_emirp<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%u\"</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">11</span><span class=\"sy0\">;</span> <span class=\"sy0\">;</span> x <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>is_emirp<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">++</span>c <span class=\"sy0\">==</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%u\"</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 61, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;cmath&gt;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isPrime <span class=\"br0\">(</span> <span class=\"kw4\">int</span> number <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span> number <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">false</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span> number <span class=\"sy1\">==</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">true</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> std<span class=\"sy4\">::</span><span class=\"kw3\">sqrt</span><span class=\"br0\">(</span> number <span class=\"br0\">)</span> <span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> number <span class=\"sy2\">%</span> i <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>\t <span class=\"kw1\">return</span> <span class=\"kw2\">false</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"kw2\">true</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> reverseNumber <span class=\"br0\">(</span> <span class=\"kw4\">int</span> n <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">ostringstream</span> oss <span class=\"sy4\">;</span><br/>   oss <span class=\"sy1\">&lt;&lt;</span> n <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> numberstring <span class=\"br0\">(</span> oss.<span class=\"me1\">str</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">reverse</span> <span class=\"br0\">(</span> numberstring.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , numberstring.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">stoi</span> <span class=\"br0\">(</span> numberstring <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isEmirp <span class=\"br0\">(</span> <span class=\"kw4\">int</span> n <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">return</span> isPrime <span class=\"br0\">(</span> n <span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> isPrime <span class=\"br0\">(</span> reverseNumber <span class=\"br0\">(</span> n <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>      <span class=\"sy3\">&amp;&amp;</span> n <span class=\"sy3\">!</span><span class=\"sy1\">=</span> reverseNumber <span class=\"br0\">(</span> n <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> emirps <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">while</span> <span class=\"br0\">(</span> emirps.<span class=\"me1\">size</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">20</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> isEmirp<span class=\"br0\">(</span> i <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         emirps.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> i <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>      i<span class=\"sy2\">++</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"The first 20 emirps:<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy4\">:</span> emirps <span class=\"br0\">)</span> <br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">int</span> newstart <span class=\"sy1\">=</span> <span class=\"nu0\">7700</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">while</span> <span class=\"br0\">(</span> newstart <span class=\"sy1\">&lt;</span> <span class=\"nu0\">8001</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> isEmirp <span class=\"br0\">(</span> newstart <span class=\"br0\">)</span> <span class=\"br0\">)</span> <br/>\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> newstart <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span> <span class=\"sy4\">;</span><br/>      newstart<span class=\"sy2\">++</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">while</span> <span class=\"br0\">(</span> emirps.<span class=\"me1\">size</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10000</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> isEmirp <span class=\"br0\">(</span> i <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t emirps.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> i <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>      i<span class=\"sy2\">++</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"the 10000th emirp is \"</span> <span class=\"sy1\">&lt;&lt;</span> emirps<span class=\"br0\">[</span><span class=\"nu0\">9999</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"\u00a0!<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 70, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"kw1\">static</span> <span class=\"kw5\">System</span><span class=\"sy0\">.</span><span class=\"me1\">Console</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> <span class=\"kw4\">int</span> limit <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>_000_000<span class=\"sy0\">;</span><br/>        WriteLine<span class=\"br0\">(</span><span class=\"st0\">\"First 20:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        WriteLine<span class=\"br0\">(</span>FindEmirpPrimes<span class=\"br0\">(</span>limit<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Take</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Delimit</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        WriteLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        WriteLine<span class=\"br0\">(</span><span class=\"st0\">\"Between 7700 and 8000:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        WriteLine<span class=\"br0\">(</span>FindEmirpPrimes<span class=\"br0\">(</span>limit<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">SkipWhile</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> p <span class=\"sy0\">&lt;</span> <span class=\"nu0\">7700</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">TakeWhile</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> p <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8000</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Delimit</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        WriteLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        WriteLine<span class=\"br0\">(</span><span class=\"st0\">\"10000th:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        WriteLine<span class=\"br0\">(</span>FindEmirpPrimes<span class=\"br0\">(</span>limit<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ElementAt</span><span class=\"br0\">(</span><span class=\"nu0\">9999</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> FindEmirpPrimes<span class=\"br0\">(</span><span class=\"kw4\">int</span> limit<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> primes <span class=\"sy0\">=</span> Primes<span class=\"br0\">(</span>limit<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToHashSet</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> prime <span class=\"kw1\">in</span> primes<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> reverse <span class=\"sy0\">=</span> prime<span class=\"sy0\">.</span><span class=\"me1\">Reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>reverse <span class=\"sy0\">!=</span> prime <span class=\"sy0\">&amp;&amp;</span> primes<span class=\"sy0\">.</span><span class=\"me1\">Contains</span><span class=\"br0\">(</span>reverse<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> prime<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> Primes<span class=\"br0\">(</span><span class=\"kw4\">int</span> bound<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>bound <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">yield</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        BitArray composite <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BitArray<span class=\"br0\">(</span><span class=\"br0\">(</span>bound <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> limit <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>bound<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> limit<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>composite<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw4\">int</span> prime <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> prime<span class=\"sy0\">;</span><br/>\u00a0<br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"br0\">(</span>prime <span class=\"sy0\">*</span> prime <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> composite<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"sy0\">;</span> j <span class=\"sy0\">+=</span> prime<span class=\"br0\">)</span><br/>\t        composite<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> limit<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> composite<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>composite<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Extensions<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> HashSet<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> ToHashSet<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">this</span> IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> source<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> HashSet<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>source<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">const</span> <span class=\"kw4\">string</span> defaultSeparator <span class=\"sy0\">=</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> Delimit<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">this</span> IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> source, <span class=\"kw4\">string</span> separator <span class=\"sy0\">=</span> defaultSeparator<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span>separator <span class=\"sy0\">??</span> defaultSeparator, source<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> Reverse<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">int</span> number<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>number <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"sy0\">-</span>Reverse<span class=\"br0\">(</span><span class=\"sy0\">-</span>number<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>number <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> number<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> reverse <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>number <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    reverse <span class=\"sy0\">=</span> reverse <span class=\"sy0\">*</span> <span class=\"nu0\">10</span> <span class=\"sy0\">+</span> number <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\t    number <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> reverse<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 13, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> emirp? <span class=\"br0\">[</span>v<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>a <span class=\"br0\">(</span>biginteger v<span class=\"br0\">)</span><br/>        b <span class=\"br0\">(</span>biginteger <span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span>string<span class=\"sy0\">/</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span><span class=\"kw1\">str</span> v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span><span class=\"sy0\">=</span> a b<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"sy0\">.</span>isProbablePrime a <span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"sy0\">.</span>isProbablePrime b <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Generate the output</span><br/><span class=\"br0\">(</span>println <span class=\"st0\">\"first20:    \"</span> <span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span>string<span class=\"sy0\">/</span>join <span class=\"st0\">\" \"</span> <span class=\"br0\">(</span><span class=\"kw1\">take</span> <span class=\"nu0\">20</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> emirp? <span class=\"br0\">(</span><span class=\"kw1\">iterate</span> <span class=\"kw1\">inc</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"st0\">\"7700-8000:  \"</span> <span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span>string<span class=\"sy0\">/</span>join <span class=\"st0\">\" \"</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> emirp? <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">7700</span> <span class=\"nu0\">8000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"st0\">\"10,000:     \"</span> <span class=\"br0\">(</span>nth <span class=\"br0\">(</span><span class=\"kw1\">filter</span> emirp? <span class=\"br0\">(</span><span class=\"kw1\">iterate</span> <span class=\"kw1\">inc</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">9999</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "D", "loc": 34, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">bool</span> isEmirp<span class=\"br0\">(</span><span class=\"kw4\">uint</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw4\">bool</span> isPrime<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">uint</span> div <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> inc <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> div <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span><br/>             div <span class=\"sy0\">+=</span> inc<span class=\"sy0\">,</span> inc <span class=\"sy0\">=</span> <span class=\"nu0\">6</span> <span class=\"sy0\">-</span> inc<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> div <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">uint</span> reverse<span class=\"br0\">(</span><span class=\"kw4\">uint</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw4\">uint</span> r<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> n<span class=\"sy0\">;</span> n <span class=\"sy0\">/=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>            r <span class=\"sy0\">=</span> r <span class=\"sy0\">*</span> <span class=\"nu0\">10</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> r <span class=\"sy0\">=</span> reverse<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> r <span class=\"sy0\">!=</span> n <span class=\"sy0\">&amp;&amp;</span> isPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> isPrime<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> uints <span class=\"sy0\">=</span> <span class=\"kw4\">uint</span>.<span class=\"me1\">max</span>.<span class=\"me1\">iota</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"First 20:<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> uints.<span class=\"me1\">filter</span><span class=\"sy0\">!</span>isEmirp.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Between 7700 and 8000:<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>            iota<span class=\"br0\">(</span><span class=\"nu0\">7</span>_700<span class=\"sy0\">,</span> <span class=\"nu0\">8</span>_001<span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span>isEmirp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"10000th: \"</span><span class=\"sy0\">,</span> uints.<span class=\"me1\">filter</span><span class=\"sy0\">!</span>isEmirp.<span class=\"me1\">drop</span><span class=\"br0\">(</span><span class=\"nu0\">9</span>_999<span class=\"br0\">)</span>.<span class=\"me1\">front</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 33, "block": "<pre class=\"text highlighted_source\">defmodule Emirp do<br/>  defp prime?(2), do: true<br/>  defp prime?(n) when n&lt;2 or rem(n,2)==0, do: false<br/>  defp prime?(n), do: prime?(n,3)<br/>\u00a0<br/>  defp prime?(n,k) when n&lt;k*k, do: true<br/>  defp prime?(n,k) when rem(n,k)==0, do: false<br/>  defp prime?(n,k), do: prime?(n,k+2)<br/>\u00a0<br/>  def emirp?(n) do<br/>    if prime?(n) do<br/>      reverse = to_string(n) |&gt; String.reverse |&gt; String.to_integer<br/>      n\u00a0!= reverse and prime?(reverse)<br/>    end<br/>  end<br/>\u00a0<br/>  def task do<br/>    emirps = Stream.iterate(1, &amp;(&amp;1+1)) |&gt; Stream.filter(&amp;emirp?/1)<br/>    first = Enum.take(emirps,20) |&gt; Enum.join(\" \")<br/>    IO.puts \"First 20 emirps: #{first}\"<br/>    between = Enum.reduce_while(emirps, [], fn x,acc -&gt;<br/>      cond do<br/>        x &lt; 7700        -&gt; {:cont, acc}<br/>        x in 7700..8000 -&gt; {:cont, [x | acc]}<br/>        true            -&gt; {:halt, Enum.reverse(acc)}<br/>      end<br/>    end) |&gt; Enum.join(\" \")<br/>    IO.puts \"Emirps between 7,700 and 8,000: #{between}\"<br/>    IO.puts \"10,000th emirp: #{Enum.at(emirps, 9999)}\"<br/>  end<br/>end<br/>\u00a0<br/>Emirp.task</pre>"}, {"lang": "F#", "loc": 7, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"co1\">// Generate emirps. Nigel Galloway: November 19th., 2017</span><br/><span class=\"kw1\">let</span> emirp <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> fN n g <span class=\"sy0\">=</span> <span class=\"kw1\">match</span> n <span class=\"kw1\">with</span> |<span class=\"nu0\">0</span><span class=\"sy0\">-&gt;</span>g |_<span class=\"sy0\">-&gt;</span>fN <span class=\"br0\">(</span>n<span class=\"sy0\">/</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>g<span class=\"sy0\">*</span><span class=\"nu0\">10</span><span class=\"sy0\">+</span>n<span class=\"sy0\">%</span>10<span class=\"br0\">)</span><br/>  <span class=\"kw1\">let</span>     fG n g <span class=\"sy0\">=</span> n<span class=\"sy0\">&lt;&gt;</span>g &amp;&amp; isPrime g<br/>  primes <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">filter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> n <span class=\"sy0\">-&gt;</span> fG n <span class=\"br0\">(</span>fN n <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 31, "block": "<pre class=\"text highlighted_source\">USING: io kernel lists lists.lazy math.extras math.parser<br/>    math.primes sequences\u00a0;<br/>FROM: prettyprint =&gt; . pprint\u00a0;<br/>IN: rosetta-code.emirp<br/>\u00a0<br/>: rev ( n -- n' )<br/>    number&gt;string reverse string&gt;number\u00a0;<br/>\u00a0<br/>: emirp? ( n --\u00a0? )<br/>    dup rev [ = not ] [ [ prime? ] <a class=\"__cf_email__\" data-cfemail=\"26444f66\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> ] 2bi and and\u00a0;<br/>\u00a0<br/>: nemirps ( n -- seq )<br/>    0 lfrom [ emirp? ] lfilter ltake list&gt;array\u00a0;<br/>\u00a0<br/>: print-seq ( seq -- )<br/>    [ pprint bl ] each nl\u00a0;<br/>\u00a0<br/>: part1 ( -- )<br/>    \"First 20 emirps:\" print 20 nemirps print-seq\u00a0;<br/>\u00a0<br/>: part2 ( -- )<br/>    \"Emirps between 7700 and 8000:\" print<br/>    7700 ... 8000 [ emirp? ] filter print-seq\u00a0;<br/>\u00a0<br/>: part3 ( -- )<br/>    \"10,000th emirp:\" print 10,000 nemirps last .\u00a0;<br/>\u00a0<br/>: main ( -- )<br/>    part1 nl part2 nl part3\u00a0;<br/>\u00a0<br/>MAIN: main</pre>"}, {"lang": "Fortran", "loc": 174, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">MODULE</span> BAG\t<span class=\"co1\">!A mixed assortment.</span><br/>       <span class=\"kw3\">INTEGER</span> MSG\t<span class=\"co1\">!I/O unit number to share about.</span><br/>       <span class=\"kw3\">INTEGER</span> PF16LIMIT,PF32LIMIT,NP\t\t\t<span class=\"co1\">!Know that P(3512) = 32749, the last within two's complement 16-bit integers.</span><br/>       <span class=\"kw3\">PARAMETER</span> <span class=\"br0\">(</span>PF16LIMIT <span class=\"sy0\">=</span> <span class=\"nu0\">3512</span>, PF32LIMIT <span class=\"sy0\">=</span> <span class=\"nu0\">4793</span><span class=\"br0\">)</span>\t<span class=\"co1\">!32749\u00b2 = 1,072,497,001; the integer limit is 2,147,483,647 in 32-bit integers.</span><br/>       <span class=\"kw3\">INTEGER</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span> PRIME16<span class=\"br0\">(</span>PF16LIMIT<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!P(4792) =  46337, next is 46349 and 46337\u00b2 = 2,147,117,569.</span><br/>       <span class=\"kw3\">INTEGER</span><span class=\"sy0\">*</span><span class=\"nu0\">4</span> PRIME32<span class=\"br0\">(</span>PF16LIMIT <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span>PF32LIMIT<span class=\"br0\">)</span>\t<span class=\"co1\">!Let the compiler track the offsets.</span><br/>       <span class=\"kw3\">DATA</span> NP,PRIME16<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,PRIME16<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"sy0\">/</span>\t<span class=\"co1\">!But, start off with this. Note that Prime(NP) is odd...</span><br/>       <span class=\"kw3\">INTEGER</span> NGP,NNP,NIP\t<span class=\"co1\">!Invocation counts.</span><br/>       <span class=\"kw3\">DATA</span> NGP,NNP,NIP<span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span><span class=\"nu0\">0</span><span class=\"sy0\">/</span>\t<span class=\"co1\">!Starting at zero.</span><br/>       <span class=\"kw1\">CONTAINS</span>\t\t<span class=\"co1\">!Some co-operating routines.</span><br/>        <span class=\"kw1\">RECURSIVE</span> <span class=\"kw3\">INTEGER</span> <span class=\"kw1\">FUNCTION</span> GETPRIME<span class=\"br0\">(</span>I<span class=\"br0\">)</span>\t<span class=\"co1\">!They are numbered. As if in an array Prime(i).</span><br/><span class=\"co1\">Chooses from amongst two arrays, of sizes known from previous work.</span><br/>         <span class=\"kw3\">INTEGER</span> I\t\t<span class=\"co1\">!The desired index.</span><br/>         <span class=\"kw3\">INTEGER</span> P\t\t<span class=\"co1\">!A potential prime.</span><br/>         <span class=\"kw3\">INTEGER</span> MP\t\t<span class=\"co1\">!Counts beyond NP.</span><br/>          NGP <span class=\"sy0\">=</span> NGP <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Another try.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">LE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!A silly question?</span><br/>            GETPRIME <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">666</span>\t\t<span class=\"co1\">!This should cause trouble!</span><br/>          <span class=\"kw1\">ELSE</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">LE</span>.<span class=\"me1\">NP</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!I have a little list.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">LE</span>.<span class=\"me1\">PF16LIMIT</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t\t<span class=\"co1\">!Well actually, two little lists.</span><br/>              GETPRIME <span class=\"sy0\">=</span> PRIME16<span class=\"br0\">(</span>I<span class=\"br0\">)</span>\t\t<span class=\"co1\">!So, direct access from this.</span><br/>             <span class=\"kw1\">ELSE</span>\t\t\t\t<span class=\"co1\">!Or, for the larger numbers,</span><br/>              GETPRIME <span class=\"sy0\">=</span> PRIME32<span class=\"br0\">(</span>I<span class=\"br0\">)</span>\t\t<span class=\"co1\">!This.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!So much for previous effort.</span><br/>          <span class=\"kw1\">ELSE</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>I.<span class=\"me1\">LE</span>.<span class=\"me1\">PF32LIMIT</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!My list may not yet be completely filled.</span><br/>            MP <span class=\"sy0\">=</span> NP\t\t\t<span class=\"co1\">!This is the last stashed so far.</span><br/>            P <span class=\"sy0\">=</span> GETPRIME<span class=\"br0\">(</span>NP<span class=\"br0\">)</span>\t\t<span class=\"co1\">!I'll ask me to figure out where this is stashed.</span><br/>   <span class=\"nu0\">10</span>       P <span class=\"sy0\">=</span> NEXTPRIME<span class=\"br0\">(</span>P<span class=\"br0\">)</span>\t\t<span class=\"co1\">!Go for the next one along.</span><br/>            MP <span class=\"sy0\">=</span> MP <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Advance my count.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>MP.<span class=\"me1\">LT</span>.<span class=\"me1\">I</span><span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span>\t<span class=\"co1\">!Are we there yet?</span><br/>            GETPRIME <span class=\"sy0\">=</span> P\t\t<span class=\"co1\">!Yep.</span><br/>           <span class=\"kw1\">ELSE</span>\t\t\t<span class=\"co1\">!But, my list may be too short.</span><br/>            WRITE <span class=\"br0\">(</span>MSG,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Hic!\"</span>,I\t<span class=\"co1\">!So, give an indication.</span><br/>            <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Too far...\"</span>\t\t<span class=\"co1\">!And quit.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t<span class=\"co1\">!For factoring 32-bit, need only 4792 elements.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> GETPRIME\t<span class=\"co1\">!This is probably faster than reading from a monster disc file.</span><br/>\u00a0<br/>        <span class=\"kw1\">SUBROUTINE</span> STASHPRIME<span class=\"br0\">(</span>P<span class=\"br0\">)</span>\t<span class=\"co1\">!Saves a value in the stash.</span><br/>         <span class=\"kw3\">INTEGER</span> P\t<span class=\"co1\">!The prime to be stashed.</span><br/>          NP <span class=\"sy0\">=</span> NP <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Count another in.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>NP.<span class=\"me1\">LE</span>.<span class=\"me1\">PF16LIMIT</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!But, where to?</span><br/>            PRIME16<span class=\"br0\">(</span>NP<span class=\"br0\">)</span> <span class=\"sy0\">=</span> P\t\t\t<span class=\"co1\">!The short list.</span><br/>          <span class=\"kw1\">ELSE</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>NP.<span class=\"me1\">LE</span>.<span class=\"me1\">PF32LIMIT</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><span class=\"co1\">!Or,</span><br/>            PRIME32<span class=\"br0\">(</span>NP<span class=\"br0\">)</span> <span class=\"sy0\">=</span> P\t\t\t<span class=\"co1\">!The long list (which is shorter)</span><br/>          <span class=\"kw1\">ELSE</span>\t\t\t\t<span class=\"co1\">!Or,</span><br/>            <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Stash overflow!\"</span>\t\t<span class=\"co1\">!Oh dear.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!It is stashed.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> STASHPRIME\t<span class=\"co1\">!The checking should be redundant.</span><br/>\u00a0<br/>        <span class=\"kw3\">INTEGER</span> <span class=\"kw1\">FUNCTION</span> FINDPRIME<span class=\"br0\">(</span>IT<span class=\"br0\">)</span>\t<span class=\"co1\">!Via binary search.</span><br/>         <span class=\"kw3\">INTEGER</span> IT\t<span class=\"co1\">!The value to be found.</span><br/>         <span class=\"kw3\">INTEGER</span> L,R,P\t<span class=\"co1\">!Assistants.</span><br/>          L <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!This is the *exclusive bounds* version.</span><br/>          R <span class=\"sy0\">=</span> NP <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!Thus, L = first - 1; R = Last + 1.</span><br/>    <span class=\"nu0\">1</span>     P <span class=\"sy0\">=</span> <span class=\"br0\">(</span>R <span class=\"sy0\">-</span> L<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>\t\t<span class=\"co1\">!Probe offset.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>P.<span class=\"me1\">LE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!No span?</span><br/>            FINDPRIME <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>L\t\t<span class=\"co1\">!Not found. IT follows Prime(L).</span><br/>            <span class=\"kw1\">RETURN</span>\t\t\t<span class=\"co1\">!Escape.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t<span class=\"co1\">!But otherwise,</span><br/>          P <span class=\"sy0\">=</span> P <span class=\"sy0\">+</span> L\t\t<span class=\"co1\">!Convert to an index into array PRIME, manifested via GETPRIME.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>IT <span class=\"sy0\">-</span> GETPRIME<span class=\"br0\">(</span>P<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">3</span>\t<span class=\"co1\">!Compare... Three way result.</span><br/>    <span class=\"nu0\">2</span>     R <span class=\"sy0\">=</span> P; <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!IT &lt; PRIME(P): move R back.</span><br/>    <span class=\"nu0\">3</span>     L <span class=\"sy0\">=</span> P; <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!PRIME(P) &lt; IT: move L forward.</span><br/>    <span class=\"nu0\">4</span>     FINDPRIME <span class=\"sy0\">=</span> P\t\t<span class=\"co1\">!PRIME(P) = IT: Found here!</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> FINDPRIME\t<span class=\"co1\">!Simple and fast.</span><br/>\u00a0<br/>        <span class=\"kw1\">RECURSIVE</span> <span class=\"kw3\">INTEGER</span> <span class=\"kw1\">FUNCTION</span> NEXTPRIME<span class=\"br0\">(</span>P<span class=\"br0\">)</span>\t<span class=\"co1\">!Some effort may ensue.</span><br/><span class=\"co1\">Checks the stash in PRIME in the hope of finding the next prime directly, otherwise advances from P.</span><br/><span class=\"co1\">Collates a stash of primes in PRIME16 and PRIME32, advancing NP from 2 to PF32LIMIT as it goes.</span><br/>         <span class=\"kw3\">INTEGER</span> P\t<span class=\"co1\">!Not necessarily itself a prime number.</span><br/>         <span class=\"kw3\">INTEGER</span> PI\t<span class=\"co1\">!A possibly prime increment.</span><br/>         <span class=\"kw3\">INTEGER</span> IT\t<span class=\"co1\">!A finger.</span><br/>          NNP <span class=\"sy0\">=</span> NNP <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!Another try</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>P.<span class=\"me1\">LE</span>.1<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Dodge annoying effects.\tOtherwise, FINDPRIME(P) would be zero.</span><br/>            PI <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>\t\t<span class=\"co1\">!The first prime is known.\tBecause P precedes Prime(1).</span><br/>           <span class=\"kw1\">ELSE</span>\t\t\t<span class=\"co1\">!The first stashed value is two.</span><br/>            IT <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">ABS</span><span class=\"br0\">(</span>FINDPRIME<span class=\"br0\">(</span>P<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">!The stash is ordered, and P = 2 will be found at 1.</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>IT.<span class=\"me1\">LT</span>.<span class=\"me1\">NP</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t\t<span class=\"co1\">!Before my last-known prime? FINDPRIME(4) = -2 as it follows Prime(NP=2).</span><br/>              PI <span class=\"sy0\">=</span> GETPRIME<span class=\"br0\">(</span>IT <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Yes, so I know the next along already.</span><br/>             <span class=\"kw1\">ELSE</span>\t<span class=\"co1\">!Otherwise, it is past Prime(NP). and IT = NP thanks to the ABS.</span><br/>              <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>NP.<span class=\"me1\">LT</span>.<span class=\"me1\">PF32LIMIT</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!If my stash is not yet filled,</span><br/>                PI <span class=\"sy0\">=</span> GETPRIME<span class=\"br0\">(</span>IT<span class=\"br0\">)</span>\t<span class=\"co1\">!I want to start with its last entry, known to be an odd number.</span><br/>               <span class=\"kw1\">ELSE</span>\t\t\t<span class=\"co1\">!So that I can stash each next prime along the way.</span><br/>                PI <span class=\"sy0\">=</span> P\t\t\t<span class=\"co1\">!Otherwise, start with P.</span><br/>                <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">MOD</span><span class=\"br0\">(</span>PI,<span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.0<span class=\"br0\">)</span> PI <span class=\"sy0\">=</span> PI <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!And some suspicion.</span><br/>              <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!So  much for a starting position.</span><br/>              <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>PI.<span class=\"me1\">LE</span>.<span class=\"me1\">P</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Perhaps I must go further.</span><br/>   <span class=\"nu0\">11</span>           PI <span class=\"sy0\">=</span> PI <span class=\"sy0\">+</span> <span class=\"nu0\">2</span>\t\t\t<span class=\"co1\">!Advance to a possibility.</span><br/>                <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>.<span class=\"kw4\">NOT</span>.<span class=\"me1\">ISPRIME</span><span class=\"br0\">(</span>PI<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">11</span>\t<span class=\"co1\">!Discard it?</span><br/>                <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>IT.<span class=\"me1\">EQ</span>.<span class=\"me1\">NP</span> <span class=\"kw2\">.<span class=\"me1\">AND</span>.</span> IT.<span class=\"me1\">LT</span>.<span class=\"me1\">PF32LIMIT</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Am I one further on from NP?</span><br/>                  <span class=\"kw1\">CALL</span> STASHPRIME<span class=\"br0\">(</span>PI<span class=\"br0\">)</span>\t\t<span class=\"co1\">!Yes, and there is space to stash it.</span><br/>                  IT <span class=\"sy0\">=</span> IT <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Ready for the next one along, if it comes.</span><br/>                <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!All are candidates for my stash.</span><br/>              <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t<span class=\"co1\">!Perhaps this prime will be big enough.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t<span class=\"co1\">!It may be a long way past PRIME(NP).</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t<span class=\"co1\">!And I may have filled my stash along the way.</span><br/>          NEXTPRIME <span class=\"sy0\">=</span> PI\t<span class=\"co1\">!Take that.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> NEXTPRIME\t<span class=\"co1\">!Messy.</span><br/>\u00a0<br/>        <span class=\"kw1\">RECURSIVE</span> <span class=\"kw3\">LOGICAL</span> <span class=\"kw1\">FUNCTION</span> ISPRIME<span class=\"br0\">(</span>N<span class=\"br0\">)</span>\t<span class=\"co1\">!Checks an arbitrary number, though limited by INTEGER size.</span><br/><span class=\"co1\">Crunches up to SQRT(N), and at worst needs to be able to reach Prime(4793) = 46349; greater than SQRT(2147483647) = 46340\u00b795...</span><br/>         <span class=\"kw3\">INTEGER</span> N\t<span class=\"co1\">!The number.</span><br/>         <span class=\"kw3\">INTEGER</span> I,F,Q\t<span class=\"co1\">!Assistants.</span><br/>          NIP <span class=\"sy0\">=</span> NIP <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!Another try.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>N.<span class=\"me1\">LT</span>.2<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Dodge annoyances.</span><br/>            ISPRIME <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span>\t<span class=\"co1\">!Such as N = 1, and the first F being 2.</span><br/>          <span class=\"kw1\">ELSE</span>\t\t\t<span class=\"co1\">!Otherwise, some effort.</span><br/>            ISPRIME <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span>\t<span class=\"co1\">!The usual result.</span><br/>            I <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Start at the start with PRIME(1).</span><br/>   <span class=\"nu0\">10</span>       F <span class=\"sy0\">=</span> GETPRIME<span class=\"br0\">(</span>I<span class=\"br0\">)</span>\t<span class=\"co1\">!Thus, no special case with F = 2.</span><br/>            Q <span class=\"sy0\">=</span> N<span class=\"sy0\">/</span>F\t\t<span class=\"co1\">!So, how many times? (Truncation, remember)</span><br/>            <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>Q <span class=\"kw2\">.<span class=\"me1\">GE</span>.</span> F<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!Q &lt; F means F\u00b2 &gt; N.</span><br/>              <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>Q<span class=\"sy0\">*</span>F <span class=\"kw2\">.<span class=\"me1\">EQ</span>.</span> N<span class=\"br0\">)</span> <span class=\"kw1\">RETURN</span>\t<span class=\"co1\">!A factor is found!</span><br/>              I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Very well.</span><br/>              <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span>\t\t<span class=\"co1\">!Try the next possible factor.</span><br/>            <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t<span class=\"co1\">!And if we get through all that,</span><br/>            ISPRIME <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span>\t<span class=\"co1\">!It is a prime number.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t<span class=\"co1\">!And we're done.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> ISPRIME\t<span class=\"co1\">!After a lot of divisions.</span><br/>\u00a0<br/>        <span class=\"kw3\">INTEGER</span> <span class=\"kw1\">FUNCTION</span> ESREVER<span class=\"br0\">(</span>IT,BASE<span class=\"br0\">)</span>\t<span class=\"co1\">!Reversed digits.</span><br/>         <span class=\"kw3\">INTEGER</span> IT\t<span class=\"co1\">!The number to be reversed. Presumably positive.</span><br/>         <span class=\"kw3\">INTEGER</span> BASE\t<span class=\"co1\">!For the numerology.</span><br/>         <span class=\"kw3\">INTEGER</span> N,R\t<span class=\"co1\">!Assistants.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>BASE.<span class=\"me1\">LE</span>.1<span class=\"br0\">)</span> <span class=\"kw1\">STOP</span> <span class=\"st0\">\"Base 2 at least!\"</span>\t<span class=\"co1\">!Ah, distrust.</span><br/>          N <span class=\"sy0\">=</span> IT\t<span class=\"co1\">!A copy I can damage.</span><br/>          R <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!Here we go.</span><br/>          <span class=\"kw1\">DO</span> <span class=\"kw1\">WHILE</span><span class=\"br0\">(</span>N.<span class=\"me1\">GT</span>.0<span class=\"br0\">)</span>\t<span class=\"co1\">!A digit remains?</span><br/>            R <span class=\"sy0\">=</span> R<span class=\"sy0\">*</span>BASE <span class=\"sy0\">+</span> <span class=\"kw4\">MOD</span><span class=\"br0\">(</span>N,BASE<span class=\"br0\">)</span>\t<span class=\"co1\">!Yes. Grab the low-order digit of N.</span><br/>            N <span class=\"sy0\">=</span> N<span class=\"sy0\">/</span>BASE\t\t\t<span class=\"co1\">!And reduce N by another power of BASE.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t<span class=\"co1\">!Test afresh.</span><br/>          ESREVER <span class=\"sy0\">=</span> R\t\t<span class=\"co1\">!That's it.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> ESREVER\t<span class=\"co1\">!Easy enough.</span><br/>\u00a0<br/>        <span class=\"kw1\">SUBROUTINE</span> EMIRP<span class=\"br0\">(</span>BASE,N1,N2,I1,I2<span class=\"br0\">)</span>\t<span class=\"co1\">!Two-part interface.</span><br/>         <span class=\"kw3\">INTEGER</span> BASE\t<span class=\"co1\">!Avoid decimalist chauvinism.</span><br/>         <span class=\"kw3\">INTEGER</span> N1,N2\t<span class=\"co1\">!Count span to show those found.</span><br/>         <span class=\"kw3\">INTEGER</span> I1,I2\t<span class=\"co1\">!Search span.</span><br/>         <span class=\"kw3\">INTEGER</span> N\t<span class=\"co1\">!Counter.</span><br/>         <span class=\"kw3\">INTEGER</span> P,R\t<span class=\"co1\">!Assistants.</span><br/>          WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">1</span><span class=\"br0\">)</span> N1,N2,BASE,I1,I2\t<span class=\"co1\">!Declare the purpose.</span><br/>    <span class=\"nu0\">1</span>     FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"Show the first \"</span>,I0,<span class=\"st0\">\" to \"</span>,I0,\t<span class=\"co1\">!So as to encompass</span><br/>     <span class=\"sy0\">&amp;</span>     <span class=\"st0\">\" emirP numbers (base \"</span>,I0,<span class=\"st0\">\") between \"</span>,I0,<span class=\"st0\">\" and \"</span>,I0<span class=\"br0\">)</span>\t<span class=\"co1\">!The specified options.</span><br/>          N <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!None found so far.</span><br/>          P <span class=\"sy0\">=</span> I1 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!Syncopation. The starting position might itself be a prime number.</span><br/><span class=\"co1\">Chase another emirP.</span><br/>   <span class=\"nu0\">10</span>     P <span class=\"sy0\">=</span> NEXTPRIME<span class=\"br0\">(</span>P<span class=\"br0\">)</span>\t\t<span class=\"co1\">!I want the next prime.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>P.<span class=\"me1\">LT</span>.<span class=\"me1\">I1</span><span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span>\t\t<span class=\"co1\">!Up to the starting mark yet?</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>P.<span class=\"me1\">GT</span>.<span class=\"me1\">I2</span><span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">900</span>\t<span class=\"co1\">!Past the finishing mark?</span><br/>          R <span class=\"sy0\">=</span> ESREVER<span class=\"br0\">(</span>P,BASE<span class=\"br0\">)</span>\t\t<span class=\"co1\">!Righto, a candidate.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>P <span class=\"kw2\">.<span class=\"me1\">EQ</span>.</span> R<span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span>\t<span class=\"co1\">!Palindromes are rejected.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>.<span class=\"kw4\">NOT</span>.<span class=\"me1\">ISPRIME</span><span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span>\t<span class=\"co1\">!As are non-primes.</span><br/>          N <span class=\"sy0\">=</span> N <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>\t\t\t<span class=\"co1\">!Aha, a success!</span><br/><span class=\"co1\">c          if (mod(n,100) .eq. 0) then</span><br/><span class=\"co1\">c            write (6,66) N,P,R,NP,NGP,NNP,NIP</span><br/><span class=\"co1\">c   66       format (\"N=\",I5,\",p=\",I6,\",R=\",I6,\",NP=\",I6,3I12)</span><br/><span class=\"co1\">c          end if</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>N.<span class=\"me1\">GE</span>.<span class=\"me1\">N1</span><span class=\"br0\">)</span> WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> P,R\t<span class=\"co1\">!Are we within the count span?</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>N.<span class=\"me1\">LT</span>.<span class=\"me1\">N2</span><span class=\"br0\">)</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span>\t\t<span class=\"co1\">!Past the end?</span><br/><span class=\"co1\">Closedown.</span><br/>  <span class=\"nu0\">900</span>     WRITE <span class=\"br0\">(</span>MSG,<span class=\"nu0\">901</span><span class=\"br0\">)</span> NP,GETPRIME<span class=\"br0\">(</span>NP<span class=\"br0\">)</span>\t<span class=\"co1\">!Might be of interest.</span><br/>  <span class=\"nu0\">901</span>     FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"Stashed up to Prime(\"</span>,I0,<span class=\"st0\">\") = \"</span>,I0,<span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> EMIRP\t<span class=\"co1\">!Well, that was odd.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">MODULE</span> BAG\t<span class=\"co1\">!Mixed.</span><br/>\u00a0<br/>      <span class=\"kw1\">PROGRAM</span> POKE\t<span class=\"co1\">!Now put it all to the test.</span><br/>      <span class=\"kw3\">USE</span> BAG\t\t<span class=\"co1\">!With ease.</span><br/>      MSG <span class=\"sy0\">=</span> <span class=\"nu0\">6</span>\t\t<span class=\"co1\">!Standard output.</span><br/>\u00a0<br/>      <span class=\"kw1\">CALL</span> EMIRP<span class=\"br0\">(</span><span class=\"nu0\">10</span>,    <span class=\"nu0\">1</span>,   <span class=\"nu0\">20</span>,   <span class=\"nu0\">1</span>,   <span class=\"nu0\">1000</span><span class=\"br0\">)</span>\t<span class=\"co1\">!These parameters</span><br/>      <span class=\"kw1\">CALL</span> EMIRP<span class=\"br0\">(</span><span class=\"nu0\">10</span>,    <span class=\"nu0\">1</span>,   <span class=\"nu0\">28</span>,<span class=\"nu0\">7700</span>,   <span class=\"nu0\">8000</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Meet the specifiction</span><br/>      <span class=\"kw1\">CALL</span> EMIRP<span class=\"br0\">(</span><span class=\"nu0\">10</span>,<span class=\"nu0\">10000</span>,<span class=\"nu0\">10000</span>,   <span class=\"nu0\">1</span>,<span class=\"nu0\">1000000</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Of three separate invocations.</span><br/>\u00a0<br/>      <span class=\"kw1\">END</span>\t<span class=\"co1\">!Whee!</span></pre>"}, {"lang": "FreeBASIC", "loc": 62, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> isPrime<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>  <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>  <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> <span class=\"nu0\">2</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> n = <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> <span class=\"nu0\">3</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> n = <span class=\"nu0\">3</span><br/>  <span class=\"kw1\">Dim</span> d <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">5</span><br/>  <span class=\"kw1\">While</span> d * d &lt;= n<br/>    <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> d = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>    d += <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> d = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>    d += <span class=\"nu0\">4</span><br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">True</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> reverseNumber<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>  <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">10</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> n<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> sum = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">While</span> n &gt; <span class=\"nu0\">0</span><br/>    sum = <span class=\"nu0\">10</span> * sum  + <span class=\"br0\">(</span>n <span class=\"kw1\">Mod</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    n \\= <span class=\"nu0\">10</span><br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">Return</span> sum<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> isEmirp<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Not</span> isPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> reversed = reverseNumber<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Return</span> reversed &lt;&gt; n AndAlso <span class=\"kw1\">CInt</span><span class=\"br0\">(</span>isPrime<span class=\"br0\">(</span>reversed<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' We can immediately rule out all primes from 2 to 11 as these are palindromic</span><br/><span class=\"co1\">' and not therefore Emirp primes</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The first 20 Emirp primes are\u00a0:\"</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> count = <span class=\"nu0\">0</span>, i = <span class=\"nu0\">13</span><br/><span class=\"kw1\">Do</span><br/>  <span class=\"kw1\">If</span> isEmirp<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"####\"</span>; i;<br/>    count + = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  i += <span class=\"nu0\">2</span><br/><span class=\"kw1\">Loop</span> <span class=\"kw1\">Until</span> count = <span class=\"nu0\">20</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The Emirp primes between 7700 and 8000 are:\"</span><br/>i = <span class=\"nu0\">7701</span><br/><span class=\"kw1\">Do</span><br/>  <span class=\"kw1\">If</span> isEmirp<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"#####\"</span>; i;<br/>  i += <span class=\"nu0\">2</span><br/><span class=\"kw1\">Loop</span> <span class=\"kw1\">While</span> i &lt; <span class=\"nu0\">8000</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The 10,000th Emirp prime is\u00a0: \"</span>;<br/>i = <span class=\"nu0\">13</span>\u00a0: count = <span class=\"nu0\">0</span><br/><span class=\"kw1\">Do</span><br/>  <span class=\"kw1\">If</span> isEmirp<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> count += <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">If</span> count = <span class=\"nu0\">10000</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span><br/>  i += <span class=\"nu0\">2</span><br/><span class=\"kw1\">Loop</span><br/><span class=\"kw1\">Print</span> i<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 184, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"flag\"</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"github.com/jbarham/primegen.go\"</span> <span class=\"co1\">// Sieve of Atkin implementation</span><br/>\t<span class=\"st0\">\"math\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// primeCache is a simple cache of small prime numbers, it very</span><br/><span class=\"co1\">// well might be faster to just regenerate them as needed.</span><br/><span class=\"kw1\">type</span> primeCache <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>\tgen    <span class=\"sy3\">*</span>primegen<span class=\"sy3\">.</span>Primegen<br/>\tprimes <span class=\"sy1\">[]</span><span class=\"kw4\">uint64</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> NewPrimeCache<span class=\"sy1\">()</span> primeCache <span class=\"sy1\">{</span><br/>\tg <span class=\"sy2\">:=</span> primegen<span class=\"sy3\">.</span>New<span class=\"sy1\">()</span><br/>\t<span class=\"kw1\">return</span> primeCache<span class=\"sy1\">{</span>gen<span class=\"sy1\">:</span> g<span class=\"sy1\">,</span> primes<span class=\"sy1\">:</span> <span class=\"sy1\">[]</span><span class=\"kw4\">uint64</span><span class=\"sy1\">{</span>g<span class=\"sy3\">.</span>Next<span class=\"sy1\">()}}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// upto returns a slice of primes &lt;= n.</span><br/><span class=\"co1\">// The returned slice is shared with all callers, do not modify it!</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>pc <span class=\"sy3\">*</span>primeCache<span class=\"sy1\">)</span> upto<span class=\"sy1\">(</span>n <span class=\"kw4\">uint64</span><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">uint64</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">if</span> p <span class=\"sy2\">:=</span> pc<span class=\"sy3\">.</span>primes<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>pc<span class=\"sy3\">.</span>primes<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">];</span> p &lt;<span class=\"sy2\">=</span> n <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">for</span> p &lt;<span class=\"sy2\">=</span> n <span class=\"sy1\">{</span><br/>\t\t\tp <span class=\"sy2\">=</span> pc<span class=\"sy3\">.</span>gen<span class=\"sy3\">.</span>Next<span class=\"sy1\">()</span><br/>\t\t\tpc<span class=\"sy3\">.</span>primes <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>pc<span class=\"sy3\">.</span>primes<span class=\"sy1\">,</span> p<span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"kw1\">return</span> pc<span class=\"sy3\">.</span>primes<span class=\"sy1\">[:</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>pc<span class=\"sy3\">.</span>primes<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> pc<span class=\"sy3\">.</span>primes <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> p &gt; n <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> pc<span class=\"sy3\">.</span>primes<span class=\"sy1\">[:</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw3\">panic</span><span class=\"sy1\">(</span><span class=\"st0\">\"not reached\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> cache <span class=\"sy2\">=</span> NewPrimeCache<span class=\"sy1\">()</span><br/>\u00a0<br/><span class=\"kw4\">func</span> sqrt<span class=\"sy1\">(</span>x <span class=\"kw4\">uint64</span><span class=\"sy1\">)</span> <span class=\"kw4\">uint64</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Sqrt<span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span>x<span class=\"sy1\">)))</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// isprime does a simple test if n is prime.</span><br/><span class=\"co1\">// See also math/big.ProbablyPrime().</span><br/><span class=\"kw4\">func</span> isprime<span class=\"sy1\">(</span>n <span class=\"kw4\">uint64</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> cache<span class=\"sy3\">.</span>upto<span class=\"sy1\">(</span>sqrt<span class=\"sy1\">(</span>n<span class=\"sy1\">))</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> n<span class=\"sy3\">%</span>p <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> reverse<span class=\"sy1\">(</span>n <span class=\"kw4\">uint64</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>r <span class=\"kw4\">uint64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">for</span> n &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\tr <span class=\"sy2\">=</span> <span class=\"nu0\">10</span><span class=\"sy3\">*</span>r <span class=\"sy3\">+</span> n<span class=\"sy3\">%</span><span class=\"nu0\">10</span><br/>\t\tn <span class=\"sy2\">/=</span> <span class=\"nu0\">10</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// isEmirp does a simple test if n is Emirp, n must be prime</span><br/><span class=\"kw4\">func</span> isEmirp<span class=\"sy1\">(</span>n <span class=\"kw4\">uint64</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>\tr <span class=\"sy2\">:=</span> reverse<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">return</span> r <span class=\"sy2\">!=</span> n &amp;&amp; isprime<span class=\"sy1\">(</span>r<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// EmirpGen is a sequence generator for Emirp primes</span><br/><span class=\"kw1\">type</span> EmirpGen <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>\tpgen     <span class=\"sy3\">*</span>primegen<span class=\"sy3\">.</span>Primegen<br/>\tnextn    <span class=\"kw4\">uint64</span><br/>\tr1l<span class=\"sy1\">,</span> r1h <span class=\"kw4\">uint64</span><br/>\tr2l<span class=\"sy1\">,</span> r2h <span class=\"kw4\">uint64</span><br/>\tr3l<span class=\"sy1\">,</span> r3h <span class=\"kw4\">uint64</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> NewEmirpGen<span class=\"sy1\">()</span> <span class=\"sy3\">*</span>EmirpGen <span class=\"sy1\">{</span><br/>\te <span class=\"sy2\">:=</span> &amp;EmirpGen<span class=\"sy1\">{</span>pgen<span class=\"sy1\">:</span> primegen<span class=\"sy3\">.</span>New<span class=\"sy1\">()}</span><br/>\te<span class=\"sy3\">.</span>Reset<span class=\"sy1\">()</span><br/>\t<span class=\"kw1\">return</span> e<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>e <span class=\"sy3\">*</span>EmirpGen<span class=\"sy1\">)</span> Reset<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\te<span class=\"sy3\">.</span>pgen<span class=\"sy3\">.</span>Reset<span class=\"sy1\">()</span><br/>\te<span class=\"sy3\">.</span>nextn <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"co1\">// Primes &gt;7 cannot end in 2,4,5,6,8 (leaving 1,3,7)</span><br/>\te<span class=\"sy3\">.</span>r1l<span class=\"sy1\">,</span> e<span class=\"sy3\">.</span>r1h <span class=\"sy2\">=</span> <span class=\"nu0\">20</span><span class=\"sy1\">,</span> <span class=\"nu0\">30</span><br/>\te<span class=\"sy3\">.</span>r2l<span class=\"sy1\">,</span> e<span class=\"sy3\">.</span>r2h <span class=\"sy2\">=</span> <span class=\"nu0\">40</span><span class=\"sy1\">,</span> <span class=\"nu0\">70</span><br/>\te<span class=\"sy3\">.</span>r3l<span class=\"sy1\">,</span> e<span class=\"sy3\">.</span>r3h <span class=\"sy2\">=</span> <span class=\"nu0\">80</span><span class=\"sy1\">,</span> <span class=\"nu0\">90</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>e <span class=\"sy3\">*</span>EmirpGen<span class=\"sy1\">)</span> next<span class=\"sy1\">()</span> <span class=\"sy1\">(</span>n <span class=\"kw4\">uint64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">for</span> n <span class=\"sy2\">=</span> e<span class=\"sy3\">.</span>pgen<span class=\"sy3\">.</span>Next<span class=\"sy1\">();</span> <span class=\"sy3\">!</span>isEmirp<span class=\"sy1\">(</span>n<span class=\"sy1\">);</span> n <span class=\"sy2\">=</span> e<span class=\"sy3\">.</span>pgen<span class=\"sy3\">.</span>Next<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"co1\">// Skip over inpossible ranges</span><br/>\t\t<span class=\"co1\">// Benchmarks show this saves ~20% when generating n upto 1e6</span><br/>\t\t<span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">case</span> e<span class=\"sy3\">.</span>r1l &lt;<span class=\"sy2\">=</span> n &amp;&amp; n &lt; e<span class=\"sy3\">.</span>r1h<span class=\"sy1\">:</span><br/>\t\t\te<span class=\"sy3\">.</span>pgen<span class=\"sy3\">.</span>SkipTo<span class=\"sy1\">(</span>e<span class=\"sy3\">.</span>r1h<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">case</span> e<span class=\"sy3\">.</span>r2l &lt;<span class=\"sy2\">=</span> n &amp;&amp; n &lt; e<span class=\"sy3\">.</span>r2h<span class=\"sy1\">:</span><br/>\t\t\te<span class=\"sy3\">.</span>pgen<span class=\"sy3\">.</span>SkipTo<span class=\"sy1\">(</span>e<span class=\"sy3\">.</span>r2h<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">case</span> e<span class=\"sy3\">.</span>r3l &lt;<span class=\"sy2\">=</span> n &amp;&amp; n &lt; e<span class=\"sy3\">.</span>r3h<span class=\"sy1\">:</span><br/>\t\t\te<span class=\"sy3\">.</span>pgen<span class=\"sy3\">.</span>SkipTo<span class=\"sy1\">(</span>e<span class=\"sy3\">.</span>r3h<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">case</span> n &gt; e<span class=\"sy3\">.</span>r3h<span class=\"sy1\">:</span><br/>\t\t\te<span class=\"sy3\">.</span>r1l <span class=\"sy2\">*=</span> <span class=\"nu0\">10</span><br/>\t\t\te<span class=\"sy3\">.</span>r1h <span class=\"sy2\">*=</span> <span class=\"nu0\">10</span><br/>\t\t\te<span class=\"sy3\">.</span>r2l <span class=\"sy2\">*=</span> <span class=\"nu0\">10</span><br/>\t\t\te<span class=\"sy3\">.</span>r2h <span class=\"sy2\">*=</span> <span class=\"nu0\">10</span><br/>\t\t\te<span class=\"sy3\">.</span>r3l <span class=\"sy2\">*=</span> <span class=\"nu0\">10</span><br/>\t\t\te<span class=\"sy3\">.</span>r3h <span class=\"sy2\">*=</span> <span class=\"nu0\">10</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>e <span class=\"sy3\">*</span>EmirpGen<span class=\"sy1\">)</span> Next<span class=\"sy1\">()</span> <span class=\"sy1\">(</span>n <span class=\"kw4\">uint64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">if</span> n <span class=\"sy2\">=</span> e<span class=\"sy3\">.</span>nextn<span class=\"sy1\">;</span> n <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\te<span class=\"sy3\">.</span>nextn <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw1\">return</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> e<span class=\"sy3\">.</span>next<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>e <span class=\"sy3\">*</span>EmirpGen<span class=\"sy1\">)</span> Peek<span class=\"sy1\">()</span> <span class=\"kw4\">uint64</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">if</span> e<span class=\"sy3\">.</span>nextn <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\te<span class=\"sy3\">.</span>nextn <span class=\"sy2\">=</span> e<span class=\"sy3\">.</span>next<span class=\"sy1\">()</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> e<span class=\"sy3\">.</span>nextn<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>e <span class=\"sy3\">*</span>EmirpGen<span class=\"sy1\">)</span> SkipTo<span class=\"sy1\">(</span>nn <span class=\"kw4\">uint64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\te<span class=\"sy3\">.</span>pgen<span class=\"sy3\">.</span>SkipTo<span class=\"sy1\">(</span>nn<span class=\"sy1\">)</span><br/>\te<span class=\"sy3\">.</span>nextn <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// SequenceGen defines an arbitrary sequence generator.</span><br/><span class=\"co1\">// Both *primegen.Primegen and *EmirpGen implement this.</span><br/><span class=\"kw1\">type</span> SequenceGen <span class=\"kw4\">interface</span> <span class=\"sy1\">{</span><br/>\tNext<span class=\"sy1\">()</span> <span class=\"kw4\">uint64</span><br/>\tPeek<span class=\"sy1\">()</span> <span class=\"kw4\">uint64</span><br/>\tReset<span class=\"sy1\">()</span><br/>\tSkipTo<span class=\"sy1\">(</span><span class=\"kw4\">uint64</span><span class=\"sy1\">)</span><br/>\t<span class=\"co1\">//Count(uint64) uint64 // not implemented for *EmirpGen</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">var</span> start<span class=\"sy1\">,</span> end <span class=\"kw4\">uint64</span><br/>\t<span class=\"kw1\">var</span> n<span class=\"sy1\">,</span> skip <span class=\"kw4\">uint</span><br/>\t<span class=\"kw1\">var</span> oneline<span class=\"sy1\">,</span> primes <span class=\"kw4\">bool</span><br/>\tflag<span class=\"sy3\">.</span>UintVar<span class=\"sy1\">(</span>&amp;n<span class=\"sy1\">,</span> <span class=\"st0\">\"n\"</span><span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>MaxUint64<span class=\"sy1\">,</span> <span class=\"st0\">\"number of emirps to print\"</span><span class=\"sy1\">)</span><br/>\tflag<span class=\"sy3\">.</span><span class=\"me1\">UintVar</span><span class=\"sy1\">(</span><span class=\"sy3\">&amp;</span>skip<span class=\"sy1\">,</span> <span class=\"st0\">\"skip\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"st0\">\"number of emirps to skip\"</span><span class=\"sy1\">)</span><br/>\tflag<span class=\"sy3\">.</span>Uint64Var<span class=\"sy1\">(</span>&amp;start<span class=\"sy1\">,</span> <span class=\"st0\">\"start\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"st0\">\"start at x&gt;=start\"</span><span class=\"sy1\">)</span><br/>\tflag<span class=\"sy3\">.</span>Uint64Var<span class=\"sy1\">(</span>&amp;end<span class=\"sy1\">,</span> <span class=\"st0\">\"end\"</span><span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>MaxUint64<span class=\"sy1\">,</span> <span class=\"st0\">\"stop at x&lt;=end\"</span><span class=\"sy1\">)</span><br/>\tflag<span class=\"sy3\">.</span><span class=\"me1\">BoolVar</span><span class=\"sy1\">(</span><span class=\"sy3\">&amp;</span>oneline<span class=\"sy1\">,</span> <span class=\"st0\">\"oneline\"</span><span class=\"sy1\">,</span> <span class=\"kw2\">false</span><span class=\"sy1\">,</span> <span class=\"st0\">\"output on a single line\"</span><span class=\"sy1\">)</span><br/>\tflag<span class=\"sy3\">.</span><span class=\"me1\">BoolVar</span><span class=\"sy1\">(</span><span class=\"sy3\">&amp;</span>primes<span class=\"sy1\">,</span> <span class=\"st0\">\"primes\"</span><span class=\"sy1\">,</span> <span class=\"kw2\">false</span><span class=\"sy1\">,</span> <span class=\"st0\">\"generate primes rather than emirps\"</span><span class=\"sy1\">)</span><br/>\tflag<span class=\"sy3\">.</span><span class=\"me1\">Parse</span><span class=\"sy1\">()</span><br/>\u00a0<br/>\tsep <span class=\"sy2\">:=</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><br/>\t<span class=\"kw1\">if</span> oneline <span class=\"sy1\">{</span><br/>\t\tsep <span class=\"sy2\">=</span> <span class=\"st0\">\" \"</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">// Here's where making SequenceGen an interface comes in handy:</span><br/>\t<span class=\"kw1\">var</span> seq SequenceGen<br/>\t<span class=\"kw1\">if</span> primes <span class=\"sy1\">{</span><br/>\t\tseq <span class=\"sy2\">=</span> primegen<span class=\"sy3\">.</span>New<span class=\"sy1\">()</span><br/>\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>\t\tseq <span class=\"sy2\">=</span> NewEmirpGen<span class=\"sy1\">()</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> seq<span class=\"sy3\">.</span>Peek<span class=\"sy1\">()</span> &lt; start <span class=\"sy1\">{</span><br/>\t\tseq<span class=\"sy3\">.</span>Next<span class=\"sy1\">()</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"sy1\">;</span> skip &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> skip<span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>\t\tseq<span class=\"sy3\">.</span>Next<span class=\"sy1\">()</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"sy1\">;</span> n &gt; <span class=\"nu0\">0</span> &amp;&amp; seq<span class=\"sy3\">.</span>Peek<span class=\"sy1\">()</span> &lt;<span class=\"sy2\">=</span> end<span class=\"sy1\">;</span> n<span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>seq<span class=\"sy3\">.</span>Next<span class=\"sy1\">(),</span> sep<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">if</span> oneline <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 76, "block": "<pre class=\"haskell highlighted_source\">#<span class=\"sy0\">!/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>env runghc<br/>\u00a0<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>HashSet <span class=\"br0\">(</span>HashSet<span class=\"sy0\">,</span> fromList<span class=\"sy0\">,</span> member<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Numbers<span class=\"sy0\">.</span>Primes<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Environment<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Exit<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a><br/>\u00a0<br/><span class=\"co1\">-- optimization mentioned on the talk page</span><br/>startDigOK <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>startDigOK n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> n<span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a>` <span class=\"st0\">\"1379\"</span><br/>\u00a0<br/><span class=\"co1\">-- infinite list of primes that have an acceptable first digit</span><br/>filtPrimes <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>filtPrimes <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> startDigOK primes<br/>\u00a0<br/><span class=\"co1\">-- finite list of primes that have an acceptable first digit and</span><br/><span class=\"co1\">-- are the specified number of digits in length</span><br/>nDigsFPr <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>nDigsFPr n <span class=\"sy0\">=</span><br/>  takeWhile <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> hi<span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:dropWhile\"><span class=\"kw3\">dropWhile</span></a> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> lo<span class=\"br0\">)</span> filtPrimes<br/>  <span class=\"kw1\">where</span> lo <span class=\"sy0\">=</span> <span class=\"nu0\">10</span> <span class=\"sy0\">^</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        hi <span class=\"sy0\">=</span> <span class=\"nu0\">10</span> <span class=\"sy0\">^</span> n<br/>\u00a0<br/><span class=\"co1\">-- hash set of the filtered primes of the specified number of digits</span><br/>nDigsFPrHS <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> HashSet <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><br/>nDigsFPrHS n <span class=\"sy0\">=</span> fromList <span class=\"sy0\">$</span> nDigsFPr n<br/>\u00a0<br/><span class=\"co1\">-- infinite list of hash sets, where each hash set contains primes of</span><br/><span class=\"co1\">-- a specific number of digits, i. e. index 2 contains 2 digit primes,</span><br/><span class=\"co1\">-- index 3 contains 3 digit primes, etc.</span><br/><span class=\"co1\">-- Don't access index 0, because it will return an error</span><br/>fPrByDigs <span class=\"sy0\">::</span> <span class=\"br0\">[</span>HashSet <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>fPrByDigs <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> nDigsFPrHS <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>\u00a0<br/>isEmirp <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>isEmirp n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> revStr <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> n<br/>      reversed <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> revStr<br/>      hs <span class=\"sy0\">=</span> fPrByDigs <span class=\"sy0\">!!</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> revStr<br/>  <span class=\"kw1\">in</span> <span class=\"br0\">(</span>startDigOK n<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>reversed <span class=\"sy0\">/=</span> n<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>reversed `member` hs<span class=\"br0\">)</span><br/>\u00a0<br/>emirps <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>emirps <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> isEmirp primes<br/>\u00a0<br/>emirpSlice <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>emirpSlice from to <span class=\"sy0\">=</span><br/>  genericTake numToTake <span class=\"sy0\">$</span> genericDrop numToDrop emirps<br/>  <span class=\"kw1\">where</span><br/>    numToDrop <span class=\"sy0\">=</span> from <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    numToTake <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> to <span class=\"sy0\">-</span> from<br/>\u00a0<br/>emirpValues <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span><br/>emirpValues lo hi <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:dropWhile\"><span class=\"kw3\">dropWhile</span></a> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> lo<span class=\"br0\">)</span> <span class=\"sy0\">$</span> takeWhile <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> hi<span class=\"br0\">)</span> emirps<br/>\u00a0<br/>usage <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  name <span class=\"sy0\">&lt;-</span> getProgName<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"usage: \"</span> <span class=\"sy0\">++</span> name <span class=\"sy0\">++</span> <span class=\"st0\">\" lo hi [slice | values]\"</span><br/>  exitFailure<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  hSetBuffering stdout NoBuffering<br/>  args <span class=\"sy0\">&lt;-</span> getArgs<br/>  fixedArgs <span class=\"sy0\">&lt;-</span> <span class=\"kw1\">case</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> args <span class=\"kw1\">of</span><br/>    <span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">$</span> args <span class=\"sy0\">++</span> args <span class=\"sy0\">++</span> <span class=\"br0\">[</span><span class=\"st0\">\"slice\"</span><span class=\"br0\">]</span><br/>    <span class=\"nu0\">2</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">$</span> args <span class=\"sy0\">++</span> <span class=\"br0\">[</span><span class=\"st0\">\"slice\"</span><span class=\"br0\">]</span><br/>    <span class=\"nu0\">3</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> args<br/>    <span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> usage<br/>  <span class=\"kw1\">let</span> lo <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> <span class=\"sy0\">$</span> fixedArgs <span class=\"sy0\">!!</span> <span class=\"nu0\">0</span><br/>      hi <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> <span class=\"sy0\">$</span> fixedArgs <span class=\"sy0\">!!</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">case</span> fixedArgs <span class=\"sy0\">!!</span> <span class=\"nu0\">2</span> <span class=\"kw1\">of</span><br/>   <span class=\"st0\">\"slice\"</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> emirpSlice lo hi<br/>   <span class=\"st0\">\"values\"</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> emirpValues lo hi<br/>   <span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> usage</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">   emirp =: <span class=\"sy0\">(</span>] #~ ~: *. <span class=\"nu0\">1</span> p: ]<span class=\"sy0\">)</span> |.&amp;.:\":\"<span class=\"nu0\">0</span>  <span class=\"co1\">NB. Input is array of primes</span></pre>"}, {"lang": "Java", "loc": 54, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Emirp<span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"co1\">//trivial prime algorithm, sub in whatever algorithm you want</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> isPrime<span class=\"br0\">(</span><span class=\"kw4\">long</span> x<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>x <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">long</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span>i<span class=\"sy0\">+=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>x <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> isEmirp<span class=\"br0\">(</span><span class=\"kw4\">long</span> x<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> xString <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>xString.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>xString.<span class=\"me1\">matches</span><span class=\"br0\">(</span><span class=\"st0\">\"[24568].*\"</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> xString.<span class=\"me1\">matches</span><span class=\"br0\">(</span><span class=\"st0\">\".*[24568]\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span> <span class=\"co1\">//eliminate some easy rejects</span><br/>\t\t<span class=\"kw4\">long</span> xR <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a>.<span class=\"me1\">parseLong</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span>xString<span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>xR <span class=\"sy0\">==</span> x<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> isPrime<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> isPrime<span class=\"br0\">(</span>xR<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">long</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"First 20 emirps:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>count <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>isEmirp<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\tcount<span class=\"sy0\">++;</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>x <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tx<span class=\"sy0\">++;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Emirps between 7700 and 8000:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">7700</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">8000</span><span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>isEmirp<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>x <span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>10,000th emirp:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>count <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10000</span><span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>isEmirp<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\tcount<span class=\"sy0\">++;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"co1\">//--x to fix the last increment from the loop</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"sy0\">--</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 32, "block": "<pre class=\"text highlighted_source\">def is_prime:<br/>  if  . == 2 then true<br/>  else<br/>     2 &lt; . and .\u00a0% 2 == 1 and<br/>       (. as $in<br/>       | (($in + 1) | sqrt) as $m<br/>       | [false, 3] | until( .[0] or .[1] &gt; $m; [$in\u00a0% .[1] == 0, .[1] + 2])<br/>       | .[0]<br/>       | not)<br/>  end\u00a0;<br/>\u00a0<br/>def relatively_prime:<br/>  .[0] as $n<br/>  | .[1] as $primes<br/>  | ($n | sqrt) as $s<br/>  | (.[1] | length) as $length<br/>  | [0, true]<br/>  | until( .[0] &gt; $length or ($primes[.[0]] &gt; $s) or .[1] == false;<br/>          [.[0] + 1, ($n\u00a0% $primes[.[0]]\u00a0!= 0)] )<br/>  | .[1]\u00a0;<br/>\u00a0<br/>def primes:<br/>  # The helper function, next, has arity 0 for tail recursion optimization;<br/>  # its input must be an array of primes of length at least 2, <br/>  # the last also being the greatest.<br/>  def next:<br/>     . as $previous<br/>     | .[length-1] as $last<br/>     | [(2 + $last), $previous]<br/>     | until( relatively_prime\u00a0; .[0] += 2) as $nextp<br/>     | ( $previous + [$nextp[0]] );<br/>  2, ([2,3] | recurse( next ) | .[-1])\u00a0;</pre>"}, {"lang": "Julia", "loc": 30, "block": "<pre class=\"text highlighted_source\">using Primes<br/>\u00a0<br/>function collapse(n::Array{&lt;:Integer})<br/>    sum = 0<br/>    for (p, d) in enumerate(n)<br/>        sum += d * 10 ^ (p - 1)<br/>    end<br/>    return sum<br/>end<br/>\u00a0<br/>Base.reverse(n::Integer) = collapse(reverse(digits(n)))<br/>isemirp(n::Integer) = isprime(n) &amp;&amp; isprime(reverse(n))<br/>\u00a0<br/>function firstnemirps(m::Integer)<br/>    rst = Array{typeof(m)}(m)<br/>    i, n = 1, 2<br/>    @inbounds while i \u2264 m<br/>        if isemirp(n)<br/>            rst[i] = n<br/>            i += 1<br/>        end<br/>        n += 1<br/>    end<br/>    return rst<br/>end<br/>\u00a0<br/>emirps = firstnemirps(10000)<br/>println(\"First 20:\\n\", emirps[1:20])<br/>println(\"Between 7700 and 8000:\\n\", filter(x -&gt; 7700 \u2264 x \u2264 8000, emirps))<br/>println(\"10000th:\\n\", emirps[10000])</pre>"}, {"lang": "Kotlin", "loc": 67, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">//  version 1.1.4</span><br/>\u00a0<br/>fun isPrime<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> n <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> d <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>d <span class=\"sy0\">*</span> d <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        d +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        d +<span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun reverseNumber<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nn <span class=\"sy0\">=</span> n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>nn <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sum <span class=\"sy0\">=</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span> sum + nn <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/>        nn /<span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sum<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun isEmirp<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>isPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> reversed <span class=\"sy0\">=</span> reverseNumber<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> reversed <span class=\"sy0\">!=</span> n <span class=\"sy0\">&amp;&amp;</span> isPrime<span class=\"br0\">(</span>reversed<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The first 20 Emirp primes are\u00a0:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">13</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isEmirp<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            print<span class=\"br0\">(</span>i.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> + <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>            count++<br/>        <span class=\"br0\">}</span><br/>        i +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>count <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The Emirp primes between 7700 and 8000 are\u00a0:\"</span><span class=\"br0\">)</span><br/>    i <span class=\"sy0\">=</span> <span class=\"nu0\">7701</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isEmirp<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> print<span class=\"br0\">(</span>i.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> + <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        i +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8000</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"The 10,000th Emirp prime is\u00a0: \"</span><span class=\"br0\">)</span><br/>    i <span class=\"sy0\">=</span> <span class=\"nu0\">13</span><br/>    count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isEmirp<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> count++<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span> break<br/>        i +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>    print<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 43, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> isPrime <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">true</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">for</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"kw3\">math.sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> isEmirp <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> isPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">local</span> rev <span class=\"sy0\">=</span> <span class=\"kw3\">tonumber</span><span class=\"br0\">(</span><span class=\"kw3\">string</span><span class=\"sy0\">.</span>reverse<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> rev <span class=\"sy0\">==</span> n <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> isPrime<span class=\"br0\">(</span>rev<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> emirpGen <span class=\"br0\">(</span>mode<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> count<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> eString <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">if</span> mode <span class=\"sy0\">==</span> <span class=\"st0\">\"between\"</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">for</span> n <span class=\"sy0\">=</span> a<span class=\"sy0\">,</span> b <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">if</span> isEmirp<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">then</span> eString <span class=\"sy0\">=</span> eString <span class=\"sy0\">..</span> n <span class=\"sy0\">..</span> <span class=\"st0\">\" \"</span> <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">return</span> eString<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">while</span> count <span class=\"sy0\">&lt;</span> a <span class=\"kw1\">do</span><br/>        n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> isEmirp<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            eString <span class=\"sy0\">=</span> eString <span class=\"sy0\">..</span> n <span class=\"sy0\">..</span> <span class=\"st0\">\" \"</span><br/>            count <span class=\"sy0\">=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> mode <span class=\"sy0\">==</span> <span class=\"st0\">\"first\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> eString <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> mode <span class=\"sy0\">==</span> <span class=\"st0\">\"Nth\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> n <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"sy0\">#</span>arg <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw2\">and</span> <span class=\"sy0\">#</span>arg <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span>emirpGen<span class=\"br0\">(</span>arg<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw3\">tonumber</span><span class=\"br0\">(</span>arg<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw3\">tonumber</span><span class=\"br0\">(</span>arg<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">else</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Wrong number of arguments\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 23, "block": "<pre class=\"text highlighted_source\">EmirpPrime\u00a0:= proc(n)<br/>    local eprime;<br/>    eprime\u00a0:= parse(StringTools:-Reverse(convert(n,string)));<br/>    if n &lt;&gt; eprime and isprime(n) and isprime(eprime) then<br/>        return n;<br/>    end if;<br/>end proc:<br/>EmirpsList\u00a0:= proc( n )<br/>    local i, values;<br/>    values\u00a0:= Array([]):<br/>    i\u00a0:= 0:<br/>    do<br/>        i\u00a0:= i + 1;<br/>        if EmirpPrime(i) &lt;&gt; NULL then<br/>            ArrayTools:-Append(values, i);<br/>        end if;<br/>    until numelems(values) = n;<br/>    return convert(values,list);<br/>end proc:<br/>EmirpsList(20);<br/>EmirpPrime~([seq(7700..8000)]);<br/>EmirpsList(10000)[-1];<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">reverseDigits[n_Integer]\u00a0:= <a class=\"__cf_email__\" data-cfemail=\"2462564b49604d434d50576476415241565741\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@<a class=\"__cf_email__\" data-cfemail=\"97def9e3f2f0f2e5d3fef0fee3e4d7f9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></pre>"}, {"lang": "MATLAB", "loc": 7, "block": "<pre class=\"matlab highlighted_source\">\u00a0<br/>NN=<span class=\"br0\">(</span><span class=\"nu0\">1</span>:<span class=\"nu0\">1</span>:1e6<span class=\"br0\">)</span>; <span class=\"co1\">%Natural numbers between 1 and t</span><br/>pns=NN<span class=\"br0\">(</span>isprime<span class=\"br0\">(</span>NN<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">%prime numbers</span><br/>p=<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fliplr.html\"><span class=\"kw2\">fliplr</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/str2num.html\"><span class=\"kw2\">str2num</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fliplr.html\"><span class=\"kw2\">fliplr</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/num2str.html\"><span class=\"kw2\">num2str</span></a><span class=\"br0\">(</span>pns<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <br/>a=pns<span class=\"br0\">(</span>isprime<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span>; b=p<span class=\"br0\">(</span>isprime<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span>; c=a-b;<br/>emirps=NN<span class=\"br0\">(</span>a<span class=\"br0\">(</span>c~=<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0</pre>"}, {"lang": "Modula-2", "loc": 107, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> Emirp;<br/><span class=\"kw1\">FROM</span> Conversions <span class=\"kw1\">IMPORT</span> StrToLong;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> LongMath <span class=\"kw1\">IMPORT</span> sqrt;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> IsPrime<span class=\"br0\">(</span>x <span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">VAR</span><br/>    i <span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>    u <span class=\"sy0\">:</span> <span class=\"kw4\">LONGREAL</span>;<br/>    v <span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">IF</span> x&lt;<span class=\"nu0\">2</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> <span class=\"kw2\">FALSE</span> <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">IF</span> x<span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> <span class=\"kw2\">TRUE</span> <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">IF</span> x <span class=\"kw1\">MOD</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> <span class=\"kw2\">FALSE</span> <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    u <span class=\"sy0\">:=</span> sqrt<span class=\"br0\">(</span><span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    v <span class=\"sy0\">:=</span> <span class=\"kw3\">TRUNC</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">3</span> <span class=\"kw1\">TO</span> v <span class=\"kw1\">BY</span> <span class=\"nu0\">2</span> <span class=\"kw1\">DO</span><br/>        <span class=\"kw1\">IF</span> x <span class=\"kw1\">MOD</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> <span class=\"kw2\">FALSE</span> <span class=\"kw1\">END</span><br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    <span class=\"kw1\">RETURN</span> <span class=\"kw2\">TRUE</span><br/><span class=\"kw1\">END</span> IsPrime;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> IsEmirp<span class=\"br0\">(</span>x <span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">VAR</span><br/>    buf<span class=\"sy0\">,</span>rev <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">9</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    i<span class=\"sy0\">,</span>j <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>    y <span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"coMULTI\">(* Terminate early if the number is even *)</span><br/>    <span class=\"kw1\">IF</span> x <span class=\"kw1\">MOD</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> <span class=\"kw2\">FALSE</span> <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    <span class=\"coMULTI\">(* First convert the input to a string *)</span><br/>    FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%l\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> x<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"coMULTI\">(* Create a copy of the string revered *)</span><br/>    j <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">WHILE</span> buf<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">#</span> 0C <span class=\"kw1\">DO</span> <span class=\"kw3\">INC</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>    <span class=\"kw3\">DEC</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span>;<br/>    i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">WHILE</span> buf<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">#</span> 0C <span class=\"kw1\">DO</span><br/>        rev<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> buf<span class=\"br0\">[</span>j<span class=\"br0\">]</span>;<br/>        <span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>        <span class=\"kw3\">DEC</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>    rev<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> 0C;<br/>\u00a0<br/>    <span class=\"coMULTI\">(* Convert the reversed copy to a number *)</span><br/>    StrToLong<span class=\"br0\">(</span>rev<span class=\"sy0\">,</span>y<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"coMULTI\">(* Terminate early if the number is even *)</span><br/>    <span class=\"kw1\">IF</span> y <span class=\"kw1\">MOD</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> <span class=\"kw2\">FALSE</span> <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    <span class=\"coMULTI\">(* Discard palindromes *)</span><br/>    <span class=\"kw1\">IF</span> x<span class=\"sy0\">=</span>y <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> <span class=\"kw2\">FALSE</span> <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    <span class=\"kw1\">RETURN</span> IsPrime<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">AND</span> IsPrime<span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/><span class=\"kw1\">END</span> IsEmirp;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    x<span class=\"sy0\">,</span>count <span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    count <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    x <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>\u00a0<br/>    WriteString<span class=\"br0\">(</span><span class=\"st0\">\"First 20 emirps:\"</span><span class=\"br0\">)</span>;<br/>    WriteLn;<br/>    <span class=\"kw1\">WHILE</span> count&lt;<span class=\"nu0\">20</span> <span class=\"kw1\">DO</span><br/>        <span class=\"kw1\">IF</span> IsEmirp<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>            <span class=\"kw3\">INC</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span>;<br/>            FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%l \"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> x<span class=\"br0\">)</span>;<br/>            WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span><br/>        <span class=\"kw1\">END</span>;<br/>        <span class=\"kw3\">INC</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>    WriteLn;<br/>\u00a0<br/>    WriteString<span class=\"br0\">(</span><span class=\"st0\">\"Emirps between 7700 and 8000:\"</span><span class=\"br0\">)</span>;<br/>    WriteLn;<br/>    <span class=\"kw1\">FOR</span> x<span class=\"sy0\">:=</span><span class=\"nu0\">7700</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">8000</span> <span class=\"kw1\">DO</span><br/>        <span class=\"kw1\">IF</span> IsEmirp<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>            FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%l \"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> x<span class=\"br0\">)</span>;<br/>            WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span><br/>        <span class=\"kw1\">END</span><br/>    <span class=\"kw1\">END</span>;<br/>    WriteLn;<br/>\u00a0<br/>    WriteString<span class=\"br0\">(</span><span class=\"st0\">\"10,000th emirp:\"</span><span class=\"br0\">)</span>;<br/>    WriteLn;<br/>    count <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    x <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">WHILE</span> count&lt;<span class=\"nu0\">10000</span> <span class=\"kw1\">DO</span><br/>        <span class=\"kw1\">IF</span> IsEmirp<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>            <span class=\"kw3\">INC</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">END</span>;<br/>        <span class=\"kw3\">INC</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>    FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%l \"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>    WriteLn;<br/>\u00a0<br/>    ReadChar<br/><span class=\"kw1\">END</span> Emirp.</pre>"}, {"lang": "Oforth", "loc": 12, "block": "<pre class=\"text highlighted_source\">: isEmirp(n)<br/>   n isPrime ifFalse: [ false return ]<br/>   n asString reverse asInteger dup n == ifTrue: [ drop false ] else: [ isPrime ]\u00a0;<br/>\u00a0<br/>: main(min, max, length)<br/>| l |<br/>   ListBuffer new -&gt;l<br/>   min while(l size length &lt; ) [<br/>      dup max &gt; ifTrue: [ break ] <br/>      dup isEmirp ifTrue: [ dup l add ] 1 + <br/>      ] <br/>   drop l\u00a0;</pre>"}, {"lang": "PARI/GP", "loc": 5, "block": "<pre class=\"parigp highlighted_source\">rev<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">subst</span><span class=\"br0\">(</span><span class=\"kw1\">Polrev</span><span class=\"br0\">(</span>digits<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"re1\">'x</span><span class=\"sy0\">,</span><span class=\"nu1\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>emirp<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>r<span class=\"sy0\">=</span>rev<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">isprime</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">isprime</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> n<span class=\"sy0\">!=</span>r<br/><span class=\"kw1\">select</span><span class=\"br0\">(</span>emirp<span class=\"sy0\">,</span> <span class=\"kw1\">primes</span><span class=\"br0\">(</span><span class=\"nu1\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu1\">1</span>..<span class=\"nu1\">20</span><span class=\"br0\">]</span><br/><span class=\"kw1\">select</span><span class=\"br0\">(</span>emirp<span class=\"sy0\">,</span> <span class=\"kw1\">primes</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu1\">7700</span><span class=\"sy0\">,</span><span class=\"nu1\">8000</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>s<span class=\"sy0\">=</span><span class=\"nu1\">10000</span><span class=\"sy0\">;</span> <span class=\"kw1\">forprime</span><span class=\"br0\">(</span>p<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>emirp<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> s<span class=\"sy0\">--==</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 249, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> Emirp<span class=\"sy1\">;</span><br/><span class=\"co1\">//palindrome prime 13 &lt;-&gt; 31</span><br/><span class=\"co2\">{$IFDEF FPC}</span><br/>  <span class=\"co2\">{$MODE DELPHI}</span><br/>  <span class=\"co2\">{$OPTIMIZATION ON}</span><br/>  <span class=\"co2\">{$OPTIMIZATION REGVAR}</span><br/>  <span class=\"co2\">{$OPTIMIZATION PEEPHOLE}</span><br/>  <span class=\"co2\">{$OPTIMIZATION CSE}</span><br/>  <span class=\"co2\">{$OPTIMIZATION ASMCSE}</span><br/>  <span class=\"co2\">{$Smartlink ON}</span><br/>  <span class=\"co2\">{$CODEALIGN proc=32}</span><br/><span class=\"co2\">{$ELSE}</span><br/>  <span class=\"co2\">{$APPLICATION CONSOLE}</span><br/><span class=\"co2\">{$ENDIF}</span><br/><span class=\"kw1\">uses</span><br/>  primtrial<span class=\"sy1\">,</span>sysutils<span class=\"sy1\">;</span> <span class=\"co1\">//IntToStr</span><br/><span class=\"kw1\">const</span><br/>  helptext <span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">string</span> <span class=\"sy3\">=</span><br/>     <span class=\"br0\">(</span><span class=\"st0\">'  usage '</span><span class=\"sy1\">,</span><br/>      <span class=\"st0\">'  t     -&gt; test of functions'</span><span class=\"sy1\">,</span><br/>      <span class=\"st0\">'  b l u -&gt; Emirps betwenn l,u       b 7700 8000'</span><span class=\"sy1\">,</span><br/>      <span class=\"st0\">'  c n   -&gt; count of Emirps up to n  c 99999'</span><span class=\"sy1\">,</span><br/>      <span class=\"st0\">'  f n   -&gt; output n first Emirp     f 20'</span><span class=\"sy1\">,</span><br/>      <span class=\"st0\">'  n     -&gt; output the n.th Emirps   10000'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  StepToNextPrimeEnd <span class=\"sy1\">:</span> <span class=\"kw4\">Array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">9</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">byte</span> <span class=\"sy3\">=</span><br/>              <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  base <span class=\"sy3\">=</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  s<span class=\"sy1\">:</span> <span class=\"kw4\">AnsiString</span><span class=\"sy1\">;</span><br/>  pow<span class=\"sy1\">,</span><br/>  powLen  <span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> OutputHelp<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i <span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Low<span class=\"br0\">(</span>helptext<span class=\"br0\">)</span> <span class=\"kw1\">to</span> High<span class=\"br0\">(</span>helptext<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>helptext<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> GetNumber<span class=\"br0\">(</span><span class=\"kw1\">const</span> s<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><span class=\"kw1\">var</span> n<span class=\"sy1\">:</span>NativeUint<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  ErrCode<span class=\"sy1\">:</span> <span class=\"kw4\">Word</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  val<span class=\"br0\">(</span>s<span class=\"sy1\">,</span>n<span class=\"sy1\">,</span>Errcode<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ErrCode <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> RvsStr<span class=\"br0\">(</span><span class=\"kw1\">var</span> s<span class=\"sy1\">:</span> <span class=\"kw4\">AnsiString</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span> j<span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/>  swapChar <span class=\"sy1\">:</span> Ansichar<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Length<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">While</span> j&gt;i <span class=\"kw1\">do</span> <span class=\"kw1\">Begin</span><br/>    swapChar<span class=\"sy1\">:</span><span class=\"sy3\">=</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> s<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">;</span>s<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> swapChar<span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span>dec<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> RvsNumL<span class=\"br0\">(</span><span class=\"kw1\">var</span> n<span class=\"sy1\">:</span> NativeUint<span class=\"br0\">)</span><span class=\"sy1\">:</span>NativeUint<span class=\"sy1\">;</span><br/><span class=\"co1\">//reverse and last digit</span><br/><span class=\"kw1\">var</span><br/>  q<span class=\"sy1\">,</span> c<span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy1\">;</span><br/>  q <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span><br/>    c<span class=\"sy1\">:</span><span class=\"sy3\">=</span> result <span class=\"kw1\">div</span> Base<span class=\"sy1\">;</span><br/>    q <span class=\"sy1\">:</span><span class=\"sy3\">=</span> q<span class=\"sy3\">*</span>Base<span class=\"sy3\">+</span><span class=\"br0\">(</span>result<span class=\"sy3\">-</span>c<span class=\"sy3\">*</span>Base<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> c<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> result &lt; Base<span class=\"sy1\">;</span><br/>  n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> q<span class=\"sy3\">*</span>Base<span class=\"sy3\">+</span>result<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> InitP<span class=\"br0\">(</span><span class=\"kw1\">var</span> p<span class=\"sy1\">:</span> NativeUint<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  powLen <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>  pow <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Base<span class=\"sy1\">;</span><br/>  InitPrime<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span> p <span class=\"sy1\">:</span><span class=\"sy3\">=</span>NextPrime <span class=\"kw1\">until</span> p &gt;<span class=\"sy3\">=</span> <span class=\"nu0\">11</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> isEmirp<span class=\"br0\">(</span>p<span class=\"sy1\">:</span> NativeUint<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  rvsp<span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  s <span class=\"sy1\">:</span><span class=\"sy3\">=</span> IntToStr<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> StepToNextPrimeEnd<span class=\"br0\">[</span><span class=\"kw3\">Ord</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">48</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> result <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">Begin</span><br/>    RvsStr<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    rvsp <span class=\"sy1\">:</span><span class=\"sy3\">=</span> StrToInt<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">IF</span> rvsp&lt;&gt;p <span class=\"kw1\">then</span><br/>      result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> isPrime<span class=\"br0\">(</span>rvsp<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> NextEmirp<span class=\"sy1\">:</span>NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/> r<span class=\"sy1\">,</span>Ldgt<span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  result<span class=\"sy1\">:</span><span class=\"sy3\">=</span> NextPrime<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span><br/>    r <span class=\"sy1\">:</span><span class=\"sy3\">=</span> result<span class=\"sy1\">;</span><br/>    <span class=\"co1\">//reverse</span><br/>    Ldgt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> RvsNumL<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    Ldgt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> StepToNextPrimeEnd<span class=\"br0\">[</span>Ldgt<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">IF</span> Ldgt <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">Begin</span><br/>      <span class=\"kw1\">IF</span> r&lt;&gt;result <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">IF</span> isPrime<span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          EXIT<span class=\"sy1\">;</span><br/>      result<span class=\"sy1\">:</span><span class=\"sy3\">=</span> NextPrime<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">Begin</span><br/>      <span class=\"kw1\">while</span> actPrime &gt; pow<span class=\"sy3\">*</span>Base <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">Begin</span><br/>        inc<span class=\"br0\">(</span>PowLen<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        pow <span class=\"sy1\">:</span><span class=\"sy3\">=</span> pow<span class=\"sy3\">*</span>base<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Ldgt<span class=\"sy3\">*</span>pow<span class=\"sy1\">;</span><br/>      result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> PrimeGELimit<span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> GetIthEmirp<span class=\"br0\">(</span>i<span class=\"sy1\">:</span> NativeUint<span class=\"br0\">)</span><span class=\"sy1\">:</span>NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  p <span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  InitP<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">Repeat</span><br/>    dec<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    p<span class=\"sy1\">:</span><span class=\"sy3\">=</span> NextEmirp<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> i <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> p<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> nFirstEmirp<span class=\"br0\">(</span>n<span class=\"sy1\">:</span> NativeUint<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  p <span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">Begin</span><br/>  InitP<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'the first '</span><span class=\"sy1\">,</span>n<span class=\"sy1\">,</span><span class=\"st0\">' Emirp primE: '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">Repeat</span><br/>    dec<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    p<span class=\"sy1\">:</span><span class=\"sy3\">=</span> NextEmirp<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span>p<span class=\"sy1\">,</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> n <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> CntToLimit<span class=\"br0\">(</span>n<span class=\"sy1\">:</span> NativeUint<span class=\"br0\">)</span><span class=\"sy1\">:</span>NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  p<span class=\"sy1\">,</span>cnt <span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  cnt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  InitP<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  p<span class=\"sy1\">:</span><span class=\"sy3\">=</span> NextEmirp<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">While</span> p &lt;<span class=\"sy3\">=</span> n <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    inc<span class=\"br0\">(</span>cnt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    p<span class=\"sy1\">:</span><span class=\"sy3\">=</span> NextEmirp<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> cnt<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> InRange<span class=\"br0\">(</span>l<span class=\"sy1\">,</span>u<span class=\"sy1\">:</span>NativeUint<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  p <span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/>  b <span class=\"sy1\">:</span> <span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  InitP<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> l &gt; u <span class=\"kw1\">then</span> <span class=\"kw1\">Begin</span> p<span class=\"sy1\">:</span><span class=\"sy3\">=</span>l<span class=\"sy1\">;</span>l<span class=\"sy1\">:</span><span class=\"sy3\">=</span>u<span class=\"sy1\">;</span>u<span class=\"sy1\">:</span><span class=\"sy3\">=</span>p <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Emirp primes between '</span><span class=\"sy1\">,</span>l<span class=\"sy1\">,</span><span class=\"st0\">' and '</span><span class=\"sy1\">,</span>u<span class=\"sy1\">,</span><span class=\"st0\">'\u00a0: '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  p <span class=\"sy1\">:</span><span class=\"sy3\">=</span> PrimeGELimit<span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> IsEmirp<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> b <span class=\"kw1\">then</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span>p<span class=\"sy1\">,</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  p<span class=\"sy1\">:</span><span class=\"sy3\">=</span> NextEmirp<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>p&gt; u<span class=\"br0\">)</span> <span class=\"kw3\">AND</span> <span class=\"kw1\">NOT</span> b  <span class=\"kw1\">then</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'none'</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span><br/>  <span class=\"kw1\">Begin</span><br/>    <span class=\"kw1\">while</span> p &lt; u <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">Begin</span><br/>      <span class=\"kw3\">write</span><span class=\"br0\">(</span>p<span class=\"sy1\">,</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      p<span class=\"sy1\">:</span><span class=\"sy3\">=</span> NextEmirp<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span>u<span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/>  select <span class=\"sy1\">:</span> <span class=\"kw4\">char</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  <span class=\"kw1\">IF</span> paramcount &gt;<span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>    select <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Lowercase<span class=\"br0\">(</span>paramstr<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">case</span> paramcount <span class=\"kw1\">of</span><br/>  <span class=\"nu0\">1</span><span class=\"sy1\">:</span> <span class=\"kw1\">Begin</span><br/>       <span class=\"kw1\">if</span> select<span class=\"sy3\">=</span><span class=\"st0\">'t'</span> <span class=\"kw1\">then</span><br/>       <span class=\"kw1\">Begin</span><br/>         nFirstEmirp<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>         InRange<span class=\"br0\">(</span><span class=\"nu0\">7700</span><span class=\"sy1\">,</span><span class=\"nu0\">8000</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>         <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'the '</span><span class=\"sy1\">,</span><span class=\"nu0\">10000</span><span class=\"sy1\">,</span><span class=\"st0\">'.th Emirp prime: '</span><span class=\"sy1\">,</span>GetIthEmirp<span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>         <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>CntToLimit<span class=\"br0\">(</span><span class=\"nu0\">9999</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">' Emirp primes up to '</span><span class=\"sy1\">,</span><span class=\"nu0\">9999</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>         <span class=\"co1\">// as a gag</span><br/>         InRange<span class=\"br0\">(</span><span class=\"nu0\">400000000</span><span class=\"sy1\">,</span><span class=\"nu0\">700000000</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>       <span class=\"kw1\">end</span><br/>       <span class=\"kw1\">else</span><br/>         <span class=\"kw1\">IF</span> GetNumber<span class=\"br0\">(</span>paramstr<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>i<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>           <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'the '</span><span class=\"sy1\">,</span>i<span class=\"sy1\">,</span><span class=\"st0\">'.th Emirp prime: '</span><span class=\"sy1\">,</span>GetIthEmirp<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">else</span><br/>           OutPutHelp<span class=\"sy1\">;</span><br/>     <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"nu0\">2</span><span class=\"sy1\">:</span> <span class=\"kw1\">Begin</span><br/>       <span class=\"kw1\">case</span> select <span class=\"kw1\">of</span><br/>       <span class=\"st0\">'c'</span><span class=\"sy1\">:</span> <span class=\"kw1\">If</span> GetNumber<span class=\"br0\">(</span>paramstr<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>i<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>              <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>CntToLimit<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">' Eemirp primes up to '</span><span class=\"sy1\">,</span>i<span class=\"br0\">)</span><br/>            <span class=\"kw1\">else</span><br/>              OutPutHelp<span class=\"sy1\">;</span><br/>       <span class=\"st0\">'f'</span><span class=\"sy1\">:</span> <span class=\"kw1\">If</span> GetNumber<span class=\"br0\">(</span>paramstr<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>i<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>              nFirstEmirp<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>            <span class=\"kw1\">else</span><br/>              OutPutHelp<span class=\"sy1\">;</span><br/>        <span class=\"kw1\">else</span><br/>          OutPutHelp<span class=\"sy1\">;</span><br/>        <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>     <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"nu0\">3</span><span class=\"sy1\">:</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>select <span class=\"sy3\">=</span><span class=\"st0\">'b'</span><span class=\"br0\">)</span> <span class=\"kw3\">AND</span><br/>        GetNumber<span class=\"br0\">(</span>paramstr<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>i<span class=\"br0\">)</span> <span class=\"kw3\">AND</span> GetNumber<span class=\"br0\">(</span>paramstr<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>u<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>       InRange<span class=\"br0\">(</span>i<span class=\"sy1\">,</span>u<span class=\"br0\">)</span><br/>     <span class=\"kw1\">else</span><br/>        OutPutHelp<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">else</span><br/>    OutPutHelp<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">End</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 23, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">Prime</span><span class=\"sy0\">::</span><span class=\"me2\">Util</span> <span class=\"co2\">qw/:all/</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> v5<span class=\"sy0\">.</span>16<span class=\"sy0\">;</span>  <span class=\"co1\"># To get say</span><br/>\u00a0<br/><span class=\"co1\"># Return the first $count emirps using expanding segments.</span><br/><span class=\"co1\"># Can efficiently generate millions of emirps.</span><br/><span class=\"kw2\">sub</span> emirp_list <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$count</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$inc</span><span class=\"sy0\">,</span> <span class=\"re0\">@n</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">+</span><span class=\"nu0\">10</span><span class=\"re0\">*$count</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">@n</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$count</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    forprimes <span class=\"br0\">{</span><br/>      <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@n</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span> <span class=\"kw1\">if</span> is_prime<span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"co5\">$_</span> <span class=\"kw1\">ne</span> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">+</span><span class=\"re0\">$inc</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$inc</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">+</span><span class=\"re0\">$inc</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><span class=\"re0\">$inc</span> <span class=\"sy0\">*</span> <span class=\"nu0\">1.03</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://perldoc.perl.org/functions/splice.html\"><span class=\"kw3\">splice</span></a> <span class=\"re0\">@n</span><span class=\"sy0\">,</span> <span class=\"re0\">$count</span><span class=\"sy0\">;</span>  <span class=\"co1\"># Trim off excess emirps</span><br/>  <span class=\"re0\">@n</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"st0\">\"First 20: \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> emirp_list<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Between 7700 and 8000:\"</span><span class=\"sy0\">;</span><br/>forprimes <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\" $_\"</span> <span class=\"kw1\">if</span> is_prime<span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"co5\">$_</span> <span class=\"kw1\">ne</span> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"nu0\">7700</span><span class=\"sy0\">,</span><span class=\"nu0\">8000</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>say <span class=\"st0\">\"The 10_000'th emirp: \"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>emirp_list<span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 19, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> MAIN <span class=\"br0\">(</span><span class=\"re0\">$start</span><span class=\"sy0\">,</span> <span class=\"re0\">$stop</span> <span class=\"sy0\">=</span> Nil<span class=\"sy0\">,</span> <span class=\"re0\">$display</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>slice<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$end</span> <span class=\"sy0\">=</span> <span class=\"re0\">$stop</span> <span class=\"sy0\">//</span> <span class=\"re0\">$start</span><span class=\"sy0\">;</span> <br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@emirps</span> <span class=\"sy0\">=</span> lazy gather <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"sy0\">*</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$n</span> <span class=\"br0\">{</span><br/>        take <span class=\"re0\">$n</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"me1\">is</span><span class=\"sy0\">-</span>prime <br/>          <span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"kw3\">flip</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">is</span><span class=\"sy0\">-</span>prime<br/>          <span class=\"kw1\">and</span> <span class=\"re0\">$n</span> <span class=\"sy0\">!=</span> <span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"kw3\">flip</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">given</span> <span class=\"re0\">$display</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">when</span> <span class=\"st_h\">'slice'</span>  <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"re0\">@emirps</span><span class=\"br0\">[</span><span class=\"re0\">$start</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$end</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span> <br/>        <span class=\"kw1\">when</span> <span class=\"st_h\">'values'</span> <span class=\"br0\">{</span> <br/>            <span class=\"kw1\">my</span> <span class=\"sy0\">@</span><span class=\"kw3\">values</span> <span class=\"sy0\">=</span> gather <span class=\"kw1\">for</span> <span class=\"re0\">@emirps</span> <span class=\"br0\">{</span><br/>                <span class=\"sy0\">.</span><span class=\"me1\">take</span> <span class=\"kw1\">if</span> <span class=\"re0\">$start</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$_</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$end</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"re0\">$_</span><span class=\"sy0\">&gt;</span> <span class=\"re0\">$end</span> <br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw3\">say</span> <span class=\"sy0\">@</span><span class=\"kw3\">values</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 122, "block": "<pre class=\"text highlighted_source\">sequence primes = {2,3,5,7}<br/>atom sieved = 10<br/>\u00a0<br/>procedure add_block()<br/>integer N = min((sieved-1)*sieved,400000)<br/>sequence sieve = repeat(1,N)    -- sieve[i] is really i+sieved<br/>    for i=2 to length(primes) do -- (evens filtered on output)<br/>        atom p = primes[i], p2 = p*p<br/>        if p2&gt;sieved+N then exit end if<br/>        if p2&lt;sieved+1 then<br/>            p2 += ceil((sieved+1-p2)/p)*p<br/>        end if<br/>        p2 -= sieved<br/>        if and_bits(p2,1)=0 then p2 += p end if<br/>        for k=p2 to N by p*2 do<br/>            sieve[k] = 0<br/>        end for<br/>    end for<br/>    for i=1 to N by 2 do<br/>        if sieve[i] then<br/>            primes &amp;= i+sieved<br/>        end if<br/>    end for<br/>    sieved += N<br/>end procedure<br/>\u00a0<br/>function is_prime(integer n)<br/>    while sieved&lt;n do<br/>        add_block()<br/>    end while<br/>    return binary_search(n,primes)&gt;0<br/>end function<br/>\u00a0<br/>sequence emirps = {}<br/>\u00a0<br/>function rev(integer n)<br/>integer res = 0<br/>    while n do<br/>        res = res*10+remainder(n,10)<br/>        n = floor(n/10)<br/>    end while<br/>    return res<br/>end function<br/>\u00a0<br/>function emirp(integer n)<br/>    if is_prime(n) then<br/>        integer r = rev(n)<br/>        if r!=n and is_prime(r) then<br/>            return 1<br/>        end if<br/>    end if<br/>    return 0<br/>end function<br/>\u00a0<br/>procedure usage()<br/>    printf(1,\"use a single command line argument, with no spaces, eg \\\"1-20\\\" (first 20), \\n\")<br/>    printf(1,\"\\\"7700..8000\\\" (between 7700 and 8000), or \\\"10000\\\" (the 10,000th).\\n\")<br/>    {} = wait_key()<br/>    abort(0)<br/>end procedure<br/>\u00a0<br/>procedure main(string arg3)<br/>sequence args<br/>integer n,m<br/>    if find('-',arg3) then      -- nth to mth emirp range<br/>        args = scanf(arg3,\"%d-%d\")<br/>        if length(args)!=1 then usage() end if<br/>        {{n,m}} = args<br/>        integer k = 1<br/>        while length(emirps)&lt;m do<br/>            if emirp(k) then emirps &amp;= k end if<br/>            k += 1<br/>        end while<br/>        printf(1,\"emirps\u00a0%d to\u00a0%d: \",{n,m})<br/>       \u00a0?emirps[n..m]<br/>    elsif match(\"..\",arg3) then -- emirps between n amd m<br/>        args = scanf(arg3,\"%d..%d\")<br/>        if length(args)!=1 then usage() end if<br/>        {{n,m}} = args<br/>        integer k = 1<br/>        while length(emirps)=0 or emirps[$]&lt;m do<br/>            if emirp(k) then emirps &amp;= k end if<br/>            k += 1<br/>        end while<br/>        sequence s = {}<br/>        for i=1 to length(emirps) do<br/>            if emirps[i]&gt;n then<br/>                for j=i to length(emirps) do<br/>                    if emirps[j]&gt;m then<br/>                        printf(1,\"emirps between\u00a0%d and\u00a0%d: \",{n,m})<br/>                       \u00a0?emirps[i..j-1]<br/>                        exit<br/>                    end if<br/>                end for<br/>                exit<br/>            end if<br/>        end for<br/>    else                        -- nth emirp<br/>        args = scanf(arg3,\"%d\")<br/>        if length(args)!=1 then usage() end if<br/>        {{n}} = args<br/>        integer k = 1<br/>        while length(emirps)&lt;n do<br/>            if emirp(k) then emirps &amp;= k end if<br/>            k += 1<br/>        end while<br/>        printf(1,\"emirp\u00a0%d: \",{n})<br/>       \u00a0?emirps[n]<br/>    end if<br/>end procedure<br/>\u00a0<br/>sequence cl = command_line()<br/>    if length(cl)=2 then<br/>        main(\"1-20\")<br/>        main(\"7700..8000\")<br/>        main(\"10000\")<br/>    elsif length(cl)!=3 then<br/>        usage()<br/>    else<br/>        main(cl[3]) <br/>    end if<br/>    {} = wait_key()</pre>"}, {"lang": "PicoLisp", "loc": 36, "block": "<pre class=\"text highlighted_source\">(de prime? (N)<br/>   (and<br/>      (bit? 1 N)<br/>      (let S (sqrt N)<br/>         (for (D 3  T  (+ D 2))<br/>            (T (&gt; D S) N)<br/>            (T (=0 (% N D)) NIL) ) ) ) )<br/>(de palindr? (A)<br/>   (and<br/>      (&lt;&gt;<br/>         (setq A (chop A))<br/>         (setq @@ (reverse A)) )<br/>      (format @@) ) )<br/>(de emirp? (N)<br/>   (and (palindr? N) (prime? @) (prime? N)) )<br/>(de take1 (N)<br/>   (let I 11<br/>      (make<br/>         (for (X 1 (&gt;= 20 X))<br/>            (and<br/>               (emirp? (inc 'I 2))<br/>               (link @)<br/>               (inc 'X) ) ) ) ) )<br/>(de take2 (NIL)<br/>   (make<br/>      (for (I 7701 (&gt; 8000 I) (+ I 2))<br/>         (and (emirp? I) (link @)) ) ) )<br/>(de take3 (NIL)<br/>   (let I 11<br/>      (for (X 1 (&gt;= 10000 X))<br/>         (and (emirp? (inc 'I 2)) (inc 'X)) )<br/>      I ) )<br/>\u00a0<br/>(println (take1 20))<br/>(println (take2))<br/>(println (take3))</pre>"}, {"lang": "PL/I", "loc": 164, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process or<span class=\"br0\">(</span>!<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> pt1<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>run<span class=\"br0\">)</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * 25.03.2014 Walter Pachl<br/> * Note: Prime number computations are extended as needed<br/> *********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> debug <span class=\"kw1\">Bit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> run <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> primes<span class=\"br0\">(</span><span class=\"nu0\">200000</span><span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span><span class=\"nu0\">13</span><span class=\"sy0\">,</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">200000</span><span class=\"sy0\">-</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> nn <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> np <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> hp <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> ip <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>p<span class=\"sy0\">,</span>r<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'run='</span><span class=\"sy0\">,</span>run<span class=\"sy0\">,</span><span class=\"st0\">'&lt;'</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> np<span class=\"sy0\">=</span><span class=\"nu0\">7</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">call</span> cprimes<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/> main_loop<span class=\"sy0\">:</span><br/> <span class=\"kw1\">Do</span> ip<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">100000</span><span class=\"sy0\">;</span>                    <span class=\"coMULTI\">/* loop over all primes       */</span><br/>   p<span class=\"sy0\">=</span>primes<span class=\"br0\">(</span>ip<span class=\"br0\">)</span><span class=\"sy0\">;</span>                       <span class=\"coMULTI\">/* candidate                  */</span><br/>   <span class=\"kw1\">If</span> p<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>     <span class=\"kw1\">call</span> cprimes<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span>hp<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   p<span class=\"sy0\">=</span>primes<span class=\"br0\">(</span>ip<span class=\"br0\">)</span><span class=\"sy0\">;</span>                       <span class=\"coMULTI\">/* candidate                  */</span><br/>   r<span class=\"sy0\">=</span>rev<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span>                           <span class=\"coMULTI\">/* reversed candidate         */</span><br/>   <span class=\"kw1\">If</span> p<span class=\"sy0\">=</span>r <span class=\"kw1\">Then</span><span class=\"sy0\">;</span>                        <span class=\"coMULTI\">/* skip palindromic prime     */</span><br/>   <span class=\"kw1\">Else</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span>                            <span class=\"coMULTI\">/* p is eligible              */</span><br/>     <span class=\"kw1\">If</span> is_prime<span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span>           <span class=\"coMULTI\">/* reversed p is a prime      */</span><br/>       nn<span class=\"sy0\">=</span>nn<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>                        <span class=\"coMULTI\">/* increment number of hits   */</span><br/>       <span class=\"kw1\">Select</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">When</span><span class=\"br0\">(</span>run<span class=\"sy0\">&lt;=</span><span class=\"st0\">'1'</span><span class=\"br0\">)</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>           <span class=\"kw1\">If</span> nn<span class=\"sy0\">&lt;</span><span class=\"nu0\">21</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Call</span> show_1<span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* call appropriate output    */</span><br/>           <span class=\"kw1\">If</span> nn<span class=\"sy0\">=</span><span class=\"nu0\">20</span> <span class=\"kw1\">Then</span><br/>             <span class=\"kw1\">Leave</span> main_loop<span class=\"sy0\">;</span><br/>           <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">When</span><span class=\"br0\">(</span>run<span class=\"sy0\">=</span><span class=\"st0\">'2'</span><span class=\"br0\">)</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>           <span class=\"kw1\">If</span> hp<span class=\"sy0\">&lt;</span><span class=\"nu0\">8000</span> <span class=\"kw1\">Then</span><br/>             <span class=\"kw1\">Call</span> cprimes<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">8000</span><span class=\"sy0\">,</span><span class=\"st0\">'B'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>           <span class=\"kw1\">If</span> <span class=\"nu0\">7700</span><span class=\"sy0\">&lt;</span>p <span class=\"sy0\">&amp;</span> p<span class=\"sy0\">&lt;</span><span class=\"nu0\">8000</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Call</span> show_2<span class=\"sy0\">;</span><br/>           <span class=\"kw1\">If</span> p<span class=\"sy0\">&gt;</span><span class=\"nu0\">8000</span> <span class=\"kw1\">Then</span><br/>             <span class=\"kw1\">Leave</span> main_loop<span class=\"sy0\">;</span><br/>           <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">When</span><span class=\"br0\">(</span>run<span class=\"sy0\">=</span><span class=\"st0\">'3'</span><span class=\"br0\">)</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>           <span class=\"kw1\">If</span> np<span class=\"sy0\">&lt;</span><span class=\"nu0\">10000</span> <span class=\"kw1\">Then</span><br/>             <span class=\"kw1\">Call</span> cprimes<span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"st0\">'C'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>           <span class=\"kw1\">If</span> nn<span class=\"sy0\">=</span><span class=\"nu0\">10000</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>             <span class=\"kw1\">Call</span> show_3<span class=\"sy0\">;</span><br/>             <span class=\"kw1\">Leave</span> main_loop<span class=\"sy0\">;</span><br/>             <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>           <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">Otherwise</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>           <span class=\"kw1\">Put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span><span class=\"br0\">(</span><span class=\"st0\">'Invoke as pt1 1/2/3'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>           <span class=\"kw1\">Return</span><span class=\"sy0\">;</span><br/>           <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> show_1<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"kw1\">first</span> <span class=\"kw1\">Bit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Static</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">'1'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">If</span> <span class=\"kw1\">first</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'the first 20 emirps:'</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">first</span><span class=\"sy0\">=</span><span class=\"st0\">'0'</span>b<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Put</span> <span class=\"kw1\">Skip</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">If</span> nn<span class=\"sy0\">=</span><span class=\"nu0\">11</span> <span class=\"kw1\">Then</span><br/>   <span class=\"kw1\">Put</span> <span class=\"kw1\">Skip</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">(</span>F<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> show_2<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"kw1\">first</span> <span class=\"kw1\">Bit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Static</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">'1'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">If</span> <span class=\"kw1\">first</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'emirps between 7700 and 8000:'</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">first</span><span class=\"sy0\">=</span><span class=\"st0\">'0'</span>b<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Put</span> <span class=\"kw1\">Skip</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">(</span>F<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> show_3<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"kw1\">first</span> <span class=\"kw1\">Bit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Static</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">'1'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">If</span> <span class=\"kw1\">first</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'the 10000th emirp:'</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">first</span><span class=\"sy0\">=</span><span class=\"st0\">'0'</span>b<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Put</span> <span class=\"kw1\">Skip</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">(</span>F<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> cprimes<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>num<span class=\"sy0\">,</span>mp<span class=\"sy0\">,</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * Fill the array primes with prime numbers<br/> * so that it contains at least num primes and all primes&lt;=mp<br/> *********************************************************************/</span><br/> <span class=\"kw1\">dcl</span> o <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">60</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">If</span> debug <span class=\"kw1\">Then</span><br/>   <span class=\"kw1\">Put</span> <span class=\"kw1\">String</span><span class=\"br0\">(</span>o<span class=\"br0\">)</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'cprimes: '</span><span class=\"sy0\">,</span>s<span class=\"sy0\">,</span>np<span class=\"sy0\">,</span>hp<span class=\"br0\">)</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>a<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> num <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>                <span class=\"coMULTI\">/* number of primes needed    */</span><br/> <span class=\"kw1\">Dcl</span> mp  <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>                <span class=\"coMULTI\">/* max prime must be &gt; mp     */</span><br/> <span class=\"kw1\">Dcl</span> p   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>                <span class=\"coMULTI\">/* candidate for next prime   */</span><br/> <span class=\"kw1\">Dcl</span> s   <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>                      <span class=\"coMULTI\">/* place of invocation        */</span><br/> loop<span class=\"sy0\">:</span><br/> <span class=\"kw1\">Do</span> p<span class=\"sy0\">=</span>hp<span class=\"sy0\">+</span><span class=\"nu0\">2</span> <span class=\"kw1\">By</span> <span class=\"nu0\">2</span> <span class=\"kw1\">Until</span><span class=\"br0\">(</span>np<span class=\"sy0\">&gt;=</span>num <span class=\"sy0\">&amp;</span> hp<span class=\"sy0\">&gt;</span>mp<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* only odd numbers are elig.*/</span><br/>   <span class=\"kw1\">If</span> <span class=\"kw1\">mod</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> Iterate<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> <span class=\"kw1\">mod</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> Iterate<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> <span class=\"kw1\">mod</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> Iterate<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> <span class=\"kw1\">mod</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> Iterate<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> <span class=\"kw1\">mod</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> Iterate<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> k<span class=\"sy0\">=</span><span class=\"nu0\">7</span> <span class=\"kw1\">By</span> <span class=\"nu0\">1</span> <span class=\"kw1\">While</span><span class=\"br0\">(</span>primes<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">&lt;=</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">If</span> <span class=\"kw1\">mod</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span>primes<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>       Iterate loop<span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   np<span class=\"sy0\">=</span>np<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   primes<span class=\"br0\">(</span>np<span class=\"br0\">)</span><span class=\"sy0\">=</span>p<span class=\"sy0\">;</span><br/>   hp<span class=\"sy0\">=</span>p<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">If</span> debug <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>o<span class=\"sy0\">,</span><span class=\"st0\">' -&gt; '</span><span class=\"sy0\">,</span>np<span class=\"sy0\">,</span>hp<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>a<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> rev<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * reverse the given number<br/> *********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> x <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> p <span class=\"kw1\">Pic</span><span class=\"st0\">'ZZZZZZ9'</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> qq <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> q <span class=\"kw1\">Pic</span><span class=\"st0\">'ZZZZZZ9'</span> <span class=\"kw1\">based</span><span class=\"br0\">(</span><span class=\"kw1\">addr</span><span class=\"br0\">(</span>qq<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> v <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> p<span class=\"sy0\">=</span>x<span class=\"sy0\">;</span><br/> v<span class=\"sy0\">=</span><span class=\"kw1\">trim</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> v<span class=\"sy0\">=</span><span class=\"kw1\">reverse</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">substr</span><span class=\"br0\">(</span>qq<span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">-</span><span class=\"kw1\">length</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>v<span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"br0\">(</span>q<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> is_prime<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Bit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * check if x is a prime number (binary search in primes)<br/> *********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> x  <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> lo <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> hi <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> m  <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">If</span> x<span class=\"sy0\">&gt;</span>hp <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span>                 <span class=\"coMULTI\">/* x is outside of range in primes */</span><br/>   <span class=\"kw1\">If</span> debug <span class=\"kw1\">Then</span><br/>     <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'is_prime x='</span><span class=\"sy0\">,</span>x<span class=\"sy0\">,</span><span class=\"st0\">'hp='</span><span class=\"sy0\">,</span>hp<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Call</span> cprimes<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>x<span class=\"sy0\">,</span><span class=\"st0\">'D'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>         <span class=\"coMULTI\">/* extend range of primes          */</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> hi<span class=\"sy0\">=</span>np<span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> <span class=\"kw1\">While</span><span class=\"br0\">(</span>lo<span class=\"sy0\">&lt;=</span>hi<span class=\"br0\">)</span><span class=\"sy0\">;</span>                <span class=\"coMULTI\">/* lookup                          */</span><br/>   m<span class=\"sy0\">=</span><span class=\"br0\">(</span>lo<span class=\"sy0\">+</span>hi<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Select</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span>        <span class=\"br0\">(</span>x<span class=\"sy0\">=</span>primes<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"kw1\">Return</span><span class=\"br0\">(</span><span class=\"st0\">'1'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* x is a prime number*/</span><br/>     <span class=\"kw1\">When</span>        <span class=\"br0\">(</span>x<span class=\"sy0\">&lt;</span>primes<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"br0\">)</span>   hi<span class=\"sy0\">=</span>m<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">Otherwise</span> <span class=\"coMULTI\">/* x&gt;primes(m) */</span> lo<span class=\"sy0\">=</span>m<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span>                    <span class=\"coMULTI\">/* x is not a prime number         */</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Python", "loc": 27, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">__future__</span> <span class=\"kw1\">import</span> print_function<br/><span class=\"kw1\">from</span> prime_decomposition <span class=\"kw1\">import</span> primes<span class=\"sy0\">,</span> is_prime<br/><span class=\"kw1\">from</span> <span class=\"kw3\">heapq</span> <span class=\"kw1\">import</span> *<br/><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> islice<br/>\u00a0<br/><span class=\"kw1\">def</span> emirp<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    largest <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    emirps <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    heapify<span class=\"br0\">(</span>emirps<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> pr <span class=\"kw1\">in</span> primes<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">while</span> emirps <span class=\"kw1\">and</span> pr <span class=\"sy0\">&gt;</span> emirps<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>:<br/>            <span class=\"kw1\">yield</span> heappop<span class=\"br0\">(</span>emirps<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> pr <span class=\"kw1\">in</span> largest:<br/>            <span class=\"kw1\">yield</span> pr<br/>        <span class=\"kw1\">else</span>:<br/>            rp <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>pr<span class=\"br0\">)</span><span class=\"br0\">[</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> rp <span class=\"sy0\">&gt;</span> pr <span class=\"kw1\">and</span> is_prime<span class=\"br0\">(</span>rp<span class=\"br0\">)</span>:<br/>                heappush<span class=\"br0\">(</span>emirps<span class=\"sy0\">,</span> pr<span class=\"br0\">)</span><br/>                largest.<span class=\"me1\">add</span><span class=\"br0\">(</span>rp<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'First 20:<span class=\"es0\">\\n</span>  '</span><span class=\"sy0\">,</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span>islice<span class=\"br0\">(</span>emirp<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Between 7700 and 8000:<span class=\"es0\">\\n</span>  ['</span><span class=\"sy0\">,</span> end<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> pr <span class=\"kw1\">in</span> emirp<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> pr <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">8000</span>: <span class=\"kw1\">break</span><br/>    <span class=\"kw1\">if</span> pr <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">7700</span>: <span class=\"kw1\">print</span><span class=\"br0\">(</span>pr<span class=\"sy0\">,</span> end<span class=\"sy0\">=</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">']'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'10000th:<span class=\"es0\">\\n</span>  '</span><span class=\"sy0\">,</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span>islice<span class=\"br0\">(</span>emirp<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">10000</span>-<span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 1, "block": "<pre> (my naive version finds the 10,0000th in ... ms)\n</pre>"}, {"lang": "REXX", "loc": 36, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program finds  emirp  primes (base 10):  when a prime reversed, is another prime.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x y <span class=\"sy0\">.</span>                                  <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> x==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> x==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  x=<span class=\"nu0\">1</span>;  y=<span class=\"nu0\">20</span>;  <span class=\"kw3\">end</span>    <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> y==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> y=x                               <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/>r=y<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>;    y=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span>                               <span class=\"coMULTI\">/*display a  range  of  emirp primes\u00a0? */</span><br/>rly=<span class=\"kw6\">length</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span> + <span class=\"sy0\">\\</span>r                               <span class=\"coMULTI\">/*adjusted length of the  Y  value.    */</span><br/>!<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>;  c=<span class=\"nu0\">0</span>;   _=<span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">11</span> <span class=\"nu0\">13</span> <span class=\"nu0\">17</span>;   $=           <span class=\"coMULTI\">/*isP; emirp count; low primes; emirps.*/</span><br/>    <span class=\"kw1\">do</span> #=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span>;   p=<span class=\"kw6\">word</span><span class=\"br0\">(</span>_,#<span class=\"br0\">)</span>;   @<span class=\"sy0\">.</span>#=p;   \u00a0!<span class=\"sy0\">.</span>p=<span class=\"nu0\">1</span>;    <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*#*/</span><br/>#=#-<span class=\"nu0\">1</span>;   ip=#;  s<span class=\"sy0\">.</span>#<a class=\"__cf_email__\" data-cfemail=\"605d20\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>#<span class=\"sy0\">**</span><span class=\"nu0\">2</span>                       <span class=\"coMULTI\">/*adjust # (for the DO loop);  last P\u00b2.*/</span><br/>                            <span class=\"coMULTI\">/*\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 [\u2193]   generate more primes within range.   */</span><br/>    <span class=\"kw1\">do</span> <a class=\"__cf_email__\" data-cfemail=\"a5cf98e5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>#+<span class=\"nu0\">2</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>                             <span class=\"coMULTI\">/*only find  odd  primes from here on. */</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>#<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span>rly  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>                 <span class=\"coMULTI\">/*have we enough primes for emirps?    */</span><br/>    <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span><span class=\"nu0\">3</span>      ==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>               <span class=\"coMULTI\">/*is  J  divisible by three?           */</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>j,<span class=\"nu0\">1</span><span class=\"br0\">)</span>==<span class=\"nu0\">5</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>               <span class=\"coMULTI\">/*is the right-most digit a \"5\"\u00a0?      */</span><br/>    <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span><span class=\"nu0\">7</span>      ==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>               <span class=\"coMULTI\">/*is  J  divisible by seven?           */</span><br/>    <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span><span class=\"nu0\">11</span>     ==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>               <span class=\"coMULTI\">/*is  J  divisible by eleven?          */</span><br/>    <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span><span class=\"nu0\">13</span>     ==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>               <span class=\"coMULTI\">/*is  J  divisible by thirteen?        */</span><br/>                                                 <span class=\"coMULTI\">/*[\u2191]  the above five lines saves time.*/</span><br/>          <span class=\"kw1\">do</span> k=ip  <span class=\"kw2\">while</span>  s<span class=\"sy0\">.</span>k<span class=\"sy0\">&lt;</span>=j                 <span class=\"coMULTI\">/*divide by the known  odd  primes.    */</span><br/>          <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span>@<span class=\"sy0\">.</span>k==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> j           <span class=\"coMULTI\">/*J divisible by X?  Then \u00acprime.   ___*/</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                            <span class=\"coMULTI\">/* [\u2191]  divide by odd primes up to \u221a j */</span><br/>    #=#+<span class=\"nu0\">1</span>                                        <span class=\"coMULTI\">/*bump the number of primes found.     */</span><br/>    @<span class=\"sy0\">.</span>#=j;      s<span class=\"sy0\">.</span>#=j<span class=\"sy0\">*</span>j;    \u00a0!<span class=\"sy0\">.</span>j=<span class=\"nu0\">1</span>               <span class=\"coMULTI\">/*assign to sparse array; prime\u00b2; prime*/</span><br/>    <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*j*/</span>                            <span class=\"coMULTI\">/* [\u2191]  keep generating until enough.  */</span><br/>                            <span class=\"coMULTI\">/*\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 [\u2193]    filter  emirps  for the display.    */</span><br/>    <span class=\"kw1\">do</span> j=<span class=\"nu0\">6</span>  <span class=\"kw2\">to</span> @<span class=\"sy0\">.</span>#;   <a class=\"__cf_email__\" data-cfemail=\"f7a8cab7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>j                      <span class=\"coMULTI\">/*traipse through the regular primes.  */</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r<span class=\"sy0\">&amp;</span>_<span class=\"sy0\">&gt;</span>y<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"sy0\">\\</span>r<span class=\"sy0\">&amp;</span>c==y<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>           <span class=\"coMULTI\">/*is the prime not within the range?   */</span><br/>    __=<span class=\"kw6\">reverse</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span>                                <span class=\"coMULTI\">/*reverse (digits) of the regular prime*/</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>!<span class=\"sy0\">.</span>__   <span class=\"sy0\">|</span> _==__    <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>           <span class=\"coMULTI\">/*is the  reverse  a different prime\u00a0? */</span><br/>    c=c+<span class=\"nu0\">1</span>                                        <span class=\"coMULTI\">/*bump the emirp prime counter.        */</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r<span class=\"sy0\">&amp;</span>_<span class=\"sy0\">&lt;</span>x<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"sy0\">\\</span>r<span class=\"sy0\">&amp;</span>c<span class=\"sy0\">&lt;</span>x<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>           <span class=\"coMULTI\">/*is  emirp  not within allowed range? */</span><br/>    $=$ _                                        <span class=\"coMULTI\">/*append prime to the emirpPrime list. */</span><br/>    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                                  <span class=\"coMULTI\">/* [\u2191]  list:  by value  or  by range. */</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  display the emirp list.        */</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>;   <span class=\"kw1\">say</span>;   n=<span class=\"kw6\">words</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>;  \u00a0?=<span class=\"br0\">(</span>n<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span><span class=\"br0\">)</span>   <span class=\"coMULTI\">/*display the  emirp primes  wanted.   */</span><br/><span class=\"kw1\">if</span>\u00a0?  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>  n   <span class=\"st0\">'emirp primes shown.'</span>        <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 50, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>nr = 1<br/>m = 2<br/>see \"first 20\u00a0:\" + nl<br/>while nr &lt; 21<br/>      emirp = isEmirp(m)<br/>      if emirp = 1 see m see \" \"<br/>         nr++ ok<br/>      m++<br/>end  <br/>see nl + nl<br/>\u00a0<br/>nr = 1<br/>m = 7701<br/>see \"between 7700 8000\u00a0:\" + nl<br/>while m &gt; 7700 and m &lt; 8000<br/>      emirp = isEmirp(m)<br/>      if emirp = 1 see m see \" \" nr++ ok<br/>      m++<br/>end<br/>see nl + nl<br/>\u00a0<br/>nr = 1<br/>m = 2<br/>see \"Nth 10000\u00a0:\" + nl<br/>while nr &gt; 0 and nr &lt; 101<br/>      emirp = isEmirp(m)<br/>      if emirp = 1 nr++ ok<br/>      m++<br/>end<br/>see m + nl<br/>\u00a0<br/>func isEmirp n<br/>     if not isPrime(n) return false ok<br/>     cStr = string(n)  <br/>     cstr2 = \"\"<br/>     for x = len(cStr) to 1 step -1 cStr2 += cStr[x] next<br/>     rev = number(cstr2)<br/>     if rev = n return false ok<br/>     return isPrime(rev)<br/>\u00a0<br/>func isPrime n<br/>     if n &lt; 2 return false ok<br/>     if n &lt; 4 return true ok<br/>     if n\u00a0% 2 = 0 return false ok<br/>     for d = 3 to sqrt(n) step 2 <br/>         if n\u00a0% d = 0 return false ok<br/>     next<br/>     return true<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 18, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'prime'</span><br/>\u00a0<br/>emirp = Enumerator.<span class=\"me1\">new</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>y<span class=\"sy0\">|</span><br/>  Prime.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>prime<span class=\"sy0\">|</span><br/>    rev = prime.<span class=\"me1\">to_s</span>.<span class=\"me1\">reverse</span>.<span class=\"me1\">to_i</span><br/>    y <span class=\"sy0\">&lt;&lt;</span> prime  <span class=\"kw1\">if</span> rev.<span class=\"me1\">prime</span>? <span class=\"kw1\">and</span> rev\u00a0!= prime<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"First 20 emirps:\"</span>, emirp.<span class=\"me1\">first</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"Emirps between 7,700 and 8,000:\"</span><br/>emirp.<span class=\"me1\">each</span>.<span class=\"me1\">with_index</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>prime,i<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">print</span> <span class=\"st0\">\"#{prime} \"</span>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">7700</span>..<span class=\"nu0\">8000</span><span class=\"br0\">)</span>.<span class=\"me1\">cover</span>?<span class=\"br0\">(</span>prime<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> i==<span class=\"nu0\">10000</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"\"</span>, <span class=\"st0\">\"10,000th emirp:\"</span>, prime<br/>    <span class=\"kw1\">break</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 50, "block": "<pre class=\"text highlighted_source\">#![feature(iterator_step_by)]<br/>\u00a0<br/>extern crate primal;<br/>\u00a0<br/>fn is_prime(n: u64) -&gt; bool {<br/>    if n == 2 || n == 3 || n == 5 || n == 7 || n == 11 || n == 13 { return true; }<br/>    if n\u00a0% 2 == 0 || n\u00a0% 3 == 0 || n\u00a0% 5 == 0 || n\u00a0% 7 == 0 || n\u00a0% 11 == 0 || n\u00a0% 13 == 0 { return false; }<br/>    let root = (n as f64).sqrt() as u64 + 1;<br/>    (17..root).step_by(2).all(|i| n\u00a0% i\u00a0!= 0)<br/>}<br/>\u00a0<br/>fn is_emirp(n: u64) -&gt; bool {<br/>    let mut aux = n;<br/>    let mut rev_prime = 0;<br/>    while aux &gt; 0 {<br/>        rev_prime = rev_prime * 10 + aux \u00a0% 10;<br/>        aux /= 10;<br/>    }<br/>    if n == rev_prime { return false; }<br/>    is_prime(rev_prime)<br/>}<br/>\u00a0<br/>fn calculate() -&gt; (Vec&lt;usize&gt;, Vec&lt;usize&gt;, usize) {<br/>    let mut count = 1;<br/>    let mut vec1 = Vec::new();<br/>    let mut vec2 = Vec::new();<br/>    let mut emirp_10_000 = 0;<br/>\u00a0<br/>    for i in primal::Primes::all() {<br/>        if is_emirp(i as u64) {<br/>            if count &lt; 21 { vec1.push(i) }<br/>            if i &gt; 7_700 &amp;&amp; i &lt; 8_000 { vec2.push(i) }<br/>            if count == 10_000 {<br/>                emirp_10_000 = i;<br/>                break;<br/>            }<br/>            count += 1;<br/>        }<br/>    }<br/>\u00a0<br/>    (vec1, vec2, emirp_10_000)<br/>}<br/>\u00a0<br/>fn main() {<br/>    let (vec1, vec2, emirp_10_000) = calculate();<br/>\u00a0<br/>    println!(\"First 20 emirp-s\u00a0: {:?}\", vec1);<br/>    println!(\"Emirps-s between 7700 and 8000\u00a0: {:?}\", vec2);<br/>    println!(\"10.000-th emirp\u00a0: {}\", emirp_10_000);<br/>}</pre>"}, {"lang": "Scala", "loc": 13, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isEmirp<span class=\"br0\">(</span> v<span class=\"sy0\">:</span>Long <span class=\"br0\">)</span> <span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> BigInt<span class=\"br0\">(</span>v.<span class=\"me1\">toLong</span><span class=\"br0\">)</span><br/> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> BigInt<span class=\"br0\">(</span>v.<span class=\"me1\">toString</span>.<span class=\"me1\">reverse</span>.<span class=\"me1\">toLong</span><span class=\"br0\">)</span><br/> b <span class=\"sy0\">!=</span> r <span class=\"sy0\">&amp;&amp;</span> b.<span class=\"me1\">isProbablePrime</span><span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> r.<span class=\"me1\">isProbablePrime</span><span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Generate the output</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>a,b1,b2,c<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">20</span>,<span class=\"nu0\">7700</span>,<span class=\"nu0\">8000</span>,<span class=\"nu0\">10000</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span> <span class=\"st0\">\"%32s\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>          <span class=\"st0\">\"First\u00a0%d emirps: \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span> a <span class=\"br0\">)</span><span class=\"br0\">)</span> + Stream.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span> isEmirp<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>.<span class=\"me1\">take</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>.<span class=\"me1\">toList</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span> <span class=\"st0\">\"%32s\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span> <span class=\"st0\">\"Emirps between\u00a0%d and\u00a0%d: \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span> b1, b2 <span class=\"br0\">)</span><span class=\"br0\">)</span> + <span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span> i <span class=\"sy0\">&lt;</span>- b1 to b2 <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span> isEmirp<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> i<span class=\"br0\">}</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span> <span class=\"st0\">\"%32s\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>                <span class=\"st0\">\"%,d emirp: \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span> c <span class=\"br0\">)</span><span class=\"br0\">)</span> + Iterator.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span> isEmirp<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>.<span class=\"me1\">drop</span><span class=\"br0\">(</span>c-<span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">next</span> <span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 31, "block": "<pre class=\"ruby highlighted_source\">func forprimes<span class=\"br0\">(</span>a, b, callback<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>var <span class=\"kw3\">p</span> = a.<span class=\"me1\">dec</span>.<span class=\"me1\">next_prime</span>; <span class=\"kw3\">p</span> <span class=\"sy0\">&lt;</span>= b; <span class=\"kw3\">p</span>.<span class=\"me1\">next_prime</span>!<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        callback<span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func is_emirp<span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var str = Str<span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"br0\">)</span><br/>    var rev = str.<span class=\"me1\">reverse</span><br/>    <span class=\"br0\">(</span>str\u00a0!= rev<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> is_prime<span class=\"br0\">(</span>Num<span class=\"br0\">(</span>rev<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func emirp_list<span class=\"br0\">(</span>count<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var i = <span class=\"nu0\">13</span><br/>    var inc = <span class=\"br0\">(</span><span class=\"nu0\">100</span> <span class=\"sy0\">+</span> <span class=\"nu0\">10</span><span class=\"sy0\">*</span>count<span class=\"br0\">)</span><br/>    var n = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n.<span class=\"me1\">len</span> <span class=\"sy0\">&lt;</span> count<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        forprimes<span class=\"br0\">(</span>i, i<span class=\"sy0\">+</span>inc <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, <span class=\"br0\">{</span><span class=\"sy0\">|</span><span class=\"kw3\">p</span><span class=\"sy0\">|</span><br/>            is_emirp<span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;&lt;</span> <span class=\"kw3\">p</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>i, inc<span class=\"br0\">)</span> = <span class=\"br0\">(</span>i<span class=\"sy0\">+</span>inc, int<span class=\"br0\">(</span>inc <span class=\"sy0\">*</span> <span class=\"nu0\">1.03</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    n.<span class=\"me1\">splice</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span><br/>    <span class=\"kw2\">return</span> n<br/><span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"br0\">(</span><span class=\"st0\">\"First 20: \"</span>, emirp_list<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>say <span class=\"br0\">(</span><span class=\"st0\">\"Between 7700 and 8000: \"</span>, gather <span class=\"br0\">{</span><br/>        forprimes<span class=\"br0\">(</span><span class=\"nu0\">7700</span>, <span class=\"nu0\">8000</span>, <span class=\"br0\">{</span><span class=\"sy0\">|</span><span class=\"kw3\">p</span><span class=\"sy0\">|</span> is_emirp<span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> take<span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>say <span class=\"br0\">(</span><span class=\"st0\">\"The 10,000'th emirp: \"</span>, emirp_list<span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Stata", "loc": 54, "block": "<pre class=\"text highlighted_source\">emirp 1000<br/>list in 1/20, noobs noh<br/>\u00a0<br/>  +-----+<br/>  |  13 |<br/>  |  17 |<br/>  |  31 |<br/>  |  37 |<br/>  |  71 |<br/>  |-----|<br/>  |  73 |<br/>  |  79 |<br/>  |  97 |<br/>  | 107 |<br/>  | 113 |<br/>  |-----|<br/>  | 149 |<br/>  | 157 |<br/>  | 167 |<br/>  | 179 |<br/>  | 199 |<br/>  |-----|<br/>  | 311 |<br/>  | 337 |<br/>  | 347 |<br/>  | 359 |<br/>  | 389 |<br/>  +-----+<br/>\u00a0<br/>emirp 10000<br/>list if 7700&lt;p &amp; p&lt;8000, noobs noh<br/>\u00a0<br/>  +------+<br/>  | 7717 |<br/>  | 7757 |<br/>  | 7817 |<br/>  | 7841 |<br/>  | 7867 |<br/>  |------|<br/>  | 7879 |<br/>  | 7901 |<br/>  | 7927 |<br/>  | 7949 |<br/>  | 7951 |<br/>  |------|<br/>  | 7963 |<br/>  +------+<br/>\u00a0<br/>emirp 1000000<br/>list if _n==10000, noobs noh<br/>\u00a0<br/>  +--------+<br/>  | 948349 |<br/>  +--------+</pre>"}, {"lang": "Tcl", "loc": 24, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require math::<span class=\"me1\">numtheory</span><br/>\u00a0<br/><span class=\"co1\"># Import only to keep line lengths down</span><br/><span class=\"kw1\">namespace</span> import math::<span class=\"me1\">numtheory</span>::<span class=\"me1\">isprime</span><br/><span class=\"kw1\">proc</span> emirp<span class=\"sy0\">?</span> <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> r <span class=\"br0\">[</span><span class=\"kw2\">string</span> reverse <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$r</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span>isprime <span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span>isprime <span class=\"re0\">$r</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Generate the various emirps</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> n <span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"kw1\">set</span> emirps <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$emirps</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>emirp<span class=\"sy0\">?</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> emirps <span class=\"re0\">$n</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"first20: $emirps\"</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> n <span class=\"nu0\">7700</span><span class=\"sy0\">;</span><span class=\"kw1\">set</span> emirps <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">8000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>emirp<span class=\"sy0\">?</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> emirps <span class=\"re0\">$n</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"7700-8000: $emirps\"</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> n <span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"kw1\">set</span> ne <span class=\"nu0\">0</span><span class=\"br0\">}</span> true <span class=\"br0\">{</span><span class=\"kw2\">incr</span> n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>emirp<span class=\"sy0\">?</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> ne<span class=\"br0\">]</span> == <span class=\"nu0\">10000</span><span class=\"br0\">}</span> <span class=\"kw1\">break</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"10,000: $n\"</span></pre>"}, {"lang": "VBA", "loc": 114, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> Const MAX <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span> = 5000000<br/><span class=\"kw2\">Private</span> Emirps <span class=\"kw4\">As</span> <span class=\"kw2\">New</span> Collection<br/><span class=\"kw2\">Private</span> CollTemp <span class=\"kw4\">As</span> <span class=\"kw2\">New</span> Collection<br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main()<br/><span class=\"kw4\">Dim</span> t<br/>t = Timer<br/>    FillCollectionOfEmirps<br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"At this point\u00a0: Execution time = \"</span> &amp; Timer - t &amp; <span class=\"st0\">\" seconds.\"</span><br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"We have a Collection of the \"</span> &amp; Emirps.Count &amp; <span class=\"st0\">\" first Emirps.\"</span><br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"---------------------------\"</span><br/>    <span class=\"co1\">'show the first   twenty   emirps<br/></span>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"the first 20 emirps: \"</span>; ExtractEmirps(1, 20)<br/>    <span class=\"co1\">'show all emirps between 7,700 and 8,000<br/></span>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"all emirps between 7,700 and 8,000: \"</span>; ExtractEmirps(7700, 8000, <span class=\"kw5\">True</span>)<br/>    <span class=\"co1\">'show the   10,000th   emirp<br/></span>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"the 10,000th emirp: \"</span>; ExtractEmirps(10000, 10000)<br/>  <span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> ExtractEmirps(First <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, Last <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, <span class=\"kw4\">Optional</span> Value = <span class=\"kw5\">False</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw4\">Dim</span> temp$, i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, e<br/>    <span class=\"kw3\">If</span> First = Last <span class=\"kw3\">Then</span><br/>        ExtractEmirps = Emirps(First)<br/>    <span class=\"kw3\">Else</span><br/>        <span class=\"kw3\">If</span> <span class=\"kw3\">Not</span> Value <span class=\"kw3\">Then</span><br/>            <span class=\"kw3\">For</span> i = First <span class=\"kw3\">To</span> Last<br/>                temp = temp &amp; <span class=\"st0\">\", \"</span> &amp; Emirps(i)<br/>            <span class=\"kw3\">Next</span><br/>        <span class=\"kw3\">Else</span><br/>            <span class=\"kw3\">For</span> <span class=\"kw3\">Each</span> e <span class=\"kw3\">In</span> Emirps<br/>                <span class=\"kw3\">If</span> e &gt; First <span class=\"kw3\">And</span> e &lt; Last <span class=\"kw3\">Then</span><br/>                    temp = temp &amp; <span class=\"st0\">\", \"</span> &amp; e<br/>                <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>                <span class=\"kw3\">If</span> e = Last <span class=\"kw3\">Then</span> <span class=\"kw2\">Exit</span> <span class=\"kw3\">For</span><br/>            <span class=\"kw3\">Next</span> e<br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>        ExtractEmirps = Mid(temp, 3)<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Sub</span> FillCollectionOfEmirps()<br/><span class=\"kw4\">Dim</span> Primes() <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, e, i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    Primes = Atkin<br/>    <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(Primes) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(Primes)<br/>        CollTemp.Add Primes(i), CStr(Primes(i))<br/>    <span class=\"kw3\">Next</span> i<br/>    <span class=\"kw3\">For</span> <span class=\"kw3\">Each</span> e <span class=\"kw3\">In</span> CollTemp<br/>        <span class=\"kw3\">If</span> IsEmirp(e) <span class=\"kw3\">Then</span> Emirps.Add e<br/>    <span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> Atkin() <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>()<br/><span class=\"kw4\">Dim</span> MyBool() <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/><span class=\"kw4\">Dim</span> SQRT_MAX <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, i&amp;, j&amp;, N&amp;, cpt&amp;, MAX_TEMP <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, temp() <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    <span class=\"kw4\">ReDim</span> MyBool(MAX)<br/>    SQRT_MAX = Sqr(MAX) + 1<br/>    MAX_TEMP = Sqr(MAX / 4) + 1<br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> MAX_TEMP<br/>        <span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> SQRT_MAX<br/>            N = 4 * i * i + j * j<br/>            <span class=\"kw3\">If</span> N &lt;= MAX <span class=\"kw3\">And</span> (N <span class=\"kw4\">Mod</span> 12 = 1 <span class=\"kw3\">Or</span> N <span class=\"kw4\">Mod</span> 12 = 5) <span class=\"kw3\">Then</span><br/>                MyBool(N) = <span class=\"kw5\">True</span><br/>            <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>        <span class=\"kw3\">Next</span> j<br/>    <span class=\"kw3\">Next</span> i<br/>    MAX_TEMP = Sqr(MAX / 3) + 1<br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> MAX_TEMP<br/>        <span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> SQRT_MAX<br/>            N = 3 * i * i + j * j<br/>            <span class=\"kw3\">If</span> N &lt;= MAX <span class=\"kw3\">And</span> N <span class=\"kw4\">Mod</span> 12 = 7 <span class=\"kw3\">Then</span><br/>                MyBool(N) = <span class=\"kw5\">True</span><br/>            <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>        <span class=\"kw3\">Next</span> j<br/>    <span class=\"kw3\">Next</span> i<br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> SQRT_MAX<br/>        <span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> SQRT_MAX<br/>            N = 3 * i * i - j * j<br/>            <span class=\"kw3\">If</span> i &gt; j <span class=\"kw3\">And</span> N &lt;= MAX <span class=\"kw3\">And</span> N <span class=\"kw4\">Mod</span> 12 = 11 <span class=\"kw3\">Then</span><br/>                MyBool(N) = <span class=\"kw5\">True</span><br/>            <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>        <span class=\"kw3\">Next</span> j<br/>    <span class=\"kw3\">Next</span> i<br/>    <span class=\"kw3\">For</span> i = 5 <span class=\"kw3\">To</span> SQRT_MAX <span class=\"kw3\">Step</span> 2<br/>        <span class=\"kw3\">If</span> MyBool(i) <span class=\"kw3\">Then</span><br/>            <span class=\"kw3\">For</span> j = i * i <span class=\"kw3\">To</span> MAX <span class=\"kw3\">Step</span> i<br/>                MyBool(j) = <span class=\"kw5\">False</span><br/>            <span class=\"kw3\">Next</span><br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Next</span><br/>    <span class=\"kw4\">ReDim</span> temp(MAX / 2)<br/>    temp(0) = 2: temp(1) = 3: cpt = 2<br/>    <span class=\"kw3\">For</span> i = 5 <span class=\"kw3\">To</span> MAX <span class=\"kw3\">Step</span> 2<br/>        <span class=\"kw3\">If</span> MyBool(i) <span class=\"kw3\">Then</span> temp(cpt) = i: cpt = cpt + 1<br/>    <span class=\"kw3\">Next</span><br/>    <span class=\"kw4\">ReDim</span> <span class=\"kw4\">Preserve</span> temp(cpt - 1)<br/>    Atkin = temp<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> IsEmirp(N) <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/><span class=\"kw4\">Dim</span> a <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, b <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>    a = StrReverse(CStr(N)): b = CStr(N)<br/>    <span class=\"kw3\">If</span> a &lt;&gt; b <span class=\"kw3\">Then</span><br/>        <span class=\"kw4\">On</span> <span class=\"kw4\">Error</span> <span class=\"kw4\">Resume</span> <span class=\"kw3\">Next</span><br/>        CollTemp.Add a, a<br/>        <span class=\"kw3\">If</span> Err.Number &gt; 0 <span class=\"kw3\">Then</span><br/>            IsEmirp = <span class=\"kw5\">True</span><br/>        <span class=\"kw3\">Else</span><br/>            CollTemp.Remove a<br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>        <span class=\"kw4\">On</span> <span class=\"kw4\">Error</span> <span class=\"kw3\">GoTo</span> 0<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "zkl", "loc": 15, "block": "<pre class=\"text highlighted_source\">var PS=Import(\"Src/ZenKinetic/sieve\").postponed_sieve;<br/>var ps=Utils.Generator(PS), plist=ps.walk(10).copy();  <br/>\u00a0<br/>fcn isEmirp(p){ rp:=p.toString().reverse().toInt();<br/>   if(p==rp) return(False);<br/>   if(plist.holds(rp)) return(True);<br/>   tp:=p; mp:=p.max(rp); while(tp&lt;mp) { plist.append(tp=ps.next()) }<br/>   return(tp==rp);<br/>}<br/>\u00a0<br/>Utils.Generator(PS).filter(20,isEmirp);<br/>\u00a0<br/>Utils.Generator(PS).filter(fcn(p){if(p&gt;8000)return(Void.Stop); p&gt;7700 and isEmirp(p)});<br/>\u00a0<br/>Utils.Generator(PS).reduce(fcn(N,p){N+=isEmirp(p); (N==10000) and T(Void.Stop,p) or N },0);</pre>"}]}