{"task": "Floyd%27s_triangle", "blocks": [{"lang": "360 Assembly", "loc": 39, "block": "<pre class=\"text highlighted_source\">*        Floyd's triangle          21/06/2018<br/>FLOYDTRI PROLOG<br/>         L      R5,NN              nn<br/>         BCTR   R5,0               -1<br/>         M      R4,NN              nn*(nn-1)<br/>         SRA    R5,1               /2<br/>         A      R5,NN              m=(nn*(nn-1))/2+nn; max_value<br/>         CVD    R5,XDEC            binary to packed decimal (PL8)<br/>         EDMK   ZN,XDEC+4          packed dec (PL4) to char (CL8)<br/>         S      R1,=A(ZN)          r1=number of spaces<br/>         L      R9,=A(L'ZN+1)      length(zn08)+1<br/>         SR     R9,R1              s=length(m)+1<br/>         SR     R8,R8              k=0<br/>         LA     R6,1               i=1<br/>       DO WHILE=(C,R6,LE,NN)       do i=1 to nn<br/>         LA     R10,PG               pgi=0<br/>         LA     R7,1                 j=1<br/>       DO WHILE=(CR,R7,LE,R6)          do j=1 to i<br/>         LA     R8,1(R8)               k=k+1<br/>         XDECO  R8,XDEC                k<br/>         LA     R11,XDEC+12            +12<br/>         SR     R11,R9                 -s<br/>         LR     R2,R9                  s<br/>         BCTR   R2,0                   -1<br/>         EX     R2,MVCX                mvc @PG+pgi,@XDEC+12-s,LEN=s<br/>         AR     R10,R9                 pgi+=s<br/>         LA     R7,1(R7)               j++<br/>       ENDDO    ,                    enddo j<br/>         XPRNT  PG,L'PG              print buffer<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         EPILOG<br/>MVCX     MVC    0(0,R10),0(R11)    mvc PG,XDEC<br/>NN       DC     F'14'              number of rows<br/>PG       DC     CL80' '            buffer<br/>XDEC     DS     CL12               temp<br/>ZN       DC     X'4020202020202020'  mask CL8 7num<br/>         YREGS<br/>         END    FLOYDTRI</pre>"}, {"lang": "Ada", "loc": 14, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Integer_Text_IO</span>, Ada.<span class=\"me1\">Command_Line</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Floyd_Triangle <span class=\"kw1\">is</span><br/>  rows\u00a0: <span class=\"kw3\">constant</span> Natural\u00a0:= Natural'Value<span class=\"br0\">(</span>Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> r <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"me1\">rows</span> <span class=\"kw1\">loop</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"me1\">r</span> <span class=\"kw1\">loop</span> <br/>      Ada.<span class=\"me1\">Integer_Text_IO</span>.<span class=\"me1\">put</span> <span class=\"br0\">(</span>r*<span class=\"br0\">(</span>r-<span class=\"nu0\">1</span><span class=\"br0\">)</span>/<span class=\"nu0\">2</span>+i, Width=&gt; Natural'Image<span class=\"br0\">(</span>rows*<span class=\"br0\">(</span>rows-<span class=\"nu0\">1</span><span class=\"br0\">)</span>/<span class=\"nu0\">2</span>+i<span class=\"br0\">)</span>'Length<span class=\"br0\">)</span>; <br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>    Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Floyd_Triangle;<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 33, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># procedure to print a Floyd's Triangle with n lines                      #</span><br/><span class=\"kw4\">PROC</span> floyds triangle <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> n <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># calculate the number of the highest number that will be printed     #</span><br/>    <span class=\"coMULTI\"># ( the sum of the integers 1, 2, ... n )                             #</span><br/>    <span class=\"kw3\">INT</span> max number <span class=\"sy1\">=</span> <span class=\"br0\">(</span> n <span class=\"sy1\">*</span> <span class=\"br0\">(</span> n <span class=\"sy1\">+</span> 1 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw12\">OVER</span> 2<span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># determine the widths required to print the numbers of the final row #</span><br/>    <span class=\"br0\">[</span> n <span class=\"br0\">]</span><span class=\"kw3\">INT</span> widths<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> number <span class=\"sy1\">:=</span> max number <span class=\"sy1\">+</span> 1<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> col <span class=\"kw2\">FROM</span> n <span class=\"kw2\">BY</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> 1 <span class=\"kw2\">DO</span><br/>        widths<span class=\"br0\">[</span> col <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"sy1\">-</span> <span class=\"br0\">(</span> <span class=\"kw8\">UPB</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> number <span class=\"sy1\">-:=</span> 1<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span> <span class=\"sy1\">+</span> 1 <span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># print the triangle                                                  #</span><br/>    <span class=\"kw3\">INT</span> element <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> row <span class=\"kw2\">TO</span> n <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">FOR</span> col <span class=\"kw2\">TO</span> row <span class=\"kw2\">DO</span><br/>            <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> element <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">,</span> widths<span class=\"br0\">[</span> col <span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><br/>\u00a0<br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># floyds triangle #</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>\u00a0<br/>    floyds triangle<span class=\"br0\">(</span>  5 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    floyds triangle<span class=\"br0\">(</span> 14 <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 41, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% prints a Floyd's Triangle with n lines                                 \u00a0%<br/>    procedure floydsTriangle ( integer value n )\u00a0;<br/>    begin<br/>       \u00a0% the triangle should be left aligned with the individual numbers    \u00a0%<br/>       \u00a0% right-aligned with only one space before the number in the final   \u00a0%<br/>       \u00a0% row                                                                \u00a0%<br/>       \u00a0% calculate the highest number that will be printed                  \u00a0%<br/>       \u00a0% ( the sum of the integeregers 1, 2, ... n )                        \u00a0%<br/>        integer array widths( 1\u00a0:: n );<br/>        integer maxNumber, number;<br/>        maxNumber\u00a0:= ( n * ( n + 1 ) ) div 2;<br/>       \u00a0% determine the widths required to print the numbers of the final row\u00a0%<br/>        number\u00a0:= maxNumber;<br/>        for col\u00a0:= n step -1 until 1 do begin<br/>            integer v, w;<br/>            w     \u00a0:= 0;<br/>            v     \u00a0:= number;<br/>            number\u00a0:= number - 1;<br/>            while v &gt; 0 do begin<br/>                w \u00a0:= w + 1;<br/>                v \u00a0:= v div 10<br/>            end while_v_gt_0\u00a0;<br/>            widths( col )\u00a0:= w<br/>        end for_col;<br/>       \u00a0% print the triangle                                                 \u00a0%<br/>        number\u00a0:= 0;<br/>        for row\u00a0:= 1 until n do begin<br/>            for col\u00a0:= 1 until row do begin<br/>                number\u00a0:= number + 1;<br/>                writeon( i_w\u00a0:= widths( col ), s_w\u00a0:= 0, \" \", number )<br/>            end for_col\u00a0;<br/>            write()<br/>        end for_row <br/>    end;\u00a0% floyds triangle\u00a0%<br/>\u00a0<br/>    floydsTriangle(  5 );<br/>    write();<br/>    floydsTriangle( 14 )<br/>\u00a0<br/>end.</pre>"}, {"lang": "AppleScript", "loc": 276, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- FLOYDs TRIANGLE -----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- floyd\u00a0:: Int -&gt; [[Int]]</span><br/><span class=\"kw3\">on</span> floyd<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> floydRow<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>start, row<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span>start <span class=\"sy0\">+</span> row <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, enumFromTo<span class=\"br0\">(</span>start, start <span class=\"sy0\">+</span> row<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    snd<span class=\"br0\">(</span>mapAccumL<span class=\"br0\">(</span>floydRow, <span class=\"nu0\">1</span>, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">0</span>, n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> floyd<br/>\u00a0<br/><span class=\"co1\">-- showFloyd\u00a0:: [[Int]] -&gt; String</span><br/><span class=\"kw3\">on</span> showFloyd<span class=\"br0\">(</span>xss<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> ws <span class=\"kw3\">to</span> map<span class=\"br0\">(</span>compose<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"kw3\">my</span> succ, <span class=\"kw3\">my</span> |length|, <span class=\"kw3\">my</span> show<span class=\"br0\">}</span><span class=\"br0\">)</span>, |<span class=\"kw2\">last</span>|<span class=\"br0\">(</span>xss<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> aligned<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span> pad<br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>w, x<span class=\"br0\">)</span><br/>                    justifyRight<span class=\"br0\">(</span>w, <span class=\"kw1\">space</span>, show<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            concat<span class=\"br0\">(</span>zipWith<span class=\"br0\">(</span>pad, ws, xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    unlines<span class=\"br0\">(</span>map<span class=\"br0\">(</span>aligned, xss<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> showFloyd<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"kw3\">script</span> test<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>            showFloyd<span class=\"br0\">(</span>floyd<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> linefeed<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    unlines<span class=\"br0\">(</span>map<span class=\"br0\">(</span>test, <span class=\"br0\">{</span><span class=\"nu0\">5</span>, <span class=\"nu0\">14</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- compose\u00a0:: [(a -&gt; a)] -&gt; (a -&gt; a)</span><br/><span class=\"kw3\">on</span> compose<span class=\"br0\">(</span>fs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>f, a<span class=\"br0\">)</span><br/>                    mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span>'s |\u03bb|<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            foldr<span class=\"br0\">(</span><span class=\"kw1\">result</span>, x, fs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> compose<br/>\u00a0<br/><span class=\"co1\">-- concat\u00a0:: [[a]] -&gt; [a] | [String] -&gt; String</span><br/><span class=\"kw3\">on</span> concat<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> class <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span> <span class=\"kw3\">is</span> <span class=\"kw1\">string</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> acc <span class=\"kw3\">to</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> acc <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> acc <span class=\"kw3\">to</span> acc <span class=\"sy0\">&amp;</span> <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    acc<br/><span class=\"kw3\">end</span> concat<br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> n <span class=\"sy0\">&lt;</span> m <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n <span class=\"kw1\">by</span> d<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- foldr\u00a0:: (b -&gt; a -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldr<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> lng <span class=\"kw3\">to</span> <span class=\"nu0\">1</span> <span class=\"kw1\">by</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, v, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldr<br/>\u00a0<br/><span class=\"co1\">-- intercalate\u00a0:: Text -&gt; [Text] -&gt; Text</span><br/><span class=\"kw3\">on</span> intercalate<span class=\"br0\">(</span>strText, lstText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strText<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> strJoined <span class=\"kw3\">to</span> lstText <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> strJoined<br/><span class=\"kw3\">end</span> intercalate<br/>\u00a0<br/><span class=\"co1\">-- justifyRight\u00a0:: Int -&gt; Char -&gt; Text -&gt; Text</span><br/><span class=\"kw3\">on</span> justifyRight<span class=\"br0\">(</span>n, cFiller, strText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> n &gt; length <span class=\"kw3\">of</span> strText <span class=\"kw3\">then</span><br/>        <span class=\"kw1\">text</span> <span class=\"sy0\">-</span>n <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>replicate<span class=\"br0\">(</span>n, cFiller<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> strText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">else</span><br/>        strText<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> justifyRight<br/>\u00a0<br/><span class=\"co1\">-- last\u00a0:: [a] -&gt; a</span><br/><span class=\"kw3\">on</span> |<span class=\"kw2\">last</span>|<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw1\">item</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw1\">missing value</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> |<span class=\"kw2\">last</span>|<br/>\u00a0<br/><span class=\"co1\">-- length\u00a0:: [a] -&gt; Int</span><br/><span class=\"kw3\">on</span> |length|<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    length <span class=\"kw3\">of</span> xs<br/><span class=\"kw3\">end</span> |length|<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- 'The mapAccumL function behaves like a combination of map and foldl;</span><br/><span class=\"co1\">-- it applies a function to each element of a list, passing an</span><br/><span class=\"co1\">-- accumulating parameter from left to right, and returning a final</span><br/><span class=\"co1\">-- value of this accumulator together with the new list.' (see Hoogle)</span><br/>\u00a0<br/><span class=\"co1\">-- mapAccumL\u00a0:: (acc -&gt; x -&gt; (acc, y)) -&gt; acc -&gt; [x] -&gt; (acc, [y])</span><br/><span class=\"kw3\">on</span> mapAccumL<span class=\"br0\">(</span>f, acc, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, x<span class=\"br0\">)</span><br/>            <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"kw3\">to</span> <span class=\"kw3\">set</span> pair <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> a, x<span class=\"br0\">)</span><br/>            <span class=\"br0\">[</span><span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> pair, <span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"nu0\">2</span> <span class=\"kw3\">of</span> a<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">{</span><span class=\"kw1\">item</span> <span class=\"nu0\">2</span> <span class=\"kw3\">of</span> pair<span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldl<span class=\"br0\">(</span><span class=\"kw1\">result</span>, <span class=\"br0\">[</span>acc, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span>, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> mapAccumL<br/>\u00a0<br/><span class=\"co1\">-- min\u00a0:: Ord a =&gt; a -&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> min<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> y <span class=\"sy0\">&lt;</span> x <span class=\"kw3\">then</span><br/>        y<br/>    <span class=\"kw3\">else</span><br/>        x<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> min<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper</span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- Egyptian multiplication - progressively doubling a list, appending</span><br/><span class=\"co1\">-- stages of doubling to an accumulator where needed for binary</span><br/><span class=\"co1\">-- assembly of a target length</span><br/>\u00a0<br/><span class=\"co1\">-- replicate\u00a0:: Int -&gt; a -&gt; [a]</span><br/><span class=\"kw3\">on</span> replicate<span class=\"br0\">(</span>n, a<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> out <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> out<br/>    <span class=\"kw3\">set</span> dbl <span class=\"kw3\">to</span> <span class=\"br0\">{</span>a<span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>n &gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">if</span> <span class=\"br0\">(</span>n <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> out <span class=\"kw3\">to</span> out <span class=\"sy0\">&amp;</span> dbl<br/>        <span class=\"kw3\">set</span> n <span class=\"kw3\">to</span> <span class=\"br0\">(</span>n <span class=\"kw2\">div</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> dbl <span class=\"kw3\">to</span> <span class=\"br0\">(</span>dbl <span class=\"sy0\">&amp;</span> dbl<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> out <span class=\"sy0\">&amp;</span> dbl<br/><span class=\"kw3\">end</span> replicate<br/>\u00a0<br/><span class=\"co1\">-- snd\u00a0:: (a, b) -&gt; b</span><br/><span class=\"kw3\">on</span> snd<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> xs <span class=\"kw3\">is</span> <span class=\"kw1\">list</span> <span class=\"kw2\">and</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw1\">item</span> <span class=\"nu0\">2</span> <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw1\">missing value</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> snd<br/>\u00a0<br/><span class=\"co1\">-- show\u00a0:: a -&gt; String</span><br/><span class=\"kw3\">on</span> show<span class=\"br0\">(</span>e<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> c <span class=\"kw3\">to</span> class <span class=\"kw3\">of</span> e<br/>    <span class=\"kw3\">if</span> c <span class=\"sy0\">=</span> <span class=\"kw1\">list</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">script</span> serialized<br/>            <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>                show<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span> |\u03bb|<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>        <span class=\"st0\">\"{\"</span> <span class=\"sy0\">&amp;</span> intercalate<span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, map<span class=\"br0\">(</span>serialized, e<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"}\"</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> c <span class=\"sy0\">=</span> record <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">script</span> showField<br/>            <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>kv<span class=\"br0\">)</span><br/>                <span class=\"kw3\">set</span> <span class=\"br0\">{</span>k, v<span class=\"br0\">}</span> <span class=\"kw3\">to</span> kv<br/>                k <span class=\"sy0\">&amp;</span> <span class=\"st0\">\":\"</span> <span class=\"sy0\">&amp;</span> show<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span> |\u03bb|<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>        <span class=\"st0\">\"{\"</span> <span class=\"sy0\">&amp;</span> intercalate<span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, \u00ac<br/>            map<span class=\"br0\">(</span>showField, zip<span class=\"br0\">(</span>allKeys<span class=\"br0\">(</span>e<span class=\"br0\">)</span>, allValues<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"}\"</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> c <span class=\"sy0\">=</span> date <span class=\"kw3\">then</span><br/>        <span class=\"br0\">(</span><span class=\"st0\">\"date <span class=\"es0\">\\\"</span>\"</span> <span class=\"sy0\">&amp;</span> e <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> c <span class=\"sy0\">=</span> <span class=\"kw1\">text</span> <span class=\"kw3\">then</span><br/>        <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span> <span class=\"sy0\">&amp;</span> e <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">try</span><br/>            e <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>        <span class=\"kw3\">on</span> <span class=\"kw3\">error</span><br/>            <span class=\"br0\">(</span><span class=\"st0\">\"\u00ab\"</span> <span class=\"sy0\">&amp;</span> c <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"\u00bb\"</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">try</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> show<br/>\u00a0<br/><span class=\"co1\">-- succ\u00a0:: Int -&gt; Int</span><br/><span class=\"kw3\">on</span> succ<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"kw3\">end</span> succ<br/>\u00a0<br/><span class=\"co1\">-- unlines\u00a0:: [String] -&gt; String</span><br/><span class=\"kw3\">on</span> unlines<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    intercalate<span class=\"br0\">(</span>linefeed, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> unlines<br/>\u00a0<br/><span class=\"co1\">-- zipWith\u00a0:: (a -&gt; b -&gt; c) -&gt; [a] -&gt; [b] -&gt; [c]</span><br/><span class=\"kw3\">on</span> zipWith<span class=\"br0\">(</span>f, xs, ys<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> min<span class=\"br0\">(</span>length <span class=\"kw3\">of</span> xs, length <span class=\"kw3\">of</span> ys<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> ys<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> zipWith</pre>"}, {"lang": "AutoHotkey", "loc": 22, "block": "<pre class=\"autohotkey highlighted_source\">Floyds_triangle<span class=\"br0\">(</span>row<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\ti <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a> <span class=\"re0\">%row%</span> <br/>\t<span class=\"br0\">{</span><br/>\t\tn <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%n%</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tm <span class=\"sy0\">:=</span> n<span class=\"sy0\">,</span> j <span class=\"sy0\">:=</span> i<span class=\"sy0\">,</span> i<span class=\"sy0\">++</span><br/>\t\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>m<span class=\"sy0\">&lt;</span>row<span class=\"br0\">)</span> <br/>\t\t\t\tj <span class=\"sy0\">+=</span> m <span class=\"sy0\">,</span> m<span class=\"sy0\">++</span><br/>\t\t\tres <span class=\"sy0\">.=</span> spaces<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">+</span><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">=</span><span class=\"nu0\">1</span>?<span class=\"nu0\">0</span>:<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> i<br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">&lt;</span> row<span class=\"br0\">)</span><br/>\t\t\tres <span class=\"sy0\">.=</span> <span class=\"st0\">\"`r`n\"</span><br/>\t<span class=\"br0\">}</span>\t<br/>\t<span class=\"kw1\">return</span> res<br/><span class=\"br0\">}</span><br/>Spaces<span class=\"br0\">(</span>no<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% no<br/>\t\tres<span class=\"sy0\">.=</span><span class=\"st0\">\" \"</span><br/>\t<span class=\"kw1\">return</span>\u00a0% res<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 16, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/bin/awk -f</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>rows <span class=\"sy4\">!~</span> <span class=\"sy3\">/^</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy3\">-</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy3\">+</span>$<span class=\"sy3\">/</span> <span class=\"sy1\">||</span> rows <span class=\"sy2\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw5\">print</span> <span class=\"st0\">\"invalid rows or missing from command line\"</span><br/>\t\t<span class=\"kw5\">print</span> <span class=\"st0\">\"syntax: awk -v rows=14 -f floyds_triangle.awk\"</span><br/>\t\texit <span class=\"nu0\">1</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>row=cols=<span class=\"nu0\">1</span>; row<span class=\"sy2\">&lt;=</span>rows; row<span class=\"sy3\">++</span> cols<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\twidth<span class=\"br0\">[</span>row<span class=\"br0\">]</span> = <span class=\"kw4\">length</span><span class=\"br0\">(</span>row <span class=\"sy3\">+</span> <span class=\"br0\">(</span>rows <span class=\"sy3\">*</span> <span class=\"br0\">(</span>rows<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>col=<span class=\"nu0\">1</span>; col<span class=\"sy2\">&lt;=</span>cols; col<span class=\"sy3\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%*d%c\"</span>, width<span class=\"br0\">[</span>col<span class=\"br0\">]</span>, <span class=\"sy3\">++</span>n, row <span class=\"sy2\">==</span> col <span class=\"sy5\">?</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy5\">:</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Batch File", "loc": 54, "block": "<pre class=\"dos highlighted_source\">\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:floyd 5<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:floyd 14<br/>pause<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/>\u00a0<br/>:<span class=\"re0\">floyd</span><br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> iterations=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> startn=1<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> endn=1<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,<span class=\"sy0\">%</span><span class=\"re3\">iterations</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">j</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(!</span><span class=\"re2\">startn</span><span class=\"sy0\">!</span><span class=\"re2\">,1,</span><span class=\"sy0\">!</span><span class=\"re2\">endn</span><span class=\"sy0\">!)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>    <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> lastnum=<span class=\"sy0\">%%</span><span class=\"re3\">j</span><br/>    <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a startn=<span class=\"sy0\">%%</span><span class=\"re3\">j</span>+1<br/>  <span class=\"sy0\">)</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a endn=<span class=\"sy0\">!</span><span class=\"re2\">startn</span><span class=\"sy0\">!</span>+<span class=\"sy0\">%%</span><span class=\"re3\">i</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:getlength <span class=\"sy0\">%</span><span class=\"re3\">startn</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> digits=<span class=\"sy0\">%</span><span class=\"re3\">errorlevel</span><span class=\"sy0\">%</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> startn=1<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> endn=1<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,<span class=\"sy0\">%</span><span class=\"re3\">iterations</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"line=\"<br/>  <a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">j</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(!</span><span class=\"re2\">startn</span><span class=\"sy0\">!</span><span class=\"re2\">,1,</span><span class=\"sy0\">!</span><span class=\"re2\">endn</span><span class=\"sy0\">!)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>    <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"space=\"<br/>    <a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:getlength <span class=\"sy0\">%%</span><span class=\"re3\">j</span><br/>    <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a sparespace=<span class=\"sy0\">%</span><span class=\"re3\">digits</span><span class=\"sy0\">%</span>-<span class=\"sy0\">!</span><a href=\"http://www.ss64.com/nt/errorlevel.html\"><span class=\"kw2\">errorlevel</span></a><span class=\"sy0\">!</span><br/>    <a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">k</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>0,1,<span class=\"sy0\">!</span><span class=\"re2\">sparespace</span><span class=\"sy0\">!)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"space=<span class=\"sy0\">!</span><span class=\"re2\">space</span><span class=\"sy0\">!</span> \"<br/>\u00a0<br/>    <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> line=<span class=\"sy0\">!</span><span class=\"re2\">line</span><span class=\"sy0\">!!</span><span class=\"re2\">space</span><span class=\"sy0\">!%%</span><span class=\"re3\">j</span><br/>    <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a startn=<span class=\"sy0\">%%</span><span class=\"re3\">j</span>+1<br/>  <span class=\"sy0\">)</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">!</span><span class=\"re2\">line</span><span class=\"sy0\">!</span><br/>  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a endn=<span class=\"sy0\">!</span><span class=\"re2\">startn</span><span class=\"sy0\">!</span>+<span class=\"sy0\">%%</span><span class=\"re3\">i</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/>\u00a0<br/>:<span class=\"re0\">getlength</span><br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> offset=0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> string=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/>:<span class=\"re0\">floydloop</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">string:~%<span class=\"re3\">offset</span>%,1</span><span class=\"sy0\">!</span>\"==\"\" <a href=\"http://www.ss64.com/nt/endlocal.html\"><span class=\"kw3\">endlocal</span></a> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b <span class=\"sy0\">%</span><span class=\"re3\">offset</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a offset+=1<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> floydloop<br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/> 100\u00a0:<br/> 110  REM  FLOYD'S TRIANGLE<br/> 120\u00a0:<br/> 130  DEF  FN Q(A) =  INT ( LOG (A) /  LOG (10)) + 1                <br/> 140 N = 14<br/> 150  DIM P(N): P(0) =  - 1: FOR J = 1 TO N: I = (N * N - N) / 2 + J                              <br/> 160 P(J) = P(J - 1) + FN Q(I) + 1: NEXT J                          <br/> 200  FOR R = 1 TO N: FOR C = 1 TO R                                  <br/> 210 NR = NR + 1:COL = P(C) - ( FN Q(NR) - 1)                         <br/> 220  HTAB COL: PRINT NR;: NEXT C<br/> 230  PRINT\u00a0: NEXT R                    <br/>\u00a0</pre>"}, {"lang": "Befunge", "loc": 5, "block": "<pre class=\"text highlighted_source\">0\"\u00a0:seniL\"&gt;:#,_&amp;&gt;:!#@_55+,:00p::1+*2/1v<br/>vv+1:\\-1p01g5-\\g00&lt;v`*9\"o\"\\+`\"c\"\\`9:::_<br/>$&gt;&gt;\\:::9`\\\"c\"`+\\9v:&gt;&gt;+00g1-:00p5p1-00g^<br/>&lt;v\\*84-\\g01+`*\"o\"&lt;^&lt;&lt;p00:+1\\+1/2*+1:::\\<br/>^&gt;:#\\1#,-#:\\_$$.\\:#^_$$&gt;&gt;1+\\1-55+,:!#@_</pre>"}, {"lang": "Bracmat", "loc": 26, "block": "<pre class=\"text highlighted_source\">  ( ( floyd<br/>    =   lowerLeftCorner lastInColumn lastInRow row i W w<br/>      .   put$(str$(\"Floyd \"\u00a0!arg \":\\n\"))<br/>        &amp;  \u00a0!arg*(!arg+-1)*1/2+1<br/>         \u00a0:\u00a0?lowerLeftCorner<br/>         \u00a0:\u00a0?lastInColumn<br/>        &amp; 1:?lastInRow:?row:?i<br/>        &amp;   whl<br/>          ' (\u00a0!row:~&gt;!arg<br/>            &amp; @(!lastInColumn:? [?W)<br/>            &amp; @(!i:? [?w)<br/>            &amp; whl'(!w+1:~&gt;!W:?w&amp;put$\" \")<br/>            &amp; put$!i<br/>            &amp; (  \u00a0!i:&lt;!lastInRow<br/>                &amp; put$\" \"<br/>                &amp; 1+!lastInColumn:?lastInColumn<br/>              |   put$\\n<br/>                &amp; (1+!row:?row)+!lastInRow:?lastInRow<br/>                &amp;\u00a0!lowerLeftCorner:?lastInColumn<br/>              )<br/>            &amp; 1+!i:?i<br/>            )<br/>    )<br/>  &amp; floyd$5<br/>  &amp; floyd$14<br/>  );</pre>"}, {"lang": "C", "loc": 62, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> t<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> len<span class=\"sy0\">;</span><br/>\u00a0<br/>\ti <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>len <span class=\"sy0\">=</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> i<span class=\"sy0\">;</span> c <span class=\"sy0\">*=</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> len<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tc <span class=\"sy0\">-=</span> i<span class=\"sy0\">;</span> <span class=\"co1\">// c is the col where width changes</span><br/>\u00a0<br/><span class=\"co2\">#define SPEED_MATTERS 0</span><br/><span class=\"co2\">#if SPEED_MATTERS\t// in case we really, really wanted to print huge triangles often</span><br/>\t<span class=\"kw4\">char</span> tmp<span class=\"br0\">[</span><span class=\"nu0\">32</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span><span class=\"nu0\">4096</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span>tmp<span class=\"sy0\">,</span> <span class=\"st0\">\"%*d\"</span><span class=\"sy0\">,</span> len<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw2\">inline</span> <span class=\"kw4\">void</span> inc_numstr<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> len<span class=\"sy0\">;</span><br/>\u00a0<br/>\tredo<span class=\"sy0\">:</span>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>k<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>tmp<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'9'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\ttmp<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">goto</span> redo<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>tmp<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'!'</span><span class=\"br0\">)</span><br/>\t\t\ttmp<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'1'</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>p <span class=\"sy0\">=</span> s<span class=\"sy0\">,</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> i<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tinc_numstr<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t__builtin_memcpy<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> tmp <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&gt;=</span> c<span class=\"br0\">)</span><span class=\"sy0\">,</span> len <span class=\"sy0\">-</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tp <span class=\"sy0\">+=</span> len <span class=\"sy0\">-</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"sy0\">*</span><span class=\"br0\">(</span>p<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i <span class=\"sy0\">-</span> j<span class=\"br0\">)</span><span class=\"sy0\">?</span> <span class=\"st0\">' '</span> <span class=\"sy0\">:</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"sy0\">-</span> s <span class=\"sy0\">+</span> len <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">4096</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fwrite.html\"><span class=\"kw3\">fwrite</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> p <span class=\"sy0\">-</span> s<span class=\"sy0\">,</span> stdout<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tp <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fwrite.html\"><span class=\"kw3\">fwrite</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> p <span class=\"sy0\">-</span> s<span class=\"sy0\">,</span> stdout<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#else // NO_IT_DOESN'T</span><br/>\t<span class=\"kw4\">int</span> num<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>num <span class=\"sy0\">=</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> i<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%*d%c\"</span><span class=\"sy0\">,</span>\tlen <span class=\"sy0\">-</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span> c<span class=\"br0\">)</span><span class=\"sy0\">,</span> num<span class=\"sy0\">++,</span> i <span class=\"sy0\">-</span> j <span class=\"sy0\">?</span> <span class=\"st0\">' '</span><span class=\"sy0\">:</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co2\">#endif</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tt<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> t<span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// maybe not </span><br/>\t<span class=\"co1\">// t(10000);</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 84, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;windows.h&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> floyds_tri<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    floyds_tri<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span> lastLineLen <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    ~floyds_tri<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> killArray<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> create<span class=\"br0\">(</span> <span class=\"kw4\">int</span> rows <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t_rows <span class=\"sy1\">=</span> rows<span class=\"sy4\">;</span><br/>\tcalculateLastLineLen<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tdisplay<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> killArray<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> lastLineLen <span class=\"br0\">)</span> <br/>\t    <span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> lastLineLen<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> calculateLastLineLen<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tkillArray<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tlastLineLen <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> BYTE<span class=\"br0\">[</span>_rows<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> s <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy2\">+</span> <span class=\"br0\">(</span> _rows <span class=\"sy2\">*</span> <span class=\"br0\">(</span> _rows <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> s, ix <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> s <span class=\"sy2\">+</span> _rows<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span>, ix<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    ostringstream cvr<span class=\"sy4\">;</span><br/>\t    cvr <span class=\"sy1\">&lt;&lt;</span> x<span class=\"sy4\">;</span><br/>\t    lastLineLen<span class=\"br0\">[</span>ix<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span>BYTE<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> cvr.<span class=\"me1\">str</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> display<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Floyd<span class=\"es1\">\\'</span>s Triangle - \"</span> <span class=\"sy1\">&lt;&lt;</span> _rows <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" rows\"</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"===============================================\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> number <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> r <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> r <span class=\"sy1\">&lt;</span> _rows<span class=\"sy4\">;</span> r<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> c <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> c <span class=\"sy1\">&lt;=</span> r<span class=\"sy4\">;</span> c<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tostringstream cvr<span class=\"sy4\">;</span><br/>\t\tcvr <span class=\"sy1\">&lt;&lt;</span> number<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t\tstring str <span class=\"sy1\">=</span> cvr.<span class=\"me1\">str</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> str.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> lastLineLen<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\t\t    str <span class=\"sy1\">=</span> <span class=\"st0\">\" \"</span> <span class=\"sy2\">+</span> str<span class=\"sy4\">;</span><br/>\t\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> str <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> _rows<span class=\"sy4\">;</span><br/>    BYTE<span class=\"sy2\">*</span> lastLineLen<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    floyds_tri t<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> s<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Enter the size of the triangle ( 0 to QUIT ): \"</span><span class=\"sy4\">;</span> <span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> s<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>s <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> s <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> t.<span class=\"me1\">create</span><span class=\"br0\">(</span> s <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"pause\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span></pre>"}, {"lang": "C#", "loc": 46, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> FloydsTriangle<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">internal</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> count<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>args<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">TryParse</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"kw1\">out</span> count<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> count <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>MakeTriangle<span class=\"br0\">(</span>count<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span><br/>        <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>MakeTriangle<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>MakeTriangle<span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> MakeTriangle<span class=\"br0\">(</span><span class=\"kw4\">int</span> rows<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> maxValue <span class=\"sy0\">=</span> <span class=\"br0\">(</span>rows <span class=\"sy0\">*</span> <span class=\"br0\">(</span>rows <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> digit <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        StringBuilder output <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> row <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> row <span class=\"sy0\">&lt;=</span> rows<span class=\"sy0\">;</span> row<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> column <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> column <span class=\"sy0\">&lt;</span> row<span class=\"sy0\">;</span> column<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> colMaxDigit <span class=\"sy0\">=</span> <span class=\"br0\">(</span>maxValue <span class=\"sy0\">-</span> rows<span class=\"br0\">)</span> <span class=\"sy0\">+</span> column <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>column <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    output<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                digit<span class=\"sy0\">++;</span><br/>                output<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>digit<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">PadLeft</span><span class=\"br0\">(</span>colMaxDigit<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            output<span class=\"sy0\">.</span><span class=\"me1\">AppendLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> output<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 19, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> TriangleList <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>l <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">inc</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>l l x <span class=\"nu0\">1</span> nl <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"br0\">(</span><span class=\"kw1\">count</span> nl<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        nl<br/>        <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span><span class=\"kw1\">drop</span> x l<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">conj</span> nl <span class=\"br0\">(</span><span class=\"kw1\">take</span> x l<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> TrianglePrint <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>t <span class=\"br0\">(</span>TriangleList n<span class=\"br0\">)</span><br/>        m <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span><span class=\"kw1\">str</span> <span class=\"br0\">(</span>last <span class=\"br0\">(</span>last t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        f <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">str</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> t<span class=\"br0\">)</span><br/>        l <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> m <span class=\"br0\">(</span><span class=\"kw1\">count</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                               <span class=\"br0\">(</span><span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">take</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> m <span class=\"br0\">(</span><span class=\"kw1\">count</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                                     <span class=\"br0\">(</span><span class=\"kw1\">repeat</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> x<span class=\"br0\">)</span><br/>                               x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> f<span class=\"br0\">)</span><br/>        e <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">str</span> <span class=\"st0\">\" \"</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> l<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> e<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 20, "block": "<pre class=\"coffeescript highlighted_source\">triangle = <span class=\"br0\">(</span>array<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> array<br/>    console.<span class=\"me1\">log</span> <span class=\"st0\">\"#{n} rows:\"</span><br/>    printMe = <span class=\"nu0\">1</span><br/>    printed = <span class=\"nu0\">0</span><br/>    row = <span class=\"nu0\">1</span><br/>    to_print = <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">while</span> row <span class=\"sy0\">&lt;</span>= n<br/>        cols = Math.<span class=\"me1\">ceil</span><span class=\"br0\">(</span>Math.<span class=\"me1\">log10</span><span class=\"br0\">(</span>n <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> printed <span class=\"sy0\">+</span> <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        p = <span class=\"br0\">(</span><span class=\"st0\">\"\"</span> <span class=\"sy0\">+</span> printMe<span class=\"br0\">)</span>.<span class=\"me1\">length</span><br/>        <span class=\"kw1\">while</span> p<span class=\"sy0\">++</span> <span class=\"sy0\">&lt;</span>= cols<br/>            to_print <span class=\"sy0\">+</span>= <span class=\"st0\">' '</span><br/>        to_print <span class=\"sy0\">+</span>= printMe <span class=\"sy0\">+</span> <span class=\"st0\">' '</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy0\">++</span>printed == row<br/>            console.<span class=\"me1\">log</span> to_print<br/>            to_print = <span class=\"st0\">\"\"</span><br/>            row<span class=\"sy0\">++</span><br/>            printed = <span class=\"nu0\">0</span><br/>        printMe<span class=\"sy0\">++</span><br/>\u00a0<br/>triangle <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span><span class=\"br0\">]</span></pre>"}, {"lang": "Common Lisp", "loc": 17, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">;;;using flet to define local functions and storing precalculated column widths in array</span><br/><span class=\"co1\">;;;verbose, but more readable and efficient than version 2</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> floydtriangle <span class=\"br0\">(</span>rows<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span>column-widths<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">setf</span> column-widths <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> rows <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>flet <span class=\"br0\">(</span><br/>             <span class=\"br0\">(</span>lazycat <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">expt</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>width <span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>+ <span class=\"nu0\">1</span> <span class=\"br0\">(</span>floor <span class=\"br0\">(</span>log v <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i rows<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> column-widths i<span class=\"br0\">)</span><span class=\"br0\">(</span>width <span class=\"br0\">(</span>+ i <span class=\"br0\">(</span>lazycat <span class=\"br0\">(</span>- rows <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>row rows<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>col <span class=\"br0\">(</span>+ <span class=\"nu0\">1</span> row<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>format t <span class=\"st0\">\"~vd \"</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> column-widths col<span class=\"br0\">)</span><span class=\"br0\">(</span>+ col <span class=\"br0\">(</span>lazycat row<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>format t <span class=\"st0\">\"~%\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 16, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> floydTriangle<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> lowerLeftCorner <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>r<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>c<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">r</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            writef<span class=\"br0\">(</span><span class=\"st0\">\"%*d%c\"</span><span class=\"sy0\">,</span><br/>                   text<span class=\"br0\">(</span>lowerLeftCorner <span class=\"sy0\">+</span> c<span class=\"br0\">)</span>.<span class=\"me1\">length</span><span class=\"sy0\">,</span><br/>                   r <span class=\"sy0\">*</span> <span class=\"br0\">(</span>r <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>                   c <span class=\"sy0\">==</span> r <span class=\"sy0\">?</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span> <span class=\"sy0\">:</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    floydTriangle<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    floydTriangle<span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 18, "block": "<pre class=\"text highlighted_source\">defmodule Floyd do<br/>  def triangle(n) do<br/>    max = trunc(n * (n + 1) / 2)<br/>    widths = for m &lt;- (max - n + 1)..max, do: (m |&gt; Integer.to_string |&gt; String.length) + 1<br/>    format = Enum.map(widths, fn wide -&gt; \"~#{wide}w\" end) |&gt; List.to_tuple<br/>    line(n, 0, 1, format)<br/>  end<br/>\u00a0<br/>  def line(n, n, _, _), do:\u00a0:ok<br/>  def line(n, i, count, format) do<br/>    Enum.each(0..i, fn j -&gt;\u00a0:io.fwrite(elem(format,j), [count+j]) end)<br/>    IO.puts \"\"<br/>    line(n, i+1, count+i+1, format)<br/>  end<br/>end<br/>\u00a0<br/>Floyd.triangle(5)<br/>Floyd.triangle(14)</pre>"}, {"lang": "Erlang", "loc": 46, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> floyds_triangle <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>integers<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> print<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> strings<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">integers</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>          <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span> <span class=\"re3\">integers_reversed</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">print</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>       <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"~s~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">flatten</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">strings</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">strings</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re5\">Strings_reversed</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re3\">strings_from_integers</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">integers_reversed</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>        <span class=\"re5\">Paddings</span> <span class=\"sy3\">=</span> <span class=\"re3\">paddings</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"kw3\">length</span><span class=\"re3\">s</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Strings_reversed</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">formats</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">zip</span><span class=\"br0\">(</span><span class=\"re5\">Paddings</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">Strings_reversed</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>       <span class=\"re3\">print</span><span class=\"br0\">(</span> <span class=\"nu0\">5</span>\t<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>       <span class=\"re3\">print</span><span class=\"br0\">(</span> <span class=\"nu0\">14</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">formats</span><span class=\"br0\">(</span> <span class=\"re5\">Paddings</span><span class=\"sy1\">,</span> <span class=\"re5\">Strings</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">flatten</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/io_lib.html\"><span class=\"kw5\">io_lib</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\" ~*s\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">zip</span><span class=\"br0\">(</span><span class=\"re5\">Paddings</span><span class=\"sy1\">,</span> <span class=\"re5\">Strings</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">integers_reversed</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>          <span class=\"br0\">{</span><span class=\"re5\">_End</span><span class=\"sy1\">,</span> <span class=\"re5\">Integers_reversed</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> integers_reversed<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>          <span class=\"re5\">Integers_reversed</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">integers_reversed</span><span class=\"br0\">(</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Start</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>          <span class=\"re5\">End</span> <span class=\"sy3\">=</span> <span class=\"re5\">Start</span> <span class=\"sy3\">+</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span><br/>          <span class=\"br0\">{</span><span class=\"re5\">End</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"re5\">Start</span><span class=\"sy1\">,</span> <span class=\"re5\">End</span><span class=\"br0\">)</span> | <span class=\"re5\">Acc</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"kw3\">length</span><span class=\"re3\">s</span><span class=\"br0\">(</span> <span class=\"re5\">Strings</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/string.html\"><span class=\"kw5\">string</span></a>:<span class=\"re3\">len</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Strings</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">paddings</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">Last_line</span> | <span class=\"re5\">T</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>          <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Paddings</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> paddings<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re3\">paddings_lose_last</span><span class=\"br0\">(</span><span class=\"re5\">Last_line</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Last_line</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>          <span class=\"re5\">Paddings</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">paddings</span><span class=\"br0\">(</span> <span class=\"re5\">_N</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Current</span><span class=\"sy1\">,</span>\t<span class=\"re5\">Acc</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re3\">paddings_lose_last</span><span class=\"br0\">(</span><span class=\"re5\">Current</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>\t<span class=\"br0\">[</span><span class=\"re5\">Current</span> | <span class=\"re5\">Acc</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">paddings_lose_last</span><span class=\"br0\">(</span> <span class=\"re5\">List</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">[</span><span class=\"re5\">_H</span> | <span class=\"re5\">T</span><span class=\"br0\">]</span>\t<span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span> <span class=\"re5\">List</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span> <span class=\"re5\">T</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">strings_from_integers</span><span class=\"br0\">(</span> <span class=\"re5\">Integers</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">integer_to_list</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Integers</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM FLOYD<br/>\u00a0<br/>!<br/>! for rosettacode.org<br/>!<br/>\u00a0<br/>BEGIN<br/>  N=14<br/>  NUM=1<br/>  LAST=(N^2-N+2) DIV 2<br/>  FOR ROW=1 TO N DO<br/>    FOR J=1 TO ROW DO<br/>       US$=STRING$(LEN(STR$(LAST-1+J))-1,\"#\")<br/>       WRITE(US$;NUM;)<br/>       PRINT(\" \";)<br/>       NUM+=1<br/>    END FOR<br/>    PRINT<br/>  END FOR<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 20, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main argv <span class=\"sy0\">=</span> <br/>    <span class=\"co1\">// columns and rows are 0-based, so the input has to be decremented:</span><br/>    <span class=\"kw1\">let</span> maxRow <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">match</span> UInt32.<span class=\"me1\">TryParse</span><span class=\"br0\">(</span>argv.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">with</span><br/>        | <span class=\"br0\">(</span><span class=\"kw1\">true</span>, v<span class=\"br0\">)</span> <span class=\"kw1\">when</span> v <span class=\"sy0\">&gt;</span> 0u <span class=\"sy0\">-&gt;</span> <span class=\"kw4\">int</span> <span class=\"br0\">(</span>v <span class=\"sy0\">-</span> 1u<span class=\"br0\">)</span><br/>        | <span class=\"br0\">(</span>_, _<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw5\">failwith</span> <span class=\"st0\">\"not a positive integer\"</span><br/>\u00a0<br/>    <span class=\"kw1\">let</span> len <span class=\"br0\">(</span>n: <span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">int</span> <span class=\"br0\">(</span>Math.<span class=\"me1\">Floor</span><span class=\"br0\">(</span>Math.<span class=\"me1\">Log10</span><span class=\"br0\">(</span><span class=\"kw4\">float</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> col0 row <span class=\"sy0\">=</span> row <span class=\"sy0\">*</span> <span class=\"br0\">(</span>row <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">let</span> col0maxRow <span class=\"sy0\">=</span> col0 maxRow<br/>    <span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> .. <span class=\"me1\">maxRow</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> col <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> .. <span class=\"me1\">row</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">let</span> value <span class=\"sy0\">=</span> <span class=\"br0\">(</span>col0 row<span class=\"br0\">)</span> <span class=\"sy0\">+</span> col<br/>            <span class=\"kw1\">let</span> pad <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a><span class=\"br0\">(</span><span class=\"st0\">' '</span>, <span class=\"br0\">(</span>len <span class=\"br0\">(</span>col0maxRow <span class=\"sy0\">+</span> col<span class=\"br0\">)</span> <span class=\"sy0\">-</span> len <span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            printf <span class=\"st0\">\"%s%d\"</span> pad value<br/>        printfn <span class=\"st0\">\"\"</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Forth", "loc": 15, "block": "<pre class=\"text highlighted_source\">: lastn ( rows -- n ) dup 1- * 2/\u00a0;<br/>: width ( n -- n )  s&gt;f flog ftrunc f&gt;s 2 +\u00a0;<br/>\u00a0<br/>: triangle ( rows -- )<br/>  dup lastn 0 rot ( last 0 rows )<br/>  0 do<br/>    over cr<br/>    i 1+ 0 do<br/>      1+ swap 1+ swap<br/>      2dup width u.r<br/>    loop<br/>    drop<br/>  loop<br/>  2drop\u00a0;<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 65, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">!-*- mode: compilation; default-directory: \"/tmp/\" -*-</span><br/><span class=\"co1\">!Compilation started at Tue May 21 22:55:08</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!a=./f &amp;&amp; make $a &amp;&amp; OMP_NUM_THREADS=2 $a 1223334444</span><br/><span class=\"co1\">!gfortran -std=f2008 -Wall -ffree-form -fall-intrinsics f.f08 -o f</span><br/><span class=\"co1\">!  1 </span><br/><span class=\"co1\">!  2  3 </span><br/><span class=\"co1\">!  4  5  6 </span><br/><span class=\"co1\">!  7  8  9 10 </span><br/><span class=\"co1\">! 11 12 13 14 15 </span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!  1 </span><br/><span class=\"co1\">!  2  3 </span><br/><span class=\"co1\">!  4  5  6 </span><br/><span class=\"co1\">!  7  8  9 10 </span><br/><span class=\"co1\">! 11 12 13 14 15 </span><br/><span class=\"co1\">! 16 17 18 19 20 21 </span><br/><span class=\"co1\">! 22 23 24 25 26 27 28 </span><br/><span class=\"co1\">! 29 30 31 32 33 34 35 36 </span><br/><span class=\"co1\">! 37 38 39 40 41 42 43 44  45 </span><br/><span class=\"co1\">! 46 47 48 49 50 51 52 53  54  55 </span><br/><span class=\"co1\">! 56 57 58 59 60 61 62 63  64  65  66 </span><br/><span class=\"co1\">! 67 68 69 70 71 72 73 74  75  76  77  78 </span><br/><span class=\"co1\">! 79 80 81 82 83 84 85 86  87  88  89  90  91 </span><br/><span class=\"co1\">! 92 93 94 95 96 97 98 99 100 101 102 103 104 105 </span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!Compilation finished at Tue May 21 22:55:08</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">program</span> p<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">examples</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span>, <span class=\"nu0\">14</span><span class=\"br0\">]</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>  <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><span class=\"br0\">(</span>examples<span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> floyd<span class=\"br0\">(</span>examples<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    write<span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"st0\">'(/)'</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> floyd<span class=\"br0\">(</span>rows<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">rows</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span>, i, j, k<br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">60</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">L</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">504</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw1\">fmt</span><br/>    n <span class=\"sy0\">=</span> <span class=\"br0\">(</span>rows<span class=\"sy0\">*</span><span class=\"br0\">(</span>rows<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"co1\">! Gauss's formula</span><br/>    <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,rows <span class=\"co1\">! compute format of final row</span><br/>      L<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"kw4\">log10</span><span class=\"br0\">(</span><span class=\"kw3\">real</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span>rows<span class=\"sy0\">+</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,rows<br/>      <span class=\"kw1\">do</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,i<br/>        k <span class=\"sy0\">=</span> k<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>        write<span class=\"br0\">(</span><span class=\"kw1\">fmt</span>,<span class=\"st0\">'(a2,i1,a1)'</span><span class=\"br0\">)</span><span class=\"st0\">'(i'</span>,L<span class=\"br0\">(</span>j<span class=\"br0\">)</span>,<span class=\"st0\">')'</span><br/>        write<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"kw1\">fmt</span>,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> k<br/>      <span class=\"kw1\">enddo</span><br/>      write<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">''</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> floyd<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> p<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 53, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 19-09-2015</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> pascal_triangle<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> a = <span class=\"nu0\">1</span>, b, i, j, switch = n + <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> frmt, frmt_1, frmt_2<br/>\u00a0<br/>    <span class=\"co1\">' last number of the last line</span><br/>    i = <span class=\"br0\">(</span>n * <span class=\"br0\">(</span>n + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \\ <span class=\"nu0\">2</span><br/>    frmt_2 = <span class=\"kw1\">String</span><span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span>, <span class=\"st0\">\"#\"</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">' first number of the last line</span><br/>    i = <span class=\"br0\">(</span><span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span> * n<span class=\"br0\">)</span> \\ <span class=\"nu0\">2</span> + <span class=\"nu0\">1</span><br/>    frmt_1 = <span class=\"kw1\">String</span><span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span>, <span class=\"st0\">\"#\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">' we have 2 different formats strings</span><br/>    <span class=\"co1\">' find the point where we have to make the switch</span><br/>    <span class=\"kw1\">If</span> frmt_1 &lt;&gt; frmt_2 <span class=\"kw1\">Then</span><br/>        j = i + <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">While</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> = <span class=\"kw1\">Len</span><span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span>J<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            j =  j + <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">Wend</span><br/>        switch = j - i<br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"output for \"</span>; <span class=\"kw1\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Print</span><br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>        frmt = frmt_1<br/>        b = <span class=\"br0\">(</span>i * <span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \\ <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">For</span> j = a <span class=\"kw1\">To</span> b<br/>            <span class=\"co1\">' if we have the switching point change format string</span><br/>            <span class=\"kw1\">If</span> j - a = switch <span class=\"kw1\">Then</span> frmt = frmt_2<br/>            <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> frmt; j;<br/>        <span class=\"kw1\">Next</span> j<br/>        <span class=\"kw1\">Print</span><br/>        a = b + <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Next</span> i<br/>    <span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/>pascal_triangle<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/>pascal_triangle<span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Gambas", "loc": 25, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siCount, siNo, siCounter <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siLine <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siInput <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span>, <span class=\"nu0\">14</span><span class=\"br0\">]</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> siInput.<a href=\"http://gambasdoc.org/help/lang/max\"><span class=\"kw2\">Max</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"Floyd's triangle to \"</span> <span class=\"sy0\">&amp;</span> siInput<span class=\"br0\">[</span>siCount<span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" lines\"</span><br/>  <a href=\"http://gambasdoc.org/help/lang/do\"><span class=\"kw1\">Do</span></a><br/>    <a href=\"http://gambasdoc.org/help/lang/inc\"><span class=\"kw1\">Inc</span></a> siNo<br/>    <a href=\"http://gambasdoc.org/help/lang/inc\"><span class=\"kw1\">Inc</span></a> siCounter<br/>    <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <a href=\"http://gambasdoc.org/help/lang/format\"><span class=\"kw2\">Format</span></a><span class=\"br0\">(</span>siNo, <span class=\"st0\">\"####\"</span><span class=\"br0\">)</span>;<br/>      <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> siLine <span class=\"sy0\">=</span> siCounter <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <br/>        <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <br/>        <a href=\"http://gambasdoc.org/help/lang/inc\"><span class=\"kw1\">Inc</span></a> siLine<br/>        siCounter <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      <a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a> <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a><br/>    <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> siLine <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">=</span> siInput<span class=\"br0\">[</span>siCount<span class=\"br0\">]</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/break\"><span class=\"kw1\">Break</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/loop\"><span class=\"kw1\">Loop</span></a><br/>  siLine <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  siCounter <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  siNo <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 27, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    floyd<span class=\"sy1\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">)</span><br/>    floyd<span class=\"sy1\">(</span><span class=\"nu0\">14</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> floyd<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"Floyd\u00a0%d:<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    lowerLeftCorner <span class=\"sy2\">:=</span> n<span class=\"sy3\">*</span><span class=\"sy1\">(</span>n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>    lastInColumn <span class=\"sy2\">:=</span> lowerLeftCorner<br/>    lastInRow <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> row <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> row &lt;<span class=\"sy2\">=</span> n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        w <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>fmt<span class=\"sy3\">.</span>Sprint<span class=\"sy1\">(</span>lastInColumn<span class=\"sy1\">))</span><br/>        <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> &lt; lastInRow <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%*d \"</span><span class=\"sy1\">,</span> w<span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>            lastInColumn<span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%*d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> w<span class=\"sy1\">,</span> i<span class=\"sy1\">)</span><br/>            row<span class=\"sy2\">++</span><br/>            lastInRow <span class=\"sy2\">+=</span> row<br/>            lastInColumn <span class=\"sy2\">=</span> lowerLeftCorner<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 17, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>liftM2<span class=\"br0\">)</span><br/>\u00a0<br/>floydTriangle <span class=\"sy0\">=</span><br/>  liftM2<br/>    <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span>liftM2 <span class=\"br0\">(</span><span class=\"sy0\">.</span><span class=\"br0\">)</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:enumFromTo\"><span class=\"kw3\">enumFromTo</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pred\"><span class=\"kw3\">pred</span></a> <span class=\"sy0\">.</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:scanl\"><span class=\"kw3\">scanl</span></a> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id\"><span class=\"kw3\">id</span></a><br/>    <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>\u00a0<br/>alignR <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>alignR n <span class=\"sy0\">=</span> <span class=\"br0\">(</span>\\s <span class=\"sy0\">-&gt;</span> replicate <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> s<span class=\"br0\">)</span> <span class=\"st0\">' '</span> <span class=\"sy0\">++</span> s<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a><br/>\u00a0<br/>formatFT <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>formatFT n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unwords\"><span class=\"kw3\">unwords</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> alignR ws<span class=\"br0\">)</span> t<br/>  <span class=\"kw1\">where</span><br/>    t <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> n floydTriangle<br/>    ws <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:last\"><span class=\"kw3\">last</span></a> t</pre>"}, {"lang": "Icon and Unicon", "loc": 12, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    n <span class=\"sy0\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"nu0\">5</span><br/>    w <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy0\">*</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>n<br/>    c <span class=\"sy0\">:=</span> <span class=\"kw1\">create</span> <span class=\"kw4\">seq</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> row <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">every</span> col <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> row <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            width <span class=\"sy0\">:=</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span>w<span class=\"sy0\">+</span>col<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>            <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"kw4\">right</span><span class=\"br0\">(</span><span class=\"sy0\">@</span>c<span class=\"sy0\">,</span>width<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">require <span class=\"st_h\">'strings'</span><br/>floyd=: [: rplc&amp;<span class=\"sy0\">(</span><span class=\"st_h\">' 0'</span>;<span class=\"st_h\">'  '</span><span class=\"sy0\">)</span>\"<span class=\"nu0\">1</span>@\":@<span class=\"sy0\">(</span>* <span class=\"sy0\">(</span>$ $ +/\\@,<span class=\"sy0\">))</span> &gt;:/<a class=\"__cf_email__\" data-cfemail=\"0d734d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:i.</pre>"}, {"lang": "Java", "loc": 21, "block": "<pre class=\"java highlighted_source\">\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Floyd <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tprintTriangle<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tprintTriangle<span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> printTriangle<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"st0\">\" rows:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> rowNum <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, printMe <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, numsPrinted <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t\trowNum <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> printMe<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">int</span> cols <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">log10</span><span class=\"br0\">(</span>n<span class=\"sy0\">*</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> numsPrinted <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%\"</span><span class=\"sy0\">+</span>cols<span class=\"sy0\">+</span><span class=\"st0\">\"d \"</span>, printMe<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">++</span>numsPrinted <span class=\"sy0\">==</span> rowNum<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\trowNum<span class=\"sy0\">++;</span><br/>\t\t\t\tnumsPrinted <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 121, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// FLOYD's TRIANGLE -------------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// floyd\u00a0:: Int -&gt; [[Int]]</span><br/>    <span class=\"kw1\">function</span> floyd<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> snd<span class=\"br0\">(</span>mapAccumL<span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>start<span class=\"sy0\">,</span> row<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">[</span>start <span class=\"sy0\">+</span> row <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> enumFromTo<span class=\"br0\">(</span>start<span class=\"sy0\">,</span> start <span class=\"sy0\">+</span> row<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// showFloyd\u00a0:: [[Int]] -&gt; String</span><br/>    <span class=\"kw1\">function</span> showFloyd<span class=\"br0\">(</span>xss<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> ws <span class=\"sy0\">=</span> map<span class=\"br0\">(</span>compose<span class=\"br0\">(</span><span class=\"br0\">[</span>succ<span class=\"sy0\">,</span> length<span class=\"sy0\">,</span> show<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> last<span class=\"br0\">(</span>xss<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> unlines<span class=\"br0\">(</span>map<span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> concat<span class=\"br0\">(</span>zipWith<span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>w<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> justifyRight<span class=\"br0\">(</span>w<span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"sy0\">,</span> show<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">,</span> ws<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> xss<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"co1\">// GENERIC FUNCTIONS ------------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// compose\u00a0:: [(a -&gt; a)] -&gt; (a -&gt; a)</span><br/>    <span class=\"kw1\">function</span> compose<span class=\"br0\">(</span>fs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> fs.<span class=\"me1\">reduceRight</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// concat\u00a0:: [[a]] -&gt; [a] | [String] -&gt; String</span><br/>    <span class=\"kw1\">function</span> concat<span class=\"br0\">(</span>xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>xs.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> unit <span class=\"sy0\">=</span> <span class=\"kw1\">typeof</span> xs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">===</span> <span class=\"st0\">'string'</span> <span class=\"sy0\">?</span> <span class=\"st0\">''</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> unit.<span class=\"me1\">concat</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span>unit<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/>    <span class=\"kw1\">function</span> enumFromTo<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">Array</span>.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/>            length<span class=\"sy0\">:</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> m<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>_<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> m <span class=\"sy0\">+</span> i<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// justifyRight\u00a0:: Int -&gt; Char -&gt; Text -&gt; Text</span><br/>    <span class=\"kw1\">function</span> justifyRight<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> cFiller<span class=\"sy0\">,</span> strText<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> n <span class=\"sy0\">&gt;</span> strText.<span class=\"me1\">length</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span>cFiller.<span class=\"me1\">repeat</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> strText<span class=\"br0\">)</span><br/>            .<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>n<span class=\"br0\">)</span> <span class=\"sy0\">:</span> strText<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// last\u00a0:: [a] -&gt; a</span><br/>    <span class=\"kw1\">function</span> last<span class=\"br0\">(</span>xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> xs.<span class=\"me1\">length</span> <span class=\"sy0\">?</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"kw2\">undefined</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// length\u00a0:: [a] -&gt; Int</span><br/>    <span class=\"kw1\">function</span> length<span class=\"br0\">(</span>xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> xs.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/>    <span class=\"kw1\">function</span> map<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// 'The mapAccumL function behaves like a combination of map and foldl;</span><br/>    <span class=\"co1\">// it applies a function to each element of a list, passing an accumulating</span><br/>    <span class=\"co1\">// parameter from left to right, and returning a final value of this</span><br/>    <span class=\"co1\">// accumulator together with the new list.' (See hoogle )</span><br/>\u00a0<br/>    <span class=\"co1\">// mapAccumL\u00a0:: (acc -&gt; x -&gt; (acc, y)) -&gt; acc -&gt; [x] -&gt; (acc, [y])</span><br/>    <span class=\"kw1\">function</span> mapAccumL<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> acc<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> xs.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> pair <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> <span class=\"br0\">[</span>pair<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span><span class=\"br0\">[</span>pair<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>acc<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// show\u00a0::</span><br/>    <span class=\"co1\">// (a -&gt; String) f,  Num n =&gt;</span><br/>    <span class=\"co1\">// a -&gt; maybe f -&gt; maybe n -&gt; String</span><br/>    <span class=\"kw1\">var</span> show <span class=\"sy0\">=</span> JSON.<span class=\"me1\">stringify</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// snd\u00a0:: (a, b) -&gt; b</span><br/>    <span class=\"kw1\">function</span> snd<span class=\"br0\">(</span>tpl<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">Array</span>.<span class=\"me1\">isArray</span><span class=\"br0\">(</span>tpl<span class=\"br0\">)</span> <span class=\"sy0\">?</span> tpl<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"kw2\">undefined</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// succ\u00a0:: Int -&gt; Int</span><br/>    <span class=\"kw1\">function</span> succ<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// unlines\u00a0:: [String] -&gt; String</span><br/>    <span class=\"kw1\">function</span> unlines<span class=\"br0\">(</span>xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> xs.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// zipWith\u00a0:: (a -&gt; b -&gt; c) -&gt; [a] -&gt; [b] -&gt; [c]</span><br/>    <span class=\"kw1\">function</span> zipWith<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"sy0\">,</span> ys<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> ny <span class=\"sy0\">=</span> ys.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>xs.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;=</span> ny <span class=\"sy0\">?</span> xs <span class=\"sy0\">:</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> ny<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> ys<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// TEST ( n=5 and n=14 rows ) ---------------------------------------------</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> unlines<span class=\"br0\">(</span>map<span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> showFloyd<span class=\"br0\">(</span>floyd<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 23, "block": "<pre class=\"text highlighted_source\"># floyd(n) creates an n-row floyd's triangle<br/>def floyd(n):<br/>  def lpad(len): tostring | (((len - length) * \" \")  + .);<br/>\u00a0<br/>  # Construct an array of widths.<br/>  # Assuming N is the last integer on the last row (i.e. (n+1)*n/2),<br/>  # the last row has n entries from (1+N-n) through N:<br/>  def widths:<br/>    ((n+1)*n/2) as $N<br/>    | [range(1 + $N - n; $N + 1) | tostring | length];<br/>\u00a0<br/>  # emit line k assuming it starts with the integer \"start\"<br/>  def line(start; k; widths):<br/>    reduce range(start; start+k) as $i<br/>      (\"\"; . + ($i|lpad(widths[$i - start])) + \" \");<br/>\u00a0<br/>  widths as $widths<br/>  | (reduce range(0;n) as $row<br/>      ( [0, \"\"];   # state: i, string<br/>        (.[0] + 1) as $i | .[1] as $string<br/>        | [ ($i + $row),<br/>            ($string + \"\\n\" + line($i; $row + 1; $widths )) ] )<br/>    | .[1] )\u00a0;</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">\u00a0</pre>"}, {"lang": "Kotlin", "loc": 16, "block": "<pre class=\"scala highlighted_source\">fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> args.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> Triangle<span class=\"br0\">(</span>it.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>internal <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Triangle<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    init <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"$n rows:\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> printMe <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> printed <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> row <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>row <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cols <span class=\"sy0\">=</span> Math.<span class=\"me1\">ceil</span><span class=\"br0\">(</span>Math.<span class=\"me1\">log10</span><span class=\"br0\">(</span>n <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span> / <span class=\"nu0\">2</span> + printed + <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            print<span class=\"br0\">(</span><span class=\"st0\">\"%${cols}d \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>printMe<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>++printed <span class=\"sy0\">==</span> row<span class=\"br0\">)</span> <span class=\"br0\">{</span> println<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> row++<span class=\"sy0\">;</span> printed <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>            printMe++<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 24, "block": "<pre class=\"text highlighted_source\">define floyds_triangle(n::integer) =&gt; {<br/>\tlocal(out = array(array(1)),comp = array, num = 1)<br/>\twhile(#out-&gt;size &lt; #n) =&gt; {<br/>\t\tlocal(new = array)<br/>\t\tloop(#out-&gt;last-&gt;size + 1) =&gt; {<br/>\t\t\t#num++<br/>\t\t\t#new-&gt;insert(#num)<br/>\t\t}<br/>\t\t#out-&gt;insert(#new)<br/>\t}<br/>\tlocal(pad = #out-&gt;last-&gt;last-&gt;asString-&gt;size)<br/>\twith line in #out do =&gt; {<br/>\t\tlocal(lineout = string)<br/>\t\twith i in #line do =&gt; {<br/>\t\t\t#i\u00a0!= #line-&gt;first\u00a0? #lineout-&gt;append(' ')<br/>\t\t\t#lineout-&gt;append((' '*(#pad - #i-&gt;asString-&gt;size))+#i)<br/>\t\t}<br/>\t\t#comp-&gt;insert(#lineout)<br/>\t}<br/>\treturn #comp-&gt;join('\\r')<br/>}<br/>floyds_triangle(5)<br/>'\\r\\r'<br/>floyds_triangle(14)</pre>"}, {"lang": "Liberty BASIC", "loc": 17, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">input</span> <span class=\"st0\">\"Number of rows needed:- \"</span>; rowsNeeded<br/>\u00a0<br/><span class=\"kw1\">dim</span> colWidth<span class=\"br0\">(</span>rowsNeeded<span class=\"br0\">)</span>    <span class=\"co1\">'    5 rows implies 5 columns</span><br/>\u00a0<br/><span class=\"kw1\">for</span> col<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> rowsNeeded<br/>    colWidth<span class=\"br0\">(</span>col<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw2\">str$</span><span class=\"br0\">(</span>col <span class=\"sy0\">+</span> rowsNeeded<span class=\"sy0\">*</span><span class=\"br0\">(</span>rowsNeeded<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">next</span><br/>\u00a0<br/>currentNumber <span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">for</span> row<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> rowsNeeded<br/>    <span class=\"kw1\">for</span> col<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> row<br/>        <span class=\"kw1\">print</span> <span class=\"kw2\">right$</span><span class=\"br0\">(</span> <span class=\"st0\">\"  \"</span><span class=\"sy0\">+</span><span class=\"kw2\">str$</span><span class=\"br0\">(</span> currentNumber<span class=\"br0\">)</span><span class=\"sy0\">,</span> colWidth<span class=\"br0\">(</span>col<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>;<br/>        currentNumber <span class=\"sy0\">=</span> currentNumber <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">next</span><br/>    <span class=\"kw1\">print</span><br/><span class=\"kw1\">next</span></pre>"}, {"lang": "Lua", "loc": 19, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> print_floyd<span class=\"br0\">(</span>rows<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">local</span> h <span class=\"sy0\">=</span> rows<span class=\"sy0\">*</span><span class=\"br0\">(</span>rows<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>\t<span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>rows <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">local</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>\t\t<span class=\"kw1\">for</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>i <span class=\"kw1\">do</span><br/>\t\t\t<span class=\"kw1\">for</span> k<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>tostring<span class=\"br0\">(</span>h<span class=\"sy0\">+</span>j<span class=\"br0\">)</span><span class=\"sy0\">-#</span>tostring<span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t\t\t\ts <span class=\"sy0\">=</span> s <span class=\"sy0\">..</span> <span class=\"st0\">\" \"</span><br/>\t\t\t<span class=\"kw1\">end</span><br/>\t\t\t<span class=\"kw1\">if</span> j <span class=\"sy0\">~=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> s <span class=\"sy0\">=</span> s <span class=\"sy0\">..</span> <span class=\"st0\">\" \"</span> <span class=\"kw1\">end</span><br/>\t\t\ts <span class=\"sy0\">=</span> s <span class=\"sy0\">..</span> <span class=\"kw3\">tostring</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>\t\t\tc <span class=\"sy0\">=</span> c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t\t<span class=\"kw3\">print</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>print_floyd<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>print_floyd<span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 31, "block": "<pre class=\"text highlighted_source\">floyd\u00a0:= proc(rows)<br/>\tlocal num, numRows, numInRow, i, digits;<br/>\tdigits\u00a0:= Array([]);<br/>\tfor i to 2 do<br/>\t\tnum\u00a0:= 1;<br/>\t\tnumRows\u00a0:= 1;<br/>\t\tnumInRow\u00a0:= 1;<br/>\t\twhile numRows &lt;= rows do<br/>\t\t\tif i = 2 then<br/>\t\t\t\tprintf(cat(\"%\", digits[numInRow], \"a \"), num);<br/>\t\t\tend if;<br/>\t\t\tnum\u00a0:= num + 1;<br/>\t\t\tif i = 1 and numRows = rows then<br/>\t\t\t\tdigits(numInRow)\u00a0:= StringTools[Length](convert(num-1, string));<br/>\t\t\tend if;<br/>\t\t\tif numInRow &gt;= numRows then<br/>\t\t\t\tif i = 2 then<br/>\t\t\t\t\tprintf(\"\\n\");<br/>\t\t\t\tend if;<br/>\t\t\t\tnumInRow\u00a0:= 1;<br/>\t\t\t\tnumRows\u00a0:= numRows + 1;<br/>\t\t\telse<br/>\t\t\t\tnumInRow\u00a0:= numInRow +1;<br/>\t\t\tend if;<br/>\t\tend do;<br/>\tend do;<br/>\treturn NULL;<br/>end proc:<br/>\u00a0<br/>floyd(5);<br/>floyd(14);</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>f=Function[n,<br/>\tMost/@(<a class=\"__cf_email__\" data-cfemail=\"f3a1929d9496b3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@@Partition[FindSequenceFunction[{1,2,4,7,11}]/@Range[n+1],2,1])]<br/>TableForm[<a class=\"__cf_email__\" data-cfemail=\"11775124\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,TableAlignments-&gt;Right,TableSpacing-&gt;{1,1}]<br/>TableForm[<a class=\"__cf_email__\" data-cfemail=\"187e58292c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,TableAlignments-&gt;Right,TableSpacing-&gt;{1,1}]<br/>\u00a0</pre>"}, {"lang": "MATLAB / Octave", "loc": 6, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> floyds_triangle<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  s = <span class=\"nu0\">1</span>;<br/>  <span class=\"kw1\">for</span> k = <span class=\"nu0\">1</span>\u00a0: n<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>s\u00a0: s + k - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    s = s + k;<br/>  <span class=\"kw1\">end</span></pre>"}, {"lang": "Modula-2", "loc": 37, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> FloydTriangle;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> WriteInt<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span> buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">9</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%4i\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> n<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span><br/><span class=\"kw1\">END</span> WriteInt;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Print<span class=\"br0\">(</span>r <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span> n<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>limit <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">IF</span> r&lt;<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    n <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>    limit <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">WHILE</span> r<span class=\"sy0\">#</span><span class=\"nu0\">0</span> <span class=\"kw1\">DO</span><br/>        <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> limit <span class=\"kw1\">DO</span><br/>            WriteInt<span class=\"br0\">(</span>n<span class=\"br0\">)</span>;<br/>            <span class=\"kw3\">INC</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">END</span>;<br/>        WriteLn;<br/>\u00a0<br/>        <span class=\"kw3\">DEC</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span>;<br/>        <span class=\"kw3\">INC</span><span class=\"br0\">(</span>limit<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> Print;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>    Print<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>;<br/>    WriteLn;<br/>    Print<span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    ReadChar<br/><span class=\"kw1\">END</span> FloydTriangle.</pre>"}, {"lang": "NetRexx", "loc": 28, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols <span class=\"kw2\">binary</span><br/><span class=\"coMULTI\">/* REXX ***************************************************************<br/>* 12.07.2012 Walter Pachl  - translated from Python<br/>**********************************************************************/</span><br/><span class=\"kw1\">Parse</span> Arg rowcount .<br/><span class=\"kw1\">if</span> rowcount.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> == <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> rowcount = <span class=\"nu0\">1</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'Rows:'</span> rowcount<br/><span class=\"kw1\">say</span><br/>col = <span class=\"nu0\">0</span><br/>len = Rexx <span class=\"st0\">''</span><br/>ll = <span class=\"st0\">''</span>                               <span class=\"co1\">-- last line of triangle</span><br/><span class=\"kw1\">Loop</span> j = rowcount <span class=\"sy0\">*</span> <span class=\"br0\">(</span>rowcount - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> + <span class=\"nu0\">1</span> to rowcount <span class=\"sy0\">*</span> <span class=\"br0\">(</span>rowcount + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>  col = col + <span class=\"nu0\">1</span>                       <span class=\"co1\">-- column number</span><br/>  ll = ll j                           <span class=\"co1\">-- build last line</span><br/>  len<span class=\"br0\">[</span>col<span class=\"br0\">]</span> = j.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span>               <span class=\"co1\">-- remember length of column</span><br/>  <span class=\"kw3\">End</span> j<br/><span class=\"kw1\">Loop</span> i = <span class=\"nu0\">1</span> To rowcount - <span class=\"nu0\">1</span>            <span class=\"co1\">-- now do and output the rest</span><br/>  ol = <span class=\"st0\">''</span><br/>  col = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Loop</span> j = i <span class=\"sy0\">*</span> <span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> + <span class=\"nu0\">1</span> to i <span class=\"sy0\">*</span> <span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"co1\">-- elements of line i</span><br/>    col = col + <span class=\"nu0\">1</span><br/>    ol=ol j.<span class=\"kw6\">right</span><span class=\"br0\">(</span>len<span class=\"br0\">[</span>col<span class=\"br0\">]</span><span class=\"br0\">)</span>           <span class=\"co1\">-- element in proper length</span><br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">Say</span> ol                              <span class=\"co1\">-- output ith line</span><br/>  <span class=\"kw3\">end</span> i<br/><span class=\"kw1\">Say</span> ll                                <span class=\"co1\">-- output last line</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 24, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>proc floyd(rowcount = 5): seq[seq[int]] =<br/>  result = @[@[1]]<br/>  while result.len &lt; rowcount:<br/>    let n = result[result.high][result.high] + 1<br/>    var row = newSeq[int]()<br/>    for i in n .. n + result[result.high].len:<br/>      row.add i<br/>    result.add row<br/>\u00a0<br/>proc pfloyd(rows: seq[seq[int]]) =<br/>  var colspace = newSeq[int]()<br/>  for n in rows[rows.high]: colspace.add(($n).len)<br/>  for row in rows:<br/>    for i, x in row:<br/>      stdout.write align($x, colspace[i]),\" \"<br/>    echo \"\"<br/>\u00a0<br/>echo floyd()<br/>\u00a0<br/>for i in [5, 14]:<br/>  pfloyd(floyd(i))<br/>  echo \"\"</pre>"}, {"lang": "OCaml", "loc": 26, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> <span class=\"br0\">(</span> <span class=\"sy0\">|&gt;</span> <span class=\"br0\">)</span> f g x <span class=\"sy0\">=</span> g <span class=\"br0\">(</span>f x<span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> last <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> x<span class=\"sy0\">::</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> x <span class=\"sy0\">|</span> _<span class=\"sy0\">::</span>tl <span class=\"sy0\">-&gt;</span> last tl <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">raise</span> Not_found<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> list_map2 f l1 l2 <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">match</span> <span class=\"br0\">(</span>l1, l2<span class=\"br0\">)</span> <span class=\"kw1\">with</span><br/>  <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, _<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>_, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"sy0\">|</span> <span class=\"br0\">(</span>x<span class=\"sy0\">::</span>xs, y<span class=\"sy0\">::</span>ys<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>f x y<span class=\"br0\">)</span> <span class=\"sy0\">::</span> list_map2 f xs ys<br/>\u00a0<br/><span class=\"kw1\">let</span> floyd n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux acc cur len i j <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>length acc<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n <span class=\"kw1\">then</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev acc<span class=\"br0\">)</span> <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">if</span> j <span class=\"sy0\">=</span> len<br/>      <span class=\"kw1\">then</span> aux <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev cur<span class=\"br0\">)</span><span class=\"sy0\">::</span>acc<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> len<span class=\"br0\">)</span> i <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">else</span> aux acc <span class=\"br0\">(</span>i<span class=\"sy0\">::</span>cur<span class=\"br0\">)</span> len <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> i<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> j<span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  aux <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">let</span> print_floyd f <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> lens <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALstring_of_int\"><span class=\"kw3\">string_of_int</span></a> <span class=\"sy0\">|&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length<span class=\"br0\">)</span> <span class=\"br0\">(</span>last f<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> row <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"br0\">(</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>concat <span class=\"st0\">\" \"</span> <span class=\"br0\">(</span><br/>        list_map2 <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>sprintf <span class=\"st0\">\"%*d\"</span><span class=\"br0\">)</span> lens row<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span> f<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  print_floyd <span class=\"br0\">(</span>floyd <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_string\"><span class=\"kw3\">int_of_string</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>argv<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "OxygenBasic", "loc": 29, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function Floyd(sys n) as string<br/>sys i,t<br/>for i=1 to n<br/>  t+=i<br/>next<br/>string s=str t<br/>sys le=1+len s<br/>string cr=chr(13,10)<br/>sys lc=len cr<br/>string buf=space(le*t+n*lc)<br/>sys j,o,p=1<br/>t=0<br/>for i=1 to n<br/>  for j=1 to i<br/>    t++<br/>    s=str t<br/>    o=le-len(s)-1 'right justify<br/>    mid buf,p+o,str t<br/>    p+=le<br/>  next<br/>  mid buf,p,cr<br/>  p+=lc<br/>next<br/>return left buf,p-1<br/>end function<br/>\u00a0<br/>putfile \"s.txt\",Floyd(5)+floyd(14)<br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 3, "block": "<pre class=\"parigp highlighted_source\">F<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>fmt<span class=\"sy0\">=</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span><span class=\"st0\">\"%\"</span><span class=\"nu1\">1</span><span class=\"sy0\">+</span>#Str<span class=\"br0\">(</span>n<span class=\"sy0\">*</span><span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"st0\">\"d\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"kw1\">printf</span><span class=\"br0\">(</span>fmt<span class=\"sy0\">,</span>t<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">print</span><span class=\"br0\">)</span><br/>F<span class=\"br0\">(</span><span class=\"nu1\">5</span><span class=\"br0\">)</span><br/>F<span class=\"br0\">(</span><span class=\"nu1\">14</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 55, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> FloydDemo <span class=\"br0\">(</span>input<span class=\"sy1\">,</span> output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> digits<span class=\"br0\">(</span>number<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    digits <span class=\"sy1\">:</span><span class=\"sy3\">=</span> trunc<span class=\"br0\">(</span><span class=\"kw3\">ln</span><span class=\"br0\">(</span>number<span class=\"br0\">)</span> <span class=\"sy3\">/</span> <span class=\"kw3\">ln</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> floyd1 <span class=\"br0\">(</span>numberOfLines<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\">{ variant with repeat .. until loop }</span><br/>  <span class=\"kw1\">var</span><br/>    i<span class=\"sy1\">,</span> j<span class=\"sy1\">,</span> numbersInLine<span class=\"sy1\">,</span> startOfLastlLine<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">begin</span><br/>    startOfLastlLine <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>numberOfLines <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> numberOfLines <span class=\"kw1\">div</span> <span class=\"nu0\">2</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    numbersInLine <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">repeat</span><br/>      <span class=\"kw1\">repeat</span><br/>        <span class=\"kw3\">write</span><span class=\"br0\">(</span>i<span class=\"sy1\">:</span> digits<span class=\"br0\">(</span>startOfLastlLine <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"sy3\">+</span> j<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        inc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\tinc<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">until</span> <span class=\"br0\">(</span>j &gt; numbersInLine<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>      j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>numbersInLine<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">until</span> <span class=\"br0\">(</span>numbersInLine &gt; numberOfLines<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> floyd2 <span class=\"br0\">(</span>numberOfLines<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\">{ Variant with for .. do loop }</span><br/>  <span class=\"kw1\">var</span><br/>    i<span class=\"sy1\">,</span> j<span class=\"sy1\">,</span> numbersInLine<span class=\"sy1\">,</span> startOfLastlLine<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">begin</span><br/>    startOfLastlLine <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>numberOfLines <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> numberOfLines <span class=\"kw1\">div</span> <span class=\"nu0\">2</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> numbersInLine <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> numberOfLines <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> numbersInLine <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">begin</span><br/>        <span class=\"kw3\">write</span><span class=\"br0\">(</span>i<span class=\"sy1\">:</span> digits<span class=\"br0\">(</span>startOfLastlLine <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"sy3\">+</span> j<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        inc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">writeln</span> <span class=\"br0\">(</span><span class=\"st0\">'*** Floyd 5 ***'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  floyd1<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span> <span class=\"br0\">(</span><span class=\"st0\">'*** Floyd 14 ***'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  floyd2<span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 35, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/env perl</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> displayFloydTriangle <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$numRows</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>displaying a $numRows row Floyd's triangle:<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$maxVal</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><span class=\"re0\">$numRows</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$numRows</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># calculate the max value.</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$digit</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$row</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$numRows</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$col</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$output</span> <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$row</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"sy0\">++</span><span class=\"re0\">$digit</span><span class=\"sy0\">;</span><br/>      <span class=\"sy0\">++</span><span class=\"re0\">$col</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">my</span> <span class=\"re0\">$colMaxDigit</span> <span class=\"sy0\">=</span> <span class=\"re0\">$maxVal</span> <span class=\"sy0\">-</span> <span class=\"re0\">$numRows</span> <span class=\"sy0\">+</span> <span class=\"re0\">$col</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$output</span> <span class=\"sy0\">.=</span> <a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a> <span class=\"st0\">\"\u00a0%*d\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$colMaxDigit</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$digit</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$output<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># ==== Main ================================================</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@counts</span><span class=\"sy0\">;</span><br/><span class=\"re0\">@counts</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span><span class=\"sy0\">;</span><br/><span class=\"re0\">@counts</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span><span class=\"br0\">)</span> <span class=\"kw1\">unless</span> <span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$count</span> <span class=\"br0\">(</span><span class=\"re0\">@counts</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  displayFloydTriangle<span class=\"br0\">(</span><span class=\"re0\">$count</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">__END__</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> <span class=\"re0\">@floyd</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..*</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">rotor</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 17, "block": "<pre class=\"text highlighted_source\">procedure Floyds_triangle(integer n)<br/>sequence widths = repeat(0,n)<br/>    integer k = (n * (n-1))/2<br/>    for i=1 to n do<br/>        widths[i] = sprintf(\"%%%dd\",length(sprintf(\"%d\",i+k))+1)<br/>    end for<br/>    k = 1<br/>    for i=1 to n do<br/>        for j=1 to i do<br/>            printf(1,widths[j],k)<br/>            k += 1<br/>        end for<br/>        printf(1,\"\\n\")<br/>    end for<br/>end procedure<br/>Floyds_triangle(5)<br/>Floyds_triangle(14)</pre>"}, {"lang": "PHP", "loc": 19, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"kw2\">&lt;?php</span><br/>floyds_triangle<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>floyds_triangle<span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">function</span> floyds_triangle<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">echo</span> <span class=\"st0\">\"n = \"</span> <span class=\"sy0\">.</span> <span class=\"re0\">$n</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es1\">\\r</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$r</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$cols</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/ceil\"><span class=\"kw3\">ceil</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/log10\"><span class=\"kw3\">log10</span></a><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"re0\">$c</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.php.net/printf\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%\"</span><span class=\"sy0\">.</span><span class=\"re0\">$cols</span><span class=\"sy0\">.</span><span class=\"st0\">\"d \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">++</span><span class=\"re0\">$c</span> <span class=\"sy0\">==</span> <span class=\"re0\">$r</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es1\">\\r</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$r</span><span class=\"sy0\">++;</span><br/>            <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"sy1\">?&gt;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 9, "block": "<pre class=\"text highlighted_source\">(de floyd (N)<br/>   (let LLC (/ (* N (dec N)) 2)<br/>      (for R N<br/>         (for C R<br/>            (prin<br/>               (align<br/>                  (length (+ LLC C))<br/>                  (+ C (/ (* R (dec R)) 2)) ) )<br/>            (if (= C R) (prinl) (space)) ) ) ) )</pre>"}, {"lang": "PL/I", "loc": 17, "block": "<pre class=\"pli highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">fofl</span><span class=\"sy0\">,</span> <span class=\"kw1\">size</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>floyd<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"kw1\">options</span> <span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* Floyd's Triangle. Wiki 12 July 2012 */</span><br/>\u00a0<br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>j<span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> w<span class=\"sy0\">,</span> nr<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'How many rows do you want?'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">get</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span>nr<span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"coMULTI\">/* the number of rows   */</span><br/>   n <span class=\"sy0\">=</span> nr<span class=\"sy0\">*</span><span class=\"br0\">(</span>nr<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* the total number of values */</span><br/>\u00a0<br/>   j<span class=\"sy0\">,</span>k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> m <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> nr <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">put</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">(</span> x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> f<span class=\"br0\">(</span><span class=\"kw1\">length</span><span class=\"br0\">(</span><span class=\"kw1\">trim</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> k <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">do</span><span class=\"sy0\">;</span> k <span class=\"sy0\">=</span> k <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> m <span class=\"sy0\">=</span> m <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">do</span><span class=\"sy0\">;</span> k<span class=\"sy0\">,</span>j <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> m <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> nr <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span><span class=\"sy0\">;</span> <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span> floyd<span class=\"sy0\">;</span></pre>"}, {"lang": "Prolog", "loc": 14, "block": "<pre class=\"prolog highlighted_source\">floyd<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tforall<span class=\"br0\">(</span>between<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> I<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t       <span class=\"br0\">(</span>   forall<span class=\"br0\">(</span>between<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span>I<span class=\"sy4\">,</span> J<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t  <span class=\"br0\">(</span>   Last <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">*</span> <span class=\"br0\">(</span>N<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy3\">+</span>J<span class=\"sy4\">,</span><br/>\t\t\t      V <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> I <span class=\"sy3\">*</span> <span class=\"br0\">(</span>I<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">/</span><span class=\"nu0\">2</span> <span class=\"sy3\">+</span> J<span class=\"sy4\">,</span><br/>\t\t\t      get_column<span class=\"br0\">(</span>Last<span class=\"sy4\">,</span> C<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t      sformat<span class=\"br0\">(</span>AR<span class=\"sy4\">,</span> <span class=\"st_h\">'~~t~~w~~~w| '</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>C<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t      sformat<span class=\"br0\">(</span>AF<span class=\"sy4\">,</span> AR<span class=\"sy4\">,</span> <span class=\"br0\">[</span>V<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t\t\t      writef<span class=\"br0\">(</span>AF<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t       <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>get_column<span class=\"br0\">(</span>Last<span class=\"sy4\">,</span> C<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tname<span class=\"br0\">(</span>Last<span class=\"sy4\">,</span> N1<span class=\"br0\">)</span><span class=\"sy4\">,</span> length<span class=\"br0\">(</span>N1<span class=\"sy4\">,</span>C<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 50, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span>.i sumTo<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <br/>  <span class=\"kw1\">Protected</span> r,i<br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n <br/>    r<span class=\"sy0\">+</span>i<br/>  <span class=\"kw1\">Next</span> <br/>  <span class=\"kw1\">ProcedureReturn</span> r.i<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">; [1]</span><br/><span class=\"co1\">; array rsA(n)... string-lengths of the numbers</span><br/><span class=\"co1\">; in the bottom row</span><br/>\u00a0<br/><span class=\"co1\">; [2]</span><br/><span class=\"co1\">; sumTo(i-1)+1    to     sumTo(i)</span><br/>           <span class=\"co1\">; 11 12 13 14 15</span><br/>  <span class=\"co1\">; here k is the column-index for array rsA(k)</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.s FloydsTriangle<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> r.s,s.s,t.s,i,j,k<br/>  <span class=\"co1\">; [1]</span><br/>  <span class=\"kw1\">Dim</span> rsA<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>  <span class=\"kw1\">For</span> j<span class=\"sy0\">=</span>sumTo<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> sumTo<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    rsA<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"co1\">; [2]</span><br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n <br/>    t.s<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span>:k<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">For</span> j<span class=\"sy0\">=</span>sumTo<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> sumTo<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      k<span class=\"sy0\">+</span><span class=\"nu0\">1</span>:t.s<span class=\"sy0\">+</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span>,rsA<span class=\"br0\">(</span>k<span class=\"br0\">)</span>,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><br/>    <span class=\"kw1\">Next</span> <br/>    r.s<span class=\"sy0\">+</span><span class=\"kw2\">RTrim</span><span class=\"br0\">(</span>t.s<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw2\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw2\">Chr</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span> <br/>  r.s<span class=\"sy0\">=</span><span class=\"kw2\">Left</span><span class=\"br0\">(</span>r.s,<span class=\"kw2\">Len</span><span class=\"br0\">(</span>r.s<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> r.s<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>  n<span class=\"sy0\">=</span><span class=\"nu0\">5</span><br/>  r.s<span class=\"sy0\">=</span>FloydsTriangle<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>r.s<span class=\"br0\">)</span><br/>\u00a0<br/>  n<span class=\"sy0\">=</span><span class=\"nu0\">14</span><br/>  r.s<span class=\"sy0\">=</span>FloydsTriangle<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>r.s<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#crlf$ <span class=\"sy0\">+</span> #crlf$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 42, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> floyd<span class=\"br0\">(</span>rowcount<span class=\"sy0\">=</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>:<br/>\trows <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">while</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>rows<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> rowcount:<br/>\t\tn <span class=\"sy0\">=</span> rows<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> + <span class=\"nu0\">1</span><br/>\t\trows.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> n + <span class=\"kw2\">len</span><span class=\"br0\">(</span>rows<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> rows<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> floyd<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> pfloyd<span class=\"br0\">(</span>rows<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span>:<br/>\tcolspace <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> rows<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> rows:<br/>\t\t<span class=\"kw1\">print</span><span class=\"br0\">(</span> <span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'%*i'</span>\u00a0% space_n <span class=\"kw1\">for</span> space_n <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>colspace<span class=\"sy0\">,</span> row<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> pfloyd<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"nu0\">1</span><br/><span class=\"nu0\">2</span> <span class=\"nu0\">3</span><br/><span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span><br/><span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> pfloyd<span class=\"br0\">(</span>floyd<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/> <span class=\"nu0\">1</span><br/> <span class=\"nu0\">2</span>  <span class=\"nu0\">3</span><br/> <span class=\"nu0\">4</span>  <span class=\"nu0\">5</span>  <span class=\"nu0\">6</span><br/> <span class=\"nu0\">7</span>  <span class=\"nu0\">8</span>  <span class=\"nu0\">9</span> <span class=\"nu0\">10</span><br/><span class=\"nu0\">11</span> <span class=\"nu0\">12</span> <span class=\"nu0\">13</span> <span class=\"nu0\">14</span> <span class=\"nu0\">15</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> pfloyd<span class=\"br0\">(</span>floyd<span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/> <span class=\"nu0\">1</span><br/> <span class=\"nu0\">2</span>  <span class=\"nu0\">3</span><br/> <span class=\"nu0\">4</span>  <span class=\"nu0\">5</span>  <span class=\"nu0\">6</span><br/> <span class=\"nu0\">7</span>  <span class=\"nu0\">8</span>  <span class=\"nu0\">9</span> <span class=\"nu0\">10</span><br/><span class=\"nu0\">11</span> <span class=\"nu0\">12</span> <span class=\"nu0\">13</span> <span class=\"nu0\">14</span> <span class=\"nu0\">15</span><br/><span class=\"nu0\">16</span> <span class=\"nu0\">17</span> <span class=\"nu0\">18</span> <span class=\"nu0\">19</span> <span class=\"nu0\">20</span> <span class=\"nu0\">21</span><br/><span class=\"nu0\">22</span> <span class=\"nu0\">23</span> <span class=\"nu0\">24</span> <span class=\"nu0\">25</span> <span class=\"nu0\">26</span> <span class=\"nu0\">27</span> <span class=\"nu0\">28</span><br/><span class=\"nu0\">29</span> <span class=\"nu0\">30</span> <span class=\"nu0\">31</span> <span class=\"nu0\">32</span> <span class=\"nu0\">33</span> <span class=\"nu0\">34</span> <span class=\"nu0\">35</span> <span class=\"nu0\">36</span><br/><span class=\"nu0\">37</span> <span class=\"nu0\">38</span> <span class=\"nu0\">39</span> <span class=\"nu0\">40</span> <span class=\"nu0\">41</span> <span class=\"nu0\">42</span> <span class=\"nu0\">43</span> <span class=\"nu0\">44</span>  <span class=\"nu0\">45</span><br/><span class=\"nu0\">46</span> <span class=\"nu0\">47</span> <span class=\"nu0\">48</span> <span class=\"nu0\">49</span> <span class=\"nu0\">50</span> <span class=\"nu0\">51</span> <span class=\"nu0\">52</span> <span class=\"nu0\">53</span>  <span class=\"nu0\">54</span>  <span class=\"nu0\">55</span><br/><span class=\"nu0\">56</span> <span class=\"nu0\">57</span> <span class=\"nu0\">58</span> <span class=\"nu0\">59</span> <span class=\"nu0\">60</span> <span class=\"nu0\">61</span> <span class=\"nu0\">62</span> <span class=\"nu0\">63</span>  <span class=\"nu0\">64</span>  <span class=\"nu0\">65</span>  <span class=\"nu0\">66</span><br/><span class=\"nu0\">67</span> <span class=\"nu0\">68</span> <span class=\"nu0\">69</span> <span class=\"nu0\">70</span> <span class=\"nu0\">71</span> <span class=\"nu0\">72</span> <span class=\"nu0\">73</span> <span class=\"nu0\">74</span>  <span class=\"nu0\">75</span>  <span class=\"nu0\">76</span>  <span class=\"nu0\">77</span>  <span class=\"nu0\">78</span><br/><span class=\"nu0\">79</span> <span class=\"nu0\">80</span> <span class=\"nu0\">81</span> <span class=\"nu0\">82</span> <span class=\"nu0\">83</span> <span class=\"nu0\">84</span> <span class=\"nu0\">85</span> <span class=\"nu0\">86</span>  <span class=\"nu0\">87</span>  <span class=\"nu0\">88</span>  <span class=\"nu0\">89</span>  <span class=\"nu0\">90</span>  <span class=\"nu0\">91</span><br/><span class=\"nu0\">92</span> <span class=\"nu0\">93</span> <span class=\"nu0\">94</span> <span class=\"nu0\">95</span> <span class=\"nu0\">96</span> <span class=\"nu0\">97</span> <span class=\"nu0\">98</span> <span class=\"nu0\">99</span> <span class=\"nu0\">100</span> <span class=\"nu0\">101</span> <span class=\"nu0\">102</span> <span class=\"nu0\">103</span> <span class=\"nu0\">104</span> <span class=\"nu0\">105</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "Racket", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math)<br/>\u00a0<br/>(define (tri n)<br/>  (if (zero? n) 0 (triangle-number n)))<br/>\u00a0<br/>(define (floyd n)<br/>  (define (width x) (string-length (~a x)))<br/>  (define (~n x c) (~a x <br/>                       #:width (width (+ (tri (- n 1)) 1 c))<br/>                       #:align 'right #:left-pad-string \" \"))<br/>  (for ([r n])<br/>    (for ([c (+ r 1)]) <br/>      (display (~a (~n (+ (tri r) 1 c) c) \" \")))<br/>    (newline)))<br/>\u00a0<br/>(floyd 5)<br/>(floyd 14)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 24, "block": "<pre class=\"rexx highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* REXX *************************************************************** <br/>* Parse Arg rowcount                                                    <br/>* 12.07.2012 Walter Pachl  - translated from Python                     <br/>**********************************************************************/</span> <br/><span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> rowcount                                                      <br/>col=<span class=\"nu0\">0</span>                               <br/>ll=<span class=\"st0\">''</span>                               <span class=\"coMULTI\">/* last line of triangle         */</span> <br/><span class=\"kw1\">Do</span> j=rowcount<span class=\"sy0\">*</span><span class=\"br0\">(</span>rowcount-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>+<span class=\"nu0\">1</span> <span class=\"kw2\">to</span> rowcount<span class=\"sy0\">*</span><span class=\"br0\">(</span>rowcount+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>               <br/>  col=col+<span class=\"nu0\">1</span>                         <span class=\"coMULTI\">/* column number                 */</span> <br/>  ll=ll j                           <span class=\"coMULTI\">/* build last line               */</span> <br/>  len<span class=\"sy0\">.</span>col=<span class=\"kw6\">length</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span>                 <span class=\"coMULTI\">/* remember length of column     */</span> <br/>  <span class=\"kw3\">End</span>                                                                   <br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> rowcount-<span class=\"nu0\">1</span>                <span class=\"coMULTI\">/* now do and output the rest    */</span> <br/>  ol=<span class=\"st0\">''</span>                                                                 <br/>  col=<span class=\"nu0\">0</span>                                                                 <br/>  <span class=\"kw1\">Do</span> j=i<span class=\"sy0\">*</span><span class=\"br0\">(</span>i-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>+<span class=\"nu0\">1</span> <span class=\"kw2\">to</span> i<span class=\"sy0\">*</span><span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>     <span class=\"coMULTI\">/* elements of line i            */</span> <br/>    col=col+<span class=\"nu0\">1</span>                                                           <br/>    ol=ol <span class=\"kw6\">right</span><span class=\"br0\">(</span>j,len<span class=\"sy0\">.</span>col<span class=\"br0\">)</span>          <span class=\"coMULTI\">/* element in proper length      */</span> <br/>    <span class=\"kw3\">end</span>                                                                 <br/>  <span class=\"kw1\">Say</span> ol                            <span class=\"coMULTI\">/* output ith line               */</span> <br/>  <span class=\"kw3\">end</span>                                                                   <br/><span class=\"kw1\">Say</span> ll                              <span class=\"coMULTI\">/* output last line              */</span> <br/>\u00a0</pre>"}, {"lang": "Ring", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>rows = 10<br/>n = 0<br/>for r = 1 to rows   <br/>    for c = 1 to r  <br/>        n = n + 1<br/>        see string(n) + \" \" <br/>    next <br/>    see nl<br/>next<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 11, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> floyd<span class=\"br0\">(</span>rows<span class=\"br0\">)</span><br/>  max = <span class=\"br0\">(</span>rows <span class=\"sy0\">*</span> <span class=\"br0\">(</span>rows <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>  widths = <span class=\"br0\">(</span><span class=\"br0\">(</span>max <span class=\"sy0\">-</span> rows <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>..<span class=\"me1\">max</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> n.<span class=\"me1\">to_s</span>.<span class=\"me1\">length</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>  n = <span class=\"nu0\">0</span><br/>  rows.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>r<span class=\"sy0\">|</span><br/>    <span class=\"kw3\">puts</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"me1\">r</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> n <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span>; <span class=\"st0\">\"%#{widths[i]}d\"</span> <span class=\"sy0\">%</span> n<span class=\"br0\">}</span>.<span class=\"me1\">join</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>floyd<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>floyd<span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span></pre>"}, {"lang": "Run BASIC", "loc": 14, "block": "<pre class=\"text highlighted_source\">input \"Number of rows: \"; rows<br/>dim colSize(rows)   <br/>for col=1 to rows<br/>    colSize(col) = len(str$(col + rows * (rows-1)/2))<br/>next<br/>\u00a0<br/>thisNum = 1<br/>for r = 1 to rows<br/>    for col = 1 to r<br/>        print right$( \"  \"+str$(thisNum), colSize(col)); \" \";<br/>        thisNum = thisNum + 1<br/>    next<br/>    print<br/>next</pre>"}, {"lang": "Scala", "loc": 20, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> floydstriangle<span class=\"br0\">(</span> n<span class=\"sy0\">:</span>Int <span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> to n<span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> t <span class=\"sy0\">=</span> s map <span class=\"br0\">{</span>i <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>s take<span class=\"br0\">(</span>i-<span class=\"nu0\">1</span><span class=\"br0\">)</span> sum<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"br0\">(</span>s zip t<span class=\"br0\">)</span> foreach <span class=\"br0\">{</span> n <span class=\"sy0\">=&gt;</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> m <span class=\"sy0\">=</span> n.<span class=\"sy0\">_</span>2<span class=\"sy0\">;</span> <br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span> i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until n.<span class=\"sy0\">_</span>1 <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> w <span class=\"sy0\">=</span> <span class=\"br0\">(</span>t.<span class=\"me1\">last</span> + i<span class=\"br0\">)</span>.<span class=\"me1\">toString</span>.<span class=\"me1\">length</span> + <span class=\"nu0\">1</span>  <span class=\"co1\">// Column width from last row</span><br/>      print<span class=\"br0\">(</span><span class=\"st0\">\"           \"</span> + m takeRight w <span class=\"br0\">)</span><br/>      m+<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Test</span><br/>floydstriangle<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>floydstriangle<span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 27, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: writeFloyd (in integer: rows) is func<br/>  local<br/>    var integer: number is 1;<br/>    var integer: numBeforeLastLine is 0;<br/>    var integer: line is 0;<br/>    var integer: column is 0;<br/>  begin<br/>    numBeforeLastLine\u00a0:= rows * pred(rows) div 2;<br/>    for line range 1 to rows do<br/>      for column range 1 to line do<br/>        if column &lt;&gt; 1 then<br/>          write(\" \");<br/>        end if;<br/>        write(number lpad length(str(numBeforeLastLine + column)));<br/>        incr(number);<br/>      end for;<br/>      writeln;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeFloyd(5);<br/>    writeFloyd(14);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">func floyd<span class=\"br0\">(</span>rows, n=<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var max = <span class=\"kw4\">Math</span>.<span class=\"me1\">range_sum</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, rows<span class=\"br0\">)</span><br/>    var widths = <span class=\"br0\">(</span>max<span class=\"sy0\">-</span>rows .. <span class=\"me1\">max</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> map<span class=\"br0\">{</span>.<span class=\"sy0\">+</span>n<span class=\"sy0\">-&gt;</span>to_s.<span class=\"me1\">len</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> <span class=\"sy0\">|</span>r<span class=\"sy0\">|</span><br/>        say <span class=\"sy0\">%</span><span class=\"st0\">'#{1..r -&gt; map{|i| \"%#{widths[i-1]}d\"\u00a0% n++}.join(\" \")}'</span><br/>    <span class=\"br0\">}</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span>..<span class=\"me1\">rows</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>floyd<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>     <span class=\"co1\"># or: floyd(5, 88)</span><br/>floyd<span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span>    <span class=\"co1\"># or: floyd(14, 900)</span></pre>"}, {"lang": "SPL", "loc": 15, "block": "<pre class=\"text highlighted_source\">floyd(5)<br/>floyd(14)<br/>\u00a0<br/>floyd(n)=<br/>  k = 0<br/>  &gt; r, 1..n<br/>    s = \"\"<br/>    &gt; j, 1..r<br/>      k += 1<br/>      f = \"&gt;\"+#.upper(#.log10((n-1)*n/2+j+1)+1)+\"&gt;\"<br/>      s += #.str(k,f)<br/>    &lt;<br/>    #.output(s)<br/>  &lt;<br/>.</pre>"}, {"lang": "Tcl", "loc": 19, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> floydTriangle n <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Compute the column widths</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$n</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span>/<span class=\"nu0\">2</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$n</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span>/<span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> w <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Print the triangle</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> j <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> p -<span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> k <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$k</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$j</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> k<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">puts</span> -nonewline <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%*d \"</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$w</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> p<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> i<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Demonstration</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"Floyd 5:\"</span><br/>floydTriangle <span class=\"nu0\">5</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"Floyd 14:\"</span><br/>floydTriangle <span class=\"nu0\">14</span></pre>"}, {"lang": "TXR", "loc": 19, "block": "<pre class=\"text highlighted_source\">(defun flotri (n)<br/>  (let* ((last (trunc (* n (+ n 1)) 2))<br/>         (colw (mapcar [chain tostring length]<br/>                       (range (- last n -1) last)))<br/>         (x 0))<br/>    (each ((r (range* 0 n)))<br/>      (each ((c (range 0 r)))<br/>        (format t \" ~*a\" [colw c] (inc x)))<br/>      (put-line))))<br/>\u00a0<br/>(defun usage (msg)<br/>  (put-line `error: @msg`)<br/>  (put-line `usage:\\<a class=\"__cf_email__\" data-cfemail=\"6b052b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(ldiff *full-args* *args*) &lt;smallish-positive-integer&gt;`)<br/>  (exit 1))<br/>\u00a0<br/>(tree-case *args*<br/>  ((num blah . etc) (usage \"too many arguments\"))<br/>  ((num) (flotri (int-str num)))<br/>  (() (usage \"need an argument\")))</pre>"}, {"lang": "VBA", "loc": 24, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/><span class=\"kw4\">Dim</span> o <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw2\">Sub</span> floyd(L <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>)<br/>    <span class=\"kw4\">Dim</span> r, c, m, n <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>    n = L * (L - 1) / 2<br/>    m = 1<br/>    <span class=\"kw3\">For</span> r = 1 <span class=\"kw3\">To</span> L<br/>        o = o &amp; vbCrLf<br/>        <span class=\"kw3\">For</span> c = 1 <span class=\"kw3\">To</span> r<br/>            o = o &amp; Space(Len(CStr(n + c)) - Len(CStr(m))) &amp; m &amp; <span class=\"st0\">\" \"</span><br/>            m = m + 1<br/>        <span class=\"kw3\">Next</span><br/>    <span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/><span class=\"kw2\">Sub</span> triangle()<br/>    o = <span class=\"st0\">\"5 lines\"</span><br/>    <span class=\"kw2\">Call</span> floyd(5)<br/>    o = o &amp; vbCrLf &amp; <span class=\"st0\">\"14 lines\"</span><br/>    <span class=\"kw2\">Call</span> floyd(14)<br/>    <span class=\"kw3\">With</span> Selection<br/>        .Font.Name = <span class=\"st0\">\"Courier New\"</span><br/>        .TypeText Text:=o<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">With</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span></pre>"}, {"lang": "VBScript", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>' Read the number of rows to use..<br/>intRows = WScript.StdIn.ReadLine<br/>\u00a0<br/>' Get the first number of the final row so we can calculate widths...<br/>intLastRowStart = (intRows ^ 2 - intRows) \\ 2 + 1<br/>\u00a0<br/>For i = 1 To intRows<br/>\tintLastRow = intLastRowStart<br/>\tFor j = 1 To i<br/>\t\tk = k + 1<br/>\t\tWScript.StdOut.Write Space(Len(intLastRow) - Len(k)) &amp; k &amp; \" \"<br/>\t\tintLastRow = intLastRow + 1<br/>\tNext<br/>\tWScript.StdOut.WriteLine \"\"<br/>Next<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 24, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;  \\include 'code' declarations<br/>\u00a0<br/>func IntLen(N);         \\Return number of digits in a positive integer<br/>int     N;<br/>int     I;<br/>for I:= 1 to 20 do<br/>    [N:= N/10;  if N=0 then return I];<br/>\u00a0<br/>proc Floyd(N);          \\Display Floyd's triangle<br/>int N;<br/>int M, Row, Col;<br/>real F;<br/>[M:= (N-1+1)*(N-1)/2;   \\last Floyd number on second to last row<br/>F:= 1.0;                \\Floyd number counter<br/>for Row:= 1 to N do<br/>    [for Col:= 1 to Row do<br/>        [Format(IntLen(M+Col)+1, 0);  RlOut(0, F);  F:= F+1.0];<br/>    CrLf(0);<br/>    ];<br/>]; \\Floyd<br/>\u00a0<br/>[Floyd(5);<br/>Floyd(14);<br/>]</pre>"}, {"lang": "zkl", "loc": 11, "block": "<pre class=\"text highlighted_source\">fcn lcNum(row){(row*(row+1)/2+1)}   // lazy caterer's sequence<br/>fcn floydsTriangle(rows){<br/>   fmt:=[lcNum(rows-1)..lcNum(rows)-1].pump(String,fcn(n){<br/>      String(\"%\",n.toString().len(),\"d \")}); // eg \"%2d\u00a0%2d\u00a0%3d\u00a0%3d\"<br/>   foreach row in (rows){<br/>     ns:=[lcNum(row)..lcNum(row+1)-1].walk(); // eg L(4.5,6)<br/>     fmt[0,ns.len()*4].fmt(ns.xplode()).println(); // eg \"%2d\u00a0%2d\u00a0%2d \".fmt(4,5,6)<br/>   }<br/>}<br/>floydsTriangle(5); println();<br/>floydsTriangle(14);</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 9, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> n=<span class=\"nu0\">10</span>: <span class=\"kw1\">LET</span> j=<span class=\"nu0\">1</span>: <span class=\"kw1\">LET</span> col=<span class=\"nu0\">1</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">FOR</span> r=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n<br/><span class=\"nu0\">30</span> <span class=\"kw1\">FOR</span> j=j <span class=\"kw1\">TO</span> j+r-<span class=\"nu0\">1</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">PRINT</span> TAB <span class=\"br0\">(</span>col<span class=\"br0\">)</span>;j;<br/><span class=\"nu0\">50</span> <span class=\"kw1\">LET</span> col=col+<span class=\"nu0\">3</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">NEXT</span> j<br/><span class=\"nu0\">70</span> <span class=\"kw1\">PRINT</span> <br/><span class=\"nu0\">80</span> <span class=\"kw1\">LET</span> col=<span class=\"nu0\">1</span><br/><span class=\"nu0\">90</span> <span class=\"kw1\">NEXT</span> r</pre>"}]}