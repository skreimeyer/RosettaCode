{"task": "Infinity", "blocks": [{"lang": "ActionScript", "loc": 2, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw3\">trace</span><span class=\"br0\">(</span><span class=\"nu0\">5</span> <span class=\"sy0\">/</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>; <span class=\"co1\">// outputs \"Infinity\"</span><br/><span class=\"kw3\">trace</span><span class=\"br0\">(</span><span class=\"kw3\">isFinite</span><span class=\"br0\">(</span><span class=\"nu0\">5</span> <span class=\"sy0\">/</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">// outputs \"false\"</span></pre>"}, {"lang": "Ada", "loc": 24, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Infinities <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">function</span> Sup <span class=\"kw1\">return</span> Float <span class=\"kw1\">is</span> <span class=\"co1\">-- Only for predefined types</span><br/>      Result\u00a0: Float\u00a0:= Float'Last;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> Float'Machine_Overflows <span class=\"kw1\">then</span><br/>         Result\u00a0:= Float'Succ <span class=\"br0\">(</span>Result<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> Sup;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Inf <span class=\"kw1\">return</span> Float <span class=\"kw1\">is</span> <span class=\"co1\">-- Only for predefined types</span><br/>      Result\u00a0: Float\u00a0:= Float'First;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> Float'Machine_Overflows <span class=\"kw1\">then</span><br/>         Result\u00a0:= Float'Pred <span class=\"br0\">(</span>Result<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> Inf;<br/><span class=\"kw1\">begin</span><br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Supremum\"</span> &amp; Float'Image <span class=\"br0\">(</span>Sup<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Infimum \"</span> &amp; Float'Image <span class=\"br0\">(</span>Inf<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Infinities;</pre>"}, {"lang": "ALGOL 68", "loc": 7, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"max int: \"</span>gl$<span class=\"sy1\">,</span><span class=\"kw20\">max int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"long max int: \"</span>gl$<span class=\"sy1\">,</span><span class=\"kw20\">long max int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"long long max int: \"</span>gl$<span class=\"sy1\">,</span><span class=\"kw20\">long long max int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"max real: \"</span>gl$<span class=\"sy1\">,</span><span class=\"kw20\">max real</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"long max real: \"</span>gl$<span class=\"sy1\">,</span><span class=\"kw20\">long max real</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"long long max real: \"</span>gl$<span class=\"sy1\">,</span><span class=\"kw20\">long long max real</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"error char: \"</span>gl$<span class=\"sy1\">,</span><span class=\"kw20\">error char</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Argile", "loc": 3, "block": "<pre class=\"text highlighted_source\">use std<br/>printf \"%f\\n\" atof \"infinity\" (: this prints \"inf\"\u00a0:)<br/>#extern\u00a0:atof&lt;text&gt;: -&gt; real</pre>"}, {"lang": "AWK", "loc": 6, "block": "<pre class=\"awk highlighted_source\">  <span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span> <br/>    k=<span class=\"nu0\">1</span>; <br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy3\">^</span><span class=\"br0\">(</span>k<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy3\">^</span>k<span class=\"br0\">)</span> k<span class=\"sy3\">++</span>; <br/>    INF = <span class=\"nu0\">2</span><span class=\"sy3\">^</span>k; <br/>    <span class=\"kw5\">print</span> INF; <br/>  <span class=\"br0\">}</span></pre>"}, {"lang": "BBC BASIC", "loc": 19, "block": "<pre class=\"text highlighted_source\">      *FLOAT 64<br/>      PRINT FNinfinity<br/>      END<br/>\u00a0<br/>      DEF FNinfinity<br/>      LOCAL supported%, maxpos, prev, inct<br/>      supported% = TRUE<br/>      ON ERROR LOCAL supported% = FALSE<br/>      IF supported% THEN = 1/0<br/>      RESTORE ERROR<br/>      inct = 1E10<br/>      REPEAT<br/>        prev = maxpos<br/>        inct *= 2<br/>        ON ERROR LOCAL inct /= 2<br/>        maxpos += inct<br/>        RESTORE ERROR<br/>      UNTIL maxpos = prev<br/>      = maxpos</pre>"}, {"lang": "C", "loc": 11, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;math.h&gt;\t/* HUGE_VAL */</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;\t/* printf() */</span><br/>\u00a0<br/><span class=\"kw4\">double</span> inf<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> HUGE_VAL<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%g<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> inf<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 14, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> PositiveInfinity<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">double</span><span class=\"sy0\">.</span><span class=\"me1\">PositiveInfinity</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>PositiveInfinity<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 9, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;limits&gt;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> inf<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">numeric_limits</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">has_infinity</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">numeric_limits</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">infinity</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">numeric_limits</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">max</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 1, "block": "<pre class=\"coffeescript highlighted_source\"><span class=\"kw4\">Infinity</span></pre>"}, {"lang": "CoffeeScript", "loc": 1, "block": "<pre class=\"coffeescript highlighted_source\"><span class=\"kw4\">Infinity</span></pre>"}, {"lang": "Common Lisp", "loc": 13, "block": "<pre class=\"lisp highlighted_source\"><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>apropos <span class=\"st0\">\"MOST-POSITIVE\"</span> <span class=\"sy0\">:</span><span class=\"me1\">cl</span><span class=\"br0\">)</span><br/>MOST-POSITIVE-LONG-<span class=\"kw1\">FLOAT</span><span class=\"sy0\">,</span> <span class=\"kw1\">value</span><span class=\"sy0\">:</span> 1<span class=\"sy0\">.</span>7976931348623158D308<br/>MOST-POSITIVE-SHORT-<span class=\"kw1\">FLOAT</span><span class=\"sy0\">,</span> <span class=\"kw1\">value</span><span class=\"sy0\">:</span> 3<span class=\"sy0\">.</span>4028172S38<br/>MOST-POSITIVE-SINGLE-<span class=\"kw1\">FLOAT</span><span class=\"sy0\">,</span> <span class=\"kw1\">value</span><span class=\"sy0\">:</span> 3<span class=\"sy0\">.</span>4028235E38<br/>MOST-POSITIVE-DOUBLE-<span class=\"kw1\">FLOAT</span><span class=\"sy0\">,</span> <span class=\"kw1\">value</span><span class=\"sy0\">:</span> 1<span class=\"sy0\">.</span>7976931348623158D308<br/>MOST-POSITIVE-FIXNUM<span class=\"sy0\">,</span> <span class=\"kw1\">value</span><span class=\"sy0\">:</span> <span class=\"nu0\">536870911</span><br/>\u00a0<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>apropos <span class=\"st0\">\"MOST-NEGATIVE\"</span> <span class=\"sy0\">:</span><span class=\"me1\">cl</span><span class=\"br0\">)</span><br/>MOST-NEGATIVE-SINGLE-<span class=\"kw1\">FLOAT</span><span class=\"sy0\">,</span> <span class=\"kw1\">value</span><span class=\"sy0\">:</span> -3<span class=\"sy0\">.</span>4028235E38<br/>MOST-NEGATIVE-LONG-<span class=\"kw1\">FLOAT</span><span class=\"sy0\">,</span> <span class=\"kw1\">value</span><span class=\"sy0\">:</span> -1<span class=\"sy0\">.</span>7976931348623158D308<br/>MOST-NEGATIVE-SHORT-<span class=\"kw1\">FLOAT</span><span class=\"sy0\">,</span> <span class=\"kw1\">value</span><span class=\"sy0\">:</span> -3<span class=\"sy0\">.</span>4028172S38<br/>MOST-NEGATIVE-DOUBLE-<span class=\"kw1\">FLOAT</span><span class=\"sy0\">,</span> <span class=\"kw1\">value</span><span class=\"sy0\">:</span> -1<span class=\"sy0\">.</span>7976931348623158D308<br/>MOST-NEGATIVE-FIXNUM<span class=\"sy0\">,</span> <span class=\"kw1\">value</span><span class=\"sy0\">:</span> -<span class=\"nu0\">536870912</span></pre>"}, {"lang": "Component Pascal", "loc": 13, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> Infinity;<br/><span class=\"kw1\">IMPORT</span> StdLog;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Do<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\tx<span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tx <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"nu0\">0</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"x:&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Real</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> Do;<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "D", "loc": 5, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">auto</span> inf<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"nu16\">1.5</span><span class=\"br0\">)</span>.<span class=\"me1\">infinity</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 2, "block": "<pre class=\"delphi highlighted_source\">  Infinity    <span class=\"sy3\">=</span>  <span class=\"nu0\">1.0</span> <span class=\"sy3\">/</span> <span class=\"nu0\">0.0</span><span class=\"sy1\">;</span><br/>  NegInfinity <span class=\"sy3\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1.0</span> <span class=\"sy3\">/</span> <span class=\"nu0\">0.0</span><span class=\"sy1\">;</span></pre>"}, {"lang": "E", "loc": 3, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> infinityTask<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    return <a href=\"http://wiki.erights.org/wiki/Infinity\"><span class=\"kw6\">Infinity</span></a> <span class=\"co1\"># predefined variable holding positive infinity</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Eiffel", "loc": 20, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/><span class=\"kw1\">inherit</span><br/>\t<a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+arguments&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARGUMENTS</span></a><br/><span class=\"kw2\">create</span><br/>\tmake<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span> <span class=\"co1\">-- Initialization</span><br/>\tnumber<span class=\"sy0\">:</span>REAL_64<br/>\tmake<br/>\t\t\t<span class=\"co1\">-- Run application.</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tnumber <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><span class=\"sy0\">^</span><span class=\"nu0\">2000</span><br/>\t\t\tprint<span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>\t\t\tprint<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\tprint<span class=\"br0\">(</span>number.<span class=\"me1\">is_positive_infinity</span><span class=\"br0\">)</span><br/>\t\t\tprint<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM INFINITY<br/>\u00a0<br/>EXCEPTION<br/>    PRINT(\"INFINITY\")<br/>    ESCI%=TRUE<br/>END EXCEPTION<br/>\u00a0<br/>BEGIN<br/>    ESCI%=FALSE<br/>    K=1<br/>    WHILE 2^K&gt;0 DO<br/>       EXIT IF ESCI%<br/>       K+=1<br/>    END WHILE<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM INFINITY<br/>\u00a0<br/>EXCEPTION<br/>    PRINT(\"INFINITY\")<br/>    ESCI%=TRUE<br/>END EXCEPTION<br/>\u00a0<br/>BEGIN<br/>    ESCI%=FALSE<br/>    K=1<br/>    WHILE 2^K&gt;0 DO<br/>       EXIT IF ESCI%<br/>       K+=1<br/>    END WHILE<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 3, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">constant</span> infinity <span class=\"sy1\">=</span> 1E400<br/>\u00a0<br/><span class=\"sy2\">?</span> infinity <span class=\"co1\">-- outputs \"inf\"</span></pre>"}, {"lang": "F#", "loc": 3, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/>printfn <span class=\"st0\">\"%f\"</span> <span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"sy0\">/</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre class=\"text highlighted_source\">1/0.</pre>"}, {"lang": "Fantom", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Main<br/>{<br/>  static Float getInfinity () { Float.posInf }<br/>  public static Void main () { echo (getInfinity ()) }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 7, "block": "<pre class=\"text highlighted_source\">: inf ( -- f ) 1e 0e f/\u00a0;<br/>inf f.    \\ implementation specific. GNU Forth will output \"inf\"<br/>\u00a0<br/>: inf? ( f --\u00a0? ) s\" MAX-FLOAT\" environment? drop f&gt;\u00a0;<br/>\\ IEEE infinity is the only value for which this will return true<br/>\u00a0<br/>: has-inf ( --\u00a0? ) ['] inf catch if false else inf? then\u00a0;</pre>"}, {"lang": "Fortran", "loc": 18, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> to_f_the_ineffable<br/>   <span class=\"kw3\">use</span>, <span class=\"kw3\">intrinsic</span> <span class=\"sy0\">::</span> <span class=\"me2\">ieee_arithmetic</span><br/>   <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>   <span class=\"kw3\">real</span> <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">y</span>, x <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">30</span>, ieee_value<span class=\"br0\">(</span>y,ieee_positive_inf<span class=\"br0\">)</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ieee_support_datatype<span class=\"br0\">(</span>x<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ieee_is_finite<span class=\"br0\">(</span>x<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            print <span class=\"sy0\">*</span>, <span class=\"st0\">'x('</span>,i,<span class=\"st0\">') is finite'</span><br/>         <span class=\"kw1\">else</span><br/>            print <span class=\"sy0\">*</span>, <span class=\"st0\">'x('</span>,i,<span class=\"st0\">') is infinite'</span><br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>      <span class=\"kw1\">else</span><br/>         print <span class=\"sy0\">*</span>, <span class=\"st0\">'x('</span>,i,<span class=\"st0\">') is not in an IEEE-supported format'</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> to_f_the_ineffable</pre>"}, {"lang": "FreeBASIC", "loc": 9, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co2\">#Include \"crt/math.bi\"</span><br/><span class=\"co2\">#Print Typeof(1.5) ' Prints DOUBLE at compile time</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> d <span class=\"kw1\">As</span> Typeof<span class=\"br0\">(</span><span class=\"nu0\">1.5</span><span class=\"br0\">)</span> = INFINITY<br/><span class=\"kw1\">Print</span> d; <span class=\"st0\">\" (String representation of Positive Infinity)\"</span><br/><span class=\"kw1\">Sleep</span><br/>\u00a0</pre>"}, {"lang": "GAP", "loc": 9, "block": "<pre class=\"text highlighted_source\"># Floating point infinity<br/>inf\u00a0:= FLOAT_INT(1) / FLOAT_INT(0);<br/>\u00a0<br/>IS_FLOAT(inf);<br/>#true;<br/>\u00a0<br/># GAP has also a formal ''infinity'' value<br/>infinity in Cyclotomics;<br/># true</pre>"}, {"lang": "Go", "loc": 19, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// function called for by task</span><br/><span class=\"kw4\">func</span> posInf<span class=\"sy1\">()</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> math<span class=\"sy3\">.</span>Inf<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"co1\">// argument specifies positive infinity</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    x <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">5</span> <span class=\"co1\">// type of x determined by literal</span><br/>    <span class=\"co1\">// that this compiles demonstrates that PosInf returns same type as x,</span><br/>    <span class=\"co1\">// the type specified by the task.</span><br/>    x <span class=\"sy2\">=</span> posInf<span class=\"sy1\">()</span>                     <span class=\"co1\">// test function</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>IsInf<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">))</span> <span class=\"co1\">// demonstrate result</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> biggest <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=Double&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Double</span></a>.<span class=\"me1\">POSITIVE_INFINITY</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 8, "block": "<pre class=\"haskell highlighted_source\">maxRealFloat <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:RealFloat\"><span class=\"kw4\">RealFloat</span></a> a <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> a<br/>maxRealFloat x <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:encodeFloat\"><span class=\"kw3\">encodeFloat</span></a> b <span class=\"br0\">(</span>e<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:asTypeOf\"><span class=\"kw3\">asTypeOf</span></a>` x <span class=\"kw1\">where</span><br/>  b     <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:floatRadix\"><span class=\"kw3\">floatRadix</span></a> x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">_,</span>e<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:floatRange\"><span class=\"kw3\">floatRange</span></a> x<br/>\u00a0<br/>infinity <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:RealFloat\"><span class=\"kw4\">RealFloat</span></a> a <span class=\"sy0\">=&gt;</span> a<br/>infinity <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:isInfinite\"><span class=\"kw3\">isInfinite</span></a> inf <span class=\"kw1\">then</span> inf <span class=\"kw1\">else</span> maxRealFloat <span class=\"nu0\">1.0</span> <span class=\"kw1\">where</span><br/>  inf <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">0</span></pre>"}, {"lang": "Icon and Unicon", "loc": 2, "block": "<pre class=\"idl highlighted_source\">print, <span class=\"sy0\">!</span>Values.f_infinity             <span class=\"sy0\">;;</span> for normal floats or<br/>print, <span class=\"sy0\">!</span>Values.D_infinity             <span class=\"sy0\">;;</span> for doubles</pre>"}, {"lang": "IDL", "loc": 2, "block": "<pre class=\"idl highlighted_source\">print, <span class=\"sy0\">!</span>Values.f_infinity             <span class=\"sy0\">;;</span> for normal floats or<br/>print, <span class=\"sy0\">!</span>Values.D_infinity             <span class=\"sy0\">;;</span> for doubles</pre>"}, {"lang": "Io", "loc": 1, "block": "<pre class=\"io highlighted_source\">inf\u00a0:= <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">0</span></pre>"}, {"lang": "J", "loc": 8, "block": "<pre class=\"j highlighted_source\">\u00a0<br/>   <span class=\"nu0\">_</span> * <span class=\"nu0\">5</span> <span class=\"co1\">NB. multiplying infinity to 5 results in infinity</span><br/><span class=\"nu0\">_</span><br/>   <span class=\"nu0\">5</span>\u00a0% <span class=\"nu0\">_</span> <span class=\"co1\">NB. dividing 5 by infinity results in 0</span><br/><span class=\"nu0\">0</span><br/>   <span class=\"nu0\">5</span>\u00a0% <span class=\"nu0\">0</span> <span class=\"co1\">NB. dividing 5 by 0 results in infinity</span><br/><span class=\"nu0\">_</span><br/>\u00a0</pre>"}, {"lang": "Java", "loc": 2, "block": "<pre class=\"java highlighted_source\"><span class=\"kw4\">double</span> infinity <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>.<span class=\"me1\">POSITIVE_INFINITY</span><span class=\"sy0\">;</span> <span class=\"co1\">//defined as 1.0/0.0</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>.<span class=\"me1\">isInfinite</span><span class=\"br0\">(</span>infinity<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//true</span></pre>"}, {"lang": "JavaScript", "loc": 1, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw2\">Infinity</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">def infinite: 1e1000;</pre>"}, {"lang": "Julia", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>infinity() = Inf<br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 7, "block": "<pre class=\"text highlighted_source\">x = (1-power(2, -53)) * power(2, 1023) * 2<br/>put ilk(x), x<br/>-- #float 1.79769313486232e308<br/>\u00a0<br/>x = (1-power(2, -53)) * power(2, 1023) * 3<br/>put ilk(x), x, -x<br/>-- #float INF -INF</pre>"}, {"lang": "Lua", "loc": 5, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> infinity<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">0</span> <span class=\"co1\">--lua uses unboxed C floats for all numbers</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "K", "loc": 49, "block": "<pre class=\"text highlighted_source\">   / Integer infinities<br/>   / 0I is just 2147483647<br/>   / -0I is just -2147483647<br/>   / -2147483648 is a special \"null integer\"(NaN) 0N<br/>   0I*0I<br/>1<br/>   0I-0I<br/>0<br/>   0I+1<br/>0N<br/>   0I+2<br/>-0I<br/>   0I+3 / -0I+1<br/>-2147483646<br/>   0I-1<br/>2147483646<br/>   0I%0I<br/>1<br/>   0I^2<br/>4.611686e+18<br/>   0I^0I<br/>0i<br/>   0I^-0I<br/>0.0<br/>   1%0<br/>0I<br/>   0%0<br/>0<br/>   0i^2<br/>0i<br/>   0i^0i<br/>0i<br/>\u00a0<br/>   / Floating point infinities in K are something like<br/>   / IEEE 754 values<br/>   / Also there is floating point NaN -- 0n<br/>   0i+1<br/>0i<br/>   0i*0i<br/>0i<br/>   0i-0i<br/>0n<br/>   0i%0i<br/>0n<br/>   0i%0n<br/>0n<br/>   / but<br/>   0.0%0.0<br/>0.0</pre>"}, {"lang": "Kotlin", "loc": 11, "block": "<pre class=\"scala highlighted_source\">fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> Double.<span class=\"me1\">POSITIVE_INFINITY</span> <span class=\"co1\">// +\u221e</span><br/>    println<span class=\"br0\">(</span>p.<span class=\"me1\">isInfinite</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// true</span><br/>    println<span class=\"br0\">(</span>p.<span class=\"me1\">isFinite</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// false</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"${p &lt; 0} ${p &gt; 0}\"</span><span class=\"br0\">)</span>  <span class=\"co1\">// false true</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> Double.<span class=\"me1\">NEGATIVE_INFINITY</span> <span class=\"co1\">// -\u221e</span><br/>    println<span class=\"br0\">(</span>n.<span class=\"me1\">isInfinite</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// true</span><br/>    println<span class=\"br0\">(</span>n.<span class=\"me1\">isFinite</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// false</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"${n &lt; 0} ${n &gt; 0}\"</span><span class=\"br0\">)</span>  <span class=\"co1\">// true false</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 3, "block": "<pre class=\"text highlighted_source\">infinity<br/>'&lt;br /&gt;'<br/>infinity -&gt; type</pre>"}, {"lang": "Maple", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt; proc() Float(infinity) end();<br/>                            Float(infinity)<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 4, "block": "<pre class=\"text highlighted_source\">Sum[1/n^2,{n,Infinity}]<br/>1/Infinity<br/>Integrate[Exp[-x^2], {x, -Infinity, Infinity}]<br/>10^100 &lt; Infinity</pre>"}, {"lang": "MATLAB / Octave", "loc": 3, "block": "<pre class=\"matlab highlighted_source\">a = +<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/inf.html\"><span class=\"kw2\">Inf</span></a>;<br/>isinf<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Maxima", "loc": 14, "block": "<pre class=\"text highlighted_source\">/* Maxima has inf (positive infinity) and minf (negative infinity) */<br/>\u00a0<br/>declare(x, real)$<br/>\u00a0<br/>is(x &lt; inf);<br/>/* true */<br/>\u00a0<br/>is(x &gt; minf);<br/>/* true */<br/>\u00a0<br/>/* However, it is an error to try to divide by zero, even with floating-point numbers */<br/>1.0/0.0;<br/>/* expt: undefined: 0 to a negative exponent.<br/>   -- an error. To debug this try: debugmode(true); */</pre>"}, {"lang": "Metafont", "loc": 1, "block": "<pre class=\"text highlighted_source\">infinity\u00a0:= 4095.99998;</pre>"}, {"lang": "Modula-2", "loc": 8, "block": "<pre class=\"text highlighted_source\">MODULE inf;<br/>\u00a0<br/>IMPORT  InOut;<br/>\u00a0<br/>BEGIN<br/>  InOut.WriteReal (1.0 / 0.0, 12, 12);<br/>  InOut.WriteLn<br/>END inf.</pre>"}, {"lang": "Modula-3", "loc": 8, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> Inf <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO<span class=\"sy0\">,</span> IEEESpecial;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  IO.<span class=\"me1\">PutReal</span><span class=\"br0\">(</span>IEEESpecial.<span class=\"me1\">RealPosInf</span><span class=\"br0\">)</span>;<br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> Inf.</pre>"}, {"lang": "Nemerle", "loc": 4, "block": "<pre class=\"text highlighted_source\">def posinf = double.PositiveInfinity;<br/>def a = IsInfinity(posinf);         // a = true<br/>def b = IsNegativeInfinity(posinf); // b = false<br/>def c = IsPositiveInfinity(posinf); // c = true</pre>"}, {"lang": "Nim", "loc": 1, "block": "<pre class=\"text highlighted_source\">Inf</pre>"}, {"lang": "OCaml", "loc": 1, "block": "<pre class=\"ocaml highlighted_source\"><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinfinity\"><span class=\"kw3\">infinity</span></a></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">10 1000.0 powf dup println dup neg println 1 swap / println</pre>"}, {"lang": "Ol", "loc": 1, "block": "<pre>+inf.0\u00a0; positive infinity\n-inf.0\u00a0; negative infinity\n</pre>"}, {"lang": "OpenEdge/Progress", "loc": 5, "block": "<pre class=\"progress highlighted_source\"><span class=\"kw1\">MESSAGE</span><br/>   <span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> <span class=\"nu0\">0.0</span> <span class=\"kw1\">SKIP</span><br/>   <span class=\"sy0\">-</span><span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> <span class=\"nu0\">0.0</span> <span class=\"kw1\">SKIP</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span> <span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> <span class=\"nu0\">0.0</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"sy0\">-</span><span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> <span class=\"nu0\">0.0</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">VIEW-AS</span> <span class=\"kw1\">ALERT-BOX</span><span class=\"sy0\">.</span></pre>"}, {"lang": "OxygenBasic", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>print 1.5e-400 '0<br/>\u00a0<br/>print 1.5e400  '#INF<br/>\u00a0<br/>print -1.5e400 '#-INF<br/>\u00a0<br/>print 0/-1.5   '-0<br/>\u00a0<br/>print 1.5/0    '#INF<br/>\u00a0<br/>print -1.5/0   '#-INF<br/>\u00a0<br/>print 0/0      '#qNAN<br/>\u00a0<br/>\u00a0<br/>function f() as double<br/>return -1.5/0<br/>end function<br/>\u00a0<br/>print f '#-INF<br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 13, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  PosInf = 1<span class=\"sy0\">./</span>0<span class=\"sy0\">.</span><br/>  NegInf = <span class=\"sy0\">~</span>1<span class=\"sy0\">./</span>0<span class=\"sy0\">.</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show PosInf<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Show NegInf<span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">%% some assertion</span><br/>  42<span class=\"sy0\">.</span> <span class=\"sy0\">/</span> PosInf = 0<span class=\"sy0\">.</span><br/>  42<span class=\"sy0\">.</span> <span class=\"sy0\">/</span> NegInf = 0<span class=\"sy0\">.</span><br/>  PosInf <span class=\"sy0\">*</span> PosInf = PosInf<br/>  PosInf <span class=\"sy0\">*</span> NegInf = NegInf<br/>  NegInf <span class=\"sy0\">*</span> NegInf = PosInf</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"sy0\">+</span>oo</pre>"}, {"lang": "Pascal", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"inf\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"+inf\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"inf\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"+inf\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 2, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1.5</span><span class=\"sy0\">/</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>       <span class=\"co1\"># Failure: catchable error, if evaluated will return: \"Attempt to divide by zero ... </span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1.5</span><span class=\"sy0\">/</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Num</span><span class=\"sy0\">;</span> <span class=\"co1\"># assigns 'Inf'</span></pre>"}, {"lang": "Phix", "loc": 2, "block": "<pre class=\"text highlighted_source\">constant infinity = 1e300*1e300<br/>? infinity</pre>"}, {"lang": "PHP", "loc": 1, "block": "<pre class=\"php highlighted_source\">INF</pre>"}, {"lang": "PL/I", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>declare x float, y float (15), z float (18);<br/>\u00a0<br/>put skip list (huge(x), huge(y), huge(z));<br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">(load \"@lib/math.l\")<br/>\u00a0<br/>: (exp 1000.0)<br/>-&gt; T</pre>"}, {"lang": "PostScript", "loc": 1, "block": "<pre class=\"text highlighted_source\">/infinity { 9 99 exp } def</pre>"}, {"lang": "PowerShell", "loc": 3, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> infinity <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span><span class=\"re3\">double</span><span class=\"br0\">]</span>::PositiveInfinity<br/><span class=\"br0\">}</span></pre>"}, {"lang": "PureBasic", "loc": 20, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span>.d a, b<br/>  b <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>  <span class=\"co1\">;positive infinity</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>Infinity<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;returns the value for positive infinity from builtin function</span><br/>\u00a0<br/>  a <span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>a <span class=\"sy0\">/</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;calculation results in the value of positive infinity</span><br/>\u00a0<br/>  <span class=\"co1\">;negative infinity</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>Infinity<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;returns the value for negative infinity from builtin function</span><br/>\u00a0<br/>  a <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1.0</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>a <span class=\"sy0\">/</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;calculation results in the value of negative infinity</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#crlf$ <span class=\"sy0\">+</span> #crlf$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 2, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw2\">float</span><span class=\"br0\">(</span><span class=\"st0\">'infinity'</span><span class=\"br0\">)</span><br/>inf</pre>"}, {"lang": "R", "loc": 11, "block": "<pre class=\"text highlighted_source\"> Inf                    #positive infinity<br/> -Inf                   #negative infinity <br/> .Machine$double.xmax   # largest finite floating-point number<br/> is.finite              # function to test to see if a number is finite<br/>\u00a0<br/># function that returns the input if it is finite, otherwise returns (plus or minus) the largest finite floating-point number<br/> forcefinite &lt;- function(x) ifelse(is.finite(x), x, sign(x)*.Machine$double.xmax)<br/>\u00a0<br/> forcefinite(c(1, -1, 0, .Machine$double.xmax, -.Machine$double.xmax, Inf, -Inf))<br/># [1]   1.000000e+00  -1.000000e+00   0.000000e+00  1.797693e+308<br/># [5] -1.797693e+308  1.797693e+308 -1.797693e+308</pre>"}, {"lang": "Racket", "loc": 5, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>+inf.0\u00a0; positive infinity<br/>(define (finite? x) (&lt; -inf.0 x +inf.0))<br/>(define (infinite? x) (not (finite? x)))</pre>"}, {"lang": "REXX", "loc": 1, "block": "<pre style=\"overflow:scroll\">For the default setting of\n\n               NUMERIC DIGITS 9\n\nthe biggest number that can be used is  (for the Regina REXX  and  R4  REXX interpreters):\n\n.999999999e+999999999\n</pre>"}, {"lang": "RLaB", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt;&gt; x = inf()<br/>         inf<br/>&gt;&gt; isinf(x)<br/>           1<br/>&gt;&gt; inf() &gt; 10<br/>           1<br/>&gt;&gt; -inf() &gt; 10<br/>           0<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">a = <span class=\"nu0\">1.0</span><span class=\"sy0\">/</span><span class=\"nu0\">0</span>       <span class=\"co1\"># =&gt; Infinity</span><br/>a.<span class=\"me1\">finite</span>?       <span class=\"co1\"># =&gt; false</span><br/>a.<span class=\"me1\">infinite</span>?     <span class=\"co1\"># =&gt; 1</span><br/>\u00a0<br/>a = <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">0.0</span>      <span class=\"co1\"># =&gt; -Infinity</span><br/>a.<span class=\"me1\">infinite</span>?     <span class=\"co1\"># =&gt; -1</span><br/>\u00a0<br/>a = <span class=\"kw3\">Float</span>::MAX  <span class=\"co1\"># =&gt; 1.79769313486232e+308</span><br/>a.<span class=\"me1\">finite</span>?       <span class=\"co1\"># =&gt; true</span><br/>a.<span class=\"me1\">infinite</span>?     <span class=\"co1\"># =&gt; nil</span></pre>"}, {"lang": "Rust", "loc": 4, "block": "<pre class=\"text highlighted_source\">fn main() {<br/>    let inf = std::f32::INFINITY;<br/>    println!(\"{}\", inf);<br/>}</pre>"}, {"lang": "Scala", "loc": 2, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> inf <span class=\"sy0\">=</span> Double.<span class=\"me1\">PositiveInfinity</span> <span class=\"co1\">//defined as 1.0/0.0</span><br/>inf.<span class=\"me1\">isInfinite</span><span class=\"sy0\">;</span> <span class=\"co1\">//true</span></pre>"}, {"lang": "Scheme", "loc": 3, "block": "<pre class=\"scheme highlighted_source\"><span class=\"sy0\">+</span>inf.0 <span class=\"co1\">; positive infinity</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>finite? x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"sy0\">-</span>inf.0 x <span class=\"sy0\">+</span>inf.0<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>infinite? x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>finite? x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 1, "block": "<pre class=\"text highlighted_source\">const float: Infinity is 1.0 / 0.0;</pre>"}, {"lang": "Sidef", "loc": 11, "block": "<pre class=\"ruby highlighted_source\">var a = <span class=\"nu0\">1.5</span><span class=\"sy0\">/</span><span class=\"nu0\">0</span>        <span class=\"co1\"># Inf</span><br/>say a.<span class=\"me1\">is_inf</span>         <span class=\"co1\"># true</span><br/>say a.<span class=\"me1\">is_pos</span>         <span class=\"co1\"># true</span><br/>\u00a0<br/>var b = <span class=\"sy0\">-</span><span class=\"nu0\">1.5</span><span class=\"sy0\">/</span><span class=\"nu0\">0</span>       <span class=\"co1\"># -Inf</span><br/>say b.<span class=\"me1\">is_ninf</span>        <span class=\"co1\"># true</span><br/>say b.<span class=\"me1\">is_neg</span>         <span class=\"co1\"># true</span><br/>\u00a0<br/>var inf = Inf<br/>var ninf = <span class=\"sy0\">-</span>Inf<br/>say <span class=\"br0\">(</span>inf == <span class=\"sy0\">-</span>ninf<span class=\"br0\">)</span>   <span class=\"co1\"># true</span></pre>"}, {"lang": "Slate", "loc": 1, "block": "<pre class=\"text highlighted_source\">PositiveInfinity</pre>"}, {"lang": "Smalltalk", "loc": 1, "block": "<pre>st&gt; FloatD infinity\nInf\nst&gt; 1.0 / 0.0\nInf\n</pre>"}, {"lang": "Standard ML", "loc": 1, "block": "<pre class=\"text highlighted_source\">Real.posInf</pre>"}, {"lang": "Swift", "loc": 2, "block": "<pre class=\"text highlighted_source\">let inf = Double.infinity<br/>inf.isInfinite //true</pre>"}, {"lang": "Tcl", "loc": 6, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">1.0</span> / <span class=\"nu0\">0</span><span class=\"br0\">}</span>  <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; Inf</span><br/><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>-<span class=\"nu0\">1.0</span> / <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; -Inf</span><br/><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>inf<span class=\"br0\">}</span>      <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; Inf</span><br/><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> / <span class=\"nu0\">0</span><span class=\"br0\">}</span>    <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; \"divide by zero\" error; Inf not part of range of integer division</span></pre>"}, {"lang": "TI-89 BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">\u221e</pre>"}, {"lang": "TorqueScript", "loc": 4, "block": "<pre class=\"text highlighted_source\">function infinity()<br/>{<br/>    return 1/0;<br/>}</pre>"}, {"lang": "Trith", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>: inf 1.0 0.0 /\u00a0;<br/>: -inf inf neg\u00a0;<br/>: inf? abs inf =\u00a0;<br/>\u00a0</pre>"}, {"lang": "Ursa", "loc": 2, "block": "<pre class=\"text highlighted_source\">decl double d<br/>set d Infinity</pre>"}, {"lang": "Ursala", "loc": 3, "block": "<pre class=\"text highlighted_source\">#import flo<br/>\u00a0<br/>infinity = inf!</pre>"}, {"lang": "Visual Basic", "loc": 7, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw4\">Dim</span> PlusInfinity <span class=\"kw4\">as</span> <span class=\"kw1\">Double</span><br/><span class=\"kw4\">Dim</span> MinusInfinity <span class=\"kw4\">as</span> <span class=\"kw1\">Double</span><br/><span class=\"kw4\">Dim</span> IndefiniteNumber <span class=\"kw4\">as</span> <span class=\"kw1\">Double</span><br/><span class=\"kw4\">On</span> <span class=\"kw4\">Error</span> <span class=\"kw4\">Resume</span> <span class=\"kw3\">Next</span><br/>PlusInfinity = 1 / 0<br/>MinusInfinity = -1 / 0<br/>IndefiniteNumber = 0 / 0</pre>"}, {"lang": "Yabasic", "loc": 2, "block": "<pre class=\"text highlighted_source\">infinity = 1e300*1e300<br/>if str$(infinity) = \"inf\" print \"Infinity\"</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">1.5/0</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 1, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"kw1\">PRINT</span> <span class=\"nu0\">1</span>/<span class=\"nu0\">0</span></pre>"}]}