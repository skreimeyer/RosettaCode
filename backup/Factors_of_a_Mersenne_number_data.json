{"task": "Factors_of_a_Mersenne_number", "blocks": [{"lang": "360 Assembly", "loc": 90, "block": "<pre class=\"text highlighted_source\">*        Factors of a Mersenne number  11/09/2015<br/>MERSENNE CSECT<br/>         USING  MERSENNE,R15<br/>         MVC    Q,=F'929'          q=929   (M929=2**929-1) <br/>         LA     R6,1               k=1<br/>LOOPK    C      R6,=F'1048576'     do k=1 to 2**20<br/>         BNL    ELOOPK<br/>         LR     R5,R6              k<br/>         M      R4,Q               *q<br/>         SLA    R5,1               *2   by shift left 1<br/>         LA     R5,1(R5)           +1<br/>         ST     R5,P               p=k*q*2+1<br/>         L      R2,P               p<br/>         N      R2,=F'7'           p&amp;7<br/>         C      R2,=F'1'           if    ((p&amp;7)=1)    p='*001'<br/>         BE     OK<br/>         C      R2,=F'7'           or if ((p&amp;7)=7)    p='*111'<br/>         BNE    NOTOK<br/>OK       MVI    PRIME,X'00'        then prime=false   is prime?<br/>         LA     R2,2               loop count=2<br/>         LA     R1,2               j=2 and after j=3<br/>J2J3     L      R4,P               p<br/>         SRDA   R4,32              r4&gt;&gt;r5<br/>         DR     R4,R1              p/j<br/>         LTR    R4,R4              if p//j=0 <br/>         BZ     NOTPRIME           then goto notprime<br/>         LA     R1,1(R1)           j=j+1<br/>         BCT    R2,J2J3<br/>         LA     R7,5               d=5<br/>WHILED   LR     R5,R7              d<br/>         MR     R4,R7              *d<br/>         C      R5,P               do while(d*d&lt;=p)<br/>         BH     EWHILED<br/>         LA     R2,2               loop count=2<br/>         LA     R1,2               j=2 and after j=4<br/>J2J4     L      R4,P               p<br/>         SRDA   R4,32              r4&gt;&gt;r5<br/>         DR     R4,R7              /d<br/>         LTR    R4,R4              if p//d=0 <br/>         BZ     NOTPRIME           then goto notprime<br/>         AR     R7,R1              d=d+j<br/>         LA     R1,2(R1)           j=j+2<br/>         BCT    R2,J2J4<br/>         B      WHILED<br/>EWHILED  MVI    PRIME,X'01'        prime=true      so is prime<br/>NOTPRIME L      R8,Q               i=q<br/>         MVC    Y,=F'1'            y=1<br/>         MVC    Z,=F'2'            z=2<br/>WHILEI   LTR    R8,R8              do while(i^=0)<br/>         BZ     EWHILEI<br/>         ST     R8,PG              i<br/>         TM     PG+3,B'00000001'   if first bit of i not 1<br/>         BZ     NOTFIRST           <br/>         L      R5,Y               y<br/>         M      R4,Z               *z<br/>         LA     R4,0<br/>         D      R4,P               /p<br/>         ST     R4,Y               y=(y*z)//p<br/>NOTFIRST L      R5,Z               z<br/>         M      R4,Z               *z<br/>         LA     R4,0<br/>         D      R4,P               /p<br/>         ST     R4,Z               z=(z*z)//p<br/>         SRA    R8,1               i=i/2   by shift right 1<br/>         B      WHILEI<br/>EWHILEI  CLI    PRIME,X'01'        if prime <br/>         BNE    NOTOK<br/>         CLC    Y,=F'1'            and if y=1<br/>         BNE    NOTOK<br/>         MVC    FACTOR,P           then factor=p<br/>         B      OKFACTOR<br/>NOTOK    LA     R6,1(R6)           k=k+1<br/>         B      LOOPK<br/>ELOOPK   MVC    FACTOR,=F'0'       factor=0<br/>OKFACTOR L      R1,Q<br/>         XDECO  R1,PG              edit q<br/>         L      R1,FACTOR<br/>         XDECO  R1,PG+12           edit factor<br/>         XPRNT  PG,24              print<br/>         XR     R15,R15<br/>         BR     R14<br/>PRIME    DS     X                  flag for prime<br/>Q        DS     F<br/>P        DS     F<br/>Y        DS     F<br/>Z        DS     F<br/>FACTOR   DS     F                  a factor of q<br/>PG       DS     CL24               buffer<br/>         YREGS <br/>         END    MERSENNE</pre>"}, {"lang": "Ada", "loc": 68, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"co1\">--  reuse Is_Prime from [[Primality by Trial Division]]</span><br/><span class=\"kw3\">with</span> Is_Prime;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Mersenne <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">function</span> Is_Set <span class=\"br0\">(</span>Number\u00a0: Natural; Bit\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> Number / <span class=\"nu0\">2</span> ** <span class=\"br0\">(</span>Bit - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span> = <span class=\"nu0\">1</span>;<br/>   <span class=\"kw1\">end</span> Is_Set;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Get_Max_Bit <span class=\"br0\">(</span>Number\u00a0: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span><br/>      Test\u00a0: Natural\u00a0:= <span class=\"nu0\">0</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">while</span> <span class=\"nu0\">2</span> ** Test &lt;= Number <span class=\"kw1\">loop</span><br/>         Test\u00a0:= Test + <span class=\"nu0\">1</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Test;<br/>   <span class=\"kw1\">end</span> Get_Max_Bit;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Modular_Power <span class=\"br0\">(</span>Base, Exponent, Modulus\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span><br/>      Maximum_Bit\u00a0: <span class=\"kw3\">constant</span> Natural\u00a0:= Get_Max_Bit <span class=\"br0\">(</span>Exponent<span class=\"br0\">)</span>;<br/>      Square     \u00a0: Natural\u00a0:= <span class=\"nu0\">1</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> Bit <span class=\"kw3\">in</span> <span class=\"kw3\">reverse</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Maximum_Bit</span> <span class=\"kw1\">loop</span><br/>         Square\u00a0:= Square ** <span class=\"nu0\">2</span>;<br/>         <span class=\"kw1\">if</span> Is_Set <span class=\"br0\">(</span>Exponent, Bit<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            Square\u00a0:= Square * Base;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         Square\u00a0:= Square <span class=\"kw2\">mod</span> Modulus;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Square;<br/>   <span class=\"kw1\">end</span> Modular_Power;<br/>\u00a0<br/>   Not_A_Prime_Exponent\u00a0: <span class=\"kw1\">exception</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Get_Factor <span class=\"br0\">(</span>Exponent\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span><br/>      Factor\u00a0: Positive;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> Is_Prime <span class=\"br0\">(</span>Exponent<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw3\">raise</span> Not_A_Prime_Exponent;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">for</span> K <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">16384</span> / Exponent <span class=\"kw1\">loop</span><br/>         Factor\u00a0:= <span class=\"nu0\">2</span> * K * Exponent + <span class=\"nu0\">1</span>;<br/>         <span class=\"kw1\">if</span> Factor <span class=\"kw2\">mod</span> <span class=\"nu0\">8</span> = <span class=\"nu0\">1</span> <span class=\"kw2\">or</span> <span class=\"kw1\">else</span> Factor <span class=\"kw2\">mod</span> <span class=\"nu0\">8</span> = <span class=\"nu0\">7</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">if</span> Is_Prime <span class=\"br0\">(</span>Factor<span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"kw1\">then</span> Modular_Power <span class=\"br0\">(</span><span class=\"nu0\">2</span>, Exponent, Factor<span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>               <span class=\"kw1\">return</span> Factor;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/>   <span class=\"kw1\">end</span> Get_Factor;<br/>\u00a0<br/>   To_Test\u00a0: <span class=\"kw3\">constant</span> Positive\u00a0:= <span class=\"nu0\">929</span>;<br/>   Factor \u00a0: Natural;<br/><span class=\"kw1\">begin</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span><span class=\"st0\">\"2 **\"</span> &amp; Integer'Image <span class=\"br0\">(</span>To_Test<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" - 1 \"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      Factor\u00a0:= Get_Factor <span class=\"br0\">(</span>To_Test<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">if</span> Factor = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"is prime.\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">else</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"has factor\"</span> &amp; Integer'Image <span class=\"br0\">(</span>Factor<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">exception</span><br/>      <span class=\"kw3\">when</span> Not_A_Prime_Exponent =&gt;<br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"is not a Mersenne number\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span>;<br/><span class=\"kw1\">end</span> Mersenne;</pre>"}, {"lang": "ALGOL 68", "loc": 51, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> ISPRIMEINT <span class=\"sy1\">=</span> <span class=\"kw3\">INT</span><span class=\"sy1\">;</span><br/><span class=\"co2\">PR READ \"prelude/is_prime.a68\" PR</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> POWMODSTRUCT <span class=\"sy1\">=</span> <span class=\"kw3\">INT</span><span class=\"sy1\">;</span><br/><span class=\"co2\">PR READ \"prelude/pow_mod.a68\" PR</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> m factor <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> p<span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><span class=\"kw2\">BEGIN</span><br/>  <span class=\"kw3\">INT</span> m factor<span class=\"sy1\">;</span><br/>  <span class=\"kw3\">INT</span> max k<span class=\"sy1\">,</span> msb<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> q<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw20\">bits width</span> <span class=\"sy1\">-</span> 2 <span class=\"kw2\">BY</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> 0 <span class=\"kw2\">WHILE</span> <span class=\"br0\">(</span> <span class=\"kw8\">BIN</span> p <span class=\"kw11\">SHR</span> i <span class=\"kw16\">AND</span> <span class=\"re0\">2r1</span> <span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"re0\">2r0</span> <span class=\"kw2\">DO</span><br/>      msb <span class=\"sy1\">:=</span> i<br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  max k <span class=\"sy1\">:=</span> <span class=\"kw8\">ENTIER</span> <span class=\"kw24\">sqrt</span><span class=\"br0\">(</span><span class=\"kw20\">max int</span><span class=\"br0\">)</span> <span class=\"kw12\">OVER</span> p<span class=\"sy1\">;</span> <span class=\"coMULTI\"># limit for k to prevent overflow of max int #</span><br/>  <span class=\"kw2\">FOR</span> k <span class=\"kw2\">FROM</span> 1 <span class=\"kw2\">TO</span> max k <span class=\"kw2\">DO</span><br/>    q <span class=\"sy1\">:=</span> 2<span class=\"sy1\">*</span>p<span class=\"sy1\">*</span>k <span class=\"sy1\">+</span> 1<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> is prime<span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>      <span class=\"kw7\">SKIP</span><br/>    <span class=\"kw2\">ELIF</span> q <span class=\"kw12\">MOD</span> 8 <span class=\"sy1\">/=</span> 1 <span class=\"kw16\">AND</span> q <span class=\"kw12\">MOD</span> 8 <span class=\"sy1\">/=</span> 7 <span class=\"kw2\">THEN</span><br/>      <span class=\"kw7\">SKIP</span><br/>    <span class=\"kw2\">ELSE</span><br/>      n <span class=\"sy1\">:=</span> pow mod<span class=\"br0\">(</span>2<span class=\"sy1\">,</span>p<span class=\"sy1\">,</span>q<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw2\">IF</span> n <span class=\"sy1\">=</span> 1 <span class=\"kw2\">THEN</span><br/>        m factor <span class=\"sy1\">:=</span> q<span class=\"sy1\">;</span><br/>        return<br/>      <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">FI</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  m factor <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>  return<span class=\"sy1\">:</span><br/>    m factor<br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span><br/>\u00a0<br/>  <span class=\"kw3\">INT</span> exponent<span class=\"sy1\">,</span> factor<span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter exponent of Mersenne number:\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  read<span class=\"br0\">(</span>exponent<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> is prime<span class=\"br0\">(</span>exponent<span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Exponent is not prime: \"</span><span class=\"sy1\">,</span> exponent<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">ELSE</span><br/>    factor <span class=\"sy1\">:=</span> m factor<span class=\"br0\">(</span>exponent<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> factor <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span><br/>      <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"No factor found for M\"</span><span class=\"sy1\">,</span> exponent<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">ELSE</span><br/>      <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"M\"</span><span class=\"sy1\">,</span> exponent<span class=\"sy1\">,</span> <span class=\"st0\">\" has a factor: \"</span><span class=\"sy1\">,</span> factor<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">FI</span><br/>  <span class=\"kw2\">FI</span><br/>\u00a0<br/><span class=\"kw2\">END</span></pre>"}, {"lang": "AutoHotkey", "loc": 56, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MFact<span class=\"br0\">(</span><span class=\"nu0\">27</span><span class=\"br0\">)</span>  <span class=\"co1\">;-1: 27 is not prime</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MFact<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>   <span class=\"co1\">; 0</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MFact<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>   <span class=\"co1\">; 0</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MFact<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>   <span class=\"co1\">; 0</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MFact<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>   <span class=\"co1\">; 0</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MFact<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span>  <span class=\"co1\">; 23</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MFact<span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"br0\">)</span>  <span class=\"co1\">; 0</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MFact<span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"br0\">)</span>  <span class=\"co1\">; 0</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MFact<span class=\"br0\">(</span><span class=\"nu0\">19</span><span class=\"br0\">)</span>  <span class=\"co1\">; 0</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MFact<span class=\"br0\">(</span><span class=\"nu0\">23</span><span class=\"br0\">)</span>  <span class=\"co1\">; 47</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MFact<span class=\"br0\">(</span><span class=\"nu0\">29</span><span class=\"br0\">)</span>  <span class=\"co1\">; 233</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MFact<span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span>  <span class=\"co1\">; 0</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MFact<span class=\"br0\">(</span><span class=\"nu0\">37</span><span class=\"br0\">)</span>  <span class=\"co1\">; 223</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MFact<span class=\"br0\">(</span><span class=\"nu0\">41</span><span class=\"br0\">)</span>  <span class=\"co1\">; 13367</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MFact<span class=\"br0\">(</span><span class=\"nu0\">43</span><span class=\"br0\">)</span>  <span class=\"co1\">; 431</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MFact<span class=\"br0\">(</span><span class=\"nu0\">47</span><span class=\"br0\">)</span>  <span class=\"co1\">; 2351</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MFact<span class=\"br0\">(</span><span class=\"nu0\">53</span><span class=\"br0\">)</span>  <span class=\"co1\">; 6361</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% MFact<span class=\"br0\">(</span><span class=\"nu0\">929</span><span class=\"br0\">)</span> <span class=\"co1\">; 13007</span><br/>\u00a0<br/>MFact<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; blank if 2**p-1 can be prime, otherwise a prime divisor &lt; 2**32</span><br/>   <span class=\"kw1\">If</span>\u00a0!IsPrime32<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>      <span class=\"kw1\">Return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>                      <span class=\"co1\">; Error (p must be prime)</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% <span class=\"nu0\">2.0</span><span class=\"sy0\">**</span><span class=\"br0\">(</span>p<span class=\"sy0\">&lt;</span><span class=\"nu0\">64</span>\u00a0? p<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>p <span class=\"co1\">; test prime divisors &lt; 2**32, up to sqrt(2**p-1)</span><br/>      <span class=\"kw1\">If</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>q<span class=\"sy0\">:=</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>p<span class=\"sy0\">*</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;</span><span class=\"nu0\">7</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> || q<span class=\"sy0\">&amp;</span><span class=\"nu0\">7</span> <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> IsPrime32<span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> PowMod<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>p<span class=\"sy0\">,</span>q<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">Return</span> q<br/>   <span class=\"kw1\">Return</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>IsPrime32<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; n &lt; 2**32</span><br/>   <span class=\"kw1\">If</span> n in <span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span><span class=\"nu0\">13</span><span class=\"sy0\">,</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span><span class=\"nu0\">19</span><span class=\"sy0\">,</span><span class=\"nu0\">23</span><span class=\"sy0\">,</span><span class=\"nu0\">29</span><span class=\"sy0\">,</span><span class=\"nu0\">31</span><span class=\"sy0\">,</span><span class=\"nu0\">37</span><span class=\"sy0\">,</span><span class=\"nu0\">41</span><span class=\"sy0\">,</span><span class=\"nu0\">43</span><span class=\"sy0\">,</span><span class=\"nu0\">47</span><span class=\"sy0\">,</span><span class=\"nu0\">53</span><span class=\"sy0\">,</span><span class=\"nu0\">59</span><span class=\"sy0\">,</span><span class=\"nu0\">61</span><span class=\"sy0\">,</span><span class=\"nu0\">67</span><span class=\"sy0\">,</span><span class=\"nu0\">71</span><span class=\"sy0\">,</span><span class=\"nu0\">73</span><span class=\"sy0\">,</span><span class=\"nu0\">79</span><span class=\"sy0\">,</span><span class=\"nu0\">83</span><span class=\"sy0\">,</span><span class=\"nu0\">89</span><span class=\"sy0\">,</span><span class=\"nu0\">97</span><br/>      <span class=\"kw1\">Return</span> <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">If</span> <span class=\"br0\">(</span>!<span class=\"br0\">(</span>n<span class=\"sy0\">&amp;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>||!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>||!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>||!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>||!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"br0\">)</span>||!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">13</span><span class=\"br0\">)</span>||!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">17</span><span class=\"br0\">)</span>||!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">19</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">Return</span> <span class=\"nu0\">0</span><br/>   n1 <span class=\"sy0\">:=</span> d <span class=\"sy0\">:=</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> s <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>   <span class=\"kw1\">While</span>\u00a0!<span class=\"br0\">(</span>d<span class=\"sy0\">&amp;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      d<span class=\"sy0\">&gt;&gt;=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> s<span class=\"sy0\">++</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">3</span> <span class=\"br0\">{</span><br/>      x <span class=\"sy0\">:=</span> PowMod<span class=\"br0\">(</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">=</span><span class=\"nu0\">1</span>\u00a0? <span class=\"nu0\">2</span>\u00a0: <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">=</span><span class=\"nu0\">2</span>\u00a0? <span class=\"nu0\">7</span>\u00a0: <span class=\"nu0\">61</span><span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> <span class=\"br0\">(</span>x<span class=\"sy0\">=</span><span class=\"nu0\">1</span> || x<span class=\"sy0\">=</span>n1<span class=\"br0\">)</span><br/>         <a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">Continue</span></a><br/>      <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% s<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>         <span class=\"kw1\">If</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">:=</span>PowMod<span class=\"br0\">(</span>x<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">Return</span> <span class=\"nu0\">0</span><br/>         <span class=\"kw1\">Else</span> <span class=\"kw1\">If</span> <span class=\"br0\">(</span>x <span class=\"sy0\">=</span> n1<span class=\"br0\">)</span><br/>            <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">Break</span></a><br/>      <a href=\"http://www.autohotkey.com/docs/commands/IfLess.htm\"><span class=\"kw3\">IfLess</span></a> x<span class=\"sy0\">,</span><span class=\"re0\">%n1%</span><span class=\"sy0\">,</span> <span class=\"kw1\">Return</span> <span class=\"nu0\">0</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">Return</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>PowMod<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>m<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; x**n mod m</span><br/>   y <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> i <span class=\"sy0\">:=</span> n<span class=\"sy0\">,</span> z <span class=\"sy0\">:=</span> x<br/>   <span class=\"kw1\">While</span> i<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><br/>      y <span class=\"sy0\">:=</span> i<span class=\"sy0\">&amp;</span><span class=\"nu0\">1</span>\u00a0? <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span>y<span class=\"sy0\">*</span>z<span class=\"sy0\">,</span>m<span class=\"br0\">)</span>\u00a0: y<span class=\"sy0\">,</span> z <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span>z<span class=\"sy0\">*</span>z<span class=\"sy0\">,</span>m<span class=\"br0\">)</span><span class=\"sy0\">,</span> i <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">Return</span> y<br/><span class=\"br0\">}</span></pre>"}, {"lang": "BBC BASIC", "loc": 38, "block": "<pre class=\"text highlighted_source\">      PRINT \"A factor of M929 is \"; FNmersenne_factor(929)<br/>      PRINT \"A factor of M937 is \"; FNmersenne_factor(937)<br/>      END<br/>\u00a0<br/>      DEF FNmersenne_factor(P%)<br/>      LOCAL K%, Q%<br/>      IF NOT FNisprime(P%) THEN = -1<br/>      FOR K% = 1 TO 1000000<br/>        Q% = 2*K%*P% + 1<br/>        IF (Q% AND 7) = 1 OR (Q% AND 7) = 7 THEN<br/>          IF FNisprime(Q%) IF FNmodpow(2, P%, Q%) = 1 THEN = Q%<br/>        ENDIF<br/>      NEXT K%<br/>      = 0<br/>\u00a0<br/>      DEF FNisprime(N%)<br/>      LOCAL D%<br/>      IF N% MOD 2=0 THEN = (N% = 2)<br/>      IF N% MOD 3=0 THEN = (N% = 3)<br/>      D% = 5<br/>      WHILE D% * D% &lt;= N%<br/>        IF N% MOD D% = 0 THEN = FALSE<br/>        D% += 2<br/>        IF N% MOD D% = 0 THEN = FALSE<br/>        D% += 4<br/>      ENDWHILE<br/>      = TRUE<br/>\u00a0<br/>      DEF FNmodpow(X%, N%, M%)<br/>      LOCAL I%, Y%, Z%<br/>      I% = N%\u00a0: Y% = 1\u00a0: Z% = X%<br/>      WHILE I%<br/>        IF I% AND 1 THEN Y% = (Y% * Z%) MOD M%<br/>        Z% = (Z% * Z%) MOD M%<br/>        I% = I% &gt;&gt;&gt; 1<br/>      ENDWHILE<br/>      = Y%<br/>\u00a0</pre>"}, {"lang": "Bracmat", "loc": 62, "block": "<pre class=\"text highlighted_source\">( ( modPow<br/>  =   square P divisor highbit log 2pow<br/>    .  \u00a0!arg:(?P.?divisor)<br/>      &amp; 1:?square<br/>      &amp; 2\\L!P:#%?log+?<br/>      &amp; 2^!log:?2pow<br/>      &amp;   whl<br/>        ' (     mod<br/>              $ (   ( div$(!P.!2pow):1&amp;2<br/>                    | 1<br/>                    )<br/>                  *\u00a0!square^2<br/>                .\u00a0!divisor<br/>                )<br/>           \u00a0:\u00a0?square<br/>          &amp; mod$(!P.!2pow):?P<br/>          &amp; 1/2*!2pow:~/:?2pow<br/>          )<br/>      &amp;\u00a0!square<br/>  )<br/>&amp; ( isPrime<br/>  =   incs nextincs primeCandidate nextPrimeCandidate quotient<br/>    .     1 1 2 2 (4 2 4 2 4 6 2 6:?incs)<br/>       \u00a0:\u00a0?nextincs<br/>      &amp; 1:?primeCandidate<br/>      &amp; ( nextPrimeCandidate<br/>        =   (\u00a0!nextincs:&amp;!incs:?nextincs<br/>            | <br/>            )<br/>          &amp;\u00a0!nextincs:%?inc\u00a0?nextincs<br/>          &amp;\u00a0!inc+!primeCandidate:?primeCandidate<br/>        )<br/>      &amp;   whl<br/>        ' ( (!nextPrimeCandidate:?divisor)^2:~&gt;!arg<br/>          &amp;\u00a0!arg*!divisor^-1:?quotient:/<br/>          )<br/>      &amp;\u00a0!quotient:/<br/>  )<br/>&amp; ( Factors-of-a-Mersenne-Number<br/>  =   P k candidate bignum<br/>    .  \u00a0!arg:?P<br/>      &amp; 2^!P+-1:?bignum<br/>      &amp; 0:?k<br/>      &amp;   whl<br/>        ' ( 2*(1+!k:?k)*!P+1:?candidate<br/>          &amp;\u00a0!candidate^2:~&gt;!bignum<br/>          &amp; ( ~(mod$(!candidate.8):(1|7))<br/>            | ~(isPrime$!candidate)<br/>            | modPow$(!P.!candidate):?mp:~1<br/>            )<br/>          )<br/>      &amp;\u00a0!mp:1<br/>      &amp; (!candidate.(2^!P+-1)*!candidate^-1)<br/>  )<br/>&amp; (   Factors-of-a-Mersenne-Number$929:(?divisorA.?divisorB)<br/>    &amp;   out<br/>      $ ( str<br/>        $ (\"found some divisors of 2^\"\u00a0!P \"-1\u00a0: \"\u00a0!divisorA \" and \"\u00a0!divisorB)<br/>        )<br/>  | out$\"no divisors found\"<br/>  )<br/>);</pre>"}, {"lang": "C", "loc": 24, "block": "<pre class=\"c highlighted_source\"><span class=\"kw4\">int</span> isPrime<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">%</span><span class=\"nu19\">2</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> n<span class=\"sy0\">==</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">%</span><span class=\"nu19\">3</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> n<span class=\"sy0\">==</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> d<span class=\"sy0\">=</span><span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>d<span class=\"sy0\">*</span>d<span class=\"sy0\">&lt;=</span>n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy0\">%</span>d<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\td<span class=\"sy0\">+=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy0\">%</span>d<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\td<span class=\"sy0\">+=</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\u00a0<br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>d<span class=\"sy0\">,</span>p<span class=\"sy0\">,</span>r<span class=\"sy0\">,</span>q<span class=\"sy0\">=</span><span class=\"nu0\">929</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>isPrime<span class=\"br0\">(</span>q<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <br/>\tr<span class=\"sy0\">=</span>q<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>r<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> r<span class=\"sy0\">&lt;&lt;=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\td<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>q<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">do</span> <span class=\"br0\">{</span> \t<span class=\"kw1\">for</span><span class=\"br0\">(</span>p<span class=\"sy0\">=</span>r<span class=\"sy0\">,</span> i<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> p<span class=\"sy0\">;</span> p<span class=\"sy0\">&lt;&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\ti<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">long</span> <span class=\"kw4\">long</span><span class=\"br0\">)</span>i <span class=\"sy0\">*</span> i<span class=\"br0\">)</span> <span class=\"sy0\">%</span> d<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> i <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> d<span class=\"br0\">)</span> i <span class=\"sy0\">-=</span> d<span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> d <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>q<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"2^%d - 1 = 0 (mod\u00a0%d)<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> q<span class=\"sy0\">,</span> d<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 46, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> prog<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">class</span> MainClass<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main <span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">int</span> q <span class=\"sy0\">=</span> <span class=\"nu0\">929</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"sy0\">!</span>isPrime<span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> q<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> r <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <br/>\t\t\t\tr <span class=\"sy0\">&lt;&lt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw4\">int</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> q <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">do</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> p<span class=\"sy0\">=</span>r<span class=\"sy0\">;</span> p<span class=\"sy0\">!=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> p<span class=\"sy0\">&lt;&lt;=</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\ti <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i<span class=\"sy0\">*</span>i<span class=\"br0\">)</span> <span class=\"sy0\">%</span> d<span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> i <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> d<span class=\"br0\">)</span> i <span class=\"sy0\">-=</span> d<span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> d <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> q<span class=\"sy0\">;</span> <span class=\"kw1\">else</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span>\t\t\t\t<br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"2^\"</span><span class=\"sy0\">+</span>q<span class=\"sy0\">+</span><span class=\"st0\">\"-1 = 0 (mod \"</span><span class=\"sy0\">+</span>d<span class=\"sy0\">+</span><span class=\"st0\">\")\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> isPrime<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw4\">int</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> d<span class=\"sy0\">*</span>d <span class=\"sy0\">&lt;=</span> n <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>\t\t\t\td <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>\t\t\t\td <span class=\"sy0\">+=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 59, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ns mersennenumber<br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">gen-class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn m* <span class=\"br0\">[</span>p q m<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Computes (p*q) mod m \"</span><br/>  <span class=\"br0\">(</span>mod <span class=\"br0\">(</span>*' p q<span class=\"br0\">)</span> m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn power<br/>  <span class=\"st0\">\"modular exponentiation (i.e. b^e mod m\"</span><br/>  <span class=\"br0\">[</span>b e m<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>loop <span class=\"br0\">[</span>b b<span class=\"sy0\">,</span> e e<span class=\"sy0\">,</span> x <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zero? e<span class=\"br0\">)</span><br/>      x<br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>even? e<span class=\"br0\">)</span> <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>m* b b m<span class=\"br0\">)</span> <span class=\"br0\">(</span>quot e <span class=\"nu0\">2</span><span class=\"br0\">)</span> x<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>m* b b m<span class=\"br0\">)</span> <span class=\"br0\">(</span>quot e <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>m* b x m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn divides? <span class=\"br0\">[</span>k n<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" checks if k divides n \"</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">rem</span> n k<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn is-prime? <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" checks if n is prime \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span> false             <span class=\"co1\">; 0, 1 not prime (i.e. primes are greater than one)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span> true              <span class=\"co1\">; 2 is prime</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span>mod n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> false     <span class=\"co1\">; all other evens are not prime</span><br/>    <span class=\"sy0\">:</span><span class=\"me1\">else</span>                     <span class=\"co1\">; check for divisors up to sqrt(n)</span><br/>      <span class=\"br0\">(</span>empty? <span class=\"br0\">(</span>filter #<span class=\"br0\">(</span>divides? <span class=\"sy0\">%</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span>take-while #<span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>* <span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span>range <span class=\"nu0\">2</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Max k to check</span><br/><span class=\"br0\">(</span>def MAX-K <span class=\"nu0\">16384</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn trial-factor  <span class=\"br0\">[</span>p k<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" check if k satisfies 2*k*P + 1 divides 2^p - 1 \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>q  <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> p k<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        mq <span class=\"br0\">(</span>mod q <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>is-prime? q<span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"kw1\">nil</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> mq<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">not</span><span class=\"sy0\">=</span> <span class=\"nu0\">7</span> mq<span class=\"br0\">)</span><span class=\"br0\">)</span>       <span class=\"kw1\">nil</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>power <span class=\"nu0\">2</span> p q<span class=\"br0\">)</span><span class=\"br0\">)</span>     q<br/>      <span class=\"sy0\">:</span><span class=\"me1\">else</span>                   <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn m-factor <span class=\"br0\">[</span>p<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" searches for k-factor \"</span><br/>  <span class=\"br0\">(</span>some #<span class=\"br0\">(</span>trial-factor p <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>range <span class=\"nu0\">16384</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn -main <span class=\"br0\">[</span>p<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>if-<span class=\"kw1\">not</span> <span class=\"br0\">(</span>is-prime? p<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>format <span class=\"st0\">\"M%d = 2^%d - 1 exponent is not prime\"</span> p p<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>if-<span class=\"kw1\">let</span> <span class=\"br0\">[</span>factor <span class=\"br0\">(</span>m-factor p<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span>format <span class=\"st0\">\"M%d = 2^%d - 1 is composite with factor\u00a0%d\"</span> p p factor<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>format <span class=\"st0\">\"M%d = 2^%d - 1 is prime\"</span> p p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Tests different p values</span><br/><span class=\"br0\">(</span>doseq <span class=\"br0\">[</span>p <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span><span class=\"nu0\">13</span><span class=\"sy0\">,</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span><span class=\"nu0\">19</span><span class=\"sy0\">,</span><span class=\"nu0\">23</span><span class=\"sy0\">,</span><span class=\"nu0\">29</span><span class=\"sy0\">,</span><span class=\"nu0\">31</span><span class=\"sy0\">,</span><span class=\"nu0\">37</span><span class=\"sy0\">,</span><span class=\"nu0\">41</span><span class=\"sy0\">,</span><span class=\"nu0\">43</span><span class=\"sy0\">,</span><span class=\"nu0\">47</span><span class=\"sy0\">,</span><span class=\"nu0\">53</span><span class=\"sy0\">,</span><span class=\"nu0\">929</span><span class=\"br0\">]</span><br/>        <span class=\"sy0\">:</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>s <span class=\"br0\">(</span>-main p<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>println s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 28, "block": "<pre class=\"coffeescript highlighted_source\">mersenneFactor = <span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    limit = Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>Math.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>p<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    k = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>k<span class=\"sy0\">*</span>p <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> limit<br/>        q = <span class=\"nu0\">2</span><span class=\"sy0\">*</span>k<span class=\"sy0\">*</span>p <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> isPrime<span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span>q <span class=\"sy0\">%</span> <span class=\"nu0\">8</span> == <span class=\"nu0\">1</span> <span class=\"kw2\">or</span> q <span class=\"sy0\">%</span> <span class=\"nu0\">8</span> == <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> trialFactor<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>p<span class=\"sy0\">,</span>q<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> q<br/>        k<span class=\"sy0\">++</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">null</span><br/>\u00a0<br/>isPrime = <span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span>...<span class=\"me1\">value</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">if</span> value <span class=\"sy0\">%</span> i == <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">true</span>  <span class=\"kw1\">if</span> value <span class=\"sy0\">%</span> i <span class=\"sy0\">!</span>= <span class=\"nu0\">0</span><br/>\u00a0<br/>trialFactor = <span class=\"br0\">(</span>base<span class=\"sy0\">,</span> exp<span class=\"sy0\">,</span> mod<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    square = <span class=\"nu0\">1</span><br/>    bits = exp.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> bit <span class=\"kw1\">in</span> bits<br/>        square = Math.<span class=\"me1\">pow</span><span class=\"br0\">(</span>square<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"sy0\">+</span>bit <span class=\"kw2\">is</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> base <span class=\"kw1\">else</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> mod<br/>    <span class=\"kw1\">return</span> square == <span class=\"nu0\">1</span><br/>\u00a0<br/>checkMersenne = <span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    factor = mersenneFactor<span class=\"br0\">(</span><span class=\"sy0\">+</span>p<span class=\"br0\">)</span><br/>    console.<span class=\"me1\">log</span> <span class=\"st0\">\"M#{p} = 2^#{p}-1 is #{if factor is null then \"</span>prime<span class=\"st0\">\" else \"</span>composite with <span class=\"co1\">#{factor}\"}\"</span><br/>\u00a0<br/>checkMersenne<span class=\"br0\">(</span>prime<span class=\"br0\">)</span> <span class=\"kw1\">for</span> prime <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"st0\">\"2\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"3\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"4\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"5\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"7\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"11\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"13\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"17\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"19\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"23\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"29\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"31\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"37\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"41\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"43\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"47\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"53\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"929\"</span><span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 7, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> mersenne-fac <span class=\"br0\">(</span>p <span class=\"sy0\">&amp;</span>aux <span class=\"br0\">(</span>m <span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for k from <span class=\"nu0\">1</span><br/>        for n <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> k p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        until <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span>mod m n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>mersenne-fac <span class=\"nu0\">929</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 37, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">ulong</span> mersenneFactor<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">ulong</span> p<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">bool</span> isPrime<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Unqual<span class=\"sy0\">!</span>T i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">ulong</span> modPow<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">ulong</span> cb<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">ulong</span> ce<span class=\"sy0\">,</span><span class=\"kw2\">in</span> <span class=\"kw4\">ulong</span> m<span class=\"br0\">)</span><br/>    <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw4\">ulong</span> b <span class=\"sy0\">=</span> cb<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">ulong</span> result <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">ulong</span> e <span class=\"sy0\">=</span> ce<span class=\"sy0\">;</span> e <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> e <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>e <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                result <span class=\"sy0\">=</span> <span class=\"br0\">(</span>result <span class=\"sy0\">*</span> b<span class=\"br0\">)</span> <span class=\"sy0\">%</span> m<span class=\"sy0\">;</span><br/>            b <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> m<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">ulong</span> limit <span class=\"sy0\">=</span> p <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">64</span> <span class=\"sy0\">?</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">ulong</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">real</span><span class=\"br0\">(</span><span class=\"nu16\">2.0</span><span class=\"br0\">)</span> <span class=\"sy0\">^^</span> p <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">sqrt</span> <span class=\"sy0\">:</span> <span class=\"kw4\">uint</span>.<span class=\"me1\">max</span><span class=\"sy0\">;</span> <span class=\"co1\">// prevents silent overflows</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">ulong</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> p <span class=\"sy0\">*</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> limit<span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> <span class=\"kw4\">ulong</span> q <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> p <span class=\"sy0\">*</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>q <span class=\"sy0\">%</span> <span class=\"nu0\">8</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> q <span class=\"sy0\">%</span> <span class=\"nu0\">8</span> <span class=\"sy0\">==</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> isPrime<span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <br/>            modPow<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> q<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> q<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">// returns a sensible smallest factor</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"Factor of M929:\u00a0%d\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">929</span>.<span class=\"me1\">mersenneFactor</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 25, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; M = 2^P - 1 , P prime</span><br/><span class=\"co1\">;; look for a prime divisor q such as\u00a0: q &lt; \u221a M, q = 1 or 7 modulo 8, q = 1 + 2kP</span><br/><span class=\"co1\">;; q is divisor if (powmod 2 P q) = 1</span><br/><span class=\"co1\">;; m-divisor returns q or #f</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span>  <span class=\"br0\">(</span> m<span class=\"sy0\">-</span>divisor P <span class=\"br0\">)</span><br/><span class=\"co1\">;; must limit the search as \u221a M may be HUGE</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span>  maxprime  <span class=\"br0\">(</span><span class=\"kw1\">min</span> <span class=\"nu0\">1</span>_000_000_000 <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> P<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>q <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"nu0\">1</span> maxprime <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> P<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t#:when <span class=\"br0\">(</span><span class=\"kw1\">member</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> q <span class=\"nu0\">8</span><span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t#:when <span class=\"br0\">(</span>prime? q<span class=\"br0\">)</span><br/>\t#:break <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>powmod <span class=\"nu0\">2</span> P q<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> q<br/>\t#f <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>m<span class=\"sy0\">-</span>divisor <span class=\"nu0\">929</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">13007</span><br/><span class=\"br0\">(</span>m<span class=\"sy0\">-</span>divisor <span class=\"nu0\">4423</span><span class=\"br0\">)</span><br/>    \u2192 #f<br/>\u00a0<br/><span class=\"br0\">(</span>lib 'bigint<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>prime? <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4423</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; 2^4423 -1 is a Mersenne prime</span><br/>    \u2192 #t<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 36, "block": "<pre class=\"text highlighted_source\">defmodule Mersenne do<br/>  def mersenne_factor(p) do<br/>    limit =\u00a0:math.sqrt(:math.pow(2, p) - 1)<br/>    mersenne_loop(p, limit, 1)<br/>  end<br/>\u00a0<br/>  defp mersenne_loop(p, limit, k) when (2*k*p - 1) &gt; limit, do: nil<br/>  defp mersenne_loop(p, limit, k) do<br/>    q = 2*k*p + 1<br/>    if prime?(q) and rem(q,8) in [1,7] and trial_factor(2,p,q),<br/>      do: q, else: mersenne_loop(p, limit, k+1)<br/>  end<br/>\u00a0<br/>  defp trial_factor(base, exp, mod) do<br/>    Integer.digits(exp, 2)<br/>    |&gt; Enum.reduce(1, fn bit,square -&gt;<br/>      (square * square * (if bit==1, do: base, else: 1)) |&gt; rem(mod)<br/>    end) == 1<br/>  end<br/>\u00a0<br/>  def check_mersenne(p) do<br/>    IO.write \"M#{p} = 2**#{p}-1 is \"<br/>    f = mersenne_factor(p)<br/>    IO.puts if f, do: \"composite with factor #{f}\", else: \"prime\"<br/>  end<br/>\u00a0<br/>  def prime?(n), do: prime?(n,\u00a0:math.sqrt(n), 2)<br/>\u00a0<br/>  defp prime?(_, limit, i) when limit &lt; i, do: true<br/>  defp prime?(n, limit, i) do<br/>    if rem(n,i) == 0, do: false, else: prime?(n, limit, i+1)<br/>  end<br/>end<br/>\u00a0<br/>[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,929]<br/>|&gt; Enum.each(fn p -&gt; Mersenne.check_mersenne(p) end)</pre>"}, {"lang": "Erlang", "loc": 44, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>mersene2<span class=\"br0\">)</span><span class=\"sy1\">.</span>                                                            <br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>prime<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>modpow<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span>mf<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span>                                             <br/>\u00a0<br/><span class=\"re3\">mf</span><span class=\"br0\">(</span><span class=\"re5\">P</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">merseneFactor</span><span class=\"br0\">(</span><span class=\"re5\">P</span><span class=\"sy1\">,</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">sqrt</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"re5\">P</span><span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">.</span>                       <br/>\u00a0<br/><span class=\"re3\">merseneFactor</span><span class=\"br0\">(</span><span class=\"re5\">P</span><span class=\"sy1\">,</span><span class=\"re5\">Limit</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">Acc</span> <span class=\"sy3\">&gt;=</span> <span class=\"re5\">Limit</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"None found\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>       <br/><span class=\"re3\">merseneFactor</span><span class=\"br0\">(</span><span class=\"re5\">P</span><span class=\"sy1\">,</span><span class=\"re5\">Limit</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span>                                                 <br/>        <span class=\"re5\">Q</span> <span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"sy3\">*</span> <span class=\"re5\">P</span> <span class=\"sy3\">*</span> <span class=\"re5\">Acc</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span>                                                  <br/>        <span class=\"re5\">Isprime</span> <span class=\"sy3\">=</span> <span class=\"re3\">prime</span><span class=\"br0\">(</span><span class=\"re5\">Q</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>                                                   <br/>        <span class=\"re5\">Mod</span> <span class=\"sy3\">=</span> <span class=\"re3\">modpow</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"re5\">P</span><span class=\"sy1\">,</span><span class=\"re5\">Q</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>                                                  <br/>\u00a0<br/>        <span class=\"kw1\">if</span>                                                                    <br/>            <span class=\"re5\">Isprime</span> <span class=\"sy3\">==</span> false <span class=\"sy1\">-&gt;</span>                                               <br/>               <span class=\"re3\">merseneFactor</span><span class=\"br0\">(</span><span class=\"re5\">P</span><span class=\"sy1\">,</span><span class=\"re5\">Limit</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>                                  <br/>\u00a0<br/>            <span class=\"re5\">Q</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">8</span> <span class=\"sy3\">=/=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">andalso</span> <span class=\"re5\">Q</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">8</span> <span class=\"sy3\">=/=</span> <span class=\"nu0\">7</span> <span class=\"sy1\">-&gt;</span>                            <br/>               <span class=\"re3\">merseneFactor</span><span class=\"br0\">(</span><span class=\"re5\">P</span><span class=\"sy1\">,</span><span class=\"re5\">Limit</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>                                  <br/>\u00a0<br/>             <span class=\"re5\">Mod</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span>                                                      <br/>                <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"M~w is composite with Factor: ~w~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">P</span><span class=\"sy1\">,</span><span class=\"re5\">Q</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>        <br/>\u00a0<br/>            true <span class=\"sy1\">-&gt;</span> <span class=\"re3\">merseneFactor</span><span class=\"br0\">(</span><span class=\"re5\">P</span><span class=\"sy1\">,</span><span class=\"re5\">Limit</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>                              <br/>        <span class=\"kw1\">end</span><span class=\"sy1\">.</span>                                                                  <br/>\u00a0<br/><span class=\"re3\">modpow</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">E</span><span class=\"sy1\">,</span> <span class=\"re5\">M</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">modpow</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">E</span><span class=\"sy1\">,</span> <span class=\"re5\">M</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span>                                        <br/>\u00a0<br/><span class=\"re3\">modpow</span><span class=\"br0\">(</span><span class=\"re5\">_B</span><span class=\"sy1\">,</span> <span class=\"re5\">E</span><span class=\"sy1\">,</span> <span class=\"re5\">_M</span><span class=\"sy1\">,</span> <span class=\"re5\">R</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">E</span> <span class=\"sy3\">=&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">R</span><span class=\"sy1\">;</span>                                        <br/><span class=\"re3\">modpow</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">E</span><span class=\"sy1\">,</span> <span class=\"re5\">M</span><span class=\"sy1\">,</span> <span class=\"re5\">R</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span>                                                         <br/>    <span class=\"re5\">R1</span> <span class=\"sy3\">=</span> <span class=\"kw1\">case</span> <span class=\"re5\">E</span> <span class=\"kw2\">band</span> <span class=\"nu0\">1</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">of</span>                                               <br/>             true <span class=\"sy1\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re5\">R</span> <span class=\"sy3\">*</span> <span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"kw2\">rem</span> <span class=\"re5\">M</span><span class=\"sy1\">;</span>                                           <br/>             false  <span class=\"sy1\">-&gt;</span> <span class=\"re5\">R</span>                                                      <br/>         <span class=\"kw1\">end</span><span class=\"sy1\">,</span>                                                                 <br/>    <span class=\"re3\">modpow</span><span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy3\">*</span><span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"kw2\">rem</span> <span class=\"re5\">M</span><span class=\"sy1\">,</span> <span class=\"re5\">E</span> <span class=\"kw2\">bsr</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">M</span><span class=\"sy1\">,</span> <span class=\"re5\">R1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span>                                     <br/>\u00a0<br/><span class=\"re3\">prime</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">divisors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span>     <br/>\u00a0<br/><span class=\"re3\">divisors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span>                 <br/><span class=\"re3\">divisors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span>                       <br/>   <span class=\"kw1\">case</span> <span class=\"re5\">N</span> <span class=\"kw2\">rem</span> <span class=\"re5\">C</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">of</span>                <br/>      true  <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">;</span>                   <br/>      false <span class=\"sy1\">-&gt;</span> <span class=\"re3\">divisors</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">C</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>         <br/>   <span class=\"kw1\">end</span><span class=\"sy1\">.</span>                                 <br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 33, "block": "<pre class=\"text highlighted_source\">: prime? ( odd --\u00a0? )<br/>  3<br/>  begin 2dup dup * &gt;=<br/>  while 2dup mod 0=<br/>        if 2drop false exit<br/>        then 2 +<br/>  repeat   2drop true\u00a0;<br/>\u00a0<br/>: 2-exp-mod { e m -- 2^e mod m }<br/>  1<br/>  0 30 do<br/>    e 1 i lshift &gt;= if<br/>      dup *<br/>      e 1 i lshift and if 2* then<br/>      m mod<br/>    then<br/>  -1 +loop\u00a0;<br/>\u00a0<br/>: factor-mersenne ( exponent -- factor )<br/>  16384 over /  dup 2 &lt; abort\" Exponent too large!\"<br/>  1 do<br/>    dup i * 2* 1+      ( q )<br/>    dup prime? if<br/>      dup 7 and  dup 1 = swap 7 = or if<br/>        2dup 2-exp-mod 1 = if<br/>          nip unloop exit<br/>        then<br/>      then<br/>    then drop<br/>  loop drop 0\u00a0;<br/>\u00a0<br/> 929 factor-mersenne .  \\ 13007<br/>4423 factor-mersenne .  \\ 0</pre>"}, {"lang": "Fortran", "loc": 52, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">PROGRAM</span> EXAMPLE<br/>  <span class=\"kw3\">IMPLICIT</span> <span class=\"kw3\">NONE</span><br/>  <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"kw4\">exponent</span>, factor<br/>\u00a0<br/>  WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Enter exponent of Mersenne number\"</span><br/>  READ<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw4\">exponent</span><br/>  factor <span class=\"sy0\">=</span> Mfactor<span class=\"br0\">(</span><span class=\"kw4\">exponent</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>factor <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>    WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"No Factor found\"</span><br/>  <span class=\"kw1\">ELSE</span><br/>    WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">\"(A,I0,A,I0)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"M\"</span>, <span class=\"kw4\">exponent</span>, <span class=\"st0\">\" has a factor: \"</span>, factor<br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>\u00a0<br/><span class=\"co1\">CONTAINS</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> isPrime<span class=\"br0\">(</span><span class=\"kw1\">number</span><span class=\"br0\">)</span><br/><span class=\"co1\">!   code omitted - see [[Primality by Trial Division]]</span><br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span>  Mfactor<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>  <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">Mfactor</span><br/>  <span class=\"kw3\">INTEGER</span>, <span class=\"kw3\">INTENT</span><span class=\"br0\">(</span><span class=\"kw3\">IN</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">p</span><br/>  <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, k,  maxk, msb, n, q<br/>\u00a0<br/>  <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">30</span>, <span class=\"nu0\">0</span> , <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">IF</span><span class=\"br0\">(</span><span class=\"kw4\">BTEST</span><span class=\"br0\">(</span>p, i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>      msb <span class=\"sy0\">=</span> i<br/>      <span class=\"kw1\">EXIT</span><br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>\u00a0<br/>  maxk <span class=\"sy0\">=</span> <span class=\"nu0\">16384</span>  <span class=\"sy0\">/</span> p     <span class=\"co1\">! limit for k to prevent overflow of 32 bit signed integer</span><br/>  <span class=\"kw1\">DO</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, maxk<br/>    q <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>p<span class=\"sy0\">*</span>k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw2\">.<span class=\"kw4\">NOT</span>.</span> isPrime<span class=\"br0\">(</span>q<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">CYCLE</span><br/>    <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">MOD</span><span class=\"br0\">(</span>q, <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">/=</span> <span class=\"nu0\">1</span> <span class=\"kw2\">.<span class=\"me1\">AND</span>.</span> <span class=\"kw4\">MOD</span><span class=\"br0\">(</span>q, <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">/=</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"kw1\">CYCLE</span><br/>    n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> msb, <span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">BTEST</span><span class=\"br0\">(</span>p, i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>        n <span class=\"sy0\">=</span> <span class=\"kw4\">MOD</span><span class=\"br0\">(</span>n<span class=\"sy0\">*</span>n<span class=\"sy0\">*</span><span class=\"nu0\">2</span>, q<span class=\"br0\">)</span><br/>      <span class=\"kw1\">ELSE</span><br/>        n <span class=\"sy0\">=</span> <span class=\"kw4\">MOD</span><span class=\"br0\">(</span>n<span class=\"sy0\">*</span>n, q<span class=\"br0\">)</span><br/>      <span class=\"kw1\">ENDIF</span><br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>    <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>      Mfactor <span class=\"sy0\">=</span> q<br/>      <span class=\"kw1\">RETURN</span><br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>  Mfactor <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span><br/><span class=\"kw1\">END</span> <span class=\"kw1\">PROGRAM</span> EXAMPLE</pre>"}, {"lang": "FreeBASIC", "loc": 45, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> isPrime<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>  <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> <span class=\"nu0\">2</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> n = <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> <span class=\"nu0\">3</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> n = <span class=\"nu0\">3</span><br/>  <span class=\"kw1\">Dim</span> d <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">5</span><br/>  <span class=\"kw1\">While</span> d * d &lt;= n<br/>    <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> d = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>    d += <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> d = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>    d += <span class=\"nu0\">4</span><br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">True</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' test 929 plus all prime numbers below 100 which are known not to be Mersenne primes</span><br/><span class=\"kw1\">Dim</span> q<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"br0\">{</span><span class=\"nu0\">11</span>, <span class=\"nu0\">23</span>, <span class=\"nu0\">29</span>, <span class=\"nu0\">37</span>, <span class=\"nu0\">41</span>, <span class=\"nu0\">43</span>, <span class=\"nu0\">47</span>, <span class=\"nu0\">53</span>, <span class=\"nu0\">59</span>, <span class=\"nu0\">67</span>, <span class=\"nu0\">71</span>, <span class=\"nu0\">73</span>, <span class=\"nu0\">79</span>, <span class=\"nu0\">83</span>, <span class=\"nu0\">97</span>, <span class=\"nu0\">929</span><span class=\"br0\">}</span><br/><span class=\"kw1\">For</span> k <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">16</span><br/>  <span class=\"kw1\">If</span> isPrime<span class=\"br0\">(</span>q<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> d, i, p, r = q<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <br/>    <span class=\"kw1\">While</span> r &gt; <span class=\"nu0\">0</span>\u00a0: r <span class=\"kw1\">Shl</span>= <span class=\"nu0\">1</span>\u00a0: <span class=\"kw1\">Wend</span><br/>    d = <span class=\"nu0\">2</span> * q<span class=\"br0\">(</span>k<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Do</span><br/>      i = <span class=\"nu0\">1</span><br/>      p = r<br/>      <span class=\"kw1\">While</span> p &lt;&gt; <span class=\"nu0\">0</span><br/>        i = <span class=\"br0\">(</span>i * i<span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> d<br/>        <span class=\"kw1\">If</span> p &lt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> i *= <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">If</span> i &gt; d <span class=\"kw1\">Then</span> i -= d<br/>        p <span class=\"kw1\">Shl</span>= <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">Wend</span><br/>      <span class=\"kw1\">If</span> i &lt;&gt; <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>        d += <span class=\"nu0\">2</span> * q<span class=\"br0\">(</span>k<span class=\"br0\">)</span><br/>      <span class=\"kw1\">Else</span><br/>        <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span><br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Loop</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"2^\"</span>; <span class=\"kw1\">Str</span><span class=\"br0\">(</span>q<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">Tab</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>; <span class=\"st0\">\" - 1 = 0 (mod\"</span>; d; <span class=\"st0\">\")\"</span> <br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>q<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"st0\">\" is not prime\"</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "GAP", "loc": 32, "block": "<pre class=\"text highlighted_source\">MersenneSmallFactor\u00a0:= function(n)<br/>    local k, m, d;<br/>    if IsPrime(n) then<br/>        d\u00a0:= 2*n;<br/>        m\u00a0:= 1;<br/>        for k in [1 .. 1000000] do<br/>            m\u00a0:= m + d;<br/>            if PowerModInt(2, n, m) = 1 then<br/>                return m;<br/>            fi;<br/>        od;<br/>    fi;<br/>    return fail;<br/>end;<br/>\u00a0<br/>\u00a0<br/># If n is not prime, fail immediately<br/>MersenneSmallFactor(15);<br/># fail<br/>\u00a0<br/>MersenneSmallFactor(929);<br/># 13007<br/>\u00a0<br/>MersenneSmallFactor(1009);<br/># 3454817<br/>\u00a0<br/># We stop at k = 1000000 in 2*k*n + 1, so it may fail if 2^n - 1 has only larger factors<br/>MersenneSmallFactor(101);<br/># fail<br/>\u00a0<br/>FactorsInt(2^101-1);<br/># [ 7432339208719, 341117531003194129 ]</pre>"}, {"lang": "Go", "loc": 81, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// limit search to small primes.  really this is higher than</span><br/><span class=\"co1\">// you'd want it, but it's fun to factor M67.</span><br/><span class=\"kw1\">const</span> qlimit <span class=\"sy2\">=</span> <span class=\"nu1\">2e8</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    mtest<span class=\"sy1\">(</span><span class=\"nu0\">31</span><span class=\"sy1\">)</span><br/>    mtest<span class=\"sy1\">(</span><span class=\"nu0\">67</span><span class=\"sy1\">)</span><br/>    mtest<span class=\"sy1\">(</span><span class=\"nu0\">929</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> mtest<span class=\"sy1\">(</span>m <span class=\"kw4\">int32</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// the function finds odd prime factors by</span><br/>    <span class=\"co1\">// searching no farther than sqrt(N), where N = 2^m-1.</span><br/>    <span class=\"co1\">// the first odd prime is 3, 3^2 = 9, so M3 = 7 is still too small.</span><br/>    <span class=\"co1\">// M4 = 15 is first number for which test is meaningful.</span><br/>    <span class=\"kw1\">if</span> m &lt; <span class=\"nu0\">4</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%d &lt; 4.  M%d not tested.<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> m<span class=\"sy1\">,</span> m<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    flimit <span class=\"sy2\">:=</span> math<span class=\"sy3\">.</span>Sqrt<span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Pow<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>m<span class=\"sy1\">))</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">var</span> qlast <span class=\"kw4\">int32</span><br/>    <span class=\"kw1\">if</span> flimit &lt; qlimit <span class=\"sy1\">{</span><br/>        qlast <span class=\"sy2\">=</span> <span class=\"kw4\">int32</span><span class=\"sy1\">(</span>flimit<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        qlast <span class=\"sy2\">=</span> qlimit<br/>    <span class=\"sy1\">}</span><br/>    composite <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">bool</span><span class=\"sy1\">,</span> qlast<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    sq <span class=\"sy2\">:=</span> <span class=\"kw4\">int32</span><span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Sqrt<span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span>qlast<span class=\"sy1\">)))</span><br/>loop<span class=\"sy1\">:</span><br/>    <span class=\"kw1\">for</span> q <span class=\"sy2\">:=</span> <span class=\"kw4\">int32</span><span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">);</span> <span class=\"sy1\">;</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> q &lt;<span class=\"sy2\">=</span> sq <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> q <span class=\"sy3\">*</span> q<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> qlast<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> <span class=\"sy2\">+=</span> q <span class=\"sy1\">{</span><br/>                composite<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> q8 <span class=\"sy2\">:=</span> q <span class=\"sy3\">%</span> <span class=\"nu0\">8</span><span class=\"sy1\">;</span> <span class=\"sy1\">(</span>q8 <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy3\">||</span> q8 <span class=\"sy3\">==</span> <span class=\"nu0\">7</span><span class=\"sy1\">)</span> &amp;&amp; modPow<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> m<span class=\"sy1\">,</span> q<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"M%d has factor\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> m<span class=\"sy1\">,</span> q<span class=\"sy1\">)</span><br/>            <span class=\"kw1\">return</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>            q <span class=\"sy2\">+=</span> <span class=\"nu0\">2</span><br/>            <span class=\"kw1\">if</span> q &gt; qlast <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">break</span> loop<br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>composite<span class=\"sy1\">[</span>q<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"No factors of M%d found.<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> m<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// base b to power p, mod m</span><br/><span class=\"kw4\">func</span> modPow<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> p<span class=\"sy1\">,</span> m <span class=\"kw4\">int32</span><span class=\"sy1\">)</span> <span class=\"kw4\">int32</span> <span class=\"sy1\">{</span><br/>    pow <span class=\"sy2\">:=</span> <span class=\"kw4\">int64</span><span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    b64 <span class=\"sy2\">:=</span> <span class=\"kw4\">int64</span><span class=\"sy1\">(</span>b<span class=\"sy1\">)</span><br/>    m64 <span class=\"sy2\">:=</span> <span class=\"kw4\">int64</span><span class=\"sy1\">(</span>m<span class=\"sy1\">)</span><br/>    bit <span class=\"sy2\">:=</span> <span class=\"kw4\">uint</span><span class=\"sy1\">(</span><span class=\"nu0\">30</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu0\">1</span>&lt;&lt;bit&amp;p <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        bit<span class=\"sy2\">--</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>        pow <span class=\"sy2\">*=</span> pow<br/>        <span class=\"kw1\">if</span> <span class=\"nu0\">1</span>&lt;&lt;bit&amp;p <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            pow <span class=\"sy2\">*=</span> b64<br/>        <span class=\"sy1\">}</span><br/>        pow <span class=\"sy2\">%=</span> m64<br/>        <span class=\"kw1\">if</span> bit <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>        bit<span class=\"sy2\">--</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">int32</span><span class=\"sy1\">(</span>pow<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 13, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"kw1\">import</span> HFM<span class=\"sy0\">.</span>Primes <span class=\"br0\">(</span>isPrime<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Arrow<br/>\u00a0<br/>int2bin <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a><span class=\"sy0\">.</span>unfoldr<span class=\"br0\">(</span>\\x <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> x<span class=\"sy0\">==</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> Nothing<br/>                                <span class=\"kw1\">else</span> Just <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:uncurry\"><span class=\"kw3\">uncurry</span></a><span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a><span class=\"sy0\">$</span><span class=\"br0\">(</span><span class=\"sy0\">,</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">$</span>divMod x <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>trialfac m <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">1</span><span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:dropWhile\"><span class=\"kw3\">dropWhile</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">/=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>\\q <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>`<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` q<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">)</span><span class=\"sy0\">.</span>pm<span class=\"br0\">)</span> <span class=\"nu0\">1</span> bs<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> qs<br/>  <span class=\"kw1\">where</span> qs <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span>liftM2 <span class=\"br0\">(</span><span class=\"sy0\">&amp;&amp;</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>liftM2 <span class=\"br0\">(</span><span class=\"sy0\">||</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">==</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span><span class=\"br0\">(</span>`<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>`<span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span> isPrime <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>              <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:succ\"><span class=\"kw3\">succ</span></a><span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>m<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:enumFromTo\"><span class=\"kw3\">enumFromTo</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">$</span> m `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><br/>        bs <span class=\"sy0\">=</span> int2bin m<br/>        pm n b <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">^</span>b<span class=\"sy0\">*</span>n<span class=\"sy0\">*</span>n</pre>"}, {"lang": "Icon and Unicon", "loc": 32, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    p <span class=\"sy0\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"nu0\">929</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"M\"</span><span class=\"sy0\">,</span>p<span class=\"sy0\">,</span><span class=\"st0\">\" has a factor \"</span><span class=\"sy0\">,</span>mfactor<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> mfactor<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> isPrime<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>        limit <span class=\"sy0\">:=</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">^</span>p<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        k <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">while</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>p<span class=\"sy0\">*</span>k<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> limit <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            q <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>p<span class=\"sy0\">*</span>k<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>            <span class=\"kw1\">if</span> isPrime<span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>q<span class=\"sy0\">%</span>8 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">|</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> btest<span class=\"br0\">(</span>p<span class=\"sy0\">,</span>q<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> q<br/>            k <span class=\"sy0\">+:=</span> <span class=\"nu0\">1</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> btest<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> q<span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">^</span>p <span class=\"sy0\">%</span> q<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> isPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> n<span class=\"sy0\">%</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><span class=\"sy0\">|</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> n <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>    d <span class=\"sy0\">:=</span> <span class=\"nu0\">5</span><br/>    <span class=\"kw1\">while</span> d<span class=\"sy0\">*</span>d <span class=\"sy0\">&lt;=</span> n <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> n<span class=\"sy0\">%</span>d <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span><br/>        d <span class=\"sy0\">+:=</span> <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">if</span> n<span class=\"sy0\">%</span>d <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span><br/>        d <span class=\"sy0\">+:=</span> <span class=\"nu0\">4</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">trialfac=: <span class=\"nu0\">3</span>\u00a0: <span class=\"nu0\">0</span><br/>  qs=. <span class=\"sy0\">(</span>#~<span class=\"nu0\">8</span>&amp;<span class=\"sy0\">(</span><span class=\"nu0\">1</span>=|+.<span class=\"nu0\">7</span>=|<span class=\"sy0\">))(</span>#~<span class=\"nu0\">1</span>&amp;p:<span class=\"sy0\">)</span><span class=\"nu0\">1</span>+<span class=\"sy0\">(</span>*<span class=\"sy0\">(</span><span class=\"nu0\">1x</span><a class=\"__cf_email__\" data-cfemail=\"ecc785c2ac\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&lt;:@&lt;.<span class=\"sy0\">)</span>&amp;.-:<span class=\"sy0\">)</span><span class=\"kw2\">y</span><br/>  qs#~<span class=\"nu0\">1</span>=qs&amp;|@<span class=\"sy0\">(</span><span class=\"nu0\">2</span>&amp;^@[**:@]<span class=\"sy0\">)</span>/ <span class=\"nu0\">1</span>,~ |.#: <span class=\"kw2\">y</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 70, "block": "<pre class=\"java highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">java.math.BigInteger</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> MersenneFactorCheck<br/><span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> TWO <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> isPrime<span class=\"br0\">(</span><span class=\"kw4\">long</span> n<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">long</span> maxFactor <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">long</span><span class=\"br0\">)</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">long</span> possibleFactor <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> possibleFactor <span class=\"sy0\">&lt;=</span> maxFactor<span class=\"sy0\">;</span> possibleFactor <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> possibleFactor<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> findFactorMersenneNumber<span class=\"br0\">(</span><span class=\"kw4\">int</span> primeP<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>primeP <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> bigP <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>primeP<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> m <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span>.<span class=\"me1\">shiftLeft</span><span class=\"br0\">(</span>primeP<span class=\"br0\">)</span>.<span class=\"me1\">subtract</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// There are more complicated ways of getting closer to sqrt(), but not that important here, so go with simple</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> maxFactor <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span>.<span class=\"me1\">shiftLeft</span><span class=\"br0\">(</span><span class=\"br0\">(</span>primeP <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> twoP <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>primeP <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> possibleFactor <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> possibleFactorBits12 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> twoPBits12 <span class=\"sy0\">=</span> primeP <span class=\"sy0\">&amp;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>possibleFactor <span class=\"sy0\">=</span> possibleFactor.<span class=\"me1\">add</span><span class=\"br0\">(</span>twoP<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>maxFactor<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      possibleFactorBits12 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>possibleFactorBits12 <span class=\"sy0\">+</span> twoPBits12<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>      <span class=\"co1\">// \"Furthermore, q must be 1 or 7 mod 8\". We know it's odd due to the +1 done above, so bit 0 is set. Therefore, we only care about bits 1 and 2 equaling 00 or 11</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>possibleFactorBits12 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>possibleFactorBits12 <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>TWO.<span class=\"me1\">modPow</span><span class=\"br0\">(</span>bigP, possibleFactor<span class=\"br0\">)</span>.<span class=\"me1\">equals</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">return</span> possibleFactor<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> checkMersenneNumber<span class=\"br0\">(</span><span class=\"kw4\">int</span> p<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>isPrime<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"M\"</span> <span class=\"sy0\">+</span> p <span class=\"sy0\">+</span> <span class=\"st0\">\" is not prime\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> factor <span class=\"sy0\">=</span> findFactorMersenneNumber<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>factor <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"M\"</span> <span class=\"sy0\">+</span> p <span class=\"sy0\">+</span> <span class=\"st0\">\" is prime\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"M\"</span> <span class=\"sy0\">+</span> p <span class=\"sy0\">+</span> <span class=\"st0\">\" is not prime, has factor \"</span> <span class=\"sy0\">+</span> factor<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> p <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> p <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">50</span><span class=\"sy0\">;</span> p<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>      checkMersenneNumber<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    checkMersenneNumber<span class=\"br0\">(</span><span class=\"nu0\">929</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "JavaScript", "loc": 41, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> mersenne_factor<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> limit<span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> q<br/>  limit <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>p<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  while <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>k<span class=\"sy0\">*</span>p <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> limit<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    q <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>k<span class=\"sy0\">*</span>p <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isPrime<span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>q <span class=\"sy0\">%</span> <span class=\"nu0\">8</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> q <span class=\"sy0\">%</span> <span class=\"nu0\">8</span> <span class=\"sy0\">==</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> trial_factor<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>p<span class=\"sy0\">,</span>q<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> q <span class=\"co1\">// q is a factor of 2**p-1</span><br/>    <span class=\"br0\">}</span><br/>    k<span class=\"sy0\">++</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw2\">null</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> isPrime<span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> value<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>value <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>value <span class=\"sy0\">%</span> i <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\t <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> trial_factor<span class=\"br0\">(</span>base<span class=\"sy0\">,</span> exp<span class=\"sy0\">,</span> mod<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> square<span class=\"sy0\">,</span> bits<br/>  square <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  bits <span class=\"sy0\">=</span> exp.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>ln<span class=\"sy0\">=</span>bits.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>ln<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    square <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>square<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>bits<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> base <span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> mod<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span>square <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> check_mersenne<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> f<span class=\"sy0\">,</span> result<br/>  console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"M\"</span><span class=\"sy0\">+</span>p<span class=\"sy0\">+</span><span class=\"st0\">\" = 2^\"</span><span class=\"sy0\">+</span>p<span class=\"sy0\">+</span><span class=\"st0\">\"-1 is \"</span><span class=\"br0\">)</span><br/>  f <span class=\"sy0\">=</span> mersenne_factor<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>  console.<span class=\"me1\">log</span><span class=\"br0\">(</span>f <span class=\"sy0\">==</span> <span class=\"kw2\">null</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"prime\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"composite with factor \"</span><span class=\"sy0\">+</span>f<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 24, "block": "<pre class=\"text highlighted_source\"># v0.6<br/>\u00a0<br/>using Primes<br/>\u00a0<br/>function mersennefactor(p::Int)::Int<br/>    maxk = floor(Int, 16384 / p)<br/>    for k in 0:maxk<br/>        q = 2p * k + 1<br/>        if\u00a0! Primes.isprime(q)<br/>            continue<br/>        elseif\u00a0! (q\u00a0% 8 in (1, 7))<br/>            continue<br/>        elseif powermod(2, p, q) == 1<br/>            return q<br/>        end<br/>    end<br/>    return -1<br/>end<br/>\u00a0<br/>for i in push!(collect(1:20), 929)<br/>    mf = mersennefactor(i)<br/>    if mf\u00a0!= -1; println(\"M$i = \", mf, \" \u00d7 \", big(2) ^ i \u00f7 mf)<br/>    else println(\"M$i is prime\") end<br/>end</pre>"}, {"lang": "Kotlin", "loc": 47, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun isPrime<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> n <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> d <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>d <span class=\"sy0\">*</span> d <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        d +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        d +<span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// test 929 plus all prime numbers below 100 which are known not to be Mersenne primes</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> q <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">11</span>, <span class=\"nu0\">23</span>, <span class=\"nu0\">29</span>, <span class=\"nu0\">37</span>, <span class=\"nu0\">41</span>, <span class=\"nu0\">43</span>, <span class=\"nu0\">47</span>, <span class=\"nu0\">53</span>, <span class=\"nu0\">59</span>, <span class=\"nu0\">67</span>, <span class=\"nu0\">71</span>, <span class=\"nu0\">73</span>, <span class=\"nu0\">79</span>, <span class=\"nu0\">83</span>, <span class=\"nu0\">97</span>, <span class=\"nu0\">929</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>k in <span class=\"nu0\">0</span> until q.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isPrime<span class=\"br0\">(</span>q<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i<span class=\"sy0\">:</span> Long<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> d<span class=\"sy0\">:</span> Int<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> p<span class=\"sy0\">:</span> Int<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> r<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> q<span class=\"br0\">[</span>k<span class=\"br0\">]</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>r <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> r <span class=\"sy0\">=</span> r shl <span class=\"nu0\">1</span><br/>            d <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> q<span class=\"br0\">[</span>k<span class=\"br0\">]</span> + <span class=\"nu0\">1</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                i <span class=\"sy0\">=</span> 1L<br/>                p <span class=\"sy0\">=</span> r<br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>p <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    i <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> i<span class=\"br0\">)</span> <span class=\"sy0\">%</span> d<br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>p <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> i <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><br/>                    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> d<span class=\"br0\">)</span> i -<span class=\"sy0\">=</span> d<br/>                    p <span class=\"sy0\">=</span> p shl <span class=\"nu0\">1</span><br/>                <span class=\"br0\">}</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">!=</span> 1L<span class=\"br0\">)</span><br/>                    d +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> q<span class=\"br0\">[</span>k<span class=\"br0\">]</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>                    break<br/>            <span class=\"br0\">}</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"2^${\"</span><span class=\"sy0\">%</span>3d<span class=\"st0\">\".format(q[k])} - 1 = 0 (mod $d)\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"${q[k]} is not prime\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lingo", "loc": 23, "block": "<pre class=\"text highlighted_source\">on modPow (b, e, m)<br/>    bits = getBits(e)<br/>    sq = 1<br/>    repeat while TRUE<br/>        tb = bits[1]<br/>        bits.deleteAt(1)<br/>        sq = sq*sq<br/>        if tb then sq=sq*b<br/>        sq = sq mod m<br/>        if bits.count=0 then return sq<br/>    end repeat<br/>end<br/>\u00a0<br/>on getBits (n)<br/>    bits = []<br/>    f = 1<br/>    repeat while TRUE<br/>        bits.addAt(1, bitAnd(f, n)&gt;0)<br/>        f = f * 2<br/>        if f&gt;n then exit repeat<br/>    end repeat<br/>    return bits<br/>end</pre>"}, {"lang": "Mathematica", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>For[i = 2, i &lt; Prime[1000000], i = NextPrime[i], <br/> If[Mod[2^44497, i] == 1, <br/>  Print[\"divisible by \"&lt;&gt;i]]]; Print[\"prime test passed; call Lucas and Lehmer\"]</pre>"}, {"lang": "Maxima", "loc": 7, "block": "<pre class=\"text highlighted_source\">mersenne_fac(p)\u00a0:= block([m: 2^p - 1, k: 1],<br/>   while mod(m, 2 * k * p + 1) # 0 do k: k + 1,<br/>   2 * k * p + 1<br/>)$<br/>\u00a0<br/>mersenne_fac(929);<br/>/* 13007 */</pre>"}, {"lang": "Nim", "loc": 26, "block": "<pre class=\"text highlighted_source\">import math<br/>\u00a0<br/>proc isPrime(a: int): bool =<br/>  if a == 2: return true<br/>  if a &lt; 2 or a mod 2 == 0: return false<br/>  for i in countup(3, int sqrt(float a), 2):<br/>    if a mod i == 0:<br/>      return false<br/>  return true<br/>\u00a0<br/>const q = 929<br/>if not isPrime q: quit 1<br/>var r = q<br/>while r &gt; 0: r = r shl 1<br/>var d = 2 * q + 1<br/>while true:<br/>  var i = 1<br/>  var p = r<br/>  while p\u00a0!= 0:<br/>    i = (i * i) mod d<br/>    if p &lt; 0: i *= 2<br/>    if i &gt; d: i -= d<br/>    p = p shl 1<br/>  if i\u00a0!= 1: d += 2 * q<br/>  else: break<br/>echo \"2^\",q,\" - 1 = 0 (mod \",d,\")\"</pre>"}, {"lang": "Octave", "loc": 34, "block": "<pre class=\"octave highlighted_source\"><span class=\"co2\">% test a bit; lsb is 1 (like built-in bit* ops) </span><br/><span class=\"kw4\">function</span> b <span class=\"sy3\">=</span> bittst<span class=\"br0\">(</span>n<span class=\"sy5\">,</span> p<span class=\"br0\">)</span><br/>  b <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/bitand.html\"><span class=\"kw5\">bitand</span></a><span class=\"br0\">(</span>n<span class=\"sy5\">,</span> <span class=\"nu0\">2</span><span class=\"sy2\">^</span><span class=\"br0\">(</span>p<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/><span class=\"kw4\">function</span> f <span class=\"sy3\">=</span> Mfactor<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>  <span class=\"co2\">% msb is the index of the first non-zero bit</span><br/>  <span class=\"br0\">[</span>b<span class=\"sy5\">,</span> msb<span class=\"br0\">]</span> <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/max.html\"><span class=\"kw6\">max</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/bitand.html\"><span class=\"kw5\">bitand</span></a><span class=\"br0\">(</span>p<span class=\"sy5\">,</span> <span class=\"nu0\">2</span> <span class=\"sy2\">.^</span> <span class=\"br0\">[</span><span class=\"nu0\">32</span><span class=\"sy4\">:</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">:</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  maxk <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/floor.html\"><span class=\"kw5\">floor</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/sqrt.html\"><span class=\"kw5\">sqrt</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/intmax.html\"><span class=\"kw5\">intmax</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">/</span> p<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">for</span> k <span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"sy4\">:</span> maxk<br/>    q <span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">*</span>p<span class=\"sy1\">*</span>k <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><span class=\"sy5\">;</span><br/>    <span class=\"kw4\">if</span> <span class=\"br0\">(</span> <span class=\"sy0\">!</span> <a href=\"http://octave.sourceforge.net/octave/function/isprime.html\"><span class=\"kw6\">isprime</span></a><span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>      <span class=\"kw4\">continue</span><span class=\"sy5\">;</span><br/>    <span class=\"kw4\">endif</span><br/>    <span class=\"kw4\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/mod.html\"><span class=\"kw5\">mod</span></a><span class=\"br0\">(</span>q<span class=\"sy5\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span> <a href=\"http://octave.sourceforge.net/octave/function/mod.html\"><span class=\"kw5\">mod</span></a><span class=\"br0\">(</span>q<span class=\"sy5\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>      <span class=\"kw4\">continue</span><span class=\"sy5\">;</span><br/>    <span class=\"kw4\">endif</span><br/>    n <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy5\">;</span><br/>    <span class=\"kw4\">for</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a> <span class=\"sy3\">=</span> msb<span class=\"sy4\">:</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">:</span><span class=\"nu0\">1</span><br/>      <span class=\"kw4\">if</span> <span class=\"br0\">(</span> bittst<span class=\"br0\">(</span>p<span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\tn <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/mod.html\"><span class=\"kw5\">mod</span></a><span class=\"br0\">(</span>n<span class=\"sy1\">*</span>n<span class=\"sy1\">*</span><span class=\"nu0\">2</span><span class=\"sy5\">,</span> q<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>      <span class=\"kw4\">else</span><br/>\tn <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/mod.html\"><span class=\"kw5\">mod</span></a><span class=\"br0\">(</span>n<span class=\"sy1\">*</span>n<span class=\"sy5\">,</span> q<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>      <span class=\"kw4\">endif</span><br/>    <span class=\"kw4\">endfor</span><br/>    <span class=\"kw4\">if</span> <span class=\"br0\">(</span> n<span class=\"sy0\">==</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>      f <span class=\"sy3\">=</span> q<span class=\"sy5\">;</span><br/>      <span class=\"kw4\">return</span><br/>    <span class=\"kw4\">endif</span><br/>  <span class=\"kw4\">endfor</span><br/>  f <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/><a href=\"http://octave.sourceforge.net/octave/function/printf.html\"><span class=\"kw5\">printf</span></a><span class=\"br0\">(</span><span class=\"co4\">\"%d\\n\"</span><span class=\"sy5\">,</span> Mfactor<span class=\"br0\">(</span><span class=\"nu0\">929</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span></pre>"}, {"lang": "PARI/GP", "loc": 7, "block": "<pre class=\"parigp highlighted_source\">factorMersenne<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">forstep</span><span class=\"br0\">(</span>q<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">*</span>p<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"kw1\">sqrt</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;&lt;</span><span class=\"br0\">(</span>p<span class=\"sy0\">\\</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"sy0\">*</span>p<span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>q<span class=\"sy0\">%</span><span class=\"nu2\">8</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">Mod</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span> q<span class=\"br0\">)</span><span class=\"sy0\">^</span>p<span class=\"sy0\">==</span><span class=\"nu1\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span>q<span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"nu1\">1</span><span class=\"sy0\">&lt;&lt;</span>p<span class=\"sy0\">-</span><span class=\"nu1\">1</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>factorMersenne<span class=\"br0\">(</span><span class=\"nu1\">929</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 84, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> FactorsMersenneNumber<span class=\"br0\">(</span>input<span class=\"sy1\">,</span> output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> isPrime<span class=\"br0\">(</span>n<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    d<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    isPrime <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">true</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      isPrime <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>n <span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      exit<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"kw1\">mod</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      isPrime <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>n <span class=\"sy3\">=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      exit<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    d <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">5</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">while</span> d<span class=\"sy3\">*</span>d &lt;<span class=\"sy3\">=</span> n <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"kw1\">mod</span> d<span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">begin</span><br/>\tisPrime <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/>\texit<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      d <span class=\"sy1\">:</span><span class=\"sy3\">=</span> d <span class=\"sy3\">+</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> btest<span class=\"br0\">(</span>n<span class=\"sy1\">,</span> pos<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    btest <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>n <span class=\"kw1\">shr</span> pos<span class=\"br0\">)</span> <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span> <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> MFactor<span class=\"br0\">(</span>p<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    i<span class=\"sy1\">,</span> k<span class=\"sy1\">,</span>  maxk<span class=\"sy1\">,</span> msb<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> q<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">30</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> btest<span class=\"br0\">(</span>p<span class=\"sy1\">,</span> i<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">begin</span><br/>\tmsb <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">break</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    maxk <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">16384</span> <span class=\"kw1\">div</span> p<span class=\"sy1\">;</span>     <span class=\"co1\">// limit for k to prevent overflow of 32 bit signed integer</span><br/>    <span class=\"kw1\">for</span> k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> maxk <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      q <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy3\">*</span>p<span class=\"sy3\">*</span>k <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> isprime<span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\tcontinue<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>q <span class=\"kw1\">mod</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> &lt;&gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">and</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>q <span class=\"kw1\">mod</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> &lt;&gt; <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\tcontinue<span class=\"sy1\">;</span><br/>      n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> msb <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">if</span> btest<span class=\"br0\">(</span>p<span class=\"sy1\">,</span> i<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t  n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>n<span class=\"sy3\">*</span>n<span class=\"sy3\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">mod</span> q<br/>\t<span class=\"kw1\">else</span><br/>\t  n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>n<span class=\"sy3\">*</span>n<span class=\"br0\">)</span> <span class=\"kw1\">mod</span> q<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> n <span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">begin</span><br/>\tmfactor <span class=\"sy1\">:</span><span class=\"sy3\">=</span> q<span class=\"sy1\">;</span><br/>\texit<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    mfactor <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  exponent<span class=\"sy1\">,</span> factor<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'Enter the exponent of the Mersenne number (suggestion: 929): '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">readln</span><span class=\"br0\">(</span>exponent<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> isPrime<span class=\"br0\">(</span>exponent<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'M'</span><span class=\"sy1\">,</span> exponent<span class=\"sy1\">,</span> <span class=\"st0\">' (2**'</span><span class=\"sy1\">,</span> exponent<span class=\"sy1\">,</span> <span class=\"st0\">' - 1) is not prime.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    exit<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  factor <span class=\"sy1\">:</span><span class=\"sy3\">=</span> MFactor<span class=\"br0\">(</span>exponent<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> factor <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'M'</span><span class=\"sy1\">,</span> exponent<span class=\"sy1\">,</span> <span class=\"st0\">' (2**'</span><span class=\"sy1\">,</span> exponent<span class=\"sy1\">,</span> <span class=\"st0\">' - 1) has no factor.'</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'M'</span><span class=\"sy1\">,</span> exponent<span class=\"sy1\">,</span> <span class=\"st0\">' (2**'</span><span class=\"sy1\">,</span> exponent<span class=\"sy1\">,</span> <span class=\"st0\">' - 1) has the factor: '</span><span class=\"sy1\">,</span> factor<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 61, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> utf8<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> factors <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$p</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@out</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">$p</span> <span class=\"sy0\">*</span> <span class=\"re0\">$p</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"re0\">$p</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@out</span><span class=\"sy0\">,</span> <span class=\"re0\">$p</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"re0\">$n</span> <span class=\"sy0\">/=</span> <span class=\"re0\">$p</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"re0\">$p</span> <span class=\"sy0\">=</span> next_prime<span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@out</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span><span class=\"re0\">@out</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">@out</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> next_prime <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$p</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">do</span> <span class=\"br0\">{</span> <span class=\"re0\">$p</span> <span class=\"sy0\">=</span> <span class=\"re0\">$p</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"sy0\">?</span> <span class=\"nu0\">3</span> <span class=\"sy0\">:</span> <span class=\"re0\">$p</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span> <span class=\"kw1\">until</span> is_prime<span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$p</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%pcache</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> is_prime <span class=\"br0\">{</span> <br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$pcache</span><span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"br0\">}</span> <span class=\"sy0\">//=</span>\t<span class=\"br0\">(</span>factors<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> mtest <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@bits</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%b\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$p</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$sq</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">@bits</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$sq</span> <span class=\"sy0\">=</span> <span class=\"re0\">$sq</span> <span class=\"sy0\">*</span> <span class=\"re0\">$sq</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$sq</span> <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"re0\">@bits</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$sq</span> <span class=\"sy0\">%=</span> <span class=\"re0\">$p</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"re0\">$sq</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$m</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"nu0\">60</span><span class=\"sy0\">,</span> <span class=\"nu0\">929</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> is_prime<span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">use</span> bigint<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"sy0\">,</span> <span class=\"re0\">$k</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"re0\">*$m</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$q</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span><span class=\"re0\">$k</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$q</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"re0\">$k</span> <span class=\"sy0\">*</span> <span class=\"re0\">$m</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$q</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"re0\">$q</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> is_prime<span class=\"br0\">(</span><span class=\"re0\">$q</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"re0\">$q</span> <span class=\"sy0\">*</span> <span class=\"re0\">$q</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"re0\">$f</span> <span class=\"sy0\">=</span> mtest<span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"sy0\">,</span> <span class=\"re0\">$q</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$f</span><span class=\"sy0\">?</span> <span class=\"st0\">\"M$m = $x = $q \u00d7 @{[$x / $q]}<span class=\"es0\">\\n</span>\"</span><br/>\t\t<span class=\"sy0\">:</span> <span class=\"st0\">\"M$m = $x is prime<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 47, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@primes</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$n</span> <span class=\"kw1\">is</span> copy <span class=\"br0\">{</span><br/>    <span class=\"kw1\">repeat</span> <span class=\"br0\">{</span> <span class=\"re0\">$n</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span> <span class=\"kw1\">until</span> <span class=\"re0\">$n</span> <span class=\"sy0\">%%</span> <span class=\"kw3\">none</span> <span class=\"kw1\">do</span> <span class=\"kw1\">for</span> <span class=\"re0\">@primes</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$p</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"re0\">$p</span> <span class=\"sy0\">&gt;</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$p</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*;</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> factors<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">multi</span> factors<span class=\"br0\">(</span>Int <span class=\"re0\">$remainder</span> <span class=\"kw1\">is</span> copy<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  gather <span class=\"kw1\">for</span> <span class=\"re0\">@primes</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$factor</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$factor</span> <span class=\"sy0\">*</span> <span class=\"re0\">$factor</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$remainder</span> <span class=\"br0\">{</span><br/>      take <span class=\"re0\">$remainder</span> <span class=\"kw1\">if</span> <span class=\"re0\">$remainder</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">last</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> <span class=\"re0\">$remainder</span> <span class=\"sy0\">%%</span> <span class=\"re0\">$factor</span> <span class=\"br0\">{</span><br/>        take <span class=\"re0\">$factor</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$remainder</span> <span class=\"kw1\">div</span><span class=\"sy0\">=</span> <span class=\"re0\">$factor</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> is_prime<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"kw1\">state</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"br0\">}</span> <span class=\"sy0\">//=</span> factors<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> mtest<span class=\"br0\">(</span><span class=\"re0\">$bits</span><span class=\"sy0\">,</span> <span class=\"re0\">$p</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@bits</span> <span class=\"sy0\">=</span> <span class=\"re0\">$bits</span><span class=\"sy0\">.</span><span class=\"me1\">base</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">loop</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$sq</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">@bits</span><span class=\"sy0\">;</span> <span class=\"re0\">$sq</span> <span class=\"sy0\">%=</span> <span class=\"re0\">$p</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"re0\">$sq</span> <span class=\"sy0\">*=</span> <span class=\"re0\">$sq</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$sq</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$sq</span> <span class=\"kw1\">if</span> <span class=\"nu0\">1</span> <span class=\"sy0\">==</span> <span class=\"re0\">@bits</span><span class=\"sy0\">.</span><span class=\"kw3\">shift</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$sq</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> flat <span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"nu0\">60</span><span class=\"sy0\">,</span> <span class=\"nu0\">929</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$m</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> is_prime<span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$f</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"re0\">$m</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$q</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..*</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$k</span> <span class=\"br0\">{</span><br/>\t<span class=\"re0\">$q</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"re0\">$k</span> <span class=\"sy0\">*</span> <span class=\"re0\">$m</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$q</span> <span class=\"sy0\">%</span> <span class=\"nu0\">8</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">|</span><span class=\"nu0\">7</span> <span class=\"kw1\">or</span> is_prime<span class=\"br0\">(</span><span class=\"re0\">$q</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"re0\">$q</span> <span class=\"sy0\">*</span> <span class=\"re0\">$q</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$x</span> <span class=\"kw1\">or</span> <span class=\"re0\">$f</span> <span class=\"sy0\">=</span> mtest<span class=\"br0\">(</span><span class=\"re0\">$m</span><span class=\"sy0\">,</span> <span class=\"re0\">$q</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">say</span> <span class=\"re0\">$f</span> <span class=\"sy0\">??</span> <span class=\"st0\">\"M$m = $x<span class=\"es0\">\\n</span><span class=\"es0\">\\t</span>= $q \u00d7 { $x div $q }\"</span><br/>           <span class=\"sy0\">!!</span> <span class=\"st0\">\"M$m = $x is prime\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 48, "block": "<pre class=\"text highlighted_source\">function is_prime(integer n)<br/>    if n&lt;2 then return 0 end if<br/>    if n=2 then return 1 end if<br/>    if remainder(n,2)=0 then return 0 end if<br/>    for i=3 to floor(sqrt(n)) by 2 do<br/>        if remainder(n,i)=0 then<br/>            return 0<br/>        end if<br/>    end for<br/>    return 1<br/>end function<br/>\u00a0<br/>function modpow(atom x, atom n, atom m)<br/>    atom i = n,<br/>         y = 1,<br/>         z = x<br/>    while i do<br/>        if and_bits(i,1) then<br/>            y = mod(y*z,m)<br/>        end if<br/>        z = mod(z*z,m)<br/>        i = floor(i/2)<br/>    end while<br/>    return y<br/>end function<br/>\u00a0<br/>function mersenne_factor(integer p)<br/>    if not is_prime(p) then return -1 end if<br/>    atom limit = sqrt(power(2,p))-1<br/>    integer k = 1<br/>    while 1 do<br/>        atom q = 2*p*k + 1<br/>        if q&gt;=limit then exit end if<br/>        if find(mod(q,8),{1,7}) <br/>        and is_prime(q) <br/>        and modpow(2,p,q)=1 then<br/>            return q<br/>        end if<br/>        k += 1<br/>    end while<br/>    return 0<br/>end function<br/>\u00a0<br/>sequence tests = {11, 23, 29, 37, 41, 43, 47, 53, 59, 67, 71, 73, 79, 83, 97, 929, 937}<br/>for i=1 to length(tests) do<br/>    integer ti = tests[i]<br/>    printf(1,\"A factor of M%d is\u00a0%d\\n\",{ti,mersenne_factor(ti)})<br/>end for</pre>"}, {"lang": "PHP", "loc": 22, "block": "<pre class=\"php highlighted_source\"><span class=\"kw1\">echo</span> <span class=\"st_h\">'M929 has a factor: '</span><span class=\"sy0\">,</span>  mersenneFactor<span class=\"br0\">(</span><span class=\"nu0\">929</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st_h\">'&lt;/br&gt;'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">function</span> mersenneFactor<span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$limit</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/sqrt\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/pow\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"re0\">$p</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$k</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"re0\">$p</span> <span class=\"sy0\">*</span> <span class=\"re0\">$k</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$limit</span><span class=\"sy0\">;</span> <span class=\"re0\">$k</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        <span class=\"re0\">$q</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"re0\">$p</span> <span class=\"sy0\">*</span> <span class=\"re0\">$k</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isPrime<span class=\"br0\">(</span><span class=\"re0\">$q</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"re0\">$q</span> <span class=\"sy0\">%</span> <span class=\"nu0\">8</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> <span class=\"re0\">$q</span> <span class=\"sy0\">%</span> <span class=\"nu0\">8</span> <span class=\"sy0\">==</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.php.net/bcpowmod\"><span class=\"kw3\">bcpowmod</span></a><span class=\"br0\">(</span><span class=\"st0\">\"2\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es4\">$p</span>\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es4\">$q</span>\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"re0\">$q</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> isPrime<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> <span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">*</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"re0\">$i</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 31, "block": "<pre class=\"text highlighted_source\">(de **Mod (X Y N)<br/>   (let M 1<br/>      (loop<br/>         (when (bit? 1 Y)<br/>            (setq M (% (* M X) N)) )<br/>         (T (=0 (setq Y (&gt;&gt; 1 Y)))<br/>            M )<br/>         (setq X (% (* X X) N)) ) ) )<br/>\u00a0<br/>(de prime? (N)<br/>   (or<br/>      (= N 2)<br/>      (and<br/>         (&gt; N 1)<br/>         (bit? 1 N)<br/>         (let S (sqrt N)<br/>            (for (D 3  T  (+ D 2))<br/>               (T (&gt; D S) T)<br/>               (T (=0 (% N D)) NIL) ) ) ) ) )<br/>\u00a0<br/>(de mFactor (P)<br/>   (let (Lim (sqrt (dec (** 2 P)))  K 0  Q)<br/>      (loop<br/>         (setq Q (inc (* 2 (inc 'K) P)))<br/>         (T (&gt;= Q Lim) NIL)<br/>         (T<br/>            (and<br/>               (member (% Q 8) (1 7))<br/>               (prime? Q)<br/>               (= 1 (**Mod 2 P Q)) )<br/>            Q ) ) ) )</pre>"}, {"lang": "Python", "loc": 25, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> is_prime<span class=\"br0\">(</span>number<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">True</span> <span class=\"co1\"># code omitted - see Primality by Trial Division</span><br/>\u00a0<br/><span class=\"kw1\">def</span> m_factor<span class=\"br0\">(</span>p<span class=\"br0\">)</span>:<br/>    max_k <span class=\"sy0\">=</span> <span class=\"nu0\">16384</span> / p <span class=\"co1\"># arbitrary limit; since Python automatically uses long's, it doesn't overflow</span><br/>    <span class=\"kw1\">for</span> k <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>max_k<span class=\"br0\">)</span>:<br/>        q <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>*p*k + <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> is_prime<span class=\"br0\">(</span>q<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"kw1\">elif</span> q\u00a0% <span class=\"nu0\">8</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">and</span> q\u00a0% <span class=\"nu0\">8</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">7</span>:<br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"kw1\">elif</span> <span class=\"kw2\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> p<span class=\"sy0\">,</span> q<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>            <span class=\"kw1\">return</span> q<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">None</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    exponent <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw2\">raw_input</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter exponent of Mersenne number: \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> is_prime<span class=\"br0\">(</span>exponent<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"Exponent is not prime:\u00a0%d\"</span>\u00a0% exponent<br/>    <span class=\"kw1\">else</span>:<br/>        factor <span class=\"sy0\">=</span> m_factor<span class=\"br0\">(</span>exponent<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> factor:<br/>            <span class=\"kw1\">print</span> <span class=\"st0\">\"No factor found for M%d\"</span>\u00a0% exponent<br/>        <span class=\"kw1\">else</span>:<br/>            <span class=\"kw1\">print</span> <span class=\"st0\">\"M%d has a factor:\u00a0%d\"</span>\u00a0% <span class=\"br0\">(</span>exponent<span class=\"sy0\">,</span> factor<span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define (number-&gt;digits n)<br/>  (map (compose1 string-&gt;number string)<br/>       (string-&gt;list (number-&gt;string n 2))))<br/>\u00a0<br/>(define (modpow exp base)<br/>  (for/fold ([square 1])<br/>    ([d (number-&gt;digits exp)])<br/>    (modulo (* (if (= d 1) 2 1) square square) base)))<br/>\u00a0<br/>; Search through all integers from 1 on to find the first divisor.<br/>; Returns #f if 2^p-1 is prime.<br/>(define (mersenne-factor p)<br/>  (for/first ([i (in-range 1 (floor (expt 2 (quotient p 2))) (* 2 p))]<br/>              #:when (and (member (modulo i 8) '(1 7))<br/>                          (= 1 (modpow p i))))<br/>    i))<br/>\u00a0<br/>(mersenne-factor 929)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 48, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program uses  exponent\u2500and\u2500mod  operator to test possible Mersenne numbers.      */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">20</span>                                <span class=\"coMULTI\">/*this will be increased if necessary. */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N spec                                 <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span>    N==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>  N==<span class=\"st0\">\",\"</span>     <span class=\"kw3\">then</span>    N=  <span class=\"nu0\">88</span>         <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> spec==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> spec==<span class=\"st0\">\",\"</span>   <span class=\"kw3\">then</span> spec= <span class=\"nu0\">920</span> <span class=\"nu0\">970</span>     <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/>      <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>;      z=j                           <span class=\"coMULTI\">/*process a range, &amp; then do one more #*/</span><br/>      <span class=\"kw1\">if</span> j=N  <span class=\"kw3\">then</span> j=<span class=\"kw6\">word</span><span class=\"br0\">(</span>spec, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;              <span class=\"coMULTI\">/*now, use  the high range of numbers. */</span><br/>      <span class=\"kw1\">if</span> j<span class=\"sy0\">&gt;</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>spec, <span class=\"nu0\">2</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>             <span class=\"coMULTI\">/*done with the high range of numbers? */</span><br/>      <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>isPrime<span class=\"br0\">(</span>z<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>               <span class=\"coMULTI\">/*if  Z  isn't a prime,  keep plugging.*/</span><br/>      r=testMer<span class=\"br0\">(</span>z<span class=\"br0\">)</span>                               <span class=\"coMULTI\">/*If Z is prime, give Z the 3rd degree.*/</span><br/>      r=commas<span class=\"br0\">(</span>r<span class=\"br0\">)</span>;    L=<span class=\"kw6\">length</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span>                <span class=\"coMULTI\">/*add commas to R; get it's new length.*/</span><br/>      <span class=\"kw1\">if</span> r==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"st0\">'M'</span>z, <span class=\"nu0\">10</span><span class=\"br0\">)</span>  <span class=\"st0\">\"\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 is a Mersenne prime.\"</span><br/>               <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"st0\">'M'</span>z, <span class=\"nu0\">50</span><span class=\"br0\">)</span>  <span class=\"st0\">\"is composite, a factor:\"</span>   <span class=\"kw6\">right</span><span class=\"br0\">(</span>r, <span class=\"kw6\">max</span><span class=\"br0\">(</span>L, <span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>commas:  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> _; <span class=\"kw1\">do</span> jc=<span class=\"kw6\">length</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span>-<span class=\"nu0\">3</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">1</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">3</span>; _=<span class=\"kw6\">insert</span><span class=\"br0\">(</span><span class=\"st0\">','</span>, _, jc<span class=\"br0\">)</span>; <span class=\"kw3\">end</span>;  <span class=\"kw1\">return</span> _<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>isPrime: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;             <span class=\"kw1\">if</span> <span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>x, <span class=\"st0\">'2 3 5 7'</span><span class=\"br0\">)</span> <span class=\"sy0\">\\</span>== <span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>         <span class=\"kw1\">if</span> x<span class=\"sy0\">&lt;</span><span class=\"nu0\">11</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;             <span class=\"kw1\">if</span> x<span class=\"sy0\">//</span><span class=\"nu0\">2</span> == <span class=\"nu0\">0</span> <span class=\"sy0\">|</span> x<span class=\"sy0\">//</span><span class=\"nu0\">3</span>       == <span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>              <span class=\"kw1\">do</span> j=<span class=\"nu0\">5</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">6</span>;                  <span class=\"kw1\">if</span> x<span class=\"sy0\">//</span>j == <span class=\"nu0\">0</span> <span class=\"sy0\">|</span> x<span class=\"sy0\">//</span><span class=\"br0\">(</span>j+<span class=\"nu0\">2</span><span class=\"br0\">)</span>   == <span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>              <span class=\"kw1\">if</span> j<span class=\"sy0\">*</span>j<span class=\"sy0\">&gt;</span>x   <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>                 <span class=\"coMULTI\">/*\u25c4\u2500\u2510         ___                */</span><br/>              <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                              <span class=\"coMULTI\">/*  \u2514\u2500\u25c4 Is j&gt;\u221a x\u00a0?  Then return 1*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>iSqrt:   <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;   #=<span class=\"nu0\">1</span>;      r=<span class=\"nu0\">0</span>;              <span class=\"kw1\">do</span> <span class=\"kw2\">while</span> #<span class=\"sy0\">&lt;</span>=x;  #=#<span class=\"sy0\">*</span><span class=\"nu0\">4</span>;  <span class=\"kw3\">end</span><br/>           <span class=\"kw1\">do</span> <span class=\"kw2\">while</span> #<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>;  #=#%4;   _=x-r-#;  r=r%2;   <span class=\"kw1\">if</span> _<span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  x=_;  r=r+#;  <span class=\"kw3\">end</span><br/>           <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while*/</span>                             <span class=\"coMULTI\">/*iSqrt \u2261    integer square root.*/</span><br/>         <span class=\"kw1\">return</span> r                                      <span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500      \u2500       \u2500\u2500     \u2500  \u2500 */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>testMer: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;              p=<span class=\"nu0\">2</span><span class=\"sy0\">**</span>x  <span class=\"coMULTI\">/* [\u2193]  do we have enough digits?*/</span><br/>         $$=<span class=\"kw6\">x2b</span><span class=\"br0\">(</span> <span class=\"kw6\">d2x</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span> + <span class=\"nu0\">0</span><br/>         <span class=\"kw1\">if</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"st0\">'E'</span>,p<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> p <span class=\"st0\">\"E\"</span> _;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> _+<span class=\"nu0\">2</span>;  p=<span class=\"nu0\">2</span><span class=\"sy0\">**</span>x;  <span class=\"kw3\">end</span><br/>        \u00a0!<span class=\"sy0\">.</span>=<span class=\"nu0\">1</span>; \u00a0!<span class=\"sy0\">.</span>1=<span class=\"nu0\">0</span>; \u00a0!<span class=\"sy0\">.</span>7=<span class=\"nu0\">0</span>                          <span class=\"coMULTI\">/*array used for a quicker test. */</span><br/>         R=iSqrt<span class=\"br0\">(</span>p<span class=\"br0\">)</span>                                    <span class=\"coMULTI\">/*obtain integer square root of P*/</span><br/>                    <span class=\"kw1\">do</span> k=<span class=\"nu0\">2</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>;        q=k<span class=\"sy0\">*</span>x  +  <span class=\"nu0\">1</span>   <span class=\"coMULTI\">/*(shortcut) compute value of Q. */</span><br/>                    m=q <span class=\"sy0\">//</span> <span class=\"nu0\">8</span>                           <span class=\"coMULTI\">/*obtain the remainder when \u00f7 8. */</span><br/>                    <span class=\"kw1\">if</span>\u00a0!<span class=\"sy0\">.</span>m               <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>  <span class=\"coMULTI\">/*M  must be either one or seven.*/</span><br/>                    <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> q <span class=\"st0\">''</span> -<span class=\"nu0\">1</span> _; <span class=\"kw1\">if</span> _==<span class=\"nu0\">5</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>    <span class=\"coMULTI\">/*last digit a five\u00a0? */</span><br/>                    <span class=\"kw1\">if</span> q<span class=\"sy0\">//</span><span class=\"nu0\">3</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>                      <span class=\"coMULTI\">/*divisible by three? */</span><br/>                    <span class=\"kw1\">if</span> q<span class=\"sy0\">//</span><span class=\"nu0\">7</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>           <span class=\"coMULTI\">/*      ____     \"      \" seven? */</span><br/>                    <span class=\"kw1\">if</span> q<span class=\"sy0\">&gt;</span>R               <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"coMULTI\">/*Is q&gt;\u221a2**x\u00a0?   A Mersenne prime*/</span><br/>                    sq=<span class=\"nu0\">1</span>;         $=$$                 <span class=\"coMULTI\">/*obtain binary version from  $. */</span><br/>                        <span class=\"kw1\">do</span>  <span class=\"kw2\">until</span> $==<span class=\"st0\">''</span>;      sq=sq<span class=\"sy0\">*</span>sq<br/>                        <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> $  _  <span class=\"nu0\">2</span>  $           <span class=\"coMULTI\">/*obtain 1st digit and the rest. */</span><br/>                        <span class=\"kw1\">if</span> _  <span class=\"kw3\">then</span> sq=<span class=\"br0\">(</span>sq+sq<span class=\"br0\">)</span> <span class=\"sy0\">//</span> q<br/>                        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*until*/</span><br/>                    <span class=\"kw1\">if</span> sq==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> q            <span class=\"coMULTI\">/*Not a prime?   Return a factor.*/</span><br/>                    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span></pre>"}, {"lang": "Ring", "loc": 43, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Factors of a Mersenne number<br/>\u00a0<br/>see \"A factor of M929 is \" + mersennefactor(929) + nl<br/>see \"A factor of M937 is \" + mersennefactor(937) + nl<br/>\u00a0<br/>func mersennefactor(p)<br/>       if not isprime(p) <br/>         return -1<br/>       ok<br/>       for k = 1 to 50<br/>            q = 2*k*p + 1<br/>            if (q &amp;&amp; 7) = 1 or (q &amp;&amp; 7) = 7<br/>               if isprime(q)<br/>                  if modpow(2, p, q) = 1<br/>                     return q<br/>                  ok<br/>               ok<br/>            ok<br/>       next <br/>       return 0<br/>\u00a0<br/>func isprime(num)<br/>       if (num &lt;= 1) return 0 ok<br/>       if (num\u00a0% 2 = 0) and num\u00a0!= 2 return 0 ok<br/>       for i = 3 to floor(num / 2) -1 step 2<br/>            if (num\u00a0% i = 0) return 0 ok<br/>       next<br/>       return 1<br/>\u00a0<br/>func modpow(x,n,m)<br/>       i = n<br/>       y = 1<br/>       z = x<br/>       while i &gt; 0<br/>               if i &amp; 1<br/>                  y = (y * z)\u00a0% m<br/>               ok<br/>               z = (z * z)\u00a0% m<br/>               i = (i &gt;&gt; 1)<br/>        end<br/>        return y<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 34, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'prime'</span><br/>\u00a0<br/><span class=\"kw1\">def</span> mersenne_factor<span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"br0\">)</span><br/>  limit = <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"kw3\">p</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  k = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>k<span class=\"sy0\">*</span><span class=\"kw3\">p</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> limit<br/>    q = <span class=\"nu0\">2</span><span class=\"sy0\">*</span>k<span class=\"sy0\">*</span><span class=\"kw3\">p</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> q.<span class=\"me1\">prime</span>? <span class=\"kw1\">and</span> <span class=\"br0\">(</span>q <span class=\"sy0\">%</span> <span class=\"nu0\">8</span> == <span class=\"nu0\">1</span> <span class=\"kw1\">or</span> q <span class=\"sy0\">%</span> <span class=\"nu0\">8</span> == <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> trial_factor<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"kw3\">p</span>,q<span class=\"br0\">)</span><br/>      <span class=\"co1\"># q is a factor of 2**p-1</span><br/>      <span class=\"kw2\">return</span> q<br/>    <span class=\"kw1\">end</span><br/>    k <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw2\">nil</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> trial_factor<span class=\"br0\">(</span>base, exp, mod<span class=\"br0\">)</span><br/>  square = <span class=\"nu0\">1</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"%b\"</span> <span class=\"sy0\">%</span> exp<span class=\"br0\">)</span>.<span class=\"me1\">each_char</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>bit<span class=\"sy0\">|</span> square = square<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>bit == <span class=\"st0\">\"1\"</span>\u00a0? base\u00a0: <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> mod<span class=\"br0\">}</span><br/>  <span class=\"br0\">(</span>square == <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> check_mersenne<span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">print</span> <span class=\"st0\">\"M#{p} = 2**#{p}-1 is \"</span><br/>  f = mersenne_factor<span class=\"br0\">(</span><span class=\"kw3\">p</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> f.<span class=\"kw2\">nil</span>?<br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"prime\"</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"composite with factor #{f}\"</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>Prime.<span class=\"me1\">each</span><span class=\"br0\">(</span><span class=\"nu0\">53</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span><span class=\"kw3\">p</span><span class=\"sy0\">|</span> check_mersenne <span class=\"kw3\">p</span> <span class=\"br0\">}</span><br/>check_mersenne <span class=\"nu0\">929</span></pre>"}, {"lang": "Scala", "loc": 53, "block": "<pre class=\"scala highlighted_source\"><span class=\"coMULTI\">/** Find factors of a Mersenne number<br/> *<br/> *  The implementation finds factors for M929 and further.<br/> *<br/> *  @example  M59 = 2^059 - 1 =             576460752303423487  (   2 msec)<br/> *  @example        = 179951 \u00d7 3203431780337.<br/> */</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> FactorMersenne <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> two<span class=\"sy0\">:</span> BigInt <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> sieve<span class=\"br0\">(</span>nums<span class=\"sy0\">:</span> Stream<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Stream<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span><br/>    Stream.<span class=\"me1\">cons</span><span class=\"br0\">(</span>nums.<span class=\"me1\">head</span>, sieve<span class=\"br0\">(</span><span class=\"br0\">(</span>nums.<span class=\"me1\">tail</span><span class=\"br0\">)</span> filter <span class=\"br0\">(</span><span class=\"sy0\">_</span> <span class=\"sy0\">%</span> nums.<span class=\"me1\">head</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">// An infinite stream of primes, lazy evaluation and memo-ized</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> oddPrimes <span class=\"sy0\">=</span> sieve<span class=\"br0\">(</span>Stream.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> primes <span class=\"sy0\">=</span> sieve<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">#::</span> oddPrimes<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> mersenne<span class=\"br0\">(</span>p<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>two pow p<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> factorMersenne<span class=\"br0\">(</span>p<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>Long<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> limit <span class=\"sy0\">=</span> <span class=\"br0\">(</span>mersenne<span class=\"br0\">(</span>p<span class=\"br0\">)</span> - <span class=\"nu0\">1</span> min Int.<span class=\"me1\">MaxValue</span><span class=\"br0\">)</span>.<span class=\"me1\">toLong</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> factorTest<span class=\"br0\">(</span>p<span class=\"sy0\">:</span> Long, q<span class=\"sy0\">:</span> Long<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <span class=\"br0\">(</span>List<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span> contains <span class=\"br0\">(</span>q <span class=\"sy0\">%</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> two.<span class=\"me1\">modPow</span><span class=\"br0\">(</span>p, q<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> BigInt<span class=\"br0\">(</span>q<span class=\"br0\">)</span>.<span class=\"me1\">isProbablePrime</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Build a stream of factors from (2*p+1) step-by (2*p)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> s<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Long<span class=\"br0\">)</span><span class=\"sy0\">:</span> Stream<span class=\"br0\">[</span>Long<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a <span class=\"sy0\">#::</span> s<span class=\"br0\">(</span>a + <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// Build stream of possible factors</span><br/>\u00a0<br/>    <span class=\"co1\">// Limit and Filter Stream and then take the head element</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> e <span class=\"sy0\">=</span> s<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> p + <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">takeWhile</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> <span class=\"sy0\">&lt;</span> limit<span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span>factorTest<span class=\"br0\">(</span>p, <span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    e.<span class=\"me1\">headOption</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// Test</span><br/>  <span class=\"br0\">(</span>primes takeWhile <span class=\"br0\">(</span><span class=\"sy0\">_</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">97</span><span class=\"br0\">)</span><span class=\"br0\">)</span> ++ List<span class=\"br0\">(</span><span class=\"nu0\">929</span>, <span class=\"nu0\">937</span><span class=\"br0\">)</span> foreach <span class=\"br0\">{</span> p <span class=\"sy0\">=&gt;</span><br/>    <span class=\"br0\">{</span> <span class=\"co1\">// Needs some intermediate results for nice formatting</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nMersenne <span class=\"sy0\">=</span> mersenne<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lit <span class=\"sy0\">=</span> f<span class=\"st0\">\"${nMersenne}%30d\"</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> preAmble <span class=\"sy0\">=</span> f<span class=\"st0\">\"${s\"</span>M$<span class=\"br0\">{</span>p<span class=\"br0\">}</span><span class=\"st0\">\"}%4s = 2^$p%03d - 1 = ${lit}%s\"</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> datum <span class=\"sy0\">=</span> System.<span class=\"me1\">nanoTime</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> factorMersenne<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> mSec <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>System.<span class=\"me1\">nanoTime</span> - datum<span class=\"br0\">)</span> / 1.<span class=\"me1\">e</span>+6<span class=\"br0\">)</span>.<span class=\"me1\">round</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> decStr <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>lit.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span> f<span class=\"st0\">\"(M has ${lit.length}%3d dec)\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"\"</span> <span class=\"br0\">}</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> sPrime <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>result.<span class=\"me1\">isEmpty</span><span class=\"br0\">)</span> <span class=\"st0\">\" is a Mersenne prime number.\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\" \"</span> <span class=\"sy0\">*</span> <span class=\"nu0\">28</span> <span class=\"br0\">}</span><br/>\u00a0<br/>      println<span class=\"br0\">(</span>f<span class=\"st0\">\"$preAmble${sPrime} ${f\"</span><span class=\"br0\">(</span>$mSec<span class=\"sy0\">%</span>,1d<span class=\"st0\">\"}%13s msec)\"</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>result.<span class=\"me1\">isEmpty</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span>f<span class=\"st0\">\"${decStr}%-17s = ${result.get} \u00d7 ${nMersenne / result.get}\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 23, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/>#lang scheme<br/>\u00a0<br/><span class=\"co1\">;;; this needs to be changed for other R6RS implementations</span><br/><span class=\"br0\">(</span>require rnrs<span class=\"sy0\">/</span>arithmetic<span class=\"sy0\">/</span>bitwise<span class=\"sy0\">-</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; modpow, as per the task description.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>modpow exponent base<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">[</span>square <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>index <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span>bitwise<span class=\"sy0\">-</span><span class=\"kw1\">length</span> exponent<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> index <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        square<br/>        <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>bitwise<span class=\"sy0\">-</span>bit<span class=\"sy0\">-</span>set? exponent index<span class=\"br0\">)</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                      square square<span class=\"br0\">)</span> base<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"sy0\">-</span> index <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; search through all integers from 1 on to find the first divisor</span><br/><span class=\"co1\">;;; returns #f if 2^p-1 is prime</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>mersenne<span class=\"sy0\">-</span>factor p<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>for<span class=\"sy0\">/</span>first <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">floor</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"kw1\">quotient</span> p <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              #:when <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> i <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">7</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> i <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>modpow p i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 64, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func boolean: isPrime (in integer: number) is func<br/>  result<br/>    var boolean: prime is FALSE;<br/>  local<br/>    var integer: upTo is 0;<br/>    var integer: testNum is 3;<br/>  begin<br/>    if number = 2 then<br/>      prime\u00a0:= TRUE;<br/>    elsif odd(number) and number &gt; 2 then<br/>      upTo\u00a0:= sqrt(number);<br/>      while number rem testNum &lt;&gt; 0 and testNum &lt;= upTo do<br/>        testNum +:= 2;<br/>      end while;<br/>      prime\u00a0:= testNum &gt; upTo;<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const func integer: modPow (in var integer: base,<br/>    in var integer: exponent, in integer: modulus) is func<br/>  result<br/>    var integer: power is 1;<br/>  begin<br/>    if exponent &lt; 0 or modulus &lt; 0 then<br/>      raise RANGE_ERROR;<br/>    else<br/>      while exponent &gt; 0 do<br/>        if odd(exponent) then<br/>          power\u00a0:= (power * base) mod modulus;<br/>        end if;<br/>        exponent &gt;&gt;:= 1;<br/>        base\u00a0:= base ** 2 mod modulus;<br/>      end while;<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const func integer: mersenneFactor (in integer: exponent) is func<br/>  result<br/>    var integer: factor is 0;<br/>  local <br/>    var integer: maxk is 0;<br/>    var integer: k is 1;<br/>    var boolean: searching is TRUE;<br/>  begin<br/>    maxk\u00a0:= 16384 div exponent; # Limit for k to prevent overflow of 32 bit signed integer<br/>    while k &lt;= maxk and searching do<br/>      factor\u00a0:= 2 * exponent * k + 1;<br/>      if (factor mod 8 = 1 or factor mod 8 = 7) and<br/>          isPrime(factor) and modPow(2, exponent, factor) = 1 then<br/>        searching\u00a0:= FALSE;<br/>      end if;<br/>      incr(k);<br/>    end while;<br/>    if searching then<br/>      factor\u00a0:= 0;<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(\"Factor of M929: \" &lt;&amp; mersenneFactor(929));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 21, "block": "<pre class=\"ruby highlighted_source\">func mtest<span class=\"br0\">(</span>b, <span class=\"kw3\">p</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var bits = b.<span class=\"me1\">base</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">digits</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>var sq = <span class=\"nu0\">1</span>; bits; sq <span class=\"sy0\">%</span>= <span class=\"kw3\">p</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sq <span class=\"sy0\">*</span>= sq<br/>        sq <span class=\"sy0\">+</span>= sq <span class=\"kw1\">if</span> bits.<span class=\"me1\">shift</span>==<span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>    sq == <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> m <span class=\"br0\">(</span><span class=\"nu0\">2</span>..<span class=\"nu0\">60</span> <span class=\"sy0\">-&gt;</span> grep<span class=\"br0\">{</span> .<span class=\"me1\">is_prime</span> <span class=\"br0\">}</span>, <span class=\"nu0\">929</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var f = <span class=\"nu0\">0</span><br/>    var x = <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span>m <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    var q<br/>    <span class=\"br0\">{</span> <span class=\"sy0\">|</span>k<span class=\"sy0\">|</span><br/>        q = <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>k<span class=\"sy0\">*</span>m <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        q<span class=\"sy0\">%</span>8 ~~ <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy0\">||</span> q.<span class=\"me1\">is_prime</span> <span class=\"sy0\">||</span> <span class=\"kw1\">next</span><br/>        q<span class=\"sy0\">*</span>q <span class=\"sy0\">&gt;</span> x <span class=\"sy0\">||</span> <span class=\"br0\">(</span>f = mtest<span class=\"br0\">(</span>m, q<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw1\">break</span><br/>    <span class=\"br0\">}</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span>..<span class=\"me1\">Inf</span><br/>    say <span class=\"br0\">(</span>f\u00a0? <span class=\"st0\">\"M#{m} is composite with factor #{q}\"</span><br/>          \u00a0: <span class=\"st0\">\"M#{m} is prime\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 45, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> int2bits <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">binary</span> <span class=\"kw2\">scan</span> <span class=\"br0\">[</span><span class=\"kw2\">binary</span> <span class=\"kw2\">format</span> I1 <span class=\"re0\">$n</span><span class=\"br0\">]</span> B<span class=\"sy0\">*</span> binstring<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> trimleft <span class=\"re0\">$binstring</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"co1\"># another method</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> bits <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">lappend</span> bits <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> / <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>lreverse <span class=\"re0\">$bits</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> trial_factor <span class=\"br0\">{</span>base exp mod<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> square <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">foreach</span> bit <span class=\"br0\">[</span>int2bits <span class=\"re0\">$exp</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> square <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$square</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$bit</span> == <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"re0\">$base</span>\u00a0: <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">$mod</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$square</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> m_factor p <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> limit <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>sqrt<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"re0\">$p</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> k <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"re0\">$k</span> <span class=\"sy0\">*</span> <span class=\"re0\">$p</span> - <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$limit</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> k<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> q <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"re0\">$k</span> <span class=\"sy0\">*</span> <span class=\"re0\">$p</span> + <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span> <span class=\"sy0\">!</span> <span class=\"br0\">[</span>primes::<span class=\"me1\">is_prime</span> <span class=\"re0\">$q</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span> <span class=\"sy0\">!</span> <span class=\"br0\">(</span><span class=\"re0\">$q</span> <span class=\"sy0\">%</span> <span class=\"nu0\">8</span> == <span class=\"nu0\">1</span> || <span class=\"re0\">$q</span> <span class=\"sy0\">%</span> <span class=\"nu0\">8</span> == <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\"># optimization</span><br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>trial_factor <span class=\"nu0\">2</span> <span class=\"re0\">$p</span> <span class=\"re0\">$q</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\"># $q is a factor of 2**$p-1</span><br/>            <span class=\"kw1\">return</span> <span class=\"re0\">$q</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> -<span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> exp <span class=\"nu0\">929</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">set</span> fact <span class=\"br0\">[</span>m_factor <span class=\"nu0\">929</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"M$exp has a factor: $fact\"</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"no factor found for M$exp\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">remainder(A,B)   equivalent to   iPart(B*fPart(A/B))</pre>"}, {"lang": "uBasic/4tH", "loc": 54, "block": "<pre class=\"text highlighted_source\">Print \"A factor of M929 is \"; FUNC(_FNmersenne_factor(929))<br/>Print \"A factor of M937 is \"; FUNC(_FNmersenne_factor(937))<br/>\u00a0<br/>End<br/>\u00a0<br/>_FNmersenne_factor Param(1)<br/>  Local(2)<br/>\u00a0<br/>  If (FUNC(_FNisprime(<a class=\"__cf_email__\" data-cfemail=\"721332\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)) = 0) Then Return (-1)<br/>\u00a0<br/>  For <a class=\"__cf_email__\" data-cfemail=\"741634\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 1 TO 99999<br/>    <a class=\"__cf_email__\" data-cfemail=\"117251\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = (2*<a class=\"__cf_email__\" data-cfemail=\"462706\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*<a class=\"__cf_email__\" data-cfemail=\"234163\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) + 1<br/>    If (FUNC(_FNisprime(<a class=\"__cf_email__\" data-cfemail=\"553615\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>))) Then<br/>      If (AND (<a class=\"__cf_email__\" data-cfemail=\"6a092a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, 7) = 1) + (AND (<a class=\"__cf_email__\" data-cfemail=\"a5c6e5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, 7) = 7) Then<br/>        Until FUNC(_ModPow2 (<a class=\"__cf_email__\" data-cfemail=\"422302\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, <a class=\"__cf_email__\" data-cfemail=\"5e3d1e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)) = 1<br/>      EndIf<br/>    EndIf<br/>  Next<br/>\u00a0<br/>Return (<a class=\"__cf_email__\" data-cfemail=\"4c2f0c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * (<a class=\"__cf_email__\" data-cfemail=\"2e4c6e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&lt;100000))<br/>\u00a0<br/>\u00a0<br/>_FNisprime Param(1)<br/>  Local (1)<br/>\u00a0<br/>  If ((<a class=\"__cf_email__\" data-cfemail=\"abcaeb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0% 2) = 0) Then Return (<a class=\"__cf_email__\" data-cfemail=\"d1b091\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 2)<br/>  If ((<a class=\"__cf_email__\" data-cfemail=\"accdec\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0% 3) = 0) Then Return (<a class=\"__cf_email__\" data-cfemail=\"214061\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 3)<br/>\u00a0<br/>  <a class=\"__cf_email__\" data-cfemail=\"99fbd9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 5<br/>\u00a0<br/>  Do Until ((<a class=\"__cf_email__\" data-cfemail=\"741634\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * <a class=\"__cf_email__\" data-cfemail=\"046644\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) &gt; <a class=\"__cf_email__\" data-cfemail=\"3a5b7a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) + ((<a class=\"__cf_email__\" data-cfemail=\"0c6d4c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0% <a class=\"__cf_email__\" data-cfemail=\"c0a280\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) = 0)<br/>    <a class=\"__cf_email__\" data-cfemail=\"e98ba9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"b5d7f5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + 2<br/>  Until (<a class=\"__cf_email__\" data-cfemail=\"96f7d6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0% <a class=\"__cf_email__\" data-cfemail=\"513311\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) = 0<br/>    <a class=\"__cf_email__\" data-cfemail=\"a0c2e0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"bedcfe\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + 4<br/>  Loop<br/>\u00a0<br/>Return ((<a class=\"__cf_email__\" data-cfemail=\"e785a7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * <a class=\"__cf_email__\" data-cfemail=\"8ceecc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) &gt; <a class=\"__cf_email__\" data-cfemail=\"294869\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)<br/>\u00a0<br/>\u00a0<br/>_ModPow2 Param(2)<br/>  Local(2)<br/>\u00a0<br/>  <a class=\"__cf_email__\" data-cfemail=\"593d19\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 1<br/>  For <a class=\"__cf_email__\" data-cfemail=\"016241\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 30 To 0 Step -1<br/>    If ((<a class=\"__cf_email__\" data-cfemail=\"3a5b7a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+1) &gt; SHL(1,<a class=\"__cf_email__\" data-cfemail=\"a0c3e0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)) Then<br/>       <a class=\"__cf_email__\" data-cfemail=\"244064\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"8febcf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * <a class=\"__cf_email__\" data-cfemail=\"0a6e4a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>       If AND (<a class=\"__cf_email__\" data-cfemail=\"c9a889\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, SHL(1,<a class=\"__cf_email__\" data-cfemail=\"d2b192\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)) Then<br/>          <a class=\"__cf_email__\" data-cfemail=\"680c28\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"157155\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * 2<br/>       EndIf<br/>       <a class=\"__cf_email__\" data-cfemail=\"147054\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"e783a7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0% <a class=\"__cf_email__\" data-cfemail=\"acceec\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    EndIf<br/>  Next<br/>\u00a0<br/>Return (<a class=\"__cf_email__\" data-cfemail=\"355175\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)</pre>"}, {"lang": "VBScript", "loc": 63, "block": "<pre class=\"vb highlighted_source\"><span class=\"co1\">' Factors of a Mersenne number<br/></span>    <span class=\"kw3\">for</span> i=1 <span class=\"kw3\">to</span> 59<br/>        z=i<br/>        <span class=\"kw3\">if</span> z=59 <span class=\"kw3\">then</span> z=929  <span class=\"co1\">':) 61 turns into 929.<br/></span>        <span class=\"kw3\">if</span> isPrime(z) <span class=\"kw3\">then</span> <br/>            r=testM(z)<br/>            zz=left(<span class=\"st0\">\"M\"</span> &amp; z &amp; space(4),4)<br/>            <span class=\"kw3\">if</span> r=0 <span class=\"kw3\">then</span> <br/>                Wscript.echo zz &amp; <span class=\"st0\">\" prime.\"</span><br/>            <span class=\"kw3\">else</span> <br/>                Wscript.echo zz &amp; <span class=\"st0\">\" not prime, a factor: \"</span> &amp; r<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">next</span><br/>\u00a0<br/><span class=\"kw2\">function</span> modPow(base,n,div)<br/>    <span class=\"kw4\">dim</span> i,y,z<br/>    i = n\u00a0: y = 1\u00a0: z = base<br/>    <span class=\"kw3\">do</span> <span class=\"kw3\">while</span> i<br/>        <span class=\"kw3\">if</span> i <span class=\"kw3\">and</span> 1 <span class=\"kw3\">then</span> y = (y * z) <span class=\"kw4\">mod</span> div<br/>        z = (z * z) <span class=\"kw4\">mod</span> div<br/>        i = i \\ 2<br/>    <span class=\"kw3\">loop</span><br/>    modPow= y<br/><span class=\"kw3\">end</span> <span class=\"kw2\">function</span><br/>\u00a0<br/><span class=\"kw2\">function</span> isPrime(x)<br/>    <span class=\"kw4\">dim</span> i<br/>    <span class=\"kw3\">if</span> x=2 <span class=\"kw3\">or</span> x=3 <span class=\"kw3\">or</span> _<br/>       x=5 <span class=\"kw3\">or</span> x=7 _<br/>                  <span class=\"kw3\">then</span> isPrime=1: <span class=\"kw2\">exit</span> <span class=\"kw2\">function</span><br/>    <span class=\"kw3\">if</span> x&lt;11       <span class=\"kw3\">then</span> isPrime=0: <span class=\"kw2\">exit</span> <span class=\"kw2\">function</span><br/>    <span class=\"kw3\">if</span> x <span class=\"kw4\">mod</span> 2=0  <span class=\"kw3\">then</span> isPrime=0: <span class=\"kw2\">exit</span> <span class=\"kw2\">function</span><br/>    <span class=\"kw3\">if</span> x <span class=\"kw4\">mod</span> 3=0  <span class=\"kw3\">then</span> isPrime=0: <span class=\"kw2\">exit</span> <span class=\"kw2\">function</span><br/>    i=5<br/>    <span class=\"kw3\">do</span><br/>        <span class=\"kw3\">if</span> (x <span class=\"kw4\">mod</span> i)     =0 <span class=\"kw3\">or</span> _<br/>           (x <span class=\"kw4\">mod</span> (i+2)) =0 _<br/>                  <span class=\"kw3\">then</span> isPrime=0: <span class=\"kw2\">exit</span> <span class=\"kw2\">function</span><br/>        <span class=\"kw3\">if</span> i*i&gt;x  <span class=\"kw3\">then</span> isPrime=1: <span class=\"kw2\">exit</span> <span class=\"kw2\">function</span><br/>        i=i+6<br/>    <span class=\"kw3\">loop</span><br/><span class=\"kw3\">end</span> <span class=\"kw2\">function</span><br/>\u00a0<br/><span class=\"kw2\">function</span> testM(x)<br/>    <span class=\"kw4\">dim</span> sqroot,k,q<br/>    sqroot=Sqr(2^x)<br/>    k=1<br/>    <span class=\"kw3\">do</span><br/>        q=2*k*x+1<br/>        <span class=\"kw3\">if</span> q&gt;sqroot <span class=\"kw3\">then</span> <span class=\"kw2\">exit</span> <span class=\"kw3\">do</span><br/>        <span class=\"kw3\">if</span> (q <span class=\"kw3\">and</span> 7)=1 <span class=\"kw3\">or</span> (q <span class=\"kw3\">and</span> 7)=7 <span class=\"kw3\">then</span><br/>            <span class=\"kw3\">if</span> isPrime(q) <span class=\"kw3\">then</span><br/>                <span class=\"kw3\">if</span> modPow(2,x,q)=1 <span class=\"kw3\">then</span> <br/>                    testM=q<br/>                    <span class=\"kw2\">exit</span> <span class=\"kw2\">function</span><br/>                <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        k=k+1<br/>    <span class=\"kw3\">loop</span><br/>    testM=0 <br/><span class=\"kw3\">end</span> <span class=\"kw2\">function</span></pre>"}, {"lang": "Visual Basic", "loc": 36, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Sub</span> mersenne()<br/>    <span class=\"kw4\">Dim</span> q <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, k <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, p <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, d <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    <span class=\"kw4\">Dim</span> factor <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, y <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, z <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    <span class=\"kw4\">Dim</span> prime <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/>    q = 929   <span class=\"co1\">'input value<br/></span>    <span class=\"kw3\">For</span> k = 1 <span class=\"kw3\">To</span> 1048576   <span class=\"co1\">'2**20<br/></span>        p = 2 * k * q + 1<br/>        <span class=\"kw3\">If</span> (p <span class=\"kw3\">And</span> 7) = 1 <span class=\"kw3\">Or</span> (p <span class=\"kw3\">And</span> 7) = 7 <span class=\"kw3\">Then</span>    <span class=\"co1\">'p=*001 or p=*111<br/></span>            <span class=\"co1\">'p is prime?<br/></span>            prime = <span class=\"kw5\">False</span><br/>            <span class=\"kw3\">If</span> p <span class=\"kw4\">Mod</span> 2 = 0 <span class=\"kw3\">Then</span> <span class=\"kw3\">GoTo</span> notprime<br/>            <span class=\"kw3\">If</span> p <span class=\"kw4\">Mod</span> 3 = 0 <span class=\"kw3\">Then</span> <span class=\"kw3\">GoTo</span> notprime<br/>            d = 5<br/>            <span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> d * d &lt;= p<br/>                <span class=\"kw3\">If</span> p <span class=\"kw4\">Mod</span> d = 0 <span class=\"kw3\">Then</span> <span class=\"kw3\">GoTo</span> notprime<br/>                d = d + 2<br/>                <span class=\"kw3\">If</span> p <span class=\"kw4\">Mod</span> d = 0 <span class=\"kw3\">Then</span> <span class=\"kw3\">GoTo</span> notprime<br/>                d = d + 4<br/>            <span class=\"kw3\">Loop</span><br/>            prime = <span class=\"kw5\">True</span><br/>        notprime:   <span class=\"co1\">'modpow<br/></span>            i = q: y = 1: z = 2<br/>            <span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> i   <span class=\"co1\">'i &lt;&gt; 0<br/></span>                <span class=\"kw4\">On</span> <span class=\"kw4\">Error</span> <span class=\"kw3\">GoTo</span> okfactor<br/>                <span class=\"kw3\">If</span> i <span class=\"kw3\">And</span> 1 <span class=\"kw3\">Then</span> y = (y * z) <span class=\"kw4\">Mod</span> p  <span class=\"co1\">'test first bit<br/></span>                z = (z * z) <span class=\"kw4\">Mod</span> p<br/>                <span class=\"kw4\">On</span> <span class=\"kw4\">Error</span> <span class=\"kw3\">GoTo</span> 0<br/>                i = i \\ 2<br/>            <span class=\"kw3\">Loop</span><br/>            <span class=\"kw3\">If</span> prime <span class=\"kw3\">And</span> y = 1 <span class=\"kw3\">Then</span> factor = p: <span class=\"kw3\">GoTo</span> okfactor<br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Next</span> k<br/>    factor = 0<br/>okfactor:<br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"M\"</span> &amp; q, <span class=\"st0\">\"factor=\"</span> &amp; factor<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span></pre>"}, {"lang": "zkl", "loc": 17, "block": "<pre class=\"text highlighted_source\">var [const] BN=Import(\"zklBigNum\");  // libGMP<br/>\u00a0<br/>    // M = 2^P - 1 , P prime<br/>    // Look for a prime divisor q such as: <br/>    //     q &lt; M.sqrt(), q = 1 or 7 modulo 8, q = 1 + 2kP<br/>    // q is divisor if 2.powmod(P,q) == 1<br/>    // m-divisor returns q or False<br/>fcn m_divisor(P){<br/>   // must limit the search as M.sqrt() may be HUGE and I'm slow<br/>   maxPrime:='wrap{ BN(2).pow(P).sqrt().min(0d5_000_000) };<br/>   t,b2:=BN(0),BN(2);  // so I can do some in place BigInt math<br/>   foreach q in (maxPrime(P*2)){ // 0..maxPrime -1, faster than just odd #s<br/>      if((q%8==1 or q%8==7) and t.set(q).probablyPrime() and<br/>\t b2.powm(P,q)==1) return(q);<br/>   }<br/>   False<br/>}</pre>"}]}