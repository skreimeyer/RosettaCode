{"task": "Image_convolution", "blocks": [{"lang": "Ada", "loc": 35, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">type</span> Float_Luminance <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Float;<br/>\u00a0<br/><span class=\"kw3\">type</span> Float_Pixel <span class=\"kw1\">is</span> <span class=\"kw3\">record</span><br/>   R, G, B\u00a0: Float_Luminance\u00a0:= <span class=\"nu0\">0.0</span>;<br/><span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/>\u00a0<br/><span class=\"kw3\">function</span> <span class=\"st0\">\"*\"</span> <span class=\"br0\">(</span>Left\u00a0: Float_Pixel; Right\u00a0: Float_Luminance<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Float_Pixel <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">pragma</span> Inline <span class=\"br0\">(</span><span class=\"st0\">\"*\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span>Left.<span class=\"me1\">R</span> * Right, Left.<span class=\"me1\">G</span> * Right, Left.<span class=\"me1\">B</span> * Right<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> <span class=\"st0\">\"*\"</span>;<br/>\u00a0<br/><span class=\"kw3\">function</span> <span class=\"st0\">\"+\"</span> <span class=\"br0\">(</span>Left, Right\u00a0: Float_Pixel<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Float_Pixel <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">pragma</span> Inline <span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span>Left.<span class=\"me1\">R</span> + Right.<span class=\"me1\">R</span>, Left.<span class=\"me1\">G</span> + Right.<span class=\"me1\">G</span>, Left.<span class=\"me1\">B</span> + Right.<span class=\"me1\">B</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> <span class=\"st0\">\"+\"</span>;<br/>\u00a0<br/><span class=\"kw3\">function</span> To_Luminance <span class=\"br0\">(</span>X\u00a0: Float_Luminance<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Luminance <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">pragma</span> Inline <span class=\"br0\">(</span>To_Luminance<span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">if</span> X &lt;= <span class=\"nu0\">0.0</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/>   <span class=\"kw1\">elsif</span> X &gt;= <span class=\"nu0\">255.0</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">255</span>;<br/>   <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">return</span> Luminance <span class=\"br0\">(</span>X<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/><span class=\"kw1\">end</span> To_Luminance;<br/>\u00a0<br/><span class=\"kw3\">function</span> To_Pixel <span class=\"br0\">(</span>X\u00a0: Float_Pixel<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Pixel <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">pragma</span> Inline <span class=\"br0\">(</span>To_Pixel<span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span>To_Luminance <span class=\"br0\">(</span>X.<span class=\"me1\">R</span><span class=\"br0\">)</span>, To_Luminance <span class=\"br0\">(</span>X.<span class=\"me1\">G</span><span class=\"br0\">)</span>, To_Luminance <span class=\"br0\">(</span>X.<span class=\"me1\">B</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> To_Pixel;</pre>"}, {"lang": "BBC BASIC", "loc": 46, "block": "<pre class=\"text highlighted_source\">      Width% = 200<br/>      Height% = 200<br/>\u00a0<br/>      DIM out&amp;(Width%-1, Height%-1, 2)<br/>\u00a0<br/>      VDU 23,22,Width%;Height%;8,16,16,128<br/>      *DISPLAY Lena<br/>      OFF<br/>\u00a0<br/>      DIM filter%(2, 2)<br/>      filter%() = -1, -1, -1, -1, 12, -1, -1, -1, -1<br/>\u00a0<br/>      REM Do the convolution:<br/>      FOR Y% = 1 TO Height%-2<br/>        FOR X% = 1 TO Width%-2<br/>          R% = 0\u00a0: G% = 0\u00a0: B% = 0<br/>          FOR I% = -1 TO 1<br/>            FOR J% = -1 TO 1<br/>              C% = TINT((X%+I%)*2, (Y%+J%)*2)<br/>              F% = filter%(I%+1,J%+1)<br/>              R% += F% * (C% AND &amp;FF)<br/>              G% += F% * (C% &gt;&gt; 8 AND &amp;FF)<br/>              B% += F% * (C% &gt;&gt; 16)<br/>            NEXT<br/>          NEXT<br/>          IF R% &lt; 0 R% = 0 ELSE IF R% &gt; 1020 R% = 1020<br/>          IF G% &lt; 0 G% = 0 ELSE IF G% &gt; 1020 G% = 1020<br/>          IF B% &lt; 0 B% = 0 ELSE IF B% &gt; 1020 B% = 1020<br/>          out&amp;(X%, Y%, 0) = R% / 4 + 0.5<br/>          out&amp;(X%, Y%, 1) = G% / 4 + 0.5<br/>          out&amp;(X%, Y%, 2) = B% / 4 + 0.5<br/>        NEXT<br/>      NEXT Y%<br/>\u00a0<br/>      REM Display:<br/>      GCOL 1<br/>      FOR Y% = 0 TO Height%-1<br/>        FOR X% = 0 TO Width%-1<br/>          COLOUR 1, out&amp;(X%,Y%,0), out&amp;(X%,Y%,1), out&amp;(X%,Y%,2)<br/>          LINE X%*2,Y%*2,X%*2,Y%*2<br/>        NEXT<br/>      NEXT Y%<br/>\u00a0<br/>      REPEAT<br/>        WAIT 1<br/>      UNTIL FALSE</pre>"}, {"lang": "C", "loc": 1, "block": "<pre class=\"c highlighted_source\">image filter<span class=\"br0\">(</span>image img<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> <span class=\"sy0\">*</span>K<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> Ks<span class=\"sy0\">,</span> <span class=\"kw4\">double</span><span class=\"sy0\">,</span> <span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "D", "loc": 116, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> grayscale_image<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> ConvolutionFilter <span class=\"br0\">{</span><br/>    <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> kernel<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> divisor<span class=\"sy0\">,</span> offset_<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">string</span> name<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>Image<span class=\"sy0\">!</span>Color convolve<span class=\"br0\">(</span>Color<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> Image<span class=\"sy0\">!</span>Color im<span class=\"sy0\">,</span><br/>                            <span class=\"kw2\">in</span> ConvolutionFilter filter<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>im <span class=\"sy0\">!</span><span class=\"kw2\">is</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>filter.<span class=\"me1\">divisor</span>.<span class=\"me1\">isNaN</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>filter.<span class=\"me1\">offset_</span>.<span class=\"me1\">isNaN</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>filter.<span class=\"me1\">divisor</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>filter.<span class=\"me1\">kernel</span>.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> filter.<span class=\"me1\">kernel</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> row<span class=\"sy0\">;</span> filter.<span class=\"me1\">kernel</span><span class=\"br0\">)</span> <span class=\"co1\">// Is rectangular.</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span>row.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> filter.<span class=\"me1\">kernel</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>filter.<span class=\"me1\">kernel</span>.<span class=\"me1\">length</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Odd sized kernel.</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>filter.<span class=\"me1\">kernel</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>im.<span class=\"me1\">ny</span> <span class=\"sy0\">&gt;=</span> filter.<span class=\"me1\">kernel</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>im.<span class=\"me1\">nx</span> <span class=\"sy0\">&gt;=</span> filter.<span class=\"me1\">kernel</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">out</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>result <span class=\"sy0\">!</span><span class=\"kw2\">is</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>result.<span class=\"me1\">nx</span> <span class=\"sy0\">==</span> im.<span class=\"me1\">nx</span> <span class=\"sy0\">&amp;&amp;</span> result.<span class=\"me1\">ny</span> <span class=\"sy0\">==</span> im.<span class=\"me1\">ny</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> knx2 <span class=\"sy0\">=</span> filter.<span class=\"me1\">kernel</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> kny2 <span class=\"sy0\">=</span> filter.<span class=\"me1\">kernel</span>.<span class=\"me1\">length</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> io <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Image<span class=\"sy0\">!</span>Color<span class=\"br0\">(</span>im.<span class=\"me1\">nx</span><span class=\"sy0\">,</span> im.<span class=\"me1\">ny</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">is</span><span class=\"br0\">(</span>Color <span class=\"sy0\">==</span> RGB<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">alias</span> CT <span class=\"sy0\">=</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span>Color.<span class=\"me1\">r</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Component type.</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw4\">static</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">is</span><span class=\"br0\">(</span><span class=\"kw2\">typeof</span><span class=\"br0\">(</span>Color.<span class=\"me1\">c</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">alias</span> CT <span class=\"sy0\">=</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span>Color.<span class=\"me1\">c</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw2\">alias</span> CT <span class=\"sy0\">=</span> Color<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> y<span class=\"sy0\">;</span> kny2 <span class=\"sy0\">..</span> <span class=\"me1\">im</span>.<span class=\"me1\">ny</span> <span class=\"sy0\">-</span> kny2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> x<span class=\"sy0\">;</span> knx2 <span class=\"sy0\">..</span> <span class=\"me1\">im</span>.<span class=\"me1\">nx</span> <span class=\"sy0\">-</span> knx2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">static</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">is</span><span class=\"br0\">(</span>Color <span class=\"sy0\">==</span> RGB<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> total <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>                <span class=\"kw4\">double</span> total <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> sy<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> kRow<span class=\"sy0\">;</span> filter.<span class=\"me1\">kernel</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> sx<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> k<span class=\"sy0\">;</span> kRow<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw4\">immutable</span> p <span class=\"sy0\">=</span> im<span class=\"br0\">[</span>x <span class=\"sy0\">+</span> sx <span class=\"sy0\">-</span> knx2<span class=\"sy0\">,</span> y <span class=\"sy0\">+</span> sy <span class=\"sy0\">-</span> kny2<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw4\">static</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">is</span><span class=\"br0\">(</span>Color <span class=\"sy0\">==</span> RGB<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        total<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> p.<span class=\"me1\">r</span> <span class=\"sy0\">*</span> k<span class=\"sy0\">;</span><br/>                        total<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> p.<span class=\"me1\">g</span> <span class=\"sy0\">*</span> k<span class=\"sy0\">;</span><br/>                        total<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> p.<span class=\"me1\">b</span> <span class=\"sy0\">*</span> k<span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                        total <span class=\"sy0\">+=</span> p <span class=\"sy0\">*</span> k<span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw4\">immutable</span> D <span class=\"sy0\">=</span> filter.<span class=\"me1\">divisor</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">immutable</span> O <span class=\"sy0\">=</span> filter.<span class=\"me1\">offset_</span> <span class=\"sy0\">*</span> CT.<span class=\"me1\">max</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">static</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">is</span><span class=\"br0\">(</span>Color <span class=\"sy0\">==</span> RGB<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                io<span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Color<span class=\"br0\">(</span><br/>                    <span class=\"kw2\">cast</span><span class=\"br0\">(</span>CT<span class=\"br0\">)</span>min<span class=\"br0\">(</span>max<span class=\"br0\">(</span>total<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">/</span> D <span class=\"sy0\">+</span> O<span class=\"sy0\">,</span> CT.<span class=\"me1\">min</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> CT.<span class=\"me1\">max</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                    <span class=\"kw2\">cast</span><span class=\"br0\">(</span>CT<span class=\"br0\">)</span>min<span class=\"br0\">(</span>max<span class=\"br0\">(</span>total<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">/</span> D <span class=\"sy0\">+</span> O<span class=\"sy0\">,</span> CT.<span class=\"me1\">min</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> CT.<span class=\"me1\">max</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                    <span class=\"kw2\">cast</span><span class=\"br0\">(</span>CT<span class=\"br0\">)</span>min<span class=\"br0\">(</span>max<span class=\"br0\">(</span>total<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">/</span> D <span class=\"sy0\">+</span> O<span class=\"sy0\">,</span> CT.<span class=\"me1\">min</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> CT.<span class=\"me1\">max</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw4\">static</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">is</span><span class=\"br0\">(</span><span class=\"kw2\">typeof</span><span class=\"br0\">(</span>Color.<span class=\"me1\">c</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                io<span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Color<span class=\"br0\">(</span><br/>                    <span class=\"kw2\">cast</span><span class=\"br0\">(</span>CT<span class=\"br0\">)</span>min<span class=\"br0\">(</span>max<span class=\"br0\">(</span>total <span class=\"sy0\">/</span> D <span class=\"sy0\">+</span> O<span class=\"sy0\">,</span> CT.<span class=\"me1\">min</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> CT.<span class=\"me1\">max</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <span class=\"co1\">// If Color doesn't have a 'c' field, then Color is</span><br/>                <span class=\"co1\">// assumed to be a built-in type.</span><br/>                io<span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">]</span> <span class=\"sy0\">=</span><br/>                    <span class=\"kw2\">cast</span><span class=\"br0\">(</span>CT<span class=\"br0\">)</span>min<span class=\"br0\">(</span>max<span class=\"br0\">(</span>total <span class=\"sy0\">/</span> D <span class=\"sy0\">+</span> O<span class=\"sy0\">,</span> CT.<span class=\"me1\">min</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> CT.<span class=\"me1\">max</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> io<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> ConvolutionFilter<span class=\"br0\">[</span><span class=\"br0\">]</span> filters <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>        <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu16\">2.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span>  <span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">[</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">,</span>  <span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">2.0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> divisor<span class=\"sy0\">:</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> offset_<span class=\"sy0\">:</span><span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> name<span class=\"sy0\">:</span><span class=\"st0\">\"Emboss\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">1.0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span>  <span class=\"nu16\">9.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">1.0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">1.0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> divisor<span class=\"sy0\">:</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Sharpen\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">2.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">1.0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">[</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">,</span>  <span class=\"nu16\">0.0</span><span class=\"sy0\">,</span>  <span class=\"nu16\">0.0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">[</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">,</span>  <span class=\"nu16\">2.0</span><span class=\"sy0\">,</span>  <span class=\"nu16\">1.0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> divisor<span class=\"sy0\">:</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.5</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Sobel_emboss\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">[</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">[</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> divisor<span class=\"sy0\">:</span><span class=\"nu16\">9.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Box_blur\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">4</span><span class=\"sy0\">,</span>  <span class=\"nu0\">7</span><span class=\"sy0\">,</span>  <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">26</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">26</span><span class=\"sy0\">,</span> <span class=\"nu0\">41</span><span class=\"sy0\">,</span> <span class=\"nu0\">26</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">26</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>          <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">4</span><span class=\"sy0\">,</span>  <span class=\"nu0\">7</span><span class=\"sy0\">,</span>  <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> divisor<span class=\"sy0\">:</span><span class=\"nu0\">273</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Gaussian_blur\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    Image<span class=\"sy0\">!</span>RGB im<span class=\"sy0\">;</span><br/>    im.<span class=\"me1\">loadPPM6</span><span class=\"br0\">(</span><span class=\"st0\">\"Lenna100.ppm\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> filter<span class=\"sy0\">;</span> filters<span class=\"br0\">)</span><br/>        im.<span class=\"me1\">convolve</span><span class=\"br0\">(</span>filter<span class=\"br0\">)</span><br/>        .<span class=\"me1\">savePPM6</span><span class=\"br0\">(</span>format<span class=\"br0\">(</span><span class=\"st0\">\"lenna_%s.ppm\"</span><span class=\"sy0\">,</span> filter.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">const</span> img <span class=\"sy0\">=</span> im.<span class=\"me1\">rgb2grayImage</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> filter<span class=\"sy0\">;</span> filters<span class=\"br0\">)</span><br/>        img.<span class=\"me1\">convolve</span><span class=\"br0\">(</span>filter<span class=\"br0\">)</span><br/>        .<span class=\"me1\">savePGM</span><span class=\"br0\">(</span>format<span class=\"br0\">(</span><span class=\"st0\">\"lenna_gray_%s.ppm\"</span><span class=\"sy0\">,</span> filter.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Go", "loc": 91, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"image\"</span><br/>    <span class=\"st0\">\"image/color\"</span><br/>    <span class=\"st0\">\"image/jpeg\"</span><br/>    <span class=\"st0\">\"math\"</span><br/>    <span class=\"st0\">\"os\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// kf3 is a generic convolution 3x3 kernel filter that operatates on</span><br/><span class=\"co1\">// images of type image.Gray from the Go standard image library.</span><br/><span class=\"kw4\">func</span> kf3<span class=\"sy1\">(</span>k <span class=\"sy3\">*</span><span class=\"sy1\">[</span><span class=\"nu0\">9</span><span class=\"sy1\">]</span><span class=\"kw4\">float64</span><span class=\"sy1\">,</span> src<span class=\"sy1\">,</span> dst <span class=\"sy3\">*</span>image<span class=\"sy3\">.</span>Gray<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> y <span class=\"sy2\">:=</span> src<span class=\"sy3\">.</span>Rect<span class=\"sy3\">.</span>Min<span class=\"sy3\">.</span>Y<span class=\"sy1\">;</span> y &lt; src<span class=\"sy3\">.</span>Rect<span class=\"sy3\">.</span>Max<span class=\"sy3\">.</span>Y<span class=\"sy1\">;</span> y<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> x <span class=\"sy2\">:=</span> src<span class=\"sy3\">.</span>Rect<span class=\"sy3\">.</span>Min<span class=\"sy3\">.</span>X<span class=\"sy1\">;</span> x &lt; src<span class=\"sy3\">.</span>Rect<span class=\"sy3\">.</span>Max<span class=\"sy3\">.</span>X<span class=\"sy1\">;</span> x<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">var</span> sum <span class=\"kw4\">float64</span><br/>            <span class=\"kw1\">var</span> <span class=\"nu2\">i</span> <span class=\"kw4\">int</span><br/>            <span class=\"kw1\">for</span> yo <span class=\"sy2\">:=</span> y <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> yo &lt;<span class=\"sy2\">=</span> y<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span> yo<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">for</span> xo <span class=\"sy2\">:=</span> x <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> xo &lt;<span class=\"sy2\">=</span> x<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span> xo<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"sy1\">(</span>image<span class=\"sy3\">.</span>Point<span class=\"sy1\">{</span>xo<span class=\"sy1\">,</span> yo<span class=\"sy1\">})</span><span class=\"sy3\">.</span>In<span class=\"sy1\">(</span>src<span class=\"sy3\">.</span>Rect<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                        sum <span class=\"sy2\">+=</span> k<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy3\">*</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>src<span class=\"sy3\">.</span>At<span class=\"sy1\">(</span>xo<span class=\"sy1\">,</span> yo<span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"sy1\">(</span>color<span class=\"sy3\">.</span>Gray<span class=\"sy1\">)</span><span class=\"sy3\">.</span>Y<span class=\"sy1\">)</span><br/>                    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>                        sum <span class=\"sy2\">+=</span> k<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy3\">*</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>src<span class=\"sy3\">.</span>At<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y<span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"sy1\">(</span>color<span class=\"sy3\">.</span>Gray<span class=\"sy1\">)</span><span class=\"sy3\">.</span>Y<span class=\"sy1\">)</span><br/>                    <span class=\"sy1\">}</span><br/>                    <span class=\"nu2\">i</span><span class=\"sy2\">++</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>            dst<span class=\"sy3\">.</span>SetGray<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span><br/>                color<span class=\"sy3\">.</span>Gray<span class=\"sy1\">{</span><span class=\"kw4\">uint8</span><span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Min<span class=\"sy1\">(</span><span class=\"nu0\">255</span><span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>Max<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> sum<span class=\"sy1\">)))})</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> blur <span class=\"sy2\">=</span> <span class=\"sy1\">[</span><span class=\"nu0\">9</span><span class=\"sy1\">]</span><span class=\"kw4\">float64</span><span class=\"sy1\">{</span><br/>    <span class=\"nu0\">1</span><span class=\"sy3\">.</span> <span class=\"sy3\">/</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span> <span class=\"sy3\">/</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span> <span class=\"sy3\">/</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span><br/>    <span class=\"nu0\">1</span><span class=\"sy3\">.</span> <span class=\"sy3\">/</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span> <span class=\"sy3\">/</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span> <span class=\"sy3\">/</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span><br/>    <span class=\"nu0\">1</span><span class=\"sy3\">.</span> <span class=\"sy3\">/</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span> <span class=\"sy3\">/</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span> <span class=\"sy3\">/</span> <span class=\"nu0\">9</span><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// blurY example function applies blur kernel to Y channel</span><br/><span class=\"co1\">// of YCbCr image using generic kernel filter function kf3</span><br/><span class=\"kw4\">func</span> blurY<span class=\"sy1\">(</span>src <span class=\"sy3\">*</span>image<span class=\"sy3\">.</span>YCbCr<span class=\"sy1\">)</span> <span class=\"sy3\">*</span>image<span class=\"sy3\">.</span>YCbCr <span class=\"sy1\">{</span><br/>    dst <span class=\"sy2\">:=</span> <span class=\"sy3\">*</span>src<br/>\u00a0<br/>    <span class=\"co1\">// catch zero-size image here</span><br/>    <span class=\"kw1\">if</span> src<span class=\"sy3\">.</span>Rect<span class=\"sy3\">.</span>Max<span class=\"sy3\">.</span>X <span class=\"sy3\">==</span> src<span class=\"sy3\">.</span>Rect<span class=\"sy3\">.</span>Min<span class=\"sy3\">.</span>X <span class=\"sy3\">||</span> src<span class=\"sy3\">.</span>Rect<span class=\"sy3\">.</span>Max<span class=\"sy3\">.</span>Y <span class=\"sy3\">==</span> src<span class=\"sy3\">.</span>Rect<span class=\"sy3\">.</span>Min<span class=\"sy3\">.</span>Y <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> &amp;dst<br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// pass Y channels as gray images</span><br/>    srcGray <span class=\"sy2\">:=</span> image<span class=\"sy3\">.</span>Gray<span class=\"sy1\">{</span>src<span class=\"sy3\">.</span>Y<span class=\"sy1\">,</span> src<span class=\"sy3\">.</span>YStride<span class=\"sy1\">,</span> src<span class=\"sy3\">.</span>Rect<span class=\"sy1\">}</span><br/>    dstGray <span class=\"sy2\">:=</span> srcGray<br/>    dstGray<span class=\"sy3\">.</span>Pix <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">uint8</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>src<span class=\"sy3\">.</span>Y<span class=\"sy1\">))</span><br/>    kf3<span class=\"sy1\">(</span>&amp;blur<span class=\"sy1\">,</span> &amp;srcGray<span class=\"sy1\">,</span> &amp;dstGray<span class=\"sy1\">)</span> <span class=\"co1\">// call generic convolution function</span><br/>\u00a0<br/>    <span class=\"co1\">// complete result</span><br/>    dst<span class=\"sy3\">.</span><span class=\"me1\">Y</span> <span class=\"sy2\">=</span> dstGray<span class=\"sy3\">.</span><span class=\"me1\">Pix</span>                   <span class=\"co1\">// convolution result</span><br/>    dst<span class=\"sy3\">.</span>Cb <span class=\"sy2\">=</span> append<span class=\"sy1\">([]</span><span class=\"kw4\">uint8</span><span class=\"sy1\">{},</span> src<span class=\"sy3\">.</span>Cb<span class=\"sy4\">...</span><span class=\"sy1\">)</span> <span class=\"co1\">// Cb, Cr are just copied</span><br/>    dst<span class=\"sy3\">.</span>Cr <span class=\"sy2\">=</span> append<span class=\"sy1\">([]</span><span class=\"kw4\">uint8</span><span class=\"sy1\">{},</span> src<span class=\"sy3\">.</span>Cr<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> &amp;dst<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// Example file used here is Lenna100.jpg from the task \"Percentage</span><br/>    <span class=\"co1\">// difference between images\"</span><br/>    f<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> os<span class=\"sy3\">.</span><span class=\"me1\">Open</span><span class=\"sy1\">(</span><span class=\"st0\">\"Lenna100.jpg\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    img<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> jpeg<span class=\"sy3\">.</span>Decode<span class=\"sy1\">(</span>f<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    f<span class=\"sy3\">.</span>Close<span class=\"sy1\">()</span><br/>    y<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> img<span class=\"sy3\">.</span><span class=\"sy1\">(</span><span class=\"sy3\">*</span>image<span class=\"sy3\">.</span>YCbCr<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>ok <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"expected color jpeg\"</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    f<span class=\"sy1\">,</span> err <span class=\"sy2\">=</span> os<span class=\"sy3\">.</span>Create<span class=\"sy1\">(</span><span class=\"st0\">\"blur.jpg\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    err <span class=\"sy2\">=</span> jpeg<span class=\"sy3\">.</span>Encode<span class=\"sy1\">(</span>f<span class=\"sy1\">,</span> blurY<span class=\"sy1\">(</span>y<span class=\"sy1\">),</span> &amp;jpeg<span class=\"sy3\">.</span>Options<span class=\"sy1\">{</span><span class=\"nu0\">90</span><span class=\"sy1\">})</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "J", "loc": 10, "block": "<pre class=\"j highlighted_source\"><span class=\"co1\">NB. pad the edges of an array with border pixels</span><br/><span class=\"co1\">NB. (increasing the first two dimensions by 1 less than the kernel size)</span><br/>pad=: adverb define<br/>  <span class=\"st_h\">'a b'</span>=. <span class=\"sy0\">(</span>&lt;. ,. &gt;.<span class=\"sy0\">)</span> <span class=\"nu0\">0.5</span> <span class=\"nu0\">0.5</span> p. $<span class=\"kw2\">m</span><br/>  a\"<span class=\"nu0\">_</span>`<span class=\"sy0\">(</span><span class=\"nu0\">0</span> , ] - 1:<span class=\"sy0\">)</span>`<span class=\"sy0\">(</span># 1:<span class=\"sy0\">)</span>}~&amp;# # b\"<span class=\"nu0\">_</span>`<span class=\"sy0\">(</span><span class=\"nu0\">0</span> , ] - 1:<span class=\"sy0\">)</span>`<span class=\"sy0\">(</span># 1:<span class=\"sy0\">)</span>}~&amp;<span class=\"sy0\">(</span><span class=\"nu0\">1</span> { $<span class=\"sy0\">)</span> #\"<span class=\"nu0\">1</span> ]<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>kernel_filter=: adverb define<br/>   <span class=\"sy0\">(</span>$<span class=\"kw2\">m</span><span class=\"sy0\">)</span>+/ .*&amp;<span class=\"sy0\">(</span>,<span class=\"kw2\">m</span><span class=\"sy0\">)</span>&amp;<span class=\"sy0\">(</span>,/<span class=\"sy0\">)</span>;.<span class=\"nu0\">_3</span> <span class=\"kw2\">m</span> pad<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 141, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.image.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.File</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.IOException</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.imageio.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> ImageConvolution<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> ArrayData<br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> dataArray<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> width<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> height<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> ArrayData<span class=\"br0\">(</span><span class=\"kw4\">int</span> width, <span class=\"kw4\">int</span> height<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">this</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>width <span class=\"sy0\">*</span> height<span class=\"br0\">]</span>, width, height<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> ArrayData<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> dataArray, <span class=\"kw4\">int</span> width, <span class=\"kw4\">int</span> height<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">this</span>.<span class=\"me1\">dataArray</span> <span class=\"sy0\">=</span> dataArray<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">this</span>.<span class=\"me1\">width</span> <span class=\"sy0\">=</span> width<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">this</span>.<span class=\"me1\">height</span> <span class=\"sy0\">=</span> height<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> get<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>  <span class=\"kw1\">return</span> dataArray<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> width <span class=\"sy0\">+</span> x<span class=\"br0\">]</span><span class=\"sy0\">;</span>  <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> set<span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> value<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>  dataArray<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> width <span class=\"sy0\">+</span> x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> value<span class=\"sy0\">;</span>  <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> bound<span class=\"br0\">(</span><span class=\"kw4\">int</span> value, <span class=\"kw4\">int</span> endIndex<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>value <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>value <span class=\"sy0\">&lt;</span> endIndex<span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> value<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> endIndex <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> ArrayData convolute<span class=\"br0\">(</span>ArrayData inputData, ArrayData kernel, <span class=\"kw4\">int</span> kernelDivisor<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> inputWidth <span class=\"sy0\">=</span> inputData.<span class=\"me1\">width</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> inputHeight <span class=\"sy0\">=</span> inputData.<span class=\"me1\">height</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> kernelWidth <span class=\"sy0\">=</span> kernel.<span class=\"me1\">width</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> kernelHeight <span class=\"sy0\">=</span> kernel.<span class=\"me1\">height</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>kernelWidth <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>kernelWidth <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Kernel must have odd width\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>kernelHeight <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>kernelHeight <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Kernel must have odd height\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> kernelWidthRadius <span class=\"sy0\">=</span> kernelWidth <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> kernelHeightRadius <span class=\"sy0\">=</span> kernelHeight <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    ArrayData outputData <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayData<span class=\"br0\">(</span>inputWidth, inputHeight<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> inputWidth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> inputHeight <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> newValue <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> kw <span class=\"sy0\">=</span> kernelWidth <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> kw <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> kw<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> kh <span class=\"sy0\">=</span> kernelHeight <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> kh <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> kh<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>            newValue <span class=\"sy0\">+=</span> kernel.<span class=\"me1\">get</span><span class=\"br0\">(</span>kw, kh<span class=\"br0\">)</span> <span class=\"sy0\">*</span> inputData.<span class=\"me1\">get</span><span class=\"br0\">(</span><br/>                          bound<span class=\"br0\">(</span>i <span class=\"sy0\">+</span> kw <span class=\"sy0\">-</span> kernelWidthRadius, inputWidth<span class=\"br0\">)</span>,<br/>                          bound<span class=\"br0\">(</span>j <span class=\"sy0\">+</span> kh <span class=\"sy0\">-</span> kernelHeightRadius, inputHeight<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        outputData.<span class=\"me1\">set</span><span class=\"br0\">(</span>i, j, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">round</span><span class=\"br0\">(</span>newValue <span class=\"sy0\">/</span> kernelDivisor<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> outputData<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> ArrayData<span class=\"br0\">[</span><span class=\"br0\">]</span> getArrayDatasFromImage<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> filename<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a><br/>  <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedimage+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedImage</span></a> inputImage <span class=\"sy0\">=</span> ImageIO.<span class=\"me1\">read</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afile+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">File</span></a><span class=\"br0\">(</span>filename<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> width <span class=\"sy0\">=</span> inputImage.<span class=\"me1\">getWidth</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> height <span class=\"sy0\">=</span> inputImage.<span class=\"me1\">getHeight</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> rgbData <span class=\"sy0\">=</span> inputImage.<span class=\"me1\">getRGB</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, width, height, <span class=\"kw2\">null</span>, <span class=\"nu0\">0</span>, width<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    ArrayData reds <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayData<span class=\"br0\">(</span>width, height<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    ArrayData greens <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayData<span class=\"br0\">(</span>width, height<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    ArrayData blues <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayData<span class=\"br0\">(</span>width, height<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> height<span class=\"sy0\">;</span> y<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> width<span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> rgbValue <span class=\"sy0\">=</span> rgbData<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> width <span class=\"sy0\">+</span> x<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        reds.<span class=\"me1\">set</span><span class=\"br0\">(</span>x, y, <span class=\"br0\">(</span>rgbValue <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0xFF<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        greens.<span class=\"me1\">set</span><span class=\"br0\">(</span>x, y, <span class=\"br0\">(</span>rgbValue <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0xFF<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        blues.<span class=\"me1\">set</span><span class=\"br0\">(</span>x, y, rgbValue <span class=\"sy0\">&amp;</span> 0xFF<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> ArrayData<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> reds, greens, blues <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> writeOutputImage<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> filename, ArrayData<span class=\"br0\">[</span><span class=\"br0\">]</span> redGreenBlue<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a><br/>  <span class=\"br0\">{</span><br/>    ArrayData reds <span class=\"sy0\">=</span> redGreenBlue<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    ArrayData greens <span class=\"sy0\">=</span> redGreenBlue<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    ArrayData blues <span class=\"sy0\">=</span> redGreenBlue<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedimage+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedImage</span></a> outputImage <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedimage+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedImage</span></a><span class=\"br0\">(</span>reds.<span class=\"me1\">width</span>, reds.<span class=\"me1\">height</span>,<br/>                                                  <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedimage+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedImage</span></a>.<span class=\"me1\">TYPE_INT_ARGB</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> reds.<span class=\"me1\">height</span><span class=\"sy0\">;</span> y<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> reds.<span class=\"me1\">width</span><span class=\"sy0\">;</span> x<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> red <span class=\"sy0\">=</span> bound<span class=\"br0\">(</span>reds.<span class=\"me1\">get</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span>, <span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> green <span class=\"sy0\">=</span> bound<span class=\"br0\">(</span>greens.<span class=\"me1\">get</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span>, <span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> blue <span class=\"sy0\">=</span> bound<span class=\"br0\">(</span>blues.<span class=\"me1\">get</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span>, <span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        outputImage.<span class=\"me1\">setRGB</span><span class=\"br0\">(</span>x, y, <span class=\"br0\">(</span>red <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>green <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> blue <span class=\"sy0\">|</span> <span class=\"sy0\">-</span>0x01000000<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    ImageIO.<span class=\"me1\">write</span><span class=\"br0\">(</span>outputImage, <span class=\"st0\">\"PNG\"</span>, <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afile+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">File</span></a><span class=\"br0\">(</span>filename<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> kernelWidth <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> kernelHeight <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> kernelDivisor <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Kernel size: \"</span> <span class=\"sy0\">+</span> kernelWidth <span class=\"sy0\">+</span> <span class=\"st0\">\"x\"</span> <span class=\"sy0\">+</span> kernelHeight <span class=\"sy0\">+</span><br/>                       <span class=\"st0\">\", divisor=\"</span> <span class=\"sy0\">+</span> kernelDivisor<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>    ArrayData kernel <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayData<span class=\"br0\">(</span>kernelWidth, kernelHeight<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> kernelHeight<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"[\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> kernelWidth<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>        kernel.<span class=\"me1\">set</span><span class=\"br0\">(</span>j, i, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span>y<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> kernel.<span class=\"me1\">get</span><span class=\"br0\">(</span>j, i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    ArrayData<span class=\"br0\">[</span><span class=\"br0\">]</span> dataArrays <span class=\"sy0\">=</span> getArrayDatasFromImage<span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> dataArrays.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>      dataArrays<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> convolute<span class=\"br0\">(</span>dataArrays<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, kernel, kernelDivisor<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeOutputImage<span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, dataArrays<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 76, "block": "<pre class=\"javascript highlighted_source\"><span class=\"co1\">// Image imageIn, Array kernel, function (Error error, Image imageOut)</span><br/><span class=\"co1\">// precondition: Image is loaded</span><br/><span class=\"co1\">// returns loaded Image to asynchronous callback function</span><br/><span class=\"kw1\">function</span> convolve<span class=\"br0\">(</span>imageIn<span class=\"sy0\">,</span> kernel<span class=\"sy0\">,</span> callback<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> dim <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>kernel.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        pad <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>dim <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dim <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">!==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> callback<span class=\"br0\">(</span><span class=\"kw1\">new</span> RangeError<span class=\"br0\">(</span><span class=\"st0\">\"Invalid kernel dimension\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> w <span class=\"sy0\">=</span> imageIn.<span class=\"me1\">width</span><span class=\"sy0\">,</span><br/>        h <span class=\"sy0\">=</span> imageIn.<span class=\"me1\">height</span><span class=\"sy0\">,</span><br/>        can <span class=\"sy0\">=</span> document.<span class=\"me1\">createElement</span><span class=\"br0\">(</span><span class=\"st0\">'canvas'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        cw<span class=\"sy0\">,</span><br/>        ch<span class=\"sy0\">,</span><br/>        ctx<span class=\"sy0\">,</span><br/>        imgIn<span class=\"sy0\">,</span> imgOut<span class=\"sy0\">,</span><br/>        datIn<span class=\"sy0\">,</span> datOut<span class=\"sy0\">;</span><br/>\u00a0<br/>    can.<span class=\"me1\">width</span> <span class=\"sy0\">=</span> cw <span class=\"sy0\">=</span> w <span class=\"sy0\">+</span> pad <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"co1\">// add padding</span><br/>    can.<span class=\"me1\">height</span> <span class=\"sy0\">=</span> ch <span class=\"sy0\">=</span> h <span class=\"sy0\">+</span> pad <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"co1\">// add padding</span><br/>\u00a0<br/>    ctx <span class=\"sy0\">=</span> can.<span class=\"me1\">getContext</span><span class=\"br0\">(</span><span class=\"st0\">'2d'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    ctx.<span class=\"me1\">fillStyle</span> <span class=\"sy0\">=</span> <span class=\"st0\">'#000'</span><span class=\"sy0\">;</span> <span class=\"co1\">// fill with opaque black</span><br/>    ctx.<span class=\"me1\">fillRect</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> cw<span class=\"sy0\">,</span> ch<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    ctx.<span class=\"me1\">drawImage</span><span class=\"br0\">(</span>imageIn<span class=\"sy0\">,</span> pad<span class=\"sy0\">,</span> pad<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    imgIn <span class=\"sy0\">=</span> ctx.<span class=\"me1\">getImageData</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> cw<span class=\"sy0\">,</span> ch<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    datIn <span class=\"sy0\">=</span> imgIn.<span class=\"me1\">data</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    imgOut <span class=\"sy0\">=</span> ctx.<span class=\"me1\">createImageData</span><span class=\"br0\">(</span>w<span class=\"sy0\">,</span> h<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    datOut <span class=\"sy0\">=</span> imgOut.<span class=\"me1\">data</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> row<span class=\"sy0\">,</span> col<span class=\"sy0\">,</span> pix<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> dx<span class=\"sy0\">,</span> dy<span class=\"sy0\">,</span> r<span class=\"sy0\">,</span> g<span class=\"sy0\">,</span> b<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>row <span class=\"sy0\">=</span> pad<span class=\"sy0\">;</span> row <span class=\"sy0\">&lt;=</span> h<span class=\"sy0\">;</span> row<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>col <span class=\"sy0\">=</span> pad<span class=\"sy0\">;</span> col <span class=\"sy0\">&lt;=</span> w<span class=\"sy0\">;</span> col<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            r <span class=\"sy0\">=</span> g <span class=\"sy0\">=</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>dx <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>pad<span class=\"sy0\">;</span> dx <span class=\"sy0\">&lt;=</span> pad<span class=\"sy0\">;</span> dx<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span>dy <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>pad<span class=\"sy0\">;</span> dy <span class=\"sy0\">&lt;=</span> pad<span class=\"sy0\">;</span> dy<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    i <span class=\"sy0\">=</span> <span class=\"br0\">(</span>dy <span class=\"sy0\">+</span> pad<span class=\"br0\">)</span> <span class=\"sy0\">*</span> dim <span class=\"sy0\">+</span> <span class=\"br0\">(</span>dx <span class=\"sy0\">+</span> pad<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// kernel index</span><br/>                    pix <span class=\"sy0\">=</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>row <span class=\"sy0\">+</span> dy<span class=\"br0\">)</span> <span class=\"sy0\">*</span> cw <span class=\"sy0\">+</span> <span class=\"br0\">(</span>col <span class=\"sy0\">+</span> dx<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// image index</span><br/>                    r <span class=\"sy0\">+=</span> datIn<span class=\"br0\">[</span>pix<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> kernel<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    g <span class=\"sy0\">+=</span> datIn<span class=\"br0\">[</span>pix<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> kernel<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    b <span class=\"sy0\">+=</span> datIn<span class=\"br0\">[</span>pix  <span class=\"br0\">]</span> <span class=\"sy0\">*</span> kernel<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            pix <span class=\"sy0\">=</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>row <span class=\"sy0\">-</span> pad<span class=\"br0\">)</span> <span class=\"sy0\">*</span> w <span class=\"sy0\">+</span> <span class=\"br0\">(</span>col <span class=\"sy0\">-</span> pad<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// destination index</span><br/>            datOut<span class=\"br0\">[</span>pix<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>r <span class=\"sy0\">+</span> .5<span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            datOut<span class=\"br0\">[</span>pix<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>g <span class=\"sy0\">+</span> .5<span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            datOut<span class=\"br0\">[</span>pix<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">+</span> .5<span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            datOut<span class=\"br0\">[</span>pix  <span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span> <span class=\"co1\">// we want opaque image</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// reuse canvas</span><br/>    can.<span class=\"me1\">width</span> <span class=\"sy0\">=</span> w<span class=\"sy0\">;</span><br/>    can.<span class=\"me1\">height</span> <span class=\"sy0\">=</span> h<span class=\"sy0\">;</span><br/>\u00a0<br/>    ctx.<span class=\"me1\">putImageData</span><span class=\"br0\">(</span>imgOut<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> imageOut <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Image<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    imageOut.<span class=\"me1\">addEventListener</span><span class=\"br0\">(</span><span class=\"st0\">'load'</span><span class=\"sy0\">,</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        callback<span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"sy0\">,</span> imageOut<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    imageOut.<span class=\"me1\">addEventListener</span><span class=\"br0\">(</span><span class=\"st0\">'error'</span><span class=\"sy0\">,</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>error<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        callback<span class=\"br0\">(</span>error<span class=\"sy0\">,</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    imageOut.<span class=\"me1\">src</span> <span class=\"sy0\">=</span> can.<span class=\"me1\">toDataURL</span><span class=\"br0\">(</span><span class=\"st0\">'image/png'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>using FileIO, Images<br/>\u00a0<br/>img = load(\"image.jpg\")<br/>\u00a0<br/>sharpenkernel = reshape([-1.0, -1.0, -1.0, -1.0,  9.0, -1.0, -1.0, -1.0, -1.0], (3,3))<br/>\u00a0<br/>imfilt = imfilter(img, sharpenkernel)<br/>\u00a0<br/>save(\"imagesharper.png\", imfilt)<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 116, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.10</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> kotlin.<span class=\"me1\">math</span>.<span class=\"me1\">round</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">image</span>.<span class=\"sy0\">*</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">imageio</span>.<span class=\"sy0\">*</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> ArrayData<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> width<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> height<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> dataArray <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>width <span class=\"sy0\">*</span> height<span class=\"br0\">)</span><br/>\u00a0<br/>    operator fun get<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> dataArray<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> width + x<span class=\"br0\">]</span><br/>\u00a0<br/>    operator fun set<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int, value<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        dataArray<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> width + x<span class=\"br0\">]</span> <span class=\"sy0\">=</span> value<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun bound<span class=\"br0\">(</span>value<span class=\"sy0\">:</span> Int, endIndex<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> when <span class=\"br0\">{</span><br/>    value <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span>        -<span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>    value <span class=\"sy0\">&lt;</span> endIndex -<span class=\"sy0\">&gt;</span> value<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>             -<span class=\"sy0\">&gt;</span> endIndex - <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun convolute<span class=\"br0\">(</span><br/>    inputData<span class=\"sy0\">:</span> ArrayData,<br/>    kernel<span class=\"sy0\">:</span> ArrayData,<br/>    kernelDivisor<span class=\"sy0\">:</span> Int<br/><span class=\"br0\">)</span><span class=\"sy0\">:</span> ArrayData <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> inputWidth <span class=\"sy0\">=</span> inputData.<span class=\"me1\">width</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> inputHeight <span class=\"sy0\">=</span> inputData.<span class=\"me1\">height</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> kernelWidth <span class=\"sy0\">=</span> kernel.<span class=\"me1\">width</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> kernelHeight <span class=\"sy0\">=</span> kernel.<span class=\"me1\">height</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>kernelWidth <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> || <span class=\"br0\">(</span>kernelWidth and <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Kernel must have odd width\"</span><span class=\"br0\">)</span>  <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>kernelHeight <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> || <span class=\"br0\">(</span>kernelHeight and <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Kernel must have odd height\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> kernelWidthRadius <span class=\"sy0\">=</span> kernelWidth ushr <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> kernelHeightRadius <span class=\"sy0\">=</span> kernelHeight ushr <span class=\"nu0\">1</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> outputData <span class=\"sy0\">=</span> ArrayData<span class=\"br0\">(</span>inputWidth, inputHeight<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in inputWidth - <span class=\"nu0\">1</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in inputHeight - <span class=\"nu0\">1</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> newValue <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>kw in kernelWidth - <span class=\"nu0\">1</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>kh in kernelHeight - <span class=\"nu0\">1</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    newValue +<span class=\"sy0\">=</span> kernel<span class=\"br0\">[</span>kw, kh<span class=\"br0\">]</span> <span class=\"sy0\">*</span> inputData<span class=\"br0\">[</span><br/>                        bound<span class=\"br0\">(</span>i + kw - kernelWidthRadius, inputWidth<span class=\"br0\">)</span>,<br/>                        bound<span class=\"br0\">(</span>j + kh - kernelHeightRadius, inputHeight<span class=\"br0\">)</span><br/>                    <span class=\"br0\">]</span>.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                    outputData<span class=\"br0\">[</span>i, j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> round<span class=\"br0\">(</span>newValue / kernelDivisor<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> outputData<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun getArrayDatasFromImage<span class=\"br0\">(</span>filename<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>ArrayData<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> inputImage <span class=\"sy0\">=</span> ImageIO.<span class=\"me1\">read</span><span class=\"br0\">(</span>File<span class=\"br0\">(</span>filename<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> width <span class=\"sy0\">=</span> inputImage.<span class=\"me1\">width</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> height <span class=\"sy0\">=</span> inputImage.<span class=\"me1\">height</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rgbData <span class=\"sy0\">=</span> inputImage.<span class=\"me1\">getRGB</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, width, height, <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a>, <span class=\"nu0\">0</span>, width<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> reds <span class=\"sy0\">=</span> ArrayData<span class=\"br0\">(</span>width, height<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> greens <span class=\"sy0\">=</span> ArrayData<span class=\"br0\">(</span>width, height<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> blues <span class=\"sy0\">=</span> ArrayData<span class=\"br0\">(</span>width, height<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>y in <span class=\"nu0\">0</span> until height<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>x in <span class=\"nu0\">0</span> until width<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rgbValue <span class=\"sy0\">=</span> rgbData<span class=\"br0\">[</span>y <span class=\"sy0\">*</span> width + x<span class=\"br0\">]</span><br/>            reds<span class=\"br0\">[</span>x, y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>rgbValue ushr <span class=\"nu0\">16</span><span class=\"br0\">)</span> and 0xFF<br/>            greens<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>rgbValue ushr <span class=\"nu0\">8</span><span class=\"br0\">)</span> and 0xFF<br/>            blues<span class=\"br0\">[</span>x, y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> rgbValue and 0xFF<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> arrayOf<span class=\"br0\">(</span>reds, greens, blues<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun writeOutputImage<span class=\"br0\">(</span>filename<span class=\"sy0\">:</span> String, redGreenBlue<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>ArrayData<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>reds, greens, blues<span class=\"br0\">)</span> <span class=\"sy0\">=</span> redGreenBlue<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> outputImage <span class=\"sy0\">=</span> BufferedImage<span class=\"br0\">(</span><br/>        reds.<span class=\"me1\">width</span>, reds.<span class=\"me1\">height</span>, BufferedImage.<span class=\"me1\">TYPE_INT_ARGB</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>y in <span class=\"nu0\">0</span> until reds.<span class=\"me1\">height</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>x in <span class=\"nu0\">0</span> until reds.<span class=\"me1\">width</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> red <span class=\"sy0\">=</span> bound<span class=\"br0\">(</span>reds<span class=\"br0\">[</span>x , y<span class=\"br0\">]</span>, <span class=\"nu0\">256</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> green <span class=\"sy0\">=</span> bound<span class=\"br0\">(</span>greens<span class=\"br0\">[</span>x , y<span class=\"br0\">]</span>, <span class=\"nu0\">256</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> blue <span class=\"sy0\">=</span> bound<span class=\"br0\">(</span>blues<span class=\"br0\">[</span>x, y<span class=\"br0\">]</span>, <span class=\"nu0\">256</span><span class=\"br0\">)</span><br/>            outputImage.<span class=\"me1\">setRGB</span><span class=\"br0\">(</span><br/>                x, y, <span class=\"br0\">(</span>red shl <span class=\"nu0\">16</span><span class=\"br0\">)</span> or <span class=\"br0\">(</span>green shl <span class=\"nu0\">8</span><span class=\"br0\">)</span> or blue or -0x01000000<br/>            <span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    ImageIO.<span class=\"me1\">write</span><span class=\"br0\">(</span>outputImage, <span class=\"st0\">\"PNG\"</span>, File<span class=\"br0\">(</span>filename<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> kernelWidth <span class=\"sy0\">=</span> args<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> kernelHeight <span class=\"sy0\">=</span> args<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> kernelDivisor <span class=\"sy0\">=</span> args<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Kernel size: $kernelWidth x $kernelHeight, divisor = $kernelDivisor\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> y <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> kernel <span class=\"sy0\">=</span> ArrayData<span class=\"br0\">(</span>kernelWidth, kernelHeight<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until kernelHeight<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"[\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until kernelWidth<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            kernel<span class=\"br0\">[</span>j, i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> args<span class=\"br0\">[</span>y++<span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            print<span class=\"br0\">(</span><span class=\"st0\">\" ${kernel[j, i]} \"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dataArrays <span class=\"sy0\">=</span> getArrayDatasFromImage<span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until dataArrays.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        dataArrays<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> convolute<span class=\"br0\">(</span>dataArrays<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, kernel, kernelDivisor<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    writeOutputImage<span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, dataArrays<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 97, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>    <span class=\"kw1\">dim</span> result<span class=\"br0\">(</span> <span class=\"nu0\">300</span><span class=\"sy0\">,</span> <span class=\"nu0\">300</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> image<span class=\"br0\">(</span> <span class=\"nu0\">300</span><span class=\"sy0\">,</span> <span class=\"nu0\">300</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> mask<span class=\"br0\">(</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>    w <span class=\"sy0\">=</span><span class=\"nu0\">128</span><br/>    h <span class=\"sy0\">=</span><span class=\"nu0\">128</span><br/>\u00a0<br/>    <span class=\"kw1\">nomainwin</span><br/>\u00a0<br/>    <span class=\"kw3\">WindowWidth</span>  <span class=\"sy0\">=</span> <span class=\"nu0\">460</span><br/>    <span class=\"kw3\">WindowHeight</span> <span class=\"sy0\">=</span> <span class=\"nu0\">210</span><br/>\u00a0<br/>    <span class=\"kw1\">open</span> <span class=\"st0\">\"Convolution\"</span> <span class=\"kw1\">for</span> graphics_nsb_nf <span class=\"kw1\">as</span> <span class=\"sy0\">#</span>w<br/>\u00a0<br/>    <span class=\"sy0\">#</span>w <span class=\"st0\">\"trapclose [quit]\"</span><br/>\u00a0<br/>    <span class=\"sy0\">#</span>w <span class=\"st0\">\"down\u00a0; fill darkblue\"</span><br/>\u00a0<br/>    hw <span class=\"sy0\">=</span> <span class=\"kw2\">hwnd</span><span class=\"br0\">(</span> <span class=\"sy0\">#</span>w<span class=\"br0\">)</span><br/>    <span class=\"kw1\">calldll</span> <span class=\"sy0\">#</span>user32<span class=\"sy0\">,</span><span class=\"st0\">\"GetDC\"</span><span class=\"sy0\">,</span> hw <span class=\"kw1\">as</span> <span class=\"kw1\">ulong</span><span class=\"sy0\">,</span> hdc <span class=\"kw1\">as</span> <span class=\"kw1\">ulong</span><br/>\u00a0<br/>    <span class=\"kw1\">loadbmp</span> <span class=\"st0\">\"img\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"alpha25.bmp\"</span><span class=\"co1\">'   128x128 pixels</span><br/>    <span class=\"sy0\">#</span>w <span class=\"st0\">\"drawbmp img   20, 20\"</span><br/>\u00a0<br/>    <span class=\"sy0\">#</span>w <span class=\"st0\">\"up\u00a0; color white\u00a0; goto 292 20\u00a0; down\u00a0; box 420 148\"</span><br/>    <span class=\"sy0\">#</span>w <span class=\"st0\">\"up\u00a0; goto 180 60\u00a0; down\u00a0; backcolor darkblue\u00a0; color cyan\"</span><br/>    <span class=\"sy0\">#</span>w <span class=\"st0\">\"\\\"</span>; <span class=\"st0\">\"Convolved with\"</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> y <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">127</span> <span class=\"co1\">'   fill in the input matrix</span><br/>        <span class=\"kw1\">for</span> x <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">127</span><br/>            xx <span class=\"sy0\">=</span>x <span class=\"sy0\">+</span> <span class=\"nu0\">20</span><br/>            yy <span class=\"sy0\">=</span>y <span class=\"sy0\">+</span> <span class=\"nu0\">20</span><br/>            <span class=\"kw1\">CallDLL</span> <span class=\"sy0\">#</span>gdi32<span class=\"sy0\">,</span> <span class=\"st0\">\"GetPixel\"</span><span class=\"sy0\">,</span> hdc <span class=\"kw1\">as</span> <span class=\"kw1\">uLong</span><span class=\"sy0\">,</span> xx <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><span class=\"sy0\">,</span> yy <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><span class=\"sy0\">,</span> pixcol <span class=\"kw1\">as</span> <span class=\"kw1\">ulong</span><br/>            <span class=\"kw1\">call</span> getRGB pixcol<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> g<span class=\"sy0\">,</span> r<br/>            image<span class=\"br0\">(</span> x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span>b<br/>            <span class=\"co1\">'#w \"color \"; image( x, y); \" 0 \"; 255 -image( x, y)</span><br/>            <span class=\"co1\">'#w \"set \"; x + 20; \" \"; y +20 +140</span><br/>        <span class=\"kw1\">next</span> x<br/>    <span class=\"kw1\">next</span> y<br/>\u00a0<br/>    <span class=\"sy0\">#</span>w <span class=\"st0\">\"flush\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\" Input matrix filled.\"</span><br/>\u00a0<br/>    <span class=\"sy0\">#</span>w <span class=\"st0\">\"size 8\"</span><br/>    <span class=\"kw1\">for</span> y <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">2</span>  <span class=\"co1\">'   fill in the mask matrix</span><br/>        <span class=\"kw1\">for</span> x <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">2</span><br/>            <span class=\"kw1\">read</span> mask<br/>            mask<span class=\"br0\">(</span> x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span>mask<br/>            <span class=\"kw1\">if</span> mask <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"sy0\">#</span>w <span class=\"st0\">\"color yellow\"</span> <span class=\"kw1\">else</span> <span class=\"sy0\">#</span>w <span class=\"st0\">\"color red\"</span><br/>            <span class=\"sy0\">#</span>w <span class=\"st0\">\"set \"</span>; <span class=\"nu0\">8</span> <span class=\"sy0\">*</span>x <span class=\"sy0\">+</span><span class=\"nu0\">200</span>; <span class=\"st0\">\" \"</span>; <span class=\"nu0\">8</span> <span class=\"sy0\">*</span>y <span class=\"sy0\">+</span><span class=\"nu0\">80</span><br/>        <span class=\"kw1\">next</span> x<br/>    <span class=\"kw1\">next</span> y<br/>    <span class=\"kw1\">data</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"sy0\">#</span>w <span class=\"st0\">\"flush\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\" Mask matrix filled.\"</span><br/>\u00a0<br/>    <span class=\"sy0\">#</span>w <span class=\"st0\">\"size 1\"</span><br/>    mxx <span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span> mnn <span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> x <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">127</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"co1\">'   since any further overlaps image edge</span><br/>        <span class=\"kw1\">for</span> y <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">127</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><br/>            result<span class=\"br0\">(</span> x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>            <span class=\"kw1\">for</span> kx <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">2</span><br/>                <span class=\"kw1\">for</span> ky <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">2</span><br/>                    result<span class=\"br0\">(</span> x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">=</span>result<span class=\"br0\">(</span> x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">+</span>image<span class=\"br0\">(</span> x <span class=\"sy0\">+</span>kx<span class=\"sy0\">,</span> y <span class=\"sy0\">+</span>ky<span class=\"br0\">)</span> <span class=\"sy0\">*</span>mask<span class=\"br0\">(</span> kx<span class=\"sy0\">,</span> ky<span class=\"br0\">)</span><br/>                <span class=\"kw1\">next</span> ky<br/>                <span class=\"kw1\">if</span> mxx <span class=\"sy0\">&lt;</span>result<span class=\"br0\">(</span> x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"kw1\">then</span> mxx <span class=\"sy0\">=</span>result<span class=\"br0\">(</span> x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> mnn <span class=\"sy0\">&gt;</span>result<span class=\"br0\">(</span> x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"kw1\">then</span> mnn <span class=\"sy0\">=</span>result<span class=\"br0\">(</span> x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>            <span class=\"kw1\">next</span> kx<br/>            <span class=\"kw1\">scan</span><br/>        <span class=\"kw1\">next</span> y<br/>    <span class=\"kw1\">next</span> x<br/>\u00a0<br/>    range <span class=\"sy0\">=</span>mxx <span class=\"sy0\">-</span>mnn<br/>    <span class=\"kw1\">for</span> x <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">127</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><br/>        <span class=\"kw1\">for</span> y <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">127</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><br/>            c <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> <span class=\"nu0\">255</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span> result<span class=\"br0\">(</span> x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">-</span>mnn<span class=\"br0\">)</span> <span class=\"sy0\">/</span>range<span class=\"br0\">)</span><br/>            <span class=\"co1\">'#w \"color \"; c; \" \"; c; \" \"; c</span><br/>            <span class=\"kw1\">if</span> c <span class=\"sy0\">&gt;</span><span class=\"nu0\">128</span> <span class=\"kw1\">then</span> <span class=\"sy0\">#</span>w <span class=\"st0\">\"color white\"</span> <span class=\"kw1\">else</span> <span class=\"sy0\">#</span>w <span class=\"st0\">\"color black\"</span><br/>            <span class=\"sy0\">#</span>w <span class=\"st0\">\"set \"</span>; x <span class=\"sy0\">+</span><span class=\"nu0\">292</span> <span class=\"sy0\">+</span><span class=\"nu0\">1</span>; <span class=\"st0\">\" \"</span>; y <span class=\"sy0\">+</span><span class=\"nu0\">20</span> <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>            <span class=\"kw1\">scan</span><br/>        <span class=\"kw1\">next</span> y<br/>    <span class=\"kw1\">next</span> x<br/>    <span class=\"sy0\">#</span>w <span class=\"st0\">\"flush\"</span><br/>\u00a0<br/>    <span class=\"kw1\">wait</span><br/>\u00a0<br/>    <span class=\"kw1\">sub</span> getRGB pixcol<span class=\"sy0\">,</span> <span class=\"kw1\">byref</span> r<span class=\"sy0\">,</span> <span class=\"kw1\">byref</span> g<span class=\"sy0\">,</span> <span class=\"kw1\">byref</span> b<br/>        b <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span> pixcol <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">256</span> <span class=\"sy0\">*</span><span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        g <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> pixcol <span class=\"sy0\">-</span> b <span class=\"sy0\">*</span><span class=\"nu0\">256</span> <span class=\"sy0\">*</span><span class=\"nu0\">256</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">256</span><span class=\"br0\">)</span><br/>        r <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span> pixcol <span class=\"sy0\">-</span> b <span class=\"sy0\">*</span><span class=\"nu0\">256</span> <span class=\"sy0\">*</span><span class=\"nu0\">256</span> <span class=\"sy0\">-</span> g <span class=\"sy0\">*</span><span class=\"nu0\">256</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">sub</span><br/>\u00a0<br/>    <span class=\"br0\">[</span>quit<span class=\"br0\">]</span><br/>    <span class=\"kw1\">close</span> <span class=\"sy0\">#</span>w<br/>    <span class=\"kw1\">CallDLL</span> <span class=\"sy0\">#</span>user32<span class=\"sy0\">,</span> <span class=\"st0\">\"ReleaseDC\"</span><span class=\"sy0\">,</span> hw <span class=\"kw1\">as</span> <span class=\"kw1\">ulong</span><span class=\"sy0\">,</span> hdc <span class=\"kw1\">as</span> <span class=\"kw1\">ulong</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 3, "block": "<pre class=\"text highlighted_source\">pic:=Import(\"smiling_dog.jpg\"):<br/>mask\u00a0:= Matrix([[1,2,3],[4,5,6],[7,8,9]]);<br/>pic\u00a0:= ImageTools:-Convolution(pic, mask);</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 5, "block": "<pre class=\"text highlighted_source\">img = Import[NotebookDirectory[] &lt;&gt; \"Lenna50.jpg\"];<br/>kernel = {{0, -1, 0}, {-1, 4, -1}, {0, -1, 0}};<br/>ImageConvolve[img, kernel]<br/>ImageConvolve[img, GaussianMatrix[35] ]<br/>ImageConvolve[img, BoxMatrix[1] ]</pre>"}, {"lang": "MATLAB", "loc": 168, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> testConvImage<br/>    Im = <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"nu0\">5</span>\u00a0; <span class=\"sy0\">...</span><br/>          <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">7</span> <span class=\"nu0\">9</span> <span class=\"nu0\">9</span>\u00a0; <span class=\"sy0\">...</span><br/>          <span class=\"nu0\">5</span> <span class=\"nu0\">5</span> <span class=\"nu0\">5</span> <span class=\"nu0\">5</span> <span class=\"nu0\">5</span>\u00a0; <span class=\"sy0\">...</span><br/>          <span class=\"nu0\">5</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span>\u00a0; <span class=\"sy0\">...</span><br/>          <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span>;      <span class=\"co1\">% Sample image for example illustration only</span><br/>    Ker = <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span>\u00a0; <span class=\"sy0\">...</span><br/>           <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">2</span>\u00a0; <span class=\"sy0\">...</span><br/>           <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span>;         <span class=\"co1\">% Gaussian smoothing (without normalizing)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Original image:\\n'</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>Im<span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Original kernal:\\n'</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>Ker<span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Padding with zeroes:\\n'</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>convImage<span class=\"br0\">(</span>Im, Ker, <span class=\"co2\">'zeros'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Padding with fives:\\n'</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>convImage<span class=\"br0\">(</span>Im, Ker, <span class=\"co2\">'value'</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Duplicating border pixels to pad image:\\n'</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>convImage<span class=\"br0\">(</span>Im, Ker, <span class=\"co2\">'extend'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Renormalizing kernal and using only values within image:\\n'</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>convImage<span class=\"br0\">(</span>Im, Ker, <span class=\"co2\">'partial'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Only processing inner (non-border) pixels:\\n'</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span>convImage<span class=\"br0\">(</span>Im, Ker, <span class=\"co2\">'none'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">%     Ker = [1 2 1\u00a0; ...</span><br/><span class=\"co1\">%            2 4 2\u00a0; ...</span><br/><span class=\"co1\">%            1 2 1 ]./16;</span><br/><span class=\"co1\">%     Im = imread('testConvImageTestImage.png', 'png');</span><br/><span class=\"co1\">%     figure</span><br/><span class=\"co1\">%     imshow(imresize(Im, 10))</span><br/><span class=\"co1\">%     title('Original image')</span><br/><span class=\"co1\">%     figure</span><br/><span class=\"co1\">%     imshow(imresize(convImage(Im, Ker, 'zeros'), 10))</span><br/><span class=\"co1\">%     title('Padding with zeroes')</span><br/><span class=\"co1\">%     figure</span><br/><span class=\"co1\">%     imshow(imresize(convImage(Im, Ker, 'value', 50), 10))</span><br/><span class=\"co1\">%     title('Padding with fifty: 50')</span><br/><span class=\"co1\">%     figure</span><br/><span class=\"co1\">%     imshow(imresize(convImage(Im, Ker, 'extend'), 10))</span><br/><span class=\"co1\">%     title('Duplicating border pixels to pad image')</span><br/><span class=\"co1\">%     figure</span><br/><span class=\"co1\">%     imshow(imresize(convImage(Im, Ker, 'partial'), 10))</span><br/><span class=\"co1\">%     title('Renormalizing kernal and using only values within image')</span><br/><span class=\"co1\">%     figure</span><br/><span class=\"co1\">%     imshow(imresize(convImage(Im, Ker, 'none'), 10))</span><br/><span class=\"co1\">%     title('Only processing inner (non-border) pixels')</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> ImOut = convImage<span class=\"br0\">(</span>Im, Ker, <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/varargin.html\"><span class=\"kw2\">varargin</span></a><span class=\"br0\">)</span><br/><span class=\"co1\">% ImOut = convImage(Im, Ker)</span><br/><span class=\"co1\">%   Filters an image using sliding-window kernal convolution.</span><br/><span class=\"co1\">%   Convolution is done layer-by-layer. Use rgb2gray if single-layer needed.</span><br/><span class=\"co1\">%   Zero-padding convolution will be used if no border handling is specified.</span><br/><span class=\"co1\">%   Im - Array containing image data (output from imread)</span><br/><span class=\"co1\">%   Ker - 2-D array to convolve image, needs odd number of rows and columns</span><br/><span class=\"co1\">%   ImOut - Filtered image, same dimensions and datatype as Im</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">% ImOut = convImage(Im, Ker, 'zeros')</span><br/><span class=\"co1\">%   Image will be padded with zeros when calculating convolution</span><br/><span class=\"co1\">%   (useful for magnitude calculations).</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">% ImOut = convImage(Im, Ker, 'value', padVal)</span><br/><span class=\"co1\">%   Image will be padded with padVal when calculating convolution</span><br/><span class=\"co1\">%   (possibly useful for emphasizing certain data with unusual kernal)</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">% ImOut = convImage(Im, Ker, 'extend')</span><br/><span class=\"co1\">%   Image will be padded with the value of the closest image pixel</span><br/><span class=\"co1\">%   (useful for smoothing or blurring filters).</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">% ImOut = convImage(Im, Ker, 'partial')</span><br/><span class=\"co1\">%   Image will not be padded. Borders will be convoluted with only valid pixels,</span><br/><span class=\"co1\">%   and convolution matrix will be renormalized counting only the pixels within</span><br/><span class=\"co1\">%   the image (also useful for smoothing or blurring filters).</span><br/><span class=\"co1\">%</span><br/><span class=\"co1\">% ImOut = convImage(Im, Ker, 'none')</span><br/><span class=\"co1\">%   Image will not be padded. Convolution will only be applied to inner pixels</span><br/><span class=\"co1\">%   (useful for edge and corner detection filters)</span><br/>\u00a0<br/>    <span class=\"co1\">% Handle input</span><br/>    <span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">(</span>Ker, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> ~= <span class=\"nu0\">1</span> || <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">(</span>Ker, <span class=\"nu0\">2</span><span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> ~= <span class=\"nu0\">1</span><br/>        eid = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'%s:evenRowsCols'</span>, mfilename<span class=\"br0\">)</span>;<br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/error.html\"><span class=\"kw2\">error</span></a><span class=\"br0\">(</span>eid,<span class=\"co2\">''</span><span class=\"co2\">'Ker'</span><span class=\"co2\">' parameter must have odd number of rows and columns.'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">elseif</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/nargin.html\"><span class=\"kw2\">nargin</span></a> &gt; <span class=\"nu0\">4</span><br/>        eid = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'%s:maxrhs'</span>, mfilename<span class=\"br0\">)</span>;<br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/error.html\"><span class=\"kw2\">error</span></a><span class=\"br0\">(</span>eid, <span class=\"co2\">'Too many input arguments.'</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">elseif</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/nargin.html\"><span class=\"kw2\">nargin</span></a> == <span class=\"nu0\">4</span> &amp;&amp; ~<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/strcmp.html\"><span class=\"kw2\">strcmp</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/varargin.html\"><span class=\"kw2\">varargin</span></a><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"co2\">'value'</span><span class=\"br0\">)</span><br/>        eid = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'%s:invalidParameterCombination'</span>, mfilename<span class=\"br0\">)</span>;<br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/error.html\"><span class=\"kw2\">error</span></a><span class=\"br0\">(</span>eid, <span class=\"br0\">[</span><span class=\"co2\">'The '</span><span class=\"co2\">'padVal'</span><span class=\"co2\">' parameter is only valid with the '</span> <span class=\"sy0\">...</span><br/>            <span class=\"co2\">''</span><span class=\"co2\">'value'</span><span class=\"co2\">' option.'</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">elseif</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/nargin.html\"><span class=\"kw2\">nargin</span></a> &lt; <span class=\"nu0\">4</span> &amp;&amp; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/strcmp.html\"><span class=\"kw2\">strcmp</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/varargin.html\"><span class=\"kw2\">varargin</span></a><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"co2\">'value'</span><span class=\"br0\">)</span><br/>        eid = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'%s:minrhs'</span>, mfilename<span class=\"br0\">)</span>;<br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/error.html\"><span class=\"kw2\">error</span></a><span class=\"br0\">(</span>eid, <span class=\"co2\">'Not enough input arguments.'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">elseif</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/nargin.html\"><span class=\"kw2\">nargin</span></a> &lt; <span class=\"nu0\">3</span><br/>        method = <span class=\"co2\">'zeros'</span>;<br/>    <span class=\"kw1\">else</span><br/>        method = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/lower.html\"><span class=\"kw2\">lower</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/varargin.html\"><span class=\"kw2\">varargin</span></a><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">if</span> ~<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/any.html\"><span class=\"kw2\">any</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/strcmp.html\"><span class=\"kw2\">strcmp</span></a><span class=\"br0\">(</span>method, <span class=\"br0\">{</span><span class=\"co2\">'zeros'</span> <span class=\"co2\">'value'</span> <span class=\"co2\">'extend'</span> <span class=\"co2\">'partial'</span> <span class=\"co2\">'none'</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            eid = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'%s:invalidParameter'</span>, mfilename<span class=\"br0\">)</span>;<br/>            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/error.html\"><span class=\"kw2\">error</span></a><span class=\"br0\">(</span>eid, <span class=\"co2\">'Invalid option parameter. Must be one of:%s'</span>, <span class=\"sy0\">...</span><br/>                <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'\\n\\t\\t%s'</span>, <span class=\"sy0\">...</span><br/>                <span class=\"co2\">'zeros'</span>, <span class=\"co2\">'value'</span>, <span class=\"co2\">'extend'</span>, <span class=\"co2\">'partial'</span>, <span class=\"co2\">'none'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"co1\">% Gather information and prepare for convolution</span><br/>    <span class=\"br0\">[</span>nImRows, nImCols, nImLayers<span class=\"br0\">]</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">(</span>Im<span class=\"br0\">)</span>;<br/>    classIm = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/class.html\"><span class=\"kw2\">class</span></a><span class=\"br0\">(</span>Im<span class=\"br0\">)</span>;<br/>    Im = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/double.html\"><span class=\"kw2\">double</span></a><span class=\"br0\">(</span>Im<span class=\"br0\">)</span>;<br/>    ImOut = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/zeros.html\"><span class=\"kw2\">zeros</span></a><span class=\"br0\">(</span>nImRows, nImCols, nImLayers<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">[</span>nKerRows, nKerCols<span class=\"br0\">]</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html\"><span class=\"kw2\">size</span></a><span class=\"br0\">(</span>Ker<span class=\"br0\">)</span>;<br/>    nPadRows = nImRows+nKerRows-<span class=\"nu0\">1</span>;<br/>    nPadCols = nImCols+nKerCols-<span class=\"nu0\">1</span>;<br/>    padH = <span class=\"br0\">(</span>nKerRows-<span class=\"nu0\">1</span><span class=\"br0\">)</span>/<span class=\"nu0\">2</span>;<br/>    padW = <span class=\"br0\">(</span>nKerCols-<span class=\"nu0\">1</span><span class=\"br0\">)</span>/<span class=\"nu0\">2</span>;<br/>\u00a0<br/>    <span class=\"co1\">% Convolute on a layer-by-layer basis</span><br/>    <span class=\"kw1\">for</span> k = <span class=\"nu0\">1</span>:nImLayers<br/>        <span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/strcmp.html\"><span class=\"kw2\">strcmp</span></a><span class=\"br0\">(</span>method, <span class=\"co2\">'zeros'</span><span class=\"br0\">)</span><br/>            ImOut<span class=\"br0\">(</span>:,\u00a0:, k<span class=\"br0\">)</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/conv2.html\"><span class=\"kw2\">conv2</span></a><span class=\"br0\">(</span>Im<span class=\"br0\">(</span>:,\u00a0:, k<span class=\"br0\">)</span>, Ker, <span class=\"co2\">'same'</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">elseif</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/strcmp.html\"><span class=\"kw2\">strcmp</span></a><span class=\"br0\">(</span>method, <span class=\"co2\">'value'</span><span class=\"br0\">)</span><br/>            padding = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/varargin.html\"><span class=\"kw2\">varargin</span></a><span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"br0\">}</span>.*<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ones.html\"><span class=\"kw2\">ones</span></a><span class=\"br0\">(</span>nPadRows, nPadCols<span class=\"br0\">)</span>;<br/>            padding<span class=\"br0\">(</span>padH+<span class=\"nu0\">1</span>:end-padH, padW+<span class=\"nu0\">1</span>:end-padW<span class=\"br0\">)</span> = Im<span class=\"br0\">(</span>:,\u00a0:, k<span class=\"br0\">)</span>;<br/>            ImOut<span class=\"br0\">(</span>:,\u00a0:, k<span class=\"br0\">)</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/conv2.html\"><span class=\"kw2\">conv2</span></a><span class=\"br0\">(</span>padding, Ker, <span class=\"co2\">'valid'</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">elseif</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/strcmp.html\"><span class=\"kw2\">strcmp</span></a><span class=\"br0\">(</span>method, <span class=\"co2\">'extend'</span><span class=\"br0\">)</span><br/>            padding = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/zeros.html\"><span class=\"kw2\">zeros</span></a><span class=\"br0\">(</span>nPadRows, nPadCols<span class=\"br0\">)</span>;<br/>            padding<span class=\"br0\">(</span>padH+<span class=\"nu0\">1</span>:end-padH, padW+<span class=\"nu0\">1</span>:end-padW<span class=\"br0\">)</span> = Im<span class=\"br0\">(</span>:,\u00a0:, k<span class=\"br0\">)</span>;  <span class=\"co1\">% Middle</span><br/>            padding<span class=\"br0\">(</span><span class=\"nu0\">1</span>:padH, <span class=\"nu0\">1</span>:padW<span class=\"br0\">)</span> = Im<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, k<span class=\"br0\">)</span>;                    <span class=\"co1\">% TopLeft</span><br/>            padding<span class=\"br0\">(</span>end-padH+<span class=\"nu0\">1</span>:<span class=\"kw1\">end</span>, <span class=\"nu0\">1</span>:padW<span class=\"br0\">)</span> = Im<span class=\"br0\">(</span><span class=\"kw1\">end</span>, <span class=\"nu0\">1</span>, k<span class=\"br0\">)</span>;          <span class=\"co1\">% BotLeft</span><br/>            padding<span class=\"br0\">(</span><span class=\"nu0\">1</span>:padH, end-padW+<span class=\"nu0\">1</span>:<span class=\"kw1\">end</span><span class=\"br0\">)</span> = Im<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"kw1\">end</span>, k<span class=\"br0\">)</span>;          <span class=\"co1\">% TopRight</span><br/>            padding<span class=\"br0\">(</span>end-padH+<span class=\"nu0\">1</span>:<span class=\"kw1\">end</span>, end-padW+<span class=\"nu0\">1</span>:<span class=\"kw1\">end</span><span class=\"br0\">)</span> = Im<span class=\"br0\">(</span><span class=\"kw1\">end</span>, <span class=\"kw1\">end</span>, k<span class=\"br0\">)</span>;<span class=\"co1\">% BotRight</span><br/>            padding<span class=\"br0\">(</span>padH+<span class=\"nu0\">1</span>:end-padH, <span class=\"nu0\">1</span>:padW<span class=\"br0\">)</span> = <span class=\"sy0\">...</span><br/>                <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/repmat.html\"><span class=\"kw2\">repmat</span></a><span class=\"br0\">(</span>Im<span class=\"br0\">(</span>:, <span class=\"nu0\">1</span>, k<span class=\"br0\">)</span>, <span class=\"nu0\">1</span>, padW<span class=\"br0\">)</span>;                         <span class=\"co1\">% Left</span><br/>            padding<span class=\"br0\">(</span>padH+<span class=\"nu0\">1</span>:end-padH, end-padW+<span class=\"nu0\">1</span>:<span class=\"kw1\">end</span><span class=\"br0\">)</span> = <span class=\"sy0\">...</span><br/>                <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/repmat.html\"><span class=\"kw2\">repmat</span></a><span class=\"br0\">(</span>Im<span class=\"br0\">(</span>:, <span class=\"kw1\">end</span>, k<span class=\"br0\">)</span>, <span class=\"nu0\">1</span>, padW<span class=\"br0\">)</span>;                       <span class=\"co1\">% Right</span><br/>            padding<span class=\"br0\">(</span><span class=\"nu0\">1</span>:padH, padW+<span class=\"nu0\">1</span>:end-padW<span class=\"br0\">)</span> = <span class=\"sy0\">...</span><br/>                <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/repmat.html\"><span class=\"kw2\">repmat</span></a><span class=\"br0\">(</span>Im<span class=\"br0\">(</span><span class=\"nu0\">1</span>,\u00a0:, k<span class=\"br0\">)</span>, padH, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;                         <span class=\"co1\">% Top</span><br/>            padding<span class=\"br0\">(</span>end-padH+<span class=\"nu0\">1</span>:<span class=\"kw1\">end</span>, padW+<span class=\"nu0\">1</span>:end-padW<span class=\"br0\">)</span> = <span class=\"sy0\">...</span><br/>                <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/repmat.html\"><span class=\"kw2\">repmat</span></a><span class=\"br0\">(</span>Im<span class=\"br0\">(</span><span class=\"kw1\">end</span>,\u00a0:, k<span class=\"br0\">)</span>, padH, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;                       <span class=\"co1\">% Bottom</span><br/>            ImOut<span class=\"br0\">(</span>:,\u00a0:, k<span class=\"br0\">)</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/conv2.html\"><span class=\"kw2\">conv2</span></a><span class=\"br0\">(</span>padding, Ker, <span class=\"co2\">'valid'</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">elseif</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/strcmp.html\"><span class=\"kw2\">strcmp</span></a><span class=\"br0\">(</span>method, <span class=\"co2\">'partial'</span><span class=\"br0\">)</span><br/>            ImOut<span class=\"br0\">(</span>padH+<span class=\"nu0\">1</span>:end-padH, padW+<span class=\"nu0\">1</span>:end-padW, k<span class=\"br0\">)</span> = <span class=\"sy0\">...</span><br/>                <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/conv2.html\"><span class=\"kw2\">conv2</span></a><span class=\"br0\">(</span>Im<span class=\"br0\">(</span>:,\u00a0:, k<span class=\"br0\">)</span>, Ker, <span class=\"co2\">'valid'</span><span class=\"br0\">)</span>;                     <span class=\"co1\">% Middle</span><br/>            unprocessed = true<span class=\"br0\">(</span>nImRows, nImCols<span class=\"br0\">)</span>;<br/>            unprocessed<span class=\"br0\">(</span>padH+<span class=\"nu0\">1</span>:end-padH, padW+<span class=\"nu0\">1</span>:end-padW<span class=\"br0\">)</span> = false;    <span class=\"co1\">% Border</span><br/>            <span class=\"kw1\">for</span> r = <span class=\"nu0\">1</span>:nImRows<br/>                <span class=\"kw1\">for</span> c = <span class=\"nu0\">1</span>:nImCols<br/>                    <span class=\"kw1\">if</span> unprocessed<span class=\"br0\">(</span>r, c<span class=\"br0\">)</span><br/>                        limitedIm = Im<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/max.html\"><span class=\"kw2\">max</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>, r-padH<span class=\"br0\">)</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/min.html\"><span class=\"kw2\">min</span></a><span class=\"br0\">(</span>nImRows, r+padH<span class=\"br0\">)</span>, <span class=\"sy0\">...</span><br/>                            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/max.html\"><span class=\"kw2\">max</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>, c-padW<span class=\"br0\">)</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/min.html\"><span class=\"kw2\">min</span></a><span class=\"br0\">(</span>nImCols, c+padW<span class=\"br0\">)</span>, k<span class=\"br0\">)</span>;<br/>                        limitedKer = Ker<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/max.html\"><span class=\"kw2\">max</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>-r+padH<span class=\"br0\">)</span>: <span class=\"sy0\">...</span><br/>                            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/min.html\"><span class=\"kw2\">min</span></a><span class=\"br0\">(</span>nKerRows, nKerRows+nImRows-r-padH<span class=\"br0\">)</span>, <span class=\"sy0\">...</span><br/>                            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/max.html\"><span class=\"kw2\">max</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>-c+padW<span class=\"br0\">)</span>:<span class=\"sy0\">...</span><br/>                            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/min.html\"><span class=\"kw2\">min</span></a><span class=\"br0\">(</span>nKerCols, nKerCols+nImCols-c-padW<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>                        limitedKer = limitedKer.*<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>Ker<span class=\"br0\">(</span>:<span class=\"br0\">)</span><span class=\"br0\">)</span>./ <span class=\"sy0\">...</span><br/>                            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>limitedKer<span class=\"br0\">(</span>:<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>                        ImOut<span class=\"br0\">(</span>r, c, k<span class=\"br0\">)</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>limitedIm.*limitedKer<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>                    <span class=\"kw1\">end</span><br/>                <span class=\"kw1\">end</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">else</span>    <span class=\"co1\">% method is 'none'</span><br/>            ImOut<span class=\"br0\">(</span>:,\u00a0:, k<span class=\"br0\">)</span> = Im<span class=\"br0\">(</span>:,\u00a0:, k<span class=\"br0\">)</span>;<br/>            ImOut<span class=\"br0\">(</span>padH+<span class=\"nu0\">1</span>:end-padH, padW+<span class=\"nu0\">1</span>:end-padW, k<span class=\"br0\">)</span> = <span class=\"sy0\">...</span><br/>                <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/conv2.html\"><span class=\"kw2\">conv2</span></a><span class=\"br0\">(</span>Im<span class=\"br0\">(</span>:,\u00a0:, k<span class=\"br0\">)</span>, Ker, <span class=\"co2\">'valid'</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"co1\">% Convert back to former image data type</span><br/>    ImOut = cast<span class=\"br0\">(</span>ImOut, classIm<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "OCaml", "loc": 55, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> get_rgb img x y <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> _, r_channel,_,_ <span class=\"sy0\">=</span> img <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> width <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Bigarray.html\"><span class=\"kw2\">Bigarray</span></a><span class=\"sy0\">.</span>Array2<span class=\"sy0\">.</span>dim1 r_channel<br/>  <span class=\"kw1\">and</span> height <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Bigarray.html\"><span class=\"kw2\">Bigarray</span></a><span class=\"sy0\">.</span>Array2<span class=\"sy0\">.</span>dim2 r_channel <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;=</span> width<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>y <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>y <span class=\"sy0\">&gt;=</span> height<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span>  <span class=\"co1\">(* feed borders with black *)</span><br/>  get_pixel img x y<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> convolve_get_value img kernel divisor offset <span class=\"sy0\">=</span> <span class=\"kw1\">fun</span> x y <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">let</span> sum_r <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">0.0</span><br/>  <span class=\"kw1\">and</span> sum_g <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">0.0</span><br/>  <span class=\"kw1\">and</span> sum_b <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">0.0</span> <span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">let</span> r, g, b <span class=\"sy0\">=</span> get_rgb img <span class=\"br0\">(</span>x<span class=\"sy0\">+</span>i<span class=\"br0\">)</span> <span class=\"br0\">(</span>y<span class=\"sy0\">+</span>j<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>      sum_r <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>sum_r <span class=\"sy0\">+.</span> kernel<span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*.</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      sum_g <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>sum_g <span class=\"sy0\">+.</span> kernel<span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*.</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      sum_b <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>sum_b <span class=\"sy0\">+.</span> kernel<span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*.</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span> <span class=\"sy0\">!</span>sum_r <span class=\"sy0\">/.</span> divisor <span class=\"sy0\">+.</span> offset,<br/>    <span class=\"sy0\">!</span>sum_g <span class=\"sy0\">/.</span> divisor <span class=\"sy0\">+.</span> offset,<br/>    <span class=\"sy0\">!</span>sum_b <span class=\"sy0\">/.</span> divisor <span class=\"sy0\">+.</span> offset <span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> color_to_int <span class=\"br0\">(</span>r,g,b<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALtruncate\"><span class=\"kw3\">truncate</span></a> r,<br/>   <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALtruncate\"><span class=\"kw3\">truncate</span></a> g,<br/>   <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALtruncate\"><span class=\"kw3\">truncate</span></a> b<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> bounded <span class=\"br0\">(</span>r,g,b<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmax\"><span class=\"kw3\">max</span></a> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmin\"><span class=\"kw3\">min</span></a> r <span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>   <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmax\"><span class=\"kw3\">max</span></a> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmin\"><span class=\"kw3\">min</span></a> g <span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>   <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmax\"><span class=\"kw3\">max</span></a> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmin\"><span class=\"kw3\">min</span></a> b <span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> convolve_value <span class=\"re1\">~img</span> <span class=\"re1\">~kernel</span> <span class=\"re1\">~divisor</span> <span class=\"re1\">~offset</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> _, r_channel,_,_ <span class=\"sy0\">=</span> img <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> width <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Bigarray.html\"><span class=\"kw2\">Bigarray</span></a><span class=\"sy0\">.</span>Array2<span class=\"sy0\">.</span>dim1 r_channel<br/>  <span class=\"kw1\">and</span> height <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Bigarray.html\"><span class=\"kw2\">Bigarray</span></a><span class=\"sy0\">.</span>Array2<span class=\"sy0\">.</span>dim2 r_channel <span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> res <span class=\"sy0\">=</span> new_img <span class=\"re1\">~width</span> <span class=\"re1\">~height</span> <span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> conv <span class=\"sy0\">=</span> convolve_get_value img kernel divisor offset <span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> height <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> width <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">let</span> color <span class=\"sy0\">=</span> conv x y <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> color <span class=\"sy0\">=</span> color_to_int color <span class=\"kw1\">in</span><br/>      put_pixel res <span class=\"br0\">(</span>bounded color<span class=\"br0\">)</span> x y<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span>res<span class=\"br0\">)</span></pre>"}, {"lang": "Octave", "loc": 23, "block": "<pre class=\"octave highlighted_source\"><span class=\"kw4\">function</span> <span class=\"br0\">[</span>r<span class=\"sy5\">,</span> g<span class=\"sy5\">,</span> b<span class=\"br0\">]</span> <span class=\"sy3\">=</span> rgbconv2<span class=\"br0\">(</span>a<span class=\"sy5\">,</span> c<span class=\"br0\">)</span><br/>    r <span class=\"sy3\">=</span> im2uint8<span class=\"br0\">(</span>mat2gray<span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/conv2.html\"><span class=\"kw6\">conv2</span></a><span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"sy4\">:</span><span class=\"sy5\">,</span><span class=\"sy4\">:</span><span class=\"sy5\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy5\">,</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>    g <span class=\"sy3\">=</span> im2uint8<span class=\"br0\">(</span>mat2gray<span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/conv2.html\"><span class=\"kw6\">conv2</span></a><span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"sy4\">:</span><span class=\"sy5\">,</span><span class=\"sy4\">:</span><span class=\"sy5\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy5\">,</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>    b <span class=\"sy3\">=</span> im2uint8<span class=\"br0\">(</span>mat2gray<span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/conv2.html\"><span class=\"kw6\">conv2</span></a><span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"sy4\">:</span><span class=\"sy5\">,</span><span class=\"sy4\">:</span><span class=\"sy5\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy5\">,</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/>im <span class=\"sy3\">=</span> jpgread<span class=\"br0\">(</span><span class=\"co4\">\"Lenna100.jpg\"</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>emboss <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"sy1\">-</span><span class=\"nu0\">2</span><span class=\"sy5\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span>  <span class=\"nu0\">0</span><span class=\"sy5\">;</span> <br/>\t  <span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span>  <span class=\"nu0\">1</span><span class=\"sy5\">,</span>  <span class=\"nu0\">1</span><span class=\"sy5\">;</span><br/>\t  <span class=\"nu0\">0</span><span class=\"sy5\">,</span>  <span class=\"nu0\">1</span><span class=\"sy5\">,</span>  <span class=\"nu0\">2</span> <span class=\"br0\">]</span><span class=\"sy5\">;</span><br/>sobel <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span>.<span class=\"sy5\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">2</span>.<span class=\"sy5\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span>.<span class=\"sy5\">;</span><br/>\t <span class=\"nu0\">0</span>.<span class=\"sy5\">,</span>  <span class=\"nu0\">0</span>.<span class=\"sy5\">,</span>  <span class=\"nu0\">0</span>.<span class=\"sy5\">;</span><br/>\t <span class=\"nu0\">1</span>.<span class=\"sy5\">,</span>  <span class=\"nu0\">2</span>.<span class=\"sy5\">,</span>  <span class=\"nu0\">1</span>. <span class=\"br0\">]</span><span class=\"sy5\">;</span><br/>sharpen <span class=\"sy3\">=</span>   <span class=\"br0\">[</span> <span class=\"sy1\">-</span><span class=\"nu19\">1.0</span><span class=\"sy5\">,</span> <span class=\"sy1\">-</span><span class=\"nu19\">1.0</span><span class=\"sy5\">,</span> <span class=\"sy1\">-</span><span class=\"nu19\">1.0</span><span class=\"sy5\">;</span><br/>\t     <span class=\"sy1\">-</span><span class=\"nu19\">1.0</span><span class=\"sy5\">,</span>  <span class=\"nu19\">9.0</span><span class=\"sy5\">,</span> <span class=\"sy1\">-</span><span class=\"nu19\">1.0</span><span class=\"sy5\">;</span><br/>\t     <span class=\"sy1\">-</span><span class=\"nu19\">1.0</span><span class=\"sy5\">,</span> <span class=\"sy1\">-</span><span class=\"nu19\">1.0</span><span class=\"sy5\">,</span> <span class=\"sy1\">-</span><span class=\"nu19\">1.0</span> <span class=\"br0\">]</span><span class=\"sy5\">;</span><br/>\u00a0<br/><span class=\"br0\">[</span>r<span class=\"sy5\">,</span> g<span class=\"sy5\">,</span> b<span class=\"br0\">]</span> <span class=\"sy3\">=</span> rgbconv2<span class=\"br0\">(</span>im<span class=\"sy5\">,</span> emboss<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>jpgwrite<span class=\"br0\">(</span><span class=\"co4\">\"LennaEmboss.jpg\"</span><span class=\"sy5\">,</span> r<span class=\"sy5\">,</span> g<span class=\"sy5\">,</span> b<span class=\"sy5\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><span class=\"br0\">[</span>r<span class=\"sy5\">,</span> g<span class=\"sy5\">,</span> b<span class=\"br0\">]</span> <span class=\"sy3\">=</span> rgbconv2<span class=\"br0\">(</span>im<span class=\"sy5\">,</span> sobel<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>jpgwrite<span class=\"br0\">(</span><span class=\"co4\">\"LennaSobel.jpg\"</span><span class=\"sy5\">,</span> r<span class=\"sy5\">,</span> g<span class=\"sy5\">,</span> b<span class=\"sy5\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><span class=\"br0\">[</span>r<span class=\"sy5\">,</span> g<span class=\"sy5\">,</span> b<span class=\"br0\">]</span> <span class=\"sy3\">=</span> rgbconv2<span class=\"br0\">(</span>im<span class=\"sy5\">,</span> sharpen<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>jpgwrite<span class=\"br0\">(</span><span class=\"co4\">\"LennaSharpen.jpg\"</span><span class=\"sy5\">,</span> r<span class=\"sy5\">,</span> g<span class=\"sy5\">,</span> b<span class=\"sy5\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy5\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 25, "block": "<pre class=\"text highlighted_source\">(scl 3)<br/>\u00a0<br/>(de ppmConvolution (Ppm Kernel)<br/>   (let (Len (length (car Kernel))  Radius (/ Len 2))<br/>      (make<br/>         (chain (head Radius Ppm))<br/>         (for (Y Ppm  T  (cdr Y))<br/>            (NIL (nth Y Len)<br/>               (chain (tail Radius Y)) )<br/>            (link<br/>               (make<br/>                  (chain (head Radius (get Y (inc Radius))))<br/>                  (for (X (head Len Y) T)<br/>                     (NIL (nth X 1 Len)<br/>                        (chain (tail Radius (get X (inc Radius)))) )<br/>                     (link<br/>                        (make<br/>                           (for C 3<br/>                              (let Val 0<br/>                                 (for K Len<br/>                                    (for L Len<br/>                                       (inc 'Val<br/>                                          (* (get X K L C) (get Kernel K L)) ) ) )<br/>                                 (link (min 255 (max 0 (*/ Val 1.0)))) ) ) ) )<br/>                     (map pop X) ) ) ) ) ) ) )</pre>"}, {"lang": "Python", "loc": 12, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\">#!/bin/python</span><br/><span class=\"kw1\">from</span> PIL <span class=\"kw1\">import</span> Image<span class=\"sy0\">,</span> ImageFilter<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__<span class=\"sy0\">==</span><span class=\"st0\">\"__main__\"</span>:<br/>\tim <span class=\"sy0\">=</span> Image.<span class=\"kw2\">open</span><span class=\"br0\">(</span><span class=\"st0\">\"test.jpg\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>\tkernelValues <span class=\"sy0\">=</span> <span class=\"br0\">[</span>-<span class=\"nu0\">2</span><span class=\"sy0\">,</span>-<span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>-<span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"co1\">#emboss</span><br/>\tkernel <span class=\"sy0\">=</span> ImageFilter.<span class=\"me1\">Kernel</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> kernelValues<span class=\"br0\">)</span><br/>\u00a0<br/>\tim2 <span class=\"sy0\">=</span> im.<span class=\"kw2\">filter</span><span class=\"br0\">(</span>kernel<span class=\"br0\">)</span><br/>\u00a0<br/>\tim2.<span class=\"me1\">show</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 50, "block": "<pre class=\"text highlighted_source\">#lang typed/racket<br/>(require images/flomap racket/flonum)<br/>\u00a0<br/>(provide flomap-convolve)<br/>\u00a0<br/>(: perfect-square? (Nonnegative-Fixnum -&gt; (U Nonnegative-Fixnum #f)))<br/>(define (perfect-square? n)<br/>  (define rt-n (integer-sqrt n))<br/>  (and (= n (sqr rt-n)) rt-n))<br/>\u00a0<br/>(: flomap-convolve (flomap FlVector -&gt; flomap))<br/>(define (flomap-convolve F K)<br/>  (unless (flomap? F) (error \"arg1 not a flowmap\"))<br/>  (unless (flvector? K) (error \"arg2 not a flvector\"))<br/>  (define R (perfect-square? (flvector-length K)))<br/>  (cond<br/>    [(not (and R (odd? R))) (error \"K is not odd-sided square\")]<br/>    [else<br/>     (define R/2 (quotient R 2))<br/>     (define R/-2 (quotient R -2))<br/>     (define-values (sz-w sz-h) (flomap-size F))     <br/>     (define-syntax-rule (convolution c x y i)<br/>       (if (= 0 c)<br/>           (flomap-ref F c x y)\u00a0; c=3 is alpha channel<br/>           (for*/fold:\u00a0: Flonum<br/>             ((acc\u00a0: Flonum 0.))<br/>             ((k (in-range 0 (add1 R/2)))<br/>              (l (in-range 0 (add1 R/2)))<br/>              (kl (in-value (+ (* k R) l)))<br/>              (kx (in-value (+ x k R/-2)))<br/>              (ly (in-value (+ y l R/-2)))<br/>              #:when (&lt; 0 kx (sub1 sz-w))<br/>              #:when (&lt; 0 ly (sub1 sz-h)))<br/>             (+ acc (* (flvector-ref K kl) (flomap-ref F c kx ly))))))<br/>\u00a0<br/>     (inline-build-flomap 4 sz-w sz-h convolution)]))<br/>\u00a0<br/>(module* test racket<br/>  (require racket/draw images/flomap racket/flonum (only-in 2htdp/image save-image))<br/>  (require (submod \"..\"))<br/>  (define flmp (bitmap-&gt;flomap (read-bitmap \"jpg/271px-John_Constable_002.jpg\")))<br/>  (save-image<br/>   (flomap-&gt;bitmap (flomap-convolve flmp (flvector 1.)))<br/>   \"out/convolve-unit-1x1.png\")<br/>  (save-image<br/>   (flomap-&gt;bitmap (flomap-convolve flmp (flvector 0. 0. 0. 0. 1. 0. 0. 0. 0.)))<br/>   \"out/convolve-unit-3x3.png\")<br/>  (save-image<br/>   (flomap-&gt;bitmap (flomap-convolve flmp (flvector -1. -1. -1. -1. 4. -1. -1. -1. -1.)))<br/>   \"out/convolve-etch-3x3.png\"))</pre>"}, {"lang": "Ruby", "loc": 57, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> Pixmap<br/>  <span class=\"co1\"># Apply a convolution kernel to a whole image</span><br/>  <span class=\"kw1\">def</span> convolute<span class=\"br0\">(</span>kernel<span class=\"br0\">)</span><br/>    newimg = Pixmap.<span class=\"me1\">new</span><span class=\"br0\">(</span>@width, <span class=\"re1\">@height</span><span class=\"br0\">)</span><br/>    pb = ProgressBar.<span class=\"me1\">new</span><span class=\"br0\">(</span>@width<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$DEBUG</span><br/>    <span class=\"re1\">@width</span>.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>x<span class=\"sy0\">|</span><br/>      <span class=\"re1\">@height</span>.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>y<span class=\"sy0\">|</span><br/>        apply_kernel<span class=\"br0\">(</span>x, y, kernel, newimg<span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span><br/>      pb.<span class=\"me1\">update</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$DEBUG</span><br/>    <span class=\"kw1\">end</span><br/>    pb.<span class=\"me1\">close</span> <span class=\"kw1\">if</span> <span class=\"re0\">$DEBUG</span><br/>    newimg<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># Applies a convolution kernel to produce a single pixel in the destination</span><br/>  <span class=\"kw1\">def</span> apply_kernel<span class=\"br0\">(</span>x, y, kernel, newimg<span class=\"br0\">)</span><br/>    x0 = x==<span class=\"nu0\">0</span>\u00a0? <span class=\"nu0\">0</span>\u00a0: x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    y0 = y==<span class=\"nu0\">0</span>\u00a0? <span class=\"nu0\">0</span>\u00a0: y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    x1 = x<br/>    y1 = y<br/>    x2 = x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><a class=\"__cf_email__\" data-cfemail=\"e0dddda09789849488\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> \u00a0? x\u00a0: x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    y2 = y<span class=\"sy0\">+</span><span class=\"nu0\">1</span><a class=\"__cf_email__\" data-cfemail=\"82bfbfc2eae7ebe5eaf6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0? y\u00a0: y<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>\u00a0<br/>    r = g = b = <span class=\"nu0\">0.0</span><br/>    <span class=\"br0\">[</span>x0, x1, x2<span class=\"br0\">]</span>.<span class=\"me1\">zip</span><span class=\"br0\">(</span>kernel<span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>xx, kcol<span class=\"sy0\">|</span><br/>      <span class=\"br0\">[</span>y0, y1, y2<span class=\"br0\">]</span>.<span class=\"me1\">zip</span><span class=\"br0\">(</span>kcol<span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>yy, k<span class=\"sy0\">|</span><br/>        r <span class=\"sy0\">+</span>= k <span class=\"sy0\">*</span> <span class=\"kw2\">self</span><span class=\"br0\">[</span>xx,yy<span class=\"br0\">]</span>.<span class=\"me1\">r</span><br/>        g <span class=\"sy0\">+</span>= k <span class=\"sy0\">*</span> <span class=\"kw2\">self</span><span class=\"br0\">[</span>xx,yy<span class=\"br0\">]</span>.<span class=\"me1\">g</span><br/>        b <span class=\"sy0\">+</span>= k <span class=\"sy0\">*</span> <span class=\"kw2\">self</span><span class=\"br0\">[</span>xx,yy<span class=\"br0\">]</span>.<span class=\"me1\">b</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    newimg<span class=\"br0\">[</span>x,y<span class=\"br0\">]</span> = RGBColour.<span class=\"me1\">new</span><span class=\"br0\">(</span>luma<span class=\"br0\">(</span>r<span class=\"br0\">)</span>, luma<span class=\"br0\">(</span>g<span class=\"br0\">)</span>, luma<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># Function for clamping values to those that we can use with colors</span><br/>  <span class=\"kw1\">def</span> luma<span class=\"br0\">(</span>value<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> value <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><br/>      <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">elsif</span> value <span class=\"sy0\">&gt;</span> <span class=\"nu0\">255</span><br/>      <span class=\"nu0\">255</span><br/>    <span class=\"kw1\">else</span><br/>      value<br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\"># Demonstration code using the teapot image from Tk's widget demo</span><br/>teapot = Pixmap.<span class=\"kw3\">open</span><span class=\"br0\">(</span><span class=\"st0\">'teapot.ppm'</span><span class=\"br0\">)</span><br/><span class=\"br0\">[</span> <span class=\"br0\">[</span><span class=\"st0\">'Emboss'</span>,  <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">2.0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">]</span>,  <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">1.0</span><span class=\"br0\">]</span>,  <span class=\"br0\">[</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">2.0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span>, <br/>  <span class=\"br0\">[</span><span class=\"st0\">'Sharpen'</span>, <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1.0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1.0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1.0</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">9.0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1.0</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1.0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1.0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1.0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span>, <br/>  <span class=\"br0\">[</span><span class=\"st0\">'Blur'</span>,    <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0.1111</span>,<span class=\"nu0\">0.1111</span>,<span class=\"nu0\">0.1111</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">0.1111</span>,<span class=\"nu0\">0.1111</span>,<span class=\"nu0\">0.1111</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">0.1111</span>,<span class=\"nu0\">0.1111</span>,<span class=\"nu0\">0.1111</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span>,<br/><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>label, kernel<span class=\"sy0\">|</span><br/>  savefile = <span class=\"st0\">'teapot_'</span> <span class=\"sy0\">+</span> label.<span class=\"me1\">downcase</span> <span class=\"sy0\">+</span> <span class=\"st0\">'.ppm'</span><br/>  teapot.<span class=\"me1\">convolute</span><span class=\"br0\">(</span>kernel<span class=\"br0\">)</span>.<span class=\"me1\">save</span><span class=\"br0\">(</span>savefile<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Tcl", "loc": 77, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tk<br/>\u00a0<br/><span class=\"co1\"># Function for clamping values to those that we can use with colors</span><br/><span class=\"kw1\">proc</span> tcl::<span class=\"me1\">mathfunc</span>::<span class=\"me1\">luma</span> channel <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> channel <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>round<span class=\"br0\">(</span><span class=\"re0\">$channel</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$channel</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$channel</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">255</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">255</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$channel</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># Applies a convolution kernel to produce a single pixel in the destination</span><br/><span class=\"kw1\">proc</span> applyKernel <span class=\"br0\">{</span>srcImage x y -- kernel -<span class=\"sy0\">&gt;</span> dstImage<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> x0 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>==<span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span>\u00a0: <span class=\"re0\">$x</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> y0 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>==<span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span>\u00a0: <span class=\"re0\">$y</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> x1 <span class=\"re0\">$x</span><br/>    <span class=\"kw1\">set</span> y1 <span class=\"re0\">$y</span><br/>    <span class=\"kw1\">set</span> x2 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>+<span class=\"nu0\">1</span>==<span class=\"br0\">[</span>image width <span class=\"re0\">$srcImage</span><span class=\"br0\">]</span>  <span class=\"sy0\">?</span> <span class=\"re0\">$x</span>\u00a0: <span class=\"re0\">$x</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> y2 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span>+<span class=\"nu0\">1</span>==<span class=\"br0\">[</span>image height <span class=\"re0\">$srcImage</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"re0\">$y</span>\u00a0: <span class=\"re0\">$y</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> r <span class=\"br0\">[</span><span class=\"kw1\">set</span> g <span class=\"br0\">[</span><span class=\"kw1\">set</span> b <span class=\"nu0\">0.0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> X <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$x0</span> <span class=\"re0\">$x1</span> <span class=\"re0\">$x2</span><span class=\"br0\">]</span> kcol <span class=\"re0\">$kernel</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> Y <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$y0</span> <span class=\"re0\">$y1</span> <span class=\"re0\">$y2</span><span class=\"br0\">]</span> k <span class=\"re0\">$kcol</span> <span class=\"br0\">{</span><br/>\t    lassign <span class=\"br0\">[</span><span class=\"re0\">$srcImage</span> get <span class=\"re0\">$X</span> <span class=\"re0\">$Y</span><span class=\"br0\">]</span> rPix gPix bPix<br/>\t    <span class=\"kw1\">set</span> r <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$r</span> + <span class=\"re0\">$k</span> <span class=\"sy0\">*</span> <span class=\"re0\">$rPix</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> g <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$g</span> + <span class=\"re0\">$k</span> <span class=\"sy0\">*</span> <span class=\"re0\">$gPix</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> b <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$b</span> + <span class=\"re0\">$k</span> <span class=\"sy0\">*</span> <span class=\"re0\">$bPix</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">$dstImage</span> put <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"#%02x%02x%02x\"</span> \\<br/>\t\t       <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>luma<span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>luma<span class=\"br0\">(</span><span class=\"re0\">$g</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>luma<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span>\\<br/>\t-to <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># Apply a convolution kernel to a whole image</span><br/><span class=\"kw1\">proc</span> convolve <span class=\"br0\">{</span>srcImage kernel <span class=\"br0\">{</span>dstImage <span class=\"st0\">\"\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$dstImage</span> eq <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> dstImage <span class=\"br0\">[</span>image create photo<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> w <span class=\"br0\">[</span>image width <span class=\"re0\">$srcImage</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> h <span class=\"br0\">[</span>image height <span class=\"re0\">$srcImage</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> x <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$w</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> y <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$h</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    applyKernel <span class=\"re0\">$srcImage</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span> -- <span class=\"re0\">$kernel</span> -<span class=\"sy0\">&gt;</span> <span class=\"re0\">$dstImage</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$dstImage</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Demonstration code using the teapot image from Tk's widget demo</span><br/>image create photo teapot -<span class=\"kw2\">file</span> <span class=\"re0\">$tk_library</span>/demos/images/teapot.ppm<br/>pack <span class=\"br0\">[</span>labelframe .src -text Source<span class=\"br0\">]</span> -side left<br/>pack <span class=\"br0\">[</span>label .src.l -image teapot<span class=\"br0\">]</span><br/><span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>label kernel<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    Emboss <span class=\"br0\">{</span><br/>\t<span class=\"br0\">{</span>-<span class=\"nu0\">2</span>. -<span class=\"nu0\">1</span>. <span class=\"nu0\">0</span>.<span class=\"br0\">}</span><br/>\t<span class=\"br0\">{</span>-<span class=\"nu0\">1</span>.  <span class=\"nu0\">1</span>. <span class=\"nu0\">1</span>.<span class=\"br0\">}</span><br/>\t<span class=\"br0\">{</span> <span class=\"nu0\">0</span>.  <span class=\"nu0\">1</span>. <span class=\"nu0\">2</span>.<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    Sharpen <span class=\"br0\">{</span><br/>\t<span class=\"br0\">{</span>-<span class=\"nu0\">1</span>. -<span class=\"nu0\">1</span>. -<span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">{</span>-<span class=\"nu0\">1</span>.  <span class=\"nu0\">9</span>. -<span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">{</span>-<span class=\"nu0\">1</span>. -<span class=\"nu0\">1</span>. -<span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    Blur <span class=\"br0\">{</span><br/>\t<span class=\"br0\">{</span>.1111 .1111 .1111<span class=\"br0\">}</span><br/>\t<span class=\"br0\">{</span>.1111 .1111 .1111<span class=\"br0\">}</span><br/>\t<span class=\"br0\">{</span>.1111 .1111 .1111<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> name <span class=\"br0\">[</span><span class=\"kw2\">string</span> tolower <span class=\"re0\">$label</span><span class=\"br0\">]</span><br/>    update<br/>    pack <span class=\"br0\">[</span>labelframe .<span class=\"re0\">$name</span> -text <span class=\"re0\">$label</span><span class=\"br0\">]</span> -side left<br/>    pack <span class=\"br0\">[</span>label .<span class=\"re0\">$name</span>.l -image <span class=\"br0\">[</span>convolve teapot <span class=\"re0\">$kernel</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}]}