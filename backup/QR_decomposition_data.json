{"task": "QR_decomposition", "blocks": [{"lang": "Ada", "loc": 96, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Real_Arrays</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Real_Arrays</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Generic_Elementary_Functions</span>;<br/><span class=\"kw3\">procedure</span> QR <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Show <span class=\"br0\">(</span>mat\u00a0: Real_Matrix<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">package</span> FIO <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Float_IO</span> <span class=\"br0\">(</span>Float<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> row <span class=\"kw3\">in</span> mat'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">for</span> col <span class=\"kw3\">in</span> mat'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>            FIO.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>mat <span class=\"br0\">(</span>row, col<span class=\"br0\">)</span>, Exp =&gt; <span class=\"nu0\">0</span>, Aft =&gt; <span class=\"nu0\">4</span>, Fore =&gt; <span class=\"nu0\">5</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         New_Line;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Show;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> GetCol <span class=\"br0\">(</span>mat\u00a0: Real_Matrix; n\u00a0: Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Real_Matrix <span class=\"kw1\">is</span><br/>      column\u00a0: Real_Matrix <span class=\"br0\">(</span>mat'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span> .. <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> row <span class=\"kw3\">in</span> mat'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>         column <span class=\"br0\">(</span>row, <span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0:= mat <span class=\"br0\">(</span>row, n<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> column;<br/>   <span class=\"kw1\">end</span> GetCol;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Mag <span class=\"br0\">(</span>mat\u00a0: Real_Matrix<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Float <span class=\"kw1\">is</span><br/>      sum\u00a0: Real_Matrix\u00a0:= Transpose <span class=\"br0\">(</span>mat<span class=\"br0\">)</span> * mat;<br/>      <span class=\"kw3\">package</span> Math <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Generic_Elementary_Functions</span><br/>         <span class=\"br0\">(</span>Float<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> Math.<span class=\"me1\">Sqrt</span> <span class=\"br0\">(</span>sum <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Mag;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> eVect <span class=\"br0\">(</span>col\u00a0: Real_Matrix; n\u00a0: Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Real_Matrix <span class=\"kw1\">is</span><br/>      vect\u00a0: Real_Matrix <span class=\"br0\">(</span>col'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span> .. <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> row <span class=\"kw3\">in</span> col'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> row /= n <span class=\"kw1\">then</span> vect <span class=\"br0\">(</span>row, <span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0:= <span class=\"nu0\">0.0</span>;<br/>         <span class=\"kw1\">else</span> vect <span class=\"br0\">(</span>row, <span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0:= <span class=\"nu0\">1.0</span>; <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> vect;<br/>   <span class=\"kw1\">end</span> eVect;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Identity <span class=\"br0\">(</span>n\u00a0: Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Real_Matrix <span class=\"kw1\">is</span><br/>      mat\u00a0: Real_Matrix <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"me1\">n</span>, <span class=\"nu0\">1</span> .. <span class=\"me1\">n</span><span class=\"br0\">)</span>\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"me1\">n</span> =&gt; <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> i <span class=\"kw3\">in</span> Integer <span class=\"kw3\">range</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">n</span> <span class=\"kw1\">loop</span> mat <span class=\"br0\">(</span>i, i<span class=\"br0\">)</span>\u00a0:= <span class=\"nu0\">1.0</span>; <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> mat;<br/>   <span class=\"kw1\">end</span> Identity;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Chop <span class=\"br0\">(</span>mat\u00a0: Real_Matrix; n\u00a0: Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Real_Matrix <span class=\"kw1\">is</span><br/>      small\u00a0: Real_Matrix <span class=\"br0\">(</span>n .. <span class=\"me1\">mat</span>'Length <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, n .. <span class=\"me1\">mat</span>'Length <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> row <span class=\"kw3\">in</span> small'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">for</span> col <span class=\"kw3\">in</span> small'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>            small <span class=\"br0\">(</span>row, col<span class=\"br0\">)</span>\u00a0:= mat <span class=\"br0\">(</span>row, col<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> small;<br/>   <span class=\"kw1\">end</span> Chop;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> H_n <span class=\"br0\">(</span>inmat\u00a0: Real_Matrix; n\u00a0: Integer<span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> Real_Matrix <span class=\"kw1\">is</span><br/>      mat\u00a0: Real_Matrix\u00a0:= Chop <span class=\"br0\">(</span>inmat, n<span class=\"br0\">)</span>;<br/>      col\u00a0: Real_Matrix\u00a0:= GetCol <span class=\"br0\">(</span>mat, n<span class=\"br0\">)</span>;<br/>      colT\u00a0: Real_Matrix <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">1</span>, mat'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      H\u00a0: Real_Matrix\u00a0:= Identity <span class=\"br0\">(</span>mat'Length <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      Hall\u00a0: Real_Matrix\u00a0:= Identity <span class=\"br0\">(</span>inmat'Length <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      col\u00a0:= col - Mag <span class=\"br0\">(</span>col<span class=\"br0\">)</span> * eVect <span class=\"br0\">(</span>col, n<span class=\"br0\">)</span>;<br/>      col\u00a0:= col / Mag <span class=\"br0\">(</span>col<span class=\"br0\">)</span>;<br/>      colT\u00a0:= Transpose <span class=\"br0\">(</span>col<span class=\"br0\">)</span>;<br/>      H\u00a0:= H - <span class=\"nu0\">2.0</span> * <span class=\"br0\">(</span>col * colT<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">for</span> row <span class=\"kw3\">in</span> H'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">for</span> col <span class=\"kw3\">in</span> H'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>            Hall <span class=\"br0\">(</span>n - <span class=\"nu0\">1</span> + row, n - <span class=\"nu0\">1</span> + col<span class=\"br0\">)</span>\u00a0:= H <span class=\"br0\">(</span>row, col<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Hall;<br/>   <span class=\"kw1\">end</span> H_n;<br/>\u00a0<br/>   A\u00a0: <span class=\"kw3\">constant</span> Real_Matrix <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">3</span>, <span class=\"nu0\">1</span> .. <span class=\"nu0\">3</span><span class=\"br0\">)</span>\u00a0:= <span class=\"br0\">(</span><br/>      <span class=\"br0\">(</span><span class=\"nu0\">12.0</span>, -<span class=\"nu0\">51.0</span>, <span class=\"nu0\">4.0</span><span class=\"br0\">)</span>,<br/>      <span class=\"br0\">(</span><span class=\"nu0\">6.0</span>, <span class=\"nu0\">167.0</span>, -<span class=\"nu0\">68.0</span><span class=\"br0\">)</span>,<br/>      <span class=\"br0\">(</span>-<span class=\"nu0\">4.0</span>, <span class=\"nu0\">24.0</span>, -<span class=\"nu0\">41.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Q1, Q2, Q3, Q, R: Real_Matrix <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">3</span>, <span class=\"nu0\">1</span> .. <span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   Q1\u00a0:= H_n <span class=\"br0\">(</span>A, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   Q2\u00a0:= H_n <span class=\"br0\">(</span>Q1 * A, <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>   Q3\u00a0:= H_n <span class=\"br0\">(</span>Q2 * Q1* A, <span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>   Q\u00a0:= Transpose <span class=\"br0\">(</span>Q1<span class=\"br0\">)</span> * Transpose <span class=\"br0\">(</span>Q2<span class=\"br0\">)</span> * TransPose<span class=\"br0\">(</span>Q3<span class=\"br0\">)</span>;<br/>   R\u00a0:= Q3 * Q2 * Q1 * A;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Q:\"</span><span class=\"br0\">)</span>; Show <span class=\"br0\">(</span>Q<span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"R:\"</span><span class=\"br0\">)</span>; Show <span class=\"br0\">(</span>R<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> QR;</pre>"}, {"lang": "Axiom", "loc": 55, "block": "<pre class=\"text highlighted_source\">)abbrev package TESTP TestPackage<br/>TestPackage(R:Join(Field,RadicalCategory)): with<br/>    unitVector: NonNegativeInteger -&gt; Vector(R)<br/>    \"/\": (Vector(R),R) -&gt; Vector(R)<br/>    \"^\": (Vector(R),NonNegativeInteger) -&gt; Vector(R)<br/>    solveUpperTriangular: (Matrix(R),Vector(R)) -&gt; Vector(R)<br/>    signValue: R -&gt; R<br/>    householder: Vector(R) -&gt; Matrix(R)<br/>    qr: Matrix(R) -&gt; Record(q:Matrix(R),r:Matrix(R))<br/>    lsqr: (Matrix(R),Vector(R)) -&gt; Vector(R)<br/>    polyfit: (Vector(R),Vector(R),NonNegativeInteger) -&gt; Vector(R)<br/>  == add<br/>    unitVector(dim) ==<br/>      out\u00a0:= new(dim,<a class=\"__cf_email__\" data-cfemail=\"bf8fffed\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)$Vector(R)<br/>      out(1)\u00a0:= <a class=\"__cf_email__\" data-cfemail=\"7d4c3d2f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>      out<br/>    v:Vector(R) / a:R == map((vi:R):R +-&gt; vi/a, v)$Vector(R)<br/>    v:Vector(R) ^ n:NonNegativeInteger == map((vi:R):R +-&gt; vi^n, v)$Vector(R)<br/>    solveUpperTriangular(r,b) ==<br/>      n\u00a0:= ncols r<br/>      x\u00a0:= new(n,<a class=\"__cf_email__\" data-cfemail=\"cfff8f9d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)$Vector(R)<br/>      for k in n..1 by -1 repeat<br/>        index\u00a0:= min(n,k+1)<br/>\tx(k)\u00a0:= (b(k)-reduce(\"+\",subMatrix(r,k,k,index,n)*x.(index..n)))/r(k,k)<br/>      x<br/>    signValue(r) ==<br/>      R has (sign: R -&gt; Integer) =&gt; coerce(sign(r)$R)$R<br/>      zero? r =&gt; r<br/>      if sqrt(r*r) = r then 1 else -1<br/>    householder(a) ==<br/>      m\u00a0:= #a<br/>      u\u00a0:= a + length(a)*signValue(a(1))*unitVector(m) <br/>      v\u00a0:= u/u(1) <br/>      beta\u00a0:= (1+1)/dot(v,v)<br/>      scalarMatrix(m,1) - beta*transpose(outerProduct(v,v))<br/>    qr(a) ==<br/>      (m,n)\u00a0:= (nrows a, ncols a)<br/>      qm\u00a0:= scalarMatrix(m,1)<br/>      rm\u00a0:= copy a<br/>      for i in 1..(if m=n then n-1 else n) repeat<br/>        x\u00a0:= column(subMatrix(rm,i,m,i,i),1)<br/>\th\u00a0:= scalarMatrix(m,1)<br/>\tsetsubMatrix!(h,i,i,householder x)<br/>\tqm\u00a0:= qm*h<br/>\trm\u00a0:= h*rm<br/>      [qm,rm]<br/>    lsqr(a,b) ==<br/>      dc\u00a0:= qr a<br/>      n\u00a0:= ncols(dc.r)<br/>      solveUpperTriangular(subMatrix(dc.r,1,n,1,n),transpose(dc.q)*b)<br/>    polyfit(x,y,n) ==<br/>      a\u00a0:= new(#x,n+1,<a class=\"__cf_email__\" data-cfemail=\"72423220\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)$Matrix(R)<br/>      for j in 0..n repeat<br/>        setColumn!(a,j+1,x^j)<br/>      lsqr(a,y)</pre>"}, {"lang": "BBC BASIC", "loc": 97, "block": "<pre class=\"text highlighted_source\">      *FLOAT 64<br/>      @% = &amp;2040A<br/>      INSTALL @lib$+\"ARRAYLIB\"<br/>\u00a0<br/>      REM Test matrix for QR decomposition:<br/>      DIM A(2,2)<br/>      A() = 12, -51,   4, \\<br/>      \\      6, 167, -68, \\<br/>      \\     -4,  24, -41<br/>\u00a0<br/>      REM Do the QR decomposition:<br/>      DIM Q(2,2), R(2,2)<br/>      PROCqrdecompose(A(), Q(), R())<br/>      PRINT \"Q:\"<br/>      PRINT Q(0,0), Q(0,1), Q(0,2)<br/>      PRINT Q(1,0), Q(1,1), Q(1,2)<br/>      PRINT Q(2,0), Q(2,1), Q(2,2)<br/>      PRINT \"R:\"<br/>      PRINT R(0,0), R(0,1), R(0,2)<br/>      PRINT R(1,0), R(1,1), R(1,2)<br/>      PRINT R(2,0), R(2,1), R(2,2)<br/>\u00a0<br/>      REM Test data for least-squares solution:<br/>      DIM x(10)\u00a0: x() = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10<br/>      DIM y(10)\u00a0: y() = 1, 6, 17, 34, 57, 86, 121, 162, 209, 262, 321<br/>\u00a0<br/>      REM Do the least-squares solution:<br/>      DIM a(10,2), q(10,10), r(10,2), t(10,10), b(10), z(2)<br/>      FOR i% = 0 TO 10<br/>        FOR j% = 0 TO 2<br/>          a(i%,j%) = x(i%) ^ j%<br/>        NEXT<br/>      NEXT<br/>      PROCqrdecompose(a(), q(), r())<br/>      PROC_transpose(q(),t())<br/>      b() = t() . y()<br/>      FOR k% = 2 TO 0 STEP -1<br/>        s = 0<br/>        IF k% &lt; 2 THEN<br/>          FOR j% = k%+1 TO 2<br/>            s += r(k%,j%) * z(j%)<br/>          NEXT<br/>        ENDIF<br/>        z(k%) = (b(k%) - s) / r(k%,k%)<br/>      NEXT k%<br/>      PRINT '\"Least-squares solution:\"<br/>      PRINT z(0), z(1), z(2)<br/>      END<br/>\u00a0<br/>      DEF PROCqrdecompose(A(), Q(), R())<br/>      LOCAL i%, k%, m%, n%, H()<br/>      m% = DIM(A(),1)\u00a0: n% = DIM(A(),2)<br/>      DIM H(m%,m%)<br/>      FOR i% = 0 TO m%\u00a0: Q(i%,i%) = 1\u00a0: NEXT<br/>      WHILE n%<br/>        PROCqrstep(n%, k%, A(), H())<br/>        A() = H() . A()<br/>        Q() = Q() . H()<br/>        k% += 1<br/>        m% -= 1<br/>        n% -= 1<br/>      ENDWHILE<br/>      R() = A()<br/>      ENDPROC<br/>\u00a0<br/>      DEF PROCqrstep(n%, k%, A(), H())<br/>      LOCAL a(), h(), i%, j%<br/>      DIM a(n%,0), h(n%,n%)<br/>      FOR i% = 0 TO n%\u00a0: a(i%,0) = A(i%+k%,k%)\u00a0: NEXT<br/>      PROChouseholder(h(), a())<br/>      H() = 0 \u00a0: H(0,0) = 1<br/>      FOR i% = 0 TO n%<br/>        FOR j% = 0 TO n%<br/>          H(i%+k%,j%+k%) = h(i%,j%)<br/>        NEXT<br/>      NEXT<br/>      ENDPROC<br/>\u00a0<br/>      REM Create the Householder matrix for the supplied column vector:<br/>      DEF PROChouseholder(H(), a())<br/>      LOCAL e(), u(), v(), vt(), vvt(), I(), d()<br/>      LOCAL i%, n%\u00a0: n% = DIM(a(),1)<br/>      REM Create the scaled standard basis vector e():<br/>      DIM e(n%,0)\u00a0: e(0,0) = SGN(a(0,0)) * MOD(a())<br/>      REM Create the normal vector u():<br/>      DIM u(n%,0)\u00a0: u() = a() + e()<br/>      REM Normalise with respect to the first element:<br/>      DIM v(n%,0)\u00a0: v() = u() / u(0,0)<br/>      REM Get the transpose of v() and its dot product with v():<br/>      DIM vt(0,n%), d(0)\u00a0: PROC_transpose(v(), vt())\u00a0: d() = vt() . v()<br/>      REM Get the product of v() and vt():<br/>      DIM vvt(n%,n%)\u00a0: vvt() = v() . vt()<br/>      REM Create an identity matrix I():<br/>      DIM I(n%,n%)\u00a0: FOR i% = 0 TO n%\u00a0: I(i%,i%) = 1\u00a0: NEXT<br/>      REM Create the Householder matrix H() = I - 2/vt()v() v()vt():<br/>      vvt() *= 2 / d(0)\u00a0: H() = I() - vvt()<br/>      ENDPROC</pre>"}, {"lang": "C", "loc": 192, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> m<span class=\"sy0\">,</span> n<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> <span class=\"sy0\">**</span> v<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> mat_t<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>mat<span class=\"sy0\">;</span><br/>\u00a0<br/>mat matrix_new<span class=\"br0\">(</span><span class=\"kw4\">int</span> m<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tmat x <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>mat_t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tx<span class=\"sy0\">-&gt;</span>v <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tx<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> m <span class=\"sy0\">*</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> m<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tx<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> n <span class=\"sy0\">*</span> i<span class=\"sy0\">;</span><br/>\tx<span class=\"sy0\">-&gt;</span>m <span class=\"sy0\">=</span> m<span class=\"sy0\">;</span><br/>\tx<span class=\"sy0\">-&gt;</span>n <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> x<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> matrix_delete<span class=\"br0\">(</span>mat m<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>m<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>m<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> matrix_transpose<span class=\"br0\">(</span>mat m<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> m<span class=\"sy0\">-&gt;</span>m<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> i<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">double</span> t <span class=\"sy0\">=</span> m<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tm<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> m<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tm<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>mat matrix_copy<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> a<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> m<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tmat x <span class=\"sy0\">=</span> matrix_new<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> m<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\tx<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> x<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>mat matrix_mul<span class=\"br0\">(</span>mat x<span class=\"sy0\">,</span> mat y<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span>n <span class=\"sy0\">!=</span> y<span class=\"sy0\">-&gt;</span>m<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\tmat r <span class=\"sy0\">=</span> matrix_new<span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span>m<span class=\"sy0\">,</span> y<span class=\"sy0\">-&gt;</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> x<span class=\"sy0\">-&gt;</span>m<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> y<span class=\"sy0\">-&gt;</span>n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> x<span class=\"sy0\">-&gt;</span>n<span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\tr<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> x<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">*</span> y<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>mat matrix_minor<span class=\"br0\">(</span>mat x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> d<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tmat m <span class=\"sy0\">=</span> matrix_new<span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span>m<span class=\"sy0\">,</span> x<span class=\"sy0\">-&gt;</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> d<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tm<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> d<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> x<span class=\"sy0\">-&gt;</span>m<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> d<span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> x<span class=\"sy0\">-&gt;</span>n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\tm<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> m<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* c = a + b * s */</span><br/><span class=\"kw4\">double</span> <span class=\"sy0\">*</span>vmadd<span class=\"br0\">(</span><span class=\"kw4\">double</span> a<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">double</span> b<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">double</span> s<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> c<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tc<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> s <span class=\"sy0\">*</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> c<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* m = I - v v^T */</span><br/>mat vmul<span class=\"br0\">(</span><span class=\"kw4\">double</span> v<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tmat x <span class=\"sy0\">=</span> matrix_new<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\tx<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span>  v<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> v<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tx<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> x<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* ||x|| */</span><br/><span class=\"kw4\">double</span> vnorm<span class=\"br0\">(</span><span class=\"kw4\">double</span> x<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> sum <span class=\"sy0\">+=</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span>sum<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* y = x / d */</span><br/><span class=\"kw4\">double</span><span class=\"sy0\">*</span> vdiv<span class=\"br0\">(</span><span class=\"kw4\">double</span> x<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">double</span> d<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> y<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> y<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">/</span> d<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> y<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* take c-th column of m, put in v */</span><br/><span class=\"kw4\">double</span><span class=\"sy0\">*</span> mcol<span class=\"br0\">(</span>mat m<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> <span class=\"sy0\">*</span>v<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> c<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> m<span class=\"sy0\">-&gt;</span>m<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tv<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> m<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> v<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> matrix_show<span class=\"br0\">(</span>mat m<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> m<span class=\"sy0\">-&gt;</span>m<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> m<span class=\"sy0\">-&gt;</span>n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%8.3f\"</span><span class=\"sy0\">,</span> m<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> householder<span class=\"br0\">(</span>mat m<span class=\"sy0\">,</span> mat <span class=\"sy0\">*</span>R<span class=\"sy0\">,</span> mat <span class=\"sy0\">*</span>Q<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tmat q<span class=\"br0\">[</span>m<span class=\"sy0\">-&gt;</span>m<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\tmat z <span class=\"sy0\">=</span> m<span class=\"sy0\">,</span> z1<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> m<span class=\"sy0\">-&gt;</span>n <span class=\"sy0\">&amp;&amp;</span> k <span class=\"sy0\">&lt;</span> m<span class=\"sy0\">-&gt;</span>m <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">double</span> e<span class=\"br0\">[</span>m<span class=\"sy0\">-&gt;</span>m<span class=\"br0\">]</span><span class=\"sy0\">,</span> x<span class=\"br0\">[</span>m<span class=\"sy0\">-&gt;</span>m<span class=\"br0\">]</span><span class=\"sy0\">,</span> a<span class=\"sy0\">;</span><br/>\t\tz1 <span class=\"sy0\">=</span> matrix_minor<span class=\"br0\">(</span>z<span class=\"sy0\">,</span> k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>z <span class=\"sy0\">!=</span> m<span class=\"br0\">)</span> matrix_delete<span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tz <span class=\"sy0\">=</span> z1<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tmcol<span class=\"br0\">(</span>z<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ta <span class=\"sy0\">=</span> vnorm<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> m<span class=\"sy0\">-&gt;</span>m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>m<span class=\"sy0\">-&gt;</span>v<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> a <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>a<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> m<span class=\"sy0\">-&gt;</span>m<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\te<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> k<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tvmadd<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> e<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> e<span class=\"sy0\">,</span> m<span class=\"sy0\">-&gt;</span>m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tvdiv<span class=\"br0\">(</span>e<span class=\"sy0\">,</span> vnorm<span class=\"br0\">(</span>e<span class=\"sy0\">,</span> m<span class=\"sy0\">-&gt;</span>m<span class=\"br0\">)</span><span class=\"sy0\">,</span> e<span class=\"sy0\">,</span> m<span class=\"sy0\">-&gt;</span>m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tq<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> vmul<span class=\"br0\">(</span>e<span class=\"sy0\">,</span> m<span class=\"sy0\">-&gt;</span>m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tz1 <span class=\"sy0\">=</span> matrix_mul<span class=\"br0\">(</span>q<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">,</span> z<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>z <span class=\"sy0\">!=</span> m<span class=\"br0\">)</span> matrix_delete<span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tz <span class=\"sy0\">=</span> z1<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\tmatrix_delete<span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"sy0\">*</span>Q <span class=\"sy0\">=</span> q<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"sy0\">*</span>R <span class=\"sy0\">=</span> matrix_mul<span class=\"br0\">(</span>q<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> m<span class=\"sy0\">-&gt;</span>n <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">&lt;</span> m<span class=\"sy0\">-&gt;</span>m <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tz1 <span class=\"sy0\">=</span> matrix_mul<span class=\"br0\">(</span>q<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span>Q<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> matrix_delete<span class=\"br0\">(</span><span class=\"sy0\">*</span>Q<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"sy0\">*</span>Q <span class=\"sy0\">=</span> z1<span class=\"sy0\">;</span><br/>\t\tmatrix_delete<span class=\"br0\">(</span>q<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\tmatrix_delete<span class=\"br0\">(</span>q<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tz <span class=\"sy0\">=</span> matrix_mul<span class=\"br0\">(</span><span class=\"sy0\">*</span>Q<span class=\"sy0\">,</span> m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmatrix_delete<span class=\"br0\">(</span><span class=\"sy0\">*</span>R<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"sy0\">*</span>R <span class=\"sy0\">=</span> z<span class=\"sy0\">;</span><br/>\tmatrix_transpose<span class=\"br0\">(</span><span class=\"sy0\">*</span>Q<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> in<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\t<span class=\"br0\">{</span> <span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">51</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span>  <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">167</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">68</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span>  <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">41</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tmat R<span class=\"sy0\">,</span> Q<span class=\"sy0\">;</span><br/>\tmat x <span class=\"sy0\">=</span> matrix_copy<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> in<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\thouseholder<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>R<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>Q<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Q\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> matrix_show<span class=\"br0\">(</span>Q<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\"R\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> matrix_show<span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// to show their product is the input matrix</span><br/>\tmat m <span class=\"sy0\">=</span> matrix_mul<span class=\"br0\">(</span>Q<span class=\"sy0\">,</span> R<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Q * R\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> matrix_show<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tmatrix_delete<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmatrix_delete<span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmatrix_delete<span class=\"br0\">(</span>Q<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmatrix_delete<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 396, "block": "<pre class=\"cpp highlighted_source\"><span class=\"coMULTI\">/*<br/> * g++ -O3 -Wall --std=c++11 qr_standalone.cpp -o qr_standalone<br/> */</span><br/><span class=\"co2\">#include &lt;cstdio&gt;</span><br/><span class=\"co2\">#include &lt;cstdlib&gt;</span><br/><span class=\"co2\">#include &lt;cstring&gt; // for memset</span><br/><span class=\"co2\">#include &lt;limits&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Vector<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Matrix <span class=\"br0\">{</span><br/>\u00a0<br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  <span class=\"co1\">// default constructor (don't allocate)</span><br/>  Matrix<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> m<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, n<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, data<span class=\"br0\">(</span>nullptr<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// constructor with memory allocation, initialized to zero</span><br/>  Matrix<span class=\"br0\">(</span><span class=\"kw4\">int</span> m_, <span class=\"kw4\">int</span> n_<span class=\"br0\">)</span> <span class=\"sy4\">:</span> Matrix<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    m <span class=\"sy1\">=</span> m_<span class=\"sy4\">;</span><br/>    n <span class=\"sy1\">=</span> n_<span class=\"sy4\">;</span><br/>    allocate<span class=\"br0\">(</span>m_,n_<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// copy constructor</span><br/>  Matrix<span class=\"br0\">(</span><span class=\"kw4\">const</span> Matrix<span class=\"sy3\">&amp;</span> mat<span class=\"br0\">)</span> <span class=\"sy4\">:</span> Matrix<span class=\"br0\">(</span>mat.<span class=\"me1\">m</span>,mat.<span class=\"me1\">n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> m<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> j<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i,j<span class=\"br0\">)</span> <span class=\"sy1\">=</span> mat<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// constructor from array</span><br/>  <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span> rows, <span class=\"kw4\">int</span> cols<span class=\"sy1\">&gt;</span><br/>  Matrix<span class=\"br0\">(</span><span class=\"kw4\">double</span> <span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>a<span class=\"br0\">)</span><span class=\"br0\">[</span>rows<span class=\"br0\">]</span><span class=\"br0\">[</span>cols<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> Matrix<span class=\"br0\">(</span>rows,cols<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> m<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> j<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i,j<span class=\"br0\">)</span> <span class=\"sy1\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// destructor</span><br/>  ~Matrix<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    deallocate<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>  <span class=\"co1\">// access data operators</span><br/>  <span class=\"kw4\">double</span><span class=\"sy3\">&amp;</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> data<span class=\"br0\">[</span>i<span class=\"sy2\">+</span>m<span class=\"sy2\">*</span>j<span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw4\">double</span>  operator<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> j<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> data<span class=\"br0\">[</span>i<span class=\"sy2\">+</span>m<span class=\"sy2\">*</span>j<span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// operator assignment</span><br/>  Matrix<span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">=</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Matrix<span class=\"sy3\">&amp;</span> source<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co1\">// self-assignment check</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">this</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>source<span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>m<span class=\"sy2\">*</span>n<span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span>source.<span class=\"me1\">m</span> <span class=\"sy2\">*</span> source.<span class=\"me1\">n</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// storage cannot be reused</span><br/>\tallocate<span class=\"br0\">(</span>source.<span class=\"me1\">m</span>,source.<span class=\"me1\">n</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>          <span class=\"co1\">// re-allocate storage</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"co1\">// storage can be used, copy data</span><br/>      std<span class=\"sy4\">::</span><span class=\"me2\">copy</span><span class=\"br0\">(</span>source.<span class=\"me1\">data</span>, source.<span class=\"me1\">data</span> <span class=\"sy2\">+</span> source.<span class=\"me1\">m</span><span class=\"sy2\">*</span>source.<span class=\"me1\">n</span>, data<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// compute minor</span><br/>  <span class=\"kw4\">void</span> compute_minor<span class=\"br0\">(</span><span class=\"kw4\">const</span> Matrix<span class=\"sy3\">&amp;</span> mat, <span class=\"kw4\">int</span> d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    allocate<span class=\"br0\">(</span>mat.<span class=\"me1\">m</span>, mat.<span class=\"me1\">n</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> d<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i,i<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu16\">1.0</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> d<span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> mat.<span class=\"me1\">m</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> d<span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> mat.<span class=\"me1\">n</span><span class=\"sy4\">;</span> j<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i,j<span class=\"br0\">)</span> <span class=\"sy1\">=</span> mat<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// Matrix multiplication</span><br/>  <span class=\"co1\">// c = a * b</span><br/>  <span class=\"co1\">// c will be re-allocated here</span><br/>  <span class=\"kw4\">void</span> mult<span class=\"br0\">(</span><span class=\"kw4\">const</span> Matrix<span class=\"sy3\">&amp;</span> a, <span class=\"kw4\">const</span> Matrix<span class=\"sy3\">&amp;</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a.<span class=\"me1\">n</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> b.<span class=\"me1\">m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Matrix multiplication not possible, sizes don't match\u00a0!<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>      <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// reallocate ourself if necessary i.e. current Matrix has not valid sizes</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a.<span class=\"me1\">m</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> m or b.<span class=\"me1\">n</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> n<span class=\"br0\">)</span><br/>      allocate<span class=\"br0\">(</span>a.<span class=\"me1\">m</span>, b.<span class=\"me1\">n</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">memset</span><span class=\"br0\">(</span>data,<span class=\"nu0\">0</span>,m<span class=\"sy2\">*</span>n<span class=\"sy2\">*</span><span class=\"kw3\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> a.<span class=\"me1\">m</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> b.<span class=\"me1\">n</span><span class=\"sy4\">;</span> j<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> k <span class=\"sy1\">&lt;</span> a.<span class=\"me1\">n</span><span class=\"sy4\">;</span> k<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>\t  <span class=\"br0\">(</span><span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i,j<span class=\"br0\">)</span> <span class=\"sy2\">+</span><span class=\"sy1\">=</span> a<span class=\"br0\">(</span>i,k<span class=\"br0\">)</span> <span class=\"sy2\">*</span> b<span class=\"br0\">(</span>k,j<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">void</span> transpose<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> m<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> i<span class=\"sy4\">;</span> j<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> t <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">(</span><span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i,j<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"br0\">)</span><span class=\"br0\">(</span>j,i<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">(</span><span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"br0\">)</span><span class=\"br0\">(</span>j,i<span class=\"br0\">)</span> <span class=\"sy1\">=</span> t<span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// take c-th column of m, put in v</span><br/>  <span class=\"kw4\">void</span> extract_column<span class=\"br0\">(</span>Vector<span class=\"sy3\">&amp;</span> v, <span class=\"kw4\">int</span> c<span class=\"br0\">)</span><span class=\"sy4\">;</span>  <br/>\u00a0<br/>  <span class=\"co1\">// memory allocation</span><br/>  <span class=\"kw4\">void</span> allocate<span class=\"br0\">(</span><span class=\"kw4\">int</span> m_, <span class=\"kw4\">int</span> n_<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co1\">// if already allocated, memory is freed</span><br/>    deallocate<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// new sizes</span><br/>    m <span class=\"sy1\">=</span> m_<span class=\"sy4\">;</span><br/>    n <span class=\"sy1\">=</span> n_<span class=\"sy4\">;</span><br/>\u00a0<br/>    data <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>m_<span class=\"sy2\">*</span>n_<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">memset</span><span class=\"br0\">(</span>data,<span class=\"nu0\">0</span>,m_<span class=\"sy2\">*</span>n_<span class=\"sy2\">*</span><span class=\"kw3\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"br0\">}</span> <span class=\"co1\">// allocate</span><br/>\u00a0<br/>  <span class=\"co1\">// memory free</span><br/>  <span class=\"kw4\">void</span> deallocate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>data<span class=\"br0\">)</span><br/>      <span class=\"kw3\">delete</span><span class=\"br0\">[</span><span class=\"br0\">]</span> data<span class=\"sy4\">;</span><br/>\u00a0<br/>    data <span class=\"sy1\">=</span> nullptr<span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"br0\">}</span>    <br/>\u00a0<br/>  <span class=\"kw4\">int</span> m, n<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>  <span class=\"kw4\">double</span><span class=\"sy2\">*</span> data<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span><span class=\"sy4\">;</span> <span class=\"co1\">// struct Matrix</span><br/>\u00a0<br/><span class=\"co1\">// column vector</span><br/><span class=\"kw2\">class</span> Vector <span class=\"br0\">{</span><br/>\u00a0<br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  <span class=\"co1\">// default constructor (don't allocate)</span><br/>  Vector<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> size<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, data<span class=\"br0\">(</span>nullptr<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// constructor with memory allocation, initialized to zero</span><br/>  Vector<span class=\"br0\">(</span><span class=\"kw4\">int</span> size_<span class=\"br0\">)</span> <span class=\"sy4\">:</span> Vector<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    size <span class=\"sy1\">=</span> size_<span class=\"sy4\">;</span><br/>    allocate<span class=\"br0\">(</span>size_<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// destructor</span><br/>  ~Vector<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    deallocate<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// access data operators</span><br/>  <span class=\"kw4\">double</span><span class=\"sy3\">&amp;</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw4\">double</span>  operator<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// operator assignment</span><br/>  Vector<span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">=</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Vector<span class=\"sy3\">&amp;</span> source<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co1\">// self-assignment check</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">this</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"sy3\">&amp;</span>source<span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> size <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span>source.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span>   <span class=\"co1\">// storage cannot be reused</span><br/>\tallocate<span class=\"br0\">(</span>source.<span class=\"me1\">size</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>         <span class=\"co1\">// re-allocate storage</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"co1\">// storage can be used, copy data</span><br/>      std<span class=\"sy4\">::</span><span class=\"me2\">copy</span><span class=\"br0\">(</span>source.<span class=\"me1\">data</span>, source.<span class=\"me1\">data</span> <span class=\"sy2\">+</span> source.<span class=\"me1\">size</span>, data<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// memory allocation</span><br/>  <span class=\"kw4\">void</span> allocate<span class=\"br0\">(</span><span class=\"kw4\">int</span> size_<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    deallocate<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// new sizes</span><br/>    size <span class=\"sy1\">=</span> size_<span class=\"sy4\">;</span><br/>\u00a0<br/>    data <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>size_<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">memset</span><span class=\"br0\">(</span>data,<span class=\"nu0\">0</span>,size_<span class=\"sy2\">*</span><span class=\"kw3\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"br0\">}</span> <span class=\"co1\">// allocate</span><br/>\u00a0<br/>  <span class=\"co1\">// memory free</span><br/>  <span class=\"kw4\">void</span> deallocate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>data<span class=\"br0\">)</span><br/>      <span class=\"kw3\">delete</span><span class=\"br0\">[</span><span class=\"br0\">]</span> data<span class=\"sy4\">;</span><br/>\u00a0<br/>    data <span class=\"sy1\">=</span> nullptr<span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"br0\">}</span>    <br/>\u00a0<br/>  <span class=\"co1\">//   ||x||</span><br/>  <span class=\"kw4\">double</span> norm<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">double</span> sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> size<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>sum<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// divide data by factor</span><br/>  <span class=\"kw4\">void</span> rescale<span class=\"br0\">(</span><span class=\"kw4\">double</span> factor<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> size<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy2\">/</span><span class=\"sy1\">=</span> factor<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">void</span> rescale_unit<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">double</span> factor <span class=\"sy1\">=</span> norm<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    rescale<span class=\"br0\">(</span>factor<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">int</span> size<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>  <span class=\"kw4\">double</span><span class=\"sy2\">*</span> data<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span><span class=\"sy4\">;</span> <span class=\"co1\">// class Vector</span><br/>\u00a0<br/><span class=\"co1\">// c = a + b * s</span><br/><span class=\"kw4\">void</span> vmadd<span class=\"br0\">(</span><span class=\"kw4\">const</span> Vector<span class=\"sy3\">&amp;</span> a, <span class=\"kw4\">const</span> Vector<span class=\"sy3\">&amp;</span> b, <span class=\"kw4\">double</span> s, Vector<span class=\"sy3\">&amp;</span> c<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c.<span class=\"me1\">size</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> a.<span class=\"me1\">size</span> or c.<span class=\"me1\">size</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> b.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"[vmadd]: vector sizes don't match<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> c.<span class=\"me1\">size</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>    c<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy1\">=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy2\">+</span> s <span class=\"sy2\">*</span> b<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// mat = I - 2*v*v^T</span><br/><span class=\"co1\">//\u00a0!!! m is allocated here\u00a0!!!</span><br/><span class=\"kw4\">void</span> compute_householder_factor<span class=\"br0\">(</span>Matrix<span class=\"sy3\">&amp;</span> mat, <span class=\"kw4\">const</span> Vector<span class=\"sy3\">&amp;</span> v<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"kw4\">int</span> n <span class=\"sy1\">=</span> v.<span class=\"me1\">size</span><span class=\"sy4\">;</span><br/>  mat.<span class=\"me1\">allocate</span><span class=\"br0\">(</span>n,n<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> j<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>      mat<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">2</span> <span class=\"sy2\">*</span>  v<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy2\">*</span> v<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>    mat<span class=\"br0\">(</span>i,i<span class=\"br0\">)</span> <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span>  <br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// take c-th column of a matrix, put results in Vector v</span><br/><span class=\"kw4\">void</span> Matrix<span class=\"sy4\">::</span><span class=\"me2\">extract_column</span><span class=\"br0\">(</span>Vector<span class=\"sy3\">&amp;</span> v, <span class=\"kw4\">int</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>m <span class=\"sy3\">!</span><span class=\"sy1\">=</span> v.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"[Matrix::extract_column]: Matrix and Vector sizes don't match<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> m<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>    v<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i,c<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> matrix_show<span class=\"br0\">(</span><span class=\"kw4\">const</span> Matrix<span class=\"sy3\">&amp;</span>  m, <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy3\">&amp;</span> str<span class=\"sy1\">=</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> str <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> m.<span class=\"me1\">m</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> m.<span class=\"me1\">n</span><span class=\"sy4\">;</span> j<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%8.3f\"</span>, m<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// L2-norm ||A-B||^2</span><br/><span class=\"kw4\">double</span> matrix_compare<span class=\"br0\">(</span><span class=\"kw4\">const</span> Matrix<span class=\"sy3\">&amp;</span> A, <span class=\"kw4\">const</span> Matrix<span class=\"sy3\">&amp;</span> B<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"co1\">// matrices must have same size</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>A.<span class=\"me1\">m</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> B.<span class=\"me1\">m</span> or  A.<span class=\"me1\">n</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> B.<span class=\"me1\">n</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">numeric_limits</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">max</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">double</span> res<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> A.<span class=\"me1\">m</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> A.<span class=\"me1\">n</span><span class=\"sy4\">;</span> j<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      res <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span>A<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"sy2\">-</span>B<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"br0\">(</span>A<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"sy2\">-</span>B<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  res <span class=\"sy2\">/</span><span class=\"sy1\">=</span> A.<span class=\"me1\">m</span><span class=\"sy2\">*</span>A.<span class=\"me1\">n</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> res<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> householder<span class=\"br0\">(</span>Matrix<span class=\"sy3\">&amp;</span> mat,<br/>\t\t Matrix<span class=\"sy3\">&amp;</span> R,<br/>\t\t Matrix<span class=\"sy3\">&amp;</span> Q<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"kw4\">int</span> m <span class=\"sy1\">=</span> mat.<span class=\"me1\">m</span><span class=\"sy4\">;</span><br/>  <span class=\"kw4\">int</span> n <span class=\"sy1\">=</span> mat.<span class=\"me1\">n</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// array of factor Q1, Q2, ... Qm</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>Matrix<span class=\"sy1\">&gt;</span> qv<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// temp array</span><br/>  Matrix z<span class=\"br0\">(</span>mat<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  Matrix z1<span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> k <span class=\"sy1\">&lt;</span> n <span class=\"sy3\">&amp;&amp;</span> k <span class=\"sy1\">&lt;</span> m <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> k<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    Vector e<span class=\"br0\">(</span>m<span class=\"br0\">)</span>, x<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">double</span> a<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// compute minor</span><br/>    z1.<span class=\"me1\">compute_minor</span><span class=\"br0\">(</span>z, k<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// extract k-th column into x</span><br/>    z1.<span class=\"me1\">extract_column</span><span class=\"br0\">(</span>x, k<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    a <span class=\"sy1\">=</span> x.<span class=\"me1\">norm</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>mat<span class=\"br0\">(</span>k,k<span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> a <span class=\"sy1\">=</span> <span class=\"sy2\">-</span>a<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> e.<span class=\"me1\">size</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>      e<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>i <span class=\"sy1\">==</span> k<span class=\"br0\">)</span> <span class=\"sy4\">?</span> <span class=\"nu0\">1</span> <span class=\"sy4\">:</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// e = x + a*e</span><br/>    vmadd<span class=\"br0\">(</span>x, e, a, e<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// e = e / ||e||</span><br/>    e.<span class=\"me1\">rescale_unit</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// qv[k] = I - 2 *e*e^T</span><br/>    compute_householder_factor<span class=\"br0\">(</span>qv<span class=\"br0\">[</span>k<span class=\"br0\">]</span>, e<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// z = qv[k] * z1</span><br/>    z.<span class=\"me1\">mult</span><span class=\"br0\">(</span>qv<span class=\"br0\">[</span>k<span class=\"br0\">]</span>, z1<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  Q <span class=\"sy1\">=</span> qv<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// after this loop, we will obtain Q (up to a transpose operation)</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> n <span class=\"sy3\">&amp;&amp;</span> i <span class=\"sy1\">&lt;</span> m <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    z1.<span class=\"me1\">mult</span><span class=\"br0\">(</span>qv<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, Q<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    Q <span class=\"sy1\">=</span> z1<span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  R.<span class=\"me1\">mult</span><span class=\"br0\">(</span>Q, mat<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  Q.<span class=\"me1\">transpose</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> in<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><br/>  <span class=\"br0\">{</span> <span class=\"nu0\">12</span>, <span class=\"sy2\">-</span><span class=\"nu0\">51</span>,   <span class=\"nu0\">4</span><span class=\"br0\">}</span>,<br/>  <span class=\"br0\">{</span>  <span class=\"nu0\">6</span>, <span class=\"nu0\">167</span>, <span class=\"sy2\">-</span><span class=\"nu0\">68</span><span class=\"br0\">}</span>,<br/>  <span class=\"br0\">{</span> <span class=\"sy2\">-</span><span class=\"nu0\">4</span>,  <span class=\"nu0\">24</span>, <span class=\"sy2\">-</span><span class=\"nu0\">41</span><span class=\"br0\">}</span>,<br/>  <span class=\"br0\">{</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span>,   <span class=\"nu0\">1</span>,   <span class=\"nu0\">0</span><span class=\"br0\">}</span>,<br/>  <span class=\"br0\">{</span>  <span class=\"nu0\">2</span>,   <span class=\"nu0\">0</span>,   <span class=\"nu0\">3</span><span class=\"br0\">}</span>,<br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  Matrix A<span class=\"br0\">(</span>in<span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>  Matrix Q, R<span class=\"sy4\">;</span><br/>\u00a0<br/>  matrix_show<span class=\"br0\">(</span>A,<span class=\"st0\">\"A\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>  <br/>\u00a0<br/>  <span class=\"co1\">// compute QR decompostion</span><br/>  householder<span class=\"br0\">(</span>A, R, Q<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  matrix_show<span class=\"br0\">(</span>Q,<span class=\"st0\">\"Q\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  matrix_show<span class=\"br0\">(</span>R,<span class=\"st0\">\"R\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// compare Q*R to the original matrix A</span><br/>  Matrix A_check<span class=\"sy4\">;</span><br/>  A_check.<span class=\"me1\">mult</span><span class=\"br0\">(</span>Q, R<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// compute L2 norm ||A-A_check||^2</span><br/>  <span class=\"kw4\">double</span> l2 <span class=\"sy1\">=</span> matrix_compare<span class=\"br0\">(</span>A,A_check<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// display Q*R</span><br/>  matrix_show<span class=\"br0\">(</span>A_check, l2 <span class=\"sy1\">&lt;</span> <span class=\"nu19\">1e-12</span> <span class=\"sy4\">?</span> <span class=\"st0\">\"A == Q * R\u00a0? yes\"</span> <span class=\"sy4\">:</span> <span class=\"st0\">\"A == Q * R\u00a0? no\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"kw2\">EXIT_SUCCESS</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 27, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">MathNet.Numerics.LinearAlgebra</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">MathNet.Numerics.LinearAlgebra.Double</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Matrix<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span> A <span class=\"sy0\">=</span> DenseMatrix<span class=\"sy0\">.</span><span class=\"me1\">OfArray</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span><br/>        <span class=\"br0\">{</span><br/>                <span class=\"br0\">{</span>  <span class=\"nu0\">12</span>,  <span class=\"sy0\">-</span><span class=\"nu0\">51</span>,    <span class=\"nu0\">4</span> <span class=\"br0\">}</span>,<br/>                <span class=\"br0\">{</span>   <span class=\"nu0\">6</span>,  <span class=\"nu0\">167</span>,  <span class=\"sy0\">-</span><span class=\"nu0\">68</span> <span class=\"br0\">}</span>,<br/>                <span class=\"br0\">{</span>  <span class=\"sy0\">-</span><span class=\"nu0\">4</span>,   <span class=\"nu0\">24</span>,  <span class=\"sy0\">-</span><span class=\"nu0\">41</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"A:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> qr <span class=\"sy0\">=</span> A<span class=\"sy0\">.</span><span class=\"me1\">QR</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Q:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>qr<span class=\"sy0\">.</span><span class=\"me1\">Q</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"R:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>qr<span class=\"sy0\">.</span><span class=\"me1\">R</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 55, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sign <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> x<span class=\"br0\">)</span><br/>      x<br/>      <span class=\"br0\">(</span>/ x <span class=\"br0\">(</span><span class=\"kw1\">abs</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> norm <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>len <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"br0\">(</span>array-dimensions x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">0</span> to <span class=\"br0\">(</span><span class=\"nu0\">1</span>- len<span class=\"br0\">)</span> sum <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> x i <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> make-unit-vector <span class=\"br0\">(</span>dim<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>vec <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> `<span class=\"br0\">(</span><span class=\"sy0\">,</span>dim <span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> 0<span class=\"sy0\">.</span>0d0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> vec <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> 1<span class=\"sy0\">.</span>0d0<span class=\"br0\">)</span><br/>    vec<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Return a nxn identity matrix.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> eye <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>I <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> `<span class=\"br0\">(</span><span class=\"sy0\">,</span>n <span class=\"sy0\">,</span>n<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop for j from <span class=\"nu0\">0</span> to <span class=\"br0\">(</span>- n <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> I j j<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    I<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> array-range <span class=\"br0\">(</span>A ma mb na nb<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>mm <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span>- mb ma<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>nn <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span>- nb na<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>B <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> `<span class=\"br0\">(</span><span class=\"sy0\">,</span>mm <span class=\"sy0\">,</span>nn<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> 0<span class=\"sy0\">.</span>0d0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">0</span> to <span class=\"br0\">(</span><span class=\"nu0\">1</span>- mm<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>         <span class=\"br0\">(</span>loop for j from <span class=\"nu0\">0</span> to <span class=\"br0\">(</span><span class=\"nu0\">1</span>- nn<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> B i j<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span><span class=\"kw1\">aref</span> A <span class=\"br0\">(</span>+ ma i<span class=\"br0\">)</span> <span class=\"br0\">(</span>+ na j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    B<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> rows <span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span>  <span class=\"br0\">(</span>array-dimensions A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> cols <span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> <span class=\"br0\">(</span>array-dimensions A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> mcol <span class=\"br0\">(</span>A n<span class=\"br0\">)</span> <span class=\"br0\">(</span>array-range A <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"br0\">(</span>rows A<span class=\"br0\">)</span><span class=\"br0\">)</span> n n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> mrow <span class=\"br0\">(</span>A n<span class=\"br0\">)</span> <span class=\"br0\">(</span>array-range A n n <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"br0\">(</span>cols A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> array-embed <span class=\"br0\">(</span>A B row col<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>ma <span class=\"br0\">(</span>rows A<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>na <span class=\"br0\">(</span>cols A<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>mb <span class=\"br0\">(</span>rows B<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>nb <span class=\"br0\">(</span>cols B<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>C  <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> `<span class=\"br0\">(</span><span class=\"sy0\">,</span>ma <span class=\"sy0\">,</span>na<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> 0<span class=\"sy0\">.</span>0d0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">0</span> to <span class=\"br0\">(</span><span class=\"nu0\">1</span>- ma<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>         <span class=\"br0\">(</span>loop for j from <span class=\"nu0\">0</span> to <span class=\"br0\">(</span><span class=\"nu0\">1</span>- na<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> C i j<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> A i j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">0</span> to <span class=\"br0\">(</span><span class=\"nu0\">1</span>- mb<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>         <span class=\"br0\">(</span>loop for j from <span class=\"nu0\">0</span> to <span class=\"br0\">(</span><span class=\"nu0\">1</span>- nb<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> C <span class=\"br0\">(</span>+ row i<span class=\"br0\">)</span> <span class=\"br0\">(</span>+ col j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span><span class=\"kw1\">aref</span> B i j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    C<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 202, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">,</span><br/>       std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span> std.<span class=\"me1\">numeric</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">template</span> elementwiseMat<span class=\"br0\">(</span><span class=\"kw4\">string</span> op<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> elementwiseMat<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> A<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T B<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>A.<span class=\"me1\">empty</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">auto</span> R <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">(</span>A.<span class=\"me1\">length</span><span class=\"sy0\">,</span> A<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> r<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> row<span class=\"sy0\">;</span> A<span class=\"br0\">)</span><br/>            R<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">mixin</span><span class=\"br0\">(</span><span class=\"st0\">\"row[] \"</span> <span class=\"sy0\">~</span> op <span class=\"sy0\">~</span> <span class=\"st0\">\"B\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> R<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> elementwiseMat<span class=\"br0\">(</span>T<span class=\"sy0\">,</span> U<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> A<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> U<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> B<span class=\"br0\">)</span><br/>    <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">is</span><span class=\"br0\">(</span>Unqual<span class=\"sy0\">!</span>T <span class=\"sy0\">==</span> Unqual<span class=\"sy0\">!</span>U<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span>A.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> B.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>A.<span class=\"me1\">empty</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">auto</span> R <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">(</span>A.<span class=\"me1\">length</span><span class=\"sy0\">,</span> A<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> r<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> row<span class=\"sy0\">;</span> A<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">assert</span><span class=\"br0\">(</span>row.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> B<span class=\"br0\">[</span>r<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            R<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">mixin</span><span class=\"br0\">(</span><span class=\"st0\">\"row[] \"</span> <span class=\"sy0\">~</span> op <span class=\"sy0\">~</span> <span class=\"st0\">\"B[r][]\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> R<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">alias</span> mSum <span class=\"sy0\">=</span> elementwiseMat<span class=\"sy0\">!</span>q<span class=\"br0\">{</span> <span class=\"sy0\">+</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>      mSub <span class=\"sy0\">=</span> elementwiseMat<span class=\"sy0\">!</span>q<span class=\"br0\">{</span> <span class=\"sy0\">-</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>      pMul <span class=\"sy0\">=</span> elementwiseMat<span class=\"sy0\">!</span>q<span class=\"br0\">{</span> <span class=\"sy0\">*</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>      pDiv <span class=\"sy0\">=</span> elementwiseMat<span class=\"sy0\">!</span>q<span class=\"br0\">{</span> <span class=\"sy0\">/</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isRectangular<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> mat<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> mat.<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>r <span class=\"sy0\">=&gt;</span> r.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> mat<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> matMul<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> b<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span><br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>a.<span class=\"me1\">isRectangular</span> <span class=\"sy0\">&amp;&amp;</span> b.<span class=\"me1\">isRectangular</span> <span class=\"sy0\">&amp;&amp;</span><br/>           a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> b.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> result <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span>a.<span class=\"me1\">length</span><span class=\"sy0\">,</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> aux <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> T<span class=\"br0\">[</span>b.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">b</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> k<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">b</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>            aux<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> b<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">a</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>            result<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">dotProduct</span><span class=\"br0\">(</span>aux<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Unqual<span class=\"sy0\">!</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> transpose<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> r <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Unqual<span class=\"sy0\">!</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span>m<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">,</span> m.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> nr<span class=\"sy0\">,</span> row<span class=\"sy0\">;</span> m<span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> nc<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> c<span class=\"sy0\">;</span> row<span class=\"br0\">)</span><br/>            r<span class=\"br0\">[</span>nc<span class=\"br0\">]</span><span class=\"br0\">[</span>nr<span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>T norm<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> m<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> transversal<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span> a <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span>.<span class=\"me1\">sum</span>.<span class=\"me1\">sqrt</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Unqual<span class=\"sy0\">!</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> makeUnitVector<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> dim<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> result <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Unqual<span class=\"sy0\">!</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span>dim<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>row<span class=\"sy0\">;</span> result<span class=\"br0\">)</span><br/>        row<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    result<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">/// Return a nxn identity matrix.</span><br/>Unqual<span class=\"sy0\">!</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> matId<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> Id <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Unqual<span class=\"sy0\">!</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> r<span class=\"sy0\">,</span> row<span class=\"sy0\">;</span> Id<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        row<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        row<span class=\"br0\">[</span>r<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> Id<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> slice2D<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> A<span class=\"sy0\">,</span><br/>                 <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> ma<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> mb<span class=\"sy0\">,</span><br/>                 <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> na<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> nb<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> B <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span>mb <span class=\"sy0\">-</span> ma <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> nb <span class=\"sy0\">-</span> na <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> brow<span class=\"sy0\">;</span> B<span class=\"br0\">)</span><br/>        brow<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> A<span class=\"br0\">[</span>ma <span class=\"sy0\">+</span> i<span class=\"br0\">]</span><span class=\"br0\">[</span>na <span class=\"sy0\">..</span> <span class=\"me1\">na</span> <span class=\"sy0\">+</span> brow.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> B<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">size_t</span> rows<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> A<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> A.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">size_t</span> cols<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> A<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> A.<span class=\"me1\">length</span> <span class=\"sy0\">?</span> A<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> mcol<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> A<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> slice2D<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> A.<span class=\"me1\">rows</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> matEmbed<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> A<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> B<span class=\"sy0\">,</span><br/>                  <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> row<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> col<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> C <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span>rows<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy0\">,</span> cols<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> arow<span class=\"sy0\">;</span> A<span class=\"br0\">)</span><br/>        C<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> arow<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">// Some wasted copies.</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> brow<span class=\"sy0\">;</span> B<span class=\"br0\">)</span><br/>        C<span class=\"br0\">[</span>row <span class=\"sy0\">+</span> i<span class=\"br0\">]</span><span class=\"br0\">[</span>col <span class=\"sy0\">..</span> <span class=\"me1\">col</span> <span class=\"sy0\">+</span> brow.<span class=\"me1\">length</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> brow<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> C<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Main routines ---------------</span><br/>\u00a0<br/>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> makeHouseholder<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> m <span class=\"sy0\">=</span> a.<span class=\"me1\">rows</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> T s <span class=\"sy0\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">sgn</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> e <span class=\"sy0\">=</span> makeUnitVector<span class=\"sy0\">!</span>T<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> u <span class=\"sy0\">=</span> mSum<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> pMul<span class=\"br0\">(</span>e<span class=\"sy0\">,</span> a.<span class=\"me1\">norm</span> <span class=\"sy0\">*</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> v <span class=\"sy0\">=</span> pDiv<span class=\"br0\">(</span>u<span class=\"sy0\">,</span> u<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> beta <span class=\"sy0\">=</span> <span class=\"nu16\">2.0</span> <span class=\"sy0\">/</span> v.<span class=\"me1\">transpose</span>.<span class=\"me1\">matMul</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> mSub<span class=\"br0\">(</span>matId<span class=\"sy0\">!</span>T<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy0\">,</span> pMul<span class=\"br0\">(</span>v.<span class=\"me1\">matMul</span><span class=\"br0\">(</span>v.<span class=\"me1\">transpose</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> beta<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Tuple<span class=\"sy0\">!</span><span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\"Q\"</span><span class=\"sy0\">,</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\"R\"</span><span class=\"br0\">)</span> QRdecomposition<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> A<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> m <span class=\"sy0\">=</span> A.<span class=\"me1\">rows</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> n <span class=\"sy0\">=</span> A.<span class=\"me1\">cols</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> Q <span class=\"sy0\">=</span> matId<span class=\"sy0\">!</span>T<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Work on n columns of A.</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"br0\">(</span>m <span class=\"sy0\">==</span> n <span class=\"sy0\">?</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// Select the i-th submatrix. For i=0 this means the original</span><br/>        <span class=\"co1\">// matrix A.</span><br/>        <span class=\"kw4\">immutable</span> B <span class=\"sy0\">=</span> slice2D<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> m <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Take the first column of the current submatrix B.</span><br/>        <span class=\"kw4\">immutable</span> x <span class=\"sy0\">=</span> mcol<span class=\"br0\">(</span>B<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Create the Householder matrix for the column and embed it</span><br/>        <span class=\"co1\">// into an mxm identity.</span><br/>        <span class=\"kw4\">immutable</span> H <span class=\"sy0\">=</span> matEmbed<span class=\"br0\">(</span>matId<span class=\"sy0\">!</span>T<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy0\">,</span> x.<span class=\"me1\">makeHouseholder</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// The product of all H matrices from the right hand side is</span><br/>        <span class=\"co1\">// the orthogonal matrix Q.</span><br/>        Q <span class=\"sy0\">=</span> Q.<span class=\"me1\">matMul</span><span class=\"br0\">(</span>H<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// The product of all H matrices with A from the LHS is the</span><br/>        <span class=\"co1\">// upper triangular matrix R.</span><br/>        A  <span class=\"sy0\">=</span> H.<span class=\"me1\">matMul</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Return Q and R.</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">(</span>Q<span class=\"sy0\">,</span> A<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Polynomial regression ---------------</span><br/>\u00a0<br/><span class=\"co2\">/// Solve an upper triangular system by back substitution.</span><br/>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> solveUpperTriangular<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> R<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> b<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> n <span class=\"sy0\">=</span> R.<span class=\"me1\">cols</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> x <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach_reverse</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> k<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        T tot <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">;</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span><span class=\"br0\">)</span><br/>            tot <span class=\"sy0\">+=</span> R<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">*</span> x<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        x<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> tot<span class=\"br0\">)</span> <span class=\"sy0\">/</span> R<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> x<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">/// Solve a linear least squares problem by QR decomposition.</span><br/>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> lsqr<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> A<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> b<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> qr <span class=\"sy0\">=</span> A.<span class=\"me1\">QRdecomposition</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> n <span class=\"sy0\">=</span> qr.<span class=\"me1\">R</span>.<span class=\"me1\">cols</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> solveUpperTriangular<span class=\"br0\">(</span><br/>        slice2D<span class=\"br0\">(</span>qr.<span class=\"me1\">R</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        slice2D<span class=\"br0\">(</span>qr.<span class=\"me1\">Q</span>.<span class=\"me1\">transpose</span>.<span class=\"me1\">matMul</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> polyFit<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> x<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> y<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">size_t</span> m <span class=\"sy0\">=</span> x.<span class=\"me1\">cols</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> A <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> row<span class=\"sy0\">;</span> A<span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">,</span> <span class=\"kw2\">ref</span> item<span class=\"sy0\">;</span> row<span class=\"br0\">)</span><br/>            item <span class=\"sy0\">=</span> x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">^^</span> j<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> lsqr<span class=\"br0\">(</span>A<span class=\"sy0\">,</span> y.<span class=\"me1\">transpose</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// immutable (Q, R) = QRdecomposition([[12.0, -51,   4],</span><br/>    <span class=\"kw4\">immutable</span> qr <span class=\"sy0\">=</span> QRdecomposition<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu16\">12.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">51</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                                    <span class=\"br0\">[</span> <span class=\"nu16\">6.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">167</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">68</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                                    <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu16\">4.0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">41</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> form <span class=\"sy0\">=</span> <span class=\"st0\">\"[%([%(%2.3f,\u00a0%)]%|,<span class=\"es1\">\\n</span>\u00a0%)]<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span>form<span class=\"sy0\">,</span> qr.<span class=\"me1\">Q</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span>form<span class=\"sy0\">,</span> qr.<span class=\"me1\">R</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> x <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> y <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"sy0\">,</span> <span class=\"nu0\">57</span><span class=\"sy0\">,</span> <span class=\"nu0\">86</span><span class=\"sy0\">,</span> <span class=\"nu0\">121</span><span class=\"sy0\">,</span> <span class=\"nu0\">162</span><span class=\"sy0\">,</span> <span class=\"nu0\">209</span><span class=\"sy0\">,</span> <span class=\"nu0\">262</span><span class=\"sy0\">,</span> <span class=\"nu0\">321</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    polyFit<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Go", "loc": 107, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/>\u00a0<br/>    <span class=\"st0\">\"github.com/skelterjohn/go.matrix\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> sign<span class=\"sy1\">(</span>s <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> s &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> s &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> unitVector<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy3\">*</span>matrix<span class=\"sy3\">.</span>DenseMatrix <span class=\"sy1\">{</span><br/>    vec <span class=\"sy2\">:=</span> matrix<span class=\"sy3\">.</span>Zeros<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    vec<span class=\"sy3\">.</span>Set<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> vec<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> householder<span class=\"sy1\">(</span>a <span class=\"sy3\">*</span>matrix<span class=\"sy3\">.</span>DenseMatrix<span class=\"sy1\">)</span> <span class=\"sy3\">*</span>matrix<span class=\"sy3\">.</span>DenseMatrix <span class=\"sy1\">{</span><br/>    m <span class=\"sy2\">:=</span> a<span class=\"sy3\">.</span>Rows<span class=\"sy1\">()</span><br/>    s <span class=\"sy2\">:=</span> sign<span class=\"sy1\">(</span>a<span class=\"sy3\">.</span>Get<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">))</span><br/>    e <span class=\"sy2\">:=</span> unitVector<span class=\"sy1\">(</span>m<span class=\"sy1\">)</span><br/>    u <span class=\"sy2\">:=</span> matrix<span class=\"sy3\">.</span>Sum<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> matrix<span class=\"sy3\">.</span>Scaled<span class=\"sy1\">(</span>e<span class=\"sy1\">,</span> a<span class=\"sy3\">.</span>TwoNorm<span class=\"sy1\">()</span><span class=\"sy3\">*</span>s<span class=\"sy1\">))</span><br/>    v <span class=\"sy2\">:=</span> matrix<span class=\"sy3\">.</span>Scaled<span class=\"sy1\">(</span>u<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy3\">/</span>u<span class=\"sy3\">.</span>Get<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">))</span><br/>    <span class=\"co1\">// (error checking skipped in this solution)</span><br/>    prod<span class=\"sy1\">,</span> _ <span class=\"sy2\">:=</span> v<span class=\"sy3\">.</span>Transpose<span class=\"sy1\">()</span><span class=\"sy3\">.</span>TimesDense<span class=\"sy1\">(</span>v<span class=\"sy1\">)</span><br/>    \u03b2 <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span> <span class=\"sy3\">/</span> prod<span class=\"sy3\">.</span>Get<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>\u00a0<br/>    prod<span class=\"sy1\">,</span> _ <span class=\"sy2\">=</span> v<span class=\"sy3\">.</span>TimesDense<span class=\"sy1\">(</span>v<span class=\"sy3\">.</span>Transpose<span class=\"sy1\">())</span><br/>    <span class=\"kw1\">return</span> matrix<span class=\"sy3\">.</span>Difference<span class=\"sy1\">(</span>matrix<span class=\"sy3\">.</span>Eye<span class=\"sy1\">(</span>m<span class=\"sy1\">),</span> matrix<span class=\"sy3\">.</span>Scaled<span class=\"sy1\">(</span>prod<span class=\"sy1\">,</span> \u03b2<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> qr<span class=\"sy1\">(</span>a <span class=\"sy3\">*</span>matrix<span class=\"sy3\">.</span>DenseMatrix<span class=\"sy1\">)</span> <span class=\"sy1\">(</span>q<span class=\"sy1\">,</span> r <span class=\"sy3\">*</span>matrix<span class=\"sy3\">.</span>DenseMatrix<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    m <span class=\"sy2\">:=</span> a<span class=\"sy3\">.</span>Rows<span class=\"sy1\">()</span><br/>    n <span class=\"sy2\">:=</span> a<span class=\"sy3\">.</span>Cols<span class=\"sy1\">()</span><br/>    q <span class=\"sy2\">=</span> matrix<span class=\"sy3\">.</span>Eye<span class=\"sy1\">(</span>m<span class=\"sy1\">)</span><br/>\u00a0<br/>    last <span class=\"sy2\">:=</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> m <span class=\"sy3\">==</span> n <span class=\"sy1\">{</span><br/>        last<span class=\"sy2\">--</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> last<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// (copy is only for compatibility with an older version of gomatrix)</span><br/>        b <span class=\"sy2\">:=</span> a<span class=\"sy3\">.</span>GetMatrix<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> m<span class=\"sy3\">-</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> n<span class=\"sy3\">-</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><span class=\"sy3\">.</span>Copy<span class=\"sy1\">()</span><br/>        x <span class=\"sy2\">:=</span> b<span class=\"sy3\">.</span>GetColVector<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>        h <span class=\"sy2\">:=</span> matrix<span class=\"sy3\">.</span>Eye<span class=\"sy1\">(</span>m<span class=\"sy1\">)</span><br/>        h<span class=\"sy3\">.</span>SetMatrix<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> householder<span class=\"sy1\">(</span>x<span class=\"sy1\">))</span><br/>        q<span class=\"sy1\">,</span> _ <span class=\"sy2\">=</span> q<span class=\"sy3\">.</span>TimesDense<span class=\"sy1\">(</span>h<span class=\"sy1\">)</span><br/>        a<span class=\"sy1\">,</span> _ <span class=\"sy2\">=</span> h<span class=\"sy3\">.</span>TimesDense<span class=\"sy1\">(</span>a<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> q<span class=\"sy1\">,</span> a<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// task 1: show qr decomp of wp example</span><br/>    a <span class=\"sy2\">:=</span> matrix<span class=\"sy3\">.</span>MakeDenseMatrixStacked<span class=\"sy1\">([][]</span><span class=\"kw4\">float64</span><span class=\"sy1\">{</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">12</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">51</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">167</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">68</span><span class=\"sy1\">},</span><br/>        <span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">24</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">41</span><span class=\"sy1\">}})</span><br/>    q<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> qr<span class=\"sy1\">(</span>a<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"q:<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> q<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"r:<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> r<span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// task 2: use qr decomp for polynomial regression example</span><br/>    x <span class=\"sy2\">:=</span> matrix<span class=\"sy3\">.</span>MakeDenseMatrixStacked<span class=\"sy1\">([][]</span><span class=\"kw4\">float64</span><span class=\"sy1\">{</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">}})</span><br/>    y <span class=\"sy2\">:=</span> matrix<span class=\"sy3\">.</span>MakeDenseMatrixStacked<span class=\"sy1\">([][]</span><span class=\"kw4\">float64</span><span class=\"sy1\">{</span><br/>        <span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">17</span><span class=\"sy1\">,</span> <span class=\"nu0\">34</span><span class=\"sy1\">,</span> <span class=\"nu0\">57</span><span class=\"sy1\">,</span> <span class=\"nu0\">86</span><span class=\"sy1\">,</span> <span class=\"nu0\">121</span><span class=\"sy1\">,</span> <span class=\"nu0\">162</span><span class=\"sy1\">,</span> <span class=\"nu0\">209</span><span class=\"sy1\">,</span> <span class=\"nu0\">262</span><span class=\"sy1\">,</span> <span class=\"nu0\">321</span><span class=\"sy1\">}})</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>polyfit:<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> polyfit<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> polyfit<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y <span class=\"sy3\">*</span>matrix<span class=\"sy3\">.</span>DenseMatrix<span class=\"sy1\">,</span> n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy3\">*</span>matrix<span class=\"sy3\">.</span>DenseMatrix <span class=\"sy1\">{</span><br/>    m <span class=\"sy2\">:=</span> x<span class=\"sy3\">.</span>Cols<span class=\"sy1\">()</span><br/>    a <span class=\"sy2\">:=</span> matrix<span class=\"sy3\">.</span>Zeros<span class=\"sy1\">(</span>m<span class=\"sy1\">,</span> n<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; m<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> j &lt;<span class=\"sy2\">=</span> n<span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            a<span class=\"sy3\">.</span>Set<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j<span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>Pow<span class=\"sy1\">(</span>x<span class=\"sy3\">.</span>Get<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">),</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>j<span class=\"sy1\">)))</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> lsqr<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> y<span class=\"sy3\">.</span>Transpose<span class=\"sy1\">())</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> lsqr<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"sy3\">*</span>matrix<span class=\"sy3\">.</span>DenseMatrix<span class=\"sy1\">)</span> <span class=\"sy3\">*</span>matrix<span class=\"sy3\">.</span>DenseMatrix <span class=\"sy1\">{</span><br/>    q<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> qr<span class=\"sy1\">(</span>a<span class=\"sy1\">)</span><br/>    n <span class=\"sy2\">:=</span> r<span class=\"sy3\">.</span>Cols<span class=\"sy1\">()</span><br/>    prod<span class=\"sy1\">,</span> _ <span class=\"sy2\">:=</span> q<span class=\"sy3\">.</span>Transpose<span class=\"sy1\">()</span><span class=\"sy3\">.</span>TimesDense<span class=\"sy1\">(</span>b<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> solveUT<span class=\"sy1\">(</span>r<span class=\"sy3\">.</span>GetMatrix<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> n<span class=\"sy1\">),</span> prod<span class=\"sy3\">.</span>GetMatrix<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> solveUT<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> b <span class=\"sy3\">*</span>matrix<span class=\"sy3\">.</span>DenseMatrix<span class=\"sy1\">)</span> <span class=\"sy3\">*</span>matrix<span class=\"sy3\">.</span>DenseMatrix <span class=\"sy1\">{</span><br/>    n <span class=\"sy2\">:=</span> r<span class=\"sy3\">.</span>Cols<span class=\"sy1\">()</span><br/>    x <span class=\"sy2\">:=</span> matrix<span class=\"sy3\">.</span>Zeros<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> k <span class=\"sy2\">:=</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> k &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> k<span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>        sum <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> k <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> j &lt; n<span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            sum <span class=\"sy2\">+=</span> r<span class=\"sy3\">.</span>Get<span class=\"sy1\">(</span>k<span class=\"sy1\">,</span> j<span class=\"sy1\">)</span> <span class=\"sy3\">*</span> x<span class=\"sy3\">.</span>Get<span class=\"sy1\">(</span>j<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        x<span class=\"sy3\">.</span>Set<span class=\"sy1\">(</span>k<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"sy1\">(</span>b<span class=\"sy3\">.</span>Get<span class=\"sy1\">(</span>k<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span><span class=\"sy3\">-</span>sum<span class=\"sy1\">)</span><span class=\"sy3\">/</span>r<span class=\"sy3\">.</span>Get<span class=\"sy1\">(</span>k<span class=\"sy1\">,</span> k<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> x<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">   QR =: <span class=\"nu0\">128</span>!:<span class=\"nu0\">0</span></pre>"}, {"lang": "Java", "loc": 25, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">Jama.Matrix</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">Jama.QRDecomposition</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.StringWriter</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.PrintWriter</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Decompose <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Matrix matrix <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Matrix<span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"br0\">{</span> <span class=\"nu0\">12</span>, <span class=\"sy0\">-</span><span class=\"nu0\">51</span>,   <span class=\"nu0\">4</span> <span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span>  <span class=\"nu0\">6</span>, <span class=\"nu0\">167</span>, <span class=\"sy0\">-</span><span class=\"nu0\">68</span> <span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span>,  <span class=\"nu0\">24</span>, <span class=\"sy0\">-</span><span class=\"nu0\">41</span> <span class=\"br0\">}</span>,<br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        QRDecomposition d <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> QRDecomposition<span class=\"br0\">(</span>matrix<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>toString<span class=\"br0\">(</span>d.<span class=\"me1\">getQ</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>toString<span class=\"br0\">(</span>d.<span class=\"me1\">getR</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span>Matrix m<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astringwriter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">StringWriter</span></a> sw <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astringwriter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">StringWriter</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        m.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aprintwriter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">PrintWriter</span></a><span class=\"br0\">(</span>sw, <span class=\"kw2\">true</span><span class=\"br0\">)</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> sw.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">Q, R = qr([12 -51 4; 6 167 -68; -4 24 -41])</pre>"}, {"lang": "Maple", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>with(LinearAlgebra):<br/>\u00a0<br/>Q,R\u00a0:= QRDecomposition( evalf( &lt;&lt;12|-51|4&gt;,&lt;6|167|-68&gt;,&lt;-4|24|-41&gt;&gt;) ):<br/>\u00a0<br/>Q;<br/>R;<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 11, "block": "<pre class=\"text highlighted_source\">{q,r}=QRDecomposition[{{12, -51, 4}, {6, 167, -68}, {-4, 24, -41}}];<br/>q//MatrixForm<br/>\u00a0<br/>-&gt; 6/7 3/7 -(2/7)<br/>-69/175 158/175 6/35<br/>-58/175 6/175 -33/35<br/>\u00a0<br/>r//MatrixForm<br/>-&gt; 14 21 -14<br/>   0  175 -70<br/>   0  0  35</pre>"}, {"lang": "MATLAB / Octave", "loc": 4, "block": "<pre class=\"matlab highlighted_source\"> A = <span class=\"br0\">[</span><span class=\"nu0\">12</span> -<span class=\"nu0\">51</span>   <span class=\"nu0\">4</span> <br/>       <span class=\"nu0\">6</span> <span class=\"nu0\">167</span> -<span class=\"nu0\">68</span><br/>      -<span class=\"nu0\">4</span>  <span class=\"nu0\">24</span> -<span class=\"nu0\">41</span><span class=\"br0\">]</span>;<br/> <span class=\"br0\">[</span>Q,R<span class=\"br0\">]</span>=<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/qr.html\"><span class=\"kw2\">qr</span></a><span class=\"br0\">(</span>A<span class=\"br0\">)</span> </pre>"}, {"lang": "Maxima", "loc": 12, "block": "<pre class=\"text highlighted_source\">load(lapack)$   /* This may hang up in wxMaxima, if this happens, use xMaxima or plain MAxima in a terminal */<br/>\u00a0<br/>a: matrix([12, -51,   4],<br/>          [ 6, 167, -68],<br/>          [-4,  24, -41])$<br/>\u00a0<br/>[q, r]: dgeqrf(a)$<br/>\u00a0<br/>mat_norm(q . r - a, 1);<br/>4.2632564145606011E-14<br/>\u00a0<br/>/* Note: the lapack package is a lisp translation of the fortran lapack library */</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">matqr<span class=\"br0\">(</span>M<span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 45, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\">#!/usr/bin/env python3</span><br/>\u00a0<br/><span class=\"kw1\">import</span> numpy <span class=\"kw1\">as</span> np<br/>\u00a0<br/><span class=\"kw1\">def</span> qr<span class=\"br0\">(</span>A<span class=\"br0\">)</span>:<br/>    m<span class=\"sy0\">,</span> n <span class=\"sy0\">=</span> A.<span class=\"me1\">shape</span><br/>    Q <span class=\"sy0\">=</span> np.<span class=\"me1\">eye</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n - <span class=\"br0\">(</span>m <span class=\"sy0\">==</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>        H <span class=\"sy0\">=</span> np.<span class=\"me1\">eye</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>        H<span class=\"br0\">[</span>i:<span class=\"sy0\">,</span> i:<span class=\"br0\">]</span> <span class=\"sy0\">=</span> make_householder<span class=\"br0\">(</span>A<span class=\"br0\">[</span>i:<span class=\"sy0\">,</span> i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        Q <span class=\"sy0\">=</span> np.<span class=\"me1\">dot</span><span class=\"br0\">(</span>Q<span class=\"sy0\">,</span> H<span class=\"br0\">)</span><br/>        A <span class=\"sy0\">=</span> np.<span class=\"me1\">dot</span><span class=\"br0\">(</span>H<span class=\"sy0\">,</span> A<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> Q<span class=\"sy0\">,</span> A<br/>\u00a0<br/><span class=\"kw1\">def</span> make_householder<span class=\"br0\">(</span>a<span class=\"br0\">)</span>:<br/>    v <span class=\"sy0\">=</span> a / <span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> + np.<span class=\"me1\">copysign</span><span class=\"br0\">(</span>np.<span class=\"me1\">linalg</span>.<span class=\"me1\">norm</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    H <span class=\"sy0\">=</span> np.<span class=\"me1\">eye</span><span class=\"br0\">(</span>a.<span class=\"me1\">shape</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    H -<span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> / np.<span class=\"me1\">dot</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span> v<span class=\"br0\">)</span><span class=\"br0\">)</span> * np.<span class=\"me1\">dot</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span>:<span class=\"sy0\">,</span> <span class=\"kw2\">None</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> v<span class=\"br0\">[</span><span class=\"kw2\">None</span><span class=\"sy0\">,</span>\u00a0:<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> H<br/>\u00a0<br/><span class=\"co1\"># task 1: show qr decomp of wp example</span><br/>a <span class=\"sy0\">=</span> np.<span class=\"kw3\">array</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span> -<span class=\"nu0\">51</span><span class=\"sy0\">,</span>   <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">(</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">167</span><span class=\"sy0\">,</span> -<span class=\"nu0\">68</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">(</span>-<span class=\"nu0\">4</span><span class=\"sy0\">,</span>  <span class=\"nu0\">24</span><span class=\"sy0\">,</span> -<span class=\"nu0\">41</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>q<span class=\"sy0\">,</span> r <span class=\"sy0\">=</span> qr<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'q:<span class=\"es0\">\\n</span>'</span><span class=\"sy0\">,</span> q.<span class=\"kw2\">round</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'r:<span class=\"es0\">\\n</span>'</span><span class=\"sy0\">,</span> r.<span class=\"kw2\">round</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># task 2: use qr decomp for polynomial regression example</span><br/><span class=\"kw1\">def</span> polyfit<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> lsqr<span class=\"br0\">(</span>x<span class=\"br0\">[</span>:<span class=\"sy0\">,</span> <span class=\"kw2\">None</span><span class=\"br0\">]</span>**np.<span class=\"me1\">arange</span><span class=\"br0\">(</span>n + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> y.<span class=\"me1\">T</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> lsqr<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span>:<br/>    q<span class=\"sy0\">,</span> r <span class=\"sy0\">=</span> qr<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    _<span class=\"sy0\">,</span> n <span class=\"sy0\">=</span> r.<span class=\"me1\">shape</span><br/>    <span class=\"kw1\">return</span> np.<span class=\"me1\">linalg</span>.<span class=\"me1\">solve</span><span class=\"br0\">(</span>r<span class=\"br0\">[</span>:n<span class=\"sy0\">,</span>\u00a0:<span class=\"br0\">]</span><span class=\"sy0\">,</span> np.<span class=\"me1\">dot</span><span class=\"br0\">(</span>q.<span class=\"me1\">T</span><span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">[</span>:n<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>x <span class=\"sy0\">=</span> np.<span class=\"kw3\">array</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>y <span class=\"sy0\">=</span> np.<span class=\"kw3\">array</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"sy0\">,</span> <span class=\"nu0\">57</span><span class=\"sy0\">,</span> <span class=\"nu0\">86</span><span class=\"sy0\">,</span> <span class=\"nu0\">121</span><span class=\"sy0\">,</span> <span class=\"nu0\">162</span><span class=\"sy0\">,</span> <span class=\"nu0\">209</span><span class=\"sy0\">,</span> <span class=\"nu0\">262</span><span class=\"sy0\">,</span> <span class=\"nu0\">321</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>polyfit:<span class=\"es0\">\\n</span>'</span><span class=\"sy0\">,</span> polyfit<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 23, "block": "<pre class=\"text highlighted_source\"># R has QR decomposition built-in (using LAPACK or LINPACK)<br/>\u00a0<br/>a &lt;- matrix(c(12, -51, 4, 6, 167, -68, -4, 24, -41), nrow=3, ncol=3, byrow=T)<br/>d &lt;- qr(a)<br/>qr.Q(d)<br/>qr.R(d)<br/>\u00a0<br/># now fitting a polynomial<br/>x &lt;- 0:10<br/>y &lt;- 3*x^2 + 2*x + 1<br/>\u00a0<br/># using QR decomposition directly<br/>a &lt;- cbind(1, x, x^2)<br/>qr.coef(qr(a), y)<br/>\u00a0<br/># using least squares<br/>a &lt;- cbind(x, x^2)<br/>lsfit(a, y)$coefficients<br/>\u00a0<br/># using a linear model<br/>xx &lt;- x*x<br/>m &lt;- lm(y ~ x + xx)<br/>coef(m)</pre>"}, {"lang": "Racket", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt; (require math)<br/>&gt; (matrix-qr (matrix [[12 -51   4]<br/>                      [ 6 167 -68]<br/>                      [-4  24 -41]]))<br/>(array #[#[6/7 -69/175 -58/175] #[3/7 158/175 6/175] #[-2/7 6/35 -33/35]])<br/>(array #[#[14 21 -14] #[0 175 -70] #[0 0 35]])<br/>\u00a0</pre>"}, {"lang": "Rascal", "loc": 93, "block": "<pre class=\"text highlighted_source\">import util::Math;<br/>import Prelude;<br/>import vis::Figure;<br/>import vis::Render;<br/>\u00a0<br/>public rel[real,real,real] QRdecomposition(rel[real x, real y, real v] matrix){<br/>\t//orthogonalcolumns<br/>\toc = domainR(matrix, {0.0});<br/>\tfor (x &lt;- sort(toList(domain(matrix)-{0.0}))){<br/>\t\tc = domainR(matrix, {x});<br/>\t\to = domainR(oc, {x-1});<br/>\u00a0<br/>\t\tfor (n &lt;- [1.0 .. x]){<br/>\t\t\to = domainR(oc, {n-1});<br/>\t\t\tc = matrixSubtract(c, matrixMultiplybyN(o, matrixDotproduct(o, c)/matrixDotproduct(o, o)));<br/>\t\t\t}<br/>\u00a0<br/>\t\toc += c;<br/>\t}<br/>\u00a0<br/>\tQ = {};<br/>\t//from orthogonal to orthonormal columns<br/>\tfor (el &lt;- oc){<br/>\t\tc = domainR(oc, {el[0]});<br/>\t\tQ += matrixNormalize({el}, c);<br/>\t}<br/>\u00a0<br/>\t//from Q to R<br/>\tR= matrixMultiplication(matrixTranspose(Q), matrix);<br/>\tR= {&lt;x,y,toReal(round(v))&gt; | &lt;x,y,v&gt; &lt;- R};<br/>\u00a0<br/>\tprintln(\"Q:\");<br/>\tiprintlnExp(Q);<br/>\tprintln();<br/>\tprintln(\"R:\");<br/>\treturn R;<br/>}<br/>\u00a0<br/>//a function that takes the transpose of a matrix, see also Rosetta Code problem \"Matrix transposition\"<br/>public rel[real, real, real] matrixTranspose(rel[real x, real y, real v] matrix){<br/>\treturn {&lt;y, x, v&gt; | &lt;x, y, v&gt; &lt;- matrix};<br/>}<br/>\u00a0<br/>//a function to normalize an element of a matrix by the normalization of a column<br/>public rel[real,real,real] matrixNormalize(rel[real x, real y, real v] element, rel[real x, real y, real v] column){<br/>\tnormalized = 1.0/nroot((0.0 | it + v*v | &lt;x,y,v&gt; &lt;- column), 2);<br/>\treturn matrixMultiplybyN(element, normalized);<br/>}<br/>\u00a0<br/>//a function that takes the dot product, see also Rosetta Code problem \"Dot product\"<br/>public real matrixDotproduct(rel[real x, real y, real v] column1, rel[real x, real y, real v] column2){<br/>\treturn (0.0 | it + v1*v2 | &lt;x1,y1,v1&gt; &lt;- column1, &lt;x2,y2,v2&gt; &lt;- column2, y1==y2);<br/>}<br/>\u00a0<br/>//a function to subtract two columns<br/>public rel[real,real,real] matrixSubtract(rel[real x, real y, real v] column1, rel[real x, real y, real v] column2){<br/>\treturn {&lt;x1,y1,v1-v2&gt; | &lt;x1,y1,v1&gt; &lt;- column1, &lt;x2,y2,v2&gt; &lt;- column2, y1==y2};<br/>}<br/>\u00a0<br/>//a function to multiply a column by a number<br/>public rel[real,real,real] matrixMultiplybyN(rel[real x, real y, real v] column, real n){<br/>\treturn {&lt;x,y,v*n&gt; | &lt;x,y,v&gt; &lt;- column};<br/>}<br/>\u00a0<br/>//a function to perform matrix multiplication, see also Rosetta Code problem \"Matrix multiplication\".<br/>public rel[real, real, real] matrixMultiplication(rel[real x, real y, real v] matrix1, rel[real x, real y, real v] matrix2){<br/>\tif (max(matrix1.x) == max(matrix2.y)){<br/>\t\tp = {&lt;x1,y1,x2,y2, v1*v2&gt; | &lt;x1,y1,v1&gt; &lt;- matrix1, &lt;x2,y2,v2&gt; &lt;- matrix2};<br/>\u00a0<br/>\t\tresult = {};<br/>\t\tfor (y &lt;- matrix1.y){<br/>\t\t\tfor (x &lt;- matrix2.x){<br/>\t\t\t\tv = (0.0 | it + v | &lt;x1, y1, x2, y2, v&gt; &lt;- p,  x==x2 &amp;&amp; y==y1, x1==y2 &amp;&amp; y2==x1);<br/>\t\t\t\tresult += &lt;x,y,v&gt;;<br/>\t\t\t}<br/>\t\t}<br/>\t\treturn result;<br/>\t}<br/>\telse throw \"Matrix sizes do not match.\";<br/>} \t<br/>\u00a0<br/>// a function to visualize the result<br/>public void displayMatrix(rel[real x, real y, real v] matrix){<br/>\tpoints = [box(text(\"&lt;v&gt;\"), align(0.3333*(x+1),0.3333*(y+1)),shrink(0.25)) | &lt;x,y,v&gt; &lt;- matrix];<br/>\trender(overlay([*points], aspectRatio(1.0)));<br/>}<br/>\u00a0<br/>//a matrix, given by a relation of &lt;x-coordinate, y-coordinate, value&gt;.<br/>public rel[real x, real y, real v] matrixA = {<br/>&lt;0.0,0.0,12.0&gt;, &lt;0.0,1.0, 6.0&gt;, &lt;0.0,2.0,-4.0&gt;, <br/>&lt;1.0,0.0,-51.0&gt;, &lt;1.0,1.0,167.0&gt;, &lt;1.0,2.0,24.0&gt;, <br/>&lt;2.0,0.0,4.0&gt;, &lt;2.0,1.0,-68.0&gt;, &lt;2.0,2.0,-41.0&gt;<br/>};</pre>"}, {"lang": "SAS", "loc": 31, "block": "<pre class=\"sas highlighted_source\"><span class=\"coMULTI\">/* See http://support.sas.com/documentation/cdl/en/imlug/63541/HTML/default/viewer.htm#imlug_langref_sect229.htm */</span><br/>\u00a0<br/><span class=\"re1\">proc iml</span>;<br/>a=<span class=\"br0\">{</span><span class=\"nu0\">12</span> -<span class=\"nu0\">51</span> <span class=\"nu0\">4</span>,<span class=\"nu0\">6</span> <span class=\"nu0\">167</span> -<span class=\"nu0\">68</span>,-<span class=\"nu0\">4</span> <span class=\"nu0\">24</span> -<span class=\"nu0\">41</span><span class=\"br0\">}</span>;<br/>print<span class=\"br0\">(</span>a<span class=\"br0\">)</span>;<br/><span class=\"kw4\">call</span> qr<span class=\"br0\">(</span>q,r,p,d,a<span class=\"br0\">)</span>;<br/>print<span class=\"br0\">(</span>q<span class=\"br0\">)</span>;<br/>print<span class=\"br0\">(</span>r<span class=\"br0\">)</span>;<br/><span class=\"kw6\">quit</span>;<br/>\u00a0<br/><span class=\"coMULTI\">/*<br/>                  a<br/>\u00a0<br/>           12       -51         4<br/>            6       167       -68<br/>           -4        24       -41<br/>\u00a0<br/>\u00a0<br/>                  q<br/>\u00a0<br/>    -0.857143 0.3942857 -0.331429<br/>    -0.428571 -0.902857 0.0342857<br/>    0.2857143 -0.171429 -0.942857<br/>\u00a0<br/>\u00a0<br/>                  r<br/>\u00a0<br/>          -14       -21        14<br/>            0      -175        70<br/>            0         0        35<br/>*/</span></pre>"}, {"lang": "Scala", "loc": 22, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"br0\">{</span>PrintWriter, StringWriter<span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> Jama.<span class=\"br0\">{</span>Matrix, QRDecomposition<span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> QRDecomposition <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> matrix <span class=\"sy0\">=</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Matrix<span class=\"br0\">(</span><br/>      Array<span class=\"br0\">[</span>Array<span class=\"br0\">[</span>Double<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">(</span>Array<span class=\"br0\">(</span><span class=\"nu0\">12</span>, -<span class=\"nu0\">51</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span>,<br/>        Array<span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"nu0\">167</span>, -<span class=\"nu0\">68</span><span class=\"br0\">)</span>,<br/>        Array<span class=\"br0\">(</span>-<span class=\"nu0\">4</span>, <span class=\"nu0\">24</span>, -<span class=\"nu0\">41</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> QRDecomposition<span class=\"br0\">(</span>matrix<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString<span class=\"br0\">(</span>m<span class=\"sy0\">:</span> Matrix<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sw <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> StringWriter<br/>    m.<span class=\"me1\">print</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> PrintWriter<span class=\"br0\">(</span>sw, <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>    sw.<span class=\"me1\">toString</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  print<span class=\"br0\">(</span>toString<span class=\"br0\">(</span>d.<span class=\"me1\">getQ</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  print<span class=\"br0\">(</span>toString<span class=\"br0\">(</span>d.<span class=\"me1\">getR</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "SequenceL", "loc": 89, "block": "<pre class=\"text highlighted_source\">import &lt;Utilities/Math.sl&gt;;<br/>import &lt;Utilities/Sequence.sl&gt;;<br/>import &lt;Utilities/Conversion.sl&gt;;<br/>\u00a0<br/>main\u00a0:=<br/>    let<br/>        qrTest\u00a0:= [[12.0, -51.0,   4.0],<br/>                   [ 6.0, 167.0, -68.0],<br/>                   [-4.0,  24.0, -41.0]];<br/>\u00a0<br/>        qrResult\u00a0:= qr(qrTest);<br/>\u00a0<br/>        x\u00a0:= 1.0*(0 ... 10);<br/>        y\u00a0:= 1.0*[1, 6, 17, 34, 57, 86, 121, 162, 209, 262, 321];<br/>\u00a0<br/>        regResult\u00a0:= polyfit(x, y, 2);<br/>    in<br/>        \"q:\\n\" ++ delimit(delimit(floatToString(qrResult[1], 6), ','), '\\n') ++ \"\\n\\n\" ++ <br/>        \"r:\\n\" ++ delimit(delimit(floatToString(qrResult[2], 1), ','), '\\n') ++ \"\\n\\n\" ++<br/>        \"polyfit:\\n\" ++ \"[\" ++ delimit(floatToString(regResult, 1), ',') ++ \"]\";<br/>\u00a0<br/>//---Polynomial Regression---<br/>\u00a0<br/>polyfit(x(1), y(1), n)\u00a0:=<br/>    let<br/>        a[j]\u00a0:= x ^ j foreach j within 0 ... n;<br/>    in  <br/>        lsqr(transpose(a), transpose([y]));<br/>\u00a0<br/>lsqr(a(2), b(2))\u00a0:=<br/>    let<br/>        qrDecomp\u00a0:= qr(a);<br/>        prod\u00a0:= mm(transpose(qrDecomp[1]), b);<br/>    in<br/>        solveUT(qrDecomp[2], prod);<br/>\u00a0<br/>solveUT(r(2), b(2))\u00a0:= <br/>    let <br/>        n\u00a0:= size(r[1]);<br/>    in<br/>        solveUTHelper(r, b, n, duplicate(0.0, n)); <br/>\u00a0<br/>solveUTHelper(r(2), b(2), k, x(1))\u00a0:=<br/>    let<br/>        n\u00a0:= size(r[1]);<br/>        newX\u00a0:=  setElementAt(x, k, (b[k][1] - sum(r[k][(k+1) ... n] * x[(k+1) ... n])) / r[k][k]);<br/>    in<br/>        x when k &lt;= 0<br/>    else<br/>        solveUTHelper(r, b, k - 1, newX);<br/>\u00a0<br/>//---QR Decomposition---<br/>\u00a0<br/>qr(A(2))\u00a0:= qrHelper(A, id(size(A)), 1);<br/>\u00a0<br/>qrHelper(A(2), Q(2), i)\u00a0:=<br/>    let<br/>        m\u00a0:= size(A);<br/>        n\u00a0:= size(A[1]);<br/>\u00a0<br/>        householder\u00a0:= makeHouseholder(A[i ... m, i]);<br/>\u00a0<br/>        H[j,k]\u00a0:= <br/>                householder[j - i + 1][k - i + 1] when j &gt;= i and k &gt;= i <br/>            else<br/>                1.0 when j = k else 0.0<br/>            foreach j within 1 ... m,<br/>                    k within 1 ... m;<br/>    in<br/>        [Q,A] when i &gt; (n - 1 when m = n else n)<br/>    else<br/>        qrHelper(mm(H, A), mm(Q, H), i + 1);<br/>\u00a0<br/>\u00a0<br/>makeHouseholder(a(1))\u00a0:= <br/>    let<br/>        v\u00a0:= [1.0] ++ tail(a / (a[1] + sqrt(sum(a ^ 2)) * sign(a[1])));<br/>\u00a0<br/>        H\u00a0:= id(size(a)) - (2.0 / mm([v], transpose([v])))[1,1] * mm(transpose([v]), [v]);<br/>    in<br/>        H;<br/>\u00a0<br/>//---Utilities---<br/>\u00a0<br/>id(n)[i,j]\u00a0:= 1.0 when i = j else 0.0<br/>              foreach i within 1 ... n,<br/>                      j within 1 ... n;<br/>\u00a0<br/>mm(A(2), B(2))[i,j]\u00a0:= sum( A[i] * transpose(B)[j] );</pre>"}, {"lang": "SPAD", "loc": 26, "block": "<pre class=\"text highlighted_source\">mata<br/>: qrd(a=(12,-51,4\\6,167,-68\\-4,24,-41),q=.,r=.)<br/>\u00a0<br/>: a<br/>         1     2     3<br/>    +-------------------+<br/>  1 |   12   -51     4  |<br/>  2 |    6   167   -68  |<br/>  3 |   -4    24   -41  |<br/>    +-------------------+<br/>\u00a0<br/>: q<br/>                  1              2              3<br/>    +----------------------------------------------+<br/>  1 |  -.8571428571    .3942857143    .3314285714  |<br/>  2 |  -.4285714286   -.9028571429   -.0342857143  |<br/>  3 |   .2857142857   -.1714285714    .9428571429  |<br/>    +----------------------------------------------+<br/>\u00a0<br/>: r<br/>          1      2      3<br/>    +----------------------+<br/>  1 |   -14    -21     14  |<br/>  2 |     0   -175     70  |<br/>  3 |     0      0    -35  |<br/>    +----------------------+</pre>"}, {"lang": "Stata", "loc": 26, "block": "<pre class=\"text highlighted_source\">mata<br/>: qrd(a=(12,-51,4\\6,167,-68\\-4,24,-41),q=.,r=.)<br/>\u00a0<br/>: a<br/>         1     2     3<br/>    +-------------------+<br/>  1 |   12   -51     4  |<br/>  2 |    6   167   -68  |<br/>  3 |   -4    24   -41  |<br/>    +-------------------+<br/>\u00a0<br/>: q<br/>                  1              2              3<br/>    +----------------------------------------------+<br/>  1 |  -.8571428571    .3942857143    .3314285714  |<br/>  2 |  -.4285714286   -.9028571429   -.0342857143  |<br/>  3 |   .2857142857   -.1714285714    .9428571429  |<br/>    +----------------------------------------------+<br/>\u00a0<br/>: r<br/>          1      2      3<br/>    +----------------------+<br/>  1 |   -14    -21     14  |<br/>  2 |     0   -175     70  |<br/>  3 |     0      0    -35  |<br/>    +----------------------+</pre>"}, {"lang": "Tcl", "loc": 58, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw1\">namespace</span> path <span class=\"br0\">{</span>::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathfunc</span>\u00a0::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathop</span><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> sign x <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> == <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span>\u00a0: <span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> -<span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> norm vec <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> s <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">foreach</span> x <span class=\"re0\">$vec</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> s <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$s</span> + <span class=\"re0\">$x</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>sqrt <span class=\"re0\">$s</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> unitvec n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> v <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$n</span> <span class=\"nu0\">0.0</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">lset</span> v <span class=\"nu0\">0</span> <span class=\"nu0\">1.0</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$v</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> I n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> m <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$n</span> <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$n</span> <span class=\"nu0\">0.0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lset</span> m <span class=\"re0\">$i</span> <span class=\"re0\">$i</span> <span class=\"nu0\">1.0</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$m</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> arrayEmbed <span class=\"br0\">{</span>A B row col<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># $A will be copied automatically; Tcl values are copy-on-write</span><br/>    lassign <span class=\"br0\">[</span>size <span class=\"re0\">$B</span><span class=\"br0\">]</span> mb nb<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$mb</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$nb</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lset</span> A <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$row</span> + <span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$col</span> + <span class=\"re0\">$j</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$B</span> <span class=\"re0\">$i</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$A</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Unlike the Common Lisp version, here we use a specialist subcolumn</span><br/><span class=\"co1\"># extraction function: like that, there's a lot less intermediate memory allocation</span><br/><span class=\"co1\"># and the code is actually clearer.</span><br/><span class=\"kw1\">proc</span> subcolumn <span class=\"br0\">{</span>A size column<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"re0\">$column</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$size</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> x <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$A</span> <span class=\"re0\">$i</span> <span class=\"re0\">$column</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$x</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> householder A <span class=\"br0\">{</span><br/>    lassign <span class=\"br0\">[</span>size <span class=\"re0\">$A</span><span class=\"br0\">]</span> m<br/>    <span class=\"kw1\">set</span> U <span class=\"br0\">[</span>m+ <span class=\"re0\">$A</span> <span class=\"br0\">[</span>.<span class=\"sy0\">*</span> <span class=\"br0\">[</span>unitvec <span class=\"re0\">$m</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>norm <span class=\"re0\">$A</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">[</span>sign <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$A</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> V <span class=\"br0\">[</span>./ <span class=\"re0\">$U</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$U</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> beta <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">2.0</span> / <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"br0\">[</span>matrix_multiply <span class=\"br0\">[</span>transpose <span class=\"re0\">$V</span><span class=\"br0\">]</span> <span class=\"re0\">$V</span><span class=\"br0\">]</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>m- <span class=\"br0\">[</span>I <span class=\"re0\">$m</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>.<span class=\"sy0\">*</span> <span class=\"br0\">[</span>matrix_multiply <span class=\"re0\">$V</span> <span class=\"br0\">[</span>transpose <span class=\"re0\">$V</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"re0\">$beta</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> qrDecompose A <span class=\"br0\">{</span><br/>    lassign <span class=\"br0\">[</span>size <span class=\"re0\">$A</span><span class=\"br0\">]</span> m n<br/>    <span class=\"kw1\">set</span> Q <span class=\"br0\">[</span>I <span class=\"re0\">$m</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span><span class=\"re0\">$m</span>==<span class=\"re0\">$n</span> <span class=\"sy0\">?</span> <span class=\"re0\">$n</span>-<span class=\"nu0\">1</span>\u00a0: <span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># Construct the Householder matrix</span><br/>\t<span class=\"kw1\">set</span> H <span class=\"br0\">[</span>arrayEmbed <span class=\"br0\">[</span>I <span class=\"re0\">$m</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>householder <span class=\"br0\">[</span>subcolumn <span class=\"re0\">$A</span> <span class=\"re0\">$n</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"re0\">$i</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>\t<span class=\"co1\"># Apply to build the decomposition</span><br/>\t<span class=\"kw1\">set</span> Q <span class=\"br0\">[</span>matrix_multiply <span class=\"re0\">$Q</span> <span class=\"re0\">$H</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> A <span class=\"br0\">[</span>matrix_multiply <span class=\"re0\">$H</span> <span class=\"re0\">$A</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$Q</span> <span class=\"re0\">$A</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 8, "block": "<pre class=\"text highlighted_source\">var [const] GSL=Import(\"zklGSL\");\t// libGSL (GNU Scientific Library)<br/>A:=GSL.Matrix(3,3).set(12.0, -51.0,   4.0,<br/>\t\t\t6.0, 167.0, -68.0,<br/>\t\t\t4.0,  24.0, -41.0);<br/>Q,R:=A.QRDecomp();<br/>println(\"Q:\\n\",Q.format());<br/>println(\"R:\\n\",R.format());<br/>println(\"Q*R:\\n\",(Q*R).format());</pre>"}]}