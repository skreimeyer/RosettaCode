{"task": "Playing_cards", "blocks": [{"lang": "ACL2", "loc": 53, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> remove-<span class=\"kw1\">nth</span> <span class=\"br0\">(</span>i xs<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>zp i<span class=\"br0\">)</span> <span class=\"br0\">(</span>endp <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>first xs<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>remove-<span class=\"kw1\">nth</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- i<span class=\"br0\">)</span> <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defthm remove-nth-shortens<br/>   <span class=\"br0\">(</span>implies <span class=\"br0\">(</span><span class=\"kw1\">consp</span> xs<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>len <span class=\"br0\">(</span>remove-<span class=\"kw1\">nth</span> i xs<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>len xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">:</span><span class=\"me1\">set-state-ok</span> t<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> shuffle-r <span class=\"br0\">(</span>xs ys state<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>xargs <span class=\"sy0\">:</span><span class=\"me1\">measure</span> <span class=\"br0\">(</span>len xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp xs<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>mv ys state<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>mv-<span class=\"kw1\">let</span> <span class=\"br0\">(</span>idx state<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">random</span>$ <span class=\"br0\">(</span>len xs<span class=\"br0\">)</span> state<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>shuffle-r <span class=\"br0\">(</span>remove-<span class=\"kw1\">nth</span> idx xs<span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">nth</span> idx xs<span class=\"br0\">)</span> ys<span class=\"br0\">)</span><br/>                     state<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> shuffle <span class=\"br0\">(</span>xs state<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>shuffle-r xs <span class=\"kw1\">nil</span> state<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> cross-r <span class=\"br0\">(</span>x ys<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp ys<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> x <span class=\"br0\">(</span>first ys<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>cross-r x <span class=\"br0\">(</span>rest ys<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> cross <span class=\"br0\">(</span>xs ys<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>endp xs<span class=\"br0\">)</span> <span class=\"br0\">(</span>endp ys<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span>cross-r <span class=\"br0\">(</span>first xs<span class=\"br0\">)</span> ys<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>cross <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span> ys<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> make-deck <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>cross '<span class=\"br0\">(</span>ace <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> jack queen king<span class=\"br0\">)</span><br/>          '<span class=\"br0\">(</span>hearts diamonds clubs spades<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-card <span class=\"br0\">(</span>card<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>cw <span class=\"st0\">\"~x0 of ~x1~%\"</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> card<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> card<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-deck <span class=\"br0\">(</span>deck<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp deck<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">progn</span>$ <span class=\"br0\">(</span>print-card <span class=\"br0\">(</span>first deck<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>print-deck <span class=\"br0\">(</span>rest deck<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> draw-from-deck <span class=\"br0\">(</span>deck<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>mv <span class=\"br0\">(</span>first deck<span class=\"br0\">)</span> <span class=\"br0\">(</span>rest deck<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Ada", "loc": 75, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> CARD <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw3\">STRING</span> pip<span class=\"sy1\">,</span> suit<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># instance attributes #</span><br/>\u00a0<br/><span class=\"coMULTI\"># class members &amp; attributes #</span><br/><span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><br/>  <span class=\"kw4\">PROC</span><span class=\"br0\">(</span><span class=\"kw4\">REF</span> CARD<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span><span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span><span class=\"br0\">)</span><span class=\"kw3\">VOID</span> init<span class=\"sy1\">,</span> <br/>  <span class=\"kw6\">FORMAT</span> format<span class=\"sy1\">,</span><br/>  <span class=\"kw4\">PROC</span><span class=\"br0\">(</span><span class=\"kw4\">REF</span> CARD<span class=\"br0\">)</span><span class=\"kw3\">STRING</span> repr<span class=\"sy1\">,</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> suits<span class=\"sy1\">,</span> pips<br/><span class=\"br0\">)</span> class card <span class=\"sy1\">=</span> <span class=\"br0\">(</span><br/><span class=\"coMULTI\"># PROC init = #</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> CARD self<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> pip<span class=\"sy1\">,</span> suit<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    pip <span class=\"kw6\">OF</span> self<span class=\"sy1\">:=</span>pip<span class=\"sy1\">;</span><br/>    suit <span class=\"kw6\">OF</span> self <span class=\"sy1\">:=</span>suit<br/>  <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/><span class=\"coMULTI\"># format = #</span> $<span class=\"st0\">\"(\"</span>g<span class=\"st0\">\" OF \"</span>g<span class=\"st0\">\")\"</span>$<span class=\"sy1\">,</span><br/><span class=\"coMULTI\"># PROC repr = #</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> CARD self<span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span> <br/>    <span class=\"kw4\">HEAP</span> <span class=\"kw3\">STRING</span> out<span class=\"sy1\">;</span> <span class=\"kw22\">putf</span><span class=\"br0\">(</span>BOOK out<span class=\"sy1\">,</span><span class=\"br0\">(</span>format <span class=\"kw6\">OF</span> class card<span class=\"sy1\">,</span>self<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> out<br/>  <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/><span class=\"coMULTI\"># suits = #</span> <span class=\"br0\">(</span><span class=\"st0\">\"Clubs\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"Hearts\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"Spades\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"Diamonds\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/><span class=\"coMULTI\"># pips = #</span> <span class=\"br0\">(</span><span class=\"st0\">\"2\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"3\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"4\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"5\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"6\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"7\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"8\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"9\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"10\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"Jack\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"Queen\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"King\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"Ace\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> DECK <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw4\">REF</span><span class=\"br0\">[</span><span class=\"br0\">]</span>CARD deck<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># instance attributes #</span><br/>\u00a0<br/><span class=\"coMULTI\"># class members &amp; attributes #</span><br/><span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <br/>  <span class=\"kw4\">PROC</span><span class=\"br0\">(</span><span class=\"kw4\">REF</span> DECK<span class=\"br0\">)</span><span class=\"kw3\">VOID</span> init<span class=\"sy1\">,</span> shuffle<span class=\"sy1\">,</span> <br/>  <span class=\"kw4\">PROC</span><span class=\"br0\">(</span><span class=\"kw4\">REF</span> DECK<span class=\"br0\">)</span><span class=\"kw3\">STRING</span> repr<span class=\"sy1\">,</span> <br/>  <span class=\"kw4\">PROC</span><span class=\"br0\">(</span><span class=\"kw4\">REF</span> DECK<span class=\"br0\">)</span>CARD deal<br/><span class=\"br0\">)</span> class deck <span class=\"sy1\">=</span> <span class=\"br0\">(</span><br/>\u00a0<br/><span class=\"coMULTI\"># PROC init = #</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> DECK self<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    <span class=\"kw4\">HEAP</span><span class=\"br0\">[</span> <span class=\"kw8\">UPB</span> suits <span class=\"kw6\">OF</span> class card <span class=\"sy1\">*</span> <span class=\"kw8\">UPB</span> pips <span class=\"kw6\">OF</span> class card <span class=\"br0\">]</span>CARD new<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> suit <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> suits <span class=\"kw6\">OF</span> class card <span class=\"kw2\">DO</span><br/>      <span class=\"kw2\">FOR</span> pip <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> pips <span class=\"kw6\">OF</span> class card <span class=\"kw2\">DO</span><br/>        new<span class=\"br0\">[</span><span class=\"br0\">(</span>suit<span class=\"sy1\">-</span>1<span class=\"br0\">)</span><span class=\"sy1\">*</span><span class=\"kw8\">UPB</span> pips <span class=\"kw6\">OF</span> class card <span class=\"sy1\">+</span> pip<span class=\"br0\">]</span> <span class=\"sy1\">:=</span><br/>           <span class=\"br0\">(</span><span class=\"br0\">(</span>pips <span class=\"kw6\">OF</span> class card<span class=\"br0\">)</span><span class=\"br0\">[</span>pip<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span>suits <span class=\"kw6\">OF</span> class card<span class=\"br0\">)</span><span class=\"br0\">[</span>suit<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">OD</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    deck <span class=\"kw6\">OF</span> self <span class=\"sy1\">:=</span> new<br/>  <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\u00a0<br/><span class=\"coMULTI\"># PROC shuffle = #</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> DECK self<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">FOR</span> card <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> deck <span class=\"kw6\">OF</span> self <span class=\"kw2\">DO</span><br/>      CARD this card <span class=\"sy1\">=</span> <span class=\"br0\">(</span>deck <span class=\"kw6\">OF</span> self<span class=\"br0\">)</span><span class=\"br0\">[</span>card<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">INT</span> random card <span class=\"sy1\">=</span> random int<span class=\"br0\">(</span><span class=\"kw8\">LWB</span> deck <span class=\"kw6\">OF</span> self<span class=\"sy1\">,</span><span class=\"kw8\">UPB</span> deck <span class=\"kw6\">OF</span> self<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"br0\">(</span>deck <span class=\"kw6\">OF</span> self<span class=\"br0\">)</span><span class=\"br0\">[</span>card<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>deck <span class=\"kw6\">OF</span> self<span class=\"br0\">)</span><span class=\"br0\">[</span>random card<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      <span class=\"br0\">(</span>deck <span class=\"kw6\">OF</span> self<span class=\"br0\">)</span><span class=\"br0\">[</span>random card<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> this card<br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">,</span><br/>\u00a0<br/><span class=\"coMULTI\"># PROC repr = #</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> DECK self<span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    <span class=\"kw6\">FORMAT</span> format <span class=\"sy1\">=</span> $<span class=\"st0\">\"(\"</span>n<span class=\"br0\">(</span><span class=\"kw8\">UPB</span> deck <span class=\"kw6\">OF</span> self<span class=\"sy1\">-</span>1<span class=\"br0\">)</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span>format <span class=\"kw6\">OF</span> class card<span class=\"br0\">)</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span>f<span class=\"br0\">(</span>format <span class=\"kw6\">OF</span> class card<span class=\"br0\">)</span><span class=\"st0\">\")\"</span>$<span class=\"sy1\">;</span><br/>    <span class=\"kw4\">HEAP</span> <span class=\"kw3\">STRING</span> out<span class=\"sy1\">;</span> <span class=\"kw22\">putf</span><span class=\"br0\">(</span>BOOK out<span class=\"sy1\">,</span><span class=\"br0\">(</span>format<span class=\"sy1\">,</span> deck <span class=\"kw6\">OF</span> self<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> out<br/>  <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\u00a0<br/><span class=\"coMULTI\"># PROC deal = #</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> DECK self<span class=\"br0\">)</span>CARD<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    <span class=\"br0\">(</span>shuffle <span class=\"kw6\">OF</span> class deck<span class=\"br0\">)</span><span class=\"br0\">(</span>self<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">(</span>deck <span class=\"kw6\">OF</span> self<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"kw8\">UPB</span> deck <span class=\"kw6\">OF</span> self<span class=\"br0\">]</span><br/>  <span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># associate a STRING with a FILE for easy text manipulation #</span><br/><span class=\"kw4\">OP</span> BOOK <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span> string<span class=\"br0\">)</span><span class=\"kw4\">REF</span> <span class=\"kw6\">FILE</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw4\">HEAP</span> <span class=\"kw6\">FILE</span> book<span class=\"sy1\">;</span><br/>  <span class=\"kw22\">associate</span><span class=\"br0\">(</span>book<span class=\"sy1\">,</span> string<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  book<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># Pick a random integer between from [lwb..upb] #</span><br/><span class=\"kw4\">PROC</span> random int <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> lwb<span class=\"sy1\">,</span> upb<span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <br/>  <span class=\"kw8\">ENTIER</span><span class=\"br0\">(</span>random <span class=\"sy1\">*</span> <span class=\"br0\">(</span>upb <span class=\"sy1\">-</span> lwb <span class=\"sy1\">+</span> 1<span class=\"br0\">)</span> <span class=\"sy1\">+</span> lwb<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>DECK deck<span class=\"sy1\">;</span><br/><span class=\"br0\">(</span>init <span class=\"kw6\">OF</span> class deck<span class=\"br0\">)</span><span class=\"br0\">(</span>deck<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"br0\">(</span>shuffle <span class=\"kw6\">OF</span> class deck<span class=\"br0\">)</span><span class=\"br0\">(</span>deck<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>repr <span class=\"kw6\">OF</span> class deck<span class=\"br0\">)</span><span class=\"br0\">(</span>deck<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL 68", "loc": 75, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> CARD <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw3\">STRING</span> pip<span class=\"sy1\">,</span> suit<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># instance attributes #</span><br/>\u00a0<br/><span class=\"coMULTI\"># class members &amp; attributes #</span><br/><span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><br/>  <span class=\"kw4\">PROC</span><span class=\"br0\">(</span><span class=\"kw4\">REF</span> CARD<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span><span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span><span class=\"br0\">)</span><span class=\"kw3\">VOID</span> init<span class=\"sy1\">,</span> <br/>  <span class=\"kw6\">FORMAT</span> format<span class=\"sy1\">,</span><br/>  <span class=\"kw4\">PROC</span><span class=\"br0\">(</span><span class=\"kw4\">REF</span> CARD<span class=\"br0\">)</span><span class=\"kw3\">STRING</span> repr<span class=\"sy1\">,</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> suits<span class=\"sy1\">,</span> pips<br/><span class=\"br0\">)</span> class card <span class=\"sy1\">=</span> <span class=\"br0\">(</span><br/><span class=\"coMULTI\"># PROC init = #</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> CARD self<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> pip<span class=\"sy1\">,</span> suit<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    pip <span class=\"kw6\">OF</span> self<span class=\"sy1\">:=</span>pip<span class=\"sy1\">;</span><br/>    suit <span class=\"kw6\">OF</span> self <span class=\"sy1\">:=</span>suit<br/>  <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/><span class=\"coMULTI\"># format = #</span> $<span class=\"st0\">\"(\"</span>g<span class=\"st0\">\" OF \"</span>g<span class=\"st0\">\")\"</span>$<span class=\"sy1\">,</span><br/><span class=\"coMULTI\"># PROC repr = #</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> CARD self<span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span> <br/>    <span class=\"kw4\">HEAP</span> <span class=\"kw3\">STRING</span> out<span class=\"sy1\">;</span> <span class=\"kw22\">putf</span><span class=\"br0\">(</span>BOOK out<span class=\"sy1\">,</span><span class=\"br0\">(</span>format <span class=\"kw6\">OF</span> class card<span class=\"sy1\">,</span>self<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> out<br/>  <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/><span class=\"coMULTI\"># suits = #</span> <span class=\"br0\">(</span><span class=\"st0\">\"Clubs\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"Hearts\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"Spades\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"Diamonds\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/><span class=\"coMULTI\"># pips = #</span> <span class=\"br0\">(</span><span class=\"st0\">\"2\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"3\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"4\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"5\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"6\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"7\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"8\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"9\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"10\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"Jack\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"Queen\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"King\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"Ace\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> DECK <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw4\">REF</span><span class=\"br0\">[</span><span class=\"br0\">]</span>CARD deck<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># instance attributes #</span><br/>\u00a0<br/><span class=\"coMULTI\"># class members &amp; attributes #</span><br/><span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <br/>  <span class=\"kw4\">PROC</span><span class=\"br0\">(</span><span class=\"kw4\">REF</span> DECK<span class=\"br0\">)</span><span class=\"kw3\">VOID</span> init<span class=\"sy1\">,</span> shuffle<span class=\"sy1\">,</span> <br/>  <span class=\"kw4\">PROC</span><span class=\"br0\">(</span><span class=\"kw4\">REF</span> DECK<span class=\"br0\">)</span><span class=\"kw3\">STRING</span> repr<span class=\"sy1\">,</span> <br/>  <span class=\"kw4\">PROC</span><span class=\"br0\">(</span><span class=\"kw4\">REF</span> DECK<span class=\"br0\">)</span>CARD deal<br/><span class=\"br0\">)</span> class deck <span class=\"sy1\">=</span> <span class=\"br0\">(</span><br/>\u00a0<br/><span class=\"coMULTI\"># PROC init = #</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> DECK self<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    <span class=\"kw4\">HEAP</span><span class=\"br0\">[</span> <span class=\"kw8\">UPB</span> suits <span class=\"kw6\">OF</span> class card <span class=\"sy1\">*</span> <span class=\"kw8\">UPB</span> pips <span class=\"kw6\">OF</span> class card <span class=\"br0\">]</span>CARD new<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> suit <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> suits <span class=\"kw6\">OF</span> class card <span class=\"kw2\">DO</span><br/>      <span class=\"kw2\">FOR</span> pip <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> pips <span class=\"kw6\">OF</span> class card <span class=\"kw2\">DO</span><br/>        new<span class=\"br0\">[</span><span class=\"br0\">(</span>suit<span class=\"sy1\">-</span>1<span class=\"br0\">)</span><span class=\"sy1\">*</span><span class=\"kw8\">UPB</span> pips <span class=\"kw6\">OF</span> class card <span class=\"sy1\">+</span> pip<span class=\"br0\">]</span> <span class=\"sy1\">:=</span><br/>           <span class=\"br0\">(</span><span class=\"br0\">(</span>pips <span class=\"kw6\">OF</span> class card<span class=\"br0\">)</span><span class=\"br0\">[</span>pip<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span>suits <span class=\"kw6\">OF</span> class card<span class=\"br0\">)</span><span class=\"br0\">[</span>suit<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">OD</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    deck <span class=\"kw6\">OF</span> self <span class=\"sy1\">:=</span> new<br/>  <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\u00a0<br/><span class=\"coMULTI\"># PROC shuffle = #</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> DECK self<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">FOR</span> card <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> deck <span class=\"kw6\">OF</span> self <span class=\"kw2\">DO</span><br/>      CARD this card <span class=\"sy1\">=</span> <span class=\"br0\">(</span>deck <span class=\"kw6\">OF</span> self<span class=\"br0\">)</span><span class=\"br0\">[</span>card<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">INT</span> random card <span class=\"sy1\">=</span> random int<span class=\"br0\">(</span><span class=\"kw8\">LWB</span> deck <span class=\"kw6\">OF</span> self<span class=\"sy1\">,</span><span class=\"kw8\">UPB</span> deck <span class=\"kw6\">OF</span> self<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"br0\">(</span>deck <span class=\"kw6\">OF</span> self<span class=\"br0\">)</span><span class=\"br0\">[</span>card<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>deck <span class=\"kw6\">OF</span> self<span class=\"br0\">)</span><span class=\"br0\">[</span>random card<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      <span class=\"br0\">(</span>deck <span class=\"kw6\">OF</span> self<span class=\"br0\">)</span><span class=\"br0\">[</span>random card<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> this card<br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">,</span><br/>\u00a0<br/><span class=\"coMULTI\"># PROC repr = #</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> DECK self<span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    <span class=\"kw6\">FORMAT</span> format <span class=\"sy1\">=</span> $<span class=\"st0\">\"(\"</span>n<span class=\"br0\">(</span><span class=\"kw8\">UPB</span> deck <span class=\"kw6\">OF</span> self<span class=\"sy1\">-</span>1<span class=\"br0\">)</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span>format <span class=\"kw6\">OF</span> class card<span class=\"br0\">)</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span>f<span class=\"br0\">(</span>format <span class=\"kw6\">OF</span> class card<span class=\"br0\">)</span><span class=\"st0\">\")\"</span>$<span class=\"sy1\">;</span><br/>    <span class=\"kw4\">HEAP</span> <span class=\"kw3\">STRING</span> out<span class=\"sy1\">;</span> <span class=\"kw22\">putf</span><span class=\"br0\">(</span>BOOK out<span class=\"sy1\">,</span><span class=\"br0\">(</span>format<span class=\"sy1\">,</span> deck <span class=\"kw6\">OF</span> self<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> out<br/>  <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\u00a0<br/><span class=\"coMULTI\"># PROC deal = #</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> DECK self<span class=\"br0\">)</span>CARD<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    <span class=\"br0\">(</span>shuffle <span class=\"kw6\">OF</span> class deck<span class=\"br0\">)</span><span class=\"br0\">(</span>self<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">(</span>deck <span class=\"kw6\">OF</span> self<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"kw8\">UPB</span> deck <span class=\"kw6\">OF</span> self<span class=\"br0\">]</span><br/>  <span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># associate a STRING with a FILE for easy text manipulation #</span><br/><span class=\"kw4\">OP</span> BOOK <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span> string<span class=\"br0\">)</span><span class=\"kw4\">REF</span> <span class=\"kw6\">FILE</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw4\">HEAP</span> <span class=\"kw6\">FILE</span> book<span class=\"sy1\">;</span><br/>  <span class=\"kw22\">associate</span><span class=\"br0\">(</span>book<span class=\"sy1\">,</span> string<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  book<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># Pick a random integer between from [lwb..upb] #</span><br/><span class=\"kw4\">PROC</span> random int <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> lwb<span class=\"sy1\">,</span> upb<span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <br/>  <span class=\"kw8\">ENTIER</span><span class=\"br0\">(</span>random <span class=\"sy1\">*</span> <span class=\"br0\">(</span>upb <span class=\"sy1\">-</span> lwb <span class=\"sy1\">+</span> 1<span class=\"br0\">)</span> <span class=\"sy1\">+</span> lwb<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>DECK deck<span class=\"sy1\">;</span><br/><span class=\"br0\">(</span>init <span class=\"kw6\">OF</span> class deck<span class=\"br0\">)</span><span class=\"br0\">(</span>deck<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"br0\">(</span>shuffle <span class=\"kw6\">OF</span> class deck<span class=\"br0\">)</span><span class=\"br0\">(</span>deck<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>repr <span class=\"kw6\">OF</span> class deck<span class=\"br0\">)</span><span class=\"br0\">(</span>deck<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ATS", "loc": 442, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(* ****** ****** *)<br/>//<br/>#include<br/>\"share/atspre_staload.hats\"<br/>#include<br/>\"share/HATS/atspre_staload_libats_ML.hats\"<br/>//<br/>(* ****** ****** *)<br/>//<br/><a class=\"__cf_email__\" data-cfemail=\"610003121521181104\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>pip_type = int<br/><a class=\"__cf_email__\" data-cfemail=\"2647445552665f5643\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>suit_type = int<br/>//<br/><a class=\"__cf_email__\" data-cfemail=\"b1d0d3c2c5f1c8c1d4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>card_type = int<br/>//<br/>(* ****** ****** *)<br/>\u00a0<br/>typedef pip = pip_type<br/>typedef suit = suit_type<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>typedef card = card_type<br/>\u00a0<br/>(* ****** ****** *)<br/>//<br/>extern<br/>fun<br/>pip_make: natLt(13) -&gt; pip<br/>extern<br/>fun<br/>pip_get_name: pip -&gt; string<br/>extern<br/>fun<br/>pip_get_value: pip -&gt; intBtwe(1, 13)<br/>//<br/>extern<br/>fun<br/>suit_make: natLt(4) -&gt; suit<br/>extern<br/>fun<br/>suit_get_name: suit -&gt; string<br/>extern<br/>fun<br/>suit_get_value: suit -&gt; intBtwe(1, 4)<br/>//<br/>overload .name with pip_get_name<br/>overload .name with suit_get_name<br/>overload .value with pip_get_value<br/>overload .value with suit_get_value<br/>//<br/>(* ****** ****** *)<br/>//<br/>(*<br/>  | Two | Three | Four | Five<br/>  | Six | Seven | Eight | Nine<br/>  | Ten | Jack | Queen | King | Ace <br/>*)<br/>//<br/>(*<br/>  | Spade | Heart | Diamond | Club<br/>*)<br/>//<br/>(* ****** ****** *)<br/>\u00a0<br/>local<br/>\u00a0<br/>assume<br/>pip_type = natLt(13)<br/>\u00a0<br/>in (* in-of-local *)<br/>\u00a0<br/>implement<br/>pip_make(x) = x<br/>implement<br/>pip_get_value(x) = x + 1<br/>\u00a0<br/>end // end of [local]<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>local<br/>\u00a0<br/>assume<br/>suit_type = natLt(4)<br/>\u00a0<br/>in (* in-of-local *)<br/>\u00a0<br/>implement<br/>suit_make(x) = x<br/>implement<br/>suit_get_value(x) = x + 1<br/>\u00a0<br/>end // end of [local]<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>pip_get_name<br/>  (x) =<br/>(<br/>case+<br/>x.value()<br/>of // case+<br/>| 1 =&gt; \"Ace\"<br/>| 2 =&gt; \"Two\"<br/>| 3 =&gt; \"Three\"<br/>| 4 =&gt; \"Four\"<br/>| 5 =&gt; \"Five\"<br/>| 6 =&gt; \"Six\"<br/>| 7 =&gt; \"Seven\"<br/>| 8 =&gt; \"Eight\"<br/>| 9 =&gt; \"Nine\"<br/>| 10 =&gt; \"Ten\"<br/>| 11 =&gt; \"Jack\"<br/>| 12 =&gt; \"Queen\"<br/>| 13 =&gt; \"King\"<br/>)<br/>\u00a0<br/>(* ****** ****** *)<br/>//<br/>implement<br/>suit_get_name<br/>  (x) =<br/>(<br/>case+<br/>x.value()<br/>of // case+<br/>| 1 =&gt; \"S\" | 2 =&gt; \"H\" | 3 =&gt; \"D\" | 4 =&gt; \"C\"<br/>) (* end of [suit_get_name] *)<br/>//<br/>(* ****** ****** *)<br/>//<br/>extern<br/>fun<br/>card_get_pip: card -&gt; pip<br/>extern<br/>fun<br/>card_get_suit: card -&gt; suit<br/>//<br/>extern<br/>fun<br/>card_make: natLt(52) -&gt; card<br/>extern<br/>fun<br/>card_make_suit_pip: (suit, pip) -&gt; card<br/>//<br/>(* ****** ****** *)<br/>\u00a0<br/>extern<br/>fun<br/>fprint_pip\u00a0: fprint_type(pip)<br/>extern<br/>fun<br/>fprint_suit\u00a0: fprint_type(suit)<br/>extern<br/>fun<br/>fprint_card\u00a0: fprint_type(card)<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>overload .pip with card_get_pip<br/>overload .suit with card_get_suit<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>fprint_val&lt;card&gt; = fprint_card<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>overload fprint with fprint_pip<br/>overload fprint with fprint_suit<br/>overload fprint with fprint_card<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>local<br/>\u00a0<br/>assume<br/>card_type = natLt(52)<br/>\u00a0<br/>in (* in-of-local *)<br/>//<br/>implement<br/>card_get_pip<br/>  (x) = pip_make(nmod(x, 13))<br/>implement<br/>card_get_suit<br/>  (x) = suit_make(ndiv(x, 13))<br/>//<br/>implement<br/>card_make(xy) = xy<br/>//<br/>implement<br/>card_make_suit_pip(x, y) =<br/>  (x.value()-1) * 13 + (y.value()-1)<br/>//<br/>end // end of [local]<br/>\u00a0<br/>(* ****** ****** *)<br/>//<br/>implement<br/>fprint_pip(out, x) =<br/>  fprint!(out, x.name())<br/>implement<br/>fprint_suit(out, x) =<br/>  fprint!(out, x.name())<br/>//<br/>implement<br/>fprint_card(out, c) =<br/>  fprint!(out, c.suit(), \"(\", c.pip(), \")\")<br/>//<br/>(* ****** ****** *)<br/>//<br/>absvtype<br/>deck_vtype(n:int) = ptr<br/>//<br/>vtypedef deck(n:int) = deck_vtype(n)<br/>//<br/>(* ****** ****** *)<br/>//<br/>extern<br/>fun<br/>deck_get_size<br/>  {n:nat}(!deck(n)): int(n)<br/>//<br/>extern<br/>fun<br/>deck_is_empty<br/>  {n:nat}(!deck(n)): bool(n==0)<br/>//<br/>overload iseqz with deck_is_empty<br/>//<br/>(* ****** ****** *)<br/>//<br/>extern<br/>fun<br/>deck_free{n:int}(deck(n)): void<br/>//<br/>overload .free with deck_free<br/>//<br/>(* ****** ****** *)<br/>//<br/>extern<br/>fun<br/>deck_make_full((*void*)): deck(52)<br/>//<br/>(* ****** ****** *)<br/>//<br/>extern<br/>fun<br/>fprint_deck<br/>  {n:nat}(FILEref,\u00a0!deck(n)): void<br/>//<br/>overload fprint with fprint_deck<br/>//<br/>(* ****** ****** *)<br/>//<br/>extern<br/>fun<br/>deck_shuffle<br/>  {n:nat}(!deck(n) &gt;&gt; _): void<br/>//<br/>overload .shuffle with deck_shuffle<br/>//<br/>(* ****** ****** *)<br/>//<br/>extern<br/>fun<br/>deck_takeout_top<br/>  {n:pos}(!deck(n) &gt;&gt; deck(n-1)): card<br/>//<br/>(* ****** ****** *)<br/>\u00a0<br/>local<br/>//<br/>datavtype<br/>deck(int) =<br/>| {n:nat}<br/>  Deck(n) of<br/>  (<br/>    int(n)<br/>  , list_vt(card, n)<br/>  ) // end of [Deck]<br/>//<br/>assume<br/>deck_vtype(n:int) = deck(n)<br/>//<br/>in (* in-of-local *)<br/>\u00a0<br/>implement<br/>deck_get_size<br/>  (deck) =<br/>(<br/>let val+Deck(n, _) = deck in n end<br/>)<br/>\u00a0<br/>implement<br/>deck_is_empty<br/>  (deck) =<br/>(<br/>let val+Deck(n, _) = deck in n = 0 end<br/>)<br/>\u00a0<br/>(* ****** ****** *)<br/>//<br/>implement<br/>deck_free(deck) =<br/>(<br/>let val+~Deck(n, xs) = deck in free(xs) end<br/>) (* end of [deck_free] *)<br/>//<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>deck_make_full<br/>  ((*void*)) = let<br/>//<br/>val xys =<br/>list_make_intrange(0, 52)<br/>//<br/>val cards =<br/>list_vt_mapfree_fun&lt;natLt(52)&gt;&lt;card&gt;(xys, lam xy =&gt; card_make(xy))<br/>//<br/>in<br/>  Deck(52, cards)  <br/>end // end of [deck_make_full]<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>fprint_deck<br/>  (out, deck) = let<br/>//<br/>val+Deck(n, xs) = deck<br/>//<br/>in<br/>//<br/>fprint_list_vt(out, xs)<br/>//<br/>end // end of [fprint_deck]<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>deck_shuffle<br/>  (deck) =<br/>  <a class=\"__cf_email__\" data-cfemail=\"0660696a6246\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(deck) where<br/>{<br/>//<br/><a class=\"__cf_email__\" data-cfemail=\"e99f8885c2a9ad8c8a82\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(n, xs) = deck<br/>//<br/>implement<br/>list_vt_permute$randint&lt;&gt;<br/>  (n) = randint(n)<br/>//<br/>val ((*void*)) =<br/>  (xs\u00a0:= list_vt_permute(xs))<br/>//<br/>} (* end of [deck_shuffle] *)<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>deck_takeout_top<br/>  (deck) = let<br/>//<br/><a class=\"__cf_email__\" data-cfemail=\"4335222f680307262028\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(n, xs) = deck<br/>//<br/>val+<br/>~list_vt_cons(x0, xs_tl) = xs<br/>//<br/>val ((*void*)) = n\u00a0:= n - 1<br/>val ((*void*)) = (xs\u00a0:= xs_tl)<br/>//<br/>in<br/>  <a class=\"__cf_email__\" data-cfemail=\"7711181b1337\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(deck); x0(*top*)<br/>end // end of [deck_takeout_top]<br/>\u00a0<br/>end // end of [local]<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>main0((*void*)) =<br/>{<br/>//<br/>val () =<br/>println!<br/>(<br/>\"Hello from [Playing_cards]!\"<br/>) (* println! *)<br/>//<br/>val out = stdout_ref<br/>//<br/>val theDeck =<br/>  deck_make_full((*void*))<br/>//<br/>val ((*void*)) =<br/>  fprintln!(out, \"theDeck = \", theDeck)<br/>//<br/>val ((*void*)) =<br/>  theDeck.shuffle((*void*))<br/>//<br/>val ((*void*)) =<br/>  fprintln!(out, \"theDeck = \", theDeck)<br/>//<br/>val ((*void*)) =<br/>  loop_deal(theDeck) where<br/>{<br/>//<br/>fun<br/>loop_deal{n:nat}<br/>(<br/>  deck:\u00a0!deck(n) &gt;&gt; deck(0)<br/>)\u00a0: void =<br/>(<br/>  if (<br/>  iseqz(deck)<br/>  ) then ((*void*))<br/>    else<br/>      let<br/>        val card =<br/>        deck_takeout_top(deck)<br/>      in<br/>        fprintln!(out, card); loop_deal(deck)<br/>      end // end of [let]<br/>    // end of [else]<br/>)<br/>//<br/>} (* end of [val] *)<br/>//<br/>val ((*freed*)) = theDeck.free()<br/>//<br/>} (* end of [main0] *)<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 84, "block": "<pre class=\"autohotkey highlighted_source\">suits <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"\u2660\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\u2666\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\u2665\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\u2663\"</span><span class=\"br0\">]</span><br/>values <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"st0\">\"J\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Q\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"K\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"A\"</span><span class=\"br0\">]</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Font\"><span class=\"kw7\">font</span></a><span class=\"sy0\">,</span> s14<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">button</span></a><span class=\"sy0\">,</span> w190 gNewDeck<span class=\"sy0\">,</span> New Deck<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">button</span></a><span class=\"sy0\">,</span> x<span class=\"sy0\">+</span><span class=\"nu0\">10</span> wp gShuffle<span class=\"sy0\">,</span> Shuffle<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Button\"><span class=\"kw8\">button</span></a><span class=\"sy0\">,</span> x<span class=\"sy0\">+</span><span class=\"nu0\">10</span> wp gDeal<span class=\"sy0\">,</span> Deal<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">text</span></a><span class=\"sy0\">,</span> xs w600 <span class=\"sy0\">,</span> Current <span class=\"re2\">Deck:<br/></span><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Edit\"><span class=\"kw8\">Edit</span></a><span class=\"sy0\">,</span> xs wp r4 vDeck<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">text</span></a><span class=\"sy0\">,</span> xs <span class=\"sy0\">,</span> <span class=\"re2\">Hands:<br/></span><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Edit\"><span class=\"kw8\">Edit</span></a><span class=\"sy0\">,</span> x<span class=\"sy0\">+</span><span class=\"nu0\">10</span> w60  vHands gHands<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#UpDown\"><span class=\"kw8\">UpDown</span></a><span class=\"sy0\">,,</span> <span class=\"nu0\">1</span><br/>Edits <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"re2\">Hands:<br/></span><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Submit\"><span class=\"kw7\">Submit</span></a><span class=\"sy0\">,</span> NoHide<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% Edits<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span>Hide<span class=\"sy0\">,</span> Hand<span class=\"re0\">%A_Index%</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% Hands<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"Hand\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% Hands <span class=\"sy0\">-</span> Edits<br/><span class=\"br0\">{</span><br/>\tEdits<span class=\"sy0\">++</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#ListBox\"><span class=\"kw8\">ListBox</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"x\"</span> <span class=\"br0\">(</span>Edits<span class=\"sy0\">=</span><span class=\"nu0\">1</span>?<span class=\"st0\">\"s\"</span>:<span class=\"st0\">\"+10\"</span><span class=\"br0\">)</span> <span class=\"st0\">\" w60 r13 vHand\"</span> Edits<br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">show</span></a><span class=\"sy0\">,</span> AutoSize<br/><span class=\"kw1\">return</span><br/><span class=\"co1\">;-----------------------------------------------</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiClose\"><span class=\"kw7\">GuiClose</span></a>:<br/><a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/><span class=\"kw1\">return</span><br/><span class=\"co1\">;-----------------------------------------------</span><br/><span class=\"re2\">NewDeck:<br/></span>cards <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> deck <span class=\"sy0\">:=</span> Dealt<span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% Hands<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Hand<span class=\"re0\">%A_Index%</span><span class=\"sy0\">,</span> |<br/>\u00a0<br/>for each<span class=\"sy0\">,</span> suit in suits<br/>\tfor each<span class=\"sy0\">,</span> value in values<br/>\t\tcards<span class=\"sy0\">.</span><span class=\"kw6\">Insert</span><span class=\"br0\">(</span>value suit<span class=\"br0\">)</span><br/>\u00a0<br/>for each<span class=\"sy0\">,</span> card in cards<br/>\tdeck <span class=\"sy0\">.=</span> card <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span>\u00a0? <span class=\"st0\">\" \"</span>\u00a0: <span class=\"st0\">\"`n\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Deck<span class=\"sy0\">,</span>\u00a0% deck<br/><a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Dealt<br/><a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> Enable<span class=\"sy0\">,</span> Button2<br/><a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> Enable<span class=\"sy0\">,</span> Hands<br/><span class=\"kw1\">return</span><br/><span class=\"co1\">;-----------------------------------------------</span><br/><span class=\"re2\">shuffle:<br/></span><a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">gosub</span></a><span class=\"sy0\">,</span> NewDeck<br/>shuffled <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> deck <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">52</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> rnd<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>\u00a0% cards<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\tshuffled<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> cards<span class=\"sy0\">.</span>RemoveAt<span class=\"br0\">(</span>rnd<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>for each<span class=\"sy0\">,</span> card in shuffled<br/><span class=\"br0\">{</span><br/>\tdeck <span class=\"sy0\">.=</span> card <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span>\u00a0? <span class=\"st0\">\" \"</span>\u00a0: <span class=\"st0\">\"`n\"</span><span class=\"br0\">)</span>\t<br/>\tcards<span class=\"sy0\">.</span><span class=\"kw6\">Insert</span><span class=\"br0\">(</span>card<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Deck<span class=\"sy0\">,</span>\u00a0% deck<br/><span class=\"kw1\">return</span><br/><span class=\"co1\">;-----------------------------------------------</span><br/><span class=\"re2\">Deal:<br/></span><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Submit\"><span class=\"kw7\">Submit</span></a><span class=\"sy0\">,</span> NoHide<br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span> Hands <span class=\"sy0\">&gt;</span> cards<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span><br/>\u00a0<br/>deck <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% Hands<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Hand<span class=\"re0\">%A_Index%</span><span class=\"sy0\">,</span>\u00a0% cards<span class=\"sy0\">.</span>RemoveAt<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> Disable<span class=\"sy0\">,</span> Button2<br/><a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,</span> Disable<span class=\"sy0\">,</span> Hands<br/><a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Dealt<span class=\"sy0\">,</span>\u00a0% Dealt<br/>\u00a0<br/>for each<span class=\"sy0\">,</span> card in cards<br/>\tdeck <span class=\"sy0\">.=</span> card <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span>\u00a0? <span class=\"st0\">\" \"</span>\u00a0: <span class=\"st0\">\"`n\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/GuiControl.htm\"><span class=\"kw3\">GuiControl</span></a><span class=\"sy0\">,,</span> Deck<span class=\"sy0\">,</span>\u00a0% deck<br/><span class=\"kw1\">return</span><br/><span class=\"co1\">;-----------------------------------------------</span></pre>"}, {"lang": "AutoIt", "loc": 53, "block": "<pre class=\"autoit highlighted_source\">\u00a0<br/><span class=\"kw6\">#Region</span> <span class=\"co0\">;**** Directives created by AutoIt3Wrapper_GUI ****</span><br/><span class=\"kw6\">#AutoIt3Wrapper_Change2CUI</span><span class=\"sy0\">=</span>y<br/><span class=\"kw6\">#EndRegion</span> <span class=\"co0\">;**** Directives created by AutoIt3Wrapper_GUI ****</span><br/><span class=\"kw5\">#include</span><span class=\"co1\"> &lt;Array.au3&gt;</span><br/>\u00a0<br/><span class=\"co0\">; ## GLOBALS ##</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Global</span></a> <span class=\"re0\">$SUIT</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"D\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"H\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"S\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"C\"</span><span class=\"br0\">]</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Global</span></a> <span class=\"re0\">$FACE</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"st0\">\"J\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Q\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"K\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"A\"</span><span class=\"br0\">]</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Global</span></a> <span class=\"re0\">$DECK</span><span class=\"br0\">[</span><span class=\"nu0\">52</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co0\">; ## CREATES A NEW DECK</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> NewDeck<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"nu0\">3</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"nu0\">12</span><br/>\t\t\t<span class=\"kw4\">_ArrayPush</span><span class=\"br0\">(</span><span class=\"re0\">$DECK</span><span class=\"sy0\">,</span> <span class=\"re0\">$FACE</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> <span class=\"re0\">$SUIT</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a>   <span class=\"co0\">;==&gt;NewDeck</span><br/>\u00a0<br/><span class=\"co0\">; ## SHUFFLE DECK</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> Shuffle<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t_ArrayShuffle<span class=\"br0\">(</span><span class=\"re0\">$DECK</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a>   <span class=\"co0\">;==&gt;Shuffle</span><br/>\u00a0<br/><span class=\"co0\">; ## DEAL A CARD</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> Deal<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"kw4\">_ArrayPop</span><span class=\"br0\">(</span><span class=\"re0\">$DECK</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a>   <span class=\"co0\">;==&gt;Deal</span><br/>\u00a0<br/><span class=\"co0\">; ## PRINT DECK</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> Print<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><span class=\"kw4\">_ArrayToString</span><span class=\"br0\">(</span><span class=\"re0\">$DECK</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a>   <span class=\"co0\">;==&gt;Print</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw6\">#Region</span> <span class=\"co0\">;#### USAGE ####</span><br/>NewDeck<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>Print<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>Shuffle<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>Print<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><span class=\"st0\">\"DEALT: \"</span> <span class=\"sy0\">&amp;</span> Deal<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"br0\">)</span><br/>Print<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw6\">#EndRegion</span> <span class=\"co0\">;#### USAGE ####</span><br/>\u00a0</pre>"}, {"lang": "Batch File", "loc": 101, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>@echo off<br/>setlocal enabledelayedexpansion<br/>\u00a0<br/>call:newdeck deck <br/>echo new deck:<br/>echo.<br/>call:showcards deck <br/>echo.<br/>echo shuffling:<br/>echo.<br/>call:shuffle deck <br/>call:showcards deck <br/>echo.<br/>echo dealing 5 cards to 4 players<br/>call:deal deck 5 hand1 hand2 hand3 hand4<br/>echo.<br/>echo player 1 &amp; call:showcards hand1 <br/>echo.<br/>echo player 2 &amp; call:showcards hand2<br/>echo.<br/>echo player 3 &amp; call:showcards hand3<br/>echo.<br/>echo player 4 &amp; call:showcards hand4<br/>echo.<br/>call:count\u00a0%deck% cnt<br/>echo\u00a0%cnt% cards remaining in the deck <br/>echo.<br/> call:showcards deck<br/>echo.<br/>\u00a0<br/>exit /b<br/>\u00a0<br/>:getcard deck hand \u00a0:: deals 1 card to a player<br/>   set \"loc1=!%~1!\"<br/>   set \"%~2=!%~2!!loc1:~0,3!\"<br/>   set \"%~1=!loc1:~3!\"<br/>exit /b<br/>\u00a0<br/>:deal deck n player1 player2...up to 7 <br/> set \"loc=!%~1!\" <br/> set \"cards=%~2\"<br/> set players=%3\u00a0%4\u00a0%5\u00a0%6\u00a0%7\u00a0%8\u00a0%9 <br/> for /L\u00a0%%j in (1,1,!cards!) do (<br/>     for\u00a0%%k in (!players!) do call:getcard loc\u00a0%%k)<br/> set \"%~1=!loc!\" <br/> exit /b<br/>\u00a0<br/>:newdeck  [deck]  \u00a0::creates a deck of cards <br/>\u00a0:: in the parentheses below there are ascii chars 3,4,5 and 6 representing the suits<br/> for\u00a0%%i in ( \u2660 \u2666 \u2665 \u2663 ) do ( <br/>   for\u00a0%%j in (20 31 42 53 64 75 86 97 T8 J9 QA KB AC) do set loc=!loc!%%i%%j<br/>   )<br/> set \"%~1=!loc!\"<br/>exit /b <br/>\u00a0<br/>:showcards  [deck] \u00a0:: prints a deck or a hand<br/> set \"loc=!%~1!\" <br/>  for /L\u00a0%%j in (0,39,117) do ( <br/>     set s= <br/>     for /L\u00a0%%i in (0,3,36) do ( <br/>        set /a n=%%i+%%j<br/>        call set  s=%%s%%\u00a0%%loc:~!n!,2%% <br/>      ) <br/>  if \"!s: =!\" neq \"\" echo(!s!<br/>  set /a n+=1<br/>  if \"%loc:~!n!,!%\" equ \"\" goto endloop<br/>  )<br/>\u00a0:endloop<br/> exit /b<br/>\u00a0<br/>:count deck count<br/>set \"loc1=%1\"<br/>set /a cnt1=0<br/>for\u00a0%%i in (96 48 24 12 6 3 ) do if \"!loc1:~%%i,1!\" neq \"\" set /a cnt1+=%%i &amp; set loc1=!loc1:~%%i!<br/>set /a cnt1=cnt1/3+1<br/>set \"%~2=!cnt1!\"<br/>exit /b<br/>\u00a0<br/>:shuffle (deck)  \u00a0:: shuffles a deck<br/> set \"loc=!%~1!\"<br/> call:count\u00a0%loc%, cnt<br/> set /a cnt-=1<br/> for /L\u00a0%%i in (%cnt%,-1,0) do (<br/>    SET /A \"from=%%i,to=(!RANDOM!*(%%i-1)/32768)\"<br/>\tcall:swap loc from to<br/>  )<br/>  set \"%~1=!loc!\"<br/> exit /b <br/>\u00a0<br/>\u00a0:swap deck from to  \u00a0:: swaps two cards<br/>    set \"arr=!%~1!\" <br/>    set /a \"from=!%~2!*3,to=!%~3!*3\"<br/>\tset temp1=!arr:~%from%,3!<br/>    set temp2=!arr:~%to%,3!<br/>    set arr=!arr:%temp1%<a class=\"__cf_email__\" data-cfemail=\"c4f984\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@@!<br/>    set arr=!arr:%temp2%=%temp1%!<br/>    set arr=!arr:@@@=%temp2%!<br/>\tset \"%~1=!arr!\"<br/> exit /b<br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 64, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">SUB</span> setInitialValues <span class=\"br0\">(</span>deck<span class=\"br0\">(</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">SUB</span> shuffle <span class=\"br0\">(</span>deck<span class=\"br0\">(</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">SUB</span> showDeck <span class=\"br0\">(</span>deck<span class=\"br0\">(</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">FUNCTION</span> deal$ <span class=\"br0\">(</span>deck<span class=\"br0\">(</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckdata.shtml\"><span class=\"kw3\">DATA</span></a> <span class=\"st0\">\"AS\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"2S\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"3S\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"4S\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"5S\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"6S\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"7S\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"8S\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"9S\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"TS\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"JS\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"QS\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"KS\"</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdata.shtml\"><span class=\"kw3\">DATA</span></a> <span class=\"st0\">\"AH\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"2H\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"3H\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"4H\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"5H\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"6H\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"7H\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"8H\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"9H\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"TH\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"JH\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"QH\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"KH\"</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdata.shtml\"><span class=\"kw3\">DATA</span></a> <span class=\"st0\">\"AC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"2C\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"3C\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"4C\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"5C\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"6C\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"7C\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"8C\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"9C\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"TC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"JC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"QC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"KC\"</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdata.shtml\"><span class=\"kw3\">DATA</span></a> <span class=\"st0\">\"AD\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"2D\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"3D\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"4D\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"5D\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"6D\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"7D\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"8D\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"9D\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"TD\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"JD\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"QD\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"KD\"</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckrandomize.shtml\"><span class=\"kw3\">RANDOMIZE</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcktimer.shtml\"><span class=\"kw3\">TIMER</span></a><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckredim.shtml\"><span class=\"kw3\">REDIM</span></a> cards<span class=\"br0\">(</span><span class=\"nu0\">51</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckredim.shtml\"><span class=\"kw3\">REDIM</span></a> cards2<span class=\"br0\">(</span><span class=\"nu0\">51</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>setInitialValues cards<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>setInitialValues cards2<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>shuffle cards<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Dealt: \"</span>; deal$<span class=\"br0\">(</span>cards<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Dealt: \"</span>; deal$<span class=\"br0\">(</span>cards<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Dealt: \"</span>; deal$<span class=\"br0\">(</span>cards<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Dealt: \"</span>; deal$<span class=\"br0\">(</span>cards<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>showDeck cards<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>showDeck cards2<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> deal$ <span class=\"br0\">(</span>deck<span class=\"br0\">(</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">'technically dealing from the BOTTOM of the deck... whatever</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> c <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>    c <span class=\"sy0\">=</span> deck<span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckubound.shtml\"><span class=\"kw3\">UBOUND</span></a><span class=\"br0\">(</span>deck<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckredim.shtml\"><span class=\"kw3\">REDIM</span></a> PRESERVE deck<span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qcklbound.shtml\"><span class=\"kw3\">LBOUND</span></a><span class=\"br0\">(</span>deck<span class=\"br0\">)</span> <span class=\"kw1\">TO</span> <a href=\"http://www.qbasicnews.com/qboho/qckubound.shtml\"><span class=\"kw3\">UBOUND</span></a><span class=\"br0\">(</span>deck<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>    deal$ <span class=\"sy0\">=</span> c<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"kw1\">SUB</span> setInitialValues <span class=\"br0\">(</span>deck<span class=\"br0\">(</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> L0 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>\u00a0<br/>    <a href=\"http://www.qbasicnews.com/qboho/qckrestore.shtml\"><span class=\"kw3\">RESTORE</span></a><br/>    <span class=\"kw1\">FOR</span> L0 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">51</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckread.shtml\"><span class=\"kw3\">READ</span></a> deck<span class=\"br0\">(</span>L0<span class=\"br0\">)</span><br/>    <span class=\"kw1\">NEXT</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">SUB</span><br/>\u00a0<br/><span class=\"kw1\">SUB</span> showDeck <span class=\"br0\">(</span>deck<span class=\"br0\">(</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">FOR</span> L% <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qcklbound.shtml\"><span class=\"kw3\">LBOUND</span></a><span class=\"br0\">(</span>deck<span class=\"br0\">)</span> <span class=\"kw1\">TO</span> <a href=\"http://www.qbasicnews.com/qboho/qckubound.shtml\"><span class=\"kw3\">UBOUND</span></a><span class=\"br0\">(</span>deck<span class=\"br0\">)</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> deck<span class=\"br0\">(</span>L%<span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>;<br/>    <span class=\"kw1\">NEXT</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">SUB</span><br/>\u00a0<br/><span class=\"kw1\">SUB</span> shuffle <span class=\"br0\">(</span>deck<span class=\"br0\">(</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> w <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> shuffled<span class=\"br0\">(</span><span class=\"nu0\">51</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> L0 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>\u00a0<br/>    <span class=\"kw1\">FOR</span> L0 <span class=\"sy0\">=</span> <span class=\"nu0\">51</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">0</span> <span class=\"kw1\">STEP</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        w <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckint.shtml\"><span class=\"kw3\">INT</span></a><span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckrnd.shtml\"><span class=\"kw3\">RND</span></a> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>L0 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        shuffled<span class=\"br0\">(</span>L0<span class=\"br0\">)</span> <span class=\"sy0\">=</span> deck<span class=\"br0\">(</span>w<span class=\"br0\">)</span><br/>        <span class=\"kw1\">IF</span> w <span class=\"sy0\">&lt;&gt;</span> L0 <span class=\"kw1\">THEN</span> deck<span class=\"br0\">(</span>w<span class=\"br0\">)</span> <span class=\"sy0\">=</span> deck<span class=\"br0\">(</span>L0<span class=\"br0\">)</span><br/>    <span class=\"kw1\">NEXT</span><br/>\u00a0<br/>    <span class=\"kw1\">FOR</span> L0 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">51</span><br/>        deck<span class=\"br0\">(</span>L0<span class=\"br0\">)</span> <span class=\"sy0\">=</span> shuffled<span class=\"br0\">(</span>L0<span class=\"br0\">)</span><br/>    <span class=\"kw1\">NEXT</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">SUB</span></pre>"}, {"lang": "BBC BASIC", "loc": 47, "block": "<pre class=\"text highlighted_source\">      DIM Deck{ncards%, card&amp;(51)}, Suit$(3), Rank$(12)<br/>      Suit$() = \"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\"<br/>      Rank$() = \"Ace\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \\<br/>      \\         \"Eight\", \"Nine\", \"Ten\", \"Jack\", \"Queen\", \"King\"<br/>\u00a0<br/>      PRINT \"Creating a new deck...\"<br/>      PROCnewdeck(deck1{})<br/>      PRINT \"Shuffling the deck...\"<br/>      PROCshuffle(deck1{})<br/>      PRINT \"The first few cards are:\"<br/>      FOR card% = 1 TO 8<br/>        PRINT FNcardname(deck1.card&amp;(card%))<br/>      NEXT<br/>      PRINT \"Dealing three cards from the deck:\"<br/>      FOR card% = 1 TO 3<br/>        PRINT FNcardname(FNdeal(deck1{}))<br/>      NEXT<br/>      PRINT \"Number of cards remaining in the deck = \"\u00a0; deck1.ncards%<br/>      END<br/>\u00a0<br/>      REM Make a new deck:<br/>      DEF PROCnewdeck(RETURN deck{})<br/>      LOCAL N%<br/>      DIM deck{} = Deck{}<br/>      FOR N% = 0 TO 51<br/>        deck.card&amp;(N%) = N%<br/>        deck.ncards% += 1<br/>      NEXT<br/>      ENDPROC<br/>\u00a0<br/>      REM Shuffle a deck:<br/>      DEF PROCshuffle(deck{})<br/>      LOCAL N%<br/>      FOR N% = 52 TO 2 STEP -1<br/>        SWAP deck.card&amp;(N%-1), deck.card&amp;(RND(N%)-1)<br/>      NEXT<br/>      ENDPROC<br/>\u00a0<br/>      REM Deal from the 'bottom' of the deck:<br/>      DEF FNdeal(deck{})<br/>      IF deck.ncards% = 0 THEN ERROR 100, \"Deck is empty\"<br/>      deck.ncards% -= 1<br/>      = deck.card&amp;(deck.ncards%)<br/>\u00a0<br/>      REM Return the name of a card:<br/>      DEF FNcardname(card&amp;)<br/>      = Rank$(card&amp; &gt;&gt; 2) + \" of \" + Suit$(card&amp; AND 3)</pre>"}, {"lang": "C", "loc": 94, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;locale.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> locale_ok <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">wchar_t</span> s_suits<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> L<span class=\"st0\">\"\u2660\u2665\u2666\u2663\"</span><span class=\"sy0\">;</span><br/><span class=\"coMULTI\">/* if your file can't contain unicode, use the next line instead */</span><br/><span class=\"co1\">//wchar_t s_suits[] = L\"\\x2660\\x2665\\x2666\\x2663\";</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s_suits_ascii<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"S\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"H\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"C\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s_nums<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"WHAT\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"A\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"2\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"3\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"4\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"5\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"6\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"7\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"8\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"9\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"10\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"J\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Q\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"K\"</span><span class=\"sy0\">,</span><br/>\t<span class=\"st0\">\"OVERFLOW\"</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span> <span class=\"kw4\">int</span> suit<span class=\"sy0\">,</span> number<span class=\"sy0\">,</span> _s<span class=\"sy0\">;</span> <span class=\"br0\">}</span> card_t<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>card<span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span> <span class=\"kw4\">int</span> n<span class=\"sy0\">;</span> card_t cards<span class=\"br0\">[</span><span class=\"nu0\">52</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span> deck_t<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>deck<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> show_card<span class=\"br0\">(</span>card c<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>locale_ok<span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%lc%s\"</span><span class=\"sy0\">,</span> s_suits<span class=\"br0\">[</span>c<span class=\"sy0\">-&gt;</span>suit<span class=\"br0\">]</span><span class=\"sy0\">,</span> s_nums<span class=\"br0\">[</span>c<span class=\"sy0\">-&gt;</span>number<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">else</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%s%s\"</span><span class=\"sy0\">,</span> s_suits_ascii<span class=\"br0\">[</span>c<span class=\"sy0\">-&gt;</span>suit<span class=\"br0\">]</span><span class=\"sy0\">,</span> s_nums<span class=\"br0\">[</span>c<span class=\"sy0\">-&gt;</span>number<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>deck new_deck<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> k<span class=\"sy0\">;</span><br/>\tdeck d <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>deck_t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\td<span class=\"sy0\">-&gt;</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">52</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">13</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++,</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\td<span class=\"sy0\">-&gt;</span>cards<span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">suit</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\t\t\td<span class=\"sy0\">-&gt;</span>cards<span class=\"br0\">[</span>k<span class=\"br0\">]</span>.<span class=\"me1\">number</span> <span class=\"sy0\">=</span> j<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> d<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> show_deck<span class=\"br0\">(</span>deck d<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d cards:\"</span><span class=\"sy0\">,</span> d<span class=\"sy0\">-&gt;</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> d<span class=\"sy0\">-&gt;</span>n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tshow_card<span class=\"br0\">(</span>d<span class=\"sy0\">-&gt;</span>cards <span class=\"sy0\">+</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> cmp_card<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>card<span class=\"br0\">)</span>a<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>_s<span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>card<span class=\"br0\">)</span>b<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>_s<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> x <span class=\"sy0\">&lt;</span> y <span class=\"sy0\">?</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span> x <span class=\"sy0\">&gt;</span> y<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>card deal_card<span class=\"br0\">(</span>deck d<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>d<span class=\"sy0\">-&gt;</span>n<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> d<span class=\"sy0\">-&gt;</span>cards <span class=\"sy0\">+</span> <span class=\"sy0\">--</span>d<span class=\"sy0\">-&gt;</span>n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> shuffle_deck<span class=\"br0\">(</span>deck d<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> d<span class=\"sy0\">-&gt;</span>n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\td<span class=\"sy0\">-&gt;</span>cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span>._s <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/qsort.html\"><span class=\"kw3\">qsort</span></a><span class=\"br0\">(</span>d<span class=\"sy0\">-&gt;</span>cards<span class=\"sy0\">,</span> d<span class=\"sy0\">-&gt;</span>n<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>card_t<span class=\"br0\">)</span><span class=\"sy0\">,</span> cmp_card<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\tdeck d <span class=\"sy0\">=</span> new_deck<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tlocale_ok <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">!=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/setlocale.html\"><span class=\"kw3\">setlocale</span></a><span class=\"br0\">(</span>LC_CTYPE<span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"New deck, \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> show_deck<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Shuffle and deal to three players:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tshuffle_deck<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\tshow_card<span class=\"br0\">(</span>deal_card<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Left in deck \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> show_deck<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* freeing the data struct requires just free(), but it depends on the<br/>\t * situation: there might be cards dealt out somewhere, which is not<br/>\t * in the scope of this task.<br/>\t */</span><br/>\t<span class=\"co1\">//free(d);</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 77, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;deque&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;ostream&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/>\u00a0<br/><span class=\"kw2\">namespace</span> cards<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">class</span> card<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    <span class=\"kw2\">enum</span> pip_type <span class=\"br0\">{</span> two, three, four, five, six, seven, eight, nine, ten,<br/>                    jack, queen, king, ace, pip_count <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    <span class=\"kw2\">enum</span> suite_type <span class=\"br0\">{</span> hearts, spades, diamonds, clubs, suite_count <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    <span class=\"kw2\">enum</span> <span class=\"br0\">{</span> unique_count <span class=\"sy1\">=</span> pip_count <span class=\"sy2\">*</span> suite_count <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    card<span class=\"br0\">(</span>suite_type s, pip_type p<span class=\"br0\">)</span><span class=\"sy4\">:</span> value<span class=\"br0\">(</span>s <span class=\"sy2\">+</span> suite_count <span class=\"sy2\">*</span> p<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">explicit</span> card<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> v <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">:</span> value<span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>    pip_type pip<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> pip_type<span class=\"br0\">(</span>value <span class=\"sy2\">/</span> suite_count<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    suite_type suite<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> suite_type<span class=\"br0\">(</span>value <span class=\"sy2\">%</span> suite_count<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> value<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> <span class=\"kw4\">const</span> pip_names<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span><br/>    <span class=\"br0\">{</span> <span class=\"st0\">\"two\"</span>, <span class=\"st0\">\"three\"</span>, <span class=\"st0\">\"four\"</span>, <span class=\"st0\">\"five\"</span>, <span class=\"st0\">\"six\"</span>, <span class=\"st0\">\"seven\"</span>, <span class=\"st0\">\"eight\"</span>, <span class=\"st0\">\"nine\"</span>, <span class=\"st0\">\"ten\"</span>,<br/>      <span class=\"st0\">\"jack\"</span>, <span class=\"st0\">\"queen\"</span>, <span class=\"st0\">\"king\"</span>, <span class=\"st0\">\"ace\"</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span> os, card<span class=\"sy4\">::</span><span class=\"me2\">pip_type</span> pip<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> os <span class=\"sy1\">&lt;&lt;</span> pip_names<span class=\"br0\">[</span>pip<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> <span class=\"kw4\">const</span> suite_names<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span><br/>    <span class=\"br0\">{</span> <span class=\"st0\">\"hearts\"</span>, <span class=\"st0\">\"spades\"</span>, <span class=\"st0\">\"diamonds\"</span>, <span class=\"st0\">\"clubs\"</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span> os, card<span class=\"sy4\">::</span><span class=\"me2\">suite_type</span> suite<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> os <span class=\"sy1\">&lt;&lt;</span> suite_names<span class=\"br0\">[</span>suite<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span> os, card c<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> os <span class=\"sy1\">&lt;&lt;</span> c.<span class=\"me1\">pip</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" of \"</span> <span class=\"sy1\">&lt;&lt;</span> c.<span class=\"me1\">suite</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> deck<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    deck<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> card<span class=\"sy4\">::</span><span class=\"me2\">unique_count</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            cards.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>card<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> shuffle<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> std<span class=\"sy4\">::</span><span class=\"me2\">random_shuffle</span><span class=\"br0\">(</span>cards.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, cards.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    card deal<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> card c <span class=\"sy1\">=</span> cards.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> cards.<span class=\"me1\">pop_front</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">return</span> c<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">typedef</span> std<span class=\"sy4\">::</span><span class=\"me2\">deque</span><span class=\"sy1\">&lt;</span>card<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">const_iterator</span> const_iterator<span class=\"sy4\">;</span><br/>    const_iterator begin<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> cards.<span class=\"me1\">cbegin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    const_iterator end<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> cards.<span class=\"me1\">cend</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">deque</span><span class=\"sy1\">&lt;</span>card<span class=\"sy1\">&gt;</span> cards<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">inline</span> std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span> os, <span class=\"kw4\">const</span> deck<span class=\"sy3\">&amp;</span> d<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">copy</span><span class=\"br0\">(</span>d.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, d.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">ostream_iterator</span><span class=\"sy1\">&lt;</span>card<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>os, <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> os<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 62, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">struct</span> Card<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> Card<span class=\"br0\">(</span><span class=\"kw4\">string</span> rank, <span class=\"kw4\">string</span> suit<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Rank <span class=\"sy0\">=</span> rank<span class=\"sy0\">;</span><br/>        Suit <span class=\"sy0\">=</span> suit<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">string</span> Rank <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">string</span> Suit <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">override</span> <span class=\"kw4\">string</span> ToString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> $<span class=\"st0\">\"{Rank} of {Suit}\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Deck <span class=\"sy0\">:</span> IEnumerable<span class=\"sy0\">&lt;</span>Card<span class=\"sy0\">&gt;</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">readonly</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> ranks <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"Two\"</span>, <span class=\"st0\">\"Three\"</span>, <span class=\"st0\">\"Four\"</span>, <span class=\"st0\">\"Five\"</span>, <span class=\"st0\">\"Six\"</span>,<br/>        <span class=\"st0\">\"Seven\"</span>, <span class=\"st0\">\"Eight\"</span>, <span class=\"st0\">\"Nine\"</span>, <span class=\"st0\">\"Ten\"</span>, <span class=\"st0\">\"Jack\"</span>, <span class=\"st0\">\"Queen\"</span>, <span class=\"st0\">\"King\"</span>, <span class=\"st0\">\"Ace\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">readonly</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> suits <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"Clubs\"</span>, <span class=\"st0\">\"Diamonds\"</span>, <span class=\"st0\">\"Hearts\"</span>, <span class=\"st0\">\"Spades\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">readonly</span> List<span class=\"sy0\">&lt;</span>Card<span class=\"sy0\">&gt;</span> cards<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Deck<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        cards <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">from</span> suit <span class=\"kw1\">in</span> suits<br/>                <span class=\"kw1\">from</span> rank <span class=\"kw1\">in</span> ranks<br/>                <span class=\"kw1\">select</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Card<span class=\"br0\">(</span>rank, suit<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> Count <span class=\"sy0\">=&gt;</span> cards<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> Shuffle<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// using Knuth Shuffle (see at http://rosettacode.org/wiki/Knuth_shuffle)</span><br/>        <span class=\"kw1\">var</span> random <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> cards<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> random<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span>i, cards<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> temp <span class=\"sy0\">=</span> cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> cards<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            cards<span class=\"br0\">[</span>r<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Card Deal<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> last <span class=\"sy0\">=</span> cards<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        Card card <span class=\"sy0\">=</span> cards<span class=\"br0\">[</span>last<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">//Removing from the front will shift the other items back 1 spot,</span><br/>        <span class=\"co1\">//so that would be an O(n) operation. Removing from the back is O(1).</span><br/>        cards<span class=\"sy0\">.</span><span class=\"me1\">RemoveAt</span><span class=\"br0\">(</span>last<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> card<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> IEnumerator<span class=\"sy0\">&lt;</span>Card<span class=\"sy0\">&gt;</span> GetEnumerator<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">//Reverse enumeration of the list so that they are returned in the order they would be dealt.</span><br/>        <span class=\"co1\">//LINQ's Reverse() copies the entire list. Let's avoid that.</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> cards<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw5\">System.<span class=\"me1\">Collections</span></span><span class=\"sy0\">.</span><span class=\"me1\">IEnumerator</span> <span class=\"kw5\">System.<span class=\"me1\">Collections</span></span><span class=\"sy0\">.</span><span class=\"me1\">IEnumerable</span><span class=\"sy0\">.</span><span class=\"me1\">GetEnumerator</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> GetEnumerator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 81, "block": "<pre class=\"text highlighted_source\">import com.vasileff.ceylon.random.api { ... }<br/>\u00a0<br/>\"\"\"Run the example code for Rosetta Code [\"Playing cards\" task] (http://rosettacode.org/wiki/Playing_cards).\"\"\"<br/>shared void run() {<br/>    variable value deck = Deck();<br/>    print(\"New deck (``deck.size`` cards): ``deck``<br/>           \");<br/>\u00a0<br/>    deck = deck.shuffle();<br/>    print(\"Shuffeled deck (``deck.size`` cards): ``deck``<br/>           \");<br/>\u00a0<br/>    print(\"Deal three hands: \");<br/>    for (i in 1..3) {<br/>        value [hand, _deck] = deck.deal();<br/>        print(\"- Dealt ``hand.size`` cards to hand ``i``\u00a0: ``join(hand)``\");<br/>        deck = _deck;<br/>    }<br/>\u00a0<br/>    print(\"<br/>           Deck (``deck.size`` cards) after dealing three hands: ``deck``\");<br/>\u00a0<br/>}<br/>\u00a0<br/>abstract class Suit() of clubs | hearts | spades | diamonds {}<br/>\u00a0<br/>object clubs    extends Suit() { string = \"\u2663\"; }<br/>object hearts   extends Suit() { string = \"\u2665\"; }<br/>object spades   extends Suit() { string = \"\u2660\"; }<br/>object diamonds extends Suit() { string = \"\u2666\"; }<br/>\u00a0<br/>abstract class Pip() of two | three | four | five | six | seven | eight | nine | ten | jack | queen | king | ace {}<br/>object two   extends Pip() { string =  \"2\"; }<br/>object three extends Pip() { string =  \"3\"; }<br/>object four  extends Pip() { string =  \"4\"; }<br/>object five  extends Pip() { string =  \"5\"; }<br/>object six   extends Pip() { string =  \"6\"; }<br/>object seven extends Pip() { string =  \"7\"; }<br/>object eight extends Pip() { string =  \"8\"; }<br/>object nine  extends Pip() { string =  \"9\"; }<br/>object ten   extends Pip() { string = \"10\"; }<br/>object jack  extends Pip() { string =  \"J\"; }<br/>object queen extends Pip() { string =  \"Q\"; }<br/>object king  extends Pip() { string =  \"K\"; }<br/>object ace   extends Pip() { string =  \"A\"; }<br/>\u00a0<br/>class Card(shared Pip pip, shared Suit suit) { <br/>    string = \"``pip`` of ``suit``\";<br/>}<br/>\u00a0<br/>\u00a0<br/>String join(Card[] cards) =&gt; \", \".join { *cards };<br/>\u00a0<br/>class Deck (cards = [ for (suit in `Suit`.caseValues) for (pip in `Pip`.caseValues) Card(pip, suit) ]) {<br/>    shared Card[] cards;<br/>\u00a0<br/>    shared Deck shuffle(Random rnd = platformRandom()) <br/>            =&gt; if (nonempty cards)<br/>               then Deck( [*randomize(cards, rnd)] )<br/>               else this;<br/>\u00a0<br/>    shared Integer size =&gt; cards.size;<br/>\u00a0<br/>    shared Boolean empty =&gt; cards.empty;<br/>\u00a0<br/>    string =&gt; if (size &gt; 13) <br/>              then \"\\n  \" + \"\\n  \". join { *cards.partition(13).map((cards) =&gt; join(cards)) }<br/>              else join(cards);<br/>\u00a0<br/>    shared [Card[], Deck] deal(Integer handSize = 5) {<br/>        if (handSize &gt;= cards.size) {<br/>            return [cards, Deck([])];<br/>        }<br/>        else {<br/>            return [<br/>                cards.initial(handSize),<br/>                Deck(cards.skip(handSize).sequence())<br/>            ];<br/>        }<br/>    }<br/>}</pre>"}, {"lang": "Clojure", "loc": 12, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">def</span> suits <span class=\"br0\">[</span>:<span class=\"me1\">club</span>\u00a0:<span class=\"me1\">diamond</span>\u00a0:<span class=\"me1\">heart</span>\u00a0:<span class=\"me1\">spade</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> pips <span class=\"br0\">[</span>:<span class=\"me1\">ace</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span>\u00a0:<span class=\"me1\">jack</span>\u00a0:<span class=\"me1\">queen</span>\u00a0:<span class=\"me1\">king</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> deck <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>s suits p pips<span class=\"br0\">]</span> <span class=\"br0\">[</span>s p<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> shuffle clojure<span class=\"sy0\">.</span>core<span class=\"sy0\">/</span>shuffle<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> deal <span class=\"kw1\">first</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> output <span class=\"br0\">[</span>deck<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>suit pip<span class=\"br0\">]</span> deck<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"kw1\">format</span> <span class=\"st0\">\"%s of\u00a0%ss\"</span><br/>                     <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>keyword? pip<span class=\"br0\">)</span> <span class=\"br0\">(</span>name pip<span class=\"br0\">)</span> pip<span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span>name suit<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 178, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> playing-cards<span class=\"sy0\">.</span><br/>\u00a0<br/>       environment <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">configuration</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       repository<span class=\"sy0\">.</span><br/>           <span class=\"kw3\">function</span> <span class=\"kw3\">all</span> intrinsic<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">77</span> card             <span class=\"kw3\">usage</span> <span class=\"kw3\">index</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> deck<span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> cards <span class=\"kw3\">occurs</span> <span class=\"nu0\">52</span> <span class=\"kw2\">times</span> <span class=\"kw3\">ascending</span> <span class=\"kw3\">key</span> slot <span class=\"kw3\">indexed</span> <span class=\"kw3\">by</span> card<span class=\"sy0\">.</span><br/>             <span class=\"nu0\">10</span> slot       <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>             <span class=\"nu0\">10</span> hand       <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>             <span class=\"nu0\">10</span> suit       <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>             <span class=\"nu0\">10</span> symbol     <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>             <span class=\"nu0\">10</span> rank       <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span> <span class=\"kw3\">filler</span><span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> suit-name     <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw3\">occurs</span> <span class=\"nu0\">4</span> <span class=\"kw2\">times</span><span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; Unicode U+1F0Ax<span class=\"sy0\">,</span> Bx<span class=\"sy0\">,</span> Cx<span class=\"sy0\">,</span> Dx <span class=\"st0\">\"f09f82a0\"</span> <span class=\"st0\">\"82b0\"</span> <span class=\"st0\">\"8380\"</span> <span class=\"st0\">\"8390\"</span><br/>       <span class=\"nu0\">01</span> base-s           constant as <span class=\"nu0\">4036985504</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> base-h           constant as <span class=\"nu0\">4036985520</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> base-d           constant as <span class=\"nu0\">4036985728</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> base-c           constant as <span class=\"nu0\">4036985744</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span> sym              <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> comp-x<span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> symx             <span class=\"kw3\">redefines</span> sym <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">77</span> s                <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">77</span> r                <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">77</span> c                <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">77</span> hit              <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">77</span> limiter          <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span> spades           constant as <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> hearts           constant as <span class=\"nu0\">2</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> diamonds         constant as <span class=\"nu0\">3</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> clubs            constant as <span class=\"nu0\">4</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span> players          constant as <span class=\"nu0\">3</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> cards-per        constant as <span class=\"nu0\">5</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> deal             <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> player           <span class=\"kw3\">pic</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span> show-tally       <span class=\"kw3\">pic</span> zz<span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> show-rank        <span class=\"kw3\">pic</span> z<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> arg              <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       cards-<span class=\"kw1\">main</span><span class=\"sy0\">.</span><br/>       <span class=\"kw2\">perform</span> seed<br/>       <span class=\"kw2\">perform</span> initialize-deck<br/>       <span class=\"kw2\">perform</span> shuffle-deck<br/>       <span class=\"kw2\">perform</span> deal-deck<br/>       <span class=\"kw2\">perform</span> display-hands<br/>       goback<span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; ********<br/>       seed<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">accept</span> arg <span class=\"kw3\">from</span> command-<span class=\"kw3\">line</span><br/>           <span class=\"kw1\">if</span> arg <span class=\"kw3\">not</span> <span class=\"kw3\">equal</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>               <span class=\"kw2\">move</span> <span class=\"kw4\">random</span><span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw2\">to</span> c<br/>           end-<span class=\"kw1\">if</span><br/>       <span class=\"sy0\">.</span><br/>\u00a0<br/>       initialize-deck<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">move</span> <span class=\"st0\">\"spades\"</span> <span class=\"kw2\">to</span> suit-name<span class=\"br0\">(</span>spades<span class=\"br0\">)</span><br/>           <span class=\"kw2\">move</span> <span class=\"st0\">\"hearts\"</span> <span class=\"kw2\">to</span> suit-name<span class=\"br0\">(</span>hearts<span class=\"br0\">)</span><br/>           <span class=\"kw2\">move</span> <span class=\"st0\">\"diamonds\"</span> <span class=\"kw2\">to</span> suit-name<span class=\"br0\">(</span>diamonds<span class=\"br0\">)</span><br/>           <span class=\"kw2\">move</span> <span class=\"st0\">\"clubs\"</span> <span class=\"kw2\">to</span> suit-name<span class=\"br0\">(</span>clubs<span class=\"br0\">)</span><br/>\u00a0<br/>           <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> s <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> s &gt; <span class=\"nu0\">4</span><br/>                     <span class=\"kw3\">after</span> r <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> r &gt; <span class=\"nu0\">13</span><br/>                   <span class=\"kw2\">compute</span> c <span class=\"sy0\">=</span> <span class=\"br0\">(</span>s<span class=\"sy0\"> - </span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\"> * </span><span class=\"nu0\">13</span><span class=\"sy0\"> + </span>r<br/>                   <span class=\"kw2\">evaluate</span> s<br/>                       <span class=\"kw3\">when</span> spades <span class=\"kw2\">compute</span> sym <span class=\"sy0\">=</span> base-s<span class=\"sy0\"> + </span>r<br/>                       <span class=\"kw3\">when</span> hearts <span class=\"kw2\">compute</span> sym <span class=\"sy0\">=</span> base-h<span class=\"sy0\"> + </span>r<br/>                       <span class=\"kw3\">when</span> diamonds <span class=\"kw2\">compute</span> sym <span class=\"sy0\">=</span> base-d<span class=\"sy0\"> + </span>r<br/>                       <span class=\"kw3\">when</span> clubs <span class=\"kw2\">compute</span> sym <span class=\"sy0\">=</span> base-c<span class=\"sy0\"> + </span>r<br/>                   end-<span class=\"kw2\">evaluate</span><br/>                   <span class=\"kw1\">if</span> r &gt; <span class=\"nu0\">11</span> <span class=\"kw3\">then</span> <span class=\"kw2\">compute</span> sym <span class=\"sy0\">=</span> sym<span class=\"sy0\"> + </span><span class=\"nu0\">1</span> end-<span class=\"kw1\">if</span><br/>                   <span class=\"kw2\">move</span> s <span class=\"kw2\">to</span> suit<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>                   <span class=\"kw2\">move</span> r <span class=\"kw2\">to</span> rank<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>                   <span class=\"kw2\">move</span> symx <span class=\"kw2\">to</span> symbol<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>                   <span class=\"kw2\">move</span> <span class=\"kw3\">zero</span> <span class=\"kw2\">to</span> slot<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>                   <span class=\"kw2\">move</span> <span class=\"kw3\">zero</span> <span class=\"kw2\">to</span> hand<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>           end-<span class=\"kw2\">perform</span><br/>       <span class=\"sy0\">.</span><br/>\u00a0<br/>       shuffle-deck<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">move</span> <span class=\"kw3\">zero</span> <span class=\"kw2\">to</span> limiter<br/>           <span class=\"kw2\">perform</span> <span class=\"kw2\">until</span> <span class=\"kw2\">exit</span><br/>               <span class=\"kw2\">compute</span> c <span class=\"sy0\">=</span> <span class=\"kw4\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\"> * </span><span class=\"nu0\">52.0</span><span class=\"sy0\"> + </span><span class=\"nu0\">1.0</span><br/>               <span class=\"kw2\">move</span> <span class=\"kw3\">zero</span> <span class=\"kw2\">to</span> hit<br/>               <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> tally <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> tally &gt; <span class=\"nu0\">52</span><br/>                   <span class=\"kw1\">if</span> slot<span class=\"br0\">(</span>tally<span class=\"br0\">)</span> <span class=\"kw3\">equal</span> c <span class=\"kw3\">then</span><br/>                       <span class=\"kw2\">move</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> hit<br/>                       <span class=\"kw2\">exit</span> <span class=\"kw2\">perform</span><br/>                   end-<span class=\"kw1\">if</span><br/>                   <span class=\"kw1\">if</span> slot<span class=\"br0\">(</span>tally<span class=\"br0\">)</span> <span class=\"kw3\">equal</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>                       <span class=\"kw1\">if</span> tally &lt; <span class=\"nu0\">52</span> <span class=\"kw3\">then</span> <span class=\"kw2\">move</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> hit end-<span class=\"kw1\">if</span><br/>                       <span class=\"kw2\">move</span> c <span class=\"kw2\">to</span> slot<span class=\"br0\">(</span>tally<span class=\"br0\">)</span><br/>                       <span class=\"kw2\">exit</span> <span class=\"kw2\">perform</span><br/>                   end-<span class=\"kw1\">if</span><br/>               end-<span class=\"kw2\">perform</span><br/>               <span class=\"kw1\">if</span> hit <span class=\"kw3\">equal</span> <span class=\"kw3\">zero</span> <span class=\"kw3\">then</span> <span class=\"kw2\">exit</span> <span class=\"kw2\">perform</span> end-<span class=\"kw1\">if</span><br/>               <span class=\"kw1\">if</span> limiter &gt; <span class=\"nu0\">999999</span> <span class=\"kw3\">then</span><br/>                   <span class=\"kw2\">display</span> <span class=\"st0\">\"too many shuffles, deck invalid\"</span> <span class=\"kw3\">upon</span> syserr<br/>                   <span class=\"kw2\">exit</span> <span class=\"kw2\">perform</span><br/>               end-<span class=\"kw1\">if</span><br/>               <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> limiter<br/>           end-<span class=\"kw2\">perform</span><br/>           <span class=\"kw3\">sort</span> cards <span class=\"kw3\">ascending</span> <span class=\"kw3\">key</span> slot<br/>       <span class=\"sy0\">.</span><br/>\u00a0<br/>       display-card<span class=\"sy0\">.</span><br/>       &gt;&gt;<span class=\"kw1\">IF</span> ENGLISH <span class=\"kw3\">IS</span> DEFINED<br/>               <span class=\"kw2\">move</span> rank<span class=\"br0\">(</span>tally<span class=\"br0\">)</span> <span class=\"kw2\">to</span> show-rank<br/>               <span class=\"kw2\">evaluate</span> rank<span class=\"br0\">(</span>tally<span class=\"br0\">)</span> <br/>                   <span class=\"kw3\">when</span> <span class=\"nu0\">1</span> <span class=\"kw2\">display</span> <span class=\"st0\">\"  ace\"</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>                   <span class=\"kw3\">when</span> <span class=\"nu0\">2</span> <span class=\"kw3\">thru</span> <span class=\"nu0\">10</span> <span class=\"kw2\">display</span> show-rank <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>                   <span class=\"kw3\">when</span> <span class=\"nu0\">11</span> <span class=\"kw2\">display</span> <span class=\"st0\">\" jack\"</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>                   <span class=\"kw3\">when</span> <span class=\"nu0\">12</span> <span class=\"kw2\">display</span> <span class=\"st0\">\"queen\"</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>                   <span class=\"kw3\">when</span> <span class=\"nu0\">13</span> <span class=\"kw2\">display</span> <span class=\"st0\">\" king\"</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>               end-<span class=\"kw2\">evaluate</span><br/>               <span class=\"kw2\">display</span> <span class=\"st0\">\" of \"</span> suit-name<span class=\"br0\">(</span>suit<span class=\"br0\">(</span>tally<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>       &gt;&gt;<span class=\"kw3\">ELSE</span><br/>               <span class=\"kw2\">display</span> symbol<span class=\"br0\">(</span>tally<span class=\"br0\">)</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>       &gt;&gt;END-<span class=\"kw1\">IF</span><br/>       <span class=\"sy0\">.</span><br/>\u00a0<br/>       display-deck<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> tally <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> tally &gt; <span class=\"nu0\">52</span><br/>               <span class=\"kw2\">move</span> tally <span class=\"kw2\">to</span> show-tally<br/>               <span class=\"kw2\">display</span> <span class=\"st0\">\"Card: \"</span> show-tally<br/>                       <span class=\"st0\">\" currently in hand \"</span> hand<span class=\"br0\">(</span>tally<span class=\"br0\">)</span><br/>                       <span class=\"st0\">\" is \"</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>               <span class=\"kw2\">perform</span> display-card<br/>               <span class=\"kw2\">display</span> <span class=\"kw3\">space</span><br/>           end-<span class=\"kw2\">perform</span><br/>       <span class=\"sy0\">.</span><br/>\u00a0<br/>       display-hands<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> player <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> player &gt; players<br/>               <span class=\"kw2\">move</span> player <span class=\"kw2\">to</span> tally<br/>               <span class=\"kw2\">display</span> <span class=\"st0\">\"Player \"</span> player <span class=\"st0\">\": \"</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>               <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> deal <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> deal &gt; cards-per<br/>                  <span class=\"kw2\">perform</span> display-card<br/>                  <span class=\"kw2\">add</span> players <span class=\"kw2\">to</span> tally<br/>               end-<span class=\"kw2\">perform</span><br/>               <span class=\"kw2\">display</span> <span class=\"kw3\">space</span><br/>           end-<span class=\"kw2\">perform</span><br/>           <span class=\"kw2\">display</span> <span class=\"st0\">\"Stock: \"</span> <span class=\"kw3\">with</span> <span class=\"kw3\">no</span> <span class=\"kw3\">advancing</span><br/>           <span class=\"kw3\">subtract</span> players <span class=\"kw3\">from</span> tally<br/>           <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> tally<br/>           <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> tally <span class=\"kw3\">from</span> tally <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> tally &gt; <span class=\"nu0\">52</span><br/>               <span class=\"kw2\">perform</span> display-card<br/>       &gt;&gt;<span class=\"kw1\">IF</span> ENGLISH <span class=\"kw3\">IS</span> DEFINED<br/>               <span class=\"kw2\">display</span> <span class=\"kw3\">space</span><br/>       &gt;&gt;END-<span class=\"kw1\">IF</span><br/>           end-<span class=\"kw2\">perform</span><br/>           <span class=\"kw2\">display</span> <span class=\"kw3\">space</span><br/>       <span class=\"sy0\">.</span><br/>\u00a0<br/>       deal-deck<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">display</span> <span class=\"st0\">\"Dealing \"</span> cards-per <span class=\"st0\">\" cards to \"</span> players <span class=\"st0\">\" players\"</span><br/>           <span class=\"kw2\">move</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> tally<br/>           <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> deal <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> deal &gt; cards-per<br/>                     <span class=\"kw3\">after</span> player <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <span class=\"kw2\">until</span> player &gt; players<br/>               <span class=\"kw2\">move</span> player <span class=\"kw2\">to</span> hand<span class=\"br0\">(</span>tally<span class=\"br0\">)</span><br/>               <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> tally<br/>           end-<span class=\"kw2\">perform</span><br/>       <span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> playing-cards<span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 25, "block": "<pre class=\"coffeescript highlighted_source\"><span class=\"co1\">#translated from JavaScript example</span><br/><span class=\"kw3\">class</span> Card<br/>  constructor<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"sy0\">@</span>pip<span class=\"sy0\">,</span> <span class=\"sy0\">@</span>suit<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>\u00a0<br/>  toString<span class=\"sy0\">:</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"#{@pip}#{@suit}\"</span><br/>\u00a0<br/><span class=\"kw3\">class</span> Deck<br/>  pips = <span class=\"st0\">'2 3 4 5 6 7 8 9 10 J Q K A'</span>.<span class=\"me1\">split</span> <span class=\"st0\">' '</span><br/>  suits = <span class=\"st0\">'\u2663 \u2665 \u2660 \u2666'</span>.<span class=\"me1\">split</span> <span class=\"st0\">' '</span><br/>\u00a0<br/>  constructor<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"sy0\">@</span>cards<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> <span class=\"sy0\">@</span>cards<span class=\"sy0\">?</span><br/>      <span class=\"sy0\">@</span>cards = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>      <span class=\"kw1\">for</span> suit <span class=\"kw1\">in</span> suits<br/>        <span class=\"kw1\">for</span> pip <span class=\"kw1\">in</span> pips<br/>          <span class=\"sy0\">@</span>cards.<span class=\"me1\">push</span> <span class=\"kw3\">new</span> Card<span class=\"br0\">(</span>pip<span class=\"sy0\">,</span> suit<span class=\"br0\">)</span><br/>\u00a0<br/>  toString<span class=\"sy0\">:</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"[#{@cards.join(', ')}]\"</span><br/>\u00a0<br/>  shuffle<span class=\"sy0\">:</span> <span class=\"sy0\">=&gt;</span><br/>    <span class=\"kw1\">for</span> card<span class=\"sy0\">,</span> i <span class=\"kw1\">in</span> <span class=\"sy0\">@</span>cards<br/>      randomCard = parseInt <span class=\"sy0\">@</span>cards.<span class=\"me1\">length</span> <span class=\"sy0\">*</span> Math.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"sy0\">@</span>cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"sy0\">@</span>cards.<span class=\"me1\">splice</span><span class=\"br0\">(</span>randomCard<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> card<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\u00a0<br/>  deal<span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">@</span>cards.<span class=\"me1\">shift</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 22, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defconstant +suits+<br/>  '<span class=\"br0\">(</span>club diamond heart spade<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Card suits are the symbols club, diamond, heart, and spade.\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defconstant +pips+<br/>  '<span class=\"br0\">(</span>ace <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> jack queen king<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Card pips are the numbers 2 through 10, and the symbols ace, jack,<br/>queen and king.\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> make-deck <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>aux <span class=\"br0\">(</span>deck '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Returns a list of cards, where each card is a cons whose car is a<br/>suit and whose cdr is a pip.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>suit +suits+ deck<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>pip +pips+<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>push <span class=\"br0\">(</span><span class=\"kw1\">cons</span> suit pip<span class=\"br0\">)</span> deck<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> shuffle <span class=\"br0\">(</span><span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Returns a shuffling of list, by sorting it with a random<br/>predicate. List may be modified.\"</span><br/>  <span class=\"br0\">(</span>sort <span class=\"kw1\">list</span> #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x y<span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>ignore x y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 31, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span><br/>       std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">random</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> Pip <span class=\"br0\">{</span>Two<span class=\"sy0\">,</span> Three<span class=\"sy0\">,</span> Four<span class=\"sy0\">,</span> Five<span class=\"sy0\">,</span> Six<span class=\"sy0\">,</span> Seven<span class=\"sy0\">,</span> Eight<span class=\"sy0\">,</span> Nine<span class=\"sy0\">,</span> Ten<span class=\"sy0\">,</span><br/>          Jack<span class=\"sy0\">,</span> Queen<span class=\"sy0\">,</span> King<span class=\"sy0\">,</span> Ace<span class=\"br0\">}</span><br/><span class=\"kw4\">enum</span> Suit <span class=\"br0\">{</span>Diamonds<span class=\"sy0\">,</span> Spades<span class=\"sy0\">,</span> Hearts<span class=\"sy0\">,</span> Clubs<span class=\"br0\">}</span><br/><span class=\"kw2\">alias</span> Card <span class=\"sy0\">=</span> Tuple<span class=\"sy0\">!</span><span class=\"br0\">(</span>Pip<span class=\"sy0\">,</span> Suit<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> newDeck<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> cartesianProduct<span class=\"br0\">(</span><span class=\"br0\">[</span>EnumMembers<span class=\"sy0\">!</span>Pip<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>EnumMembers<span class=\"sy0\">!</span>Suit<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">alias</span> shuffleDeck <span class=\"sy0\">=</span> randomShuffle<span class=\"sy0\">;</span><br/>\u00a0<br/>Card dealCard<span class=\"br0\">(</span><span class=\"kw2\">ref</span> Card<span class=\"br0\">[</span><span class=\"br0\">]</span> deck<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> card <span class=\"sy0\">=</span> deck.<span class=\"me1\">back</span><span class=\"sy0\">;</span><br/>    deck.<span class=\"me1\">popBack</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> card<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> show<span class=\"br0\">(</span><span class=\"kw2\">in</span> Card<span class=\"br0\">[</span><span class=\"br0\">]</span> deck<span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"Deck:<span class=\"es1\">\\n</span>%(%s<span class=\"es1\">\\n</span>%)<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> deck<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> d <span class=\"sy0\">=</span> newDeck.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>    d.<span class=\"me1\">show</span><span class=\"sy0\">;</span><br/>    d.<span class=\"me1\">shuffleDeck</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>d.<span class=\"me1\">empty</span><span class=\"br0\">)</span><br/>        d.<span class=\"me1\">dealCard</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 125, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> Cards<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  SysUtils<span class=\"sy1\">,</span> Classes<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  TPip <span class=\"sy3\">=</span> <span class=\"br0\">(</span>pTwo<span class=\"sy1\">,</span> pThree<span class=\"sy1\">,</span> pFour<span class=\"sy1\">,</span> pFive<span class=\"sy1\">,</span> pSix<span class=\"sy1\">,</span> pSeven<span class=\"sy1\">,</span> pEight<span class=\"sy1\">,</span> pNine<span class=\"sy1\">,</span> pTen<span class=\"sy1\">,</span> pJack<span class=\"sy1\">,</span> pQueen<span class=\"sy1\">,</span> pKing<span class=\"sy1\">,</span> pAce<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  TSuite <span class=\"sy3\">=</span> <span class=\"br0\">(</span>sDiamonds<span class=\"sy1\">,</span> sSpades<span class=\"sy1\">,</span> sHearts<span class=\"sy1\">,</span> sClubs<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  cPipNames<span class=\"sy1\">:</span> <span class=\"kw1\">array</span><span class=\"br0\">[</span>TPip<span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">string</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"st0\">'2'</span><span class=\"sy1\">,</span> <span class=\"st0\">'3'</span><span class=\"sy1\">,</span> <span class=\"st0\">'4'</span><span class=\"sy1\">,</span> <span class=\"st0\">'5'</span><span class=\"sy1\">,</span> <span class=\"st0\">'6'</span><span class=\"sy1\">,</span> <span class=\"st0\">'7'</span><span class=\"sy1\">,</span> <span class=\"st0\">'8'</span><span class=\"sy1\">,</span> <span class=\"st0\">'9'</span><span class=\"sy1\">,</span> <span class=\"st0\">'10'</span><span class=\"sy1\">,</span> <span class=\"st0\">'J'</span><span class=\"sy1\">,</span> <span class=\"st0\">'Q'</span><span class=\"sy1\">,</span> <span class=\"st0\">'K'</span><span class=\"sy1\">,</span> <span class=\"st0\">'A'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  cSuiteNames<span class=\"sy1\">:</span> <span class=\"kw1\">array</span><span class=\"br0\">[</span>TSuite<span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">string</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"st0\">'Diamonds'</span><span class=\"sy1\">,</span> <span class=\"st0\">'Spades'</span><span class=\"sy1\">,</span> <span class=\"st0\">'Hearts'</span><span class=\"sy1\">,</span> <span class=\"st0\">'Clubs'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  TCard <span class=\"sy3\">=</span> <span class=\"kw1\">class</span><br/>  <span class=\"kw1\">private</span><br/>    FSuite<span class=\"sy1\">:</span> TSuite<span class=\"sy1\">;</span><br/>    FPip<span class=\"sy1\">:</span> TPip<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">public</span><br/>    <span class=\"kw1\">constructor</span> Create<span class=\"br0\">(</span>aSuite<span class=\"sy1\">:</span> TSuite<span class=\"sy1\">;</span> aPip<span class=\"sy1\">:</span> TPip<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">function</span> ToString<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span> <span class=\"kw1\">override</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">property</span> Pip<span class=\"sy1\">:</span> TPip <span class=\"kw1\">read</span> FPip<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">property</span> Suite<span class=\"sy1\">:</span> TSuite <span class=\"kw1\">read</span> FSuite<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  TDeck <span class=\"sy3\">=</span> <span class=\"kw1\">class</span><br/>  <span class=\"kw1\">private</span><br/>    FCards<span class=\"sy1\">:</span> TList<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">public</span><br/>    <span class=\"kw1\">constructor</span> Create<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">destructor</span> Destroy<span class=\"sy1\">;</span> <span class=\"kw1\">override</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">procedure</span> Shuffle<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">function</span> Deal<span class=\"sy1\">:</span> TCard<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">function</span> ToString<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span> <span class=\"kw1\">override</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ TCard }</span><br/>\u00a0<br/><span class=\"kw1\">constructor</span> TCard<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span>aSuite<span class=\"sy1\">:</span> TSuite<span class=\"sy1\">;</span> aPip<span class=\"sy1\">:</span> TPip<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  FSuite <span class=\"sy1\">:</span><span class=\"sy3\">=</span> aSuite<span class=\"sy1\">;</span><br/>  FPip <span class=\"sy1\">:</span><span class=\"sy3\">=</span> aPip<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> TCard<span class=\"sy1\">.</span><span class=\"me1\">ToString</span><span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Format</span><span class=\"br0\">(</span><span class=\"st0\">'%s of\u00a0%s'</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>cPipNames<span class=\"br0\">[</span>Pip<span class=\"br0\">]</span><span class=\"sy1\">,</span> cSuiteNames<span class=\"br0\">[</span>Suite<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ TDeck }</span><br/>\u00a0<br/><span class=\"kw1\">constructor</span> TDeck<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  pip<span class=\"sy1\">:</span> TPip<span class=\"sy1\">;</span><br/>  suite<span class=\"sy1\">:</span> TSuite<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  FCards <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TList<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> suite <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Low</span><span class=\"br0\">(</span>TSuite<span class=\"br0\">)</span> <span class=\"kw1\">to</span> <span class=\"kw3\">High</span><span class=\"br0\">(</span>TSuite<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> pip <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Low</span><span class=\"br0\">(</span>TPip<span class=\"br0\">)</span> <span class=\"kw1\">to</span> <span class=\"kw3\">High</span><span class=\"br0\">(</span>TPip<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      FCards<span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>TCard<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span>suite<span class=\"sy1\">,</span> pip<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> TDeck<span class=\"sy1\">.</span><span class=\"me1\">Deal</span><span class=\"sy1\">:</span> TCard<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FCards<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  FCards<span class=\"sy1\">.</span><span class=\"kw3\">Delete</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">destructor</span> TDeck<span class=\"sy1\">.</span><span class=\"me1\">Destroy</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  c<span class=\"sy1\">:</span> TCard<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FCards<span class=\"sy1\">.</span><span class=\"me1\">Count</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>    c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FCards<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    FCards<span class=\"sy1\">.</span><span class=\"kw3\">Delete</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    c<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  FCards<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">inherited</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> TDeck<span class=\"sy1\">.</span><span class=\"me1\">Shuffle</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span> j<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  temp<span class=\"sy1\">:</span> TCard<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Randomize<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FCards<span class=\"sy1\">.</span><span class=\"me1\">Count</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>    j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Random</span><span class=\"br0\">(</span>FCards<span class=\"sy1\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    temp <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FCards<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    FCards<span class=\"sy1\">.</span><span class=\"kw3\">Delete</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    FCards<span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>temp<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> TDeck<span class=\"sy1\">.</span><span class=\"me1\">ToString</span><span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> FCards<span class=\"sy1\">.</span><span class=\"me1\">Count</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>TCard<span class=\"br0\">(</span>FCards<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">with</span> TDeck<span class=\"sy1\">.</span><span class=\"me1\">Create</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">try</span><br/>    Shuffle<span class=\"sy1\">;</span><br/>    ToString<span class=\"sy1\">;</span><br/>    Writeln<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">with</span> Deal <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">try</span><br/>      <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>ToString<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">finally</span><br/>      Free<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">finally</span><br/>    Free<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  Readln<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "E", "loc": 41, "block": "<pre class=\"text highlighted_source\">defmodule Card do<br/>  defstruct pip: nil, suit: nil<br/>end<br/>\u00a0<br/>defmodule Playing_cards do<br/>  @pips   ~w[2 3 4 5 6 7 8 9 10 Jack Queen King Ace]a<br/>  @suits  ~w[Clubs Hearts Spades Diamonds]a<br/>  @pip_value   Enum.with_index(@pips)<br/>  @suit_value  Enum.with_index(@suits)<br/>\u00a0<br/>  def deal( n_cards, deck ), do: Enum.split( deck, n_cards )<br/>\u00a0<br/>  def deal( n_hands, n_cards, deck ) do<br/>    Enum.reduce(1..n_hands, {[], deck}, fn _,{acc,d} -&gt;<br/>      {hand, new_d} = deal(n_cards, d)<br/>      {[hand | acc], new_d}<br/>    end)<br/>  end<br/>\u00a0<br/>  def deck, do: (for x &lt;- @suits, y &lt;- @pips, do:\u00a0%Card{suit: x, pip: y})<br/>\u00a0<br/>  def print( cards ), do: IO.puts (for x &lt;- cards, do: \"\\t#{inspect x}\")<br/>\u00a0<br/>  def shuffle( deck ), do: Enum.shuffle( deck )<br/>\u00a0<br/>  def sort_pips( cards ), do: Enum.sort_by( cards, &amp;@pip_value[&amp;1.pip] )<br/>\u00a0<br/>  def sort_suits( cards ), do: Enum.sort_by( cards, &amp;(@suit_value[&amp;1.suit]) )<br/>\u00a0<br/>  def task do<br/>    shuffled = shuffle( deck )<br/>    {hand, new_deck} = deal( 3, shuffled )<br/>    {hands, _deck} = deal( 2, 3, new_deck )<br/>    IO.write \"Hand:\"<br/>    print( hand )<br/>    IO.puts \"Hands:\"<br/>    for x &lt;- hands, do: print(x)<br/>  end<br/>end<br/>\u00a0<br/>Playing_cards.task</pre>"}, {"lang": "Elixir", "loc": 41, "block": "<pre class=\"text highlighted_source\">defmodule Card do<br/>  defstruct pip: nil, suit: nil<br/>end<br/>\u00a0<br/>defmodule Playing_cards do<br/>  @pips   ~w[2 3 4 5 6 7 8 9 10 Jack Queen King Ace]a<br/>  @suits  ~w[Clubs Hearts Spades Diamonds]a<br/>  @pip_value   Enum.with_index(@pips)<br/>  @suit_value  Enum.with_index(@suits)<br/>\u00a0<br/>  def deal( n_cards, deck ), do: Enum.split( deck, n_cards )<br/>\u00a0<br/>  def deal( n_hands, n_cards, deck ) do<br/>    Enum.reduce(1..n_hands, {[], deck}, fn _,{acc,d} -&gt;<br/>      {hand, new_d} = deal(n_cards, d)<br/>      {[hand | acc], new_d}<br/>    end)<br/>  end<br/>\u00a0<br/>  def deck, do: (for x &lt;- @suits, y &lt;- @pips, do:\u00a0%Card{suit: x, pip: y})<br/>\u00a0<br/>  def print( cards ), do: IO.puts (for x &lt;- cards, do: \"\\t#{inspect x}\")<br/>\u00a0<br/>  def shuffle( deck ), do: Enum.shuffle( deck )<br/>\u00a0<br/>  def sort_pips( cards ), do: Enum.sort_by( cards, &amp;@pip_value[&amp;1.pip] )<br/>\u00a0<br/>  def sort_suits( cards ), do: Enum.sort_by( cards, &amp;(@suit_value[&amp;1.suit]) )<br/>\u00a0<br/>  def task do<br/>    shuffled = shuffle( deck )<br/>    {hand, new_deck} = deal( 3, shuffled )<br/>    {hands, _deck} = deal( 2, 3, new_deck )<br/>    IO.write \"Hand:\"<br/>    print( hand )<br/>    IO.puts \"Hands:\"<br/>    for x &lt;- hands, do: print(x)<br/>  end<br/>end<br/>\u00a0<br/>Playing_cards.task</pre>"}, {"lang": "Erlang", "loc": 40, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> playing_cards <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>deal<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> deal<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> deck<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> print<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> shuffle<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> sort_pips<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> sort_suites<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">record</span><span class=\"br0\">(</span> card<span class=\"sy1\">,</span> <span class=\"br0\">{</span>pip<span class=\"sy1\">,</span> suite<span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">spec</span><span class=\"br0\">(</span> <span class=\"re3\">deal</span><span class=\"br0\">(</span> <span class=\"re5\">N_cards</span>::<span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Deck</span>::<span class=\"br0\">[</span>#<span class=\"re7\">card</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">Hand</span>::<span class=\"br0\">[</span>#<span class=\"re7\">card</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Deck</span>::<span class=\"br0\">[</span>#<span class=\"re7\">card</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">deal</span><span class=\"br0\">(</span> <span class=\"re5\">N_cards</span><span class=\"sy1\">,</span> <span class=\"re5\">Deck</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">split</span><span class=\"br0\">(</span> <span class=\"re5\">N_cards</span><span class=\"sy1\">,</span> <span class=\"re5\">Deck</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">spec</span><span class=\"br0\">(</span> <span class=\"re3\">deal</span><span class=\"br0\">(</span> <span class=\"re5\">N_hands</span>::<span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">N_cards</span>::<span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Deck</span>::<span class=\"br0\">[</span>#<span class=\"re7\">card</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">List_of_hands</span>::<span class=\"br0\">[</span><span class=\"br0\">[</span>#<span class=\"re7\">card</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Deck</span>::<span class=\"br0\">[</span>#<span class=\"re7\">card</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">deal</span><span class=\"br0\">(</span> <span class=\"re5\">N_hands</span><span class=\"sy1\">,</span> <span class=\"re5\">N_cards</span><span class=\"sy1\">,</span> <span class=\"re5\">Deck</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> deal_hands<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">duplicate</span><span class=\"br0\">(</span><span class=\"re5\">N_hands</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Deck</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">N_cards</span> <span class=\"sy3\">*</span> <span class=\"re5\">N_hands</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">deck</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span>#<span class=\"re7\">card</span><span class=\"br0\">{</span>suite<span class=\"sy3\">=</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> pip<span class=\"sy3\">=</span><span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">suites</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">pips</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">print</span><span class=\"br0\">(</span> <span class=\"re5\">Cards</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"\t~p\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Cards</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">nl</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">shuffle</span><span class=\"br0\">(</span> <span class=\"re5\">Deck</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">knuth_shuffle</span>:<span class=\"kw4\">list</span><span class=\"br0\">(</span> <span class=\"re5\">Deck</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">sort_pips</span><span class=\"br0\">(</span> <span class=\"re5\">Cards</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">keysort</span><span class=\"br0\">(</span> #<span class=\"re7\">card</span><span class=\"sy1\">.</span>pip<span class=\"sy1\">,</span> <span class=\"re5\">Cards</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">sort_suites</span><span class=\"br0\">(</span> <span class=\"re5\">Cards</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">keysort</span><span class=\"br0\">(</span> #<span class=\"re7\">card</span><span class=\"sy1\">.</span>suite<span class=\"sy1\">,</span> <span class=\"re5\">Cards</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Deck</span> <span class=\"sy3\">=</span> <span class=\"re3\">deck</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Shuffled</span> <span class=\"sy3\">=</span> <span class=\"re3\">shuffle</span><span class=\"br0\">(</span> <span class=\"re5\">Deck</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">Hand</span><span class=\"sy1\">,</span> <span class=\"re5\">New_deck</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">deal</span><span class=\"br0\">(</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"re5\">Shuffled</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">Hands</span><span class=\"sy1\">,</span> <span class=\"re5\">_Deck</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">deal</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"re5\">New_deck</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Hand:\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">print</span><span class=\"br0\">(</span> <span class=\"re5\">Hand</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Hands:~n\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">[</span><span class=\"re3\">print</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Hands</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">deal_hands</span><span class=\"br0\">(</span> <span class=\"re5\">_N</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re5\">Hand</span> | <span class=\"re5\">T</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Card</span> | <span class=\"re5\">Deck</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">T</span> <span class=\"sy3\">++</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re5\">Card</span> | <span class=\"re5\">Hand</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Deck</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">pips</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"st0\">\"2\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"3\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"4\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"5\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"6\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"7\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"8\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"9\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"10\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Jack\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Queen\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"King\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Ace\"</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">suites</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"st0\">\"Clubs\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Hearts\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Spades\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Diamonds\"</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 19, "block": "<pre class=\"text highlighted_source\">USING: formatting grouping io kernel math qw random sequences<br/>vectors\u00a0;<br/>IN: rosetta-code.playing-cards<br/>\u00a0<br/>CONSTANT: pips  qw{ A 2 3 4 5 6 7 8 9 10 J Q K }<br/>CONSTANT: suits qw{ \u2665 \u2663 \u2666 \u2660 }<br/>\u00a0<br/>: &lt;deck&gt; ( -- vec ) 52 &lt;iota&gt; &gt;vector\u00a0;<br/>\u00a0<br/>: card&gt;str ( n -- str )<br/>    13 /mod [ suits nth ] [ pips nth ] bi* prepend\u00a0;<br/>\u00a0<br/>: print-deck ( seq -- )<br/>    13 group [ [ card&gt;str \"%-4s\" printf ] each nl ] each\u00a0;<br/>\u00a0<br/>&lt;deck&gt;      \u00a0! make new deck<br/>randomize   \u00a0! shuffle the deck<br/>dup pop drop\u00a0! deal from the deck (and discard)<br/>print-deck  \u00a0! print the deck</pre>"}, {"lang": "Fantom", "loc": 68, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>enum class Suit { clubs, diamonds, hearts, spades }<br/>enum class Pips { ace, two, three, four, five, <br/>  six, seven, eight, nine, ten, jack, queen, king<br/>}<br/>\u00a0<br/>class Card<br/>{<br/>  readonly Suit suit<br/>  readonly Pips pips<br/>\u00a0<br/>  new make (Suit suit, Pips pips)<br/>  {<br/>    this.suit = suit<br/>    this.pips = pips<br/>  }<br/>\u00a0<br/>  override Str toStr () <br/>  {<br/>    \"card: $pips of $suit\"<br/>  }<br/>}<br/>\u00a0<br/>class Deck<br/>{<br/>  Card[] deck\u00a0:= [,]<br/>\u00a0<br/>  new make ()<br/>  {<br/>    Suit.vals.each |val|<br/>    {<br/>      Pips.vals.each |pip| { deck.add (Card(val, pip)) }<br/>    }<br/>  }<br/>\u00a0<br/>  Void shuffle (Int swaps\u00a0:= 50)<br/>  {<br/>    swaps.times { deck.swap(Int.random(0..deck.size-1), Int.random(0..deck.size-1)) }<br/>  }<br/>\u00a0<br/>  Card[] deal (Int cards\u00a0:= 1)<br/>  {<br/>    if (cards &gt; deck.size) throw ArgErr(\"$cards is larger than ${deck.size}\")<br/>    Card[] result\u00a0:= [,]<br/>    cards.times { result.push (deck.removeAt (0)) }<br/>    return result<br/>  }<br/>\u00a0<br/>  Void show ()<br/>  {<br/>    deck.each |card| { echo (card.toStr) }<br/>  }<br/>}<br/>\u00a0<br/>class PlayingCards<br/>{<br/>  public static Void main ()<br/>  {<br/>    deck\u00a0:= Deck()<br/>    deck.shuffle<br/>    Card[] hand\u00a0:= deck.deal (7)<br/>    echo (\"Dealt hand is:\")<br/>    hand.each |card| { echo (card.toStr) }<br/>    echo (\"Remaining deck is:\")<br/>    deck.show<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 32, "block": "<pre class=\"text highlighted_source\">require random.fs   \\ RANDOM ( n -- 0..n-1 ) is called CHOOSE in other Forths<br/>\u00a0<br/>create pips  s\" A23456789TJQK\" mem,<br/>create suits s\" DHCS\"          mem, \\ diamonds, hearts, clubs, spades<br/>: .card ( c -- )<br/>  13 /mod swap<br/>  pips  + <a class=\"__cf_email__\" data-cfemail=\"c4a784\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> emit<br/>  suits + <a class=\"__cf_email__\" data-cfemail=\"385b78\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> emit\u00a0;<br/>\u00a0<br/>create deck 52 allot<br/>variable dealt<br/>\u00a0<br/>: new-deck<br/>  52 0        do i deck i + c!             loop  0 dealt\u00a0!\u00a0;<br/>: .deck<br/>  52 dealt @\u00a0?do   deck i + <a class=\"__cf_email__\" data-cfemail=\"b5d6f5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> .card space loop  cr\u00a0;<br/>: shuffle<br/>  51 0 do<br/>    52 i - random i + ( rand-index ) deck +<br/>    deck i + <a class=\"__cf_email__\" data-cfemail=\"6e0d2e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  over <a class=\"__cf_email__\" data-cfemail=\"422102\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    deck i + c!  swap c!<br/>  loop\u00a0;<br/>: cards-left ( -- n ) 52 dealt @ -\u00a0;<br/>: deal-card ( -- c )<br/>  cards-left 0= abort\" Deck empty!\"<br/>  deck dealt @ + <a class=\"__cf_email__\" data-cfemail=\"a9cae9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  1 dealt +!\u00a0;<br/>: .hand ( n -- )<br/>  0 do deal-card .card space loop cr\u00a0;<br/>\u00a0<br/>new-deck shuffle .deck<br/>5 .hand<br/>cards-left .  \\ 47</pre>"}, {"lang": "Fortran", "loc": 66, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">MODULE</span> Cards<br/>\u00a0<br/><span class=\"kw3\">IMPLICIT</span> <span class=\"kw3\">NONE</span><br/>\u00a0<br/>  <span class=\"kw3\">TYPE</span> Card<br/>    <span class=\"kw3\">CHARACTER</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">value</span><br/>    <span class=\"kw3\">CHARACTER</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">suit</span><br/>  <span class=\"kw1\">END</span> <span class=\"kw3\">TYPE</span> Card<br/>\u00a0<br/>  <span class=\"kw3\">TYPE</span><span class=\"br0\">(</span>Card<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">deck</span><span class=\"br0\">(</span><span class=\"nu0\">52</span><span class=\"br0\">)</span>, hand<span class=\"br0\">(</span><span class=\"nu0\">52</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">TYPE</span><span class=\"br0\">(</span>Card<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">temp</span><br/>\u00a0<br/>  <span class=\"kw3\">CHARACTER</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">pip</span><span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"st0\">\"Two  \"</span>, <span class=\"st0\">\"Three\"</span>, <span class=\"st0\">\"Four \"</span>, <span class=\"st0\">\"Five \"</span>, <span class=\"st0\">\"Six  \"</span>, <span class=\"st0\">\"Seven\"</span>, <span class=\"st0\">\"Eight\"</span>, <span class=\"st0\">\"Nine \"</span>, <span class=\"st0\">\"Ten  \"</span>, <span class=\"sy0\">&amp;</span><br/>                              <span class=\"st0\">\"Jack \"</span>, <span class=\"st0\">\"Queen\"</span>, <span class=\"st0\">\"King \"</span>, <span class=\"st0\">\"Ace  \"</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">CHARACTER</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">suits</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"st0\">\"Clubs   \"</span>, <span class=\"st0\">\"Diamonds\"</span>, <span class=\"st0\">\"Hearts  \"</span>, <span class=\"st0\">\"Spades  \"</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j, n, rand, dealt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw3\">REAL</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>\u00a0<br/><span class=\"co1\">CONTAINS</span><br/>\u00a0<br/>  <span class=\"kw1\">SUBROUTINE</span> Init_deck<br/>  <span class=\"co1\">! Create deck</span><br/>    <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">4</span><br/>      <span class=\"kw1\">DO</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">13</span><br/>        deck<span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">13</span><span class=\"sy0\">+</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Card<span class=\"br0\">(</span>pip<span class=\"br0\">(</span>j<span class=\"br0\">)</span>, suits<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> Init_deck<br/>\u00a0<br/>  <span class=\"kw1\">SUBROUTINE</span> Shuffle_deck<br/>  <span class=\"co1\">! Shuffle deck using Fisher-Yates algorithm</span><br/>    <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">52</span><span class=\"sy0\">-</span>dealt, <span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      <span class=\"kw1\">CALL</span> <span class=\"kw4\">RANDOM_NUMBER</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>      rand <span class=\"sy0\">=</span> <span class=\"kw4\">INT</span><span class=\"br0\">(</span>x <span class=\"sy0\">*</span> i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      temp <span class=\"sy0\">=</span> deck<span class=\"br0\">(</span>rand<span class=\"br0\">)</span><br/>      deck<span class=\"br0\">(</span>rand<span class=\"br0\">)</span> <span class=\"sy0\">=</span> deck<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      deck<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> temp<br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> Shuffle_deck<br/>\u00a0<br/>  <span class=\"kw1\">SUBROUTINE</span> Deal_hand<span class=\"br0\">(</span><span class=\"kw1\">number</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">! Deal from deck to hand</span><br/>    <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"kw1\">number</span><br/>    <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw1\">number</span><br/>      hand<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> deck<span class=\"br0\">(</span>dealt<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      dealt <span class=\"sy0\">=</span> dealt <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span><br/>\u00a0<br/>  <span class=\"kw1\">SUBROUTINE</span> Print_hand<br/>  <span class=\"co1\">! Print cards in hand</span><br/>    <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, dealt<br/>      WRITE <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(3A)\"</span><span class=\"br0\">)</span> <span class=\"kw4\">TRIM</span><span class=\"br0\">(</span>deck<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">%</span>value<span class=\"br0\">)</span>, <span class=\"st0\">\" of \"</span>, <span class=\"kw4\">TRIM</span><span class=\"br0\">(</span>deck<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">%</span>suit<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>    WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> Print_hand<br/>\u00a0<br/>  <span class=\"kw1\">SUBROUTINE</span> Print_deck<br/>  <span class=\"co1\">! Print cards in deck</span><br/>    <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> dealt<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, <span class=\"nu0\">52</span><br/>      WRITE <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(3A)\"</span><span class=\"br0\">)</span> <span class=\"kw4\">TRIM</span><span class=\"br0\">(</span>deck<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">%</span>value<span class=\"br0\">)</span>, <span class=\"st0\">\" of \"</span>, <span class=\"kw4\">TRIM</span><span class=\"br0\">(</span>deck<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">%</span>suit<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>    WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> Print_deck<br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">MODULE</span> Cards</pre>"}, {"lang": "Go", "loc": 174, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> cards<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"math/rand\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// A Suit represents one of the four standard suites.</span><br/><span class=\"kw1\">type</span> Suit <span class=\"kw4\">uint8</span><br/>\u00a0<br/><span class=\"co1\">// The four standard suites.</span><br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>\tSpade   Suit <span class=\"sy2\">=</span> <span class=\"nu0\">3</span><br/>\tHeart   Suit <span class=\"sy2\">=</span> <span class=\"nu0\">2</span><br/>\tDiamond Suit <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>\tClub    Suit <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s Suit<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">const</span> suites <span class=\"sy2\">=</span> <span class=\"st0\">\"CDHS\"</span> <span class=\"co1\">// or \"\u2663\u2662\u2661\u2660\"</span><br/>\t<span class=\"kw1\">return</span> suites<span class=\"sy1\">[</span>s <span class=\"sy1\">:</span> s<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Rank is the rank or pip value of a card from Ace==1 to King==13.</span><br/><span class=\"kw1\">type</span> Rank <span class=\"kw4\">uint8</span><br/>\u00a0<br/><span class=\"co1\">// The ranks from Ace to King.</span><br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>\tAce   Rank <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>\tTwo   Rank <span class=\"sy2\">=</span> <span class=\"nu0\">2</span><br/>\tThree Rank <span class=\"sy2\">=</span> <span class=\"nu0\">3</span><br/>\tFour  Rank <span class=\"sy2\">=</span> <span class=\"nu0\">4</span><br/>\tFive  Rank <span class=\"sy2\">=</span> <span class=\"nu0\">5</span><br/>\tSix   Rank <span class=\"sy2\">=</span> <span class=\"nu0\">6</span><br/>\tSeven Rank <span class=\"sy2\">=</span> <span class=\"nu0\">7</span><br/>\tEight Rank <span class=\"sy2\">=</span> <span class=\"nu0\">8</span><br/>\tNine  Rank <span class=\"sy2\">=</span> <span class=\"nu0\">9</span><br/>\tTen   Rank <span class=\"sy2\">=</span> <span class=\"nu0\">10</span><br/>\tJack  Rank <span class=\"sy2\">=</span> <span class=\"nu0\">11</span><br/>\tQueen Rank <span class=\"sy2\">=</span> <span class=\"nu0\">12</span><br/>\tKing  Rank <span class=\"sy2\">=</span> <span class=\"nu0\">13</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>r Rank<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">const</span> ranks <span class=\"sy2\">=</span> <span class=\"st0\">\"A23456789TJQK\"</span><br/>\t<span class=\"kw1\">return</span> ranks<span class=\"sy1\">[</span>r<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">:</span> r<span class=\"sy1\">]</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// A Card represets a specific playing card.</span><br/><span class=\"co1\">// It's an encoded representation of Rank and Suit</span><br/><span class=\"co1\">// with a valid range of [0,51].</span><br/><span class=\"kw1\">type</span> Card <span class=\"kw4\">uint8</span><br/>\u00a0<br/><span class=\"co1\">// NewCard returns the Card representation for the specified rank and suit.</span><br/><span class=\"kw4\">func</span> NewCard<span class=\"sy1\">(</span>r Rank<span class=\"sy1\">,</span> s Suit<span class=\"sy1\">)</span> Card <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">return</span> Card<span class=\"sy1\">(</span><span class=\"nu0\">13</span><span class=\"sy3\">*</span><span class=\"kw4\">uint8</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"kw4\">uint8</span><span class=\"sy1\">(</span>r<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// RankSuit returns the rank and suit of the card.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c Card<span class=\"sy1\">)</span> RankSuit<span class=\"sy1\">()</span> <span class=\"sy1\">(</span>Rank<span class=\"sy1\">,</span> Suit<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">return</span> Rank<span class=\"sy1\">(</span>c<span class=\"sy3\">%</span><span class=\"nu0\">13</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">),</span> Suit<span class=\"sy1\">(</span>c <span class=\"sy3\">/</span> <span class=\"nu0\">13</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Rank returns the rank of the card.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c Card<span class=\"sy1\">)</span> Rank<span class=\"sy1\">()</span> Rank <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">return</span> Rank<span class=\"sy1\">(</span>c<span class=\"sy3\">%</span><span class=\"nu0\">13</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Suit returns the suit of the card.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c Card<span class=\"sy1\">)</span> Suit<span class=\"sy1\">()</span> Suit <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">return</span> Suit<span class=\"sy1\">(</span>c <span class=\"sy3\">/</span> <span class=\"nu0\">13</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c Card<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">return</span> c<span class=\"sy3\">.</span>Rank<span class=\"sy1\">()</span><span class=\"sy3\">.</span>String<span class=\"sy1\">()</span> <span class=\"sy3\">+</span> c<span class=\"sy3\">.</span>Suit<span class=\"sy1\">()</span><span class=\"sy3\">.</span>String<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// A Deck represents a set of zero or more cards in a specific order.</span><br/><span class=\"kw1\">type</span> Deck <span class=\"sy1\">[]</span>Card<br/>\u00a0<br/><span class=\"co1\">// NewDeck returns a regular 52 deck of cards in A-K order.</span><br/><span class=\"kw4\">func</span> NewDeck<span class=\"sy1\">()</span> Deck <span class=\"sy1\">{</span><br/>\td <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>Deck<span class=\"sy1\">,</span> <span class=\"nu0\">52</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> d <span class=\"sy1\">{</span><br/>\t\td<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> Card<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> d<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// String returns a string representation of the cards in the deck with</span><br/><span class=\"co1\">// a newline ('\\n') separating the cards into groups of thirteen.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>d Deck<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\ts <span class=\"sy2\">:=</span> <span class=\"st0\">\"\"</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> c <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> d <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"nu2\">i</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">:</span> <span class=\"co1\">// do nothing</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"nu2\">i</span><span class=\"sy3\">%</span><span class=\"nu0\">13</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">:</span><br/>\t\t\ts <span class=\"sy2\">+=</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><br/>\t\t<span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>\t\t\ts <span class=\"sy2\">+=</span> <span class=\"st0\">\" \"</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\ts <span class=\"sy2\">+=</span> c<span class=\"sy3\">.</span>String<span class=\"sy1\">()</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> s<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Shuffle randomises the order of the cards in the deck.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>d Deck<span class=\"sy1\">)</span> Shuffle<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> d <span class=\"sy1\">{</span><br/>\t\tj <span class=\"sy2\">:=</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>\t\td<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> d<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> d<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Contains returns true if the specified card is withing the deck.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>d Deck<span class=\"sy1\">)</span> Contains<span class=\"sy1\">(</span>tc Card<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> c <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> d <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> c <span class=\"sy3\">==</span> tc <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// AddDeck adds the specified deck(s) to this one at the end/bottom.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>d <span class=\"sy3\">*</span>Deck<span class=\"sy1\">)</span> AddDeck<span class=\"sy1\">(</span>decks <span class=\"sy4\">...</span>Deck<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> o <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> decks <span class=\"sy1\">{</span><br/>\t\t<span class=\"sy3\">*</span>d <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span><span class=\"sy3\">*</span>d<span class=\"sy1\">,</span> o<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// AddCard adds the specified card to this deck at the end/bottom.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>d <span class=\"sy3\">*</span>Deck<span class=\"sy1\">)</span> AddCard<span class=\"sy1\">(</span>c Card<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"sy3\">*</span>d <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span><span class=\"sy3\">*</span>d<span class=\"sy1\">,</span> c<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Draw removes the selected number of cards from the top of the deck,</span><br/><span class=\"co1\">// returning them as a new deck.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>d <span class=\"sy3\">*</span>Deck<span class=\"sy1\">)</span> Draw<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> Deck <span class=\"sy1\">{</span><br/>\told <span class=\"sy2\">:=</span> <span class=\"sy3\">*</span>d<br/>\t<span class=\"sy3\">*</span>d <span class=\"sy2\">=</span> old<span class=\"sy1\">[</span>n<span class=\"sy1\">:]</span><br/>\t<span class=\"kw1\">return</span> old<span class=\"sy1\">[:</span>n<span class=\"sy1\">:</span>n<span class=\"sy1\">]</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// DrawCard draws a single card off the top of the deck,</span><br/><span class=\"co1\">// removing it from the deck.</span><br/><span class=\"co1\">// It returns false if there are no cards in the deck.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>d <span class=\"sy3\">*</span>Deck<span class=\"sy1\">)</span> DrawCard<span class=\"sy1\">()</span> <span class=\"sy1\">(</span>Card<span class=\"sy1\">,</span> <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span><span class=\"sy3\">*</span>d<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"kw2\">false</span><br/>\t<span class=\"sy1\">}</span><br/>\told <span class=\"sy2\">:=</span> <span class=\"sy3\">*</span>d<br/>\t<span class=\"sy3\">*</span>d <span class=\"sy2\">=</span> old<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span><br/>\t<span class=\"kw1\">return</span> old<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Deal deals out cards from the deck one at a time to multiple players.</span><br/><span class=\"co1\">// The initial hands (decks) of each player are provided as arguments and the</span><br/><span class=\"co1\">// modified hands are returned. The initial hands can be empty or nil.</span><br/><span class=\"co1\">// E.g.\u00a0Deal(7, nil, nil, nil) deals out seven cards to three players</span><br/><span class=\"co1\">// each starting with no cards.</span><br/><span class=\"co1\">// If there are insufficient cards in the deck the hands are partially dealt and</span><br/><span class=\"co1\">// the boolean return is set to false (true otherwise).</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>d <span class=\"sy3\">*</span>Deck<span class=\"sy1\">)</span> Deal<span class=\"sy1\">(</span>cards <span class=\"kw4\">int</span><span class=\"sy1\">,</span> hands <span class=\"sy4\">...</span>Deck<span class=\"sy1\">)</span> <span class=\"sy1\">([]</span>Deck<span class=\"sy1\">,</span> <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; cards<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> hands <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span><span class=\"sy3\">*</span>d<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t\t\t<span class=\"kw1\">return</span> hands<span class=\"sy1\">,</span> <span class=\"kw2\">false</span><br/>\t\t\t<span class=\"sy1\">}</span><br/>\t\t\thands<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>hands<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> <span class=\"sy1\">(</span><span class=\"sy3\">*</span>d<span class=\"sy1\">)[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span><br/>\t\t\t<span class=\"sy3\">*</span>d <span class=\"sy2\">=</span> <span class=\"sy1\">(</span><span class=\"sy3\">*</span>d<span class=\"sy1\">)[</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> hands<span class=\"sy1\">,</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 37, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20import\"><span class=\"kw2\">import</span></a> <span class=\"co2\">groovy.transform.TupleConstructor</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20enum\"><span class=\"kw2\">enum</span></a> Pip <span class=\"br0\">{</span><br/>    ACE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING<br/><span class=\"br0\">}</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20enum\"><span class=\"kw2\">enum</span></a> Suit <span class=\"br0\">{</span><br/>    DIAMONDS, SPADES, HEARTS, CLUBS<br/><span class=\"br0\">}</span><br/>\u00a0<br/>@TupleConstructor<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> Card <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> Pip pip<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> Suit suit<br/>\u00a0<br/>    <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"st0\">\"$pip of $suit\"</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> Deck <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20private\"><span class=\"kw2\">private</span></a> <a href=\"http://www.google.de/search?as_q=LinkedList&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">LinkedList</span></a> cards <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>    Deck<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> reset<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20void\"><span class=\"kw4\">void</span></a> reset<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        cards <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        Suit.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> suit <span class=\"sy0\">-&gt;</span><br/>            Pip.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> pip <span class=\"sy0\">-&gt;</span><br/>                cards <span class=\"sy0\">&lt;&lt;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Card<span class=\"br0\">(</span>pip, suit<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    Card deal<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> cards.<span class=\"me1\">poll</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20void\"><span class=\"kw4\">void</span></a> shuffle<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=Collections&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Collections</span></a>.<span class=\"me1\">shuffle</span> cards <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> cards.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"Empty Deck\"</span>\u00a0: <span class=\"st0\">\"Deck $cards\"</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 27, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random<br/>\u00a0<br/><span class=\"kw1\">data</span> Pip <span class=\"sy0\">=</span> Two <span class=\"sy0\">|</span> Three <span class=\"sy0\">|</span> Four <span class=\"sy0\">|</span> Five <span class=\"sy0\">|</span> Six <span class=\"sy0\">|</span> Seven <span class=\"sy0\">|</span> Eight <span class=\"sy0\">|</span> Nine <span class=\"sy0\">|</span> Ten <span class=\"sy0\">|</span> <br/>           Jack <span class=\"sy0\">|</span> Queen <span class=\"sy0\">|</span> King <span class=\"sy0\">|</span> Ace <br/>  <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Enum\"><span class=\"kw4\">Enum</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bounded\"><span class=\"kw4\">Bounded</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">data</span> Suit <span class=\"sy0\">=</span> Diamonds <span class=\"sy0\">|</span> Spades <span class=\"sy0\">|</span> Hearts <span class=\"sy0\">|</span> Clubs<br/>  <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Enum\"><span class=\"kw4\">Enum</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bounded\"><span class=\"kw4\">Bounded</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Card <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Pip<span class=\"sy0\">,</span> Suit<span class=\"br0\">)</span><br/>\u00a0<br/>fullRange <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bounded\"><span class=\"kw4\">Bounded</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Enum\"><span class=\"kw4\">Enum</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>fullRange <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:minBound\"><span class=\"kw3\">minBound</span></a><span class=\"sy0\">..</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:maxBound\"><span class=\"kw3\">maxBound</span></a><span class=\"br0\">]</span><br/>\u00a0<br/>fullDeck <span class=\"sy0\">::</span> <span class=\"br0\">[</span>Card<span class=\"br0\">]</span><br/>fullDeck <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>pip<span class=\"sy0\">,</span> suit<span class=\"br0\">)</span> <span class=\"sy0\">|</span> pip <span class=\"sy0\">&lt;-</span> fullRange<span class=\"sy0\">,</span> suit <span class=\"sy0\">&lt;-</span> fullRange<span class=\"br0\">]</span><br/>\u00a0<br/>insertAt <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>insertAt <span class=\"nu0\">0</span> x ys     <span class=\"sy0\">=</span> x:ys<br/>insertAt n <span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>     <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:error\"><span class=\"kw3\">error</span></a> <span class=\"st0\">\"insertAt: list too short\"</span><br/>insertAt n x <span class=\"br0\">(</span>y:ys<span class=\"br0\">)</span> <span class=\"sy0\">=</span> y\u00a0: insertAt <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> x ys<br/>\u00a0<br/>shuffle <span class=\"sy0\">::</span> RandomGen g <span class=\"sy0\">=&gt;</span> g <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>shuffle g xs <span class=\"sy0\">=</span> shuffle<span class=\"st0\">' g xs 0 [] where<br/>  shuffle'</span> g <span class=\"br0\">[</span><span class=\"br0\">]</span>     <span class=\"sy0\">_</span> ys <span class=\"sy0\">=</span> ys<br/>  shuffle<span class=\"st0\">' g (x:xs) n ys = shuffle'</span> g<span class=\"st0\">' xs (n+1) (insertAt k x ys) where<br/>    (k,g'</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> randomR <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>n<span class=\"br0\">)</span> g</pre>"}, {"lang": "Icon and Unicon", "loc": 53, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>arglist<span class=\"br0\">)</span><br/>\u00a0<br/>   cards   <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span>                                             <span class=\"co1\"># cards per hand</span><br/>   players <span class=\"sy1\">:=</span> <span class=\"nu0\">5</span>                                             <span class=\"co1\"># players to deal to</span><br/>\u00a0<br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"New deck\u00a0: \"</span><span class=\"sy1\">,</span> showcards<span class=\"br0\">(</span>D <span class=\"sy1\">:=</span> newcarddeck<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>      <span class=\"co1\"># create and show a new deck</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Shuffled\u00a0: \"</span><span class=\"sy1\">,</span> showcards<span class=\"br0\">(</span>D <span class=\"sy1\">:=</span> shufflecards<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co1\"># shuffle it </span><br/>\u00a0<br/>   H <span class=\"sy1\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span>players<span class=\"br0\">)</span> <br/>   <span class=\"kw1\">every</span> H<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> players<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>                              <span class=\"co1\"># hands for each player</span><br/>\u00a0<br/>   <span class=\"kw1\">every</span> <span class=\"br0\">(</span> c <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> cards \t<span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"br0\">(</span> p <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> players <span class=\"br0\">)</span> <span class=\"kw1\">do</span>    <br/>      <span class=\"kw4\">put</span><span class=\"br0\">(</span>H<span class=\"br0\">[</span>p<span class=\"br0\">]</span><span class=\"sy1\">,</span> dealcard<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span>                                <span class=\"co1\"># deal #players hands of #cards</span><br/>\u00a0<br/>   <span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Player #\"</span><span class=\"sy1\">,</span>p <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> players<span class=\"sy1\">,</span><span class=\"st0\">\"'s hand\u00a0: \"</span><span class=\"sy1\">,</span>showcards<span class=\"br0\">(</span>H<span class=\"br0\">[</span>p<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Remaining: \"</span><span class=\"sy1\">,</span>showcards<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span>                        <span class=\"co1\"># show the rest of the deck</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">record</span> card<span class=\"br0\">(</span>suit<span class=\"sy1\">,</span>pip<span class=\"br0\">)</span>                                       <span class=\"co1\">#: datatype for a card suit x pip</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> newcarddeck<span class=\"br0\">(</span><span class=\"br0\">)</span>\t\t\t                    <span class=\"co1\">#: return a new standard deck</span><br/><span class=\"kw2\">local</span> D<br/>\u00a0<br/>   <span class=\"kw1\">every</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>D <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> card<span class=\"br0\">(</span>suits<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>pips<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> D<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> suits<span class=\"br0\">(</span><span class=\"br0\">)</span>\t\t\t\t            <span class=\"co1\">#: generate suits</span><br/>   <span class=\"kw1\">suspend</span> <span class=\"sy1\">!</span><span class=\"br0\">[</span><span class=\"st0\">\"H\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"S\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"D\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"C\"</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> pips<span class=\"br0\">(</span><span class=\"br0\">)</span>\t\t\t\t\t    <span class=\"co1\">#: generate pips</span><br/>   <span class=\"kw1\">suspend</span> <span class=\"sy1\">!</span><span class=\"br0\">[</span><span class=\"st0\">\"2\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"3\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"4\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"5\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"6\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"7\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"8\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"9\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"10\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"J\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"Q\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"K\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"A\"</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> shufflecards<span class=\"br0\">(</span>D<span class=\"br0\">)</span>\t\t\t            <span class=\"co1\">#: shuffle a list of cards</span><br/>   <span class=\"kw1\">every</span> <span class=\"sy1\">!</span>D <span class=\"sy1\">:=:</span> <span class=\"sy1\">?</span>D                                          <span class=\"co1\"># see INL#9</span><br/>   <span class=\"kw1\">return</span> D<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> dealcard<span class=\"br0\">(</span>D<span class=\"br0\">)</span>\t\t\t\t            <span class=\"co1\">#: deal a card (from the top)</span><br/>   <span class=\"kw1\">return</span> <span class=\"kw4\">get</span><span class=\"br0\">(</span>D<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> showcards<span class=\"br0\">(</span>D<span class=\"br0\">)</span>\t\t\t                    <span class=\"co1\">#: return a string of all cards in the given list (deck/hand/etc.)</span><br/><span class=\"kw2\">local</span> s<br/>   <span class=\"kw1\">every</span> <span class=\"br0\">(</span>s <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy1\">||:=</span> card2string<span class=\"br0\">(</span><span class=\"sy1\">!</span>D<span class=\"br0\">)</span> <span class=\"sy1\">||</span> <span class=\"st0\">\" \"</span> <br/>   <span class=\"kw1\">return</span> s<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> card2string<span class=\"br0\">(</span>x<span class=\"br0\">)</span>\t\t\t            <span class=\"co1\">#: return a string version of a card</span><br/>   <span class=\"kw1\">return</span> x<span class=\"sy1\">.</span><span class=\"me1\">pip</span> <span class=\"sy1\">||</span> x<span class=\"sy1\">.</span><span class=\"me1\">suit</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 42, "block": "<pre class=\"j highlighted_source\"><span class=\"co1\">NB. playingcards.ijs</span><br/><span class=\"co1\">NB. Defines a Rosetta Code playing cards class</span><br/><span class=\"co1\">NB. Multiple decks may be used, one for each instance of this class.</span><br/>\u00a0<br/>coclass <span class=\"st_h\">'rcpc'</span>    <span class=\"co1\">NB. Rosetta Code playing cards class</span><br/>\u00a0<br/><span class=\"co1\">NB. Class objects</span><br/>Ranks=: <span class=\"nu0\">_2</span> ]\\ <span class=\"st_h\">' A 2 3 4 5 6 7 8 910 J Q K'</span><br/>Suits=: ucp <span class=\"st_h\">'\u2666\u2663\u2665\u2660'</span><br/>DeckPrototype=: <span class=\"sy0\">(</span>] #: <a class=\"__cf_email__\" data-cfemail=\"e78ec9a7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:*/<span class=\"sy0\">)</span>Ranks ,&amp;# Suits<br/>\u00a0<br/><span class=\"co1\">NB. Class methods</span><br/>create=: monad define<br/> 1: TheDeck=: DeckPrototype<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>destroy=: codestroy<br/>\u00a0<br/>sayCards=: <span class=\"sy0\">(</span>{&amp;<a class=\"__cf_email__\" data-cfemail=\"f2a0939c9981b2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{. , {&amp;<a class=\"__cf_email__\" data-cfemail=\"b5e6c0dcc1c6f5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{:<span class=\"sy0\">)</span>\"<span class=\"nu0\">1</span><br/>\u00a0<br/>shuffle=: monad define<br/> 1: TheDeck=: <span class=\"sy0\">(</span>{~\u00a0<a class=\"__cf_email__\" data-cfemail=\"92adecd2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#<span class=\"sy0\">)</span> TheDeck<br/><span class=\"sy0\">)</span><br/>\u00a0<br/><span class=\"co1\">NB.*dealCards v Deals y cards [to x players]</span><br/><span class=\"co1\">NB. x is: optional number of players, defaults to one</span><br/><span class=\"co1\">NB. Used monadically, the player-axis is omitted from output.</span><br/>dealCards=: verb define<br/> {. <span class=\"nu0\">1</span> dealCards <span class=\"kw2\">y</span><br/>:<br/> <span class=\"st_h\">'Too few cards in deck'</span> assert <span class=\"sy0\">(</span># TheDeck<span class=\"sy0\">)</span> &gt;: ToBeDealt=. <span class=\"kw2\">x</span>*<span class=\"kw2\">y</span><br/> CardsOffTop=. ToBeDealt {. TheDeck<br/> TheDeck    =: ToBeDealt }. TheDeck<br/> <span class=\"sy0\">(</span><span class=\"kw2\">x</span>,<span class=\"kw2\">y</span><span class=\"sy0\">)</span>$ CardsOffTop<br/><span class=\"sy0\">)</span><br/>\u00a0<br/><span class=\"co1\">NB.*pcc v \"Print\" current contents of the deck.</span><br/>pcc=: monad define<br/> sayCards TheDeck<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>newDeck_z_=: conew&amp;<span class=\"st_h\">'rcpc'</span></pre>"}, {"lang": "Java", "loc": 2, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">enum</span> Pip <span class=\"br0\">{</span> Two, Three, Four, Five, Six, Seven, <br/>    Eight, Nine, Ten, Jack, Queen, King, Ace <span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 31, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> Card<span class=\"br0\">(</span>pip<span class=\"sy0\">,</span> suit<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">pip</span> <span class=\"sy0\">=</span> pip<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">suit</span> <span class=\"sy0\">=</span> suit<span class=\"sy0\">;</span> <br/>\u00a0<br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">toString</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">this</span>.<span class=\"me1\">pip</span> <span class=\"sy0\">+</span> <span class=\"st0\">' '</span> <span class=\"sy0\">+</span> <span class=\"kw1\">this</span>.<span class=\"me1\">suit</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Deck<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> pips <span class=\"sy0\">=</span> <span class=\"st0\">'2 3 4 5 6 7 8 9 10 Jack Queen King Ace'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> suits <span class=\"sy0\">=</span> <span class=\"st0\">'Clubs Hearts Spades Diamonds'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">deck</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> suits.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> pips.<span class=\"me1\">length</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">deck</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Card<span class=\"br0\">(</span>pips<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> suits<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">toString</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">'['</span> <span class=\"sy0\">+</span> <span class=\"kw1\">this</span>.<span class=\"me1\">deck</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">']'</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">shuffle</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"kw1\">this</span>.<span class=\"me1\">deck</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">deck</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">this</span>.<span class=\"me1\">deck</span>.<span class=\"me1\">splice</span><span class=\"br0\">(</span><br/>                parseInt<span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">deck</span>.<span class=\"me1\">length</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw1\">this</span>.<span class=\"me1\">deck</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">deal</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">this</span>.<span class=\"me1\">deck</span>.<span class=\"me1\">shift</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>type DeckDesign{T&lt;:Integer,U&lt;:String}<br/>    rlen::T<br/>    slen::T<br/>    ranks::Array{U,1}<br/>    suits::Array{U,1}<br/>    hlen::T<br/>end<br/>\u00a0<br/>type Deck{T&lt;:Integer}<br/>    cards::Array{T,1}<br/>    design::DeckDesign<br/>end<br/>\u00a0<br/>Deck(n::Integer, des::DeckDesign) = Deck([n], des)<br/>\u00a0<br/>function pokerlayout()<br/>    r = [map(string, 2:10), \"J\", \"Q\", \"K\", \"A\"]<br/>    r = map(utf8, r)<br/>    s = [\"\\u2663\", \"\\u2666\", \"\\u2665\", \"\\u2660\"]<br/>    DeckDesign(13, 4, r, s, 5)<br/>end<br/>\u00a0<br/>function fresh(des::DeckDesign)<br/>    Deck(collect(1:des.rlen*des.slen), des)<br/>end<br/>\u00a0</pre>"}, {"lang": "K", "loc": 6, "block": "<pre class=\"text highlighted_source\">   v:\"A23456789TJQK\" / values<br/>   s:\"SHCD\"          / suites<br/>\u00a0<br/>   / create a new deck<br/>   newdeck:{deck::,/s,'\\:v}<br/>   newdeck();</pre>"}, {"lang": "Kotlin", "loc": 51, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> FACES <span class=\"sy0\">=</span> <span class=\"st0\">\"23456789tjqka\"</span><br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> SUITS <span class=\"sy0\">=</span> <span class=\"st0\">\"shdc\"</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun createDeck<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cards <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>suit in SUITS<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>face in FACES<span class=\"br0\">)</span> cards.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"st0\">\"$face$suit\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> cards<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun shuffleDeck<span class=\"br0\">(</span>deck<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> shuffled <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> card <span class=\"sy0\">=</span> deck<span class=\"br0\">[</span>r.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">52</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>card <span class=\"sy0\">!</span>in shuffled<span class=\"br0\">)</span> shuffled.<span class=\"me1\">add</span><span class=\"br0\">(</span>card<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>shuffled.<span class=\"me1\">size</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">52</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> shuffled<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun dealTopDeck<span class=\"br0\">(</span>deck<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span>, n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> deck.<span class=\"me1\">take</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <br/>\u00a0<br/>fun dealBottomDeck<span class=\"br0\">(</span>deck<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span>, n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> deck.<span class=\"me1\">takeLast</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">reversed</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun printDeck<span class=\"br0\">(</span>deck<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until deck.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       print<span class=\"br0\">(</span><span class=\"st0\">\"${deck[i]}  \"</span><span class=\"br0\">)</span><br/>       <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">13</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> || i <span class=\"sy0\">==</span> deck.<span class=\"me1\">size</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> deck <span class=\"sy0\">=</span> createDeck<span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"After creation, deck consists of:\"</span><span class=\"br0\">)</span><br/>    printDeck<span class=\"br0\">(</span>deck<span class=\"br0\">)</span><br/>    deck <span class=\"sy0\">=</span> shuffleDeck<span class=\"br0\">(</span>deck<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>After shuffling, deck consists of:\"</span><span class=\"br0\">)</span><br/>    printDeck<span class=\"br0\">(</span>deck<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dealtTop <span class=\"sy0\">=</span> dealTopDeck<span class=\"br0\">(</span>deck, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>The 10 cards dealt from the top of the deck are:\"</span><span class=\"br0\">)</span><br/>    printDeck<span class=\"br0\">(</span>dealtTop<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dealtBottom <span class=\"sy0\">=</span> dealBottomDeck<span class=\"br0\">(</span>deck, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>The 10 cards dealt from the bottom of the deck are:\"</span><span class=\"br0\">)</span><br/>    printDeck<span class=\"br0\">(</span>dealtBottom<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 92, "block": "<pre class=\"lb highlighted_source\">    <span class=\"kw1\">Dim</span> deckCards<span class=\"br0\">(</span><span class=\"nu0\">52</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> holdCards<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The Sorted Deck\"</span><br/>    <span class=\"kw1\">Call</span> sortDeck<br/>    <span class=\"kw1\">Call</span> dealDeck<br/><span class=\"kw1\">Print</span><span class=\"sy0\">:</span> <span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The Shuffled Deck\"</span><br/>    <span class=\"kw1\">Call</span> shuffleDeck<br/>    <span class=\"kw1\">Call</span> dealDeck<br/><span class=\"kw1\">Print</span><span class=\"sy0\">:</span> <span class=\"kw1\">Print</span><br/>    nPlayers <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>    nCards <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>    ct <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">Redim</span> holdCards<span class=\"br0\">(</span>nPlayers<span class=\"sy0\">,</span> nCards<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Dealing \"</span>;nCards;<span class=\"st0\">\" cards to \"</span>;nPlayers;<span class=\"st0\">\" players\"</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> nPlayers<br/>        <span class=\"kw1\">Print</span> <span class=\"st0\">\"Player #\"</span>;i<span class=\"sy0\">,,</span><br/>    <span class=\"kw1\">Next</span> i<br/>    <span class=\"kw1\">Print</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> nCards<br/>        <span class=\"kw1\">For</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> nPlayers<br/>            ct <span class=\"sy0\">=</span> ct <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            holdCards<span class=\"br0\">(</span>j<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> deckCards<span class=\"br0\">(</span>ct<span class=\"br0\">)</span><br/>            card <span class=\"sy0\">=</span> deckCards<span class=\"br0\">(</span>ct<span class=\"br0\">)</span><br/>            value <span class=\"sy0\">=</span> value<span class=\"br0\">(</span>card<span class=\"br0\">)</span><br/>            suit$ <span class=\"sy0\">=</span> suit$<span class=\"br0\">(</span>card<span class=\"br0\">)</span><br/>            pip$ <span class=\"sy0\">=</span> pip$<span class=\"br0\">(</span>value<span class=\"br0\">)</span><br/>            <span class=\"kw1\">Print</span> card;<span class=\"st0\">\": \"</span>;pip$;<span class=\"st0\">\" of \"</span>;suit$<span class=\"sy0\">,</span><br/>        <span class=\"kw1\">Next</span> j<br/>        <span class=\"kw1\">Print</span><br/>    <span class=\"kw1\">Next</span> i<br/><span class=\"kw1\">Print</span><span class=\"sy0\">:</span> <span class=\"kw1\">Print</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"The cards in memory / array\"</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> nPlayers<br/>        <span class=\"kw1\">Print</span> <span class=\"st0\">\"Player #\"</span>;i;<span class=\"st0\">\" is holding\"</span><br/>        <span class=\"kw1\">For</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> nCards<br/>            card <span class=\"sy0\">=</span> holdCards<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span><br/>            value <span class=\"sy0\">=</span> value<span class=\"br0\">(</span>card<span class=\"br0\">)</span><br/>            suit$ <span class=\"sy0\">=</span> suit$<span class=\"br0\">(</span>card<span class=\"br0\">)</span><br/>            pip$ <span class=\"sy0\">=</span> pip$<span class=\"br0\">(</span>value<span class=\"br0\">)</span><br/>            <span class=\"kw1\">Print</span> card;<span class=\"st0\">\": \"</span>;pip$;<span class=\"st0\">\" of \"</span>;suit$<br/>        <span class=\"kw1\">Next</span> j<br/>        <span class=\"kw1\">Print</span><br/>    <span class=\"kw1\">Next</span> i<br/>\u00a0<br/><span class=\"kw1\">End</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> dealDeck<br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">52</span><br/>        card <span class=\"sy0\">=</span> deckCards<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        value <span class=\"sy0\">=</span> value<span class=\"br0\">(</span>card<span class=\"br0\">)</span><br/>        suit$ <span class=\"sy0\">=</span> suit$<span class=\"br0\">(</span>card<span class=\"br0\">)</span><br/>        pip$ <span class=\"sy0\">=</span> pip$<span class=\"br0\">(</span>value<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Print</span> i<span class=\"sy0\">,</span> card<span class=\"sy0\">,</span> value<span class=\"sy0\">,</span> pip$;<span class=\"st0\">\" of \"</span>;suit$<br/>    <span class=\"kw1\">Next</span> i<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> sortDeck<br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">52</span><br/>        deckCards<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> i<br/>    <span class=\"kw1\">Next</span> i<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> shuffleDeck<br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">52</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1</span> Step <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        x <span class=\"sy0\">=</span> <span class=\"kw2\">Int</span><span class=\"br0\">(</span><span class=\"kw2\">Rnd</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        temp <span class=\"sy0\">=</span> deckCards<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>        deckCards<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">=</span> deckCards<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        deckCards<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> temp<br/>    <span class=\"kw1\">Next</span> i<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> suit$<span class=\"br0\">(</span>deckValue<span class=\"br0\">)</span><br/>    cardSuit$ <span class=\"sy0\">=</span> <span class=\"st0\">\"Spades Hearts Clubs Diamonds\"</span><br/>    suit <span class=\"sy0\">=</span> <span class=\"kw2\">Int</span><span class=\"br0\">(</span>deckValue <span class=\"sy0\">/</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> deckValue <span class=\"kw1\">Mod</span> <span class=\"nu0\">13</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        suit <span class=\"sy0\">=</span> suit <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    suit$ <span class=\"sy0\">=</span> <span class=\"kw1\">Word</span>$<span class=\"br0\">(</span>cardSuit$<span class=\"sy0\">,</span> suit <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> value<span class=\"br0\">(</span>deckValue<span class=\"br0\">)</span><br/>    value <span class=\"sy0\">=</span> deckValue <span class=\"kw1\">Mod</span> <span class=\"nu0\">13</span><br/>    <span class=\"kw1\">If</span> value <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        value <span class=\"sy0\">=</span> <span class=\"nu0\">13</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> pip$<span class=\"br0\">(</span>faceValue<span class=\"br0\">)</span><br/>    pipLabel$ <span class=\"sy0\">=</span> <span class=\"st0\">\"Ace Deuce Three Four Five Six Seven Eight Nine Ten Jack Queen King\"</span><br/>    pip$ <span class=\"sy0\">=</span> <span class=\"kw1\">Word</span>$<span class=\"br0\">(</span>pipLabel$<span class=\"sy0\">,</span> faceValue<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span></pre>"}, {"lang": "Logo", "loc": 33, "block": "<pre class=\"text highlighted_source\">make \"suits {Diamonds Hearts Clubs Spades}<br/>make \"pips {Ace Two Three Four Five Six Seven Eight Nine Ten Jack Queen King}<br/>\u00a0<br/>to card\u00a0:n<br/>  output (sentence item 1 + modulo\u00a0:n 13\u00a0:pips  \"of  item 1 + int quotient\u00a0:n 13\u00a0:suits)<br/>end<br/>\u00a0<br/>to new.deck<br/>  make \"deck listtoarray iseq 0 51<br/>  make \"top 1<br/>end<br/>\u00a0<br/>to swap\u00a0:i\u00a0:j\u00a0:a<br/>  localmake \"t item\u00a0:i\u00a0:a<br/>  setitem\u00a0:i\u00a0:a item\u00a0:j\u00a0:a<br/>  setitem\u00a0:j\u00a0:a\u00a0:t<br/>end<br/>to shuffle.deck<br/>  for [i [count\u00a0:deck] 2] [swap 1 + random\u00a0:i\u00a0:i\u00a0:deck]<br/>end<br/>\u00a0<br/>to show.deck<br/>  for [i\u00a0:top [count\u00a0:deck]] [show card item\u00a0:i\u00a0:deck]<br/>end<br/>\u00a0<br/>to deal.card<br/>  show card item\u00a0:top\u00a0:deck<br/>  make \"top\u00a0:top + 1<br/>end<br/>\u00a0<br/>new.deck<br/>shuffle.deck<br/>repeat 5 [deal.card]</pre>"}, {"lang": "Lua", "loc": 66, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/>suits <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"Clubs\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Diamonds\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Hearts\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Spades\"</span><span class=\"br0\">}</span><br/>faces <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"st0\">\"Jack\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Queen\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"King\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Ace\"</span><span class=\"br0\">}</span><br/><span class=\"co1\">--a stack is a set of cards. a stack of length 1 acts as a card; the stack constructor only creates decks.</span><br/>\u00a0<br/>stack <span class=\"sy0\">=</span> <span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/><span class=\"co1\">--shuffles a stack</span><br/>__unm <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> ret <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"sy0\">#</span>z<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    ret<span class=\"br0\">[</span><span class=\"sy0\">#</span>ret <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">table.remove</span><span class=\"br0\">(</span>z<span class=\"sy0\">,</span><span class=\"kw3\">math.random</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span>ret<span class=\"sy0\">,</span> stack<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/><span class=\"co1\">--puts two stacks together</span><br/>__add <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>z<span class=\"sy0\">,</span> z2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>z2 <span class=\"kw1\">do</span><br/>    z<span class=\"br0\">[</span><span class=\"sy0\">#</span>z<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">table.remove</span><span class=\"br0\">(</span>z2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> z<br/><span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/><span class=\"co1\">--removes n cards from a stack and returns a stack of those cards</span><br/>__sub <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>z<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> ret <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"kw1\">do</span><br/>    ret<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">table.remove</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span>ret<span class=\"sy0\">,</span> stack<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/><span class=\"co1\">--breaks a stack into n equally sized stacks and returns them all</span><br/>deal <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>z<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> ret <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>z<span class=\"sy0\">/</span>n <span class=\"kw1\">do</span><br/>    ret<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">table.remove</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span>ret<span class=\"sy0\">,</span> stack<span class=\"br0\">)</span><span class=\"sy0\">,</span> stack<span class=\"sy0\">.</span>deal<span class=\"br0\">(</span>z<span class=\"sy0\">,</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">return</span> <span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span>ret<span class=\"sy0\">,</span> stack<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/><span class=\"co1\">--returns a and b as strings, concatenated together. Simple enough, right?</span><br/>__concat <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw3\">getmetatable</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">==</span> stack <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">return</span> stack<span class=\"sy0\">.</span>stackstring<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">..</span> b<br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">return</span> a <span class=\"sy0\">..</span> stack<span class=\"sy0\">.</span>stackstring<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/>stackstring <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>st<span class=\"sy0\">,</span> ind<span class=\"br0\">)</span><br/>    ind <span class=\"sy0\">=</span> ind <span class=\"kw2\">or</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">if</span> <span class=\"kw2\">not</span> st<span class=\"br0\">[</span>ind<span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">return</span> st<span class=\"br0\">[</span>ind<span class=\"br0\">]</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span>faces<span class=\"br0\">[</span><span class=\"kw3\">math.ceil</span><span class=\"br0\">(</span>st<span class=\"br0\">[</span>ind<span class=\"br0\">]</span><span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">..</span> <span class=\"st0\">\" of \"</span> <span class=\"sy0\">..</span> suits<span class=\"br0\">[</span>st<span class=\"br0\">[</span>ind<span class=\"br0\">]</span><span class=\"sy0\">%</span><span class=\"nu0\">4</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">..</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">..</span> stack<span class=\"sy0\">.</span>stackstring<span class=\"br0\">(</span>st<span class=\"sy0\">,</span> ind<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"st0\">\"\"</span><br/><span class=\"kw1\">end</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/><span class=\"co1\">--creates a deck</span><br/>__call <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> ret <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">52</span> <span class=\"kw1\">do</span> ret<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span>ret<span class=\"sy0\">,</span>z<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>stack<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">..</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> d <span class=\"sy0\">=</span> stack<span class=\"sy0\">.</span>deal<span class=\"br0\">(</span>stack<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>a <span class=\"sy0\">..</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>b <span class=\"sy0\">+</span> c <span class=\"sy0\">..</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>d <span class=\"sy0\">-</span> <span class=\"nu0\">4</span> <span class=\"sy0\">..</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>b <span class=\"sy0\">..</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "M4", "loc": 40, "block": "<pre class=\"text highlighted_source\">define(`randSeed',141592653)dnl<br/>define(`setRand',<br/>   `define(`randSeed',ifelse(eval($1&lt;10000),1,`eval(20000-$1)',`$1'))')dnl<br/>define(`rand_t',`eval(randSeed^(randSeed&gt;&gt;13))')dnl<br/>define(`random',<br/>   `define(`randSeed',eval((rand_t^(rand_t&lt;&lt;18))&amp;0x7fffffff))randSeed')dnl<br/>define(`for',<br/>   `ifelse($#,0,``$0'',<br/>   `ifelse(eval($2&lt;=$3),1,<br/>   `pushdef(`$1',$2)$4`'popdef(`$1')$0(`$1',incr($2),$3,`$4')')')')dnl<br/>define(`foreach', `pushdef(`$1')_foreach(<a class=\"__cf_email__\" data-cfemail=\"183c58\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)popdef(`$1')')dnl<br/>define(`_arg1', `$1')dnl<br/>define(`_foreach', `ifelse(`$2', `()', `',<br/>   `define(`$1', _arg1$2)$3`'$0(`$1', (shift$2), `$3')')')dnl<br/>define(`new',`define(`$1[size]',0)')dnl<br/>define(`append',<br/>   `define(`$1[size]',incr(defn(`$1[size]')))`'define($1[defn($1[size])],$2)')<br/>define(`deck',<br/>   `new($1)foreach(`x',(Ace,2,3,4,5,6,7,8,9,10,Jack,Queen,King),<br/>      `foreach(`y',(Clubs,Diamonds,Hearts,Spades),<br/>         `append(`$1',`x of y')')')')dnl<br/>define(`show',<br/>   `for(`x',1,defn($1[size]),`defn($1[x])ifelse(x,defn($1[size]),`',`, ')')')dnl<br/>define(`swap',`define($1[$2],defn($1[$4]))define($1[$4],$3)')dnl<br/>define(`shuffle',<br/>   `for(`x',1,defn($1[size]),<br/>      `swap($1,x,defn($1[x]),eval(1+random%defn($1[size])))')')dnl<br/>define(`deal',<br/>   `ifelse($#,0,``$0'',<br/>   `ifelse(defn($1[size]),0,<br/>      `NULL',<br/>      defn($1[defn($1[size])])define($1[size],decr(defn($1[size]))))')')dnl<br/>dnl<br/>deck(`b')<br/>show(`b')<br/>shuffling shuffle(`b')<br/>show(`b')<br/>deal deal(`b')<br/>deal deal(`b')<br/>show(`b')</pre>"}, {"lang": "Mathematica", "loc": 3, "block": "<pre class=\"text highlighted_source\">MakeDeck[]\u00a0:=  Tuples[{{\"Ace \", 2, 3 , 4 , 5, 6 , 7 , 8 , 9 , 10, \"Jack\" , \"Queen\", \"King\"}, {\u2666 , \u2663, \u2665 , \u2660}}]<br/>DeckShuffle[deck_]\u00a0:= RandomSample[deck, <a class=\"__cf_email__\" data-cfemail=\"5519303b32213d153130363e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]<br/>DealFromDeck[]\u00a0:= (<a class=\"__cf_email__\" data-cfemail=\"beeeccd7d0cafef8d7cccdca\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@deck; deck = deck[[2\u00a0;; All]];)</pre>"}, {"lang": "MUMPS", "loc": 43, "block": "<pre class=\"text highlighted_source\">import math<br/>randomize()<br/>\u00a0<br/>proc shuffle[T](x: var seq[T]) =<br/> for i in countdown(x.high, 0):<br/>   let j = random(i + 1)<br/>   swap(x[i], x[j])<br/>\u00a0<br/>type<br/>  Suit = enum \u2665, \u2666, \u2663, \u2660<br/>\u00a0<br/>  Pip = enum c02, c03, c04, c05, c06, c07, c08, c09, c10, cQu, cKi, cAs<br/>\u00a0<br/>  Card = object<br/>    pip: Pip<br/>    suit: Suit<br/>\u00a0<br/>  Deck = object<br/>    cards: seq[Card]<br/>\u00a0<br/>proc `$`(c: Card): string = $c.pip &amp; $c.suit<br/>\u00a0<br/>proc initDeck(): Deck =<br/>  result = Deck(cards: @[])<br/>  for suit in Suit:<br/>    for pip in Pip:<br/>      result.cards.add Card(pip: pip, suit: suit)<br/>\u00a0<br/>proc `$`(d: Deck): string = $d.cards<br/>\u00a0<br/>proc shuffle(d: var Deck) = shuffle(d.cards)<br/>\u00a0<br/>proc deal(d: var Deck): Card =<br/>  d.shuffle()<br/>  d.cards.pop()<br/>\u00a0<br/>var d = initDeck()<br/>echo \"40 cards from a deck:\"<br/>for i in 0..4:<br/>  for j in 0..7:<br/>    stdout.write($d.deal(), \" \")<br/>  echo \"\"<br/>echo \"The remaining cards are: \", $d</pre>"}, {"lang": "Nim", "loc": 43, "block": "<pre class=\"text highlighted_source\">import math<br/>randomize()<br/>\u00a0<br/>proc shuffle[T](x: var seq[T]) =<br/> for i in countdown(x.high, 0):<br/>   let j = random(i + 1)<br/>   swap(x[i], x[j])<br/>\u00a0<br/>type<br/>  Suit = enum \u2665, \u2666, \u2663, \u2660<br/>\u00a0<br/>  Pip = enum c02, c03, c04, c05, c06, c07, c08, c09, c10, cQu, cKi, cAs<br/>\u00a0<br/>  Card = object<br/>    pip: Pip<br/>    suit: Suit<br/>\u00a0<br/>  Deck = object<br/>    cards: seq[Card]<br/>\u00a0<br/>proc `$`(c: Card): string = $c.pip &amp; $c.suit<br/>\u00a0<br/>proc initDeck(): Deck =<br/>  result = Deck(cards: @[])<br/>  for suit in Suit:<br/>    for pip in Pip:<br/>      result.cards.add Card(pip: pip, suit: suit)<br/>\u00a0<br/>proc `$`(d: Deck): string = $d.cards<br/>\u00a0<br/>proc shuffle(d: var Deck) = shuffle(d.cards)<br/>\u00a0<br/>proc deal(d: var Deck): Card =<br/>  d.shuffle()<br/>  d.cards.pop()<br/>\u00a0<br/>var d = initDeck()<br/>echo \"40 cards from a deck:\"<br/>for i in 0..4:<br/>  for j in 0..7:<br/>    stdout.write($d.deal(), \" \")<br/>  echo \"\"<br/>echo \"The remaining cards are: \", $d</pre>"}, {"lang": "OCaml", "loc": 15, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">type</span> pip <span class=\"sy0\">=</span> Two <span class=\"sy0\">|</span> Three <span class=\"sy0\">|</span> Four <span class=\"sy0\">|</span> Five <span class=\"sy0\">|</span> Six <span class=\"sy0\">|</span> Seven <span class=\"sy0\">|</span> Eight <span class=\"sy0\">|</span> Nine <span class=\"sy0\">|</span> Ten <span class=\"sy0\">|</span> <br/>           Jack <span class=\"sy0\">|</span> Queen <span class=\"sy0\">|</span> King <span class=\"sy0\">|</span> Ace <br/><span class=\"kw1\">let</span> pips <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Two<span class=\"sy0\">;</span> Three<span class=\"sy0\">;</span> Four<span class=\"sy0\">;</span> Five<span class=\"sy0\">;</span> Six<span class=\"sy0\">;</span> Seven<span class=\"sy0\">;</span> Eight<span class=\"sy0\">;</span> Nine<span class=\"sy0\">;</span> Ten<span class=\"sy0\">;</span><br/>            Jack<span class=\"sy0\">;</span> Queen<span class=\"sy0\">;</span> King<span class=\"sy0\">;</span> Ace<span class=\"br0\">]</span><br/><span class=\"kw1\">type</span> suit <span class=\"sy0\">=</span> Diamonds <span class=\"sy0\">|</span> Spades <span class=\"sy0\">|</span> Hearts <span class=\"sy0\">|</span> Clubs<br/><span class=\"kw1\">let</span> suits <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Diamonds<span class=\"sy0\">;</span> Spades<span class=\"sy0\">;</span> Hearts<span class=\"sy0\">;</span> Clubs<span class=\"br0\">]</span><br/><span class=\"kw1\">type</span> card <span class=\"sy0\">=</span> pip <span class=\"sy0\">*</span> suit<br/><span class=\"kw1\">let</span> full_deck <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>of_list <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>concat <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map <span class=\"br0\">(</span><span class=\"kw1\">fun</span> pip <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map <span class=\"br0\">(</span><span class=\"kw1\">fun</span> suit <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>pip, suit<span class=\"br0\">)</span><span class=\"br0\">)</span> suits<span class=\"br0\">)</span> pips<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> shuffle deck <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length deck <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> j <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> temp <span class=\"sy0\">=</span> deck<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    deck<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> deck<span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    deck<span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> temp<br/>  <span class=\"kw1\">done</span></pre>"}, {"lang": "PARI/GP", "loc": 20, "block": "<pre class=\"parigp highlighted_source\">name<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"A\"</span><span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span><span class=\"nu1\">4</span><span class=\"sy0\">,</span><span class=\"nu1\">5</span><span class=\"sy0\">,</span><span class=\"nu1\">6</span><span class=\"sy0\">,</span><span class=\"nu1\">7</span><span class=\"sy0\">,</span><span class=\"nu1\">8</span><span class=\"sy0\">,</span><span class=\"nu1\">9</span><span class=\"sy0\">,</span><span class=\"nu1\">10</span><span class=\"sy0\">,</span><span class=\"st0\">\"J\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Q\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"K\"</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu1\">3</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;&gt;</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">\"h\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"d\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"s\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"c\"</span><span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"sy0\">%</span><span class=\"nu2\">4</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>newdeck<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  v<span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">52</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>deal<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>n<span class=\"sy0\">=</span>name<span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  v<span class=\"sy0\">=</span><span class=\"kw1\">vecextract</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"sy0\">^</span>#v<span class=\"sy0\">-</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  n<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>printdeck<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">apply</span><span class=\"br0\">(</span>name<span class=\"sy0\">,</span>v<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>shuffle<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">forstep</span><span class=\"br0\">(</span>n<span class=\"sy0\">=</span>#v<span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"sy0\">,-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><br/>    my<span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"kw1\">random</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>t<span class=\"sy0\">=</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>v<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    v<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">=</span>t<br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  v<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 42, "block": "<pre class=\"perl highlighted_source\"><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> Playing_Card_Deck<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">@Playing_Card_Deck</span><span class=\"sy0\">::</span><span class=\"me2\">suits</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><br/>   <span class=\"br0\">[</span>Diamonds Clubs Hearts Spades<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"re0\">@Playing_Card_Deck</span><span class=\"sy0\">::</span><span class=\"me2\">pips</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><br/>   <span class=\"br0\">[</span>Two Three Four Five Six Seven Eight Nine Ten<br/>    Jack King Queen Ace<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"co1\"># I choose to fully qualify these names rather than declare them</span><br/><span class=\"co1\"># with \"our\" to keep them from escaping into the scope of other</span><br/><span class=\"co1\"># packages in the same file. Another possible solution is to use</span><br/><span class=\"co1\"># \"our\" or \"my\", but to enclose this entire package in a bare block.</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> <span class=\"kw2\">new</span><br/><span class=\"co1\"># Creates a new deck-object. The cards are initially neatly ordered.</span><br/> <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">$invocant</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$class</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a><span class=\"br0\">(</span><span class=\"re0\">$invocant</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"re0\">$invocant</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">@cards</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$suit</span> <span class=\"br0\">(</span><span class=\"re0\">@Playing_Card_Deck</span><span class=\"sy0\">::</span><span class=\"me2\">suits</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">{</span><span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$pip</span> <span class=\"br0\">(</span><span class=\"re0\">@Playing_Card_Deck</span><span class=\"sy0\">::</span><span class=\"me2\">pips</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a><span class=\"br0\">(</span><span class=\"re0\">@cards</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span>suit <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$suit</span><span class=\"sy0\">,</span> pip <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$pip</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re0\">@cards</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$class</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> deal<br/><span class=\"co1\"># Removes the top card of the given deck and returns it as a hash</span><br/><span class=\"co1\"># with the keys \"suit\" and \"pip\".</span><br/> <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">%</span><span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"co5\">@_</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> shuffle<br/><span class=\"co1\"># Randomly permutes the cards in the deck. It uses the algorithm</span><br/><span class=\"co1\"># described at:</span><br/><span class=\"co1\"># http://en.wikipedia.org/wiki/Fisher-Yates_shuffle#The_modern_algorithm</span><br/> <span class=\"br0\">{</span><span class=\"kw1\">our</span> <span class=\"re0\">@deck</span><span class=\"sy0\">;</span> <a href=\"http://perldoc.perl.org/functions/local.html\"><span class=\"kw3\">local</span></a> <span class=\"re0\">*deck</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># @deck is now an alias of the invocant's referent.</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$#deck</span> <span class=\"sy0\">;</span> <span class=\"re0\">$n</span> <span class=\"sy0\">;</span> <span class=\"sy0\">--</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">$k</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">@deck</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">@deck</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$k</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"re0\">$k</span> <span class=\"sy0\">!=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> print_cards<br/><span class=\"co1\"># Prints out a description of every card in the deck, in order.</span><br/> <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$_-&gt;{pip} of $_-&gt;{suit}<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">foreach</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"co5\">@_</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 42, "block": "<pre class=\"perl highlighted_source\"><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> Playing_Card_Deck<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">@Playing_Card_Deck</span><span class=\"sy0\">::</span><span class=\"me2\">suits</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><br/>   <span class=\"br0\">[</span>Diamonds Clubs Hearts Spades<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"re0\">@Playing_Card_Deck</span><span class=\"sy0\">::</span><span class=\"me2\">pips</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><br/>   <span class=\"br0\">[</span>Two Three Four Five Six Seven Eight Nine Ten<br/>    Jack King Queen Ace<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"co1\"># I choose to fully qualify these names rather than declare them</span><br/><span class=\"co1\"># with \"our\" to keep them from escaping into the scope of other</span><br/><span class=\"co1\"># packages in the same file. Another possible solution is to use</span><br/><span class=\"co1\"># \"our\" or \"my\", but to enclose this entire package in a bare block.</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> <span class=\"kw2\">new</span><br/><span class=\"co1\"># Creates a new deck-object. The cards are initially neatly ordered.</span><br/> <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">$invocant</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$class</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a><span class=\"br0\">(</span><span class=\"re0\">$invocant</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"re0\">$invocant</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">@cards</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$suit</span> <span class=\"br0\">(</span><span class=\"re0\">@Playing_Card_Deck</span><span class=\"sy0\">::</span><span class=\"me2\">suits</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">{</span><span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$pip</span> <span class=\"br0\">(</span><span class=\"re0\">@Playing_Card_Deck</span><span class=\"sy0\">::</span><span class=\"me2\">pips</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a><span class=\"br0\">(</span><span class=\"re0\">@cards</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span>suit <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$suit</span><span class=\"sy0\">,</span> pip <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$pip</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re0\">@cards</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$class</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> deal<br/><span class=\"co1\"># Removes the top card of the given deck and returns it as a hash</span><br/><span class=\"co1\"># with the keys \"suit\" and \"pip\".</span><br/> <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">%</span><span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"co5\">@_</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> shuffle<br/><span class=\"co1\"># Randomly permutes the cards in the deck. It uses the algorithm</span><br/><span class=\"co1\"># described at:</span><br/><span class=\"co1\"># http://en.wikipedia.org/wiki/Fisher-Yates_shuffle#The_modern_algorithm</span><br/> <span class=\"br0\">{</span><span class=\"kw1\">our</span> <span class=\"re0\">@deck</span><span class=\"sy0\">;</span> <a href=\"http://perldoc.perl.org/functions/local.html\"><span class=\"kw3\">local</span></a> <span class=\"re0\">*deck</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># @deck is now an alias of the invocant's referent.</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$#deck</span> <span class=\"sy0\">;</span> <span class=\"re0\">$n</span> <span class=\"sy0\">;</span> <span class=\"sy0\">--</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">$k</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">@deck</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">@deck</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$k</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"re0\">$k</span> <span class=\"sy0\">!=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> print_cards<br/><span class=\"co1\"># Prints out a description of every card in the deck, in order.</span><br/> <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$_-&gt;{pip} of $_-&gt;{suit}<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">foreach</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"co5\">@_</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 30, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">enum</span> Pip <span class=\"sy0\">&lt;</span>A <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> J Q K<span class=\"sy0\">&gt;;</span><br/><span class=\"kw1\">enum</span> Suit <span class=\"sy0\">&lt;</span>\u2666 \u2663 \u2665 \u2660<span class=\"sy0\">&gt;;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Card <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> Pip <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">pip</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> Suit <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">suit</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> Str <span class=\"br0\">{</span> <span class=\"re0\">$!pip</span> <span class=\"sy0\">~</span> <span class=\"re0\">$!suit</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Deck <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> Card <span class=\"re0\">@</span><span class=\"sy0\">.</span><span class=\"me1\">cards</span> <span class=\"sy0\">=</span> <span class=\"kw3\">pick</span> <span class=\"sy0\">*,</span><br/>            <span class=\"kw3\">map</span> <span class=\"br0\">{</span> Card<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"re0\">$^pip</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$^suit</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> flat <span class=\"br0\">(</span>Pip<span class=\"sy0\">.</span><span class=\"kw3\">pick</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">X</span> Suit<span class=\"sy0\">.</span><span class=\"kw3\">pick</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> shuffle <span class=\"br0\">{</span> <span class=\"re0\">@!cards</span> <span class=\"sy0\">.=</span> <span class=\"kw3\">pick</span><span class=\"sy0\">:</span> <span class=\"sy0\">*</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> deal <span class=\"br0\">{</span> <span class=\"kw3\">shift</span> <span class=\"re0\">@!cards</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> Str  <span class=\"br0\">{</span> <span class=\"sy0\">~</span><span class=\"re0\">@!cards</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">method</span> gist <span class=\"br0\">{</span> <span class=\"sy0\">~</span><span class=\"re0\">@!cards</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> Deck <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> Deck<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Deck: $d\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$top</span> <span class=\"sy0\">=</span> <span class=\"re0\">$d</span><span class=\"sy0\">.</span><span class=\"me1\">deal</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Top card: $top\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$d</span><span class=\"sy0\">.</span><span class=\"me1\">shuffle</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Deck, re-shuffled: \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PHP", "loc": 276, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">class</span> Card<br/><span class=\"br0\">{</span><br/>    <span class=\"co1\">// if unable to save as UTF-8, use other, non-UTF-8, symbols here</span><br/>    <span class=\"kw2\">protected</span> static <span class=\"re0\">$suits</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span> <span class=\"st_h\">'\u2660'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'\u2665'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'\u2666'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'\u2663'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">protected</span> static <span class=\"re0\">$pips</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span> <span class=\"st_h\">'2'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'3'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'4'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'5'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'6'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'7'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'8'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'9'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'T'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'J'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Q'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'K'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'A'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">protected</span> <span class=\"re0\">$suit</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">protected</span> <span class=\"re0\">$suitOrder</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">protected</span> <span class=\"re0\">$pip</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">protected</span> <span class=\"re0\">$pipOrder</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">protected</span> <span class=\"re0\">$order</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> __construct<span class=\"br0\">(</span> <span class=\"re0\">$suit</span><span class=\"sy0\">,</span> <span class=\"re0\">$pip</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">!</span><a href=\"http://www.php.net/in_array\"><span class=\"kw3\">in_array</span></a><span class=\"br0\">(</span> <span class=\"re0\">$suit</span><span class=\"sy0\">,</span> <span class=\"kw2\">self</span><span class=\"sy0\">::</span><span class=\"re0\">$suits</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw2\">new</span> InvalidArgumentException<span class=\"br0\">(</span> <span class=\"st_h\">'Invalid suit'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">!</span><a href=\"http://www.php.net/in_array\"><span class=\"kw3\">in_array</span></a><span class=\"br0\">(</span> <span class=\"re0\">$pip</span><span class=\"sy0\">,</span> <span class=\"kw2\">self</span><span class=\"sy0\">::</span><span class=\"re0\">$pips</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw2\">new</span> InvalidArgumentException<span class=\"br0\">(</span> <span class=\"st_h\">'Invalid pip'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">suit</span> <span class=\"sy0\">=</span> <span class=\"re0\">$suit</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">pip</span> <span class=\"sy0\">=</span> <span class=\"re0\">$pip</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> getSuit<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">suit</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> getPip<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">pip</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> getSuitOrder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">// lazy evaluate suit order</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">!</span><a href=\"http://www.php.net/isset\"><span class=\"kw3\">isset</span></a><span class=\"br0\">(</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">suitOrder</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"co1\">// cache suit order</span><br/>            <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">suitOrder</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array_search\"><span class=\"kw3\">array_search</span></a><span class=\"br0\">(</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">suit</span><span class=\"sy0\">,</span> <span class=\"kw2\">self</span><span class=\"sy0\">::</span><span class=\"re0\">$suits</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">suitOrder</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> getPipOrder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">// lazy evaluate pip order</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">!</span><a href=\"http://www.php.net/isset\"><span class=\"kw3\">isset</span></a><span class=\"br0\">(</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">pipOrder</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"co1\">// cache pip order</span><br/>            <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">pipOrder</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array_search\"><span class=\"kw3\">array_search</span></a><span class=\"br0\">(</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">pip</span><span class=\"sy0\">,</span> <span class=\"kw2\">self</span><span class=\"sy0\">::</span><span class=\"re0\">$pips</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">pipOrder</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> getOrder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">// lazy evaluate order</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">!</span><a href=\"http://www.php.net/isset\"><span class=\"kw3\">isset</span></a><span class=\"br0\">(</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">order</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"re0\">$suitOrder</span> <span class=\"sy0\">=</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getSuitOrder</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$pipOrder</span> <span class=\"sy0\">=</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getPipOrder</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"co1\">// cache order</span><br/>            <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">order</span> <span class=\"sy0\">=</span> <span class=\"re0\">$pipOrder</span> <span class=\"sy0\">*</span> <a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span> <span class=\"kw2\">self</span><span class=\"sy0\">::</span><span class=\"re0\">$suits</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"re0\">$suitOrder</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">order</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> compareSuit<span class=\"br0\">(</span> Card <span class=\"re0\">$other</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getSuitOrder</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"re0\">$other</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getSuitOrder</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> comparePip<span class=\"br0\">(</span> Card <span class=\"re0\">$other</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getPipOrder</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"re0\">$other</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getPipOrder</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> compare<span class=\"br0\">(</span> Card <span class=\"re0\">$other</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getOrder</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"re0\">$other</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getOrder</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> __toString<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">suit</span> <span class=\"sy0\">.</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">pip</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> static <span class=\"kw2\">function</span> getSuits<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">self</span><span class=\"sy0\">::</span><span class=\"re0\">$suits</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> static <span class=\"kw2\">function</span> getPips<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">self</span><span class=\"sy0\">::</span><span class=\"re0\">$pips</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> CardCollection<br/>    implements Countable<span class=\"sy0\">,</span> Iterator<br/><span class=\"br0\">{</span><br/>    <span class=\"kw2\">protected</span> <span class=\"re0\">$cards</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">protected</span> <span class=\"kw2\">function</span> __construct<span class=\"br0\">(</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a> <span class=\"re0\">$cards</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span><span class=\"br0\">(</span> <span class=\"re0\">$cards</span> <span class=\"kw1\">as</span> <span class=\"re0\">$card</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">addCard</span><span class=\"br0\">(</span> <span class=\"re0\">$card</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co4\">/**<br/>      * Countable::count() implementation<br/>      */</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> <a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">cards</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co4\">/**<br/>      * Iterator::key() implementation<br/>      */</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> <a href=\"http://www.php.net/key\"><span class=\"kw3\">key</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <a href=\"http://www.php.net/key\"><span class=\"kw3\">key</span></a><span class=\"br0\">(</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">cards</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co4\">/**<br/>      * Iterator::valid() implementation<br/>      */</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> valid<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">null</span> <span class=\"sy0\">!==</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><a href=\"http://www.php.net/key\"><span class=\"kw3\">key</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co4\">/**<br/>      * Iterator::next() implementation<br/>      */</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> <a href=\"http://www.php.net/next\"><span class=\"kw3\">next</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://www.php.net/next\"><span class=\"kw3\">next</span></a><span class=\"br0\">(</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">cards</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co4\">/**<br/>      * Iterator::current() implementation<br/>      */</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> <a href=\"http://www.php.net/current\"><span class=\"kw3\">current</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <a href=\"http://www.php.net/current\"><span class=\"kw3\">current</span></a><span class=\"br0\">(</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">cards</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co4\">/**<br/>      * Iterator::rewind() implementation<br/>      */</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> <a href=\"http://www.php.net/rewind\"><span class=\"kw3\">rewind</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://www.php.net/reset\"><span class=\"kw3\">reset</span></a><span class=\"br0\">(</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">cards</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> <a href=\"http://www.php.net/sort\"><span class=\"kw3\">sort</span></a><span class=\"br0\">(</span> <span class=\"re0\">$comparer</span> <span class=\"sy0\">=</span> <span class=\"kw4\">null</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$comparer</span> <span class=\"sy0\">=</span> <span class=\"re0\">$comparer</span>\u00a0?<span class=\"sy0\">:</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">compare</span><span class=\"br0\">(</span> <span class=\"re0\">$b</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">!</span><a href=\"http://www.php.net/is_callable\"><span class=\"kw3\">is_callable</span></a><span class=\"br0\">(</span> <span class=\"re0\">$comparer</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw2\">new</span> InvalidArgumentException<span class=\"br0\">(</span> <span class=\"st_h\">'Invalid comparer; comparer should be callable'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://www.php.net/usort\"><span class=\"kw3\">usort</span></a><span class=\"br0\">(</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">cards</span><span class=\"sy0\">,</span> <span class=\"re0\">$comparer</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$this</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> toString<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <a href=\"http://www.php.net/implode\"><span class=\"kw3\">implode</span></a><span class=\"br0\">(</span> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">cards</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> __toString<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">protected</span> <span class=\"kw2\">function</span> addCard<span class=\"br0\">(</span> Card <span class=\"re0\">$card</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <a href=\"http://www.php.net/in_array\"><span class=\"kw3\">in_array</span></a><span class=\"br0\">(</span> <span class=\"re0\">$card</span><span class=\"sy0\">,</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">cards</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw2\">new</span> DomainException<span class=\"br0\">(</span> <span class=\"st_h\">'Card is already present in this collection'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">cards</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$card</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Deck<br/>    <span class=\"kw2\">extends</span> CardCollection<br/><span class=\"br0\">{</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> __construct<span class=\"br0\">(</span> <span class=\"re0\">$shuffled</span> <span class=\"sy0\">=</span> <span class=\"kw4\">false</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span><span class=\"br0\">(</span> Card<span class=\"sy0\">::</span><span class=\"me2\">getSuits</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"re0\">$suit</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">foreach</span><span class=\"br0\">(</span> Card<span class=\"sy0\">::</span><span class=\"me2\">getPips</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"re0\">$pip</span> <span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">addCard</span><span class=\"br0\">(</span> <span class=\"kw2\">new</span> Card<span class=\"br0\">(</span> <span class=\"re0\">$suit</span><span class=\"sy0\">,</span> <span class=\"re0\">$pip</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$shuffled</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><a href=\"http://www.php.net/shuffle\"><span class=\"kw3\">shuffle</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> deal<span class=\"br0\">(</span> <span class=\"re0\">$amount</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> CardCollection <span class=\"re0\">$cardCollection</span> <span class=\"sy0\">=</span> <span class=\"kw4\">null</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">!</span><a href=\"http://www.php.net/is_int\"><span class=\"kw3\">is_int</span></a><span class=\"br0\">(</span> <span class=\"re0\">$amount</span> <span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"re0\">$amount</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw2\">new</span> InvalidArgumentException<span class=\"br0\">(</span> <span class=\"st_h\">'Invalid amount; amount should be an integer, larger than 0'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$amount</span> <span class=\"sy0\">&gt;</span> <a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">cards</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw2\">new</span> RangeException<span class=\"br0\">(</span> <span class=\"st_h\">'Invalid amount; requested amount is larger than the amount of available cards'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"re0\">$cards</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array_splice\"><span class=\"kw3\">array_splice</span></a><span class=\"br0\">(</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">cards</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$amount</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"re0\">$cardCollection</span> <span class=\"sy0\">=</span> <span class=\"re0\">$cardCollection</span>\u00a0?<span class=\"sy0\">:</span> <span class=\"kw2\">new</span> CardCollection<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span><span class=\"br0\">(</span> <span class=\"re0\">$cards</span> <span class=\"kw1\">as</span> <span class=\"re0\">$card</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"re0\">$cardCollection</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">addCard</span><span class=\"br0\">(</span> <span class=\"re0\">$card</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$cardCollection</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> <a href=\"http://www.php.net/shuffle\"><span class=\"kw3\">shuffle</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://www.php.net/shuffle\"><span class=\"kw3\">shuffle</span></a><span class=\"br0\">(</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">cards</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Hand<br/>    <span class=\"kw2\">extends</span> CardCollection<br/><span class=\"br0\">{</span><br/>    <span class=\"co1\">// override CardCollection __constructor</span><br/>    <span class=\"co1\">// to allow public instantiation</span><br/>    <span class=\"co1\">// but disallow instantiation with cards</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> __construct<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> play<span class=\"br0\">(</span> <span class=\"re0\">$position</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">!</span><a href=\"http://www.php.net/isset\"><span class=\"kw3\">isset</span></a><span class=\"br0\">(</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">cards</span><span class=\"br0\">[</span> <span class=\"re0\">$position</span> <span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw2\">new</span> OutOfBoundsException<span class=\"br0\">(</span> <span class=\"st_h\">'Invalid position; position is not present in this hand'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"re0\">$result</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array_splice\"><span class=\"kw3\">array_splice</span></a><span class=\"br0\">(</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">cards</span><span class=\"sy0\">,</span> <span class=\"re0\">$position</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 74, "block": "<pre class=\"text highlighted_source\">--<br/>-- demo\\rosetta\\Playing_cards.exw<br/>--<br/>function deal(sequence deck, integer nhands, integer ncards)<br/>sequence hands = repeat({},nhands)<br/>    for n=1 to ncards do<br/>        for h=1 to nhands do<br/>            hands[h] &amp;= deck[1]<br/>            deck = deck[2..$]<br/>        end for<br/>    end for<br/>    return {deck,hands}<br/>end function<br/>\u00a0<br/>--console:<br/>procedure show_cards(sequence s)<br/>    for i=1 to length(s) do<br/>        integer c = s[i]-1<br/>        string sep = iff(mod(i,13)=0 or i=length(s)?\"\\n\":\" \")<br/>        puts(1,\"23456789TJQKA\"[mod(c,13)+1]&amp;\"SHDC\"[floor(c/13)+1]&amp;sep)<br/>    end for<br/>end procedure<br/>\u00a0<br/>sequence deck, hands<br/>\u00a0<br/>procedure console_show()<br/>    for i=1 to length(hands) do<br/>        printf(1,\"hand%d:\\n\",{i})<br/>        show_cards(sort(hands[i]))<br/>    end for<br/>    printf(1,\"remaining cards(%d):\\n\",{length(deck)})<br/>    show_cards(deck)<br/>end procedure<br/>\u00a0<br/>--GUI:<br/>function cards_to_utf8(sequence s)<br/>sequence utf32 = {}<br/>    for i=1 to length(s) do<br/>        integer c = s[i]<br/>        integer pip = mod(c,13)<br/>        utf32 &amp;= 0x1F0A1 + pip+(pip&gt;10) + floor((c-1)/13)*#10<br/>    end for<br/>    return utf32_to_utf8(utf32)<br/>end function<br/>\u00a0<br/>include pGUI.e<br/>\u00a0<br/>constant FONT = sprintf(\"FONT=\\\"Arial,\u00a0%d\\\"\",{92})<br/>\u00a0<br/>procedure gui_show()<br/>    IupOpen()<br/>    IupSetGlobal(\"UTF8MODE\",\"YES\")<br/>\u00a0<br/>    Ihandles lh = {}<br/>    for i=1 to length(hands) do<br/>        Ihandle l = IupLabel(sprintf(\"hand%d:\",{i}))<br/>        Ihandle h = IupLabel(cards_to_utf8(sort(hands[i])),FONT)<br/>        lh &amp;= l&amp;h<br/>    end for<br/>    lh &amp;= IupLabel(\"remaining cards:\")<br/>    lh &amp;= IupLabel(cards_to_utf8(deck),FONT)<br/>\u00a0<br/>    Ihandle dlg = IupDialog(IupVbox(lh))<br/>    IupShow(dlg)<br/>    IupMainLoop()<br/>    IupClose()<br/>end procedure<br/>\u00a0<br/>constant DECKSIZE=52<br/>deck = shuffle(tagset(DECKSIZE))<br/>show_cards(deck)<br/>{deck,hands} = deal(deck,4,7)<br/>console_show()<br/>gui_show()</pre>"}, {"lang": "PicoLisp", "loc": 13, "block": "<pre class=\"text highlighted_source\">(de *Suits<br/>   Club Diamond Heart Spade )<br/>\u00a0<br/>(de *Pips<br/>   Ace 2 3 4 5 6 7 8 9 10 Jack Queen King )<br/>\u00a0<br/>(de mkDeck ()<br/>   (mapcan<br/>      '((Pip) (mapcar cons *Suits (circ Pip)))<br/>      *Pips ) )<br/>\u00a0<br/>(de shuffle (Lst)<br/>   (by '(NIL (rand)) sort Lst) )</pre>"}, {"lang": "Prolog", "loc": 39, "block": "<pre class=\"prolog highlighted_source\"><span class=\"coMULTI\">/** &lt;module&gt; Cards<br/>\u00a0<br/>  A card is represented by the term \"card(Pip, Suit)\".<br/>  A deck is represented internally as a list of cards.<br/>\u00a0<br/>  Usage:<br/>  new_deck(D0), deck_shuffle(D0, D1), deck_deal(D1, C, D2).<br/>*/</span><br/><span class=\"sy1\">:-</span> module<span class=\"br0\">(</span>cards<span class=\"sy4\">,</span> <span class=\"br0\">[</span> new_deck<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span>     <span class=\"co1\">% -Deck</span><br/>                   deck_shuffle<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> <span class=\"co1\">% +Deck, -NewDeck</span><br/>                   deck_deal<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy4\">,</span>    <span class=\"co1\">% +Deck, -Card, -NewDeck</span><br/>                   print_deck<span class=\"sy3\">/</span><span class=\"nu0\">1</span>    <span class=\"co1\">% +Deck</span><br/>                  <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">%% new_deck(-Deck)</span><br/>new_deck<span class=\"br0\">(</span>Deck<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>        Suits <span class=\"sy6\">=</span> <span class=\"br0\">[</span>clubs<span class=\"sy4\">,</span> hearts<span class=\"sy4\">,</span> spades<span class=\"sy4\">,</span> diamonds<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>        Pips <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> <span class=\"nu0\">3</span><span class=\"sy4\">,</span> <span class=\"nu0\">4</span><span class=\"sy4\">,</span> <span class=\"nu0\">5</span><span class=\"sy4\">,</span> <span class=\"nu0\">6</span><span class=\"sy4\">,</span> <span class=\"nu0\">7</span><span class=\"sy4\">,</span> <span class=\"nu0\">8</span><span class=\"sy4\">,</span> <span class=\"nu0\">9</span><span class=\"sy4\">,</span> <span class=\"nu0\">10</span><span class=\"sy4\">,</span> jack<span class=\"sy4\">,</span> queen<span class=\"sy4\">,</span> king<span class=\"sy4\">,</span> ace<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>        <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">setof</span></a><span class=\"br0\">(</span>card<span class=\"br0\">(</span>Pip<span class=\"sy4\">,</span> Suit<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>member<span class=\"br0\">(</span>Suit<span class=\"sy4\">,</span> Suits<span class=\"br0\">)</span><span class=\"sy4\">,</span> member<span class=\"br0\">(</span>Pip<span class=\"sy4\">,</span> Pips<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> Deck<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">%% deck_shuffle(+Deck, -NewDeck)</span><br/>deck_shuffle<span class=\"br0\">(</span>Deck<span class=\"sy4\">,</span> NewDeck<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>        length<span class=\"br0\">(</span>Deck<span class=\"sy4\">,</span> NumCards<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>        <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">findall</span></a><span class=\"br0\">(</span>X<span class=\"sy4\">,</span> <span class=\"br0\">(</span>between<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> NumCards<span class=\"sy4\">,</span> _I<span class=\"br0\">)</span><span class=\"sy4\">,</span> X <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> random<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> Ord<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>        pairs_keys_values<span class=\"br0\">(</span>Pairs<span class=\"sy4\">,</span> Ord<span class=\"sy4\">,</span> Deck<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>        keysort<span class=\"br0\">(</span>Pairs<span class=\"sy4\">,</span> OrdPairs<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>        pairs_values<span class=\"br0\">(</span>OrdPairs<span class=\"sy4\">,</span> NewDeck<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">%% deck_deal(+Deck, -Card, -NewDeck)</span><br/>deck_deal<span class=\"br0\">(</span><span class=\"br0\">[</span>Card<span class=\"sy5\">|</span>Cards<span class=\"br0\">]</span><span class=\"sy4\">,</span> Card<span class=\"sy4\">,</span> Cards<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">%% print_deck(+Deck)</span><br/>print_deck<span class=\"br0\">(</span>Deck<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>        maplist<span class=\"br0\">(</span>print_card<span class=\"sy4\">,</span> Deck<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% print_card(+Card)</span><br/>print_card<span class=\"br0\">(</span>card<span class=\"br0\">(</span>Pip<span class=\"sy4\">,</span> Suit<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>        format<span class=\"br0\">(</span><span class=\"st_h\">'~a of ~a~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Pip<span class=\"sy4\">,</span> Suit<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 134, "block": "<pre class=\"purebasic highlighted_source\">#MaxCards <span class=\"sy0\">=</span> <span class=\"nu0\">52</span> <span class=\"co1\">;Max Cards in a deck</span><br/><span class=\"kw1\">Structure</span> card<br/>  pip.s<br/>  suit.s<br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">Structure</span> _membersDeckClass<br/>  <span class=\"sy0\">*</span>vtable.i <br/>  size.i <span class=\"co1\">;zero based count of cards present</span><br/>  cards.card<span class=\"br0\">[</span>#MaxCards<span class=\"br0\">]</span> <span class=\"co1\">;deck content </span><br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">Interface</span> deckObject<br/>  Init<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  shuffle<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  deal.s<span class=\"br0\">(</span>isAbbr <span class=\"sy0\">=</span> #True<span class=\"br0\">)</span><br/>  show<span class=\"br0\">(</span>isAbbr <span class=\"sy0\">=</span> #True<span class=\"br0\">)</span><br/><span class=\"kw1\">EndInterface</span> <br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.s _formatCardInfo<span class=\"br0\">(</span><span class=\"sy0\">*</span>card.card, isAbbr <span class=\"sy0\">=</span> #True<span class=\"br0\">)</span><br/>  <span class=\"co1\">;isAbbr determines if the card information is abbrieviated to 2 characters</span><br/>  <span class=\"kw1\">Static</span> pips.s <span class=\"sy0\">=</span> <span class=\"st0\">\"2 3 4 5 6 7 8 9 10 Jack Queen King Ace\"</span><br/>  <span class=\"kw1\">Static</span> suits.s <span class=\"sy0\">=</span> <span class=\"st0\">\"Diamonds Clubs Hearts Spades\"</span><br/>  <span class=\"kw1\">Protected</span> c.s<br/>\u00a0<br/>  <span class=\"kw1\">If</span> isAbbr<br/>    c <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>card<span class=\"sy0\">\\</span>pip <span class=\"sy0\">+</span> <span class=\"sy0\">*</span>card<span class=\"sy0\">\\</span>suit<br/>  <span class=\"kw1\">Else</span><br/>    c <span class=\"sy0\">=</span> <span class=\"kw2\">StringField</span><span class=\"br0\">(</span>pips,<span class=\"kw2\">FindString</span><span class=\"br0\">(</span><span class=\"st0\">\"23456789TJQKA\"</span>, <span class=\"sy0\">*</span>card<span class=\"sy0\">\\</span>pip, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" of \"</span><br/>    c <span class=\"sy0\">+</span> <span class=\"kw2\">StringField</span><span class=\"br0\">(</span>suits,<span class=\"kw2\">FindString</span><span class=\"br0\">(</span><span class=\"st0\">\"DCHS\"</span>, <span class=\"sy0\">*</span>card<span class=\"sy0\">\\</span>suit, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">ProcedureReturn</span> c<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> setInitialValues<span class=\"br0\">(</span><span class=\"sy0\">*</span>this._membersDeckClass<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i, c.s<br/>\u00a0<br/>  <span class=\"kw1\">Restore</span> cardDat<br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> #MaxCards <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Read</span>.s c<br/>    <span class=\"sy0\">*</span>this<span class=\"sy0\">\\</span>cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">\\</span>pip <span class=\"sy0\">=</span> <span class=\"kw2\">Left</span><span class=\"br0\">(</span>c, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">*</span>this<span class=\"sy0\">\\</span>cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">\\</span>suit <span class=\"sy0\">=</span> <span class=\"kw2\">Right</span><span class=\"br0\">(</span>c, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.s dealCard<span class=\"br0\">(</span><span class=\"sy0\">*</span>this._membersDeckClass, isAbbr<span class=\"br0\">)</span><br/>  <span class=\"co1\">;isAbbr is #True if the card dealt is abbrieviated to 2 characters</span><br/>  <span class=\"kw1\">Protected</span> c.card<br/>  <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>this<span class=\"sy0\">\\</span>size <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><br/>    <span class=\"co1\">;deck is empty</span><br/>    <span class=\"kw1\">ProcedureReturn</span> <span class=\"st0\">\"\"</span><br/>  <span class=\"kw1\">Else</span><br/>    c <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>this<span class=\"sy0\">\\</span>cards<span class=\"br0\">[</span><span class=\"sy0\">*</span>this<span class=\"sy0\">\\</span>size<span class=\"br0\">]</span><br/>    <span class=\"sy0\">*</span>this<span class=\"sy0\">\\</span>size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">ProcedureReturn</span> _formatCardInfo<span class=\"br0\">(</span>@c, isAbbr<span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> showDeck<span class=\"br0\">(</span><span class=\"sy0\">*</span>this._membersDeckClass, isAbbr<span class=\"br0\">)</span><br/>  <span class=\"co1\">;isAbbr determines if cards are shown with 2 character abbrieviations</span><br/>  <span class=\"kw1\">Protected</span> i<br/>\u00a0<br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"sy0\">*</span>this<span class=\"sy0\">\\</span>size<br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span>_formatCardInfo<span class=\"br0\">(</span>@<span class=\"sy0\">*</span>this<span class=\"sy0\">\\</span>cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, isAbbr<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> i <span class=\"sy0\">&lt;&gt;</span> <span class=\"sy0\">*</span>this<span class=\"sy0\">\\</span>size: <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span>: <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> shuffle<span class=\"br0\">(</span><span class=\"sy0\">*</span>this._membersDeckClass<span class=\"br0\">)</span><br/>  <span class=\"co1\">;works with decks of any size</span><br/>  <span class=\"kw1\">Protected</span> w, i<br/>  <span class=\"kw1\">Dim</span> shuffled.card<span class=\"br0\">(</span><span class=\"sy0\">*</span>this<span class=\"sy0\">\\</span>size<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>this<span class=\"sy0\">\\</span>size <span class=\"kw1\">To</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Step</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    w <span class=\"sy0\">=</span> <span class=\"kw2\">Random</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    shuffled<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>this<span class=\"sy0\">\\</span>cards<span class=\"br0\">[</span>w<span class=\"br0\">]</span><br/>    <span class=\"kw1\">If</span> w <span class=\"sy0\">&lt;&gt;</span> i<br/>      <span class=\"sy0\">*</span>this<span class=\"sy0\">\\</span>cards<span class=\"br0\">[</span>w<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>this<span class=\"sy0\">\\</span>cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"sy0\">*</span>this<span class=\"sy0\">\\</span>size<br/>    <span class=\"sy0\">*</span>this<span class=\"sy0\">\\</span>cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> shuffled<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> newDeck<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> <span class=\"sy0\">*</span>newDeck._membersDeckClass <span class=\"sy0\">=</span> <span class=\"kw2\">AllocateMemory</span><span class=\"br0\">(</span><span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>_membersDeckClass<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>newDeck<br/>    <span class=\"sy0\">*</span>newDeck<span class=\"sy0\">\\</span>vtable <span class=\"sy0\">=</span>\u00a0?vTable_deckClass<br/>    <span class=\"sy0\">*</span>newDeck<span class=\"sy0\">\\</span>size <span class=\"sy0\">=</span> #MaxCards <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    setInitialValues<span class=\"br0\">(</span><span class=\"sy0\">*</span>newDeck<span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"sy0\">*</span>newDeck<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">DataSection</span><br/>  vTable_deckClass:<br/>  <span class=\"kw1\">Data</span>.i @setInitialValues<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Data</span>.i @shuffle<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Data</span>.i @dealCard<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Data</span>.i @showDeck<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  cardDat:<br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"2D\"</span>, <span class=\"st0\">\"3D\"</span>, <span class=\"st0\">\"4D\"</span>, <span class=\"st0\">\"5D\"</span>, <span class=\"st0\">\"6D\"</span>, <span class=\"st0\">\"7D\"</span>, <span class=\"st0\">\"8D\"</span>, <span class=\"st0\">\"9D\"</span>, <span class=\"st0\">\"TD\"</span>, <span class=\"st0\">\"JD\"</span>, <span class=\"st0\">\"QD\"</span>, <span class=\"st0\">\"KD\"</span>, <span class=\"st0\">\"AD\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"2C\"</span>, <span class=\"st0\">\"3C\"</span>, <span class=\"st0\">\"4C\"</span>, <span class=\"st0\">\"5C\"</span>, <span class=\"st0\">\"6C\"</span>, <span class=\"st0\">\"7C\"</span>, <span class=\"st0\">\"8C\"</span>, <span class=\"st0\">\"9C\"</span>, <span class=\"st0\">\"TC\"</span>, <span class=\"st0\">\"JC\"</span>, <span class=\"st0\">\"QC\"</span>, <span class=\"st0\">\"KC\"</span>, <span class=\"st0\">\"AC\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"2H\"</span>, <span class=\"st0\">\"3H\"</span>, <span class=\"st0\">\"4H\"</span>, <span class=\"st0\">\"5H\"</span>, <span class=\"st0\">\"6H\"</span>, <span class=\"st0\">\"7H\"</span>, <span class=\"st0\">\"8H\"</span>, <span class=\"st0\">\"9H\"</span>, <span class=\"st0\">\"TH\"</span>, <span class=\"st0\">\"JH\"</span>, <span class=\"st0\">\"QH\"</span>, <span class=\"st0\">\"KH\"</span>, <span class=\"st0\">\"AH\"</span><br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"2S\"</span>, <span class=\"st0\">\"3S\"</span>, <span class=\"st0\">\"4S\"</span>, <span class=\"st0\">\"5S\"</span>, <span class=\"st0\">\"6S\"</span>, <span class=\"st0\">\"7S\"</span>, <span class=\"st0\">\"8S\"</span>, <span class=\"st0\">\"9S\"</span>, <span class=\"st0\">\"TS\"</span>, <span class=\"st0\">\"JS\"</span>, <span class=\"st0\">\"QS\"</span>, <span class=\"st0\">\"KS\"</span>, <span class=\"st0\">\"AS\"</span><br/><span class=\"kw1\">EndDataSection</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">Define</span> deck.deckObject <span class=\"sy0\">=</span> newDeck<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> deck2.deckObject <span class=\"sy0\">=</span> newDeck<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> deck <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Or</span> deck2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Unable to create decks\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">End</span><br/>  <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>  deck<span class=\"sy0\">\\</span>shuffle<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Dealt: \"</span> <span class=\"sy0\">+</span> deck<span class=\"sy0\">\\</span>deal<span class=\"br0\">(</span>#False<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Dealt: \"</span> <span class=\"sy0\">+</span> deck<span class=\"sy0\">\\</span>deal<span class=\"br0\">(</span>#False<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Dealt: \"</span> <span class=\"sy0\">+</span> deck<span class=\"sy0\">\\</span>deal<span class=\"br0\">(</span>#False<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Dealt: \"</span> <span class=\"sy0\">+</span> deck<span class=\"sy0\">\\</span>deal<span class=\"br0\">(</span>#False<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  deck<span class=\"sy0\">\\</span>show<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  deck2<span class=\"sy0\">\\</span>show<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 26, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">random</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Card<span class=\"br0\">(</span><span class=\"kw2\">object</span><span class=\"br0\">)</span>:<br/>    suits <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"Clubs\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Hearts\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Spades\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Diamonds\"</span><span class=\"br0\">)</span><br/>    pips <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"2\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"3\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"4\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"5\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"6\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"7\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"8\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"9\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"10\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Jack\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Queen\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"King\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Ace\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> pip<span class=\"sy0\">,</span>suit<span class=\"br0\">)</span>:<br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">pip</span><span class=\"sy0\">=</span>pip<br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">suit</span><span class=\"sy0\">=</span>suit<br/>\u00a0<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__str__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"%s\u00a0%s\"</span>%<span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">pip</span><span class=\"sy0\">,</span><span class=\"kw2\">self</span>.<span class=\"me1\">suit</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Deck<span class=\"br0\">(</span><span class=\"kw2\">object</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">deck</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Card<span class=\"br0\">(</span>pip<span class=\"sy0\">,</span>suit<span class=\"br0\">)</span> <span class=\"kw1\">for</span> suit <span class=\"kw1\">in</span> Card.<span class=\"me1\">suits</span> <span class=\"kw1\">for</span> pip <span class=\"kw1\">in</span> Card.<span class=\"me1\">pips</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__str__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"[%s]\"</span>%<span class=\"st0\">\", \"</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>card<span class=\"br0\">)</span> <span class=\"kw1\">for</span> card <span class=\"kw1\">in</span> <span class=\"kw2\">self</span>.<span class=\"me1\">deck</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> shuffle<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw3\">random</span>.<span class=\"me1\">shuffle</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">deck</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> deal<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">shuffle</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\"># Can't tell what is next from self.deck</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">self</span>.<span class=\"me1\">deck</span>.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 25, "block": "<pre class=\"text highlighted_source\">pips &lt;- c(\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"Jack\", \"Queen\", \"King\", \"Ace\")<br/>suit &lt;- c(\"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\")<br/># Create a deck<br/>deck &lt;- data.frame(pips=rep(pips, 4), suit=rep(suit, each=13))<br/>\u00a0<br/>shuffle &lt;- function(deck)<br/>{<br/>   n &lt;- nrow(deck)<br/>   ord &lt;- sample(seq_len(n), size=n)<br/>   deck[ord,]<br/>}<br/>\u00a0<br/>deal &lt;- function(deck, fromtop=TRUE)<br/>{<br/>   index &lt;- ifelse(fromtop, 1, nrow(deck))<br/>   print(paste(\"Dealt the\", deck[index, \"pips\"], \"of\", deck[index, \"suit\"]))<br/>   deck[-index,]   <br/>}<br/>\u00a0<br/># Usage<br/>deck &lt;- shuffle(deck)<br/>deck<br/>deck &lt;- deal(deck)<br/># While no-one is looking, sneakily deal a card from the bottom of the pack<br/>deck &lt;- deal(deck, FALSE)</pre>"}, {"lang": "Racket", "loc": 34, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>;; suits:<br/>(define suits '(club heart diamond spade))<br/>\u00a0<br/>;; ranks<br/>(define ranks '(1 2 3 4 5 6 7 8 9 10 jack queen king))<br/>\u00a0<br/>;; cards <br/>(define cards<br/>  (for*/list ([suit suits] [rank ranks])<br/>    (list suit rank)))<br/>\u00a0<br/>;; a deck is a box containing a list of cards.<br/>(define (new-deck)<br/>  (box cards))<br/>\u00a0<br/>;; shuffle the cards in a deck<br/>(define (deck-shuffle deck)<br/>  (set-box! deck (shuffle (unbox deck))))<br/>\u00a0<br/>;; deal a card from tA 2 3 4 5 6 7 8 9 10 J Q K&gt;;<br/>enum Suit he deck:<br/>(define (deck-deal deck)<br/>  (begin0 (first (unbox deck))<br/>          (set-box! deck (rest (unbox deck)))))<br/>\u00a0<br/>\u00a0<br/>;; TRY IT OUT:<br/>(define my-deck (new-deck))<br/>(deck-shuffle my-deck)<br/>(deck-deal my-deck)<br/>(deck-deal my-deck)<br/>(length (unbox my-deck))</pre>"}, {"lang": "REXX", "loc": 50, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* REXX ***************************************************************<br/>* 1) Build ordered Card deck<br/>* 2) Create shuffled stack<br/>* 3) Deal 5 cards to 4 players each<br/>* 4) show what cards have been dealt and what's left on the stack<br/>* 05.07.2012 Walter Pachl<br/>**********************************************************************/</span><br/>colors=<span class=\"st0\">'S H C D'</span><br/>ranks =<span class=\"st0\">'A 2 3 4 5 6 7 8 9 T J Q K'</span><br/>i=<span class=\"nu0\">0</span><br/>cards=<span class=\"st0\">''</span><br/>ss=<span class=\"st0\">''</span><br/><span class=\"kw1\">Do</span> c=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">4</span><br/>  <span class=\"kw1\">Do</span> r=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">13</span><br/>    i=i+<span class=\"nu0\">1</span><br/>    card<span class=\"sy0\">.</span>i=<span class=\"kw6\">word</span><span class=\"br0\">(</span>colors,c<span class=\"br0\">)</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>ranks,r<span class=\"br0\">)</span><br/>    cards=cards card<span class=\"sy0\">.</span>i<br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/>n=<span class=\"nu0\">52</span>                                   <span class=\"coMULTI\">/* number of cards on deck    */</span><br/><span class=\"kw1\">Do</span> si=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">51</span>                          <span class=\"coMULTI\">/* pick 51 cards              */</span><br/>  x=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,n-<span class=\"nu0\">1</span><span class=\"br0\">)</span>+<span class=\"nu0\">1</span>                    <span class=\"coMULTI\">/* take card x (in 1...n)     */</span><br/>  s<span class=\"sy0\">.</span>si=card<span class=\"sy0\">.</span>x                          <span class=\"coMULTI\">/* card on shuffled stack     */</span><br/>  ss=ss s<span class=\"sy0\">.</span>si                           <span class=\"coMULTI\">/* string of shuffled stack   */</span><br/>  card<span class=\"sy0\">.</span>x=card<span class=\"sy0\">.</span>n                        <span class=\"coMULTI\">/* replace card taken         */</span><br/>  n=n-<span class=\"nu0\">1</span>                                <span class=\"coMULTI\">/* decrement nr of cards      */</span><br/>  <span class=\"kw3\">End</span><br/>s<span class=\"sy0\">.</span>52=card<span class=\"sy0\">.</span>1                            <span class=\"coMULTI\">/* pick the last card left    */</span><br/>ss=ss s<span class=\"sy0\">.</span>52                             <span class=\"coMULTI\">/* add it to the string       */</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'Ordered deck:'</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'  '</span><span class=\"kw6\">subword</span><span class=\"br0\">(</span>cards,<span class=\"nu0\">1</span>,<span class=\"nu0\">26</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'  '</span><span class=\"kw6\">subword</span><span class=\"br0\">(</span>cards,<span class=\"nu0\">27</span>,<span class=\"nu0\">52</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'Shuffled stack:'</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'  '</span><span class=\"kw6\">subword</span><span class=\"br0\">(</span>ss,<span class=\"nu0\">1</span>,<span class=\"nu0\">26</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'  '</span><span class=\"kw6\">subword</span><span class=\"br0\">(</span>ss,<span class=\"nu0\">27</span>,<span class=\"nu0\">52</span><span class=\"br0\">)</span><br/>si=<span class=\"nu0\">52</span><br/>deck<span class=\"sy0\">.</span>=<span class=\"st0\">''</span><br/><span class=\"kw1\">Do</span> ci=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">5</span>                           <span class=\"coMULTI\">/* 5 cards each               */</span><br/>  <span class=\"kw1\">Do</span> pli=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">4</span>                        <span class=\"coMULTI\">/* 4 players                  */</span><br/>    deck<span class=\"sy0\">.</span>pli<span class=\"sy0\">.</span>ci=s<span class=\"sy0\">.</span>si                   <span class=\"coMULTI\">/* take top of shuffled deck  */</span><br/>    si=si-<span class=\"nu0\">1</span>                            <span class=\"coMULTI\">/* decrement number           */</span><br/>    deck<span class=\"sy0\">.</span>pli=deck<span class=\"sy0\">.</span>pli deck<span class=\"sy0\">.</span>pli<span class=\"sy0\">.</span>ci      <span class=\"coMULTI\">/* pli's cards as string      */</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Do</span> pli=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">4</span>                          <span class=\"coMULTI\">/* show the 4 dealt ...       */</span><br/>  <span class=\"kw1\">Say</span> pli<span class=\"st0\">':'</span> deck<span class=\"sy0\">.</span>pli<br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'Left on shuffled stack:'</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'  '</span><span class=\"kw6\">subword</span><span class=\"br0\">(</span>ss,<span class=\"nu0\">1</span>,<span class=\"nu0\">26</span><span class=\"br0\">)</span>               <span class=\"coMULTI\">/* and what's left on stack   */</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'  '</span><span class=\"kw6\">subword</span><span class=\"br0\">(</span>ss,<span class=\"nu0\">27</span>,<span class=\"nu0\">6</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ring", "loc": 247, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Load \"guilib.ring\"<br/>\u00a0<br/>nScale = 1<br/>\u00a0<br/>app1 = new qApp<br/>\u00a0<br/>mypic = new QPixmap(\"cards.jpg\")<br/>\u00a0<br/>mypic2 = mypic.copy(0,(124*4)+1,79,124)<br/>Player1EatPic = mypic.copy(80,(124*4)+1,79,124)<br/>Player2EatPic= mypic.copy(160,(124*4)+1,79,124)<br/>\u00a0<br/>aMyCards = []<br/>aMyValues = []<br/>for x1 = 0 to 3<br/>        for y1 = 0 to 12<br/>          temppic = mypic.copy((79*y1)+1,(124*x1)+1,79,124)<br/>                  aMyCards + temppic<br/>                  aMyValues + (y1+1)<br/>        next<br/>next<br/>\u00a0<br/>nPlayer1Score = 0   nPlayer2Score=0<br/>\u00a0<br/>do<br/>        Page1 = new Game<br/>        Page1.Start()<br/>again Page1.lnewgame<br/>\u00a0<br/>mypic.delete()<br/>mypic2.delete()<br/>Player1EatPic.delete()<br/>Player2EatPic.delete()<br/>\u00a0<br/>for t in aMyCards<br/>          t.delete()<br/>next<br/>\u00a0<br/>func gui_setbtnpixmap pBtn,pPixmap<br/>        pBtn {<br/>                setIcon(new qicon(pPixmap.scaled(width(),height(),0,0)))<br/>                setIconSize(new QSize(width(),height()))<br/>        }<br/>\u00a0<br/>Class Game<br/>\u00a0<br/>        nCardsCount = 10<br/>        win1 layout1 label1 label2 layout2 layout3 aBtns aBtns2<br/>        aCards nRole=1 aStatus = list(nCardsCount) aStatus2 = aStatus<br/>        aValues        aStatusValues = aStatus  aStatusValues2 = aStatus<br/>        Player1EatPic   Player2EatPic<br/>        lnewgame = false<br/>        nDelayEat = 0.5<br/>        nDelayNewGame = 1<br/>\u00a0<br/>        func start<br/>\u00a0<br/>                win1 = new qWidget() {<br/>                        setwindowtitle(\"Five\")<br/>                        setstylesheet(\"background-color: White\")<br/>                        showfullscreen()<br/>                }<br/>\u00a0<br/>                layout1 = new qvboxlayout()<br/>\u00a0<br/>                label1 = new qlabel(win1) {<br/>                        settext(\"Player (1) - Score\u00a0: \" + nPlayer1Score)<br/>                        setalignment(Qt_AlignHCenter | Qt_AlignVCenter)<br/>                        setstylesheet(\"color: White; background-color: Purple;<br/>                                         font-size:20pt\")<br/>                        setfixedheight(200)<br/>                }<br/>\u00a0<br/>                closebtn = new qpushbutton(win1)  {<br/>                        settext(\"Close Application\")<br/>                        setstylesheet(\"font-size: 18px\u00a0; color\u00a0: white\u00a0;<br/>                                         background-color: black\u00a0;\")<br/>                        setclickevent(\"Page1.win1.close()\")<br/>                }<br/>\u00a0<br/>                aCards = aMyCards<br/>                aValues = aMyValues<br/>\u00a0<br/>                layout2 = new qhboxlayout()<br/>\u00a0<br/>                aBtns = []<br/>\u00a0<br/>                for x = 1 to nCardsCount<br/>                        aBtns + new qpushbutton(win1)<br/>                        aBtns[x].setfixedwidth(79*nScale)<br/>                        aBtns[x].setfixedheight(124*nScale)<br/>                        gui_setbtnpixmap(aBtns[x],mypic2)<br/>                        layout2.addwidget(aBtns[x])<br/>                        aBtns[x].setclickevent(\"Page1.Player1click(\"+x+\")\")<br/>                next<br/>\u00a0<br/>                layout1.addwidget(label1)<br/>                layout1.addlayout(layout2)<br/>\u00a0<br/>                label2 = new qlabel(win1) {<br/>                        settext(\"Player (2) - Score\u00a0: \" + nPlayer2Score)<br/>                        setalignment(Qt_AlignHCenter | Qt_AlignVCenter)<br/>                        setstylesheet(\"color: white; background-color: red;<br/>                                         font-size:20pt\")<br/>                        setfixedheight(200)<br/>                }<br/>\u00a0<br/>                layout3 = new qhboxlayout()<br/>\u00a0<br/>                aBtns2 = []<br/>                for x = 1 to nCardsCount<br/>                        aBtns2 + new qpushbutton(win1)<br/>                        aBtns2[x].setfixedwidth(79*nScale)<br/>                        aBtns2[x].setfixedheight(124*nScale)<br/>                        gui_setbtnpixmap(aBtns2[x],mypic2)<br/>                        layout3.addwidget(aBtns2[x])<br/>                        aBtns2[x].setclickevent(\"Page1.Player2click(\"+x+\")\")<br/>                next<br/>\u00a0<br/>                layout1.addwidget(label2)<br/>                layout1.addlayout(layout3)<br/>                layout1.addwidget(closebtn)<br/>\u00a0<br/>                win1.setlayout(layout1)<br/>\u00a0<br/>                app1.exec()<br/>\u00a0<br/>        Func Player1Click x<br/>                if nRole = 1 and aStatus[x] = 0<br/>                        nPos = ((random(100)+clock())%(len(aCards)-1)) + 1<br/>                        gui_setbtnpixmap(aBtns[x],aCards[nPos])<br/>                        del(aCards,nPos)<br/>                        nRole = 2<br/>                        aStatus[x] = 1<br/>                        aStatusValues[x] = aValues[nPos]<br/>                        del(aValues,nPos)<br/>                        Player1Eat(x,aStatusValues[x])<br/>                        checknewgame()<br/>                ok<br/>\u00a0<br/>        Func Player2Click x<br/>                if nRole = 2 and aStatus2[x] = 0<br/>                        nPos = ((random(100)+clock())%(len(aCards)-1)) + 1<br/>                        gui_setbtnpixmap(aBtns2[x],aCards[nPos])<br/>                        del(aCards,nPos)<br/>                        nRole = 1<br/>                        aStatus2[x] = 1<br/>                        aStatusValues2[x] = aValues[nPos]<br/>                        del(aValues,nPos)<br/>                        Player2Eat(x,aStatusValues2[x])<br/>                        checknewgame()<br/>                ok<br/>\u00a0<br/>        Func Player1Eat nPos,nValue<br/>\u00a0<br/>                 app1.processEvents()<br/>\u00a0<br/>                 delay(nDelayEat)<br/>                 lEat = false<br/>                 for x = 1 to nCardsCount<br/>                         if aStatus2[x] = 1 and (aStatusValues2[x] = nValue or nValue=5)<br/>                                aStatus2[x] = 2<br/>                                gui_setbtnpixmap(aBtns2[x],Player1EatPic)<br/>                                lEat = True<br/>                                nPlayer1Score++<br/>                         ok<br/>                         if (x\u00a0!= nPos) and (aStatus[x] = 1) and<br/>                                (aStatusValues[x] = nValue or nValue=5)<br/>                                aStatus[x] = 2<br/>                                gui_setbtnpixmap(aBtns[x],Player1EatPic)<br/>                                lEat = True<br/>                                nPlayer1Score++<br/>                         ok<br/>                 next<br/>                 if lEat<br/>                                nPlayer1Score++<br/>                                gui_setbtnpixmap(aBtns[nPos],Player1EatPic)<br/>                                aStatus[nPos] = 2<br/>                                label1.settext(\"Player (1) - Score\u00a0: \" + nPlayer1Score)<br/>                 ok<br/>\u00a0<br/>        Func Player2Eat nPos,nValue<br/>\u00a0<br/>                 app1.processEvents()<br/>\u00a0<br/>                 delay(nDelayEat)<br/>                 lEat = false<br/>                 for x = 1 to  nCardsCount<br/>                         if aStatus[x] = 1 and (aStatusValues[x] = nValue or nValue = 5)<br/>                                aStatus[x] = 2<br/>                                gui_setbtnpixmap(aBtns[x],Player2EatPic)<br/>                                lEat = True<br/>                                nPlayer2Score++<br/>                         ok<br/>\u00a0<br/>                         if (x\u00a0!= nPos) and (aStatus2[x] = 1) and<br/>                                (aStatusValues2[x] = nValue or nValue=5 )<br/>                                aStatus2[x] = 2<br/>                                gui_setbtnpixmap(aBtns2[x],Player2EatPic)<br/>                                lEat = True<br/>                                nPlayer2Score++<br/>                         ok<br/>                 next<br/>                 if lEat<br/>                                nPlayer2Score++<br/>                                gui_setbtnpixmap(aBtns2[nPos],Player2EatPic)<br/>                                aStatus2[nPos] = 2<br/>                                label2.settext(\"Player (2) - Score\u00a0: \" + nPlayer2Score)<br/>                 ok<br/>\u00a0<br/>        Func checknewgame<br/>                if isnewgame()<br/>                                  lnewgame = true<br/>\u00a0<br/>                                  if nPlayer1Score &gt; nPlayer2Score<br/>                                         label1.settext(\"Player (1) Wins!!!\")<br/>                                  ok<br/>                                  if nPlayer2Score &gt; nPlayer1Score<br/>                                         label2.settext(\"Player (2) Wins!!!\")<br/>                                  ok<br/>\u00a0<br/>                                  app1.processEvents()<br/>                                  delay(nDelayNewGame)<br/>\u00a0<br/>                                  win1.delete()<br/>                                  app1.quit()<br/>                ok<br/>\u00a0<br/>        Func isnewgame<br/>                for t in aStatus<br/>                        if t = 0<br/>                                return false<br/>                        ok<br/>                next<br/>                for t in aStatus2<br/>                        if t = 0<br/>                                return false<br/>                        ok<br/>                next<br/>                return true<br/>\u00a0<br/>        Func delay x<br/>        nTime = x * 1000<br/>        oTest = new qTest<br/>        oTest.qsleep(nTime)<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 51, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> Card<br/>  <span class=\"co1\"># class constants</span><br/>  SUITS = <span class=\"sy0\">%</span>i<span class=\"br0\">[</span> Clubs Hearts Spades Diamonds <span class=\"br0\">]</span><br/>  PIPS  = <span class=\"sy0\">%</span>i<span class=\"br0\">[</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> Jack Queen King Ace <span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"co1\"># class variables (private)</span><br/>  @@suit_value = <span class=\"kw4\">Hash</span><span class=\"br0\">[</span> SUITS.<span class=\"me1\">each_with_index</span>.<span class=\"me1\">to_a</span> <span class=\"br0\">]</span><br/>  @@pip_value  = <span class=\"kw4\">Hash</span><span class=\"br0\">[</span> PIPS.<span class=\"me1\">each_with_index</span>.<span class=\"me1\">to_a</span> <span class=\"br0\">]</span><br/>\u00a0<br/>  attr_reader <span class=\"re3\">:pip</span>, <span class=\"re3\">:suit</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>pip,suit<span class=\"br0\">)</span><br/>    <span class=\"re1\">@pip</span> = pip<br/>    <span class=\"re1\">@suit</span> = suit<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> to_s<br/>    <span class=\"st0\">\"#{@pip} #{@suit}\"</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># allow sorting an array of Cards: first by suit, then by value</span><br/>  <span class=\"kw1\">def</span> <span class=\"sy0\">&lt;=&gt;</span><span class=\"br0\">(</span>other<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>@@suit_value<span class=\"br0\">[</span>@suit<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=&gt;</span> @@suit_value<span class=\"br0\">[</span>other.<span class=\"me1\">suit</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">nonzero</span>? <span class=\"kw1\">or</span><br/>    @@pip_value<span class=\"br0\">[</span>@pip<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=&gt;</span> @@pip_value<span class=\"br0\">[</span>other.<span class=\"me1\">pip</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Deck<br/>  <span class=\"kw1\">def</span> initialize<br/>    <span class=\"re1\">@deck</span> = <span class=\"re2\">Card::SUITS</span>.<span class=\"me1\">product</span><span class=\"br0\">(</span><span class=\"re2\">Card::PIPS</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>suit,pip<span class=\"sy0\">|</span> Card.<span class=\"me1\">new</span><span class=\"br0\">(</span>pip,suit<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> to_s<br/>    <span class=\"re1\">@deck</span>.<span class=\"me1\">inspect</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> shuffle!<br/>    <span class=\"re1\">@deck</span>.<span class=\"me1\">shuffle</span>!<br/>    <span class=\"kw2\">self</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> deal<span class=\"br0\">(</span><span class=\"sy0\">*</span>args<span class=\"br0\">)</span><br/>    <span class=\"re1\">@deck</span>.<span class=\"me1\">shift</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>args<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>deck = Deck.<span class=\"me1\">new</span>.<span class=\"me1\">shuffle</span>!<br/><span class=\"kw3\">puts</span> card = deck.<span class=\"me1\">deal</span><br/>hand = deck.<span class=\"me1\">deal</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span> hand.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span> hand.<span class=\"me1\">sort</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Run BASIC", "loc": 25, "block": "<pre class=\"text highlighted_source\">suite$ = \"C,D,H,S\"                      ' Club,Diamond,Hart,Spaces<br/>card$  = \"A,2,3,4,5,6,7,8,9,T,J,Q,K\"    ' Cards Ace to King<br/>\u00a0<br/>dim n(55)                               ' make ordered deck <br/>for i = 1 to 52                         '  of 52 cards<br/> n(i) \t= i<br/>next i<br/>\u00a0<br/>for i = 1 to 52 * 3                     ' shuffle deck 3 times<br/>  i1    = int(rnd(1)*52) + 1<br/>  i2    = int(rnd(1)*52) + 1<br/>  h2    = n(i1)<br/>  n(i1) = n(i2)<br/>  n(i2) = h2<br/>next i<br/>\u00a0<br/>for hand = 1 to 4                       ' 4 hands <br/>for deal = 1 to 13\t\t\t' deal each 13 cards<br/> card = card + 1                        ' next card in deck<br/>    s    = (n(card) mod 4)  + 1         ' determine suite<br/>    c    = (n(card) mod 13) + 1         ' determine card<br/>    print word$(card$,c,\",\");word$(suite$,s,\",\");\" \";  ' show the card<br/>  next deal<br/>print<br/>next hand</pre>"}, {"lang": "Rust", "loc": 63, "block": "<pre class=\"text highlighted_source\">extern crate rand;<br/>\u00a0<br/>use std::fmt;<br/>use rand::Rng;<br/>use Pip::*;<br/>use Suit::*;<br/>\u00a0<br/>#[derive(Copy, Clone, Debug)]<br/>enum Pip { Ace, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King }<br/>\u00a0<br/>#[derive(Copy, Clone, Debug)]<br/>enum Suit { Spades, Hearts, Diamonds, Clubs }<br/>\u00a0<br/>struct Card {<br/>\tpip: Pip,<br/>\tsuit: Suit<br/>}<br/>\u00a0<br/>impl fmt::Display for Card {<br/>    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {<br/>        write!(f, \"{:?} of {:?}\", self.pip, self.suit)<br/>    }<br/>}<br/>\u00a0<br/>struct Deck(Vec&lt;Card&gt;);<br/>\u00a0<br/>impl Deck {<br/>    fn new() -&gt; Deck {<br/>        let mut cards:Vec&lt;Card&gt; = Vec::with_capacity(52);<br/>        for &amp;suit in &amp;[Spades, Hearts, Diamonds, Clubs] {<br/>            for &amp;pip in &amp;[Ace, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King] {<br/>                cards.push( Card{pip: pip, suit: suit} );<br/>            }<br/>        }<br/>        Deck(cards)<br/>    }<br/>\u00a0<br/>    fn deal(&amp;mut self) -&gt; Option&lt;Card&gt; {<br/>        self.0.pop()<br/>    }<br/>\u00a0<br/>    fn shuffle(&amp;mut self) {<br/>        rand::thread_rng().shuffle(&amp;mut self.0)<br/>    }<br/>}<br/>\u00a0<br/>impl fmt::Display for Deck {<br/>    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {<br/>        for card in self.0.iter() {<br/>            writeln!(f, \"{}\", card);<br/>        }<br/>        write!(f, \"\")<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    let mut deck = Deck::new();<br/>    deck.shuffle();<br/>    //println!(\"{}\", deck);<br/>    for _ in 0..5 {<br/>        println!(\"{}\", deck.deal().unwrap());<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 35, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">annotation</span>.<span class=\"me1\">tailrec</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Pip <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Enumeration <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">type</span></a> Pip <span class=\"sy0\">=</span> Value<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King, Ace <span class=\"sy0\">=</span> Value<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Suit <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Enumeration <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">type</span></a> Suit <span class=\"sy0\">=</span> Value<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> Diamonds, Spades, Hearts, Clubs <span class=\"sy0\">=</span> Value<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> Suit.<span class=\"sy0\">_</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> Pip.<span class=\"sy0\">_</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Card<span class=\"br0\">(</span>suit<span class=\"sy0\">:</span>Suit, value<span class=\"sy0\">:</span>Pip<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>String<span class=\"sy0\">=</span>value + <span class=\"st0\">\" of \"</span> + suit<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Deck <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cards<span class=\"sy0\">:</span>List<span class=\"br0\">[</span>Card<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">{</span>s <span class=\"sy0\">&lt;</span>- Suit.<span class=\"me1\">values</span>.<span class=\"me1\">toList</span><span class=\"sy0\">;</span> v <span class=\"sy0\">&lt;</span>- Pip.<span class=\"me1\">values</span><span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> Card<span class=\"br0\">(</span>s,v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> shuffle<span class=\"sy0\">:</span>Deck<span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Deck<span class=\"br0\">(</span>Random.<span class=\"me1\">shuffle</span><span class=\"br0\">(</span>cards<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> deal<span class=\"br0\">(</span>n<span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"br0\">(</span>Seq<span class=\"br0\">[</span>Card<span class=\"br0\">]</span>, Deck<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>    <span class=\"sy0\">@</span>tailrec <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> loop<span class=\"br0\">(</span>count<span class=\"sy0\">:</span>Int, c<span class=\"sy0\">:</span>Seq<span class=\"br0\">[</span>Card<span class=\"br0\">]</span>, d<span class=\"sy0\">:</span>Deck<span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"br0\">(</span>Seq<span class=\"br0\">[</span>Card<span class=\"br0\">]</span>, Deck<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>count<span class=\"sy0\">==</span><span class=\"nu0\">0</span> || d.<span class=\"me1\">cards</span><span class=\"sy0\">==</span>Nil<span class=\"br0\">)</span> <span class=\"br0\">(</span>c,d<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> card <span class=\"sy0\">::</span> deck <span class=\"sy0\">=</span> d.<span class=\"me1\">cards</span><br/>        loop<span class=\"br0\">(</span>count-<span class=\"nu0\">1</span>, c <span class=\"sy0\">:</span>+ card, <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Deck<span class=\"br0\">(</span>deck<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    loop<span class=\"br0\">(</span>n, Seq<span class=\"br0\">(</span><span class=\"br0\">)</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>String<span class=\"sy0\">=</span><span class=\"st0\">\"Deck: \"</span> + <span class=\"br0\">(</span>cards mkString <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 28, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> ranks<br/>  <span class=\"br0\">(</span><span class=\"kw1\">quote</span> <span class=\"br0\">(</span>ace <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> jack queen king<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> suits<br/>  <span class=\"br0\">(</span><span class=\"kw1\">quote</span> <span class=\"br0\">(</span>clubs diamonds hearts spades<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> new<span class=\"sy0\">-</span>deck<br/>  <span class=\"br0\">(</span>apply <span class=\"kw1\">append</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>suit<span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>rank<span class=\"br0\">)</span><br/>                       <span class=\"br0\">(</span><span class=\"kw1\">cons</span> rank suit<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     ranks<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              suits<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>shuffle deck<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>remove<span class=\"sy0\">-</span>card deck index<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> index<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> deck<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> deck<span class=\"br0\">)</span> <span class=\"br0\">(</span>remove<span class=\"sy0\">-</span>card <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> deck<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> index <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> deck<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>index <span class=\"br0\">(</span>random <span class=\"br0\">(</span><span class=\"kw1\">length</span> deck<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> deck index<span class=\"br0\">)</span> <span class=\"br0\">(</span>shuffle <span class=\"br0\">(</span>remove<span class=\"sy0\">-</span>card deck index<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define-syntax</span> deal<span class=\"sy0\">!</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">syntax-rules</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>deal<span class=\"sy0\">!</span> deck hand<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">begin</span> <span class=\"br0\">(</span><span class=\"kw1\">set!</span> hand <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> deck<span class=\"br0\">)</span> hand<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">set!</span> deck <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> deck<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 31, "block": "<pre class=\"ruby highlighted_source\">define Pip = <span class=\"sy0\">&lt;</span>A <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> J Q K<span class=\"sy0\">&gt;</span>;<br/>define Suit = <span class=\"sy0\">&lt;</span>\u2666 \u2663 \u2665 \u2660<span class=\"sy0\">&gt;</span>;<br/>\u00a0<br/><span class=\"kw1\">class</span> Card<span class=\"br0\">(</span>pip, suit<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    method to_s <span class=\"br0\">{</span> pip <span class=\"sy0\">+</span> suit <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Deck<span class=\"br0\">(</span>cards=<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    method init <span class=\"br0\">{</span><br/>        cards = gather <span class=\"br0\">{</span><br/>            Pip.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span><span class=\"kw3\">p</span><span class=\"sy0\">|</span> Suit.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>s<span class=\"sy0\">|</span> take<span class=\"br0\">(</span>Card<span class=\"br0\">(</span><span class=\"kw3\">p</span>, s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method shuffle <span class=\"br0\">{</span><br/>        cards.<span class=\"me1\">shuffle</span>!;<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method deal <span class=\"br0\">{</span> cards.<span class=\"me1\">shift</span> <span class=\"br0\">}</span>;<br/>    method to_s <span class=\"br0\">{</span> cards.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var d = Deck<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>say <span class=\"st0\">\"Deck: #{d}\"</span>;<br/>\u00a0<br/>var top = d.<span class=\"me1\">deal</span>;<br/>say <span class=\"st0\">\"Top card: #{top}\"</span>;<br/>\u00a0<br/>d.<span class=\"me1\">shuffle</span>;<br/>say <span class=\"st0\">\"Deck, shuffled: #{d}\"</span>;</pre>"}, {"lang": "Smalltalk", "loc": 103, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Object</span> subclass: <span class=\"re1\">#Card</span><br/>  instanceVariableNames: <span class=\"st0\">'thePip theSuit'</span><br/>  classVariableNames: <span class=\"st0\">'pips suits'</span><br/>  poolDictionaries: <span class=\"st0\">''</span><br/>  category: <span class=\"kw1\">nil</span>\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Card</span> class methods!<br/>initialize<br/>  suits ifNil: <span class=\"br0\">[</span> <span class=\"re5\">suits</span> <span class=\"sy0\">:=</span> <span class=\"st0\">'clubs,hearts,spades,diamonds'</span> subStrings: $, <span class=\"br0\">]</span>.<br/>  <span class=\"re5\">pips</span> ifNil: <span class=\"br0\">[</span> <span class=\"re5\">pips</span> <span class=\"sy0\">:=</span> <span class=\"st0\">'2,3,4,5,6,7,8,9,10,jack,queen,king,ace'</span> subStrings: $, <span class=\"br0\">]</span><br/>!<br/>new<br/>  |<span class=\"re3\"> o </span>|<br/>  <span class=\"re6\">o</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">super</span> new.<br/>  ^o<br/>!  <br/>new: <span class=\"re5\">card</span><br/>  |<span class=\"re3\"> o </span>|<br/>  <span class=\"re6\">o</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">self</span> new.<br/>  <span class=\"re5\">o</span> initWithPip: <span class=\"br0\">(</span><span class=\"re5\">card</span> at: <span class=\"re5\">1</span><span class=\"br0\">)</span> andSuit: <span class=\"br0\">(</span><span class=\"re5\">card</span> at: <span class=\"re5\">2</span><span class=\"br0\">)</span>.<br/>  ^o<br/>!!<br/>\u00a0<br/>!<span class=\"re0\">Card</span> class methods\u00a0!<br/>pips<br/>  <span class=\"re0\">Card</span> initialize.<br/>  ^pips<br/>!<br/>suits<br/>  <span class=\"re0\">Card</span> initialize.<br/>  ^suits<br/>!!<br/>\u00a0<br/>!<span class=\"re0\">Card</span> methods!<br/>initWithPip: <span class=\"re5\">aPip</span> andSuit: <span class=\"re5\">aSuit</span><br/>  <span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"re5\">pips</span> includes: <span class=\"re5\">aPip</span> asLowercase<span class=\"br0\">)</span> &amp;<br/>    <span class=\"br0\">(</span><span class=\"re5\">suits</span> includes: <span class=\"re5\">aSuit</span> asLowercase<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>     ifTrue: <span class=\"br0\">[</span><br/>          <span class=\"re5\">thePip</span> <span class=\"sy0\">:=</span> <span class=\"re5\">aPip</span> copy.<br/>          <span class=\"re5\">theSuit</span> <span class=\"sy0\">:=</span> <span class=\"re5\">aSuit</span> copy<br/>     <span class=\"br0\">]</span> ifFalse: <span class=\"br0\">[</span> <span class=\"st0\">'Unknown pip or suit'</span> displayOn: <span class=\"re5\">stderr</span> .<br/>                  <span class=\"re0\">Character</span> nl displayOn: <span class=\"re5\">stderr</span> <span class=\"br0\">]</span>.<br/>  ^self<br/>!<br/>asString<br/>  ^<span class=\"br0\">(</span><span class=\"st0\">'(%1,%2)'</span>\u00a0% <span class=\"br0\">{</span> thePip . <span class=\"re5\">theSuit</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>!<br/>display<br/>  <span class=\"kw1\">self</span> asString display<br/>!<br/>displayNl<br/>  <span class=\"kw1\">self</span> display.<br/>  <span class=\"re0\">Character</span> nl display<br/>!!<br/>\u00a0<br/>\u00a0<br/><span class=\"re0\">Object</span> subclass: <span class=\"re1\">#Deck</span><br/>  instanceVariableNames: <span class=\"st0\">'deck'</span><br/>  classVariableNames: <span class=\"st0\">''</span><br/>  poolDictionaries: <span class=\"st0\">''</span><br/>  category: <span class=\"kw1\">nil</span>\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">Deck</span> class methods\u00a0!<br/>new<br/>  |<span class=\"re3\">d</span>|<br/>  <span class=\"re6\">d</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">super</span> new.<br/>  <span class=\"re5\">d</span> init.<br/>  ^d<br/>!!<br/>\u00a0<br/>!<span class=\"re0\">Deck</span> methods\u00a0!<br/>init<br/>   <span class=\"re6\">deck</span> <span class=\"sy0\">:=</span> <span class=\"re0\">OrderedCollection</span> new.<br/>   <span class=\"re0\">Card</span> suits do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">suit</span> |<br/>     <span class=\"re0\">Card</span> pips do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">pip</span> |<br/>         deck add: <span class=\"br0\">(</span><span class=\"re0\">Card</span> new: <span class=\"br0\">{</span> pip . <span class=\"re5\">suit</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">]</span><br/>   <span class=\"br0\">]</span><br/>!<br/>deck<br/>  ^deck<br/>!<br/>shuffle<br/>  <span class=\"nu0\">1</span> to: <span class=\"kw1\">self</span> deck size do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">i</span> |<br/>     |r2 o|<br/>     <span class=\"re6\">r2</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Random</span> between: <span class=\"re5\">1</span> and: <span class=\"kw1\">self</span> deck size.<br/>     <span class=\"re5\">o</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">self</span> deck at: <span class=\"re5\">i</span>.<br/>     <span class=\"kw1\">self</span> deck at: <span class=\"re5\">i</span> put: <span class=\"br0\">(</span><span class=\"kw1\">self</span> deck at: <span class=\"re5\">r2</span><span class=\"br0\">)</span>.<br/>     <span class=\"kw1\">self</span> deck at: <span class=\"re5\">r2</span> put: <span class=\"re5\">o</span> <br/>  <span class=\"br0\">]</span>.<br/>  ^self<br/>!<br/>display<br/>  <span class=\"kw1\">self</span> deck do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">card</span> |<br/>     card displayNl<br/>  <span class=\"br0\">]</span><br/>!<br/>deal<br/>  ^self deck removeFirst<br/>!!<br/>\u00a0<br/><span class=\"coMULTI\">\"create a deck, shuffle it, remove the first card and display it\"</span><br/><span class=\"re0\">Deck</span> new shuffle deal displayNl.</pre>"}, {"lang": "Swift", "loc": 186, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import Foundation<br/>\u00a0<br/>// extend any Indexed collection to be able to shuffle (see http://stackoverflow.com/questions/24026510/how-do-i-shuffle-an-array-in-swift)<br/>extension CollectionType where Index == Int {<br/>    /// Return a copy of `self` with its elements shuffled<br/>    func shuffle() -&gt; [Generator.Element] {<br/>        var list = Array(self)<br/>        list.shuffleInPlace()<br/>        return list<br/>    }<br/>}<br/>\u00a0<br/>extension MutableCollectionType where Index == Int {<br/>    /// Shuffle the elements of `self` in-place.<br/>    mutating func shuffleInPlace() {<br/>        // empty and single-element collections don't shuffle<br/>        if count &lt; 2 { return }<br/>\u00a0<br/>        for i in 0..&lt;count - 1 {<br/>            let j = Int(arc4random_uniform(UInt32(count - i))) + i<br/>            guard i\u00a0!= j else { continue }<br/>            swap(&amp;self[i], &amp;self[j])<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>// now the model structs<br/>enum CardColor\u00a0: Int {<br/>    case Red<br/>    case Black<br/>}<br/>extension CardColor\u00a0: CustomStringConvertible {<br/>    var description\u00a0: String {<br/>        switch self {<br/>        case .Red:<br/>            return \"Red\"<br/>        case .Black:<br/>            return \"Black\"<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>enum Suit\u00a0: Int {<br/>    case Hearts = 1<br/>    case Diamonds<br/>    case Spades<br/>    case Clubs<br/>\u00a0<br/>    var color\u00a0: CardColor {<br/>        switch self {<br/>        case .Hearts, .Diamonds:<br/>            return .Red<br/>        case .Spades, .Clubs:<br/>            return .Black<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>enum Pip\u00a0: Int {<br/>    case Ace = 1<br/>    case Two = 2<br/>    case Three = 3<br/>    case Four = 4<br/>    case Five = 5<br/>    case Six = 6<br/>    case Seven = 7<br/>    case Eight = 8<br/>    case Nine = 9<br/>    case Ten = 10<br/>    case Jack = 11<br/>    case Queen = 12<br/>    case King = 13<br/>}<br/>\u00a0<br/>struct Card {<br/>    let pip\u00a0: Pip<br/>    let suit\u00a0: Suit<br/>\u00a0<br/>    var isFaceCard\u00a0: Bool {<br/>        return pip.rawValue &gt; 10<br/>    }<br/>\u00a0<br/>    var color\u00a0: CardColor {<br/>        return suit.color<br/>    }<br/>}<br/>extension Card\u00a0: Equatable {}<br/>func == (l:Card, r:Card) -&gt; Bool {<br/>    return l.pip == r.pip &amp;&amp;<br/>            l.suit == r.suit<br/>}<br/>extension Card\u00a0: CustomStringConvertible {<br/>    var description\u00a0: String {<br/>        return \"\\(pip) of \\(suit)\"<br/>    }<br/>}<br/>\u00a0<br/>\u00a0<br/>struct Deck {<br/>    var cards\u00a0: [Card]<br/>\u00a0<br/>    var count\u00a0: Int {<br/>        return cards.count<br/>    }<br/>\u00a0<br/>    init(shuffling:Bool=true) {<br/>        var startcards = [Card]()<br/>        for suit in (Suit.Hearts.rawValue...Suit.Clubs.rawValue) {<br/>            for pip in (Pip.Ace.rawValue...Pip.King.rawValue) {<br/>                startcards.append(Card(pip: Pip(rawValue: pip)!, suit: Suit(rawValue: suit)!))<br/>            }<br/>        }<br/>        cards = startcards<br/>\u00a0<br/>        if shuffling {<br/>            shuffle()<br/>        }<br/>    }<br/>\u00a0<br/>    mutating func shuffle() {<br/>        cards.shuffleInPlace()<br/>    }<br/>\u00a0<br/>    mutating func deal() -&gt; Card {<br/>        let out = cards.removeFirst()<br/>        return out<br/>    }<br/>\u00a0<br/>}<br/>extension Deck\u00a0: CustomStringConvertible {<br/>    var description\u00a0: String {<br/>        return \"\\(count) cards: \\(cards.description)\"<br/>    }<br/>}<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>// test some cards<br/>let kh = Card(pip: .King, suit: .Hearts)<br/>let ad = Card(pip: .Ace, suit: .Diamonds)<br/>let tc = Card(pip: .Two, suit: .Clubs)<br/>let fc = Card(pip: Pip(rawValue:4)!, suit: .Spades)<br/>\u00a0<br/>\u00a0<br/>// create an unshuffled deck<br/>var efg =  Deck(shuffling: false)<br/>\u00a0<br/>\u00a0<br/>// create a shuffled deck and print its contents<br/>var d = Deck()<br/>print(d)<br/>\u00a0<br/>// deal three cards<br/>d.deal()<br/>d.deal()<br/>d.deal()<br/>d<br/>\u00a0<br/>// deal a couple more cards and check their color<br/>let c = d.deal()<br/>c.color<br/>\u00a0<br/>let cc = d.deal()<br/>cc.color<br/>\u00a0<br/>// deal out the rest of the deck, leaving just one card<br/>while d.count &gt; 1 {<br/>    d.deal()<br/>}<br/>d<br/>\u00a0<br/>// test equality of a couple cards<br/>if kh == Card(pip: Pip.King, suit: Suit.Clubs) {<br/>    let a = true<br/>}<br/>else {<br/>    let a = false<br/>}<br/>\u00a0<br/>kh\u00a0!= Card(pip: Pip.King, suit: Suit.Clubs)<br/>kh.isFaceCard<br/>fc.isFaceCard<br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 66, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> <span class=\"kw1\">eval</span> playing_cards <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> deck<br/>    <span class=\"co1\">#variable suits {C D H S}</span><br/>    <span class=\"kw1\">variable</span> suits <span class=\"br0\">{</span>\\u2663 \\u2662 \\u2661 \\u2660<span class=\"br0\">}</span><br/>    <span class=\"kw1\">variable</span> pips <span class=\"br0\">{</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> J Q K A<span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">proc</span> new_deck <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">variable</span> deck<br/>        <span class=\"kw1\">set</span> deck <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">52</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">lappend</span> deck <span class=\"re0\">$i</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">proc</span> shuffle <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">variable</span> deck<br/>        <span class=\"co1\"># shuffle in place</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">51</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i -<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>int<span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">*</span> rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">set</span> card <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$deck</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/>            <span class=\"kw2\">lset</span> deck <span class=\"re0\">$n</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$deck</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>            <span class=\"kw2\">lset</span> deck <span class=\"re0\">$i</span> <span class=\"re0\">$card</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">proc</span> deal <span class=\"br0\">{</span><span class=\"br0\">{</span>num <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">variable</span> deck<br/>        <span class=\"kw2\">incr</span> num -<span class=\"nu0\">1</span><br/>        <span class=\"kw1\">set</span> cards <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$deck</span> <span class=\"nu0\">0</span> <span class=\"re0\">$num</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> deck <span class=\"br0\">[</span><span class=\"kw2\">lreplace</span> <span class=\"re0\">$deck</span> <span class=\"nu0\">0</span> <span class=\"re0\">$num</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$cards</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">proc</span> card2string <span class=\"br0\">{</span>card<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">variable</span> suits<br/>        <span class=\"kw1\">variable</span> pips<br/>        <span class=\"kw1\">set</span> suit <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$card</span> / <span class=\"nu0\">13</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> pip <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$card</span> <span class=\"sy0\">%</span> <span class=\"nu0\">13</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%2s\u00a0%s\"</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$pips</span> <span class=\"re0\">$pip</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$suits</span> <span class=\"re0\">$suit</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">proc</span> print <span class=\"br0\">{</span>cards args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        array <span class=\"kw1\">set</span> opts <span class=\"br0\">[</span><span class=\"kw2\">concat</span> -sort false <span class=\"re0\">$args</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$opts</span><span class=\"br0\">(</span>-sort<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">set</span> cards <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -integer <span class=\"re0\">$cards</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">foreach</span> card <span class=\"re0\">$cards</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">puts</span> <span class=\"br0\">[</span>card2string <span class=\"re0\">$card</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">proc</span> print_deck <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">variable</span> deck<br/>        print <span class=\"re0\">$deck</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>playing_cards::<span class=\"me1\">new_deck</span><br/>playing_cards::<span class=\"me1\">shuffle</span><br/><span class=\"kw1\">set</span> hand <span class=\"br0\">[</span>playing_cards::<span class=\"me1\">deal</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"my hand:\"</span><br/>playing_cards::<span class=\"me1\">print</span> <span class=\"re0\">$hand</span> -sort true<br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>the deck:\"</span><br/>playing_cards::<span class=\"me1\">print_deck</span></pre>"}, {"lang": "VBScript", "loc": 68, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/>class playingcard<br/>\t<span class=\"kw4\">dim</span> suit<br/>\t<span class=\"kw4\">dim</span> pips<br/><span class=\"kw3\">end</span> class<br/>\u00a0<br/>class carddeck<br/>\t<span class=\"kw2\">private</span> suitnames<br/>\t<span class=\"kw2\">private</span> pipnames<br/>\t<span class=\"kw2\">private</span> cardno<br/>\t<span class=\"kw2\">private</span> deck(52)<br/>\t<span class=\"kw2\">private</span> nTop<br/>\u00a0<br/>\t<span class=\"kw2\">sub</span> class_initialize<br/>\t\t<span class=\"kw4\">dim</span> suit<br/>\t\t<span class=\"kw4\">dim</span> pips<br/>\t\tsuitnames = split(<span class=\"st0\">\"H,D,C,S\"</span>,<span class=\"st0\">\",\"</span>)<br/>\t\tpipnames = split(<span class=\"st0\">\"A,2,3,4,5,6,7,8,9,10,J,Q,K\"</span>,<span class=\"st0\">\",\"</span>)<br/>\t\tcardno = 0<br/>\u00a0<br/>\t\t<span class=\"kw3\">for</span> suit = 1 <span class=\"kw3\">to</span> 4<br/>\t\t\t<span class=\"kw3\">for</span> pips = 1 <span class=\"kw3\">to</span> 13<br/>\t\t\t\t<span class=\"kw4\">set</span> deck(cardno) = <span class=\"kw2\">new</span> playingcard<br/>\t\t\t\tdeck(cardno).suit = suitnames(suit-1)<br/>\t\t\t\tdeck(cardno).pips = pipnames(pips-1)<br/>\t\t\t\tcardno = cardno + 1<br/>\t\t\t<span class=\"kw3\">next</span><br/>\t\t<span class=\"kw3\">next</span><br/>\t\tnTop = 0<br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">sub</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">sub</span> showdeck<br/>\t\t<span class=\"kw4\">dim</span> a<br/>\t\t<span class=\"kw4\">redim</span> a(51-nTop)<br/>\t\t<span class=\"kw3\">for</span> i = nTop <span class=\"kw3\">to</span> 51<br/>\t\t\ta(i) = deck(i).pips &amp; deck(i).suit  <br/>\t\t<span class=\"kw3\">next</span><br/>\t\twscript.echo join( a, <span class=\"st0\">\", \"</span>)<br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">sub</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">sub</span> shuffle<br/>\t\t<span class=\"kw4\">dim</span> r<br/>\t\trandomize timer<br/>\t\t<span class=\"kw3\">for</span> i = nTop <span class=\"kw3\">to</span> 51<br/>\t\t\tr = int( rnd * ( 52 - nTop ) ) <br/>\t\t\t<span class=\"kw3\">if</span> r &lt;&gt; i <span class=\"kw3\">then</span><br/>\t\t\t\tobjswap deck(i),deck(r)<br/>\t\t\t<span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\t\t<span class=\"kw3\">next</span><br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">sub</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">function</span> deal()<br/>\t\t<span class=\"kw4\">set</span> deal = deck( nTop )<br/>\t\tnTop = nTop + 1<br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">function</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw4\">property</span> <span class=\"kw4\">get</span> cardsRemaining<br/>\t\tcardsRemaining = 52 - nTop<br/>\t<span class=\"kw3\">end</span> <span class=\"kw4\">property</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">sub</span> objswap(   a,   b )<br/>\t\t<span class=\"kw4\">dim</span> tmp<br/>\t\t<span class=\"kw4\">set</span> tmp = a<br/>\t\t<span class=\"kw4\">set</span> a = b<br/>\t\t<span class=\"kw4\">set</span> b = tmp<br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">sub</span><br/><span class=\"kw3\">end</span> class<br/>\u00a0</pre>"}, {"lang": "Vedit macro language", "loc": 83, "block": "<pre class=\"vedit highlighted_source\"><span class=\"co1\">// Playing Cards, main program</span><br/>\u00a0<br/>Call<span class=\"br0\">(</span><span class=\"st0\">\"CREATE_DECK\"</span><span class=\"br0\">)</span><br/>Call<span class=\"br0\">(</span><span class=\"st0\">\"SHUFFLE_DECK\"</span><span class=\"br0\">)</span><br/>#<span class=\"nu0\">21</span> <span class=\"sy0\">=</span> Buf_Switch<span class=\"br0\">(</span>Buf_Free<span class=\"br0\">)</span>        <span class=\"co1\">// #21 = players hand, 1st player</span><br/>#<span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> Call<span class=\"br0\">(</span><span class=\"st0\">\"DEAL_CARDS\"</span><span class=\"br0\">)</span>        <span class=\"co1\">// deal 5 cards to player 1</span><br/>#<span class=\"nu0\">22</span> <span class=\"sy0\">=</span> Buf_Switch<span class=\"br0\">(</span>Buf_Free<span class=\"br0\">)</span>        <span class=\"co1\">// #22 = players hand, 2nd player</span><br/>#<span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> Call<span class=\"br0\">(</span><span class=\"st0\">\"DEAL_CARDS\"</span><span class=\"br0\">)</span>        <span class=\"co1\">// deal 5 cards to player 2</span><br/>Buf_Switch<span class=\"br0\">(</span>#<span class=\"nu0\">10</span><span class=\"br0\">)</span> BOF               <span class=\"co1\">// display the deck</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"co1\">///////////////////////////////////////////////////////////////////////////</span><br/><span class=\"co1\">//</span><br/><span class=\"co1\">//  Create a deck into a new edit buffer. One text line for each card.</span><br/><span class=\"co1\">//</span><br/><span class=\"sy0\">:</span>CREATE_DECK<span class=\"sy0\">:</span><br/>#<span class=\"nu0\">10</span> <span class=\"sy0\">=</span> Buf_Switch<span class=\"br0\">(</span>Buf_Free<span class=\"br0\">)</span>        <span class=\"co1\">// Buffer @(#10) = the deck</span><br/>\u00a0<br/>RS<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Diamonds\"</span><span class=\"br0\">)</span><br/>RS<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Spades\"</span><span class=\"br0\">)</span><br/>RS<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Hearts\"</span><span class=\"br0\">)</span><br/>RS<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Clubs\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>RS<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"st0\">\" Jack\"</span><span class=\"br0\">)</span><br/>RS<span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Queen\"</span><span class=\"br0\">)</span><br/>RS<span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"st0\">\" King\"</span><span class=\"br0\">)</span><br/>RS<span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"sy0\">,</span> <span class=\"st0\">\"  Ace\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">1</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> #<span class=\"nu0\">1</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">5</span><span class=\"sy0\">;</span> #<span class=\"nu0\">1</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">2</span><span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> #<span class=\"nu0\">2</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">15</span><span class=\"sy0\">;</span> #<span class=\"nu0\">2</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>#<span class=\"nu0\">2</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Num_Ins<span class=\"br0\">(</span>#<span class=\"nu0\">2</span><span class=\"sy0\">,</span> NOCR<span class=\"br0\">)</span>     <span class=\"co1\">// pip (2 to 10) as numeric</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            IT<span class=\"br0\">(</span>@<span class=\"br0\">(</span>#<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>             <span class=\"co1\">// pip (11 to 14) as a word</span><br/>        <span class=\"br0\">}</span><br/>        IT<span class=\"br0\">(</span><span class=\"st0\">\" of \"</span><span class=\"br0\">)</span><br/>        IT<span class=\"br0\">(</span>@<span class=\"br0\">(</span>#<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> IN              <span class=\"co1\">// suit</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"co1\">///////////////////////////////////////////////////////////////////////////</span><br/><span class=\"co1\">//</span><br/><span class=\"co1\">//  Shuffle the deck using Fisher-Yates algorithm</span><br/><span class=\"co1\">//</span><br/><span class=\"sy0\">:</span>SHUFFLE_DECK<span class=\"sy0\">:</span><br/>Buf_Switch<span class=\"br0\">(</span>#<span class=\"nu0\">10</span><span class=\"br0\">)</span>                   <span class=\"co1\">// the deck</span><br/>#<span class=\"nu0\">90</span> <span class=\"sy0\">=</span> Time_Tick                   <span class=\"co1\">// seed for random number generator</span><br/>#<span class=\"nu0\">91</span> <span class=\"sy0\">=</span> <span class=\"nu0\">51</span>                          <span class=\"co1\">// random numbers in range 0 to 50</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">1</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> #<span class=\"nu0\">1</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">52</span><span class=\"sy0\">;</span> #<span class=\"nu0\">1</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Call<span class=\"br0\">(</span><span class=\"st0\">\"RANDOM\"</span><span class=\"br0\">)</span><br/>    Goto_Line<span class=\"br0\">(</span>Return_Value<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    Block_Copy<span class=\"br0\">(</span>#<span class=\"nu0\">1</span><span class=\"sy0\">,</span> #<span class=\"nu0\">1</span><span class=\"sy0\">,</span> LINESET<span class=\"sy0\">+</span>DELETE<span class=\"br0\">)</span><br/>    Reg_Copy<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> DELETE<span class=\"br0\">)</span><br/>    Goto_Line<span class=\"br0\">(</span>#<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    Reg_Ins<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------</span><br/><span class=\"co1\">// Generate random numbers in range 0 &lt;= Return_Value &lt; #91</span><br/><span class=\"co1\">//  #90 = Seed    (0 to 0x7fffffff)</span><br/><span class=\"co1\">//  #91 = Scaling (0 to 0x10000)</span><br/>\u00a0<br/><span class=\"sy0\">:</span>RANDOM<span class=\"sy0\">:</span><br/>#<span class=\"nu0\">92</span> <span class=\"sy0\">=</span> 0x7fffffff <span class=\"sy0\">/</span> <span class=\"nu0\">48271</span><br/>#<span class=\"nu0\">93</span> <span class=\"sy0\">=</span> 0x7fffffff <span class=\"sy0\">%</span> <span class=\"nu0\">48271</span><br/>#<span class=\"nu0\">90</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">48271</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>#<span class=\"nu0\">90</span> <span class=\"sy0\">%</span> #<span class=\"nu0\">92</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> #<span class=\"nu0\">93</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>#<span class=\"nu0\">90</span> <span class=\"sy0\">/</span> #<span class=\"nu0\">92</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0x7fffffff<br/><span class=\"kw1\">Return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>#<span class=\"nu0\">90</span> <span class=\"sy0\">&amp;</span> 0xffff<span class=\"br0\">)</span> <span class=\"sy0\">*</span> #<span class=\"nu0\">91</span> <span class=\"sy0\">/</span> 0x10000<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">///////////////////////////////////////////////////////////////////////////</span><br/><span class=\"co1\">//</span><br/><span class=\"co1\">//  Deal #1 cards: move the cards from deck to current edit buffer</span><br/><span class=\"co1\">//</span><br/><span class=\"sy0\">:</span>DEAL_CARDS<span class=\"sy0\">:</span><br/>#<span class=\"nu0\">11</span> <span class=\"sy0\">=</span> Buf_Num                     <span class=\"co1\">// this buffer (players hand)</span><br/>Buf_Switch<span class=\"br0\">(</span>#<span class=\"nu0\">10</span><span class=\"br0\">)</span>                   <span class=\"co1\">// the deck</span><br/>BOF<br/>Reg_Copy<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span> #<span class=\"nu0\">1</span><span class=\"sy0\">,</span> DELETE<span class=\"br0\">)</span>           <span class=\"co1\">// pull the first #1 cards from the deck</span><br/>Buf_Switch<span class=\"br0\">(</span>#<span class=\"nu0\">11</span><span class=\"br0\">)</span>                   <span class=\"co1\">// players hand</span><br/>Reg_ins<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>                        <span class=\"co1\">// insert the cards here</span><br/><span class=\"kw1\">Return</span></pre>"}, {"lang": "zkl", "loc": 25, "block": "<pre class=\"text highlighted_source\">const Diamonds=1, Spades=3, Clubs=0, Hearts=2, Ace=1; // informational<br/>var suits=T(0x1F0D1,0x1F0C1,0x1F0B1,0x1F0A1); //unicode \ud83c\udcd1,\ud83c\udcc1,\ud83c\udcb1,\ud83c\udca1<br/>\u00a0<br/>class Card{<br/>   fcn init(pip,suit){  // or 0..51<br/>      reg p,s;<br/>      if(vm.numArgs==1){ s=pip/13; p=pip%13; } else { p=pip; s=suit }<br/>      var [const] _pip=p, _suit=s;<br/>   }<br/>   fcn toString{<br/>      p:=_pip + (_pip&gt;=11);<br/>      (suits[_suit]+p).toString(8); // int--&gt;UTF-8<br/>   }<br/>}<br/>\u00a0<br/>class Deck{  //--&gt; 52 shuffled Cards<br/>   var [const] deck=L();<br/>   fcn init{<br/>      (0).pump(52,deck.clear().write,Card);<br/>      shuffle();<br/>   }<br/>   fcn shuffle{ deck.shuffle() }<br/>   fcn deal(cards=5){ deck.pop(0,cards); }<br/>   fcn toString{ deck.pump(String,\"toString\"); }<br/>}</pre>"}]}