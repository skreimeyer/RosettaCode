{"task": "Cumulative_standard_deviation", "blocks": [{"lang": "360 Assembly", "loc": 102, "block": "<pre class=\"text highlighted_source\">******** Standard deviation of a population<br/>STDDEV   CSECT<br/>         USING  STDDEV,R13<br/>SAVEAREA B      STM-SAVEAREA(R15)<br/>         DC     17F'0'<br/>         DC     CL8'STDDEV'<br/>STM      STM    R14,R12,12(R13)<br/>         ST     R13,4(R15)<br/>         ST     R15,8(R13)<br/>         LR     R13,R15<br/>         SR     R8,R8           s=0<br/>         SR     R9,R9           ss=0<br/>         SR     R4,R4           i=0<br/>         LA     R6,1<br/>         LH     R7,N<br/>LOOPI    BXH    R4,R6,ENDLOOPI<br/>         LR     R1,R4           i<br/>         BCTR   R1,0<br/>         SLA    R1,1<br/>         LH     R5,T(R1)<br/>         ST     R5,WW           ww=t(i)<br/>         MH     R5,=H'1000'     w=ww*1000<br/>         AR     R8,R5           s=s+w<br/>         LR     R15,R5<br/>         MR     R14,R5          w*w<br/>         AR     R9,R15          ss=ss+w*w<br/>         LR     R14,R8          s<br/>         SRDA   R14,32<br/>         DR     R14,R4          /i<br/>         ST     R15,AVG         avg=s/i<br/>         LR     R14,R9          ss<br/>         SRDA   R14,32<br/>         DR     R14,R4          ss/i<br/>         LR     R2,R15          ss/i<br/>         LR     R15,R8          s<br/>         MR     R14,R8          s*s<br/>         LR     R3,R15<br/>         LR     R15,R4          i<br/>         MR     R14,R4          i*i<br/>         LR     R1,R15<br/>         LA     R14,0<br/>         LR     R15,R3<br/>         DR     R14,R1          (s*s)/(i*i)<br/>         SR     R2,R15<br/>         LR     R10,R2          std=ss/i-(s*s)/(i*i)<br/>         LR     R11,R10         std<br/>         SRA    R11,1           x=std/2<br/>         LR     R12,R10         px=std<br/>LOOPWHIL EQU    *<br/>         CR     R12,R11         while px&lt;&gt;=x<br/>         BE     ENDWHILE<br/>         LR     R12,R11         px=x<br/>         LR     R15,R10         std<br/>         LA     R14,0<br/>         DR     R14,R12         /px<br/>         LR     R1,R12          px<br/>         AR     R1,R15          px+std/px<br/>         SRA    R1,1            /2<br/>         LR     R11,R1          x=(px+std/px)/2<br/>         B      LOOPWHIL<br/>ENDWHILE EQU    *<br/>         LR     R10,R11<br/>         CVD    R4,P8           i<br/>         MVC    C17,MASK17<br/>         ED     C17,P8<br/>         MVC    BUF+2(1),C17+15<br/>         L      R1,WW<br/>         CVD    R1,P8<br/>         MVC    C17,MASK17<br/>         ED     C17,P8<br/>         MVC    BUF+10(1),C17+15<br/>         L      R1,AVG<br/>         CVD    R1,P8<br/>         MVC    C18,MASK18<br/>         ED     C18,P8<br/>         MVC    BUF+17(5),C18+12<br/>         CVD    R10,P8          std<br/>         MVC    C18,MASK18<br/>         ED     C18,P8<br/>         MVC    BUF+31(5),C18+12<br/>         WTO    MF=(E,WTOMSG)\t\t  <br/>         B      LOOPI<br/>ENDLOOPI EQU    *<br/>         L      R13,4(0,R13)<br/>         LM     R14,R12,12(R13)<br/>         XR     R15,R15<br/>         BR     R14<br/>         DS     0D<br/>N        DC     H'8'<br/>T        DC     H'2',H'4',H'4',H'4',H'5',H'5',H'7',H'9'<br/>WW       DS     F<br/>AVG      DS     F<br/>P8       DS     PL8<br/>MASK17   DC     C' ',13X'20',X'2120',C'-'              <br/>MASK18   DC     C' ',10X'20',X'2120',C'.',3X'20',C'-' <br/>C17      DS     CL17<br/>C18      DS     CL18<br/>WTOMSG   DS     0F<br/>         DC     H'80',XL2'0000'<br/>BUF      DC     CL80'N=1  ITEM=1  AVG=1.234  STDDEV=1.234 '<br/>         YREGS  <br/>         END    STDDEV</pre>"}, {"lang": "Ada", "loc": 37, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Elementary_Functions</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Elementary_Functions</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Elementary_Functions</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Elementary_Functions</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;                        <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Float_Text_IO</span>;                  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Float_Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Integer_Text_IO</span>;                <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Integer_Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Test_Deviation <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Sample <span class=\"kw1\">is</span> <span class=\"kw3\">record</span><br/>      N           \u00a0: Natural\u00a0:= <span class=\"nu0\">0</span>;<br/>      Sum         \u00a0: Float\u00a0:= <span class=\"nu0\">0.0</span>;<br/>      SumOfSquares\u00a0: Float\u00a0:= <span class=\"nu0\">0.0</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/>   <span class=\"kw3\">procedure</span> Add <span class=\"br0\">(</span>Data\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Sample; Point\u00a0: Float<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      Data.<span class=\"me1\">N</span>      \u00a0:= Data.<span class=\"me1\">N</span> + <span class=\"nu0\">1</span>;<br/>      Data.<span class=\"me1\">Sum</span>   \u00a0:= Data.<span class=\"me1\">Sum</span>    + Point;<br/>      Data.<span class=\"me1\">SumOfSquares</span>\u00a0:= Data.<span class=\"me1\">SumOfSquares</span> + Point ** <span class=\"nu0\">2</span>;<br/>   <span class=\"kw1\">end</span> Add;<br/>   <span class=\"kw3\">function</span> Deviation <span class=\"br0\">(</span>Data\u00a0: Sample<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Float <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> Sqrt <span class=\"br0\">(</span>Data.<span class=\"me1\">SumOfSquares</span> / Float <span class=\"br0\">(</span>Data.<span class=\"me1\">N</span><span class=\"br0\">)</span> - <span class=\"br0\">(</span>Data.<span class=\"me1\">Sum</span> / Float <span class=\"br0\">(</span>Data.<span class=\"me1\">N</span><span class=\"br0\">)</span><span class=\"br0\">)</span> ** <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Deviation;<br/>\u00a0<br/>   Data\u00a0: Sample;<br/>   Test\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Integer\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> Index <span class=\"kw3\">in</span> Test'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      Add <span class=\"br0\">(</span>Data, Float<span class=\"br0\">(</span>Test<span class=\"br0\">(</span>Index<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      Put<span class=\"br0\">(</span><span class=\"st0\">\"N=\"</span><span class=\"br0\">)</span>; Put<span class=\"br0\">(</span>Item =&gt; Index, Width =&gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>      Put<span class=\"br0\">(</span><span class=\"st0\">\" ITEM=\"</span><span class=\"br0\">)</span>; Put<span class=\"br0\">(</span>Item =&gt; Test<span class=\"br0\">(</span>Index<span class=\"br0\">)</span>, Width =&gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>      Put<span class=\"br0\">(</span><span class=\"st0\">\" AVG=\"</span><span class=\"br0\">)</span>; Put<span class=\"br0\">(</span>Item =&gt; Float<span class=\"br0\">(</span>Data.<span class=\"me1\">Sum</span><span class=\"br0\">)</span>/Float<span class=\"br0\">(</span>Index<span class=\"br0\">)</span>, Fore =&gt; <span class=\"nu0\">1</span>, Aft =&gt; <span class=\"nu0\">3</span>, Exp =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>      Put<span class=\"br0\">(</span><span class=\"st0\">\"  STDDEV=\"</span><span class=\"br0\">)</span>; Put<span class=\"br0\">(</span>Item =&gt; Deviation <span class=\"br0\">(</span>Data<span class=\"br0\">)</span>, Fore =&gt; <span class=\"nu0\">1</span>, Aft =&gt; <span class=\"nu0\">3</span>, Exp =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>      New_line;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Test_Deviation;<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 52, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> VALUE <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw3\">CHAR</span> value<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>     STDDEV <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw3\">CHAR</span> stddev<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>     MEAN <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw3\">CHAR</span> mean<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>     VAR <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw3\">CHAR</span> var<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>     COUNT <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw3\">CHAR</span> count<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>     RESET <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw3\">CHAR</span> reset<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> ACTION <span class=\"sy1\">=</span> <span class=\"kw6\">UNION</span> <span class=\"br0\">(</span> VALUE<span class=\"sy1\">,</span> STDDEV<span class=\"sy1\">,</span> MEAN<span class=\"sy1\">,</span> VAR<span class=\"sy1\">,</span> COUNT<span class=\"sy1\">,</span> RESET <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> sum <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> sum2 <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> num <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> stat object <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> v<span class=\"sy1\">,</span> ACTION action<span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>\u00a0<br/>  <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> m<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">CASE</span> action <span class=\"kw2\">IN</span><br/>  <span class=\"br0\">(</span>VALUE<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    num <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>    sum <span class=\"sy1\">+:=</span> v<span class=\"sy1\">;</span><br/>    sum2 <span class=\"sy1\">+:=</span> v<span class=\"sy1\">*</span>v<span class=\"sy1\">;</span><br/>    stat object<span class=\"br0\">(</span>0<span class=\"sy1\">,</span> <span class=\"kw4\">LOC</span> STDDEV<span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span>STDDEV<span class=\"br0\">)</span><span class=\"sy1\">:</span><br/>    <span class=\"kw24\">long sqrt</span><span class=\"br0\">(</span>stat object<span class=\"br0\">(</span>0<span class=\"sy1\">,</span> <span class=\"kw4\">LOC</span> VAR<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span>MEAN<span class=\"br0\">)</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">IF</span> num<span class=\"sy1\">&gt;</span>0 <span class=\"kw2\">THEN</span> sum<span class=\"sy1\">/</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span> <span class=\"kw2\">ELSE</span> 0 <span class=\"kw2\">FI</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span>VAR<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    m <span class=\"sy1\">:=</span> stat object<span class=\"br0\">(</span>0<span class=\"sy1\">,</span> <span class=\"kw4\">LOC</span> MEAN<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> num<span class=\"sy1\">&gt;</span>0 <span class=\"kw2\">THEN</span> sum2<span class=\"sy1\">/</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"sy1\">-</span>m<span class=\"sy1\">*</span>m <span class=\"kw2\">ELSE</span> 0 <span class=\"kw2\">FI</span><br/>  <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span>COUNT<span class=\"br0\">)</span><span class=\"sy1\">:</span><br/>    num<span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span>RESET<span class=\"br0\">)</span><span class=\"sy1\">:</span><br/>    sum <span class=\"sy1\">:=</span> sum2 <span class=\"sy1\">:=</span> num <span class=\"sy1\">:=</span> 0<br/>  <span class=\"kw2\">ESAC</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> v <span class=\"sy1\">=</span> <span class=\"br0\">(</span> 2<span class=\"sy1\">,</span>4<span class=\"sy1\">,</span>4<span class=\"sy1\">,</span>4<span class=\"sy1\">,</span>5<span class=\"sy1\">,</span>5<span class=\"sy1\">,</span>7<span class=\"sy1\">,</span>9 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> sd<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> v <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> v <span class=\"kw2\">DO</span><br/>    sd <span class=\"sy1\">:=</span> stat object<span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"kw4\">LOC</span> VALUE<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"value: \"</span>g<span class=\"br0\">(</span>0<span class=\"sy1\">,</span>6<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">\" standard dev\u00a0:= \"</span>g<span class=\"br0\">(</span>0<span class=\"sy1\">,</span>6<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span> v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span> sd<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">OD</span><br/>\u00a0<br/><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 25, "block": "<pre class=\"text highlighted_source\">begin<br/>\u00a0<br/>    long real sum, sum2;<br/>    integer   n;<br/>\u00a0<br/>    long real procedure sd (long real value x)\u00a0;<br/>    begin<br/>        sum \u00a0:= sum  + x;<br/>        sum2\u00a0:= sum2 + (x*x);<br/>        n   \u00a0:= n    + 1;<br/>        if n = 0 then 0 else longsqrt(sum2/n - sum*sum/n/n)<br/>    end sd;<br/>\u00a0<br/>    sum\u00a0:= sum2\u00a0:= n\u00a0:= 0;<br/>\u00a0<br/>    r_format\u00a0:= \"A\"; r_w\u00a0:= 14; r_d\u00a0:= 6;\u00a0% set output to fixed point format\u00a0%<br/>\u00a0<br/>    for i\u00a0:= 2,4,4,4,5,5,7,9<br/>    do begin<br/>        long real val;<br/>        val\u00a0:= i;<br/>        write(val, sd(val))<br/>    end for_i<br/>\u00a0<br/>end.</pre>"}, {"lang": "AppleScript", "loc": 50, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- stdDevInc\u00a0:: Accumulator -&gt; Num -&gt; Index -&gt; Accumulator</span><br/><span class=\"co1\">-- stdDevInc\u00a0:: {sum:, squaresSum:, stages:} -&gt; Real -&gt; Integer</span><br/><span class=\"co1\">--                -&gt; {sum:, squaresSum:, stages:} </span><br/><span class=\"kw3\">on</span> stdDevInc<span class=\"br0\">(</span>a, n, i<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> sum <span class=\"kw3\">to</span> <span class=\"br0\">(</span>sum <span class=\"kw3\">of</span> a<span class=\"br0\">)</span> <span class=\"sy0\">+</span> n<br/>    <span class=\"kw3\">set</span> squaresSum <span class=\"kw3\">to</span> <span class=\"br0\">(</span>squaresSum <span class=\"kw3\">of</span> a<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>n <span class=\"sy0\">^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> stages <span class=\"kw3\">to</span> <span class=\"br0\">(</span>stages <span class=\"kw3\">of</span> a<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span>squaresSum <span class=\"sy0\">/</span> i<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>sum <span class=\"sy0\">/</span> i<span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">^</span> <span class=\"nu0\">0.5</span><br/>\u00a0<br/>    <span class=\"br0\">{</span>sum:sum, squaresSum:squaresSum, stages:stages<span class=\"br0\">}</span><br/><span class=\"kw3\">end</span> stdDevInc<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"kw3\">set</span> lstSample <span class=\"kw3\">to</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">9</span><span class=\"br0\">]</span><br/>\u00a0<br/>    stages <span class=\"kw3\">of</span> foldl<span class=\"br0\">(</span>stdDevInc, \u00ac<br/>        <span class=\"br0\">{</span>sum:<span class=\"nu0\">0</span>, squaresSum:<span class=\"nu0\">0</span>, stages:<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span>, lstSample<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; {0.0, 1.0, 0.942809041582, 0.866025403784, 0.979795897113, 1.0, 1.399708424448, 2.0}</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS  ----------------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> lambda<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> lambda\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "AutoHotkey", "loc": 15, "block": "<pre class=\"autohotkey highlighted_source\">Data <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><br/>\u00a0<br/>for k<span class=\"sy0\">,</span> v in Data <span class=\"br0\">{</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">FileAppend</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"#\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">a_index</span></a> <span class=\"st0\">\" value = \"</span> v <span class=\"st0\">\" stddev = \"</span> stddev<span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span> <span class=\"co1\">; send to stdout</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/>stddev<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tstatic n<span class=\"sy0\">,</span> sum<span class=\"sy0\">,</span> sum2<br/>\tn<span class=\"sy0\">++</span><br/>\tsum <span class=\"sy0\">+=</span> x<br/>\tsum2 <span class=\"sy0\">+=</span> x<span class=\"sy0\">*</span>x<br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">sqrt</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>sum2<span class=\"sy0\">/</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>sum<span class=\"sy0\">*</span>sum<span class=\"br0\">)</span><span class=\"sy0\">/</span>n<span class=\"br0\">)</span><span class=\"sy0\">/</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 21, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f STANDARD_DEVIATION.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    n = <span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"2,4,4,4,5,5,7,9\"</span>,arr,<span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>n; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      temp<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%g\u00a0%g<span class=\"es0\">\\n</span>\"</span>,arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span>,stdev<span class=\"br0\">(</span>temp<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> stdev<span class=\"br0\">(</span>arr,  i,n,s1,s2,variance,x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      n<span class=\"sy3\">++</span><br/>      x = arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>      s1 <span class=\"sy3\">+</span>= x <span class=\"sy3\">^</span> <span class=\"nu0\">2</span><br/>      s2 <span class=\"sy3\">+</span>= x<br/>    <span class=\"br0\">}</span><br/>    variance = <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy3\">*</span> s1<span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"br0\">(</span>s2 <span class=\"sy3\">^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">/</span> <span class=\"br0\">(</span>n <span class=\"sy3\">^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>variance<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Axiom", "loc": 17, "block": "<pre class=\"text highlighted_source\">)abbrev package TESTD TestDomain<br/>TestDomain(T\u00a0: Join(Field,RadicalCategory)): Exports == Implementation where<br/>  R ==&gt; Record(n\u00a0: Integer, sum\u00a0: T, ssq\u00a0: T)<br/>  Exports == AbelianMonoid with<br/>    _+\u00a0: (%,T) -&gt;\u00a0%<br/>    _+\u00a0: (T,%) -&gt;\u00a0%<br/>    sd\u00a0:\u00a0% -&gt; T<br/>  Implementation == R add<br/>    Rep\u00a0:= R   -- similar representation and implementation<br/>    obj\u00a0:\u00a0%<br/>    0 == [0,0,0]<br/>    obj + (obj2:%) == [obj.n + obj2.n, obj.sum + obj2.sum, obj.ssq + obj2.ssq]<br/>    obj + (x:T) == obj + [1, x, x*x]<br/>    (x:T) + obj == obj + x<br/>    sd obj == <br/>      mean\u00a0: T\u00a0:= obj.sum / (obj.n::T)<br/>      sqrt(obj.ssq / (obj.n::T) - mean*mean)</pre>"}, {"lang": "BBC BASIC", "loc": 15, "block": "<pre class=\"text highlighted_source\">      MAXITEMS = 100<br/>      FOR i% = 1 TO 8<br/>        READ n<br/>        PRINT \"Value = \"; n \", running SD = \" FNrunningsd(n)<br/>      NEXT<br/>      END<br/>\u00a0<br/>      DATA 2,4,4,4,5,5,7,9<br/>\u00a0<br/>      DEF FNrunningsd(n)<br/>      PRIVATE list(), i%<br/>      DIM list(MAXITEMS)<br/>      i% += 1<br/>      list(i%) = n<br/>      = SQR(MOD(list())^2/i% - (SUM(list())/i%)^2)</pre>"}, {"lang": "C", "loc": 48, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw2\">enum</span> Action <span class=\"br0\">{</span> STDDEV<span class=\"sy0\">,</span> MEAN<span class=\"sy0\">,</span> VAR<span class=\"sy0\">,</span> COUNT <span class=\"br0\">}</span> Action<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> stat_obj_struct <span class=\"br0\">{</span><br/>   <span class=\"kw4\">double</span> sum<span class=\"sy0\">,</span> sum2<span class=\"sy0\">;</span><br/>   <span class=\"kw4\">size_t</span> num<span class=\"sy0\">;</span><br/>   Action action<span class=\"sy0\">;</span> <br/><span class=\"br0\">}</span> sStatObject<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>StatObject<span class=\"sy0\">;</span><br/>\u00a0<br/>StatObject NewStatObject<span class=\"br0\">(</span> Action action <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  StatObject so<span class=\"sy0\">;</span><br/>\u00a0<br/>  so <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>sStatObject<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  so<span class=\"sy0\">-&gt;</span>sum <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>  so<span class=\"sy0\">-&gt;</span>sum2 <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>  so<span class=\"sy0\">-&gt;</span>num <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  so<span class=\"sy0\">-&gt;</span>action <span class=\"sy0\">=</span> action<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> so<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co2\">#define FREE_STAT_OBJECT(so) \\<br/>   free(so); so = NULL</span><br/><span class=\"kw4\">double</span> stat_obj_value<span class=\"br0\">(</span>StatObject so<span class=\"sy0\">,</span> Action action<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">double</span> num<span class=\"sy0\">,</span> mean<span class=\"sy0\">,</span> var<span class=\"sy0\">,</span> stddev<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>so<span class=\"sy0\">-&gt;</span>num <span class=\"sy0\">==</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>  num <span class=\"sy0\">=</span> so<span class=\"sy0\">-&gt;</span>num<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>action<span class=\"sy0\">==</span>COUNT<span class=\"br0\">)</span> <span class=\"kw1\">return</span> num<span class=\"sy0\">;</span><br/>  mean <span class=\"sy0\">=</span> so<span class=\"sy0\">-&gt;</span>sum<span class=\"sy0\">/</span>num<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>action<span class=\"sy0\">==</span>MEAN<span class=\"br0\">)</span> <span class=\"kw1\">return</span> mean<span class=\"sy0\">;</span><br/>  var <span class=\"sy0\">=</span> so<span class=\"sy0\">-&gt;</span>sum2<span class=\"sy0\">/</span>num <span class=\"sy0\">-</span> mean<span class=\"sy0\">*</span>mean<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>action<span class=\"sy0\">==</span>VAR<span class=\"br0\">)</span> <span class=\"kw1\">return</span> var<span class=\"sy0\">;</span><br/>  stddev <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span>var<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>action<span class=\"sy0\">==</span>STDDEV<span class=\"br0\">)</span> <span class=\"kw1\">return</span> stddev<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> stat_object_add<span class=\"br0\">(</span>StatObject so<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> v<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  so<span class=\"sy0\">-&gt;</span>num<span class=\"sy0\">++;</span><br/>  so<span class=\"sy0\">-&gt;</span>sum <span class=\"sy0\">+=</span> v<span class=\"sy0\">;</span><br/>  so<span class=\"sy0\">-&gt;</span>sum2 <span class=\"sy0\">+=</span> v<span class=\"sy0\">*</span>v<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> stat_obj_value<span class=\"br0\">(</span>so<span class=\"sy0\">,</span> so<span class=\"sy0\">-&gt;</span>action<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 25, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> standardDeviation<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            List<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span> nums <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">9</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> nums<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span>            <br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>sdev<span class=\"br0\">(</span>nums<span class=\"sy0\">.</span><span class=\"me1\">GetRange</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> sdev<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span> nums<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            List<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span> store <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span> n <span class=\"kw1\">in</span> nums<span class=\"br0\">)</span><br/>                store<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> nums<span class=\"sy0\">.</span><span class=\"me1\">Average</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> nums<span class=\"sy0\">.</span><span class=\"me1\">Average</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>           <br/>\u00a0<br/>            <span class=\"kw1\">return</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>store<span class=\"sy0\">.</span><span class=\"me1\">Sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> store<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 41, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;assert.h&gt;</span><br/><span class=\"co2\">#include &lt;cmath&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span> N<span class=\"sy1\">&gt;</span> <span class=\"kw4\">struct</span> MomentsAccumulator_<br/><span class=\"br0\">{</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> m_<span class=\"sy4\">;</span><br/>\tMomentsAccumulator_<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> m_<span class=\"br0\">(</span>N <span class=\"sy2\">+</span> <span class=\"nu0\">1</span>, <span class=\"nu16\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw4\">void</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">double</span> v<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">double</span> inc <span class=\"sy1\">=</span> <span class=\"nu16\">1.0</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span><span class=\"sy3\">&amp;</span> mi <span class=\"sy4\">:</span> m_<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tmi <span class=\"sy2\">+</span><span class=\"sy1\">=</span> inc<span class=\"sy4\">;</span><br/>\t\t\tinc <span class=\"sy2\">*</span><span class=\"sy1\">=</span> v<span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> Stdev<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> moments<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw3\">assert</span><span class=\"br0\">(</span>moments.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">assert</span><span class=\"br0\">(</span>moments<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">double</span> mean <span class=\"sy1\">=</span> moments<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy2\">/</span> moments<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">double</span> meanSquare <span class=\"sy1\">=</span> moments<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy2\">/</span> moments<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>meanSquare <span class=\"sy2\">-</span> mean <span class=\"sy2\">*</span> mean<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> data<span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">9</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tMomentsAccumulator_<span class=\"sy1\">&lt;</span><span class=\"nu0\">2</span><span class=\"sy1\">&gt;</span> accum<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> d <span class=\"sy4\">:</span> data<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\taccum<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Running stdev:  \"</span> <span class=\"sy1\">&lt;&lt;</span> Stdev<span class=\"br0\">(</span>accum.<span class=\"me1\">m_</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 11, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>defn stateful-std-deviation<span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>letfn <span class=\"br0\">[</span><span class=\"br0\">(</span>std-dev<span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>v <span class=\"br0\">(</span>deref <span class=\"br0\">(</span>find-var <span class=\"br0\">(</span><span class=\"kw1\">symbol</span> <span class=\"br0\">(</span>str *ns* <span class=\"st0\">\"/v\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>              <span class=\"br0\">(</span>swap<span class=\"sy0\">!</span> v conj x<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>m <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>reduce<span class=\"sy0\"> + </span>@v<span class=\"br0\">)</span> <span class=\"br0\">(</span>count @v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">(</span>Math/<span class=\"kw1\">sqrt</span> <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>reduce<span class=\"sy0\"> + </span><span class=\"br0\">(</span>map #<span class=\"br0\">(</span>* <span class=\"br0\">(</span>- m <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>- m <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> @v<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>count @v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">nil</span>? <span class=\"br0\">(</span>resolve 'v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">intern</span> *ns* 'v <span class=\"br0\">(</span><span class=\"kw1\">atom</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>std-dev x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "COBOL", "loc": 72, "block": "<pre class=\"cobol highlighted_source\"><span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> run-stddev<span class=\"sy0\">.</span><br/>environment <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">input-output</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">file-control</span><span class=\"sy0\">.</span><br/>  <span class=\"kw3\">select</span> input-<span class=\"kw3\">file</span> <span class=\"kw3\">assign</span> <span class=\"kw2\">to</span> <span class=\"st0\">\"input.txt\"</span><br/>    <span class=\"kw3\">organization</span> <span class=\"kw3\">is</span> <span class=\"kw3\">line</span> <span class=\"kw3\">sequential</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">file</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">fd</span> input-<span class=\"kw3\">file</span><span class=\"sy0\">.</span><br/>  <span class=\"nu0\">01</span>  inp-<span class=\"kw3\">record</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  inp-fld  <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">03</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  <span class=\"kw3\">filler</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">01</span><span class=\"br0\">)</span>   <span class=\"kw3\">value</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>  <span class=\"nu0\">88</span> no-more-<span class=\"kw3\">input</span>     <span class=\"kw3\">value</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  ws-tb-<span class=\"kw3\">data</span><span class=\"sy0\">.</span><br/>  <span class=\"nu0\">03</span>  ws-tb-<span class=\"kw3\">size</span>         <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">03</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>  <span class=\"nu0\">03</span>  ws-tb-<span class=\"kw3\">table</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  ws-tb-fld     <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">05</span><span class=\"br0\">)</span>v9999 <span class=\"kw3\">comp-3</span> <span class=\"kw3\">occurs</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> <span class=\"nu0\">100</span> <span class=\"kw2\">times</span> <br/>        <span class=\"kw3\">depending</span> <span class=\"kw3\">on</span> ws-tb-<span class=\"kw3\">size</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span> ws-stddev       <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">05</span><span class=\"br0\">)</span>v9999 <span class=\"kw3\">comp-3</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>  <span class=\"kw2\">move</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> ws-tb-<span class=\"kw3\">size</span> <br/>  <span class=\"kw2\">open</span>  <span class=\"kw3\">input</span> input-<span class=\"kw3\">file</span><br/>    read input-<span class=\"kw3\">file</span><br/>    <span class=\"kw3\">at</span> <span class=\"kw3\">end</span><br/>      <span class=\"kw3\">set</span> no-more-<span class=\"kw3\">input</span> <span class=\"kw2\">to</span> <span class=\"kw3\">true</span><br/>    <span class=\"kw3\">end-read</span><br/>    <span class=\"kw2\">perform</span><br/>      <span class=\"kw3\">test</span> <span class=\"kw3\">after</span><br/>    <span class=\"kw2\">until</span> no-more-<span class=\"kw3\">input</span><br/>      <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> ws-tb-<span class=\"kw3\">size</span><br/>      <span class=\"kw2\">move</span> inp-fld <span class=\"kw2\">to</span> ws-tb-fld <span class=\"br0\">(</span>ws-tb-<span class=\"kw3\">size</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">call</span> <span class=\"st0\">'stddev'</span> <span class=\"kw3\">using</span>  <span class=\"kw3\">by</span> <span class=\"kw3\">reference</span> ws-tb-<span class=\"kw3\">data</span> <br/>         ws-stddev<br/>      <span class=\"kw2\">display</span>  <span class=\"st0\">'inp='</span> inp-fld <span class=\"st0\">' stddev='</span> ws-stddev<br/>      read input-<span class=\"kw3\">file</span> <span class=\"kw3\">at</span> <span class=\"kw3\">end</span> <span class=\"kw3\">set</span> no-more-<span class=\"kw3\">input</span> <span class=\"kw2\">to</span> <span class=\"kw3\">true</span> <span class=\"kw3\">end-read</span><br/>    end-<span class=\"kw2\">perform</span><br/>  <span class=\"kw2\">close</span> input-<span class=\"kw3\">file</span><br/>  <span class=\"kw3\">stop</span> <span class=\"kw3\">run</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">program</span> run-stddev<span class=\"sy0\">.</span><br/><span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> stddev<span class=\"sy0\">.</span><br/><span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span> ws-tbx             <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">03</span><span class=\"br0\">)</span> <span class=\"kw3\">comp</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span> ws-tb-work<span class=\"sy0\">.</span><br/>  <span class=\"nu0\">03</span>  ws-<span class=\"kw4\">sum</span>          <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">05</span><span class=\"br0\">)</span>v9999 <span class=\"kw3\">comp-3</span> <span class=\"kw3\">value</span> +<span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>  <span class=\"nu0\">03</span>  ws-sumsq        <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">05</span><span class=\"br0\">)</span>v9999 <span class=\"kw3\">comp-3</span> <span class=\"kw3\">value</span> +<span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>  <span class=\"nu0\">03</span>  ws-avg          <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">05</span><span class=\"br0\">)</span>v9999 <span class=\"kw3\">comp-3</span> <span class=\"kw3\">value</span> +<span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">linkage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  ws-tb-<span class=\"kw3\">data</span><span class=\"sy0\">.</span><br/>  <span class=\"nu0\">03</span>  ws-tb-<span class=\"kw3\">size</span>         <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">03</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>  <span class=\"nu0\">03</span>  ws-tb-<span class=\"kw3\">table</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span>  ws-tb-fld     <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">05</span><span class=\"br0\">)</span>v9999 <span class=\"kw3\">comp-3</span> <span class=\"kw3\">occurs</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> <span class=\"nu0\">100</span> <span class=\"kw2\">times</span> <br/>        <span class=\"kw3\">depending</span> <span class=\"kw3\">on</span> ws-tb-<span class=\"kw3\">size</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  ws-stddev       <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">05</span><span class=\"br0\">)</span>v9999 <span class=\"kw3\">comp-3</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span> <span class=\"kw3\">using</span>  ws-tb-<span class=\"kw3\">data</span>  ws-stddev<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">compute</span> ws-<span class=\"kw4\">sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw2\">perform</span> <span class=\"kw3\">test</span> <span class=\"kw3\">before</span> <span class=\"kw2\">varying</span> ws-tbx <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> +<span class=\"nu0\">1</span> <span class=\"kw2\">until</span> ws-tbx &gt; ws-tb-<span class=\"kw3\">size</span><br/>        <span class=\"kw2\">compute</span> ws-<span class=\"kw4\">sum</span> <span class=\"sy0\">=</span> ws-<span class=\"kw4\">sum</span><span class=\"sy0\"> + </span>ws-tb-fld <span class=\"br0\">(</span>ws-tbx<span class=\"br0\">)</span> <br/>    end-<span class=\"kw2\">perform</span><br/>    <span class=\"kw2\">compute</span> ws-avg <span class=\"kw3\">rounded</span> <span class=\"sy0\">=</span> ws-<span class=\"kw4\">sum</span><span class=\"sy0\"> / </span>ws-tb-<span class=\"kw3\">size</span><br/>    <span class=\"kw2\">compute</span> ws-sumsq <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw2\">perform</span> <span class=\"kw3\">test</span> <span class=\"kw3\">before</span> <span class=\"kw2\">varying</span> ws-tbx <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> +<span class=\"nu0\">1</span> <span class=\"kw2\">until</span> ws-tbx &gt; ws-tb-<span class=\"kw3\">size</span><br/>        <span class=\"kw2\">compute</span> ws-sumsq <span class=\"sy0\">=</span> ws-sumsq<br/>       <span class=\"sy0\"> + </span><span class=\"br0\">(</span>ws-tb-fld <span class=\"br0\">(</span>ws-tbx<span class=\"br0\">)</span><span class=\"sy0\"> - </span>ws-avg<span class=\"br0\">)</span><span class=\"sy0\"> ** </span><span class=\"nu0\">2.0</span><br/>    end-<span class=\"kw2\">perform</span><br/>    <span class=\"kw2\">compute</span> ws-stddev <span class=\"sy0\">=</span> <span class=\"br0\">(</span> ws-sumsq<span class=\"sy0\"> / </span>ws-tb-<span class=\"kw3\">size</span><span class=\"br0\">)</span><span class=\"sy0\"> ** </span><span class=\"nu0\">0.5</span> <br/>    goback<span class=\"sy0\">.</span><br/><span class=\"kw3\">end</span> <span class=\"kw3\">program</span> stddev<span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 29, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/><span class=\"kw3\">class</span> StandardDeviation<br/>    constructor<span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span><br/>        <span class=\"sy0\">@</span>sum = <span class=\"nu0\">0</span><br/>        <span class=\"sy0\">@</span>sumOfSquares = <span class=\"nu0\">0</span><br/>        <span class=\"sy0\">@</span>values = <span class=\"nu0\">0</span><br/>        <span class=\"sy0\">@</span>deviation = <span class=\"nu0\">0</span><br/>\u00a0<br/>    include<span class=\"sy0\">:</span> <span class=\"br0\">(</span> n <span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>        <span class=\"sy0\">@</span>values <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>        <span class=\"sy0\">@</span>sum <span class=\"sy0\">+</span>= n<br/>        <span class=\"sy0\">@</span>sumOfSquares <span class=\"sy0\">+</span>= n <span class=\"sy0\">*</span> n<br/>        mean = <span class=\"sy0\">@</span>sum <span class=\"sy0\">/</span> <span class=\"sy0\">@</span>values<br/>        mean <span class=\"sy0\">*</span>= mean<br/>        <span class=\"sy0\">@</span>deviation = Math.<span class=\"me1\">sqrt</span> <span class=\"sy0\">@</span>sumOfSquares <span class=\"sy0\">/</span> <span class=\"sy0\">@</span>values <span class=\"sy0\">-</span> mean<br/>\u00a0<br/>dev = <span class=\"kw3\">new</span> StandardDeviation<br/>values = <span class=\"br0\">[</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span> <span class=\"br0\">]</span><br/>tmp = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">for</span> value <span class=\"kw1\">in</span> values<br/>    tmp.<span class=\"me1\">push</span> value<br/>    dev.<span class=\"me1\">include</span> value<br/>    console.<span class=\"me1\">log</span> <span class=\"st0\">\"\"\"<br/>        Values: #{ tmp }<br/>        Standard deviation: #{ dev.deviation }<br/>\u00a0<br/>    \"\"\"</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 17, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> running-stddev <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>sum <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>sq <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>n <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>incf sum x<span class=\"br0\">)</span> <span class=\"br0\">(</span>incf sq <span class=\"br0\">(</span>* x x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>incf n<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>/ <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> <span class=\"br0\">(</span>- <span class=\"br0\">(</span>* n sq<span class=\"br0\">)</span> <span class=\"br0\">(</span>* sum sum<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>CL-USER<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>loop with f <span class=\"sy0\">=</span> <span class=\"br0\">(</span>running-stddev<span class=\"br0\">)</span> for i in '<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">4</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t<span class=\"br0\">(</span>format t <span class=\"st0\">\"~a ~a~%\"</span> i <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">NIL</span><br/><span class=\"nu0\">2</span> <span class=\"nu0\">0.0</span><br/><span class=\"nu0\">4</span> <span class=\"nu0\">1.0</span><br/><span class=\"nu0\">4</span> <span class=\"nu0\">0.94280905</span><br/><span class=\"nu0\">4</span> <span class=\"nu0\">0.8660254</span><br/><span class=\"nu0\">5</span> <span class=\"nu0\">0.97979593</span><br/><span class=\"nu0\">5</span> <span class=\"nu0\">1.0</span><br/><span class=\"nu0\">7</span> <span class=\"nu0\">1.3997085</span><br/><span class=\"nu0\">9</span> <span class=\"nu0\">2.0</span></pre>"}, {"lang": "Component Pascal", "loc": 45, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> StandardDeviation;<br/><span class=\"kw1\">IMPORT</span> StdLog<span class=\"sy0\">,</span> Args<span class=\"sy0\">,</span>Strings<span class=\"sy0\">,</span>Math;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Mean<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">REAL</span>; n<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>; OUT mean<span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span><br/>\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\ttotal<span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\ttotal <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span>;<br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span> total <span class=\"sy0\">:=</span> total <span class=\"sy0\">+</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">END</span>;<br/>\tmean <span class=\"sy0\">:=</span> total <span class=\"sy0\">/</span>n<br/><span class=\"kw1\">END</span> Mean;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> SDeviation<span class=\"br0\">(</span>x <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">REAL</span>;n<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/><span class=\"kw1\">VAR</span><br/>\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\tmean<span class=\"sy0\">,</span>sum<span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tMean<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>mean<span class=\"br0\">)</span>;<br/>\tsum <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span>;<br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>\t\tsum<span class=\"sy0\">:=</span> sum <span class=\"sy0\">+</span>  <span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> mean<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> mean<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">RETURN</span> Math.<span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>sum<span class=\"sy0\">/</span>n<span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> SDeviation;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Do<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\tp<span class=\"sy0\">:</span> Args.<span class=\"me1\">Params</span>;<br/>\tx<span class=\"sy0\">:</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">REAL</span>;<br/>\ti<span class=\"sy0\">,</span>done<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tArgs.<span class=\"me1\">Get</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">IF</span> p.<span class=\"me1\">argc</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>p.<span class=\"me1\">argc</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> p.<span class=\"me1\">argc</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span> <span class=\"kw1\">END</span>;<br/>\t\t<span class=\"kw1\">FOR</span> i  <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> p.<span class=\"me1\">argc</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>\t\t\tStrings.<span class=\"me1\">StringToReal</span><span class=\"br0\">(</span>p.<span class=\"me1\">args</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>done<span class=\"br0\">)</span>;<br/>\t\t\tStdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0:&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Real</span><span class=\"br0\">(</span>SDeviation<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/>\t\t<span class=\"kw1\">END</span><br/>\t<span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> Do;<br/><span class=\"kw1\">END</span> StandardDeviation.<br/>\u00a0</pre>"}, {"lang": "D", "loc": 28, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> StdDev <span class=\"br0\">{</span><br/>    <span class=\"kw4\">real</span> sum <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> sqSum <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">long</span> nvalues<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> addNumber<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">real</span> input<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>        nvalues<span class=\"sy0\">++;</span><br/>        sum <span class=\"sy0\">+=</span> input<span class=\"sy0\">;</span><br/>        sqSum <span class=\"sy0\">+=</span> input <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">real</span> getStdDev<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nvalues <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> <span class=\"kw4\">real</span> mean <span class=\"sy0\">=</span> sum <span class=\"sy0\">/</span> nvalues<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> sqrt<span class=\"br0\">(</span>sqSum <span class=\"sy0\">/</span> nvalues <span class=\"sy0\">-</span> mean <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    StdDev stdev<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>el<span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"nu16\">2.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        stdev.<span class=\"me1\">addNumber</span><span class=\"br0\">(</span>el<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%e\"</span><span class=\"sy0\">,</span> stdev.<span class=\"me1\">getStdDev</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 24, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeRunningStdDev<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> sum <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span><br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> sumSquares <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span><br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> count <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span><br/>\u00a0<br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> insert<span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sum <span class=\"sy0\">+=</span> v<br/>        sumSquares <span class=\"sy0\">+=</span> v <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><br/>        count <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/** Returns the standard deviation of the inputs so far, or null if there<br/>        have been no inputs. */</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> stddev<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>count <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> meanSquares <span class=\"sy0\">:=</span> sumSquares<span class=\"sy0\">/</span>count<br/>            <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> mean <span class=\"sy0\">:=</span> sum<span class=\"sy0\">/</span>count<br/>            <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> variance <span class=\"sy0\">:=</span> meanSquares <span class=\"sy0\">-</span> mean<span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/>            return variance.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    return <span class=\"br0\">[</span>insert<span class=\"sy0\">,</span> stddev<span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 24, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeRunningStdDev<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> sum <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span><br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> sumSquares <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span><br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> count <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span><br/>\u00a0<br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> insert<span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sum <span class=\"sy0\">+=</span> v<br/>        sumSquares <span class=\"sy0\">+=</span> v <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><br/>        count <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/** Returns the standard deviation of the inputs so far, or null if there<br/>        have been no inputs. */</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> stddev<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>count <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> meanSquares <span class=\"sy0\">:=</span> sumSquares<span class=\"sy0\">/</span>count<br/>            <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> mean <span class=\"sy0\">:=</span> sum<span class=\"sy0\">/</span>count<br/>            <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> variance <span class=\"sy0\">:=</span> meanSquares <span class=\"sy0\">-</span> mean<span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/>            return variance.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    return <span class=\"br0\">[</span>insert<span class=\"sy0\">,</span> stddev<span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 43, "block": "<pre class=\"text highlighted_source\">defmodule Standard_deviation do<br/>  def add_sample( pid, n ), do: send( pid, {:add, n} )<br/>\u00a0<br/>  def create, do: spawn_link( fn -&gt; loop( [] ) end )<br/>\u00a0<br/>  def destroy( pid ), do: send( pid,\u00a0:stop )<br/>\u00a0<br/>  def get( pid ) do<br/>    send( pid, {:get, self()} )<br/>    receive do<br/>      {\u00a0:get, value, _pid } -&gt; value<br/>    end<br/>  end<br/>\u00a0<br/>  def task do<br/>    pid = create()<br/>    for x &lt;- [2,4,4,4,5,5,7,9], do: add_print( pid, x, add_sample(pid, x) )<br/>    destroy( pid )<br/>  end<br/>\u00a0<br/>  defp add_print( pid, n, _add ) do<br/>    IO.puts \"Standard deviation #{ get(pid) } when adding #{ n }\"<br/>  end<br/>\u00a0<br/>  defp loop( ns ) do<br/>    receive do<br/>      {:add, n} -&gt; loop( [n | ns] )<br/>      {:get, pid} -&gt;<br/>        send( pid, {:get, loop_calculate( ns ), self()} )<br/>        loop( ns )<br/>     \u00a0:stop -&gt;\u00a0:ok<br/>    end<br/>  end<br/>\u00a0<br/>  defp loop_calculate( ns ) do<br/>    average = loop_calculate_average( ns )<br/>   \u00a0:math.sqrt( loop_calculate_average( for x &lt;- ns, do:\u00a0:math.pow(x - average, 2) ) )<br/>  end<br/>\u00a0<br/>  defp loop_calculate_average( ns ), do: Enum.sum( ns ) / length( ns )<br/>end<br/>\u00a0<br/>Standard_deviation.task</pre>"}, {"lang": "Emacs Lisp", "loc": 19, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> running-std <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  <span class=\"co1\">; ensure that we have a float to avoid potential integer math errors.</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">setq</span> x <span class=\"br0\">(</span><span class=\"kw1\">float</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">; define variables to use</span><br/>  <span class=\"br0\">(</span>defvar running-sum <span class=\"nu0\">0</span> <span class=\"st0\">\"the running sum of all known values\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>defvar running-len <span class=\"nu0\">0</span> <span class=\"st0\">\"the running number of all known values\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>defvar running-squared-sum <span class=\"nu0\">0</span> <span class=\"st0\">\"the running squared sum of all known values\"</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">; and make them local to this buffer</span><br/>  <span class=\"br0\">(</span>make-local-variable 'running-sum<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>make-local-variable 'running-len<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>make-local-variable 'running-squared-sum<span class=\"br0\">)</span><br/>  <span class=\"co1\">; now process the new value</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">setq</span> running-sum <span class=\"br0\">(</span>+ running-sum x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">setq</span> running-len <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ running-len<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">setq</span> running-squared-sum <span class=\"br0\">(</span>+ running-squared-sum <span class=\"br0\">(</span>* x x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">; and calculate the new standard deviation</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> <span class=\"br0\">(</span>- <span class=\"br0\">(</span>/ running-squared-sum <br/>              running-len<span class=\"br0\">)</span> <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>* running-sum running-sum<span class=\"br0\">)</span> <br/>                                 <span class=\"br0\">(</span>* running-len running-len <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 41, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> standard_deviation <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>add_sample<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> create<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> destroy<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"kw3\">get</span><span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">compile</span><span class=\"br0\">(</span><span class=\"br0\">{</span>no_auto_import<span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"kw3\">get</span><span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">add_sample</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>add<span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">create</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">spawn_link</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">destroy</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> stop<span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"kw3\">get</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span><span class=\"kw3\">get</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t<span class=\"kw1\">receive</span><br/>\t<span class=\"br0\">{</span><span class=\"kw3\">get</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Value</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Pid</span> <span class=\"sy3\">=</span> <span class=\"re3\">create</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">[</span><span class=\"re3\">add_print</span><span class=\"br0\">(</span><span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re3\">add_sample</span><span class=\"br0\">(</span><span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">destroy</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">add_print</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">_Add</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Standard deviation ~p when adding ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"kw3\">get</span><span class=\"br0\">(</span><span class=\"re5\">Pid</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">Ns</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"kw1\">receive</span><br/>\t<span class=\"br0\">{</span>add<span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">N</span> | <span class=\"re5\">Ns</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"br0\">{</span><span class=\"kw3\">get</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>\t\t<span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span><span class=\"kw3\">get</span><span class=\"sy1\">,</span> <span class=\"re3\">loop_calculate</span><span class=\"br0\">(</span> <span class=\"re5\">Ns</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">Ns</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\tstop <span class=\"sy1\">-&gt;</span> <span class=\"me1\">ok</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop_calculate</span><span class=\"br0\">(</span> <span class=\"re5\">Ns</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Average</span> <span class=\"sy3\">=</span> <span class=\"re3\">loop_calculate_average</span><span class=\"br0\">(</span> <span class=\"re5\">Ns</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">sqrt</span><span class=\"br0\">(</span> <span class=\"re3\">loop_calculate_average</span><span class=\"br0\">(</span><span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">pow</span><span class=\"br0\">(</span><span class=\"re5\">X</span> <span class=\"sy3\">-</span> <span class=\"re5\">Average</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Ns</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop_calculate_average</span><span class=\"br0\">(</span> <span class=\"re5\">Ns</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sum</span><span class=\"br0\">(</span> <span class=\"re5\">Ns</span> <span class=\"br0\">)</span> <span class=\"sy3\">/</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span> <span class=\"re5\">Ns</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 22, "block": "<pre class=\"text highlighted_source\">USING: accessors io kernel math math.functions math.parser<br/>sequences\u00a0;<br/>IN: standard-deviator<br/>\u00a0<br/>TUPLE: standard-deviator sum sum^2 n\u00a0;<br/>\u00a0<br/>: &lt;standard-deviator&gt; ( -- standard-deviator )<br/>    0.0 0.0 0 standard-deviator boa\u00a0;<br/>\u00a0<br/>: current-std ( standard-deviator -- std )<br/>    [ [ sum^2&gt;&gt; ] [ n&gt;&gt; ] bi / ]<br/>    [ [ sum&gt;&gt; ] [ n&gt;&gt; ] bi / sq ] bi - sqrt\u00a0;<br/>\u00a0<br/>: add-value ( value standard-deviator -- )<br/>    [ nip [ 1 + ] change-n drop ]<br/>    [ [ + ] change-sum drop ]<br/>    [ [ [ sq ] dip + ] change-sum^2 drop ] 2tri\u00a0;<br/>\u00a0<br/>: main ( -- )<br/>    { 2 4 4 4 5 5 7 9 }<br/>    &lt;standard-deviator&gt; [ [ add-value ] curry each ] keep<br/>    current-std number&gt;string print\u00a0;</pre>"}, {"lang": "Forth", "loc": 23, "block": "<pre class=\"text highlighted_source\">: f+! ( x addr -- ) dup <a class=\"__cf_email__\" data-cfemail=\"94f2d4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> f+ f!\u00a0;<br/>\u00a0<br/>: st-count ( stats -- n )                  <a class=\"__cf_email__\" data-cfemail=\"731533\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0;<br/>: st-sum   ( stats -- sum )       float+   <a class=\"__cf_email__\" data-cfemail=\"5b3d1b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0;<br/>: st-sumsq ( stats -- sum*sum ) 2 floats + <a class=\"__cf_email__\" data-cfemail=\"f294b2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0;<br/>\u00a0<br/>: st-mean ( stats -- mean )<br/>  dup st-sum st-count f/\u00a0;<br/>\u00a0<br/>: st-variance ( stats -- var )<br/>  dup st-sumsq<br/>  dup st-mean fdup f* dup st-count f*  f-<br/>  st-count f/\u00a0;<br/>\u00a0<br/>: st-stddev ( stats -- stddev )<br/>  st-variance fsqrt\u00a0;<br/>\u00a0<br/>: st-add ( fnum stats -- )<br/>  dup<br/>    1e dup f+!  float+<br/>  fdup dup f+!  float+<br/>  fdup f*  f+!<br/>  std-stddev\u00a0;</pre>"}, {"lang": "Fortran", "loc": 51, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> standard_deviation<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">integer</span><span class=\"br0\">(</span><span class=\"kw3\">kind</span><span class=\"sy0\">=</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">dp</span> <span class=\"sy0\">=</span> <span class=\"kw3\">kind</span><span class=\"br0\">(</span>0.0d0<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"kw3\">kind</span><span class=\"sy0\">=</span>dp<span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">vals</span><br/>  <span class=\"kw3\">integer</span><span class=\"br0\">(</span><span class=\"kw3\">kind</span><span class=\"sy0\">=</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>  <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"kw3\">kind</span><span class=\"sy0\">=</span>dp<span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">sample_data</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">9</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"kw4\">lbound</span><span class=\"br0\">(</span>sample_data, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"kw4\">ubound</span><span class=\"br0\">(</span>sample_data, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> sample_add<span class=\"br0\">(</span>vals, sample_data<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"kw1\">fmt</span><span class=\"sy0\">=</span><span class=\"st0\">'('</span><span class=\"st0\">'#'</span><span class=\"st0\">',I1,1X,'</span><span class=\"st0\">'value = '</span><span class=\"st0\">',F3.1,1X,'</span><span class=\"st0\">'stddev ='</span><span class=\"st0\">',1X,F10.8)'</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span><br/>      i, sample_data<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, stddev<span class=\"br0\">(</span>vals<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">allocated</span><span class=\"br0\">(</span>vals<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">deallocate</span><span class=\"br0\">(</span>vals<span class=\"br0\">)</span><br/><span class=\"co1\">contains</span><br/>  <span class=\"co1\">! Adds value\u00a0:val: to array\u00a0:population: dynamically resizing array</span><br/>  <span class=\"kw1\">subroutine</span> sample_add<span class=\"br0\">(</span>population, <span class=\"kw4\">val</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"kw3\">kind</span><span class=\"sy0\">=</span>dp<span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span>, <span class=\"kw3\">intent</span> <span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">population</span><br/>    <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"kw3\">kind</span><span class=\"sy0\">=</span>dp<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span> <span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw4\">val</span><br/>\u00a0<br/>    <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"kw3\">kind</span><span class=\"sy0\">=</span>dp<span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">tmp</span><br/>    <span class=\"kw3\">integer</span><span class=\"br0\">(</span><span class=\"kw3\">kind</span><span class=\"sy0\">=</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> <span class=\"kw4\">allocated</span><span class=\"br0\">(</span>population<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>population<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      population<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">val</span><br/>    <span class=\"kw1\">else</span><br/>      n <span class=\"sy0\">=</span> <span class=\"kw4\">size</span><span class=\"br0\">(</span>population<span class=\"br0\">)</span><br/>      <span class=\"kw1\">call</span> move_alloc<span class=\"br0\">(</span>population, tmp<span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>population<span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      population<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> tmp<br/>      population<span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">val</span><br/>    <span class=\"kw1\">endif</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> sample_add<br/>\u00a0<br/>  <span class=\"co1\">! Calculates standard deviation for given set of values</span><br/>  <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"kw3\">kind</span><span class=\"sy0\">=</span>dp<span class=\"br0\">)</span> <span class=\"kw1\">function</span> stddev<span class=\"br0\">(</span>vals<span class=\"br0\">)</span><br/>    <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"kw3\">kind</span><span class=\"sy0\">=</span>dp<span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">vals</span><br/>    <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"kw3\">kind</span><span class=\"sy0\">=</span>dp<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">mean</span><br/>    <span class=\"kw3\">integer</span><span class=\"br0\">(</span><span class=\"kw3\">kind</span><span class=\"sy0\">=</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>\u00a0<br/>    n <span class=\"sy0\">=</span> <span class=\"kw4\">size</span><span class=\"br0\">(</span>vals<span class=\"br0\">)</span><br/>    mean <span class=\"sy0\">=</span> sum<span class=\"br0\">(</span>vals<span class=\"br0\">)</span><span class=\"sy0\">/</span>n<br/>    stddev <span class=\"sy0\">=</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>sum<span class=\"br0\">(</span><span class=\"br0\">(</span>vals <span class=\"sy0\">-</span> mean<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> stddev<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> standard_deviation<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 30, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> calcStandardDeviation<span class=\"br0\">(</span>number <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>  <span class=\"kw1\">Static</span> a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>  <span class=\"kw1\">Redim</span> <span class=\"kw1\">Preserve</span> a<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span>   <br/>  <span class=\"kw1\">Dim</span> ub <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  a<span class=\"br0\">(</span>ub<span class=\"br0\">)</span> = number<br/>  <span class=\"kw1\">Dim</span> sum <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> = <span class=\"nu0\">0.0</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ub<br/>    sum += a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Dim</span> mean <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> = sum / <span class=\"br0\">(</span>ub + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> diff <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>  sum  = <span class=\"nu0\">0.0</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ub<br/>    diff = a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> - mean<br/>    sum += diff * diff<br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>sum/ <span class=\"br0\">(</span>ub + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> = <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">9</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">7</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"Added\"</span>; a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>; <span class=\"st0\">\" SD now\u00a0: \"</span>; calcStandardDeviation<span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 23, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> newRsdv<span class=\"sy1\">()</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> n<span class=\"sy1\">,</span> a<span class=\"sy1\">,</span> q  <span class=\"kw4\">float64</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>        n<span class=\"sy2\">++</span><br/>        a1 <span class=\"sy2\">:=</span> a<span class=\"sy3\">+</span><span class=\"sy1\">(</span>x<span class=\"sy3\">-</span>a<span class=\"sy1\">)</span><span class=\"sy3\">/</span>n<br/>        q<span class=\"sy1\">,</span> a <span class=\"sy2\">=</span> q<span class=\"sy3\">+</span><span class=\"sy1\">(</span>x<span class=\"sy3\">-</span>a<span class=\"sy1\">)</span><span class=\"sy3\">*</span><span class=\"sy1\">(</span>x<span class=\"sy3\">-</span>a1<span class=\"sy1\">),</span> a1<br/>        <span class=\"kw1\">return</span> math<span class=\"sy3\">.</span>Sqrt<span class=\"sy1\">(</span>q<span class=\"sy3\">/</span>n<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    r <span class=\"sy2\">:=</span> newRsdv<span class=\"sy1\">()</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> x <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><span class=\"sy1\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>r<span class=\"sy1\">(</span>x<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 13, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> samples <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> stdDev <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> sample <span class=\"sy0\">-&gt;</span><br/>    samples <span class=\"sy0\">&lt;&lt;</span> sample<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> sum <span class=\"sy0\">=</span> samples.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> sumSq <span class=\"sy0\">=</span> samples.<span class=\"me1\">sum</span> <span class=\"br0\">{</span> it <span class=\"sy0\">*</span> it <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20count\"><span class=\"kw5\">count</span></a> <span class=\"sy0\">=</span> samples.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>sumSq/<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20count\"><span class=\"kw5\">count</span></a> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>sum/<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20count\"><span class=\"kw5\">count</span></a><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">0.5</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">9</span><span class=\"br0\">]</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"${stdDev(it)}\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 28, "block": "<pre class=\"haskell highlighted_source\"><span class=\"coMULTI\">{-# LANGUAGE BangPatterns #-}</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a><span class=\"st0\">') -- '</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>STRef<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><span class=\"sy0\">.</span>ST<br/>\u00a0<br/><span class=\"kw1\">data</span> Pair a b <span class=\"sy0\">=</span> Pair <span class=\"sy0\">!</span>a <span class=\"sy0\">!</span>b<br/>\u00a0<br/>sumLen <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> Pair <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><br/>sumLen <span class=\"sy0\">=</span> fiof2 <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a><span class=\"st0\">' (<span class=\"es0\">\\(</span>Pair s l) x -&gt; Pair (s+x) (l+1)) (Pair 0.0 0) --'</span><br/>  <span class=\"kw1\">where</span> fiof2 <span class=\"br0\">(</span>Pair s l<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Pair s <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> l<span class=\"br0\">)</span><br/>\u00a0<br/>divl <span class=\"sy0\">::</span> Pair <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><br/>divl <span class=\"br0\">(</span>Pair <span class=\"sy0\">_</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>divl <span class=\"br0\">(</span>Pair s   l<span class=\"br0\">)</span> <span class=\"sy0\">=</span> s <span class=\"sy0\">/</span> l<br/>\u00a0<br/>sd <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><br/>sd xs <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a><span class=\"st0\">' (<span class=\"es0\">\\a</span> x -&gt; a+(x-m)^2) 0 xs / l --'</span><br/>  <span class=\"kw1\">where</span> p<span class=\"sy0\">@</span><span class=\"br0\">(</span>Pair s l<span class=\"br0\">)</span> <span class=\"sy0\">=</span> sumLen xs<br/>        m <span class=\"sy0\">=</span> divl p<br/>\u00a0<br/>mkSD <span class=\"sy0\">::</span> ST s <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a> <span class=\"sy0\">-&gt;</span> ST s <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><span class=\"br0\">)</span><br/>mkSD <span class=\"sy0\">=</span> go <span class=\"sy0\">&lt;$&gt;</span> newSTRef <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">where</span> go acc x <span class=\"sy0\">=</span><br/>          modifySTRef acc <span class=\"br0\">(</span>x:<span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span>sd <span class=\"sy0\">&lt;$&gt;</span> readSTRef acc<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> runST <span class=\"sy0\">$</span><br/>  mkSD <span class=\"sy0\">&gt;&gt;=</span> forM <span class=\"br0\">[</span><span class=\"nu0\">2.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">4.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">4.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">4.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">7.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">9.0</span><span class=\"br0\">]</span></pre>"}, {"lang": "Haxe", "loc": 23, "block": "<pre class=\"text highlighted_source\">using Lambda;<br/>\u00a0<br/>class Main {<br/>\tstatic function main():Void {<br/>\t\tvar nums = [2, 4, 4, 4, 5, 5, 7, 9];<br/>\t\tfor (i in 1...nums.length+1)\t\t\t<br/>\t\t\tSys.println(sdev(nums.slice(0, i)));<br/>\t}<br/>\u00a0<br/>\tstatic function average&lt;T:Float&gt;(nums:Array&lt;T&gt;):Float {<br/>\t\treturn nums.fold(function(n, t) return n + t, 0) / nums.length;<br/>\t}<br/>\u00a0<br/>\tstatic function sdev&lt;T:Float&gt;(nums:Array&lt;T&gt;):Float {<br/>\t\tvar store = [];<br/>\t\tvar avg = average(nums);<br/>\t\tfor (n in nums) {<br/>\t\t\tstore.push((n - avg) * (n - avg));<br/>\t\t}<br/>\u00a0<br/>\t\treturn Math.sqrt(average(store));<br/>\t}<br/>}</pre>"}, {"lang": "HicEst", "loc": 16, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">REAL</span> <span class=\"sy1\">::</span> n<span class=\"sy1\">=</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span> set<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw1\">sum</span><span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> sum2<span class=\"sy1\">=</span><span class=\"nu0\">0</span><br/>\u00a0<br/>set <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">DO</span> k <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> n<br/>   <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"st0\">'Adding '</span> <span class=\"sy1\">//</span> set<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy1\">//</span> <span class=\"st0\">'stdev = '</span> <span class=\"sy1\">//</span> stdev<span class=\"br0\">(</span>set<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">ENDDO</span><br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"co1\">! end of \"main\"</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> stdev<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>   <span class=\"kw1\">USE</span> <span class=\"sy1\">:</span> <span class=\"kw1\">sum</span><span class=\"sy1\">,</span> sum2<span class=\"sy1\">,</span> k<br/>   <span class=\"kw1\">sum</span> <span class=\"sy1\">=</span> <span class=\"kw1\">sum</span> <span class=\"sy1\">+</span> x<br/>   sum2 <span class=\"sy1\">=</span> sum2 <span class=\"sy1\">+</span> x<span class=\"sy1\">*</span>x<br/>   stdev <span class=\"sy1\">=</span> <span class=\"br0\">(</span> sum2<span class=\"sy1\">/</span>k <span class=\"sy1\">-</span> <span class=\"br0\">(</span><span class=\"kw1\">sum</span><span class=\"sy1\">/</span>k<span class=\"br0\">)</span><span class=\"sy1\">^</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy1\">^</span> <span class=\"nu0\">0.5</span><br/> <span class=\"kw1\">END</span></pre>"}, {"lang": "Icon and Unicon", "loc": 22, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>stddev<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># reset state / empty</span><br/><span class=\"kw1\">every</span>  s <span class=\"sy1\">:=</span> stddev<span class=\"br0\">(</span><span class=\"sy1\">!</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"stddev (so far)\u00a0:= \"</span><span class=\"sy1\">,</span>s<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> stddev<span class=\"br0\">(</span>x<span class=\"br0\">)</span>  <span class=\"sy1\">/:</span> running standard deviation<br/><span class=\"kw2\">static</span> X<span class=\"sy1\">,</span>sumX<span class=\"sy1\">,</span>sum2X<br/>\u00a0<br/>   <span class=\"kw1\">if</span> <span class=\"sy1\">/</span>x <span class=\"kw1\">then</span> <span class=\"br0\">{</span>   <span class=\"co1\"># reset state</span><br/>      X <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>      sumX <span class=\"sy1\">:=</span> sum2X <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">.</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"kw1\">else</span> <span class=\"br0\">{</span>         <span class=\"co1\"># accumulate</span><br/>      <span class=\"kw4\">put</span><span class=\"br0\">(</span>X<span class=\"sy1\">,</span>x<span class=\"br0\">)</span><br/>      sumX <span class=\"sy1\">+:=</span> x<br/>      sum2X <span class=\"sy1\">+:=</span> x<span class=\"sy1\">^</span><span class=\"nu0\">2</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>sum2X <span class=\"sy1\">/</span> <span class=\"sy1\">*</span>X<span class=\"br0\">)</span> <span class=\"sy1\">-</span> <span class=\"br0\">(</span>sumX <span class=\"sy1\">/</span> <span class=\"sy1\">*</span>X<span class=\"br0\">)</span><span class=\"sy1\">^</span><span class=\"nu0\">2</span> <span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 9, "block": "<pre class=\"j highlighted_source\">   mean=: +/\u00a0% #<br/>   dev=: - mean<br/>   stddevP=: [:\u00a0%:@mean *:@dev          <span class=\"co1\">NB. A) 3 equivalent defs for stddevP</span><br/>   stddevP=: [: mean&amp;.:*: dev           <span class=\"co1\">NB. B) uses Under (&amp;.:) to apply inverse of *: after mean</span><br/>   stddevP=:\u00a0%:@<span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"0b666e6a654b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:*: - *:@mean<span class=\"sy0\">)</span>    <span class=\"co1\">NB. C) sqrt of ((mean of squares) - (square of mean))</span><br/>\u00a0<br/>\u00a0<br/>   stddevP\\ <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">4</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">9</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0.942809</span> <span class=\"nu0\">0.866025</span> <span class=\"nu0\">0.979796</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1.39971</span> <span class=\"nu0\">2</span></pre>"}, {"lang": "Java", "loc": 22, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> StdDev <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> sum2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">double</span> sd<span class=\"br0\">(</span><span class=\"kw4\">double</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tn<span class=\"sy0\">++;</span><br/>\tsum <span class=\"sy0\">+=</span> x<span class=\"sy0\">;</span><br/>\tsum2 <span class=\"sy0\">+=</span> x<span class=\"sy0\">*</span>x<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>sum2<span class=\"sy0\">/</span>n <span class=\"sy0\">-</span> sum<span class=\"sy0\">*</span>sum<span class=\"sy0\">/</span>n<span class=\"sy0\">/</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> testData <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        StdDev sd <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StdDev<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span> x <span class=\"sy0\">:</span> testData<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>sd.<span class=\"me1\">sd</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 20, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> running_stddev<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> sum_sq <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        n<span class=\"sy0\">++;</span><br/>        sum <span class=\"sy0\">+=</span> num<span class=\"sy0\">;</span><br/>        sum_sq <span class=\"sy0\">+=</span> num<span class=\"sy0\">*</span>num<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>sum_sq <span class=\"sy0\">/</span> n<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>sum <span class=\"sy0\">/</span> n<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> sd <span class=\"sy0\">=</span> running_stddev<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> nums <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> stddev <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"kw1\">in</span> nums<span class=\"br0\">)</span> <br/>    stddev.<span class=\"me1\">push</span><span class=\"br0\">(</span> sd<span class=\"br0\">(</span>nums<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// using WSH</span><br/>WScript.<span class=\"me1\">Echo</span><span class=\"br0\">(</span>stddev.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre>{ \"n\": _, \"ssd\": _, \"mean\": _ }\n</pre>"}, {"lang": "Julia", "loc": 20, "block": "<pre class=\"text highlighted_source\">function makerunningstd(::Type{T} = Float64) where T<br/>    \u2211x = \u2211x\u00b2 = zero(T)<br/>    n = 0<br/>    function runningstd(x)<br/>        \u2211x  += x<br/>        \u2211x\u00b2 += x ^ 2<br/>        n   += 1<br/>        s   = \u2211x\u00b2 / n - (\u2211x / n) ^ 2<br/>        return s<br/>    end<br/>    return runningstd<br/>end<br/>\u00a0<br/>test = Float64[2, 4, 4, 4, 5, 5, 7, 9]<br/>rstd = makerunningstd()<br/>\u00a0<br/>println(\"Perform a running standard deviation of \", test)<br/>for i in test<br/>    println(\" - add $i \u2192 \", rstd(i))<br/>end</pre>"}, {"lang": "Kotlin", "loc": 20, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.5-2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> CumStdDev <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum2 <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>\u00a0<br/>    fun sd<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"br0\">{</span><br/>        n++<br/>        sum +<span class=\"sy0\">=</span> x<br/>        sum2 +<span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> x<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>sum2 / n - sum <span class=\"sy0\">*</span> sum / n / n<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> testData <span class=\"sy0\">=</span> doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">2.0</span>, <span class=\"nu0\">4.0</span>, <span class=\"nu0\">4.0</span>, <span class=\"nu0\">4.0</span>, <span class=\"nu0\">5.0</span>, <span class=\"nu0\">5.0</span>, <span class=\"nu0\">7.0</span>, <span class=\"nu0\">9.0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> csd <span class=\"sy0\">=</span> CumStdDev<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>d in testData<span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"Add $d =&gt; ${csd.sd(d)}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 28, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>    <span class=\"kw1\">dim</span> SD.storage$<span class=\"br0\">(</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span>   <span class=\"co1\">'   can call up to 100 versions, using ID to identify.. arrays are global.</span><br/>                            <span class=\"co1\">'   holds (space-separated) number of data items so far, current sum.of.values and current sum.of.squares</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">8</span><br/>        <span class=\"kw1\">read</span> x<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"New data \"</span>; x; <span class=\"st0\">\" so S.D. now = \"</span>; <span class=\"kw2\">using</span><span class=\"br0\">(</span> <span class=\"st0\">\"###.######\"</span><span class=\"sy0\">,</span> standard.deviation<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span> i<br/>\u00a0<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> standard.deviation<span class=\"br0\">(</span> ID<span class=\"sy0\">,</span> in<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> SD.storage$<span class=\"br0\">(</span> ID<span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> SD.storage$<span class=\"br0\">(</span> ID<span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"st0\">\"0 0 0\"</span><br/>  num.so.far <span class=\"sy0\">=</span><span class=\"kw2\">val</span><span class=\"br0\">(</span> <span class=\"kw1\">word</span>$<span class=\"br0\">(</span> SD.storage$<span class=\"br0\">(</span> ID<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  sum.vals   <span class=\"sy0\">=</span><span class=\"kw2\">val</span><span class=\"br0\">(</span> <span class=\"kw1\">word</span>$<span class=\"br0\">(</span> SD.storage$<span class=\"br0\">(</span> ID<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  sum.sqs    <span class=\"sy0\">=</span><span class=\"kw2\">val</span><span class=\"br0\">(</span> <span class=\"kw1\">word</span>$<span class=\"br0\">(</span> SD.storage$<span class=\"br0\">(</span> ID<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  num.so.far <span class=\"sy0\">=</span>num.so.far <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>  sum.vals   <span class=\"sy0\">=</span>sum.vals   <span class=\"sy0\">+</span>in<br/>  sum.sqs    <span class=\"sy0\">=</span>sum.sqs    <span class=\"sy0\">+</span>in^<span class=\"nu0\">2</span><br/>\u00a0<br/>  <span class=\"co1\">' standard deviation = square root of (the average of the squares less the square of the average)</span><br/>  standard.deviation   <span class=\"sy0\">=</span><span class=\"br0\">(</span>               <span class=\"br0\">(</span> sum.sqs <span class=\"sy0\">/</span>num.so.far<span class=\"br0\">)</span>      <span class=\"sy0\">-</span>    <span class=\"br0\">(</span> sum.vals <span class=\"sy0\">/</span>num.so.far<span class=\"br0\">)</span>^<span class=\"nu0\">2</span><span class=\"br0\">)</span>^<span class=\"nu0\">0.5</span><br/>\u00a0<br/>  SD.storage$<span class=\"br0\">(</span> ID<span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"kw2\">str$</span><span class=\"br0\">(</span> num.so.far<span class=\"br0\">)</span> <span class=\"sy0\">+</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span><span class=\"kw2\">str$</span><span class=\"br0\">(</span> sum.vals<span class=\"br0\">)</span> <span class=\"sy0\">+</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span><span class=\"kw2\">str$</span><span class=\"br0\">(</span> sum.sqs<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>    <span class=\"kw1\">Data</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 12, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> stdev<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> sum<span class=\"sy0\">,</span> sumsq<span class=\"sy0\">,</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    sum<span class=\"sy0\">,</span> sumsq<span class=\"sy0\">,</span> k <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> n<span class=\"sy0\">,</span> sumsq <span class=\"sy0\">+</span> n<span class=\"sy0\">^</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> k<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">math.sqrt</span><span class=\"br0\">(</span><span class=\"br0\">(</span>sumsq <span class=\"sy0\">/</span> k<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>sum<span class=\"sy0\">/</span>k<span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>ldev <span class=\"sy0\">=</span> stdev<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">}</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw3\">print</span><span class=\"br0\">(</span>ldev<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">runningSTDDev[n_]\u00a0:= (If[Not[ValueQ[$Data]], $Data = {}];<br/>  StandardDeviation[AppendTo[$Data, n]])</pre>"}, {"lang": "MATLAB / Octave", "loc": 7, "block": "<pre class=\"matlab highlighted_source\">  x = <span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">9</span><span class=\"br0\">]</span>;<br/>  n = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a> <span class=\"br0\">(</span>x<span class=\"br0\">)</span>;<br/>\u00a0<br/>  m  = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mean.html\"><span class=\"kw2\">mean</span></a> <span class=\"br0\">(</span>x<span class=\"br0\">)</span>;<br/>  x2 = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mean.html\"><span class=\"kw2\">mean</span></a> <span class=\"br0\">(</span>x .* x<span class=\"br0\">)</span>;<br/>  dev= <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sqrt.html\"><span class=\"kw2\">sqrt</span></a> <span class=\"br0\">(</span>x2 - m * m<span class=\"br0\">)</span><br/>  dev = <span class=\"nu0\">2</span> </pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 3, "block": "<pre class=\"text highlighted_source\">0\t\u041f4\t\u041f5\t\u041f6\t\u0421/\u041f\t\u041f0\t\u0418\u041f5\t+\t\u041f5\t\u0418\u041f0<br/>x^2\t\u0418\u041f6\t+\t\u041f6\t\u041a\u0418\u041f4\t\u0418\u041f6\t\u0418\u041f4\t/\t\u0418\u041f5\t\u0418\u041f4<br/>/\tx^2\t-\t\u041a\u0432\u041a\u043e\u0440\t\u0411\u041f\t04</pre>"}, {"lang": "Nim", "loc": 11, "block": "<pre class=\"text highlighted_source\">import math, strutils<br/>\u00a0<br/>var sdSum, sdSum2, sdN = 0.0<br/>proc sd(x: float): float =<br/>  sdN    += 1<br/>  sdSum  += x<br/>  sdSum2 += x * x<br/>  sqrt(sdSum2/sdN - sdSum*sdSum/sdN/sdN)<br/>\u00a0<br/>for value in [2,4,4,4,5,5,7,9]:<br/>  echo value, \" \", formatFloat(sd(value.float), precision = -1)</pre>"}, {"lang": "Objeck", "loc": 37, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">use</span> Structure<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> StdDev <span class=\"br0\">{</span><br/>    nums <span class=\"sy0\">:</span> FloatVector<span class=\"sy0\">;</span><br/>\u00a0<br/>    New<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      nums <span class=\"sy0\">:=</span> FloatVector<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      sd <span class=\"sy0\">:=</span> StdDev<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      test_data <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">2.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">4.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">4.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">4.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">7.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">9.0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> test_data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sd<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddNum</span><span class=\"br0\">(</span>test_data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        sd<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetSD</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> AddNum<span class=\"br0\">(</span>num <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      nums<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> GetSD<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Float</span> <span class=\"br0\">{</span><br/>      sq_diffs <span class=\"sy0\">:=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>      avg <span class=\"sy0\">:=</span> nums<span class=\"sy0\">-&gt;</span><span class=\"me1\">Average</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> nums<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        num <span class=\"sy0\">:=</span> nums<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        sq_diffs <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>num <span class=\"sy0\">-</span> avg<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>num <span class=\"sy0\">-</span> avg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">return</span> <span class=\"br0\">(</span>sq_diffs <span class=\"sy0\">/</span> nums<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">SquareRoot</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 55, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"kw1\">@interface</span> SDAccum <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">double</span> sum, sum2;<br/>  <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> num;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>value<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>v;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span>count;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>mean;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>variance;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>stddev;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> SDAccum<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>value<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>v<br/><span class=\"br0\">{</span><br/>  sum <span class=\"sy0\">+=</span> v;<br/>  sum2 <span class=\"sy0\">+=</span> v<span class=\"sy0\">*</span>v;<br/>  num<span class=\"sy0\">++</span>;<br/>  <span class=\"kw1\">return</span> <span class=\"br0\">[</span>self stddev<span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span>count<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> num;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>mean<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span>num&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span>\u00a0? sum<span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>num <span class=\"sy0\">:</span> <span class=\"nu0\">0.0</span>;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>variance<br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">double</span> m <span class=\"sy0\">=</span> <span class=\"br0\">[</span>self mean<span class=\"br0\">]</span>;<br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span>num&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span>\u00a0? <span class=\"br0\">(</span>sum2<span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>num <span class=\"sy0\">-</span> m<span class=\"sy0\">*</span>m<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0.0</span>;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>stddev<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>self variance<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  @autoreleasepool <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw4\">double</span> v<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">9</span> <span class=\"br0\">}</span>;<br/>\u00a0<br/>    SDAccum <span class=\"sy0\">*</span>sdacc <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>SDAccum alloc<span class=\"br0\">]</span> init<span class=\"br0\">]</span>;<br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>; i &lt; <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sizeof.html\"><span class=\"kw3\">sizeof</span></a><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">/</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sizeof.html\"><span class=\"kw3\">sizeof</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>v<span class=\"br0\">)</span>\u00a0; i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"adding\u00a0%f<span class=\"es0\">\\t</span>stddev =\u00a0%f<span class=\"es0\">\\n</span>\"</span>, v<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, <span class=\"br0\">[</span>sdacc value<span class=\"sy0\">:</span> v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 15, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> sqr x <span class=\"sy0\">=</span> x <span class=\"sy0\">*.</span> x<br/>\u00a0<br/><span class=\"kw1\">let</span> stddev l <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> n, sx, sx2 <span class=\"sy0\">=</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left<br/>      <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>n, sx, sx2<span class=\"br0\">)</span> x <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> n, sx <span class=\"sy0\">+.</span> x, sx2 <span class=\"sy0\">+.</span> sqr x<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"sy0\">.</span>, <span class=\"nu0\">0</span><span class=\"sy0\">.</span><span class=\"br0\">)</span> l<br/>  <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>sx2 <span class=\"sy0\">-.</span> sqr sx <span class=\"sy0\">/.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> n<span class=\"br0\">)</span> <span class=\"sy0\">/.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> n<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> _ <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> l <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"nu0\">2</span><span class=\"sy0\">.;</span><span class=\"nu0\">4</span><span class=\"sy0\">.;</span><span class=\"nu0\">4</span><span class=\"sy0\">.;</span><span class=\"nu0\">4</span><span class=\"sy0\">.;</span><span class=\"nu0\">5</span><span class=\"sy0\">.;</span><span class=\"nu0\">5</span><span class=\"sy0\">.;</span><span class=\"nu0\">7</span><span class=\"sy0\">.;</span><span class=\"nu0\">9</span><span class=\"sy0\">.</span> <span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"List: \"</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%g  \"</span><span class=\"br0\">)</span> l<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"\\nStandard deviation:\u00a0%g\\n\"</span> <span class=\"br0\">(</span>stddev l<span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 6, "block": "<pre class=\"text highlighted_source\">Channel new [ ] over send drop const: StdValues<br/>\u00a0<br/>: stddev(x)<br/>| l |<br/>   StdValues receive x + dup -&gt;l StdValues send drop<br/>   #qs l map sum l size asFloat / l avg sq - sqrt\u00a0;</pre>"}, {"lang": "ooRexx", "loc": 42, "block": "<pre class=\"rexx highlighted_source\">sdacc = <span class=\"sy0\">.</span>SDAccum~new<br/>x = <span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>sd = <span class=\"nu0\">0</span><br/><span class=\"kw1\">do</span> i = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> x~size<br/>   sd = sdacc~<span class=\"kw2\">value</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">Say</span> <span class=\"st0\">'#'</span>i <span class=\"st0\">'value ='</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"st0\">'stdev ='</span> sd<br/><span class=\"kw3\">end</span><br/>\u00a0<br/>::class SDAccum<br/>::method sum <span class=\"kw1\">attribute</span><br/>::method sum2 <span class=\"kw1\">attribute</span><br/>::method count <span class=\"kw1\">attribute</span><br/>::method init<br/>  self~sum = <span class=\"nu0\">0.0</span><br/>  self~sum2 = <span class=\"nu0\">0.0</span><br/>  self~count = <span class=\"nu0\">0</span><br/>::method <span class=\"kw2\">value</span><br/>  <span class=\"kw1\">expose</span> sum sum2 count<br/>  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x<br/>  sum = sum + x<br/>  sum2 = sum2 + x<span class=\"sy0\">*</span>x<br/>  count = count + <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">return</span> self~stddev<br/>::method mean<br/>  <span class=\"kw1\">expose</span> sum count<br/>  <span class=\"kw1\">return</span> sum<span class=\"sy0\">/</span>count<br/>::method variance<br/>  <span class=\"kw1\">expose</span> sum2  count<br/>  m = self~mean<br/>  <span class=\"kw1\">return</span> sum2<span class=\"sy0\">/</span>count - m<span class=\"sy0\">*</span>m<br/>::method stddev<br/>  <span class=\"kw1\">return</span> self~sqrt<span class=\"br0\">(</span>self~variance<span class=\"br0\">)</span><br/>::method sqrt<br/>  <span class=\"kw1\">arg</span> n<br/>  <span class=\"kw1\">if</span> n = <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>  ans = n <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>  prev = n<br/>  <span class=\"kw1\">do</span> <span class=\"kw2\">until</span> prev = ans<br/>    prev = ans<br/>    ans = <span class=\"br0\">(</span> prev + <span class=\"br0\">(</span> n <span class=\"sy0\">/</span> prev <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> ans</pre>"}, {"lang": "PARI/GP", "loc": 19, "block": "<pre class=\"parigp highlighted_source\">newpoint<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  myT<span class=\"sy0\">=</span>x<span class=\"sy0\">;</span><br/>  myS<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">;</span><br/>  myN<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">[</span>myT<span class=\"sy0\">,</span>myS<span class=\"br0\">]</span><span class=\"sy0\">/</span>myN<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>addpoint<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  myT<span class=\"sy0\">+=</span>x<span class=\"sy0\">;</span><br/>  myN<span class=\"sy0\">++;</span><br/>  myS<span class=\"sy0\">+=</span><span class=\"br0\">(</span>myN<span class=\"sy0\">*</span>x<span class=\"sy0\">-</span>myT<span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu1\">2</span><span class=\"sy0\">/</span>myN<span class=\"sy0\">/</span><span class=\"br0\">(</span>myN<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">[</span>myT<span class=\"sy0\">,</span>myS<span class=\"br0\">]</span><span class=\"sy0\">/</span>myN<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>addpoints<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">print</span><span class=\"br0\">(</span>newpoint<span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span><span class=\"kw1\">print</span><span class=\"br0\">(</span>addpoint<span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Mean: \"</span><span class=\"sy0\">,</span>myT<span class=\"sy0\">/</span>myN<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Standard deviation: \"</span><span class=\"sy0\">,</span><span class=\"kw1\">sqrt</span><span class=\"br0\">(</span>myS<span class=\"sy0\">/</span>myN<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>addpoints<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"nu1\">4</span><span class=\"sy0\">,</span><span class=\"nu1\">4</span><span class=\"sy0\">,</span><span class=\"nu1\">4</span><span class=\"sy0\">,</span><span class=\"nu1\">5</span><span class=\"sy0\">,</span><span class=\"nu1\">5</span><span class=\"sy0\">,</span><span class=\"nu1\">7</span><span class=\"sy0\">,</span><span class=\"nu1\">9</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 28, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> stddev<span class=\"sy1\">;</span><br/><span class=\"kw1\">uses</span> math<span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  n<span class=\"sy3\">=</span><span class=\"nu0\">8</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  arr<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"me1\">n</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">real</span> <span class=\"sy3\">=</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">function</span> stddev<span class=\"br0\">(</span>n<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>   i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>   s1<span class=\"sy1\">,</span>s2<span class=\"sy1\">,</span>variance<span class=\"sy1\">,</span>x<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      x<span class=\"sy1\">:</span><span class=\"sy3\">=</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      s1<span class=\"sy1\">:</span><span class=\"sy3\">=</span>s1<span class=\"sy3\">+</span>power<span class=\"br0\">(</span>x<span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      s2<span class=\"sy1\">:</span><span class=\"sy3\">=</span>s2<span class=\"sy3\">+</span>x<br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    variance<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy3\">*</span>s1<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"br0\">(</span>power<span class=\"br0\">(</span>s2<span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"br0\">(</span>power<span class=\"br0\">(</span>n<span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    stddev<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>variance<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>   i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>i<span class=\"sy1\">,</span><span class=\"st0\">' item='</span><span class=\"sy1\">,</span>arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"nu0\">2</span><span class=\"sy1\">:</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"st0\">' stddev='</span><span class=\"sy1\">,</span>stddev<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">18</span><span class=\"sy1\">:</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 37, "block": "<pre class=\"perl highlighted_source\"><span class=\"br0\">{</span> <br/>    <a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> SDAccum<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">sub</span> <span class=\"kw2\">new</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$class</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>sum<span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>sum2<span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>num<span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"re0\">$self</span><span class=\"sy0\">,</span> <span class=\"re0\">$class</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$self</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">sub</span> count <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>num<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">sub</span> mean <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>num<span class=\"br0\">}</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>sum<span class=\"br0\">}</span><span class=\"sy0\">/</span><span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>num<span class=\"br0\">}</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">sub</span> variance <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">mean</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>num<span class=\"br0\">}</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>sum2<span class=\"br0\">}</span><span class=\"sy0\">/</span><span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>num<span class=\"br0\">}</span> <span class=\"sy0\">-</span> <span class=\"re0\">$m</span> <span class=\"sy0\">*</span> <span class=\"re0\">$m</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">sub</span> stddev <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">variance</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">sub</span> value <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$v</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>sum<span class=\"br0\">}</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>sum2<span class=\"br0\">}</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$v</span> <span class=\"sy0\">*</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>num<span class=\"br0\">}</span><span class=\"sy0\">++;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">stddev</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 12, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> sd <span class=\"br0\">(</span><span class=\"re0\">@a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$mean</span> <span class=\"sy0\">=</span> <span class=\"re0\">@a</span> R<span class=\"sy0\">/</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@a</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">sqrt</span> <span class=\"re0\">@a</span> R<span class=\"sy0\">/</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"kw3\">map</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"sy0\">-</span> <span class=\"re0\">$mean</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"re0\">@a</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> sdaccum <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@a</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">{</span> <span class=\"kw3\">push</span> <span class=\"re0\">@a</span><span class=\"sy0\">,</span> <span class=\"re0\">$^x</span><span class=\"sy0\">;</span> sd <span class=\"re0\">@a</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">&amp;f</span> <span class=\"sy0\">=</span> sdaccum<span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> f <span class=\"re0\">$_</span> <span class=\"kw1\">for</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 24, "block": "<pre class=\"text highlighted_source\">atom sdn = 0, sdsum = 0, sdsumsq = 0<br/>\u00a0<br/>procedure sdadd(atom n)<br/>    sdn += 1<br/>    sdsum += n<br/>    sdsumsq += n*n<br/>end procedure<br/>\u00a0<br/>function sdavg()<br/>    return sdsum/sdn<br/>end function<br/>\u00a0<br/>function sddev()<br/>    return sqrt(sdsumsq/sdn - power(sdsum/sdn,2))<br/>end function<br/>\u00a0<br/>--test code:<br/>constant testset = {2, 4, 4, 4, 5, 5, 7, 9}<br/>integer ti<br/>for i=1 to length(testset) do<br/>    ti = testset[i]<br/>    sdadd(ti)<br/>    printf(1,\"N=%d Item=%d Avg=%5.3f StdDev=%5.3f\\n\",{i,ti,sdavg(),sddev()})<br/>end for</pre>"}, {"lang": "PHP", "loc": 31, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">class</span> sdcalc <span class=\"br0\">{</span><br/>    <span class=\"kw2\">private</span>  <span class=\"re0\">$cnt</span><span class=\"sy0\">,</span> <span class=\"re0\">$sumup</span><span class=\"sy0\">,</span> <span class=\"re0\">$square</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">function</span> __construct<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><a href=\"http://www.php.net/reset\"><span class=\"kw3\">reset</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co2\"># callable on an instance<br/></span>    <span class=\"kw2\">function</span> <a href=\"http://www.php.net/reset\"><span class=\"kw3\">reset</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">cnt</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">sumup</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">square</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">function</span> add<span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">cnt</span><span class=\"sy0\">++;</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">sumup</span>  <span class=\"sy0\">+=</span> <span class=\"re0\">$f</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">square</span> <span class=\"sy0\">+=</span> <a href=\"http://www.php.net/pow\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">calc</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">function</span> calc<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">cnt</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">sumup</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.php.net/sqrt\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">square</span> <span class=\"sy0\">/</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">cnt</span> <span class=\"sy0\">-</span> <a href=\"http://www.php.net/pow\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">sumup</span> <span class=\"sy0\">/</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">cnt</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\"># start test, adding test data one by one<br/></span><span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> sdcalc<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">]</span> <span class=\"kw1\">as</span> <span class=\"re0\">$v</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.php.net/printf\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st_h\">'Adding\u00a0%g: result\u00a0%g%s'</span><span class=\"sy0\">,</span> <span class=\"re0\">$v</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"re0\">$v</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> PHP_EOL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 18, "block": "<pre class=\"text highlighted_source\">(scl 2)<br/>\u00a0<br/>(de stdDev ()<br/>   (curry ((Data)) (N)<br/>      (push 'Data N)<br/>      (let (Len (length Data)  M (*/ (apply + Data) Len))<br/>         (sqrt<br/>            (*/<br/>               (sum<br/>                  '((N) (*/ (- N M) (- N M) 1.0))<br/>                  Data )<br/>               1.0<br/>               Len )<br/>            T ) ) ) )<br/>\u00a0<br/>(let Fun (stdDev)<br/>   (for N (2.0 4.0 4.0 4.0 5.0 5.0 7.0 9.0)<br/>      (prinl (format N *Scl) \" -&gt; \" (format (Fun N) *Scl)) ) )</pre>"}, {"lang": "PL/I", "loc": 25, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process source attributes xref<span class=\"sy0\">;</span><br/> stddev<span class=\"sy0\">:</span> <span class=\"kw1\">proc</span> <span class=\"kw1\">options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> a<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">float</span> <span class=\"kw1\">init</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> stdev <span class=\"kw1\">float</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> i <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span>   <br/>\u00a0<br/>   stdev<span class=\"sy0\">=</span>std_dev<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span><span class=\"br0\">(</span><span class=\"st0\">'Standard deviation'</span><span class=\"sy0\">,</span> stdev<span class=\"br0\">)</span><span class=\"sy0\">;</span>   <br/>\u00a0<br/>   std_dev<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">returns</span><span class=\"br0\">(</span><span class=\"kw1\">float</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">declare</span> a<span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">float</span><span class=\"sy0\">,</span> n <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>     n<span class=\"sy0\">=</span><span class=\"kw1\">hbound</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">begin</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">declare</span> b<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">float</span><span class=\"sy0\">,</span> average <span class=\"kw1\">float</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">declare</span> i <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<span class=\"sy0\">;</span><br/>         b<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>       average<span class=\"sy0\">=</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">/</span>n<span class=\"sy0\">;</span><br/>       <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">data</span><span class=\"br0\">(</span>average<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">return</span><span class=\"br0\">(</span> <span class=\"kw1\">sqrt</span><span class=\"br0\">(</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>b<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>n <span class=\"sy0\">-</span> average<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span> std_dev<span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">end</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 13, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>StandardDeviation <span class=\"br0\">{</span><br/>    begin <span class=\"br0\">{</span><br/>        <span class=\"re0\">$avg</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"re0\">$nums</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    process <span class=\"br0\">{</span><br/>        <span class=\"re0\">$nums</span> <span class=\"sy0\">+=</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><br/>        <span class=\"re0\">$avg</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$nums</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Measure-Object</span> <span class=\"kw5\">-Average</span><span class=\"br0\">)</span>.Average<br/>        <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;<br/>        <span class=\"re0\">$nums</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <span class=\"br0\">(</span><span class=\"re0\">$avg</span> <span class=\"sy0\">-</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$avg</span> <span class=\"sy0\">-</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Sqrt<span class=\"br0\">(</span><span class=\"re0\">$sum</span> <span class=\"sy0\">/</span> <span class=\"re0\">$nums</span>.Length<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PureBasic", "loc": 29, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"co1\">;Define our Standard deviation function</span><br/><span class=\"kw1\">Declare</span>.d Standard_deviation<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Main program</span><br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> i, x<br/>  <span class=\"kw1\">Restore</span> MyList<br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">8</span><br/>    <span class=\"kw1\">Read</span>.i x<br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>Standard_deviation<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span> i<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$<span class=\"sy0\">+</span><span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span><br/>\u00a0<br/><span class=\"co1\">;Calculation procedure, with memory</span><br/><span class=\"kw1\">Procedure</span>.d Standard_deviation<span class=\"br0\">(</span><span class=\"kw3\">In</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Static</span> in_summa, antal<br/>  <span class=\"kw1\">Static</span> in_kvadrater.q<br/>  in_summa<span class=\"sy0\">+</span><span class=\"kw3\">in</span><br/>  in_kvadrater<span class=\"sy0\">+</span><span class=\"kw3\">in</span><span class=\"sy0\">*</span><span class=\"kw3\">in</span><br/>  antal<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"kw2\">Pow</span><span class=\"br0\">(</span><span class=\"br0\">(</span>in_kvadrater<span class=\"sy0\">/</span>antal<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"kw2\">Pow</span><span class=\"br0\">(</span>in_summa<span class=\"sy0\">/</span>antal,<span class=\"nu0\">2</span><span class=\"br0\">)</span>,<span class=\"nu0\">0.50</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">;data section</span><br/><span class=\"kw1\">DataSection</span><br/>MyList:<br/>  <span class=\"kw1\">Data</span>.i  <span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">9</span><br/><span class=\"kw1\">EndDataSection</span></pre>"}, {"lang": "Python", "loc": 22, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> sqrt<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> sd<span class=\"br0\">(</span>x<span class=\"br0\">)</span>:<br/>    sd.<span class=\"kw2\">sum</span>  +<span class=\"sy0\">=</span> x<br/>    sd.<span class=\"me1\">sum2</span> +<span class=\"sy0\">=</span> x*x<br/>    sd.<span class=\"me1\">n</span>    +<span class=\"sy0\">=</span> <span class=\"nu0\">1.0</span><br/>    <span class=\"kw2\">sum</span><span class=\"sy0\">,</span> sum2<span class=\"sy0\">,</span> n <span class=\"sy0\">=</span> sd.<span class=\"kw2\">sum</span><span class=\"sy0\">,</span> sd.<span class=\"me1\">sum2</span><span class=\"sy0\">,</span> sd.<span class=\"me1\">n</span><br/>    <span class=\"kw1\">return</span> sqrt<span class=\"br0\">(</span>sum2/n - <span class=\"kw2\">sum</span>*<span class=\"kw2\">sum</span>/n/n<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> sd.<span class=\"kw2\">sum</span> <span class=\"sy0\">=</span> sd.<span class=\"me1\">sum2</span> <span class=\"sy0\">=</span> sd.<span class=\"me1\">n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">for</span> value <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span> <span class=\"br0\">(</span>value<span class=\"sy0\">,</span> sd<span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.94280904158206258</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.8660254037844386</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.97979589711327075</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.3997084244475311</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span></pre>"}, {"lang": "R", "loc": 11, "block": "<pre class=\"rsplus highlighted_source\"><span class=\"co1\">#The built-in standard deviation function applies the Bessel correction.  To reverse this, we can apply an uncorrection.</span><br/><span class=\"co1\">#If na.rm is true, missing data points (NA values) are removed.</span><br/> reverseBesselCorrection <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/function.html\"><span class=\"kw2\">function</span></a><span class=\"br0\">(</span>x, na.<span class=\"me1\">rm</span><span class=\"sy0\">=</span>FALSE<span class=\"br0\">)</span><br/> <span class=\"br0\">{</span><br/>   <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html\"><span class=\"kw2\">if</span></a><span class=\"br0\">(</span>na.<span class=\"me1\">rm</span><span class=\"br0\">)</span> x <span class=\"sy0\">&lt;-</span> x<span class=\"br0\">[</span><span class=\"sy0\">!</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/is.na.html\"><span class=\"kw2\">is.<span class=\"me1\">na</span></span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>   len <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>   <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html\"><span class=\"kw2\">if</span></a><span class=\"br0\">(</span>len <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/stop.html\"><span class=\"kw2\">stop</span></a><span class=\"br0\">(</span><span class=\"st0\">\"2 or more data points required\"</span><span class=\"br0\">)</span><br/>   <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/sqrt.html\"><span class=\"kw2\">sqrt</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>len<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>len<span class=\"br0\">)</span><br/> <span class=\"br0\">}</span><br/> testdata <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/c.html\"><span class=\"kw2\">c</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">9</span><span class=\"br0\">)</span><br/> reverseBesselCorrection<span class=\"br0\">(</span>testdata<span class=\"br0\">)</span><span class=\"sy0\">*</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/stats/html/sd.html\"><span class=\"kw7\">sd</span></a><span class=\"br0\">(</span>testdata<span class=\"br0\">)</span> <span class=\"co1\">#2</span></pre>"}, {"lang": "Racket", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math)<br/>(define running-stddev<br/>  (let ([ns '()])<br/>    (\u03bb(n) (set! ns (cons n ns)) (stddev ns))))<br/>;; run it on each number, return the last result<br/>(last (map running-stddev '(2 4 4 4 5 5 7 9)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 18, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program calculates and displays the standard deviation of a given set of numbers.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> #                                      <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> #=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span>  #=<span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">4</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">9</span>                 <span class=\"coMULTI\">/*None specified?  Then use the default*/</span><br/>n=<span class=\"kw6\">words</span><span class=\"br0\">(</span>#<span class=\"br0\">)</span>;    $=<span class=\"nu0\">0</span>;       $$=<span class=\"nu0\">0</span>;     L=<span class=\"kw6\">length</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*N:  # items; $,$$:  sums to be zeroed*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  process each number in the list*/</span><br/>     <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n;  _=<span class=\"kw6\">word</span><span class=\"br0\">(</span>#,j<span class=\"br0\">)</span>;   $ =$  + _<br/>                                    $$=$$ + _<span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/>     <span class=\"kw1\">say</span>  <span class=\"st0\">'   item'</span>  <span class=\"kw6\">right</span><span class=\"br0\">(</span>j,L<span class=\"br0\">)</span><span class=\"st0\">\":\"</span>    <span class=\"kw6\">right</span><span class=\"br0\">(</span>_,<span class=\"nu0\">4</span><span class=\"br0\">)</span>    <span class=\"st0\">'  average='</span>    <span class=\"kw6\">left</span><span class=\"br0\">(</span>$<span class=\"sy0\">/</span>j,<span class=\"nu0\">12</span><span class=\"br0\">)</span>,<br/>          <span class=\"st0\">'   standard deviation='</span>    sqrt<span class=\"br0\">(</span>$$<span class=\"sy0\">/</span>j - <span class=\"br0\">(</span>$<span class=\"sy0\">/</span>j<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                       <span class=\"coMULTI\">/* [\u2191]  prettify output with whitespace*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'standard deviation: '</span> sqrt<span class=\"br0\">(</span>$$<span class=\"sy0\">/</span>n - <span class=\"br0\">(</span>$<span class=\"sy0\">/</span>n<span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*calculate &amp; display the std deviation*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sqrt: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x; <span class=\"kw1\">if</span> x=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>; d=<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>; h=d+<span class=\"nu0\">6</span>; m<span class=\"sy0\">.</span>=<span class=\"nu0\">9</span>; <span class=\"kw1\">numeric</span> <span class=\"kw2\">form</span><br/>      <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span>; <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>x,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span>,,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">'E0'</span> <span class=\"kw2\">with</span> g <span class=\"st0\">'E'</span> _ <span class=\"sy0\">.</span>;   g=g <span class=\"sy0\">*</span> <span class=\"sy0\">.</span>5<span class=\"st0\">'e'</span>_\u00a0% <span class=\"nu0\">2</span><br/>                   <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">while</span> h<span class=\"sy0\">&gt;</span><span class=\"nu0\">9</span>;      m<span class=\"sy0\">.</span>j=h;               h=h%2+<span class=\"nu0\">1</span>;        <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*j*/</span><br/>                   <span class=\"kw1\">do</span> k=j+<span class=\"nu0\">5</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">0</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> m<span class=\"sy0\">.</span>k;  g=<span class=\"br0\">(</span>g+x<span class=\"sy0\">/</span>g<span class=\"br0\">)</span><span class=\"sy0\">*.</span>5;   <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*k*/</span><br/>      <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> d;                    <span class=\"kw1\">return</span> g<span class=\"sy0\">/</span><span class=\"nu0\">1</span></pre>"}, {"lang": "Ring", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Cumulative standard deviation<br/>\u00a0<br/>decimals(6)<br/>sdsave = list(100) <br/>sd = \"2,4,4,4,5,5,7,9\"<br/>sumval = 0<br/>sumsqs = 0<br/>\u00a0<br/>for num = 1 to 8<br/>     sd = substr(sd, \",\", \"\")<br/>     stddata = number(sd[num])<br/>     sumval = sumval + stddata<br/>     sumsqs = sumsqs + pow(stddata,2) <br/>     standdev = pow(((sumsqs / num) - pow((sumval /num),2)),0.5) <br/>     sdsave[num] = string(num) + \" \" + string(sumval) +\" \" + string(sumsqs)<br/>     see \"\" + num + \" value in = \" + stddata + \" Stand Dev = \" + standdev + nl<br/>next <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 25, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> StdDevAccumulator<br/>  <span class=\"kw1\">def</span> initialize<br/>    <span class=\"re1\">@n</span>, <span class=\"re1\">@sum</span>, <span class=\"re1\">@sumofsquares</span> = <span class=\"nu0\">0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> <span class=\"sy0\">&lt;&lt;</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/>    <span class=\"co1\"># return self to make this possible:  sd &lt;&lt; 1 &lt;&lt; 2 &lt;&lt; 3 # =&gt; 0.816496580927726</span><br/>    <span class=\"re1\">@n</span> <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>    <span class=\"re1\">@sum</span> <span class=\"sy0\">+</span>= num<br/>    <span class=\"re1\">@sumofsquares</span> <span class=\"sy0\">+</span>= num<span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/>    <span class=\"kw2\">self</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> stddev<br/>    <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>@sumofsquares <span class=\"sy0\">/</span> <span class=\"re1\">@n</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>@sum <span class=\"sy0\">/</span> <span class=\"re1\">@n</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> to_s<br/>    stddev.<span class=\"me1\">to_s</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>sd = StdDevAccumulator.<span class=\"me1\">new</span><br/>i = <span class=\"nu0\">0</span><br/><span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">9</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> <span class=\"st0\">\"adding #{n}: stddev of #{i+=1} samples is #{sd &lt;&lt; n}\"</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Run BASIC", "loc": 16, "block": "<pre class=\"text highlighted_source\">dim sdSave$(100) 'can call up to 100 versions<br/>                  'holds (space-separated) number of data , sum of values and sum of squares<br/>sd$ = \"2,4,4,4,5,5,7,9\"<br/>\u00a0<br/>for num = 1 to 8<br/> stdData = val(word$(sd$,num,\",\"))<br/>  sumVal = sumVal + stdData<br/>  sumSqs = sumSqs + stdData^2<br/>\u00a0<br/>  ' standard deviation = square root of (the average of the squares less the square of the average)<br/>  standDev   =((sumSqs / num) - (sumVal /num) ^ 2) ^ 0.5<br/>\u00a0<br/>  sdSave$(num) = str$(num);\" \";str$(sumVal);\" \";str$(sumSqs)<br/>  print num;\" value in = \";stdData; \" Stand Dev = \"; using(\"###.######\", standDev)<br/>\u00a0<br/>next num</pre>"}, {"lang": "Rust", "loc": 32, "block": "<pre class=\"text highlighted_source\">pub struct CumulativeStandardDeviation {<br/>    n: f64,<br/>    sum: f64,<br/>    sum_sq: f64<br/>}<br/>\u00a0<br/>impl CumulativeStandardDeviation {<br/>    pub fn new() -&gt; Self {<br/>        CumulativeStandardDeviation {<br/>            n: 0.,<br/>            sum: 0.,<br/>            sum_sq: 0.<br/>        }<br/>    }<br/>\u00a0<br/>    fn push(&amp;mut self, x: f64) -&gt; f64 {<br/>        self.n += 1.;<br/>        self.sum += x;<br/>        self.sum_sq += x * x;<br/>\u00a0<br/>        (self.sum_sq / self.n - self.sum * self.sum / self.n / self.n).sqrt()<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    let nums = [2, 4, 4, 4, 5, 5, 7, 9];<br/>\u00a0<br/>    let mut cum_stdev = CumulativeStandardDeviation::new();<br/>    for num in nums.iter() {<br/>        println!(\"{}\", cum_stdev.push(*num as f64));<br/>    }<br/>}</pre>"}, {"lang": "SAS", "loc": 34, "block": "<pre class=\"sas highlighted_source\">\u00a0<br/><span class=\"coMULTI\">*--Load the test data;</span><br/><span class=\"kw6\">data</span> test1;<br/>   <span class=\"kw3\">input</span> <span class=\"kw4\">x</span> @@;<br/>   obs=<span class=\"kw1\">_n_</span>;<br/>datalines;<br/><span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">4</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">9</span><br/>;<br/><span class=\"kw6\">run</span>;<br/>\u00a0<br/><span class=\"coMULTI\">*--Create a dataset with the cummulative data for each set of data for which the SD should be calculated;</span><br/><span class=\"kw6\">data</span> test2 <span class=\"br0\">(</span><span class=\"kw4\">drop</span>=i obs<span class=\"br0\">)</span>;<br/>   <span class=\"kw4\">set</span> test1;<br/>   y=<span class=\"kw4\">x</span>;<br/>   <span class=\"kw5\">do</span> i=<span class=\"nu0\">1</span> to <span class=\"kw3\">n</span>;<br/>      <span class=\"kw4\">set</span> test1 <span class=\"br0\">(</span><span class=\"kw4\">rename</span>=<span class=\"br0\">(</span>obs=setid<span class=\"br0\">)</span><span class=\"br0\">)</span> nobs=<span class=\"kw3\">n</span> <span class=\"kw3\">point</span>=i;<br/>      <span class=\"kw5\">if</span> obs&lt;=setid <span class=\"kw5\">then</span> <span class=\"kw4\">output</span>;<br/>   <span class=\"kw5\">end</span>;<br/><span class=\"re1\">proc sort</span>;<br/>   <span class=\"kw4\">by</span> setid;<br/><span class=\"kw6\">run</span>;<br/>\u00a0<br/><span class=\"coMULTI\">*--Calulate the standards deviation (and mean) using PROC MEANS;</span><br/><span class=\"re1\">proc means</span> <span class=\"kw6\">data</span>=test2 vardef=<span class=\"kw3\">n</span> noprint; <span class=\"coMULTI\">*--use vardef=n option to calculate the population SD;</span><br/>   <span class=\"kw4\">by</span> setid;<br/>   <span class=\"kw3\">var</span> y;<br/>   <span class=\"kw4\">output</span> out=stat1 <span class=\"kw3\">n</span>=<span class=\"kw3\">n</span> <span class=\"kw3\">mean</span>=<span class=\"kw3\">mean</span> <span class=\"kw3\">std</span>=sd;<br/><span class=\"kw6\">run</span>;<br/>\u00a0<br/><span class=\"coMULTI\">*--Output the calculated standard deviations;</span><br/><span class=\"re1\">proc print</span> <span class=\"kw6\">data</span>=stat1 noobs;<br/>   <span class=\"kw3\">var</span> <span class=\"kw3\">n</span> sd <span class=\"coMULTI\">/*mean*/</span>;<br/><span class=\"kw6\">run</span>;<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 26, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">math</span>.<span class=\"me1\">sqrt</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> StddevCalc <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> calcAvgAndStddev<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">(</span>ts<span class=\"sy0\">:</span> Iterable<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">implicit</span></a> num<span class=\"sy0\">:</span> Fractional<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"br0\">(</span>T, Double<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> avg<span class=\"br0\">(</span>ts<span class=\"sy0\">:</span> Iterable<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">implicit</span></a> num<span class=\"sy0\">:</span> Fractional<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> T <span class=\"sy0\">=</span><br/>      num.<span class=\"me1\">div</span><span class=\"br0\">(</span>ts.<span class=\"me1\">sum</span>, num.<span class=\"me1\">fromInt</span><span class=\"br0\">(</span>ts.<span class=\"me1\">size</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// Leaving with type of function T</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> mean<span class=\"sy0\">:</span> T <span class=\"sy0\">=</span> avg<span class=\"br0\">(</span>ts<span class=\"br0\">)</span> <span class=\"co1\">// Leave val type of T</span><br/>    <span class=\"co1\">// Root of mean diffs</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> stdDev <span class=\"sy0\">=</span> sqrt<span class=\"br0\">(</span>ts.<span class=\"me1\">map</span> <span class=\"br0\">{</span> x <span class=\"sy0\">=&gt;</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> diff <span class=\"sy0\">=</span> num.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span>num.<span class=\"me1\">minus</span><span class=\"br0\">(</span>x, mean<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      diff <span class=\"sy0\">*</span> diff<br/>    <span class=\"br0\">}</span>.<span class=\"me1\">sum</span> / ts.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span>mean, stdDev<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>calcAvgAndStddev<span class=\"br0\">(</span>List<span class=\"br0\">(</span>2.0E0, <span class=\"nu0\">4.0</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>calcAvgAndStddev<span class=\"br0\">(</span>Set<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>calcAvgAndStddev<span class=\"br0\">(</span><span class=\"nu0\">0.1</span> to <span class=\"nu0\">1.1</span> by <span class=\"nu0\">0.05</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>calcAvgAndStddev<span class=\"br0\">(</span>List<span class=\"br0\">(</span>BigDecimal<span class=\"br0\">(</span><span class=\"nu0\">120</span><span class=\"br0\">)</span>, BigDecimal<span class=\"br0\">(</span><span class=\"nu0\">1200</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Successfully completed without errors. [total ${scala.compat.Platform.currentTime - executionStart}ms]\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 18, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>standart<span class=\"sy0\">-</span>deviation<span class=\"sy0\">-</span>generator<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>nums '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <br/>      <span class=\"br0\">(</span><span class=\"kw1\">set!</span> nums <span class=\"br0\">(</span><span class=\"kw1\">cons</span> x nums<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>mean <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>apply <span class=\"sy0\">+</span> nums<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> nums<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>mean<span class=\"sy0\">-</span>sqr <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> y mean<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>variance <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>apply <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> mean<span class=\"sy0\">-</span>sqr nums<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> nums<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> variance<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">f</span> <span class=\"br0\">(</span>standart<span class=\"sy0\">-</span>deviation<span class=\"sy0\">-</span>generator<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>input '<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">4</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> input<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">begin</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">f</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> input<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>loop <span class=\"kw1\">f</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> input<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Scilab", "loc": 2, "block": "<pre class=\"text highlighted_source\">T=[2,4,4,4,5,5,7,9];<br/>stdev(T)*sqrt((length(T)-1)/length(T))</pre>"}, {"lang": "Sidef", "loc": 22, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> StdDevAccumulator<span class=\"br0\">(</span>n=<span class=\"nu0\">0</span>, sum=<span class=\"nu0\">0</span>, sumofsquares=<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  method <span class=\"sy0\">&lt;&lt;</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    n <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>    sum <span class=\"sy0\">+</span>= num<br/>    sumofsquares <span class=\"sy0\">+</span>= num<span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/>    <span class=\"kw2\">self</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  method stddev <span class=\"br0\">{</span><br/>    sqrt<span class=\"br0\">(</span>sumofsquares<span class=\"sy0\">/</span>n <span class=\"sy0\">-</span> pow<span class=\"br0\">(</span>sum<span class=\"sy0\">/</span>n, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  method to_s <span class=\"br0\">{</span><br/>    <span class=\"kw2\">self</span>.<span class=\"me1\">stddev</span>.<span class=\"me1\">to_s</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var i = <span class=\"nu0\">0</span><br/>var sd = StdDevAccumulator<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">9</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>    say <span class=\"st0\">\"adding #{n}: stddev of #{i+=1} samples is #{sd &lt;&lt; n}\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Smalltalk", "loc": 20, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Object</span> subclass: <span class=\"re0\">SDAccum</span> <span class=\"br0\">[</span><br/>    |<span class=\"re3\">sum sum2 num</span>|<br/>    <span class=\"re0\">SDAccum</span> class &gt;&gt; new <span class=\"br0\">[</span>  |<span class=\"re3\">o</span>| <br/>        <span class=\"re6\">o</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">super</span> basicNew.<br/>        ^ o init.<br/>    <span class=\"br0\">]</span><br/>    init <span class=\"br0\">[</span> <span class=\"re5\">sum</span> <span class=\"sy0\">:=</span> <span class=\"re5\">0</span>. <span class=\"re5\">sum2</span> <span class=\"sy0\">:=</span> <span class=\"re5\">0</span>. <span class=\"re5\">num</span> <span class=\"sy0\">:=</span> <span class=\"re5\">0</span> <span class=\"br0\">]</span><br/>    value: <span class=\"re5\">aValue</span> <span class=\"br0\">[</span> <br/>      <span class=\"re5\">sum</span> <span class=\"sy0\">:=</span> <span class=\"re5\">sum</span> + <span class=\"re5\">aValue</span>.<br/>      <span class=\"re5\">sum2</span> <span class=\"sy0\">:=</span> <span class=\"re5\">sum2</span> + <span class=\"br0\">(</span> <span class=\"re5\">aValue</span> * <span class=\"re5\">aValue</span> <span class=\"br0\">)</span>.<br/>      <span class=\"re5\">num</span> <span class=\"sy0\">:=</span> <span class=\"re5\">num</span> + <span class=\"re5\">1</span>.<br/>      ^ <span class=\"kw1\">self</span> stddev<br/>    <span class=\"br0\">]</span><br/>    count <span class=\"br0\">[</span> ^ num <span class=\"br0\">]</span><br/>    mean <span class=\"br0\">[</span> <span class=\"re5\">num</span>&gt;<span class=\"nu0\">0</span> ifTrue: <span class=\"br0\">[</span>^ sum / <span class=\"re5\">num</span><span class=\"br0\">]</span> ifFalse: <span class=\"br0\">[</span> ^ <span class=\"nu0\">0</span>.<span class=\"re5\">0</span> <span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>    variance <span class=\"br0\">[</span> |<span class=\"re3\">m</span>| <span class=\"re6\">m</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">self</span> mean.<br/>               <span class=\"re5\">num</span>&gt;<span class=\"nu0\">0</span> ifTrue: <span class=\"br0\">[</span>^ <span class=\"br0\">(</span><span class=\"re5\">sum2</span>/<span class=\"re5\">num</span><span class=\"br0\">)</span> - <span class=\"br0\">(</span><span class=\"re5\">m</span>*<span class=\"re5\">m</span><span class=\"br0\">)</span> <span class=\"br0\">]</span> ifFalse: <span class=\"br0\">[</span> ^ <span class=\"nu0\">0</span>.<span class=\"re5\">0</span> <span class=\"br0\">]</span><br/>             <span class=\"br0\">]</span><br/>    stddev <span class=\"br0\">[</span> ^ <span class=\"br0\">(</span><span class=\"kw1\">self</span> variance<span class=\"br0\">)</span> sqrt <span class=\"br0\">]</span> <br/><span class=\"br0\">]</span>.</pre>"}, {"lang": "SQL", "loc": 35, "block": "<pre class=\"sql highlighted_source\"><span class=\"co1\">-- the minimal table</span><br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">TABLE</span> <span class=\"kw1\">IF</span> <span class=\"kw1\">NOT</span> <span class=\"kw1\">EXISTS</span> teststd <span class=\"br0\">(</span>n <span class=\"kw1\">DOUBLE</span> <span class=\"kw1\">PRECISION</span> <span class=\"kw1\">NOT</span> <span class=\"kw1\">NULL</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"co1\">-- code modularity with view, we could have used a common table expression instead</span><br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">VIEW</span>  vteststd <span class=\"kw1\">AS</span><br/>  <span class=\"kw1\">SELECT</span> <span class=\"kw1\">COUNT</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">AS</span> cnt<span class=\"sy0\">,</span><br/>  <span class=\"kw1\">SUM</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">AS</span> tsum<span class=\"sy0\">,</span><br/>  <span class=\"kw1\">SUM</span><span class=\"br0\">(</span><span class=\"kw1\">POWER</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">AS</span> tsqr<br/><span class=\"kw1\">FROM</span> teststd;<br/>\u00a0<br/><span class=\"co1\">-- you can of course put this code into every query</span><br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">OR</span> <span class=\"kw1\">REPLACE</span> <span class=\"kw1\">FUNCTION</span> std_dev<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">RETURNS</span> <span class=\"kw1\">DOUBLE</span> <span class=\"kw1\">PRECISION</span> <span class=\"kw1\">AS</span> $$<br/> <span class=\"kw1\">SELECT</span> <span class=\"kw1\">SQRT</span><span class=\"br0\">(</span>tsqr<span class=\"sy0\">/</span>cnt <span class=\"sy0\">-</span> <span class=\"br0\">(</span>tsum<span class=\"sy0\">/</span>cnt<span class=\"br0\">)</span>^<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">FROM</span> vteststd;<br/>$$ <span class=\"kw1\">LANGUAGE</span> <span class=\"kw1\">SQL</span>;<br/>\u00a0<br/><span class=\"co1\">-- test data is: 2,4,4,4,5,5,7,9</span><br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> teststd <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">SELECT</span> std_dev<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">AS</span> std_deviation;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> teststd <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">SELECT</span> std_dev<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">AS</span> std_deviation;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> teststd <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">SELECT</span> std_dev<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">AS</span> std_deviation;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> teststd <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">SELECT</span> std_dev<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">AS</span> std_deviation;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> teststd <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">SELECT</span> std_dev<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">AS</span> std_deviation;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> teststd <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">SELECT</span> std_dev<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">AS</span> std_deviation;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> teststd <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">SELECT</span> std_dev<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">AS</span> std_deviation;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> teststd <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">SELECT</span> std_dev<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">AS</span> std_deviation;<br/><span class=\"co1\">-- cleanup test data</span><br/><span class=\"kw1\">DELETE</span> <span class=\"kw1\">FROM</span> teststd;<br/>\u00a0</pre>"}, {"lang": "Swift", "loc": 28, "block": "<pre class=\"text highlighted_source\">import Darwin<br/>class stdDev{<br/>\u00a0<br/>    var n:Double = 0.0<br/>    var sum:Double = 0.0<br/>    var sum2:Double = 0.0<br/>\u00a0<br/>    init(){<br/>\u00a0<br/>        let testData:[Double] = [2,4,4,4,5,5,7,9];<br/>        for x in testData{<br/>\u00a0<br/>            var a:Double = calcSd(x)<br/>            println(\"value \\(Int(x)) SD = \\(a)\");<br/>        }<br/>\u00a0<br/>    }<br/>\u00a0<br/>    func calcSd(x:Double)-&gt;Double{<br/>\u00a0<br/>        n += 1<br/>        sum += x<br/>        sum2 += x*x<br/>        return sqrt( sum2 / n - sum*sum / n / n)<br/>    }<br/>\u00a0<br/>}<br/>var aa = stdDev()</pre>"}, {"lang": "Tcl", "loc": 33, "block": "<pre class=\"tcl highlighted_source\">oo::<span class=\"me1\">class</span> create SDAccum <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> sum sum2 num<br/>    constructor <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> sum <span class=\"nu0\">0.0</span><br/>        <span class=\"kw1\">set</span> sum2 <span class=\"nu0\">0.0</span><br/>        <span class=\"kw1\">set</span> num <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> value <span class=\"br0\">{</span>x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> sum2 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$sum2</span> + <span class=\"re0\">$x</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> sum <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$sum</span> + <span class=\"re0\">$x</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw2\">incr</span> num<br/>        <span class=\"kw1\">return</span> <span class=\"br0\">[</span>my stddev<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> count <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$num</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> mean <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$sum</span> / <span class=\"re0\">$num</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> variance <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$sum2</span>/<span class=\"re0\">$num</span> - <span class=\"br0\">[</span>my mean<span class=\"br0\">]</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> stddev <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">expr</span> <span class=\"br0\">{</span>sqrt<span class=\"br0\">(</span><span class=\"br0\">[</span>my variance<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Demonstration</span><br/><span class=\"kw1\">set</span> sdacc <span class=\"br0\">[</span>SDAccum new<span class=\"br0\">]</span><br/><span class=\"kw1\">foreach</span> val <span class=\"br0\">{</span><span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">4</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> sd <span class=\"br0\">[</span><span class=\"re0\">$sdacc</span> value <span class=\"re0\">$val</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"the standard deviation is: $sd\"</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 1, "block": "<pre>\u2022 Press [STAT] select [EDIT] followed by [ENTER]\n\u2022 then enter for list L1 in the table\u00a0: 2, 4, 4, 4, 5, 5, 7, 9\n\u2022 Or enter {2,4,4,4,5,5,7,9}\u2192L1\n\u2022 Press [STAT] select [CALC] then [1-Var Stats] select list L1 followed by [ENTER]\n\u2022 Then \u03c3x (=2) gives the standard deviation of the population\n</pre>"}, {"lang": "VBScript", "loc": 21, "block": "<pre class=\"vb highlighted_source\">data = Array(2,4,4,4,5,5,7,9)<br/>\u00a0<br/><span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(data)<br/>\tWScript.StdOut.Write <span class=\"st0\">\"value = \"</span> &amp; data(i) &amp;_<br/>\t\t<span class=\"st0\">\" running sd = \"</span> &amp; sd(data,i)<br/>\tWScript.StdOut.WriteLine<br/><span class=\"kw3\">Next</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> sd(arr,n)<br/>\tmean = 0<br/>\tvariance = 0<br/>\t<span class=\"kw3\">For</span> j = 0 <span class=\"kw3\">To</span> n<br/>\t\tmean = mean + arr(j)<br/>\t<span class=\"kw3\">Next</span><br/>\tmean = mean/(n+1)<br/>\t<span class=\"kw3\">For</span> k = 0 <span class=\"kw3\">To</span> n<br/>\t\tvariance = variance + ((arr(k)-mean)^2)<br/>\t<span class=\"kw3\">Next</span><br/>\tvariance = variance/(n+1)<br/>\tsd = FormatNumber(Sqr(variance),6)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "Visual Basic", "loc": 50, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> avg(what() <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span><br/>    <span class=\"co1\">'treats non-numeric strings as zero<br/></span>    <span class=\"kw4\">Dim</span> L0 <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>, total <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span><br/>    <span class=\"kw3\">For</span> L0 = <span class=\"kw4\">LBound</span>(what) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(what)<br/>        <span class=\"kw3\">If</span> IsNumeric(what(L0)) <span class=\"kw3\">Then</span> total = total + what(L0)<br/>    <span class=\"kw3\">Next</span><br/>    avg = total / (1 + <span class=\"kw4\">UBound</span>(what) - <span class=\"kw4\">LBound</span>(what))<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> standardDeviation(fp <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span><br/>    <span class=\"kw4\">Static</span> list() <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span><br/>    <span class=\"kw4\">Dim</span> av <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>, tmp <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>, L0 <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span><br/>\u00a0<br/>    <span class=\"co1\">'add to sequence if numeric<br/></span>    <span class=\"kw3\">If</span> IsNumeric(fp) <span class=\"kw3\">Then</span><br/>        <span class=\"kw4\">On</span> <span class=\"kw4\">Error</span> <span class=\"kw3\">GoTo</span> makeArr   <span class=\"co1\">'catch undimensioned list<br/></span>        <span class=\"kw4\">ReDim</span> <span class=\"kw4\">Preserve</span> list(<span class=\"kw4\">UBound</span>(list) + 1)<br/>        <span class=\"kw4\">On</span> <span class=\"kw4\">Error</span> <span class=\"kw3\">GoTo</span> 0<br/>        list(<span class=\"kw4\">UBound</span>(list)) = fp<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\u00a0<br/>    <span class=\"co1\">'get average<br/></span>    av = avg(list())<br/>\u00a0<br/>    <span class=\"co1\">'the actual work<br/></span>    <span class=\"kw3\">For</span> L0 = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(list)<br/>        tmp = tmp + ((list(L0) - av) ^ 2)<br/>    <span class=\"kw3\">Next</span><br/>    tmp = Sqr(tmp / (<span class=\"kw4\">UBound</span>(list) + 1))<br/>\u00a0<br/>    standardDeviation = tmp<br/>\u00a0<br/>    <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>makeArr:<br/>    <span class=\"kw3\">If</span> 9 = Err.Number <span class=\"kw3\">Then</span><br/>        <span class=\"kw4\">ReDim</span> list(0)<br/>    <span class=\"kw3\">Else</span><br/>        <span class=\"co1\">'something's wrong<br/></span>        Err.Raise Err.Number<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw4\">Resume</span> <span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> tester()<br/>    <span class=\"kw4\">Dim</span> x <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span><br/>    x = Array(2, 4, 4, 4, 5, 5, 7, 9)<br/>    <span class=\"kw3\">For</span> L0 = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(x)<br/>        Debug.<span class=\"kw4\">Print</span> standardDeviation(x(L0))<br/>    <span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span></pre>"}, {"lang": "XPL0", "loc": 13, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>int  A, I;<br/>real N, S, S2;<br/>[A:= [2,4,4,4,5,5,7,9];<br/>N:= 0.0;  S:= 0.0;  S2:= 0.0;<br/>for I:= 0 to 8-1 do<br/>        [N:= N + 1.0;<br/>        S:= S + float(A(I));<br/>        S2:= S2 + float(sq(A(I)));<br/>        RlOut(0, sqrt((S2/N) - sq(S/N)));<br/>        ];<br/>CrLf(0);<br/>]</pre>"}, {"lang": "zkl", "loc": 5, "block": "<pre class=\"text highlighted_source\">fcn sdf{ fcn(x,xs){ <br/>      m:=xs.append(x.toFloat()).sum(0.0)/xs.len(); <br/>      (xs.reduce('wrap(p,x){(x-m)*(x-m) +p},0.0)/xs.len()).sqrt() <br/>    }.fp1(L())<br/>}</pre>"}]}