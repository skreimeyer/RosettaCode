{"task": "Determine_if_only_one_instance_is_running", "blocks": [{"lang": "Ada", "loc": 28, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Single_Instance <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">package</span> IO <span class=\"kw3\">renames</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>   Lock_File: IO.<span class=\"me1\">File_Type</span>;<br/>   Lock_File_Name: String\u00a0:= <span class=\"st0\">\"single_instance.magic_lock\"</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">begin</span><br/>      IO.<span class=\"me1\">Open</span><span class=\"br0\">(</span>File =&gt; Lock_File, Mode=&gt; IO.<span class=\"me1\">In_File</span>, Name =&gt; Lock_File_Name<span class=\"br0\">)</span>;<br/>      IO.<span class=\"me1\">Close</span><span class=\"br0\">(</span>Lock_File<span class=\"br0\">)</span>;<br/>      IO.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"I can't -- another instance of me is running ...\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">exception</span><br/>      <span class=\"kw3\">when</span> IO.<span class=\"me1\">Name_Error</span> =&gt;<br/>         IO.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"I can run!\"</span><span class=\"br0\">)</span>;<br/>         IO.<span class=\"me1\">Create</span><span class=\"br0\">(</span>File =&gt; Lock_File, Name =&gt; Lock_File_Name<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">10</span> <span class=\"kw1\">loop</span><br/>            IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw3\">delay</span> <span class=\"nu0\">1.0</span>; <span class=\"co1\">-- wait one second</span><br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         IO.<span class=\"me1\">Delete</span><span class=\"br0\">(</span>Lock_File<span class=\"br0\">)</span>;<br/>         IO.<span class=\"me1\">New_Line</span>;<br/>         IO.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"I am done!\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span>;<br/><span class=\"kw1\">exception</span><br/>   <span class=\"kw3\">when</span> <span class=\"kw3\">others</span> =&gt; IO.<span class=\"me1\">Delete</span><span class=\"br0\">(</span>Lock_File<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Single_Instance;</pre>"}, {"lang": "AutoHotkey", "loc": 11, "block": "<pre class=\"text highlighted_source\">      SYS \"CreateMutex\", 0, 1, \"UniqueLockName\" TO Mutex%<br/>      SYS \"GetLastError\" TO lerr%<br/>      IF lerr% = 183 THEN<br/>        SYS \"CloseHandle\", Mutex%<br/>        SYS \"MessageBox\", @hwnd%, \"I am already running\", 0, 0<br/>        QUIT<br/>      ENDIF<br/>\u00a0<br/>      SYS \"ReleaseMutex\", Mutex%<br/>      SYS \"CloseHandle\", Mutex%<br/>      END</pre>"}, {"lang": "BBC BASIC", "loc": 11, "block": "<pre class=\"text highlighted_source\">      SYS \"CreateMutex\", 0, 1, \"UniqueLockName\" TO Mutex%<br/>      SYS \"GetLastError\" TO lerr%<br/>      IF lerr% = 183 THEN<br/>        SYS \"CloseHandle\", Mutex%<br/>        SYS \"MessageBox\", @hwnd%, \"I am already running\", 0, 0<br/>        QUIT<br/>      ENDIF<br/>\u00a0<br/>      SYS \"ReleaseMutex\", Mutex%<br/>      SYS \"CloseHandle\", Mutex%<br/>      END</pre>"}, {"lang": "C", "loc": 94, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;fcntl.h&gt;\t/* fcntl, open */</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;\t/* atexit, getenv, malloc */</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;\t/* fputs, printf, puts, snprintf */</span><br/><span class=\"co2\">#include &lt;string.h&gt;\t/* memcpy */</span><br/><span class=\"co2\">#include &lt;unistd.h&gt;\t/* sleep, unlink */</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Filename for only_one_instance() lock. */</span><br/><span class=\"co2\">#define INSTANCE_LOCK \"rosetta-code-lock\"</span><br/>\u00a0<br/><span class=\"kw4\">void</span><br/>fail<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>message<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/perror.html\"><span class=\"kw3\">perror</span></a><span class=\"br0\">(</span>message<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Path to only_one_instance() lock. */</span><br/><span class=\"kw4\">static</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>ooi_path<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span><br/>ooi_unlink<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tunlink<span class=\"br0\">(</span>ooi_path<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Exit if another instance of this program is running. */</span><br/><span class=\"kw4\">void</span><br/>only_one_instance<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">struct</span> flock fl<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">size_t</span> dirlen<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> fd<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>dir<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/*<br/>\t * Place the lock in the home directory of this user;<br/>\t * therefore we only check for other instances by the same<br/>\t * user (and the user can trick us by changing HOME).<br/>\t */</span><br/>\tdir <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/getenv.html\"><span class=\"kw3\">getenv</span></a><span class=\"br0\">(</span><span class=\"st0\">\"HOME\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>dir <span class=\"sy0\">==</span> NULL <span class=\"sy0\">||</span> dir<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"st0\">'/'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fputs.html\"><span class=\"kw3\">fputs</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Bad home directory.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> stderr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\tdirlen <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>dir<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tooi_path <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>dirlen <span class=\"sy0\">+</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"st0\">\"/\"</span> INSTANCE_LOCK<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>ooi_path <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span><br/>\t\tfail<span class=\"br0\">(</span><span class=\"st0\">\"malloc\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memcpy.html\"><span class=\"kw3\">memcpy</span></a><span class=\"br0\">(</span>ooi_path<span class=\"sy0\">,</span> dir<span class=\"sy0\">,</span> dirlen<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memcpy.html\"><span class=\"kw3\">memcpy</span></a><span class=\"br0\">(</span>ooi_path <span class=\"sy0\">+</span> dirlen<span class=\"sy0\">,</span> <span class=\"st0\">\"/\"</span> INSTANCE_LOCK<span class=\"sy0\">,</span><br/>\t    <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"st0\">\"/\"</span> INSTANCE_LOCK<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* copies '\\0' */</span><br/>\u00a0<br/>\tfd <span class=\"sy0\">=</span> open<span class=\"br0\">(</span>ooi_path<span class=\"sy0\">,</span> O_RDWR <span class=\"sy0\">|</span> O_CREAT<span class=\"sy0\">,</span> <span class=\"nu8\">0600</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>fd <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\tfail<span class=\"br0\">(</span>ooi_path<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tfl.<span class=\"me1\">l_start</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\tfl.<span class=\"me1\">l_len</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\tfl.<span class=\"me1\">l_type</span> <span class=\"sy0\">=</span> F_WRLCK<span class=\"sy0\">;</span><br/>\tfl.<span class=\"me1\">l_whence</span> <span class=\"sy0\">=</span> SEEK_SET<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>fcntl<span class=\"br0\">(</span>fd<span class=\"sy0\">,</span> F_SETLK<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>fl<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fputs.html\"><span class=\"kw3\">fputs</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Another instance of this program is running.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>\t\t    stderr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/*<br/>\t * Run unlink(ooi_path) when the program exits. The program<br/>\t * always releases locks when it exits.<br/>\t */</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atexit.html\"><span class=\"kw3\">atexit</span></a><span class=\"br0\">(</span>ooi_unlink<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/> * Demo for Rosetta Code.<br/> * http://rosettacode.org/wiki/Determine_if_only_one_instance_is_running<br/> */</span><br/><span class=\"kw4\">int</span><br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\tonly_one_instance<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* Play for 10 seconds. */</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d...%s\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> i <span class=\"sy0\">%</span> <span class=\"nu0\">5</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fflush.html\"><span class=\"kw3\">fflush</span></a><span class=\"br0\">(</span>stdout<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tsleep<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Fin!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 1, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;afx.h&gt;</span></pre>"}, {"lang": "C#", "loc": 18, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Net</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Net.Sockets</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program <span class=\"br0\">{</span>        <br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span>        <br/>        <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>            TcpListener server <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> TcpListener<span class=\"br0\">(</span>IPAddress<span class=\"sy0\">.</span><span class=\"me1\">Any</span>, <span class=\"nu0\">12345</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            server<span class=\"sy0\">.</span><span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <br/>\u00a0<br/>        <span class=\"kw1\">catch</span> <span class=\"br0\">(</span>SocketException e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>e<span class=\"sy0\">.</span><span class=\"me1\">SocketErrorCode</span> <span class=\"sy0\">==</span> SocketError<span class=\"sy0\">.</span><span class=\"me1\">AddressAlreadyInUse</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">Error</span><span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Already running.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 5, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">import</span> <span class=\"br0\">(</span>java<span class=\"sy0\">.</span>net ServerSocket InetAddress<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> <span class=\"sy0\">*</span>port<span class=\"sy0\">*</span> <span class=\"nu0\">12345</span><span class=\"br0\">)</span> <span class=\"co1\">; random large port number</span><br/><span class=\"br0\">(</span><span class=\"kw1\">try</span> <span class=\"br0\">(</span>new ServerSocket <span class=\"sy0\">*</span>port<span class=\"sy0\">*</span> <span class=\"nu0\">10</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span> InetAddress getLocalHost<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">catch</span> IOException e <span class=\"br0\">(</span>System<span class=\"sy0\">/</span>exit <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; port taken, so app is already running </span></pre>"}, {"lang": "Delphi", "loc": 27, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> OneInstance<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> SysUtils<span class=\"sy1\">,</span> Windows<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  FMutex<span class=\"sy1\">:</span> <span class=\"kw4\">THandle</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  FMutex <span class=\"sy1\">:</span><span class=\"sy3\">=</span> CreateMutex<span class=\"br0\">(</span><span class=\"kw1\">nil</span><span class=\"sy1\">,</span> <span class=\"kw2\">True</span><span class=\"sy1\">,</span> <span class=\"st0\">'OneInstanceMutex'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> FMutex <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    RaiseLastOSError<br/>  <span class=\"kw1\">else</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">try</span><br/>      <span class=\"kw1\">if</span> GetLastError <span class=\"sy3\">=</span> ERROR_ALREADY_EXISTS <span class=\"kw1\">then</span><br/>        <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Program already running.  Closing...'</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">begin</span><br/>        <span class=\"co1\">// do stuff ...</span><br/>        Readln<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">finally</span><br/>      CloseHandle<span class=\"br0\">(</span>FMutex<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre>7&gt; erlang:register( aname, erlang:self() ).          \ntrue\n8&gt; erlang:register( aname, erlang:self() ).\n** exception error: bad argument\n     in function  register/2\n        called as register(aname,&lt;0.42.0&gt;)\n</pre>"}, {"lang": "Go", "loc": 19, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"net\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> lNet <span class=\"sy2\">=</span> <span class=\"st0\">\"tcp\"</span><br/><span class=\"kw1\">const</span> lAddr <span class=\"sy2\">=</span> <span class=\"st0\">\":12345\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> _<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> net<span class=\"sy3\">.</span>Listen<span class=\"sy1\">(</span>lNet<span class=\"sy1\">,</span> lAddr<span class=\"sy1\">);</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"an instance was already running\"</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"single instance started\"</span><span class=\"sy1\">)</span><br/>    time<span class=\"sy3\">.</span>Sleep<span class=\"sy1\">(</span><span class=\"nu0\">10</span> <span class=\"sy3\">*</span> time<span class=\"sy3\">.</span>Second<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 42, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Concurrent<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Directory <span class=\"br0\">(</span>doesFileExist<span class=\"sy0\">,</span> getAppUserDataDirectory<span class=\"sy0\">,</span><br/>    removeFile<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span>withFile<span class=\"sy0\">,</span> Handle<span class=\"sy0\">,</span> IOMode<span class=\"br0\">(</span>WriteMode<span class=\"br0\">)</span><span class=\"sy0\">,</span> hPutStr<span class=\"br0\">)</span><br/>\u00a0<br/>oneInstance <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>oneInstance <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <span class=\"co1\">-- check if file \"$HOME/.myapp.lock\" exists</span><br/>    user <span class=\"sy0\">&lt;-</span> getAppUserDataDirectory <span class=\"st0\">\"myapp.lock\"</span><br/>    locked <span class=\"sy0\">&lt;-</span> doesFileExist user<br/>    <span class=\"kw1\">if</span> locked<br/>    <span class=\"kw1\">then</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"There is already one instance of this program running.\"</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">do</span><br/>        t <span class=\"sy0\">&lt;-</span> myThreadId<br/>        <span class=\"co1\">-- this is the entry point to the main program:</span><br/>        <span class=\"co1\">-- withFile creates a file, then calls a function,</span><br/>        <span class=\"co1\">-- then closes the file</span><br/>        withFile user WriteMode <span class=\"br0\">(</span>do<span class=\"sy0\">_</span>program t<span class=\"br0\">)</span><br/>        <span class=\"co1\">-- remove the lock when we're done</span><br/>        removeFile user<br/>\u00a0<br/>do<span class=\"sy0\">_</span>program <span class=\"sy0\">::</span> ThreadId <span class=\"sy0\">-&gt;</span> Handle <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>do<span class=\"sy0\">_</span>program t h <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"Locked by thread: \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> t<br/>    <span class=\"co1\">-- print what thread has acquired the lock</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> s<br/>    <span class=\"co1\">-- write the same message to the file, to show that the</span><br/>    <span class=\"co1\">-- thread \"owns\" the file</span><br/>    hPutStr h s<br/>    <span class=\"co1\">-- wait for one second</span><br/>    threadDelay <span class=\"nu0\">1000000</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <span class=\"co1\">-- launch the first thread, which will create the lock file</span><br/>    forkIO oneInstance<br/>    <span class=\"co1\">-- wait for half a second</span><br/>    threadDelay <span class=\"nu0\">500000</span><br/>    <span class=\"co1\">-- launch the second thread, which will find the lock file and</span><br/>    <span class=\"co1\">-- thus will exit immediately</span><br/>    forkIO oneInstance<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 4, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>   <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"kw4\">open</span><span class=\"br0\">(</span><span class=\"st0\">\":\"</span><span class=\"sy0\">||</span><span class=\"nu0\">54321</span><span class=\"sy0\">,</span><span class=\"st0\">\"na\"</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"Already running\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">repeat</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>\t<span class=\"co1\"># busy loop</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Java", "loc": 35, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.io.IOException</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.net.InetAddress</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.net.ServerSocket</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.net.UnknownHostException</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> SingletonApp<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> PORT <span class=\"sy0\">=</span> <span class=\"nu0\">65000</span><span class=\"sy0\">;</span>  <span class=\"co1\">// random large port number</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aserversocket+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">ServerSocket</span></a> s<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// static initializer</span><br/>    <span class=\"kw1\">static</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>            s <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aserversocket+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">ServerSocket</span></a><span class=\"br0\">(</span>PORT, <span class=\"nu0\">10</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainetaddress+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InetAddress</span></a>.<span class=\"me1\">getLocalHost</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aunknownhostexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">UnknownHostException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">// shouldn't happen for localhost</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">// port taken, so app is already running</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Application is already running,\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\" so terminating this instance.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">exit</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"OK, only this instance is running\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\" but will terminate in 10 seconds.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Athread+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Thread</span></a>.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>s.<span class=\"me1\">isClosed</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> s.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">err</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 36, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">IOException</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">net</span>.<span class=\"sy0\">*</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> SingleInstance <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> ss<span class=\"sy0\">:</span> ServerSocket<span class=\"sy0\">?</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a>  <br/>\u00a0<br/>    fun alreadyRunning<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>            ss <span class=\"sy0\">=</span> ServerSocket<span class=\"br0\">(</span><span class=\"nu0\">65000</span>, <span class=\"nu0\">10</span>, InetAddress.<span class=\"me1\">getLocalHost</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// using private port 65000        </span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">(</span>e<span class=\"sy0\">:</span> IOException<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">// port already in use so an instance is already running</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a>   <br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun close<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ss <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a> || ss<span class=\"sy0\">?</span>.<span class=\"me1\">isClosed</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>        ss<span class=\"sy0\">?</span>.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>SingleInstance.<span class=\"me1\">alreadyRunning</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Application is already running, so terminating this instance\"</span><span class=\"br0\">)</span><br/>        System.<span class=\"me1\">exit</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span> <br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"OK, only this instance is running but will terminate in 10 seconds\"</span><span class=\"br0\">)</span><br/>        Thread.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><br/>        SingleInstance.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 22, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/lasso9<br/>\u00a0<br/>local(lockfile = file('/tmp/myprocess.lockfile'))<br/>\u00a0<br/>if(#lockfile -&gt; exists) =&gt; {<br/>\tstdoutnl('Error: App is running as of ' + #lockfile -&gt; readstring)<br/>\tabort<br/>}<br/>\u00a0<br/>handle =&gt; {<br/>\t#lockfile -&gt; delete<br/>}<br/>\u00a0<br/>stdoutnl('Starting execution')<br/>\u00a0<br/>#lockfile -&gt; doWithClose =&gt; {<br/>\t#lockfile -&gt; writebytes(bytes(date))<br/>}<br/>\u00a0<br/>sleep(10000)<br/>\u00a0<br/>stdoutnl('Execution done')</pre>"}, {"lang": "Liberty BASIC", "loc": 16, "block": "<pre class=\"lb highlighted_source\"><span class=\"co1\">'Create a Mutex to prevent more than one instance from being open at a single time.</span><br/><span class=\"kw1\">CallDLL</span> <span class=\"sy0\">#</span>kernel32<span class=\"sy0\">,</span> <span class=\"st0\">\"CreateMutexA\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"kw1\">as</span> <span class=\"kw1\">Long</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"kw1\">as</span> <span class=\"kw1\">Long</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Global\\My Program\"</span> <span class=\"kw1\">as</span> <span class=\"kw1\">ptr</span><span class=\"sy0\">,</span> mutex <span class=\"kw1\">as</span> <span class=\"kw1\">ulong</span><br/><span class=\"kw1\">CallDLL</span> <span class=\"sy0\">#</span>kernel32<span class=\"sy0\">,</span> <span class=\"st0\">\"GetLastError\"</span><span class=\"sy0\">,</span> LastError <span class=\"kw1\">as</span> <span class=\"kw1\">Long</span><br/>\u00a0<br/><span class=\"kw1\">if</span> LastError <span class=\"sy0\">=</span> <span class=\"nu0\">183</span> <span class=\"kw1\">then</span> <span class=\"co1\">'Error returned when a Mutex already exists</span><br/>    <span class=\"co1\">'Close the handle if the mutex already exists</span><br/>    <span class=\"kw1\">calldll</span> <span class=\"sy0\">#</span>kernel32<span class=\"sy0\">,</span> <span class=\"st0\">\"CloseHandle\"</span><span class=\"sy0\">,</span> mutex <span class=\"kw1\">as</span> <span class=\"kw1\">ulong</span><span class=\"sy0\">,</span> ret <span class=\"kw1\">as</span> <span class=\"kw1\">ulong</span><br/>    <span class=\"kw1\">notice</span> <span class=\"st0\">\"An instance of My Program is currently running!\"</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/><span class=\"co1\">'Release the Mutex/ Close the handle prior to ending the program</span><br/><span class=\"co1\">'Comment out these lines to allow the program to remain active to test for the mutex's presence</span><br/><span class=\"kw1\">calldll</span> <span class=\"sy0\">#</span>kernel32<span class=\"sy0\">,</span> <span class=\"st0\">\"ReleaseMutex\"</span><span class=\"sy0\">,</span> mutex <span class=\"kw1\">as</span> <span class=\"kw1\">ulong</span><span class=\"sy0\">,</span> ret <span class=\"kw1\">as</span> <span class=\"kw1\">ulong</span><br/><span class=\"kw1\">calldll</span> <span class=\"sy0\">#</span>kernel32<span class=\"sy0\">,</span> <span class=\"st0\">\"CloseHandle\"</span><span class=\"sy0\">,</span> mutex <span class=\"kw1\">as</span> <span class=\"kw1\">ulong</span><span class=\"sy0\">,</span> ret <span class=\"kw1\">as</span> <span class=\"kw1\">ulong</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 5, "block": "<pre class=\"text highlighted_source\">$Epilog\u00a0:= Print[\"Another instance is running \"]; <br/>If[Attributes[Global`Mutex] == {Protected},<br/> Exit[],<br/> Global`Mutex[x_]\u00a0:= Locked; Protect[Global`Mutex];<br/> ]</pre>"}, {"lang": "Nim", "loc": 19, "block": "<pre class=\"text highlighted_source\">import os, posix<br/>\u00a0<br/>let fn = getHomeDir() &amp; \"rosetta-code-lock\"<br/>proc ooiUnlink {.noconv.} = discard unlink fn<br/>\u00a0<br/>proc onlyOneInstance =<br/>  var fl = TFlock(lType: F_WRLCK.cshort, lWhence: SEEK_SET.cshort)<br/>  var fd = getFileHandle fn.open fmReadWrite<br/>  if fcntl(fd, F_SETLK, addr fl) &lt; 0:<br/>    stderr.writeln \"Another instance of this program is running\"<br/>    quit 1<br/>  addQuitProc ooiUnlink<br/>\u00a0<br/>onlyOneInstance()<br/>\u00a0<br/>for i in countdown(10, 1):<br/>  echo i<br/>  sleep 1000<br/>echo \"Fin!\"</pre>"}, {"lang": "OCaml", "loc": 11, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">open</span> Sem<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> oflags <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>O_CREAT<span class=\"sy0\">;</span><br/>                <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>O_EXCL<span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> sem <span class=\"sy0\">=</span> sem_open <span class=\"st0\">\"MyUniqueName\"</span> <span class=\"re1\">~oflags</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"co1\">(* here the real code of the app *)</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>sleep <span class=\"nu0\">20</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\">(* end of the app *)</span><br/>  sem_unlink <span class=\"st0\">\"MyUniqueName\"</span><span class=\"sy0\">;</span><br/>  sem_close sem</pre>"}, {"lang": "Oz", "loc": 22, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">functor</span><br/><span class=\"kw1\">import</span> Application Open System<br/><span class=\"kw1\">define</span><br/>   <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">IsAlreadyRunning</span><span class=\"br0\">}</span><br/>      <span class=\"kw1\">try</span><br/>\t S = <span class=\"br0\">{</span>New Open<span class=\"sy0\">.</span>socket init<span class=\"br0\">}</span><br/>      <span class=\"kw1\">in</span><br/>\t <span class=\"br0\">{</span>S bind<span class=\"br0\">(</span>takePort:12345<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\t <span class=\"kw1\">false</span><br/>      <span class=\"kw1\">catch</span> system<span class=\"br0\">(</span>os<span class=\"br0\">(</span>os <span class=\"st0\">\"bind\"</span> <span class=\"sy0\">...</span><span class=\"br0\">)</span> <span class=\"sy0\">...</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t <span class=\"kw1\">true</span><br/>      <span class=\"kw1\">end</span><br/>   <span class=\"kw1\">end</span><br/>\u00a0<br/>   <span class=\"kw1\">if</span> <span class=\"br0\">{</span>IsAlreadyRunning<span class=\"br0\">}</span> <span class=\"kw1\">then</span><br/>      <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Exiting because already running.\"</span><span class=\"br0\">}</span><br/>      <span class=\"br0\">{</span>Application<span class=\"sy0\">.</span>exit 1<span class=\"br0\">}</span><br/>   <span class=\"kw1\">end</span><br/>   <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Press enter to exit.\"</span><span class=\"br0\">}</span><br/>   <span class=\"br0\">{</span><span class=\"br0\">{</span>New Open<span class=\"sy0\">.</span>file init<span class=\"br0\">(</span>name:stdin<span class=\"br0\">)</span><span class=\"br0\">}</span> read<span class=\"br0\">(</span>list:_ size:1<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>   <span class=\"br0\">{</span>Application<span class=\"sy0\">.</span>exit 0<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Perl", "loc": 9, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Fcntl <span class=\"st_h\">':flock'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>INIT<br/><span class=\"br0\">{</span><br/>\t<a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Not able to open $0<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">unless</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/open.html\"><span class=\"kw3\">open</span></a> ME<span class=\"sy0\">,</span> <span class=\"co3\">$0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"I'm already running\u00a0!!<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">unless</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/flock.html\"><span class=\"kw3\">flock</span></a> ME<span class=\"sy0\">,</span> LOCK_EX<span class=\"sy0\">|</span>LOCK_NB<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/sleep.html\"><span class=\"kw3\">sleep</span></a> <span class=\"nu0\">60</span><span class=\"sy0\">;</span> <span class=\"co1\"># then your code goes here</span></pre>"}, {"lang": "Perl 6", "loc": 31, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$name</span> <span class=\"sy0\">=</span> <span class=\"re0\">$*PROGRAM</span><span class=\"sy0\">-</span>NAME<span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$pid</span> <span class=\"sy0\">=</span> <span class=\"re0\">$*PID</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$lockdir</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"/tmp\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$lockfile</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"$lockdir/$name.pid\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$lockpid</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"$lockfile$pid\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$havelock</span> <span class=\"sy0\">=</span> <span class=\"kw1\">False</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">END</span> <span class=\"br0\">{</span><br/>    unlink <span class=\"re0\">$lockfile</span> <span class=\"kw1\">if</span> <span class=\"re0\">$havelock</span><span class=\"sy0\">;</span><br/>    try unlink <span class=\"re0\">$lockpid</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$pidfile</span> <span class=\"sy0\">=</span> open <span class=\"st0\">\"$lockpid\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>w <span class=\"kw1\">or</span> <span class=\"kw1\">die</span> <span class=\"st0\">\"Can't create $lockpid: $!\"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$pidfile</span><span class=\"sy0\">.</span><span class=\"kw3\">say</span><span class=\"br0\">(</span><span class=\"re0\">$pid</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$pidfile</span><span class=\"sy0\">.</span><span class=\"me1\">close</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">if</span> try link<span class=\"br0\">(</span><span class=\"re0\">$lockpid</span><span class=\"sy0\">,</span> <span class=\"re0\">$lockfile</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$havelock</span> <span class=\"sy0\">=</span> <span class=\"kw1\">True</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    shell <span class=\"st0\">\"kill -CONT `cat $lockfile` || rm $lockfile\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> try link<span class=\"br0\">(</span><span class=\"re0\">$lockfile</span><span class=\"sy0\">,</span> <span class=\"re0\">$lockpid</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$havelock</span> <span class=\"sy0\">=</span> <span class=\"kw1\">True</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">die</span> <span class=\"st0\">\"You can't run right now!\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>note <span class=\"st0\">\"Got lock!\"</span><span class=\"sy0\">;</span><br/>unlink <span class=\"re0\">$lockpid</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 26, "block": "<pre class=\"text highlighted_source\">--<br/>-- demo\\rosetta\\Single_instance.exw<br/>--<br/>include pGUI.e<br/>\u00a0<br/>function copydata_cb(Ihandle /*ih*/, atom pCommandLine, integer size)<br/>    -- (the first instance is sent a copy of the second one's command line)<br/>    printf(1,\"COPYDATA(%s,\u00a0%d)\\n\",{peek_string(pCommandLine), size});<br/>    return IUP_DEFAULT;<br/>end function<br/>\u00a0<br/>function esc_close(Ihandle /*ih*/, atom c)<br/>    return iff(c=K_ESC?IUP_CLOSE:IUP_CONTINUE)<br/>end function<br/>\u00a0<br/>IupOpen()<br/>IupSetGlobal(\"SINGLEINSTANCE\", \"Single\") -- (must [partially] match the main window title)<br/>if IupGetGlobal(\"SINGLEINSTANCE\")!=\"\" then<br/>    Ihandle dlg = IupDialog(IupVbox({IupLabel(\"hello\")},\"MARGIN=200x200\"))<br/>    IupSetAttribute(dlg,\"TITLE\",\"Single Instance\")<br/>    IupSetCallback(dlg, \"K_ANY\", Icallback(\"esc_close\"))<br/>    IupSetCallback(dlg, \"COPYDATA_CB\", Icallback(\"copydata_cb\"));<br/>    IupShow(dlg)<br/>    IupMainLoop()<br/>end if<br/>IupClose()</pre>"}, {"lang": "PicoLisp", "loc": 1, "block": "<pre>$ cat myScript\n#!/usr/bin/picolisp /usr/lib/picolisp/lib.l\n\n(wait 120000)\n(bye)</pre>"}, {"lang": "PowerShell", "loc": 10, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">Get-Process</span> <span class=\"kw5\">-Name</span> <span class=\"st0\">\"notepad\"</span> <span class=\"kw5\">-ErrorAction</span> SilentlyContinue<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">Write-Warning</span> <span class=\"kw5\">-Message</span> <span class=\"st0\">\"notepad is already running.\"</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">else</span><br/><span class=\"br0\">{</span><br/>    Start<span class=\"sy0\">-</span>Process <span class=\"kw5\">-FilePath</span> C:\\Windows\\notepad.exe<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 11, "block": "<pre class=\"purebasic highlighted_source\">#MyApp<span class=\"sy0\">=</span><span class=\"st0\">\"MyLittleApp\"</span><br/>Mutex<span class=\"sy0\">=</span>CreateMutex_<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,#MyApp<span class=\"br0\">)</span><br/><span class=\"kw1\">If</span> GetLastError_<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>#ERROR_ALREADY_EXISTS<br/>  <span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span>#MyApp,<span class=\"st0\">\"One instance is already started.\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">End</span><br/><span class=\"kw1\">EndIf</span><br/>\u00a0<br/><span class=\"co1\">; Main code executes here</span><br/>\u00a0<br/>ReleaseMutex_<span class=\"br0\">(</span>Mutex<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Python", "loc": 8, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">__main__</span><span class=\"sy0\">,</span> <span class=\"kw3\">os</span><br/>\u00a0<br/><span class=\"kw1\">def</span> isOnlyInstance<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"co1\"># Determine if there are more than the current instance of the application</span><br/>    <span class=\"co1\"># running at the current time.</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">os</span>.<span class=\"me1\">system</span><span class=\"br0\">(</span><span class=\"st0\">\"(( $(ps -ef | grep python | grep '[\"</span> +<br/>                     <span class=\"kw3\">__main__</span>.__file__<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> + <span class=\"st0\">\"]\"</span> + <span class=\"kw3\">__main__</span>.__file__<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span> +<br/>                     <span class=\"st0\">\"' | wc -l) &gt; 1 ))\"</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span></pre>"}, {"lang": "Racket", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define *port* 12345)\u00a0; random large port number<br/>(define listener-handler<br/>  (with-handlers ([exn? (\u03bb(e) (printf \"Already running, bye.\\n\") (exit))])<br/>    (tcp-listen *port*)))<br/>(printf \"Working...\\n\")<br/>(sleep 10)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 21, "block": "<pre class=\"rexx highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* Simple ARexx program to open a port after checking if it's already open */</span><br/><span class=\"kw1\">IF</span> Show<span class=\"br0\">(</span><span class=\"st0\">'PORTS'</span>,<span class=\"st0\">'ROSETTA'</span><span class=\"br0\">)</span> <span class=\"kw3\">THEN</span> <span class=\"kw1\">DO</span>           <span class=\"coMULTI\">/* Port is already open; exit */</span><br/>   <span class=\"kw1\">SAY</span> <span class=\"st0\">'This program may only be run in a single instance at a time.'</span><br/>   <span class=\"kw1\">EXIT</span> <span class=\"nu0\">5</span>                                    <span class=\"coMULTI\">/* Exit with a mild warning   */</span><br/>   <span class=\"kw3\">END</span><br/>                 <span class=\"coMULTI\">/* Open rexxsupport.library so that ports can be opened   */</span><br/><span class=\"kw1\">IF</span> ~Show<span class=\"br0\">(</span><span class=\"st0\">'LIBRARIES'</span>,<span class=\"st0\">'rexxsupport.library'</span><span class=\"br0\">)</span> <br/>   <span class=\"kw3\">THEN</span> <span class=\"kw1\">CALL</span> AddLib<span class=\"br0\">(</span><span class=\"st0\">'rexxsupport.library'</span>,<span class=\"nu0\">0</span>,-<span class=\"nu0\">30</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <br/>\u00a0<br/><span class=\"kw1\">IF</span> ~OpenPort<span class=\"br0\">(</span><span class=\"st0\">'ROSETTA'</span><span class=\"br0\">)</span>    <span class=\"kw3\">THEN</span> <span class=\"kw1\">EXIT</span> <span class=\"nu0\">10</span>       <span class=\"coMULTI\">/* Open port, end if it fails */</span><br/>\u00a0<br/><span class=\"kw1\">SAY</span> <span class=\"st0\">'Program is now running.'</span><br/>\u00a0<br/><span class=\"kw1\">DO</span> <span class=\"kw2\">FOREVER</span>                                    <span class=\"coMULTI\">/* Busyloop                   */</span><br/>   <span class=\"coMULTI\">/* Program stuff here */</span><br/>   <span class=\"kw3\">END</span><br/>\u00a0<br/><span class=\"kw1\">EXIT</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Ring", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Determine if only one instance is running<br/>\u00a0<br/>task = \"ringw.exe\"<br/>taskname = \"tasklist.txt\"<br/>remove(taskname)<br/>system(\"tasklist &gt;&gt; tasklist.txt\")<br/>fp = fopen(taskname,\"r\")<br/>tasks = read(\"tasklist.txt\")<br/>counttask = count(tasks,task)<br/>if counttask &gt; 0<br/>   see task + \" running in \" + counttask + \" instances\" + nl<br/>else<br/>   see task + \" is not running\" + nl<br/>ok<br/>\u00a0<br/>func count(cString,dString)<br/>     sum = 0<br/>     while substr(cString,dString) &gt; 0<br/>           sum++<br/>           cString = substr(cString,substr(cString,dString)+len(string(sum)))<br/>     end<br/>     return sum<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 15, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> main<br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"first instance\"</span><br/>  <span class=\"kw3\">sleep</span> <span class=\"nu0\">20</span><br/>  <span class=\"kw3\">puts</span> <span class=\"re3\">:done</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">if</span> $0 == <span class=\"kw2\">__FILE__</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw4\">File</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"kw2\">__FILE__</span><span class=\"br0\">)</span>.<span class=\"me1\">flock</span><span class=\"br0\">(</span><span class=\"kw4\">File</span>::LOCK_EX <span class=\"sy0\">|</span> <span class=\"kw4\">File</span>::LOCK_NB<span class=\"br0\">)</span><br/>    main<br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw3\">raise</span> <span class=\"st0\">\"another instance of this program is running\"</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>__END__</pre>"}, {"lang": "Run BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">if instr(shell$(\"tasklist\"),\"rbp.exe\") &lt;&gt; 0 then print \"Task is Running\"</pre>"}, {"lang": "Rust", "loc": 24, "block": "<pre class=\"text highlighted_source\">use std::net::TcpListener;<br/>\u00a0<br/>fn create_app_lock(port: u16) -&gt; TcpListener {<br/>    match TcpListener::bind((\"0.0.0.0\", port)) {<br/>        Ok(socket) =&gt; {<br/>            socket<br/>        },<br/>        Err(_) =&gt; {<br/>            panic!(\"Couldn't lock port {}: another instance already running?\", port);<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>fn remove_app_lock(socket: TcpListener) {<br/>    drop(socket);<br/>}<br/>\u00a0<br/>fn main() {<br/>    let lock_socket = create_app_lock(12345);<br/>    // ...<br/>    // your code here<br/>    // ...<br/>    remove_app_lock(lock_socket);<br/>}</pre>"}, {"lang": "Scala", "loc": 23, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">IOException</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">net</span>.<span class=\"br0\">{</span>InetAddress, ServerSocket<span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> SingletonApp <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> port <span class=\"sy0\">=</span> <span class=\"nu0\">65000</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> ServerSocket<span class=\"br0\">(</span>port, <span class=\"nu0\">10</span>, InetAddress.<span class=\"me1\">getLocalHost</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_:</span> IOException <span class=\"sy0\">=&gt;</span><br/>      <span class=\"co1\">// port taken, so app is already running</span><br/>      println<span class=\"br0\">(</span><span class=\"st0\">\"Application is already running, so terminating this instance.\"</span><span class=\"br0\">)</span><br/>      sys.<span class=\"me1\">exit</span><span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"OK, only this instance is running but will terminate in 10 seconds.\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  Thread.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><br/>\u00a0<br/>  sys.<span class=\"me1\">exit</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 12, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># For this to work, you need to explicitly</span><br/><span class=\"co1\"># store the returned fh inside a variable.</span><br/>var fh = <span class=\"kw4\">File</span><span class=\"br0\">(</span><span class=\"kw2\">__FILE__</span><span class=\"br0\">)</span>.<span class=\"me1\">open_r</span><br/>\u00a0<br/><span class=\"co1\"># Now call the flock() method on it</span><br/>fh.<span class=\"me1\">flock</span><span class=\"br0\">(</span><span class=\"kw4\">File</span>.<span class=\"me1\">LOCK_EX</span> <span class=\"sy0\">|</span> <span class=\"kw4\">File</span>.<span class=\"me1\">LOCK_NB</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"sy0\">||</span> die <span class=\"st0\">\"I'm already running!\"</span><br/>\u00a0<br/><span class=\"co1\"># Your code here...</span><br/>say <span class=\"st0\">\"Running...\"</span><br/>Sys.<span class=\"kw3\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>say <span class=\"st0\">'Done!'</span></pre>"}, {"lang": "Swift", "loc": 26, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>let globalCenter = NSDistributedNotificationCenter.defaultCenter()<br/>let time = NSDate().timeIntervalSince1970<br/>\u00a0<br/>globalCenter.addObserverForName(\"OnlyOne\", object: nil, queue: NSOperationQueue.mainQueue()) {not in<br/>    if let senderTime = not.userInfo?[\"time\"] as? NSTimeInterval where senderTime\u00a0!= time {<br/>        println(\"More than one running\")<br/>        exit(0)<br/>    } else {<br/>        println(\"Only one\")<br/>    }<br/>}<br/>\u00a0<br/>func send() {<br/>    globalCenter.postNotificationName(\"OnlyOne\", object: nil, userInfo: [\"time\": time])<br/>\u00a0<br/>    let waitTime = dispatch_time(DISPATCH_TIME_NOW, Int64(3 * NSEC_PER_SEC))<br/>\u00a0<br/>    dispatch_after(waitTime, dispatch_get_main_queue()) {<br/>        send()<br/>    }<br/>}<br/>\u00a0<br/>send()<br/>CFRunLoopRun()</pre>"}, {"lang": "Tcl", "loc": 10, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>try <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Pick a port number based on the name of the main script executing</span><br/>    <span class=\"kw2\">socket</span> -server <span class=\"br0\">{</span>apply <span class=\"br0\">{</span><span class=\"br0\">{</span>chan args<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">close</span> <span class=\"re0\">$chan</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span> -myaddr localhost \\<br/>            <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">1024</span> + <span class=\"br0\">[</span>zlib crc32 <span class=\"br0\">[</span><span class=\"kw2\">file</span> normalize <span class=\"sy0\">$</span>::<span class=\"me1\">argv0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">%</span> <span class=\"nu0\">30000</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span> trap <span class=\"br0\">{</span>POSIX EADDRINUSE<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Generate a nice error message</span><br/>    <span class=\"kw2\">puts</span> stderr <span class=\"st0\">\"Application $::argv0 already running?\"</span><br/>    <span class=\"kw1\">exit</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TXR", "loc": 25, "block": "<pre class=\"text highlighted_source\">;;; Define some typedefs for clear correspondence with Win32<br/>(typedef HANDLE cptr)<br/>(typedef LPSECURITY_ATTRIBUTES cptr)<br/>(typedef WINERR (enum WINERR ERROR_SUCCESS<br/>                             (ERROR_ALREADY_EXISTS 183))) <br/>(typedef BOOL (enum BOOL FALSE TRUE))<br/>(typedef LPCWSTR wstr)<br/>\u00a0<br/>;;; More familiar spelling for null pointer.<br/>(defvarl NULL cptr-null)<br/>\u00a0<br/>;;; Define access to foreign functions.<br/>(with-dyn-lib \"kernel32.dll\"<br/>  (deffi CreateMutex \"CreateMutexW\" HANDLE (LPSECURITY_ATTRIBUTES BOOL LPCWSTR))<br/>  (deffi CloseHandle \"CloseHandle\" BOOL (HANDLE))<br/>  (deffi GetLastError \"GetLastError\" WINERR ()))<br/>\u00a0<br/>;;; Now, the single-instance program:<br/>(defvar m (CreateMutex NULL 'TRUE \"ApplicationName\"))<br/>\u00a0<br/>(unless (eq (GetLastError) 'ERROR_ALREADY_EXISTS)<br/> \u00a0;; mutual exclusion here<br/>  )<br/>\u00a0<br/>(CloseHandle m)</pre>"}, {"lang": "UNIX Shell", "loc": 38, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># (c) Copyright 2005 Mark Hobley<br/>#<br/># This is free software. This file can be redistributed or modified<br/># under the terms of version 1.2 of the GNU Free Documentation Licence<br/># as published by the Free Software Foundation.<br/>#<br/>\u00a0<br/> singleinstance ()<br/> {<br/>   if [ -d $SRUNDIR ]\u00a0; then<br/>     if [ -w $SRUNDIR ]\u00a0; then<br/>       if [ -d $SRUNDIR/$APPNAME ]\u00a0; then<br/>         echo \"Process Already Running\" &gt;&amp; 2<br/>         return 221<br/>       else<br/>         mkdir $SRUNDIR/$APPNAME<br/>         if [ \"$?\" -ne 0 ]\u00a0; then<br/>           if [ -d $SRUNDIR/$APPNAME ]\u00a0; then<br/>             echo \"Process Already Running\" &gt;&amp; 2<br/>             return 221<br/>           else<br/>             echo \"Unexpected Error\" &gt;&amp; 2<br/>             return 239<br/>           fi<br/>         fi<br/>         return 0\u00a0; # This is a unique instance<br/>       fi<br/>     else<br/>       echo \"Permission Denied\" &gt;&amp; 2<br/>       return 210<br/>     fi<br/>   else<br/>     echo \"Missing Directory\" &gt;&amp; 2<br/>     return 199<br/>   fi<br/> }<br/>\u00a0</pre>"}, {"lang": "Visual Basic", "loc": 2, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw4\">Dim</span> onlyInstance <span class=\"kw4\">as</span> <span class=\"kw1\">Boolean</span><br/>onlyInstance = <span class=\"kw3\">not</span> App.PrevInstance</pre>"}]}