{"task": "Sum_to_100", "blocks": [{"lang": "Ada", "loc": 12, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">package</span> Sum_To <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">generic</span><br/>      <span class=\"kw3\">with</span> <span class=\"kw3\">procedure</span> Callback<span class=\"br0\">(</span>Str: String; Int: Integer<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">procedure</span> Eval;<br/>\u00a0<br/>   <span class=\"kw3\">generic</span><br/>      Number: Integer;<br/>      <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> Print_If<span class=\"br0\">(</span>Sum, Number: Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean; <br/>   <span class=\"kw3\">procedure</span> Print<span class=\"br0\">(</span>S: String; Sum: Integer<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">end</span> Sum_To;</pre>"}, {"lang": "ALGOL 68", "loc": 131, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw2\">BEGIN</span><br/>    <span class=\"coMULTI\"># find the numbers the string 123456789 ( with \"+/-\" optionally inserted  #</span><br/>    <span class=\"coMULTI\"># before each digit ) can generate                                        #</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># experimentation shows that the largest hundred numbers that can be      #</span><br/>    <span class=\"coMULTI\"># generated are are greater than or equal to 56795                        #</span><br/>    <span class=\"coMULTI\"># as we can't declare an array with bounds -123456789\u00a0: 123456789 in      #</span><br/>    <span class=\"coMULTI\"># Algol 68G, we use -60000\u00a0: 60000 and keep counts for the top hundred    #</span><br/>\u00a0<br/>    <span class=\"kw3\">INT</span> max number <span class=\"sy1\">=</span> 60 000<span class=\"sy1\">;</span><br/>    <span class=\"br0\">[</span> <span class=\"sy1\">-</span> max number <span class=\"sy1\">:</span> max number <span class=\"br0\">]</span><span class=\"kw3\">STRING</span> solutions<span class=\"sy1\">;</span><br/>    <span class=\"br0\">[</span> <span class=\"sy1\">-</span> max number <span class=\"sy1\">:</span> max number <span class=\"br0\">]</span><span class=\"kw3\">INT</span>    count<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> solutions <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> solutions <span class=\"kw2\">DO</span> solutions<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">;</span> count<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 0 <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># calculate the numbers ( up to max number ) we can generate and the strings leading to them  #</span><br/>    <span class=\"coMULTI\"># also determine the largest numbers we can generate #</span><br/>    <span class=\"br0\">[</span> 100 <span class=\"br0\">]</span><span class=\"kw3\">INT</span> largest<span class=\"sy1\">;</span><br/>    <span class=\"br0\">[</span> 100 <span class=\"br0\">]</span><span class=\"kw3\">INT</span> largest count<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> impossible number <span class=\"sy1\">=</span> <span class=\"sy1\">-</span> 999 999 999<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> largest <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> largest <span class=\"kw2\">DO</span><br/>        largest      <span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> impossible number<span class=\"sy1\">;</span><br/>        largest count<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 0<br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> 18 <span class=\"br0\">]</span><span class=\"kw3\">CHAR</span> sum string <span class=\"sy1\">:=</span> <span class=\"st0\">\".1.2.3.4.5.6.7.8.9\"</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">CHAR</span> sign char <span class=\"sy1\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">CHAR</span><span class=\"br0\">(</span> <span class=\"st0\">\"-\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"+\"</span> <span class=\"br0\">)</span><span class=\"br0\">[</span> <span class=\"kw7\">AT</span> <span class=\"sy1\">-</span>1 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># we don't distinguish between strings starting \"+1\" and starting \" 1\" #</span><br/>    <span class=\"kw2\">FOR</span> s1 <span class=\"kw2\">FROM</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> 0 <span class=\"kw2\">DO</span><br/>        sum string<span class=\"br0\">[</span>  1 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> sign char<span class=\"br0\">[</span> s1 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> s2 <span class=\"kw2\">FROM</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> 1 <span class=\"kw2\">DO</span><br/>            sum string<span class=\"br0\">[</span>  3 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> sign char<span class=\"br0\">[</span> s2 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>            <span class=\"kw2\">FOR</span> s3 <span class=\"kw2\">FROM</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> 1 <span class=\"kw2\">DO</span><br/>                sum string<span class=\"br0\">[</span>  5 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> sign char<span class=\"br0\">[</span> s3 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                <span class=\"kw2\">FOR</span> s4 <span class=\"kw2\">FROM</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> 1 <span class=\"kw2\">DO</span><br/>                    sum string<span class=\"br0\">[</span>  7 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> sign char<span class=\"br0\">[</span> s4 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                    <span class=\"kw2\">FOR</span> s5 <span class=\"kw2\">FROM</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> 1 <span class=\"kw2\">DO</span><br/>                        sum string<span class=\"br0\">[</span>  9 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> sign char<span class=\"br0\">[</span> s5 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                        <span class=\"kw2\">FOR</span> s6 <span class=\"kw2\">FROM</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> 1 <span class=\"kw2\">DO</span><br/>                            sum string<span class=\"br0\">[</span> 11 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> sign char<span class=\"br0\">[</span> s6 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                            <span class=\"kw2\">FOR</span> s7 <span class=\"kw2\">FROM</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> 1 <span class=\"kw2\">DO</span><br/>                                sum string<span class=\"br0\">[</span> 13 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> sign char<span class=\"br0\">[</span> s7 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                                <span class=\"kw2\">FOR</span> s8 <span class=\"kw2\">FROM</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> 1 <span class=\"kw2\">DO</span><br/>                                    sum string<span class=\"br0\">[</span> 15 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> sign char<span class=\"br0\">[</span> s8 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                                    <span class=\"kw2\">FOR</span> s9 <span class=\"kw2\">FROM</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> 1 <span class=\"kw2\">DO</span><br/>                                        sum string<span class=\"br0\">[</span> 17 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> sign char<span class=\"br0\">[</span> s9 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                                        <span class=\"kw3\">INT</span> number <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>                                        <span class=\"kw3\">INT</span> part   <span class=\"sy1\">:=</span> <span class=\"kw2\">IF</span> s1 <span class=\"sy1\">&lt;</span> 0 <span class=\"kw2\">THEN</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">ELSE</span> 1 <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                                        <span class=\"kw2\">IF</span> s2 <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span> part <span class=\"sy1\">*:=</span> 10 <span class=\"sy1\">+:=</span> 2 <span class=\"sy1\">*</span> <span class=\"kw8\">SIGN</span> part <span class=\"kw2\">ELSE</span> number <span class=\"sy1\">+:=</span> part<span class=\"sy1\">;</span> part <span class=\"sy1\">:=</span> 2 <span class=\"sy1\">*</span> s2 <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                                        <span class=\"kw2\">IF</span> s3 <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span> part <span class=\"sy1\">*:=</span> 10 <span class=\"sy1\">+:=</span> 3 <span class=\"sy1\">*</span> <span class=\"kw8\">SIGN</span> part <span class=\"kw2\">ELSE</span> number <span class=\"sy1\">+:=</span> part<span class=\"sy1\">;</span> part <span class=\"sy1\">:=</span> 3 <span class=\"sy1\">*</span> s3 <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                                        <span class=\"kw2\">IF</span> s4 <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span> part <span class=\"sy1\">*:=</span> 10 <span class=\"sy1\">+:=</span> 4 <span class=\"sy1\">*</span> <span class=\"kw8\">SIGN</span> part <span class=\"kw2\">ELSE</span> number <span class=\"sy1\">+:=</span> part<span class=\"sy1\">;</span> part <span class=\"sy1\">:=</span> 4 <span class=\"sy1\">*</span> s4 <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                                        <span class=\"kw2\">IF</span> s5 <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span> part <span class=\"sy1\">*:=</span> 10 <span class=\"sy1\">+:=</span> 5 <span class=\"sy1\">*</span> <span class=\"kw8\">SIGN</span> part <span class=\"kw2\">ELSE</span> number <span class=\"sy1\">+:=</span> part<span class=\"sy1\">;</span> part <span class=\"sy1\">:=</span> 5 <span class=\"sy1\">*</span> s5 <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                                        <span class=\"kw2\">IF</span> s6 <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span> part <span class=\"sy1\">*:=</span> 10 <span class=\"sy1\">+:=</span> 6 <span class=\"sy1\">*</span> <span class=\"kw8\">SIGN</span> part <span class=\"kw2\">ELSE</span> number <span class=\"sy1\">+:=</span> part<span class=\"sy1\">;</span> part <span class=\"sy1\">:=</span> 6 <span class=\"sy1\">*</span> s6 <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                                        <span class=\"kw2\">IF</span> s7 <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span> part <span class=\"sy1\">*:=</span> 10 <span class=\"sy1\">+:=</span> 7 <span class=\"sy1\">*</span> <span class=\"kw8\">SIGN</span> part <span class=\"kw2\">ELSE</span> number <span class=\"sy1\">+:=</span> part<span class=\"sy1\">;</span> part <span class=\"sy1\">:=</span> 7 <span class=\"sy1\">*</span> s7 <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                                        <span class=\"kw2\">IF</span> s8 <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span> part <span class=\"sy1\">*:=</span> 10 <span class=\"sy1\">+:=</span> 8 <span class=\"sy1\">*</span> <span class=\"kw8\">SIGN</span> part <span class=\"kw2\">ELSE</span> number <span class=\"sy1\">+:=</span> part<span class=\"sy1\">;</span> part <span class=\"sy1\">:=</span> 8 <span class=\"sy1\">*</span> s8 <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                                        <span class=\"kw2\">IF</span> s9 <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span> part <span class=\"sy1\">*:=</span> 10 <span class=\"sy1\">+:=</span> 9 <span class=\"sy1\">*</span> <span class=\"kw8\">SIGN</span> part <span class=\"kw2\">ELSE</span> number <span class=\"sy1\">+:=</span> part<span class=\"sy1\">;</span> part <span class=\"sy1\">:=</span> 9 <span class=\"sy1\">*</span> s9 <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                                        number <span class=\"sy1\">+:=</span> part<span class=\"sy1\">;</span><br/>                                        <span class=\"kw2\">IF</span>  number <span class=\"sy1\">&gt;=</span> <span class=\"kw8\">LWB</span> solutions<br/>                                        <span class=\"kw16\">AND</span> number <span class=\"sy1\">&lt;=</span> <span class=\"kw8\">UPB</span> solutions<br/>                                        <span class=\"kw2\">THEN</span><br/>                                            solutions<span class=\"br0\">[</span> number <span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> <span class=\"st0\">\";\"</span> <span class=\"sy1\">+</span> sum string<span class=\"sy1\">;</span><br/>                                            count    <span class=\"br0\">[</span> number <span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> 1<br/>                                        <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                                        <span class=\"kw3\">BOOL</span> inserted <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>                                        <span class=\"kw2\">FOR</span> l pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> largest <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> largest <span class=\"kw2\">WHILE</span> <span class=\"kw8\">NOT</span> inserted <span class=\"kw2\">DO</span><br/>                                            <span class=\"kw2\">IF</span> number <span class=\"sy1\">&gt;</span> largest<span class=\"br0\">[</span> l pos <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span><br/>                                                <span class=\"coMULTI\"># found a new larger number #</span><br/>                                                <span class=\"kw2\">FOR</span> m pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">UPB</span> largest <span class=\"kw2\">BY</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> l pos <span class=\"sy1\">+</span> 1 <span class=\"kw2\">DO</span><br/>                                                    largest      <span class=\"br0\">[</span> m pos <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> largest      <span class=\"br0\">[</span> m pos <span class=\"sy1\">-</span> 1 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                                                    largest count<span class=\"br0\">[</span> m pos <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> largest count<span class=\"br0\">[</span> m pos <span class=\"sy1\">-</span> 1 <span class=\"br0\">]</span><br/>                                                <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>                                                largest      <span class=\"br0\">[</span> l pos <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> number<span class=\"sy1\">;</span><br/>                                                largest count<span class=\"br0\">[</span> l pos <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>                                                inserted <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><br/>                                            <span class=\"kw2\">ELIF</span> number <span class=\"sy1\">=</span> largest<span class=\"br0\">[</span> l pos <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span><br/>                                                <span class=\"coMULTI\"># have another way of generating this number #</span><br/>                                                largest count<span class=\"br0\">[</span> l pos <span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>                                                inserted <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><br/>                                            <span class=\"kw2\">FI</span><br/>                                        <span class=\"kw2\">OD</span><br/>                                    <span class=\"kw2\">OD</span><br/>                                <span class=\"kw2\">OD</span><br/>                            <span class=\"kw2\">OD</span><br/>                        <span class=\"kw2\">OD</span><br/>                    <span class=\"kw2\">OD</span><br/>                <span class=\"kw2\">OD</span><br/>            <span class=\"kw2\">OD</span><br/>        <span class=\"kw2\">OD</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># show the solutions for 100 #</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"100 has \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> count<span class=\"br0\">[</span> 100 <span class=\"br0\">]</span><span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" solutions:\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">STRING</span> s <span class=\"sy1\">:=</span> solutions<span class=\"br0\">[</span> 100 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> s pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> s <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> s <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">IF</span>   s<span class=\"br0\">[</span> s pos <span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"st0\">\";\"</span> <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span><span class=\"sy1\">,</span> <span class=\"st0\">\"        \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw2\">ELIF</span> s<span class=\"br0\">[</span> s pos <span class=\"br0\">]</span> <span class=\"sy1\">/=</span> <span class=\"st0\">\" \"</span> <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> s<span class=\"br0\">[</span> s pos <span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># find the number with the most solutions #</span><br/>    <span class=\"kw3\">INT</span> max solutions <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> number with max <span class=\"sy1\">:=</span> <span class=\"kw8\">LWB</span> count <span class=\"sy1\">-</span> 1<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> n <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">TO</span> max number <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">IF</span> count<span class=\"br0\">[</span> n <span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> max solutions <span class=\"kw2\">THEN</span><br/>            max solutions <span class=\"sy1\">:=</span> count<span class=\"br0\">[</span> n <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>            number with max <span class=\"sy1\">:=</span> n<br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> n <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> largest count <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> largest count <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">IF</span> largest count<span class=\"br0\">[</span> n <span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> max solutions <span class=\"kw2\">THEN</span><br/>            max solutions <span class=\"sy1\">:=</span> largest count<span class=\"br0\">[</span> n <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>            number with max <span class=\"sy1\">:=</span> largest<span class=\"br0\">[</span> n <span class=\"br0\">]</span><br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> number with max<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" has the maximum number of solutions: \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> max solutions<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># find the smallest positive number that has no solutions #</span><br/>    <span class=\"kw3\">BOOL</span> have solutions <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> n <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">TO</span> max number<br/>    <span class=\"kw2\">WHILE</span> <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> <span class=\"br0\">(</span> have solutions <span class=\"sy1\">:=</span> count<span class=\"br0\">[</span> n <span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> 0 <span class=\"br0\">)</span><br/>          <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> n<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" is the lowest positive number with no solutions\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>          <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>          have solutions<br/>    <span class=\"kw2\">DO</span> <span class=\"kw7\">SKIP</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> have solutions<br/>    <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"All positive numbers up to \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> max number<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" have solutions\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"The 10 largest numbers that can be generated are:\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> t pos <span class=\"kw2\">FROM</span> 1 <span class=\"kw2\">TO</span> 10 <span class=\"kw2\">DO</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> largest<span class=\"br0\">[</span> t pos <span class=\"br0\">]</span><span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">END</span></pre>"}, {"lang": "AppleScript", "loc": 314, "block": "<pre class=\"applescript highlighted_source\">use framework <span class=\"st0\">\"Foundation\"</span> <span class=\"co1\">-- for basic NSArray sort</span><br/>\u00a0<br/><span class=\"kw3\">property</span> pSigns\u00a0: <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"co1\">--&gt; ( + | unsigned | - )</span><br/><span class=\"kw3\">property</span> plst100\u00a0: <span class=\"br0\">{</span><span class=\"st0\">\"Sums to 100:\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">}</span><br/><span class=\"kw3\">property</span> plstSums\u00a0: <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw3\">property</span> plstSumsSorted\u00a0: <span class=\"kw1\">missing value</span><br/><span class=\"kw3\">property</span> plstSumGroups\u00a0: <span class=\"kw1\">missing value</span><br/>\u00a0<br/><span class=\"co1\">-- data Sign\u00a0:: [ 1 | 0 | -1 ] = ( Plus | Unsigned | Minus )</span><br/><span class=\"co1\">-- asSum\u00a0:: [Sign] -&gt; Int</span><br/><span class=\"kw3\">on</span> asSum<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, sign, i<span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> sign \u2260 <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>                <span class=\"br0\">{</span>digits:<span class=\"br0\">{</span><span class=\"br0\">}</span>, n:<span class=\"br0\">(</span>n <span class=\"kw3\">of</span> a<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>sign <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">&amp;</span> digits <span class=\"kw3\">of</span> a<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span> <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>            <span class=\"kw3\">else</span><br/>                <span class=\"br0\">{</span>digits:<span class=\"br0\">{</span>i<span class=\"br0\">}</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>digits <span class=\"kw3\">of</span> a<span class=\"br0\">)</span>, n:n <span class=\"kw3\">of</span> a<span class=\"br0\">}</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">set</span> rec <span class=\"kw3\">to</span> foldr<span class=\"br0\">(</span><span class=\"kw1\">result</span>, <span class=\"br0\">{</span>digits:<span class=\"br0\">{</span><span class=\"br0\">}</span>, n:<span class=\"nu0\">0</span><span class=\"br0\">}</span>, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> ds <span class=\"kw3\">to</span> digits <span class=\"kw3\">of</span> rec<br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> ds &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        <span class=\"br0\">(</span>n <span class=\"kw3\">of</span> rec<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>ds <span class=\"kw2\">as</span> <span class=\"kw1\">string</span> <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">else</span><br/>        n <span class=\"kw3\">of</span> rec<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> asSum<br/>\u00a0<br/><span class=\"co1\">-- data Sign\u00a0:: [ 1 | 0 | -1 ] = ( Plus | Unisigned | Minus )</span><br/><span class=\"co1\">-- asString\u00a0:: [Sign] -&gt; String</span><br/><span class=\"kw3\">on</span> asString<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, sign, i<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> i <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><br/>            <span class=\"kw3\">if</span> sign \u2260 <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>                <span class=\"kw3\">if</span> sign &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>                    a <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" +\"</span> <span class=\"sy0\">&amp;</span> d<br/>                <span class=\"kw3\">else</span><br/>                    a <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" -\"</span> <span class=\"sy0\">&amp;</span> d<br/>                <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>            <span class=\"kw3\">else</span><br/>                a <span class=\"sy0\">&amp;</span> d<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldl<span class=\"br0\">(</span><span class=\"kw1\">result</span>, <span class=\"st0\">\"\"</span>, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> asString<br/>\u00a0<br/><span class=\"co1\">-- sumsTo100\u00a0:: () -&gt; String</span><br/><span class=\"kw3\">on</span> sumsTo100<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">-- From first permutation without leading '+' (3 ^ 8) to end of universe (3 ^ 9)</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">6561</span> <span class=\"kw3\">to</span> <span class=\"nu0\">19683</span><br/>        <span class=\"kw3\">set</span> xs <span class=\"kw3\">to</span> nthPermutationWithRepn<span class=\"br0\">(</span>pSigns, <span class=\"nu0\">9</span>, i<span class=\"br0\">)</span><br/>        <span class=\"kw3\">if</span> asSum<span class=\"br0\">(</span>xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">100</span> <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> plst100 <span class=\"kw3\">to</span> asString<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    intercalate<span class=\"br0\">(</span>linefeed, plst100<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> sumsTo100<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- mostCommonSum\u00a0:: () -&gt; String</span><br/><span class=\"kw3\">on</span> mostCommonSum<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">-- From first permutation without leading '+' (3 ^ 8) to end of universe (3 ^ 9)</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">6561</span> <span class=\"kw3\">to</span> <span class=\"nu0\">19683</span><br/>        <span class=\"kw3\">set</span> intSum <span class=\"kw3\">to</span> asSum<span class=\"br0\">(</span>nthPermutationWithRepn<span class=\"br0\">(</span>pSigns, <span class=\"nu0\">9</span>, i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">if</span> intSum \u2265 <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> plstSums <span class=\"kw3\">to</span> intSum<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>\u00a0<br/>    <span class=\"kw3\">set</span> plstSumsSorted <span class=\"kw3\">to</span> sort<span class=\"br0\">(</span>plstSums<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> plstSumGroups <span class=\"kw3\">to</span> group<span class=\"br0\">(</span>plstSumsSorted<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> groupLength<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> intA <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> a<br/>            <span class=\"kw3\">set</span> intB <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> b<br/>            <span class=\"kw3\">if</span> intA <span class=\"sy0\">&lt;</span> intB <span class=\"kw3\">then</span><br/>                <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> intA &gt; intB <span class=\"kw3\">then</span><br/>                <span class=\"nu0\">1</span><br/>            <span class=\"kw3\">else</span><br/>                <span class=\"nu0\">0</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">set</span> lstMaxSum <span class=\"kw3\">to</span> maximumBy<span class=\"br0\">(</span>groupLength, plstSumGroups<span class=\"br0\">)</span><br/>    intercalate<span class=\"br0\">(</span>linefeed, \u00ac<br/>        <span class=\"br0\">{</span><span class=\"st0\">\"Most common sum: \"</span> <span class=\"sy0\">&amp;</span> <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> lstMaxSum, \u00ac<br/>            <span class=\"st0\">\"Number of instances: \"</span> <span class=\"sy0\">&amp;</span> length <span class=\"kw3\">of</span> lstMaxSum<span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> mostCommonSum<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"kw3\">return</span> sumsTo100<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">-- Also returns a value, but slow:</span><br/>    <span class=\"co1\">-- mostCommonSum()</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- nthPermutationWithRepn\u00a0:: [a] -&gt; Int -&gt; Int -&gt; [a]</span><br/><span class=\"kw3\">on</span> nthPermutationWithRepn<span class=\"br0\">(</span>xs, groupSize, iIndex<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> intBase <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">set</span> intSetSize <span class=\"kw3\">to</span> intBase <span class=\"sy0\">^</span> groupSize<br/>\u00a0<br/>    <span class=\"kw3\">if</span> intBase <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw2\">or</span> iIndex &gt; intSetSize <span class=\"kw3\">then</span><br/>        <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> baseElems <span class=\"kw3\">to</span> inBaseElements<span class=\"br0\">(</span>xs, iIndex<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> intZeros <span class=\"kw3\">to</span> groupSize <span class=\"sy0\">-</span> <span class=\"br0\">(</span>length <span class=\"kw3\">of</span> baseElems<span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw3\">if</span> intZeros &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>            replicate<span class=\"br0\">(</span>intZeros, <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> baseElems<br/>        <span class=\"kw3\">else</span><br/>            baseElems<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> nthPermutationWithRepn<br/>\u00a0<br/><span class=\"co1\">-- inBaseElements\u00a0:: [a] -&gt; Int -&gt; [String]</span><br/><span class=\"kw3\">on</span> inBaseElements<span class=\"br0\">(</span>xs, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> intBase <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>\u00a0<br/>    <span class=\"kw3\">script</span> nextDigit<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>residue<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> <span class=\"br0\">{</span>divided, remainder<span class=\"br0\">}</span> <span class=\"kw3\">to</span> quotRem<span class=\"br0\">(</span>residue, intBase<span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"br0\">{</span>valid:divided &gt; <span class=\"nu0\">0</span>, value:<span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"br0\">(</span>remainder <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span>, <span class=\"kw1\">new</span>:divided<span class=\"br0\">}</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    reverse <span class=\"kw3\">of</span> unfoldr<span class=\"br0\">(</span>nextDigit, n<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> inBaseElements<br/>\u00a0<br/><span class=\"co1\">-- sort\u00a0:: [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> sort<span class=\"br0\">(</span>lst<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>current <span class=\"kw1\">application</span><span class=\"co2\">'</span>s NSArray<span class=\"co2\">'</span>s arrayWithArray:lst<span class=\"br0\">)</span>'s \u00ac<br/>        sortedArrayUsingSelector:<span class=\"st0\">\"compare:\"</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">list</span><br/><span class=\"kw3\">end</span> sort<br/>\u00a0<br/><span class=\"co1\">-- maximumBy\u00a0:: (a -&gt; a -&gt; Ordering) -&gt; [a] -&gt; a </span><br/><span class=\"kw3\">on</span> maximumBy<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> cmp <span class=\"kw3\">to</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> max<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> a <span class=\"kw3\">is</span> <span class=\"kw1\">missing value</span> <span class=\"kw2\">or</span> cmp<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>                b<br/>            <span class=\"kw3\">else</span><br/>                a<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldl<span class=\"br0\">(</span>max, <span class=\"kw1\">missing value</span>, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> maximumBy<br/>\u00a0<br/><span class=\"co1\">-- group\u00a0:: Eq a =&gt; [a] -&gt; [[a]]</span><br/><span class=\"kw3\">on</span> group<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> eq<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">=</span> b<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    groupBy<span class=\"br0\">(</span>eq, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> group<br/>\u00a0<br/><span class=\"co1\">-- groupBy\u00a0:: (a -&gt; a -&gt; Bool) -&gt; [a] -&gt; [[a]]</span><br/><span class=\"kw3\">on</span> groupBy<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> mf <span class=\"kw3\">to</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> enGroup<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, x<span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> <span class=\"br0\">(</span>active <span class=\"kw3\">of</span> a<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>                <span class=\"kw3\">set</span> h <span class=\"kw3\">to</span> <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> active <span class=\"kw3\">of</span> a<br/>            <span class=\"kw3\">else</span><br/>                <span class=\"kw3\">set</span> h <span class=\"kw3\">to</span> <span class=\"kw1\">missing value</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/>            <span class=\"kw3\">if</span> h <span class=\"kw3\">is</span> <span class=\"kw2\">not</span> <span class=\"kw1\">missing value</span> <span class=\"kw2\">and</span> mf<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>h, x<span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>                <span class=\"br0\">{</span>active:<span class=\"br0\">(</span>active <span class=\"kw3\">of</span> a<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> x, sofar:sofar <span class=\"kw3\">of</span> a<span class=\"br0\">}</span><br/>            <span class=\"kw3\">else</span><br/>                <span class=\"br0\">{</span>active:<span class=\"br0\">{</span>x<span class=\"br0\">}</span>, sofar:<span class=\"br0\">(</span>sofar <span class=\"kw3\">of</span> a<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">{</span>active <span class=\"kw3\">of</span> a<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> dct <span class=\"kw3\">to</span> foldl<span class=\"br0\">(</span>enGroup, <span class=\"br0\">{</span>active:<span class=\"br0\">{</span><span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<span class=\"br0\">}</span>, sofar:<span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span>, tail<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> <span class=\"br0\">(</span>active <span class=\"kw3\">of</span> dct<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>            sofar <span class=\"kw3\">of</span> dct <span class=\"sy0\">&amp;</span> <span class=\"br0\">{</span>active <span class=\"kw3\">of</span> dct<span class=\"br0\">}</span><br/>        <span class=\"kw3\">else</span><br/>            sofar <span class=\"kw3\">of</span> dct<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> groupBy<br/>\u00a0<br/><span class=\"co1\">-- tail\u00a0:: [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> tail<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw1\">items</span> <span class=\"nu0\">2</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> tail<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- intercalate\u00a0:: Text -&gt; [Text] -&gt; Text</span><br/><span class=\"kw3\">on</span> intercalate<span class=\"br0\">(</span>strText, lstText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strText<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> strJoined <span class=\"kw3\">to</span> lstText <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> strJoined<br/><span class=\"kw3\">end</span> intercalate<br/>\u00a0<br/><span class=\"co1\">--  quotRem\u00a0:: Integral a =&gt; a -&gt; a -&gt; (a, a)</span><br/><span class=\"kw3\">on</span> quotRem<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>m <span class=\"kw2\">div</span> n, m <span class=\"kw2\">mod</span> n<span class=\"br0\">}</span><br/><span class=\"kw3\">end</span> quotRem<br/>\u00a0<br/><span class=\"co1\">-- replicate\u00a0:: Int -&gt; a -&gt; [a]</span><br/><span class=\"kw3\">on</span> replicate<span class=\"br0\">(</span>n, a<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> out <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> out<br/>    <span class=\"kw3\">set</span> dbl <span class=\"kw3\">to</span> <span class=\"br0\">{</span>a<span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>n &gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">if</span> <span class=\"br0\">(</span>n <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> out <span class=\"kw3\">to</span> out <span class=\"sy0\">&amp;</span> dbl<br/>        <span class=\"kw3\">set</span> n <span class=\"kw3\">to</span> <span class=\"br0\">(</span>n <span class=\"kw2\">div</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> dbl <span class=\"kw3\">to</span> <span class=\"br0\">(</span>dbl <span class=\"sy0\">&amp;</span> dbl<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> out <span class=\"sy0\">&amp;</span> dbl<br/><span class=\"kw3\">end</span> replicate<br/>\u00a0<br/><span class=\"co1\">-- foldr\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldr<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> lng <span class=\"kw3\">to</span> <span class=\"nu0\">1</span> <span class=\"kw1\">by</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldr<br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- unfoldr\u00a0:: (b -&gt; Maybe (a, b)) -&gt; b -&gt; [a]</span><br/><span class=\"kw3\">on</span> unfoldr<span class=\"br0\">(</span>f, v<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> mf <span class=\"kw3\">to</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> recM <span class=\"kw3\">to</span> mf<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>valid <span class=\"kw3\">of</span> recM<span class=\"br0\">)</span> <span class=\"kw3\">is</span> <span class=\"kw1\">true</span><br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> value <span class=\"kw3\">of</span> recM<br/>        <span class=\"kw3\">set</span> recM <span class=\"kw3\">to</span> mf<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw3\">of</span> recM<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    lst <span class=\"sy0\">&amp;</span> value <span class=\"kw3\">of</span> recM<br/><span class=\"kw3\">end</span> unfoldr<br/>\u00a0<br/><span class=\"co1\">-- until\u00a0:: (a -&gt; Bool) -&gt; (a -&gt; a) -&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> |<span class=\"kw3\">until</span>|<span class=\"br0\">(</span>p, f, x<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> mp <span class=\"kw3\">to</span> mReturn<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> x<br/>\u00a0<br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">until</span> mp<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/>    <span class=\"kw3\">return</span> v<br/><span class=\"kw3\">end</span> |<span class=\"kw3\">until</span>|<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "AutoHotkey", "loc": 29, "block": "<pre class=\"autohotkey highlighted_source\">global Matches<span class=\"sy0\">:=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><br/>AllPossibilities100<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>for eq<span class=\"sy0\">,</span> val in matches<br/>\tres <span class=\"sy0\">.=</span> eq <span class=\"st0\">\"`n\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% res<br/><span class=\"kw1\">return</span><br/>\u00a0<br/>AllPossibilities100<span class=\"br0\">(</span>n<span class=\"sy0\">:=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>  S<span class=\"sy0\">:=</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>\t\t\t\t\t\t\t<span class=\"co1\">; First call</span><br/>\t\tAllPossibilities100<span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span>\t\t\t\t<span class=\"co1\">; Recurse</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tAllPossibilities100<span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> \tS <span class=\"st0\">\",-\"</span> n<span class=\"br0\">)</span>\t\t<span class=\"co1\">; Recurse. Concatenate S, \",-\" and n</span><br/>\t\tAllPossibilities100<span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> \tS <span class=\"st0\">\",+\"</span> n<span class=\"br0\">)</span>\t\t<span class=\"co1\">; Recurse. Concatenate S, \",+\" and n </span><br/>\t\tAllPossibilities100<span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> \tS n<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">; Recurse. Concatenate S and n</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> \t<span class=\"br0\">{</span>\t\t\t\t\t\t\t<span class=\"co1\">; 10th level recursion</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> S<span class=\"sy0\">,</span> CSV\t\t\t\t\t<span class=\"co1\">; Total the values of S and check if equal to 100</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tSubS <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>\t\t\t<span class=\"co1\">; The number portion of A_LoopField</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\tTotal <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>\t\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"+\"</span><span class=\"br0\">)</span>\t<span class=\"co1\">; If the first character is + add</span><br/>\t\t\t\tTotal <span class=\"sy0\">+=</span> SubS<br/>\t\t\t<span class=\"kw1\">else</span>\t\t\t\t\t\t<span class=\"co1\">; else subtract</span><br/>\t\t\t\tTotal <span class=\"sy0\">-=</span> SubS<br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Total <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>\t\t\tmatches<span class=\"br0\">[</span>LTrim<span class=\"br0\">(</span>LTrim<span class=\"br0\">(</span>StrReplace<span class=\"br0\">(</span>S<span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"+\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> true <span class=\"co1\">; remove leading 0's, +'s and all commas</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 107, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\"># </span><br/><span class=\"co1\"># RossetaCode: Sum to 100, AWK.</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># Find solutions to the \"sum to one hundred\" puzzle.</span><br/>\u00a0<br/><span class=\"kw6\">function</span> evaluate<span class=\"br0\">(</span>code<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    value  = <span class=\"nu0\">0</span><br/>    number = <span class=\"nu0\">0</span><br/>    power  = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span> k = <span class=\"nu0\">9</span>; k <span class=\"sy2\">&gt;=</span> <span class=\"nu0\">1</span>; k<span class=\"sy3\">--</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        number = power<span class=\"sy3\">*</span>k <span class=\"sy3\">+</span> number<br/>        op = code <span class=\"sy3\">%</span> <span class=\"nu0\">3</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> op <span class=\"sy2\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            value = value <span class=\"sy3\">+</span> number<br/>            number = <span class=\"nu0\">0</span><br/>            power = <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>op <span class=\"sy2\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            value = value <span class=\"sy3\">-</span> number<br/>            number = <span class=\"nu0\">0</span><br/>            power = <span class=\"nu0\">1</span> <br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> op <span class=\"sy2\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            power = power <span class=\"sy3\">*</span> <span class=\"nu0\">10</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">}</span><br/>        code = <span class=\"kw4\">int</span><span class=\"br0\">(</span>code <span class=\"sy3\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span> value;    <br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> show<span class=\"br0\">(</span>code<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    s = <span class=\"st0\">\"\"</span><br/>    a = <span class=\"nu0\">19683</span><br/>    b = <span class=\"nu0\">6561</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span> k = <span class=\"nu0\">1</span>; k <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">9</span>; k<span class=\"sy3\">++</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>   <br/>        op = <span class=\"kw4\">int</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>code <span class=\"sy3\">%</span> a<span class=\"br0\">)</span> <span class=\"sy3\">/</span> b <span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> op <span class=\"sy2\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">&amp;&amp;</span> k <span class=\"sy2\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <br/>            s = s <span class=\"st0\">\"+\"</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> op <span class=\"sy2\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>            s = s <span class=\"st0\">\"-\"</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">}</span>      <br/>        a = b<br/>        b = <span class=\"kw4\">int</span><span class=\"br0\">(</span>b <span class=\"sy3\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>        s = s  k<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span> <span class=\"st0\">\"%9d =\u00a0%s<span class=\"es0\">\\n</span>\"</span>, evaluate<span class=\"br0\">(</span>code<span class=\"br0\">)</span>, s;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    nexpr = <span class=\"nu0\">13122</span><br/>\u00a0<br/>    <span class=\"kw5\">print</span><br/>    <span class=\"kw5\">print</span> <span class=\"st0\">\"Show all solutions that sum to 100\"</span><br/>    <span class=\"kw5\">print</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span> i = <span class=\"nu0\">0</span>; i <span class=\"sy2\">&lt;</span> nexpr; i<span class=\"sy3\">++</span> <span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> evaluate<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy2\">==</span> <span class=\"nu0\">100</span> <span class=\"br0\">)</span> show<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;   <br/>\u00a0<br/>    <span class=\"kw5\">print</span><br/>    <span class=\"kw5\">print</span> <span class=\"st0\">\"Show the sum that has the maximum number of solutions\"</span><br/>    <span class=\"kw5\">print</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span> i = <span class=\"nu0\">0</span>; i <span class=\"sy2\">&lt;</span> nexpr; i<span class=\"sy3\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sum = evaluate<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> sum <span class=\"sy2\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>            stat<span class=\"br0\">[</span>sum<span class=\"br0\">]</span><span class=\"sy3\">++</span>;<br/>    <span class=\"br0\">}</span><br/>    best = <span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;  <br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span> sum <span class=\"kw1\">in</span> stat <span class=\"br0\">)</span> <br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> best <span class=\"sy2\">&lt;</span> stat<span class=\"br0\">[</span>sum<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>            best = stat<span class=\"br0\">[</span>sum<span class=\"br0\">]</span> <br/>            bestSum = sum <br/>        <span class=\"br0\">}</span><br/>    delete stat<br/>    <span class=\"kw5\">printf</span> <span class=\"st0\">\"%d has\u00a0%d solutions<span class=\"es0\">\\n</span>\"</span>, bestSum, best<br/>\u00a0<br/>    <span class=\"kw5\">print</span><br/>    <span class=\"kw5\">print</span> <span class=\"st0\">\"Show the lowest positive number that can't be expressed\"</span><br/>    <span class=\"kw5\">print</span>    <br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span> i = <span class=\"nu0\">0</span>; i <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">123456789</span>; i<span class=\"sy3\">++</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span> j = <span class=\"nu0\">0</span>; j <span class=\"sy2\">&lt;</span> nexpr; j<span class=\"sy3\">++</span> <span class=\"br0\">)</span> <br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span> i <span class=\"sy2\">==</span> evaluate<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"br0\">)</span> <br/>                <span class=\"kw1\">break</span>; <br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> i <span class=\"sy2\">!=</span> evaluate<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"br0\">)</span> <br/>            <span class=\"kw1\">break</span>;<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span> <span class=\"st0\">\"%d<span class=\"es0\">\\n</span>\"</span>,i<br/>\u00a0<br/>    <span class=\"kw5\">print</span><br/>    <span class=\"kw5\">print</span> <span class=\"st0\">\"Show the ten highest numbers that can be expressed\"</span><br/>    <span class=\"kw5\">print</span><br/>    limit = <span class=\"nu0\">123456789</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span> i = <span class=\"nu0\">1</span>; i <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">10</span>; i<span class=\"sy3\">++</span> <span class=\"br0\">)</span> <br/>    <span class=\"br0\">{</span><br/>        best = <span class=\"nu0\">0</span>;<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span> j = <span class=\"nu0\">0</span>; j <span class=\"sy2\">&lt;</span> nexpr; j<span class=\"sy3\">++</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            test = evaluate<span class=\"br0\">(</span>j<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span> test <span class=\"sy2\">&lt;</span> limit <span class=\"sy1\">&amp;&amp;</span> test <span class=\"sy2\">&gt;</span> best <span class=\"br0\">)</span> best = test;<br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span> j = <span class=\"nu0\">0</span>; j <span class=\"sy2\">&lt;</span> nexpr; j<span class=\"sy3\">++</span> <span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> evaluate<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy2\">==</span> best <span class=\"br0\">)</span> show<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>        limit = best<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C", "loc": 136, "block": "<pre class=\"c highlighted_source\"><span class=\"coMULTI\">/* <br/> * RossetaCode: Sum to 100, C99, an algorithm using ternary numbers.<br/> *<br/> * Find solutions to the \"sum to one hundred\" puzzle.<br/> */</span><br/>\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt; </span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/> * There are only 13122 (i.e. 2*3**8) different possible expressions,<br/> * thus we can encode them as positive integer numbers from 0 to 13121.<br/> */</span><br/><span class=\"co2\">#define NUMBER_OF_EXPRESSIONS (2 * 3*3*3*3 * 3*3*3*3 )</span><br/><span class=\"kw2\">enum</span> OP <span class=\"br0\">{</span> ADD<span class=\"sy0\">,</span> SUB<span class=\"sy0\">,</span> JOIN <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">int</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>cmp<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">void</span><span class=\"sy0\">*,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">void</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Replacing struct Expression and struct CountSum by a tuple like </span><br/><span class=\"co1\">// struct Pair { int first; int last; } is possible but would make the source</span><br/><span class=\"co1\">// code less readable.</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> Expression<span class=\"br0\">{</span> <br/>    <span class=\"kw4\">int</span> sum<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> code<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span>expressions<span class=\"br0\">[</span>NUMBER_OF_EXPRESSIONS<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> expressionsLength <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> compareExpressionBySum<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">struct</span> Expression<span class=\"sy0\">*</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">struct</span> Expression<span class=\"sy0\">*</span> b<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy0\">-&gt;</span>sum <span class=\"sy0\">-</span> b<span class=\"sy0\">-&gt;</span>sum<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> CountSum<span class=\"br0\">{</span> <br/>    <span class=\"kw4\">int</span> counts<span class=\"sy0\">;</span> <br/>    <span class=\"kw4\">int</span> sum<span class=\"sy0\">;</span> <br/><span class=\"br0\">}</span>countSums<span class=\"br0\">[</span>NUMBER_OF_EXPRESSIONS<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> countSumsLength <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> compareCountSumsByCount<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">struct</span> CountSum<span class=\"sy0\">*</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">struct</span> CountSum<span class=\"sy0\">*</span> b<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy0\">-&gt;</span>counts <span class=\"sy0\">-</span> b<span class=\"sy0\">-&gt;</span>counts<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> evaluate<span class=\"br0\">(</span><span class=\"kw4\">int</span> code<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> value  <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> number <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> power  <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> k<span class=\"sy0\">--</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        number <span class=\"sy0\">=</span> power<span class=\"sy0\">*</span>k <span class=\"sy0\">+</span> number<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">switch</span><span class=\"br0\">(</span> code <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> ADD<span class=\"sy0\">:</span>  value <span class=\"sy0\">=</span> value <span class=\"sy0\">+</span> number<span class=\"sy0\">;</span> number <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> power <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> SUB<span class=\"sy0\">:</span>  value <span class=\"sy0\">=</span> value <span class=\"sy0\">-</span> number<span class=\"sy0\">;</span> number <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> power <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> JOIN<span class=\"sy0\">:</span> power <span class=\"sy0\">=</span> power <span class=\"sy0\">*</span> <span class=\"nu0\">10</span>                <span class=\"sy0\">;</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        code <span class=\"sy0\">/=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> value<span class=\"sy0\">;</span>    <br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"kw4\">int</span> code<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">char</span> s<span class=\"br0\">[</span><span class=\"nu0\">19</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> p <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">19683</span><span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">6561</span><span class=\"sy0\">;</span>        <br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> k<span class=\"sy0\">++</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">switch</span><span class=\"br0\">(</span><span class=\"br0\">(</span>code <span class=\"sy0\">%</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> b<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> ADD<span class=\"sy0\">:</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> k <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">++</span> <span class=\"sy0\">=</span> <span class=\"st0\">'+'</span><span class=\"sy0\">;</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> SUB<span class=\"sy0\">:</span>              <span class=\"sy0\">*</span>p<span class=\"sy0\">++</span> <span class=\"sy0\">=</span> <span class=\"st0\">'-'</span><span class=\"sy0\">;</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        a <span class=\"sy0\">=</span> b<span class=\"sy0\">;</span><br/>        b <span class=\"sy0\">=</span> b <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>        <span class=\"sy0\">*</span>p<span class=\"sy0\">++</span> <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span> <span class=\"sy0\">+</span> k<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"sy0\">*</span>p <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%9d =\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> evaluate<span class=\"br0\">(</span>code<span class=\"br0\">)</span><span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> comment<span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span> string<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>%s<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> string<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> init<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><span class=\"br0\">{</span>   <br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> NUMBER_OF_EXPRESSIONS<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        expressions<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">=</span> evaluate<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        expressions<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">code</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    expressionsLength <span class=\"sy0\">=</span> NUMBER_OF_EXPRESSIONS<span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/qsort.html\"><span class=\"kw3\">qsort</span></a><span class=\"br0\">(</span>expressions<span class=\"sy0\">,</span>expressionsLength<span class=\"sy0\">,</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> Expression<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>cmp<span class=\"br0\">)</span>compareExpressionBySum<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    countSums<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">counts</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    countSums<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">=</span> expressions<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">sum</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> expressionsLength<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> countSums<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">!=</span> expressions<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">sum</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            j<span class=\"sy0\">++;</span><br/>            countSums<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">counts</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            countSums<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">=</span> expressions<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">sum</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span>       <br/>        <span class=\"kw1\">else</span><br/>            countSums<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">counts</span><span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>    countSumsLength <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/qsort.html\"><span class=\"kw3\">qsort</span></a><span class=\"br0\">(</span>countSums<span class=\"sy0\">,</span>countSumsLength<span class=\"sy0\">,</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> CountSum<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>cmp<span class=\"br0\">)</span>compareCountSumsByCount<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>    init<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    comment<span class=\"br0\">(</span><span class=\"st0\">\"Show all solutions that sum to 100\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>            <br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> givenSum <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">struct</span> Expression ex <span class=\"sy0\">=</span> <span class=\"br0\">{</span> givenSum<span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">struct</span> Expression<span class=\"sy0\">*</span> found<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> found <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/bsearch.html\"><span class=\"kw3\">bsearch</span></a><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>ex<span class=\"sy0\">,</span>expressions<span class=\"sy0\">,</span>expressionsLength<span class=\"sy0\">,</span><br/>        <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> Expression<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>cmp<span class=\"br0\">)</span>compareExpressionBySum<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span> found <span class=\"sy0\">!=</span> expressions <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>found<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>sum <span class=\"sy0\">==</span> givenSum <span class=\"br0\">)</span><br/>            found<span class=\"sy0\">--;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span> found <span class=\"sy0\">!=</span> <span class=\"sy0\">&amp;</span>expressions<span class=\"br0\">[</span>expressionsLength<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> found<span class=\"sy0\">-&gt;</span>sum <span class=\"sy0\">==</span> givenSum <span class=\"br0\">)</span><br/>            print<span class=\"br0\">(</span>found<span class=\"sy0\">++-&gt;</span>code<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    comment<span class=\"br0\">(</span><span class=\"st0\">\"Show the positve sum that has the maximum number of solutions\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> maxSumIndex <span class=\"sy0\">=</span> countSumsLength <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> countSums<span class=\"br0\">[</span>maxSumIndex<span class=\"br0\">]</span>.<span class=\"me1\">sum</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>        maxSumIndex<span class=\"sy0\">--;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d has\u00a0%d solutions<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <br/>        countSums<span class=\"br0\">[</span>maxSumIndex<span class=\"br0\">]</span>.<span class=\"me1\">sum</span><span class=\"sy0\">,</span> countSums<span class=\"br0\">[</span>maxSumIndex<span class=\"br0\">]</span>.<span class=\"me1\">counts</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    comment<span class=\"br0\">(</span><span class=\"st0\">\"Show the lowest positive number that can't be expressed\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> value <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"sy0\">;</span> value<span class=\"sy0\">++</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw4\">struct</span> Expression ex <span class=\"sy0\">=</span> <span class=\"br0\">{</span> value<span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/bsearch.html\"><span class=\"kw3\">bsearch</span></a><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>ex<span class=\"sy0\">,</span>expressions<span class=\"sy0\">,</span>expressionsLength<span class=\"sy0\">,</span><br/>                <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> Expression<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>cmp<span class=\"br0\">)</span>compareExpressionBySum<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    comment<span class=\"br0\">(</span><span class=\"st0\">\"Show the ten highest numbers that can be expressed\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> expressionsLength<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> expressionsLength<span class=\"sy0\">-</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span> <span class=\"br0\">)</span><br/>        print<span class=\"br0\">(</span>expressions<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">code</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 111, "block": "<pre class=\"cpp highlighted_source\"><span class=\"coMULTI\">/* <br/> * RossetaCode: Sum to 100, C++, STL, OOP. <br/> * Works with: MSC 16.0 (MSVS2010); GCC 5.1 (use -std=c++11 or -std=c++14 etc.).<br/> *<br/> * Find solutions to the \"sum to one hundred\" puzzle.<br/> */</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;iomanip&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;set&gt;</span><br/><span class=\"co2\">#include &lt;map&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Expression<span class=\"br0\">{</span><br/>    <span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>        <span class=\"kw2\">enum</span> <span class=\"br0\">{</span> NUMBER_OF_DIGITS <span class=\"sy1\">=</span> <span class=\"nu0\">9</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span> <span class=\"co1\">// hack for C++98, use const int in C++11</span><br/>        <span class=\"kw2\">enum</span> Op <span class=\"br0\">{</span> ADD, SUB, JOIN <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>        <span class=\"kw4\">int</span> code<span class=\"br0\">[</span>NUMBER_OF_DIGITS<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    <span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>        <span class=\"kw4\">static</span> <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> NUMBER_OF_EXPRESSIONS<span class=\"sy4\">;</span><br/>        Expression<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> NUMBER_OF_DIGITS<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>                code<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> ADD<span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        Expression<span class=\"sy3\">&amp;</span> operator<span class=\"sy2\">++</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"co1\">// post incrementation</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> NUMBER_OF_DIGITS<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"sy2\">++</span>code<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> JOIN <span class=\"br0\">)</span> code<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> ADD<span class=\"sy4\">;</span> <br/>                <span class=\"kw1\">else</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span>        <br/>        <span class=\"br0\">}</span><br/>        operator <span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span><span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> value <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, number <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, sign <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> digit <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> digit <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">9</span><span class=\"sy4\">;</span> digit<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>                <span class=\"kw1\">switch</span> <span class=\"br0\">(</span> code<span class=\"br0\">[</span>NUMBER_OF_DIGITS <span class=\"sy2\">-</span> digit<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                <span class=\"kw1\">case</span> ADD<span class=\"sy4\">:</span> value <span class=\"sy2\">+</span><span class=\"sy1\">=</span> sign<span class=\"sy2\">*</span>number<span class=\"sy4\">;</span> number <span class=\"sy1\">=</span> digit<span class=\"sy4\">;</span> sign <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>                <span class=\"kw1\">case</span> SUB<span class=\"sy4\">:</span> value <span class=\"sy2\">+</span><span class=\"sy1\">=</span> sign<span class=\"sy2\">*</span>number<span class=\"sy4\">;</span> number <span class=\"sy1\">=</span> digit<span class=\"sy4\">;</span> sign <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>                <span class=\"kw1\">case</span> JOIN<span class=\"sy4\">:</span>                      number <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><span class=\"sy2\">*</span>number <span class=\"sy2\">+</span> digit<span class=\"sy4\">;</span>  <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> value <span class=\"sy2\">+</span> sign<span class=\"sy2\">*</span>number<span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        operator string<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span><span class=\"br0\">{</span><br/>            string s<span class=\"sy4\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> digit <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> digit <span class=\"sy1\">&lt;=</span> NUMBER_OF_DIGITS<span class=\"sy4\">;</span> digit<span class=\"sy2\">++</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                <span class=\"kw1\">switch</span><span class=\"br0\">(</span> code<span class=\"br0\">[</span>NUMBER_OF_DIGITS <span class=\"sy2\">-</span> digit<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                    <span class=\"kw1\">case</span> ADD<span class=\"sy4\">:</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> digit <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> s.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"st0\">'+'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>                    <span class=\"kw1\">case</span> SUB<span class=\"sy4\">:</span>                  s.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"st0\">'-'</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>                <span class=\"br0\">}</span><br/>                s.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span> <span class=\"sy2\">+</span> digit<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> s<span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> Expression<span class=\"sy4\">::</span><span class=\"me2\">NUMBER_OF_EXPRESSIONS</span> <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"sy2\">*</span> <span class=\"nu0\">3</span><span class=\"sy2\">*</span><span class=\"nu0\">3</span><span class=\"sy2\">*</span><span class=\"nu0\">3</span><span class=\"sy2\">*</span><span class=\"nu0\">3</span> <span class=\"sy2\">*</span> <span class=\"nu0\">3</span><span class=\"sy2\">*</span><span class=\"nu0\">3</span><span class=\"sy2\">*</span><span class=\"nu0\">3</span><span class=\"sy2\">*</span><span class=\"nu0\">3</span><span class=\"sy4\">;</span><br/>\u00a0<br/>ostream<span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span>ostream<span class=\"sy3\">&amp;</span> os, Expression<span class=\"sy3\">&amp;</span> ex<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    ios<span class=\"sy4\">::</span><span class=\"me2\">fmtflags</span> oldFlags<span class=\"br0\">(</span>os.<span class=\"me1\">flags</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    os <span class=\"sy1\">&lt;&lt;</span> setw<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> right <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>ex<span class=\"br0\">)</span>    <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" = \"</span> <br/>       <span class=\"sy1\">&lt;&lt;</span> setw<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> left  <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>ex<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    os.<span class=\"me1\">flags</span><span class=\"br0\">(</span>oldFlags<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> os<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> Stat<span class=\"br0\">{</span><br/>    map<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>,<span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> countSum<span class=\"sy4\">;</span><br/>    map<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>, set<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span> sumCount<span class=\"sy4\">;</span><br/>    Stat<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        Expression expression<span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> Expression<span class=\"sy4\">::</span><span class=\"me2\">NUMBER_OF_EXPRESSIONS</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span>, expression<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>            countSum<span class=\"br0\">[</span>expression<span class=\"br0\">]</span><span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">auto</span> it <span class=\"sy1\">=</span> countSum.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> countSum.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>            sumCount<span class=\"br0\">[</span>it<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>second<span class=\"br0\">]</span>.<span class=\"me1\">insert</span><span class=\"br0\">(</span>it<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>first<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"kw4\">int</span> givenSum<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    Expression expression<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> Expression<span class=\"sy4\">::</span><span class=\"me2\">NUMBER_OF_EXPRESSIONS</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span>, expression<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> expression <span class=\"sy1\">==</span> givenSum <span class=\"br0\">)</span> <br/>            <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> expression<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> comment<span class=\"br0\">(</span>string commentString<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> commentString <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    Stat stat<span class=\"sy4\">;</span><br/>\u00a0<br/>    comment<span class=\"br0\">(</span> <span class=\"st0\">\"Show all solutions that sum to 100\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> givenSum <span class=\"sy1\">=</span> <span class=\"nu0\">100</span><span class=\"sy4\">;</span><br/>    print<span class=\"br0\">(</span>givenSum<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    comment<span class=\"br0\">(</span> <span class=\"st0\">\"Show the sum that has the maximum number of solutions\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">auto</span> maxi <span class=\"sy1\">=</span> max_element<span class=\"br0\">(</span>stat.<span class=\"me1\">sumCount</span>.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,stat.<span class=\"me1\">sumCount</span>.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">auto</span> it <span class=\"sy1\">=</span> maxi<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>second.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>it <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> it<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"sy2\">*</span>it<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" has \"</span> <span class=\"sy1\">&lt;&lt;</span> maxi<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>first <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" solutions\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\u00a0<br/>    comment<span class=\"br0\">(</span> <span class=\"st0\">\"Show the lowest positive number that can't be expressed\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> value <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>stat.<span class=\"me1\">countSum</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> value<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> value <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\u00a0<br/>    comment<span class=\"br0\">(</span> <span class=\"st0\">\"Show the ten highest numbers that can be expressed\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">auto</span> rit <span class=\"sy1\">=</span> stat.<span class=\"me1\">countSum</span>.<span class=\"me1\">rbegin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span>, rit<span class=\"sy2\">++</span> <span class=\"br0\">)</span> print<span class=\"br0\">(</span>rit<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>first<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 127, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">// All unique expressions that have a plus sign in front of the 1; calculated in parallel</span><br/>        <span class=\"kw1\">var</span> expressionsPlus <span class=\"sy0\">=</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">AsParallel</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Expression<span class=\"br0\">(</span>i, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">// All unique expressions that have a minus sign in front of the 1; calculated in parallel</span><br/>        <span class=\"kw1\">var</span> expressionsMinus <span class=\"sy0\">=</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">AsParallel</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Expression<span class=\"br0\">(</span>i, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> expressions <span class=\"sy0\">=</span> expressionsPlus<span class=\"sy0\">.</span><span class=\"me1\">Concat</span><span class=\"br0\">(</span>expressionsMinus<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> results <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Dictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, List<span class=\"sy0\">&lt;</span>Expression<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> e <span class=\"kw1\">in</span> expressions<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>results<span class=\"sy0\">.</span><span class=\"me1\">Keys</span><span class=\"sy0\">.</span><span class=\"me1\">Contains</span><span class=\"br0\">(</span>e<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                results<span class=\"br0\">[</span>e<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>                results<span class=\"br0\">[</span>e<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>Expression<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> e <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Show all solutions that sum to 100\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>Expression e <span class=\"kw1\">in</span> results<span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"  \"</span> <span class=\"sy0\">+</span> e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Show the sum that has the maximum number of solutions (from zero to infinity)\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> summary <span class=\"sy0\">=</span> results<span class=\"sy0\">.</span><span class=\"me1\">Keys</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>k <span class=\"sy0\">=&gt;</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Tuple<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>k, results<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> maxSols <span class=\"sy0\">=</span> summary<span class=\"sy0\">.</span><span class=\"me1\">Aggregate</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a<span class=\"sy0\">.</span><span class=\"me1\">Item2</span> <span class=\"sy0\">&gt;</span> b<span class=\"sy0\">.</span><span class=\"me1\">Item2</span> <span class=\"sy0\">?</span> a <span class=\"sy0\">:</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"  The sum \"</span> <span class=\"sy0\">+</span> maxSols<span class=\"sy0\">.</span><span class=\"me1\">Item1</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" has \"</span> <span class=\"sy0\">+</span> maxSols<span class=\"sy0\">.</span><span class=\"me1\">Item2</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" solutions.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Show the lowest positive sum that can't be expressed (has no solutions), using the rules for this task\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> lowestPositive <span class=\"sy0\">=</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">MaxValue</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">First</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">!</span>results<span class=\"sy0\">.</span><span class=\"me1\">Keys</span><span class=\"sy0\">.</span><span class=\"me1\">Contains</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"  \"</span> <span class=\"sy0\">+</span> lowestPositive<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Show the ten highest numbers that can be expressed using the rules for this task (extra credit)\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> highest <span class=\"sy0\">=</span> <span class=\"kw1\">from</span> k <span class=\"kw1\">in</span> results<span class=\"sy0\">.</span><span class=\"me1\">Keys</span><br/>                      orderby k descending<br/>                      <span class=\"kw1\">select</span> k<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> x <span class=\"kw1\">in</span> highest<span class=\"sy0\">.</span><span class=\"me1\">Take</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"  \"</span> <span class=\"sy0\">+</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">public</span> <span class=\"kw4\">enum</span> Operations <span class=\"br0\">{</span> Plus, Minus, <span class=\"kw1\">Join</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Expression<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">protected</span> Operations<span class=\"br0\">[</span><span class=\"br0\">]</span> Gaps<span class=\"sy0\">;</span><br/>    <span class=\"co1\">// 123456789 =&gt; there are 8 \"gaps\" between each number</span><br/>    <span class=\"co1\">///             with 3 possibilities for each gap: plus, minus, or join</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> <span class=\"kw1\">Value</span><span class=\"sy0\">;</span> <span class=\"co1\">// What this expression sums up to</span><br/>    <span class=\"kw1\">protected</span> <span class=\"kw4\">int</span> _one<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Expression<span class=\"br0\">(</span><span class=\"kw4\">int</span> serial, <span class=\"kw4\">int</span> one<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        _one <span class=\"sy0\">=</span> one<span class=\"sy0\">;</span><br/>        Gaps <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Operations<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">// This represents \"serial\" as a base 3 number, each Gap expression being a base-three digit</span><br/>        <span class=\"kw4\">int</span> divisor <span class=\"sy0\">=</span> <span class=\"nu0\">2187</span><span class=\"sy0\">;</span> <span class=\"co1\">// == Math.Pow(3,7)</span><br/>        <span class=\"kw4\">int</span> times<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            times <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">DivRem</span><span class=\"br0\">(</span>serial, divisor, <span class=\"kw1\">out</span> serial<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            divisor <span class=\"sy0\">/=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>times <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                Gaps<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Operations<span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>times <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                Gaps<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Operations<span class=\"sy0\">.</span><span class=\"me1\">Minus</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>                Gaps<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Operations<span class=\"sy0\">.</span><span class=\"me1\">Plus</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"co1\">// go ahead and calculate the value of this expression</span><br/>        <span class=\"co1\">// because this is going to be done in a parallel thread (save time)</span><br/>        <span class=\"kw1\">Value</span> <span class=\"sy0\">=</span> Evaluate<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">override</span> <span class=\"kw4\">string</span> ToString<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">string</span> ret <span class=\"sy0\">=</span> _one<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>Gaps<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">case</span> Operations<span class=\"sy0\">.</span><span class=\"me1\">Plus</span><span class=\"sy0\">:</span><br/>                    ret <span class=\"sy0\">+=</span> <span class=\"st0\">\"+\"</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> Operations<span class=\"sy0\">.</span><span class=\"me1\">Minus</span><span class=\"sy0\">:</span><br/>                    ret <span class=\"sy0\">+=</span> <span class=\"st0\">\"-\"</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            ret <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> ret<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> Evaluate<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"coMULTI\">/* Calculate what this expression equals */</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> numbers <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> nc <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> operations <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>Operations<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Gaps<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Operations<span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">)</span><br/>                a <span class=\"sy0\">=</span> a <span class=\"sy0\">*</span> <span class=\"nu0\">10</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nc <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                        a <span class=\"sy0\">*=</span> _one<span class=\"sy0\">;</span><br/>                    numbers<span class=\"br0\">[</span>nc<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"sy0\">;</span><br/>                    a <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                operations<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>Gaps<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nc <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            a <span class=\"sy0\">*=</span> _one<span class=\"sy0\">;</span><br/>        numbers<span class=\"br0\">[</span>nc<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> a<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> ni <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> left <span class=\"sy0\">=</span> numbers<span class=\"br0\">[</span>ni<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> operation <span class=\"kw1\">in</span> operations<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> right <span class=\"sy0\">=</span> numbers<span class=\"br0\">[</span>ni<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>operation <span class=\"sy0\">==</span> Operations<span class=\"sy0\">.</span><span class=\"me1\">Plus</span><span class=\"br0\">)</span><br/>                left <span class=\"sy0\">=</span> left <span class=\"sy0\">+</span> right<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>                left <span class=\"sy0\">=</span> left <span class=\"sy0\">-</span> right<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> left<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "CommonLisp", "loc": 22, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> f <span class=\"br0\">(</span>lst <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>sum <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>so-far <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/> <span class=\"st0\">\"Takes a list of digits as argument\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span> lst<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> sum <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"~d = ~{<a class=\"__cf_email__\" data-cfemail=\"e997a98d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>~}~%\"</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'+ so-far<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> so-far<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>t <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>total <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>len <span class=\"br0\">(</span><span class=\"kw1\">length</span> lst<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i len total<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>str1 <span class=\"br0\">(</span>butlast lst i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>num1 <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>numlist-to-string str1<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">rem</span> <span class=\"br0\">(</span><span class=\"kw1\">nthcdr</span> <span class=\"br0\">(</span>- len i<span class=\"br0\">)</span> lst<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>incf total<br/>            <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>f <span class=\"kw1\">rem</span> <span class=\"br0\">(</span>- sum num1<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> num1 so-far<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>f <span class=\"kw1\">rem</span> <span class=\"br0\">(</span>+ sum num1<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>- num1<span class=\"br0\">)</span> so-far<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> numlist-to-string <span class=\"br0\">(</span>lst<span class=\"br0\">)</span><br/> <span class=\"st0\">\"Convert a list of digits into an integer\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">when</span> lst<br/>    <span class=\"br0\">(</span><span class=\"kw1\">parse-integer</span> <span class=\"br0\">(</span>format <span class=\"kw1\">nil</span> <span class=\"st0\">\"~{~d~}\"</span> lst<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "D", "loc": 153, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">algorithm</span> <span class=\"sy0\">:</span> each<span class=\"sy0\">,</span> max<span class=\"sy0\">,</span> reduce<span class=\"sy0\">,</span> sort<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">range</span> <span class=\"sy0\">:</span> take<span class=\"sy0\">;</span><br/>\u00a0<br/>    Stat stat <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Stat<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    comment<span class=\"br0\">(</span><span class=\"st0\">\"Show all solutions that sum to 100\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> givenSum <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>    print<span class=\"br0\">(</span>givenSum<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    comment<span class=\"br0\">(</span><span class=\"st0\">\"Show the sum that has the maximum number of solutions\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> maxCount <span class=\"sy0\">=</span> reduce<span class=\"sy0\">!</span>max<span class=\"br0\">(</span>stat.<span class=\"me1\">sumCount</span>.<span class=\"me1\">keys</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> maxSum<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>key<span class=\"sy0\">,</span> entry<span class=\"sy0\">;</span> stat.<span class=\"me1\">sumCount</span><span class=\"br0\">[</span>maxCount<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>key <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            maxSum <span class=\"sy0\">=</span> key<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    writeln<span class=\"br0\">(</span>maxSum<span class=\"sy0\">,</span> <span class=\"st0\">\" has \"</span><span class=\"sy0\">,</span> maxCount<span class=\"sy0\">,</span> <span class=\"st0\">\" solutions\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    comment<span class=\"br0\">(</span><span class=\"st0\">\"Show the lowest positive number that can't be expressed\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> value <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>value <span class=\"kw2\">in</span> stat.<span class=\"me1\">countSum</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        value<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>    writeln<span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    comment<span class=\"br0\">(</span><span class=\"st0\">\"Show the ten highest numbers that can be expressed\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> stat.<span class=\"me1\">countSum</span>.<span class=\"me1\">keys</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> sums <span class=\"sy0\">=</span> stat.<span class=\"me1\">countSum</span>.<span class=\"me1\">keys</span><span class=\"sy0\">;</span><br/>    sums.<span class=\"me1\">sort</span><span class=\"sy0\">!</span><span class=\"st0\">\"a&gt;b\"</span><br/>        .<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">each</span><span class=\"sy0\">!</span>print<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> comment<span class=\"br0\">(</span><span class=\"kw4\">string</span> commentString<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>commentString<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"kw4\">int</span> givenSum<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Expression expression <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Expression<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>Expression.<span class=\"me1\">NUMBER_OF_EXPRESSIONS</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++,</span> expression.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>expression.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> givenSum<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            expression.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Expression <span class=\"br0\">{</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">enum</span> NUMBER_OF_DIGITS <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">enum</span> ADD <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">enum</span> SUB <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">enum</span> JOIN <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">enum</span> NUMBER_OF_EXPRESSIONS <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">byte</span><span class=\"br0\">[</span>NUMBER_OF_DIGITS<span class=\"br0\">]</span> code<span class=\"sy0\">;</span><br/>\u00a0<br/>    Expression next<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>NUMBER_OF_DIGITS<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>code<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> JOIN<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                code<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> ADD<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">this</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> toInt<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> value <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> number <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> sign <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> digit<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> digit<span class=\"sy0\">&lt;=</span><span class=\"nu0\">9</span><span class=\"sy0\">;</span> digit<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>code<span class=\"br0\">[</span>NUMBER_OF_DIGITS <span class=\"sy0\">-</span> digit<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">case</span> ADD<span class=\"sy0\">:</span><br/>                    value <span class=\"sy0\">+=</span> sign <span class=\"sy0\">*</span> number<span class=\"sy0\">;</span><br/>                    number <span class=\"sy0\">=</span> digit<span class=\"sy0\">;</span><br/>                    sign <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> SUB<span class=\"sy0\">:</span><br/>                    value <span class=\"sy0\">+=</span> sign <span class=\"sy0\">*</span> number<span class=\"sy0\">;</span><br/>                    number <span class=\"sy0\">=</span> digit<span class=\"sy0\">;</span><br/>                    sign <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> JOIN<span class=\"sy0\">:</span><br/>                    number <span class=\"sy0\">=</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span> number <span class=\"sy0\">+</span> digit<span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw2\">default</span><span class=\"sy0\">:</span><br/>                    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> value <span class=\"sy0\">+</span> sign <span class=\"sy0\">*</span> number<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> toString<span class=\"br0\">(</span><span class=\"kw2\">scope</span> <span class=\"kw4\">void</span> <span class=\"kw2\">delegate</span><span class=\"br0\">(</span><span class=\"kw4\">const</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> sink<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">import</span> std.<span class=\"me1\">conv</span> <span class=\"sy0\">:</span> to<span class=\"sy0\">;</span><br/>        <span class=\"kw2\">import</span> std.<span class=\"me1\">format</span> <span class=\"sy0\">:</span> FormatSpec<span class=\"sy0\">,</span> formatValue<span class=\"sy0\">;</span><br/>        <span class=\"kw2\">import</span> std.<span class=\"me1\">range</span> <span class=\"sy0\">:</span> put<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">auto</span> fmt <span class=\"sy0\">=</span> FormatSpec<span class=\"sy0\">!</span><span class=\"kw4\">char</span><span class=\"br0\">(</span><span class=\"st0\">\"s\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> digit<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> digit<span class=\"sy0\">&lt;=</span>NUMBER_OF_DIGITS<span class=\"sy0\">;</span> digit<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>code<span class=\"br0\">[</span>NUMBER_OF_DIGITS <span class=\"sy0\">-</span> digit<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">case</span> ADD<span class=\"sy0\">:</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>digit <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        put<span class=\"br0\">(</span>sink<span class=\"sy0\">,</span> <span class=\"st0\">'+'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> SUB<span class=\"sy0\">:</span><br/>                    put<span class=\"br0\">(</span>sink<span class=\"sy0\">,</span> <span class=\"st0\">'-'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw2\">default</span><span class=\"sy0\">:</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            formatValue<span class=\"br0\">(</span>sink<span class=\"sy0\">,</span> digit<span class=\"sy0\">,</span> fmt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span>stdout<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> print<span class=\"br0\">(</span>File printStream<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        printStream.<span class=\"me1\">writefln</span><span class=\"br0\">(</span><span class=\"st0\">\"%9d =\u00a0%s\"</span><span class=\"sy0\">,</span> toInt<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Stat <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"kw4\">int</span><span class=\"br0\">]</span> countSum<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">bool</span><span class=\"br0\">[</span><span class=\"kw4\">int</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw4\">int</span><span class=\"br0\">]</span> sumCount<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Expression expression <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Expression<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>Expression.<span class=\"me1\">NUMBER_OF_EXPRESSIONS</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++,</span> expression.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> expression.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            countSum<span class=\"br0\">[</span>sum<span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>key<span class=\"sy0\">,</span> entry<span class=\"sy0\">;</span> countSum<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">bool</span><span class=\"br0\">[</span><span class=\"kw4\">int</span><span class=\"br0\">]</span> set<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>entry <span class=\"kw2\">in</span> sumCount<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                set <span class=\"sy0\">=</span> sumCount<span class=\"br0\">[</span>entry<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                set.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            set<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            sumCount<span class=\"br0\">[</span>entry<span class=\"br0\">]</span> <span class=\"sy0\">=</span> set<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 46, "block": "<pre class=\"text highlighted_source\">defmodule Sum do<br/>  def to(val) do<br/>    generate<br/>    |&gt; Enum.map(&amp;{eval(&amp;1), &amp;1})<br/>    |&gt; Enum.filter(fn {v, _s} -&gt; v==val end)<br/>    |&gt; Enum.each(&amp;IO.inspect &amp;1)<br/>  end<br/>\u00a0<br/>  def max_solve do<br/>    generate<br/>    |&gt; Enum.group_by(&amp;eval &amp;1)<br/>    |&gt; Enum.filter_map(fn {k,_} -&gt; k&gt;=0 end, fn {k,v} -&gt; {length(v),k} end)<br/>    |&gt; Enum.max<br/>    |&gt; fn {len,sum} -&gt; IO.puts \"sum of #{sum} has the maximum number of solutions\u00a0: #{len}\" end.()<br/>  end<br/>\u00a0<br/>  def min_solve do<br/>    solve = generate |&gt; Enum.group_by(&amp;eval &amp;1)<br/>    Stream.iterate(1, &amp;(&amp;1+1))<br/>    |&gt; Enum.find(fn n -&gt; solve[n]==nil end)<br/>    |&gt; fn sum -&gt; IO.puts \"lowest positive sum that can't be expressed\u00a0: #{sum}\" end.()<br/>  end<br/>\u00a0<br/>  def  highest_sums(n\\\\10) do<br/>    IO.puts \"highest sums\u00a0:\"<br/>    generate<br/>    |&gt; Enum.map(&amp;eval &amp;1)<br/>    |&gt; Enum.uniq<br/>    |&gt; Enum.sort_by(fn sum -&gt; -sum end)<br/>    |&gt; Enum.take(n)<br/>    |&gt; IO.inspect<br/>  end<br/>\u00a0<br/>  defp generate do<br/>    x = [\"+\", \"-\", \"\"]<br/>    for a &lt;- [\"-\", \"\"], b &lt;- x, c &lt;- x, d &lt;- x, e &lt;- x, f &lt;- x, g &lt;- x, h &lt;- x, i &lt;- x,<br/>        do: \"#{a}1#{b}2#{c}3#{d}4#{e}5#{f}6#{g}7#{h}8#{i}9\"<br/>  end<br/>\u00a0<br/>  defp eval(str), do: Code.eval_string(str) |&gt; elem(0)<br/>end<br/>\u00a0<br/>Sum.to(100)<br/>Sum.max_solve<br/>Sum.min_solve<br/>Sum.highest_sums</pre>"}, {"lang": "Forth", "loc": 52, "block": "<pre class=\"text highlighted_source\">CREATE *OPS CHAR + C, CHAR - C, CHAR # C,<br/>CREATE 0OPS CHAR - C, CHAR # C,<br/>CREATE BUFF 43 C, 43 CHARS ALLOT<br/>CREATE PTR CELL ALLOT<br/>CREATE LIMITS 2 C, 3 C, 3 C, 3 C, 3 C, 3 C, 3 C, 3 C, 3 C,<br/>CREATE INDX   0 C, 0 C, 0 C, 0 C, 0 C, 0 C, 0 C, 0 C, 0 C,<br/>CREATE OPS 0OPS , *OPS , *OPS , *OPS , *OPS , *OPS , *OPS , *OPS , *OPS ,<br/>: B0   BUFF 1+ dup  PTR\u00a0!  43 blank\u00a0;<br/>: B, ( c --)  PTR @ C!  1 PTR +!\u00a0;<br/>CREATE STATS 123456790 ALLOT  STATS 123456790 ERASE<br/>\u00a0<br/>: inc ( c-addr c-lim u -- t|f)<br/>   1- tuck + &gt;r swap dup rot + ( addr a-addr) ( R: l-addr)<br/>   BEGIN dup <a class=\"__cf_email__\" data-cfemail=\"90d3d0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 1+ dup <a class=\"__cf_email__\" data-cfemail=\"205260\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> <a class=\"__cf_email__\" data-cfemail=\"347774\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <br/>     IF drop 2dup = <br/>       IF 2drop FALSE rdrop EXIT   \\ no inc, contents invalid<br/>       ELSE 0 over C! 1-  r&gt; 1- &gt;r  \\ reset and carry<br/>       THEN<br/>     ELSE swap C! drop TRUE rdrop EXIT <br/>     THEN <br/>   AGAIN\u00a0;<br/>: INDX+   INDX LIMITS 9 inc 0=\u00a0;<br/>: SYNTH   B0  [CHAR] 0 B,  9 0 DO<br/>     INDX I + <a class=\"__cf_email__\" data-cfemail=\"d39093\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  OPS I CELLS + @ + <a class=\"__cf_email__\" data-cfemail=\"a2e1e2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>     dup  [CHAR] # &lt;&gt; IF BL B, B, BL B, ELSE drop THEN<br/>     I [CHAR] 1 + B,<br/>   LOOP  BUFF COUNT\u00a0;<br/>: .MOST   cr .\" Sum that has the maximum number of solutions\" cr 4 spaces<br/>   STATS 0  STATS 1+ 123456789 bounds DO<br/>     dup I <a class=\"__cf_email__\" data-cfemail=\"7f1c3f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &lt;  IF drop drop I I <a class=\"__cf_email__\" data-cfemail=\"147754\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> THEN<br/>   LOOP  swap STATS - . .\" has \" . .\" solutions\"\u00a0;<br/>: .CANT   cr .\" Lowest positive sum that can't be expressed\" cr 4 spaces<br/>   STATS 1+ ( 0 not positive)  BEGIN dup <a class=\"__cf_email__\" data-cfemail=\"680b28\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> WHILE 1+ REPEAT  STATS - .\u00a0;<br/>: .BEST   cr .\" Ten highest numbers that can be expressed\" cr 4 spaces<br/>   0 &gt;r  [ STATS 123456789 + ]L<br/>   BEGIN  <a class=\"__cf_email__\" data-cfemail=\"a2d0e2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 10 &lt;  over STATS &gt;= and<br/>   WHILE  dup <a class=\"__cf_email__\" data-cfemail=\"0c6f4c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> IF dup STATS - .  r&gt; 1+ &gt;r THEN  1-<br/>   REPEAT  r&gt; drop\u00a0;<br/>: .   0 &lt;# #S #&gt; TYPE\u00a0;<br/>: .INFX   cr 4 spaces  9 0 DO <br/>     INDX I + <a class=\"__cf_email__\" data-cfemail=\"a8ebe8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  OPS I cells + @ + <a class=\"__cf_email__\" data-cfemail=\"2e6d6e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>     dup  [char] # &lt;&gt; IF emit ELSE drop THEN  I 1+ .<br/>   LOOP\u00a0;<br/>: REPORT ( n)   dup 100 =  IF .INFX THEN<br/>   dup 0&gt; IF STATS + dup  <a class=\"__cf_email__\" data-cfemail=\"beddfe\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 1+  swap c! ELSE drop THEN\u00a0;<br/>: &gt;NUM   0. bl word count &gt;number 2drop d&gt;s\u00a0;<br/>: #   10 * +\u00a0;   \\ numeric concatenation<br/>: +    &gt;NUM +\u00a0;  \\ infix +<br/>: -    &gt;NUM -\u00a0;  \\ infix -<br/>: .SOLUTIONS   cr .\" Solutions that sum to 100:\"<br/>   BEGIN SYNTH EVALUATE REPORT INDX+ UNTIL\u00a0;<br/>: SUM100   .SOLUTIONS .MOST .CANT .BEST cr\u00a0;</pre>"}, {"lang": "Fortran", "loc": 1, "block": "<pre>C ROSSETACODE: SUM TO 100, FORTRAN IV\nC FIND SOLUTIONS TO THE \"SUM TO ONE HUNDRED\" PUZZLE\nC =================================================\n\n      PROGRAM SUMTO100\n      DATA NEXPRM1/13121/\n      WRITE(6,110)\n 110  FORMAT(1X/1X,34HSHOW ALL SOLUTIONS THAT SUM TO 100/)\n      DO 10 I = 0,NEXPRM1\n  10  IF ( IEVAL(I) .EQ. 100 ) CALL PREXPR(I)\n\n      WRITE(6,120)\n 120  FORMAT(1X/1X,\n     153HSHOW THE SUM THAT HAS THE MAXIMUM NUMBER OF SOLUTIONS/)\n      NBEST = -1\n      DO 30 I = 0, NEXPRM1\n      ITEST = IEVAL(I)\n      IF ( ITEST .LT. 0 ) GOTO 30\n      NTEST = 0\n      DO 20 J = 0, NEXPRM1\n  20  IF ( IEVAL(J) .EQ. ITEST ) NTEST = NTEST + 1\n      IF ( NTEST .LE. NBEST ) GOTO 30\n      IBEST = ITEST\n      NBEST = NTEST\n  30  CONTINUE\n      WRITE(6,121) IBEST, NBEST\n 121  FORMAT(1X,I8,5H HAS ,I8,10H SOLUTIONS/)\n\n      WRITE(6,130)\n 130  FORMAT(1X/1X,\n     155HSHOW THE LOWEST POSITIVE NUMBER THAT CAN'T BE EXPRESSED/)     \n      DO 50 I = 0,123456789\n      DO 40 J = 0,NEXPRM1\n  40  IF ( I .EQ. IEVAL(J) ) GOTO 50\n      GOTO 60\n  50  CONTINUE\n  60  WRITE(6,131) I\n 131  FORMAT(1X,I8)\n\n      WRITE(6,140)\n 140  FORMAT(1X/1X,\n     150HSHOW THE TEN HIGHEST NUMBERS THAT CAN BE EXPRESSED/)\n      ILIMIT = 123456789\n      DO 90 I = 1,10\n      IBEST = 0\n      DO 70 J = 0, NEXPRM1\n      ITEST = IEVAL(J)\n  70  IF( (ITEST .LE. ILIMIT) .AND. (ITEST .GT. IBEST)) IBEST = ITEST\n      DO 80 J = 0, NEXPRM1\n  80  IF ( IEVAL(J) .EQ. IBEST ) CALL PREXPR(J)\n  90  ILIMIT = IBEST - 1\n      END\n\nC     EVALUATE THE VALUE OF THE GIVEN ENCODED EXPRESSION\nC     --------------------------------------------------\n      FUNCTION IEVAL(ICODE)\n      IC = ICODE\n      IEVAL = 0\n      N = 0\n      IP = 1\n      DO 50 K = 9,1,-1\n      N = IP*K + N\n      GOTO (10,20,40,30) MOD(IC,3)+1\n  10  IEVAL = IEVAL + N\n      GOTO 30\n  20  IEVAL = IEVAL - N\n  30  N = 0\n      IP = 1\n      GOTO 50\n  40  IP = IP * 10\n  50  IC = IC / 3\n      END\n\nC     PRINT THE ENCODED EXPRESSION IN THE READABLE FORMAT\nC     ---------------------------------------------------\n      SUBROUTINE PREXPR(ICODE)\n      DIMENSION IH(9),IHPMJ(4)\n      DATA IHPMJ/1H+,1H-,1H ,1H?/\n      IA = 19683\n      IB =  6561\n      DO 10 K = 1,9\n      IH(K) = IHPMJ(MOD(ICODE,IA) / IB+1)\n      IA = IB\n  10  IB = IB / 3\n      IVALUE = IEVAL(ICODE)\n      WRITE(6,110) IVALUE, IH\n 110  FORMAT(I9,3H = 1A1,1H1,1A1,1H2,1A1,1H3,1A1,1H4,1A1,1H5,1A1,1H6,1A1\n     1,1H7,1A1,1H8,1A1,1H9)\n      END</pre>"}, {"lang": "F#", "loc": 20, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"co3\">(*<br/>Generate the data set<br/>Nigel Galloway February 22nd., 2017<br/>*)</span><br/><span class=\"kw1\">type</span> N <span class=\"sy0\">=</span> <span class=\"br0\">{</span>n:string<span class=\"sy0\">;</span> g:<span class=\"kw4\">int</span><span class=\"br0\">}</span><br/><span class=\"kw1\">let</span> N <span class=\"sy0\">=</span> <span class=\"kw4\">seq</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> fn n i g e l <span class=\"sy0\">=</span> <span class=\"kw4\">seq</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">match</span> i <span class=\"kw1\">with</span><br/>    |<span class=\"nu0\">9</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">yield</span> <span class=\"br0\">{</span>n<span class=\"sy0\">=</span>l <span class=\"sy0\">+</span> <span class=\"st0\">\"-9\"</span><span class=\"sy0\">;</span> g<span class=\"sy0\">=</span>g<span class=\"sy0\">+</span>e<span class=\"sy0\">-</span><span class=\"nu0\">9</span><span class=\"br0\">}</span><br/>          <span class=\"kw1\">yield</span> <span class=\"br0\">{</span>n<span class=\"sy0\">=</span>l <span class=\"sy0\">+</span> <span class=\"st0\">\"+9\"</span><span class=\"sy0\">;</span> g<span class=\"sy0\">=</span>g<span class=\"sy0\">+</span>e<span class=\"sy0\">+</span><span class=\"nu0\">9</span><span class=\"br0\">}</span><br/>          <span class=\"kw1\">yield</span> <span class=\"br0\">{</span>n<span class=\"sy0\">=</span>l <span class=\"sy0\">+</span>  <span class=\"st0\">\"9\"</span><span class=\"sy0\">;</span> g<span class=\"sy0\">=</span>g<span class=\"sy0\">+</span>e<span class=\"sy0\">*</span><span class=\"nu0\">10</span><span class=\"sy0\">+</span><span class=\"nu0\">9</span><span class=\"sy0\">*</span>n<span class=\"br0\">}</span><br/>    |_ <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">yield!</span> fn <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>g<span class=\"sy0\">+</span>e<span class=\"br0\">)</span> <span class=\"sy0\">-</span>i <span class=\"br0\">(</span>l <span class=\"sy0\">+</span> <span class=\"kw4\">string</span> <span class=\"sy0\">-</span>i<span class=\"br0\">)</span><br/>          <span class=\"kw1\">yield!</span> fn  <span class=\"nu0\">1</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>g<span class=\"sy0\">+</span>e<span class=\"br0\">)</span>  i <span class=\"br0\">(</span>l <span class=\"sy0\">+</span> <span class=\"st0\">\"+\"</span> <span class=\"sy0\">+</span> <span class=\"kw4\">string</span> i<span class=\"br0\">)</span><br/>          <span class=\"kw1\">yield!</span> fn  n <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> g <span class=\"br0\">(</span>e<span class=\"sy0\">*</span><span class=\"nu0\">10</span><span class=\"sy0\">+</span>i<span class=\"sy0\">*</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span>l <span class=\"sy0\">+</span> <span class=\"kw4\">string</span> i<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">yield!</span> fn  <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">1</span>  <span class=\"st0\">\"1\"</span><br/>  <span class=\"kw1\">yield!</span> fn <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"st0\">\"-1\"</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 150, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"sort\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> pow3_8 <span class=\"sy2\">=</span> <span class=\"nu0\">3</span> <span class=\"sy3\">*</span> <span class=\"nu0\">3</span> <span class=\"sy3\">*</span> <span class=\"nu0\">3</span> <span class=\"sy3\">*</span> <span class=\"nu0\">3</span> <span class=\"sy3\">*</span> <span class=\"nu0\">3</span> <span class=\"sy3\">*</span> <span class=\"nu0\">3</span> <span class=\"sy3\">*</span> <span class=\"nu0\">3</span> <span class=\"sy3\">*</span> <span class=\"nu0\">3</span> <span class=\"co1\">// 3^8</span><br/><span class=\"kw1\">const</span> pow3_9 <span class=\"sy2\">=</span> <span class=\"nu0\">3</span> <span class=\"sy3\">*</span> pow3_8                    <span class=\"co1\">// 3^9</span><br/><span class=\"kw1\">const</span> maxExprs <span class=\"sy2\">=</span> <span class=\"nu0\">2</span> <span class=\"sy3\">*</span> pow3_8                  <span class=\"co1\">// not 3^9 since first op can't be Join</span><br/>\u00a0<br/><span class=\"kw1\">type</span> op <span class=\"kw4\">uint8</span><br/>\u00a0<br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>\tAdd  op <span class=\"sy2\">=</span> iota <span class=\"co1\">// insert a \"+\"</span><br/>\tSub            <span class=\"co1\">//     or a \"-\"</span><br/>\tJoin           <span class=\"co1\">//     or just join together</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// code is an encoding of [9]op, the nine \"operations\"</span><br/><span class=\"co1\">// we do on each each digit. The op for 1 is in</span><br/><span class=\"co1\">// the highest bits, the op for 9 in the lowest.</span><br/><span class=\"kw1\">type</span> code <span class=\"kw4\">uint16</span><br/>\u00a0<br/><span class=\"co1\">// evaluate 123456789 with + - or \"\" prepended to each as indicated by `c`.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c code<span class=\"sy1\">)</span> evaluate<span class=\"sy1\">()</span> <span class=\"sy1\">(</span>sum <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\tnum<span class=\"sy1\">,</span> pow <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">for</span> k <span class=\"sy2\">:=</span> <span class=\"nu0\">9</span><span class=\"sy1\">;</span> k &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> k<span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>\t\tnum <span class=\"sy2\">+=</span> pow <span class=\"sy3\">*</span> k<br/>\t\t<span class=\"kw1\">switch</span> op<span class=\"sy1\">(</span>c <span class=\"sy3\">%</span> <span class=\"nu0\">3</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">case</span> Add<span class=\"sy1\">:</span><br/>\t\t\tsum <span class=\"sy2\">+=</span> num<br/>\t\t\tnum<span class=\"sy1\">,</span> pow <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">case</span> Sub<span class=\"sy1\">:</span><br/>\t\t\tsum <span class=\"sy2\">-=</span> num<br/>\t\t\tnum<span class=\"sy1\">,</span> pow <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw1\">case</span> Join<span class=\"sy1\">:</span><br/>\t\t\tpow <span class=\"sy2\">*=</span> <span class=\"nu0\">10</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\tc <span class=\"sy2\">/=</span> <span class=\"nu0\">3</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> sum<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>c code<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\tbuf <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">18</span><span class=\"sy1\">)</span><br/>\ta<span class=\"sy1\">,</span> b <span class=\"sy2\">:=</span> code<span class=\"sy1\">(</span>pow3_9<span class=\"sy1\">),</span> code<span class=\"sy1\">(</span>pow3_8<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> k <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> k &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">9</span><span class=\"sy1\">;</span> k<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">switch</span> op<span class=\"sy1\">((</span>c <span class=\"sy3\">%</span> a<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> b<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">case</span> Add<span class=\"sy1\">:</span><br/>\t\t\t<span class=\"kw1\">if</span> k &gt; <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>\t\t\t\tbuf <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>buf<span class=\"sy1\">,</span> <span class=\"st0\">'+'</span><span class=\"sy1\">)</span><br/>\t\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"kw1\">case</span> Sub<span class=\"sy1\">:</span><br/>\t\t\tbuf <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>buf<span class=\"sy1\">,</span> <span class=\"st0\">'-'</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\tbuf <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>buf<span class=\"sy1\">,</span> <span class=\"st0\">'0'</span><span class=\"sy3\">+</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span>k<span class=\"sy1\">))</span><br/>\t\ta<span class=\"sy1\">,</span> b <span class=\"sy2\">=</span> b<span class=\"sy1\">,</span> b<span class=\"sy3\">/</span><span class=\"nu0\">3</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>buf<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> sumCode <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>\tsum  <span class=\"kw4\">int</span><br/>\tcode code<br/><span class=\"sy1\">}</span><br/><span class=\"kw1\">type</span> sumCodes <span class=\"sy1\">[]</span>sumCode<br/>\u00a0<br/><span class=\"kw1\">type</span> sumCount <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>\tsum   <span class=\"kw4\">int</span><br/>\tcount <span class=\"kw4\">int</span><br/><span class=\"sy1\">}</span><br/><span class=\"kw1\">type</span> sumCounts <span class=\"sy1\">[]</span>sumCount<br/>\u00a0<br/><span class=\"co1\">// For sorting (could also use sort.Slice with just Less).</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>p sumCodes<span class=\"sy1\">)</span> Len<span class=\"sy1\">()</span> <span class=\"kw4\">int</span>            <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>p<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>p sumCodes<span class=\"sy1\">)</span> Swap<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span>       <span class=\"sy1\">{</span> p<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> p<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> p<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> p<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>p sumCodes<span class=\"sy1\">)</span> Less<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span>  <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> p<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>sum &lt; p<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><span class=\"sy3\">.</span>sum <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>p sumCounts<span class=\"sy1\">)</span> Len<span class=\"sy1\">()</span> <span class=\"kw4\">int</span>           <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>p<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>p sumCounts<span class=\"sy1\">)</span> Swap<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span>      <span class=\"sy1\">{</span> p<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> p<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> p<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> p<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>p sumCounts<span class=\"sy1\">)</span> Less<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> p<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>count &gt; p<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><span class=\"sy3\">.</span>count <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// For printing.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>sc sumCode<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">return</span> fmt<span class=\"sy3\">.</span>Sprintf<span class=\"sy1\">(</span><span class=\"st0\">\"% 10d =\u00a0%v\"</span><span class=\"sy1\">,</span> sc<span class=\"sy3\">.</span>sum<span class=\"sy1\">,</span> sc<span class=\"sy3\">.</span>code<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>sc sumCount<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">return</span> fmt<span class=\"sy3\">.</span>Sprintf<span class=\"sy1\">(</span><span class=\"st0\">\"% 10d has\u00a0%d solutions\"</span><span class=\"sy1\">,</span> sc<span class=\"sy3\">.</span>sum<span class=\"sy1\">,</span> sc<span class=\"sy3\">.</span>count<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t<span class=\"co1\">// Evaluate all expressions.</span><br/>\texpressions <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>sumCodes<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> maxExprs<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>\tcounts <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>sumCounts<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1715</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> c <span class=\"sy2\">:=</span> code<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">);</span> c &lt; maxExprs<span class=\"sy1\">;</span> c<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"co1\">// All negative sums are exactly like their positive</span><br/>\t\t<span class=\"co1\">// counterpart with all +/- switched, we don't need to</span><br/>\t\t<span class=\"co1\">// keep track of them.</span><br/>\t\tsum <span class=\"sy2\">:=</span> c<span class=\"sy3\">.</span>evaluate<span class=\"sy1\">()</span><br/>\t\t<span class=\"kw1\">if</span> sum &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t\texpressions <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>expressions<span class=\"sy1\">,</span> sumCode<span class=\"sy1\">{</span>sum<span class=\"sy1\">,</span> c<span class=\"sy1\">})</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\tsort<span class=\"sy3\">.</span>Sort<span class=\"sy1\">(</span>expressions<span class=\"sy1\">)</span><br/>\u00a0<br/>\t<span class=\"co1\">// Count all unique sums</span><br/>\tsc <span class=\"sy2\">:=</span> sumCount<span class=\"sy1\">{</span>expressions<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>sum<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> expressions<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> e<span class=\"sy3\">.</span>sum <span class=\"sy3\">==</span> sc<span class=\"sy3\">.</span>sum <span class=\"sy1\">{</span><br/>\t\t\tsc<span class=\"sy3\">.</span>count<span class=\"sy2\">++</span><br/>\t\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>\t\t\tcounts <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>counts<span class=\"sy1\">,</span> sc<span class=\"sy1\">)</span><br/>\t\t\tsc <span class=\"sy2\">=</span> sumCount<span class=\"sy1\">{</span>e<span class=\"sy3\">.</span>sum<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">}</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\tcounts <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>counts<span class=\"sy1\">,</span> sc<span class=\"sy1\">)</span><br/>\tsort<span class=\"sy3\">.</span>Sort<span class=\"sy1\">(</span>counts<span class=\"sy1\">)</span><br/>\u00a0<br/>\t<span class=\"co1\">// Extract required results</span><br/>\u00a0<br/>\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"All solutions that sum to 100:\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> sort<span class=\"sy3\">.</span>Search<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>expressions<span class=\"sy1\">),</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> expressions<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>sum &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">100</span><br/>\t<span class=\"sy1\">})</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> expressions<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">:]</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> e<span class=\"sy3\">.</span>sum <span class=\"sy2\">!=</span> <span class=\"nu0\">100</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">break</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>e<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>The positive sum with maximum number of solutions:\"</span><span class=\"sy1\">)</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>counts<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span><br/>\u00a0<br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>The lowest positive number that can't be expressed:\"</span><span class=\"sy1\">)</span><br/>\ts <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> expressions <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> e<span class=\"sy3\">.</span>sum <span class=\"sy3\">==</span> s <span class=\"sy1\">{</span><br/>\t\t\ts<span class=\"sy2\">++</span><br/>\t\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> e<span class=\"sy3\">.</span>sum &gt; s <span class=\"sy1\">{</span><br/>\t\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"% 10d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">)</span><br/>\t\t\t<span class=\"kw1\">break</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>The ten highest numbers that can be expressed:\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> expressions<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>expressions<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">10</span><span class=\"sy1\">:]</span> <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>e<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 76, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Monoid <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> <span class=\"br0\">(</span>comparing<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Arrow <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;&amp;</span>&amp;<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"br0\">(</span>intToDigit<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>replicateM<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>nub<span class=\"sy0\">,</span> group<span class=\"sy0\">,</span> sort<span class=\"sy0\">,</span> sortBy<span class=\"sy0\">,</span> find<span class=\"sy0\">,</span> intercalate<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">data</span> Sign<br/>  <span class=\"sy0\">=</span> Unsigned<br/>  <span class=\"sy0\">|</span> Plus<br/>  <span class=\"sy0\">|</span> Minus<br/>  <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>universe <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> Sign<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>universe <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">9</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;$&gt;</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">/=</span> Plus<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a><span class=\"br0\">)</span> <span class=\"br0\">(</span>replicateM <span class=\"nu0\">9</span> <span class=\"br0\">[</span>Unsigned<span class=\"sy0\">,</span> Plus<span class=\"sy0\">,</span> Minus<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>allNonNegativeSums <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>allNonNegativeSums <span class=\"sy0\">=</span> sort <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>asSum <span class=\"sy0\">&lt;$&gt;</span> universe<span class=\"br0\">)</span><br/>\u00a0<br/>uniqueNonNegativeSums <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>uniqueNonNegativeSums <span class=\"sy0\">=</span> nub allNonNegativeSums<br/>\u00a0<br/>asSum <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> Sign<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>asSum xs <span class=\"sy0\">=</span><br/>  n <span class=\"sy0\">+</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">case</span> s <span class=\"kw1\">of</span><br/>     <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">0</span><br/>     <span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> s <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> s<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr\"><span class=\"kw3\">foldr</span></a> readSign <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> xs<br/>    readSign <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> Sign<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span><br/>    readSign <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> s<span class=\"br0\">)</span><br/>      <span class=\"sy0\">|</span> x <span class=\"sy0\">==</span> Unsigned <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> intToDigit i\u00a0: s<span class=\"br0\">)</span><br/>      <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span><br/>        <span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"kw1\">case</span> x <span class=\"kw1\">of</span><br/>             Plus <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span><br/>             <span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            n<br/>            <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> i <span class=\"sy0\">&lt;&gt;</span> s<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><br/>        <span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>asString <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> Sign<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>asString <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr\"><span class=\"kw3\">foldr</span></a> signedDigit <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">where</span><br/>    signedDigit <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> s<br/>      <span class=\"sy0\">|</span> x <span class=\"sy0\">==</span> Unsigned <span class=\"sy0\">=</span> intToDigit i\u00a0: s<br/>      <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">case</span> x <span class=\"kw1\">of</span><br/>           Plus <span class=\"sy0\">-&gt;</span> <span class=\"st0\">\" +\"</span><br/>           <span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> <span class=\"st0\">\" -\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span><br/>        <span class=\"br0\">[</span>intToDigit i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;&gt;</span><br/>        s<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unlines\"><span class=\"kw3\">unlines</span></a><br/>    <span class=\"br0\">[</span> <span class=\"st0\">\"Sums to 100:\"</span><br/>    <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unlines\"><span class=\"kw3\">unlines</span></a> <span class=\"br0\">(</span>asString <span class=\"sy0\">&lt;$&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">100</span> <span class=\"sy0\">==</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> asSum<span class=\"br0\">)</span> universe<span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>10 commonest sums (sum, number of routes to it):\"</span><br/>    <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> <span class=\"sy0\">&amp;&amp;</span>&amp; <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a><span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span><br/>         <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">10</span> <span class=\"br0\">(</span>sortBy <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <span class=\"br0\">(</span>comparing <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>group allNonNegativeSums<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>First positive integer not expressible as a sum of this kind:\"</span><br/>    <span class=\"sy0\">,</span> maybeReport <span class=\"br0\">(</span>find <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:uncurry\"><span class=\"kw3\">uncurry</span></a> <span class=\"br0\">(</span><span class=\"sy0\">/=</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span> uniqueNonNegativeSums<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>10 largest sums:\"</span><br/>    <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">10</span> <span class=\"br0\">(</span>sortBy <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:compare\"><span class=\"kw3\">compare</span></a><span class=\"br0\">)</span> uniqueNonNegativeSums<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">]</span><br/>  <span class=\"kw1\">where</span><br/>    maybeReport<br/>      <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a> a<br/>      <span class=\"sy0\">=&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>    maybeReport <span class=\"br0\">(</span>Just <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> x<br/>    maybeReport <span class=\"sy0\">_</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"No gaps found\"</span></pre>"}, {"lang": "J", "loc": 12, "block": "<pre class=\"j highlighted_source\">\u00a0<br/>p =: ,\"<span class=\"nu0\">2</span>\".&gt;<span class=\"sy0\">(</span>#: <span class=\"sy0\">(</span>+ i.<span class=\"sy0\">)</span><span class=\"nu0\">2</span>^<span class=\"nu0\">8</span><span class=\"sy0\">)</span> &lt;;.<span class=\"nu0\">1</span> <span class=\"st_h\">'123456789'</span><br/><span class=\"kw2\">m</span> =. <span class=\"sy0\">(</span><span class=\"nu0\">9</span>$<span class=\"nu0\">_1x</span><span class=\"sy0\">)</span>^\"<span class=\"nu0\">1</span>#:i.<span class=\"nu0\">2</span>^<span class=\"nu0\">9</span><br/>s =. <span class=\"nu0\">131072</span> <span class=\"nu0\">9</span> $ ,<span class=\"kw2\">m</span> *\"<span class=\"nu0\">1</span>/ p<br/>s2 =: <span class=\"sy0\">(</span>~: <span class=\"sy0\">(</span><span class=\"nu0\">10x</span>^i.<span class=\"nu0\">_9</span><span class=\"sy0\">)</span>#.s<span class=\"sy0\">)</span>#s<br/>ss =: +/\"<span class=\"nu0\">1</span> s2<br/><span class=\"st_h\">'100='</span>;&lt;<span class=\"st_h\">'bp&lt;+&gt;'</span> <span class=\"nu0\">8</span>!:<span class=\"nu0\">2</span> <span class=\"sy0\">(</span>I.<span class=\"nu0\">100</span>=ss<span class=\"sy0\">)</span>{s2<br/>pos =: <span class=\"sy0\">(</span><span class=\"nu0\">0</span>&lt;ss<span class=\"sy0\">)</span>#ss =: /:~ss<br/><span class=\"sy0\">(</span>{.;<span class=\"st_h\">'times'</span>;{:<span class=\"sy0\">)</span>&gt;{.\\:~<span class=\"sy0\">(</span>#,{.<span class=\"sy0\">)</span> each &lt;/.~ ss<br/><span class=\"st_h\">'Ten largest:'</span>;,.<span class=\"sy0\">(</span>-&gt;:i.<span class=\"nu0\">10</span><span class=\"sy0\">)</span>{ss <br/><span class=\"st_h\">'First not expressible:'</span>;&gt;:pos{~ <span class=\"nu0\">1</span> i.~ <span class=\"nu0\">1</span>&lt;|<span class=\"nu0\">2</span>-/\\pos<br/>\u00a0</pre>"}, {"lang": "Java", "loc": 168, "block": "<pre class=\"java highlighted_source\"><span class=\"coMULTI\">/* <br/> * RossetaCode: Sum to 100, Java 8. <br/> *<br/> * Find solutions to the \"sum to one hundred\" puzzle.<br/> */</span><br/><span class=\"kw1\">package</span> <span class=\"co2\">rosettacode</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.PrintStream</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Collections</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.HashMap</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.HashSet</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Iterator</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Map</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Set</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> SumTo100 <span class=\"kw1\">implements</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arunnable+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Runnable</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">new</span> SumTo100<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">run</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"kw4\">int</span> givenSum<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Expression expression <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Expression<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> Expression.<span class=\"me1\">NUMBER_OF_EXPRESSIONS</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span>, expression.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>expression.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> givenSum<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                expression.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> comment<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> commentString<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>commentString<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @Override<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> run<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">final</span> Stat stat <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Stat<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        comment<span class=\"br0\">(</span><span class=\"st0\">\"Show all solutions that sum to 100\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> givenSum <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>        print<span class=\"br0\">(</span>givenSum<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        comment<span class=\"br0\">(</span><span class=\"st0\">\"Show the sum that has the maximum number of solutions\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> maxCount <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acollections+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Collections</span></a>.<span class=\"me1\">max</span><span class=\"br0\">(</span>stat.<span class=\"me1\">sumCount</span>.<span class=\"me1\">keySet</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> maxSum<span class=\"sy0\">;</span><br/>        Iterator<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> it <span class=\"sy0\">=</span> stat.<span class=\"me1\">sumCount</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span>maxCount<span class=\"br0\">)</span>.<span class=\"me1\">iterator</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            maxSum <span class=\"sy0\">=</span> it.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>maxSum <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>maxSum <span class=\"sy0\">+</span> <span class=\"st0\">\" has \"</span> <span class=\"sy0\">+</span> maxCount <span class=\"sy0\">+</span> <span class=\"st0\">\" solutions\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        comment<span class=\"br0\">(</span><span class=\"st0\">\"Show the lowest positive number that can't be expressed\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> value <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>stat.<span class=\"me1\">countSum</span>.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            value<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        comment<span class=\"br0\">(</span><span class=\"st0\">\"Show the ten highest numbers that can be expressed\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> stat.<span class=\"me1\">countSum</span>.<span class=\"me1\">keySet</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> sums <span class=\"sy0\">=</span> stat.<span class=\"me1\">countSum</span>.<span class=\"me1\">keySet</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toArray</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">(</span>sums<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            print<span class=\"br0\">(</span>sums<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> Expression <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> NUMBER_OF_DIGITS <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span class=\"kw4\">byte</span> ADD <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span class=\"kw4\">byte</span> SUB <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span class=\"kw4\">byte</span> JOIN <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">final</span> <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> code <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">byte</span><span class=\"br0\">[</span>NUMBER_OF_DIGITS<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> NUMBER_OF_EXPRESSIONS <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Expression next<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> NUMBER_OF_DIGITS<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>code<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> JOIN<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    code<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> ADD<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">this</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> toInt<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> value <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> number <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> sign <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> digit <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> digit <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> digit<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>code<span class=\"br0\">[</span>NUMBER_OF_DIGITS <span class=\"sy0\">-</span> digit<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">case</span> ADD<span class=\"sy0\">:</span><br/>                        value <span class=\"sy0\">+=</span> sign <span class=\"sy0\">*</span> number<span class=\"sy0\">;</span><br/>                        number <span class=\"sy0\">=</span> digit<span class=\"sy0\">;</span><br/>                        sign <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">case</span> SUB<span class=\"sy0\">:</span><br/>                        value <span class=\"sy0\">+=</span> sign <span class=\"sy0\">*</span> number<span class=\"sy0\">;</span><br/>                        number <span class=\"sy0\">=</span> digit<span class=\"sy0\">;</span><br/>                        sign <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">case</span> JOIN<span class=\"sy0\">:</span><br/>                        number <span class=\"sy0\">=</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span> number <span class=\"sy0\">+</span> digit<span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> value <span class=\"sy0\">+</span> sign <span class=\"sy0\">*</span> number<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        @Override<br/>        <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            StringBuilder s <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> NUMBER_OF_DIGITS <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> digit <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> digit <span class=\"sy0\">&lt;=</span> NUMBER_OF_DIGITS<span class=\"sy0\">;</span> digit<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>code<span class=\"br0\">[</span>NUMBER_OF_DIGITS <span class=\"sy0\">-</span> digit<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">case</span> ADD<span class=\"sy0\">:</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>digit <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                            s.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">'+'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">case</span> SUB<span class=\"sy0\">:</span><br/>                        s.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">'-'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                s.<span class=\"me1\">append</span><span class=\"br0\">(</span>digit<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> s.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            print<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aprintstream+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">PrintStream</span></a> printStream<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            printStream.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%9d\"</span>, <span class=\"kw1\">this</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            printStream.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\" = \"</span> <span class=\"sy0\">+</span> <span class=\"kw1\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> Stat <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw1\">final</span> Map<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>, Integer<span class=\"sy0\">&gt;</span> countSum <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashMap<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">final</span> Map<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>, Set<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;&gt;</span> sumCount <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashMap<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Stat<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Expression expression <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Expression<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> Expression.<span class=\"me1\">NUMBER_OF_EXPRESSIONS</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span>, expression.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> expression.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                countSum.<span class=\"me1\">put</span><span class=\"br0\">(</span>sum, countSum.<span class=\"me1\">getOrDefault</span><span class=\"br0\">(</span>sum, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amap+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Map</span></a>.<span class=\"me1\">Entry</span><span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>, Integer<span class=\"sy0\">&gt;</span> entry <span class=\"sy0\">:</span> countSum.<span class=\"me1\">entrySet</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Set<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> set<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sumCount.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>entry.<span class=\"me1\">getValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    set <span class=\"sy0\">=</span> sumCount.<span class=\"me1\">get</span><span class=\"br0\">(</span>entry.<span class=\"me1\">getValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    set <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashSet<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                set.<span class=\"me1\">add</span><span class=\"br0\">(</span>entry.<span class=\"me1\">getKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                sumCount.<span class=\"me1\">put</span><span class=\"br0\">(</span>entry.<span class=\"me1\">getValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, set<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 227, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// GENERIC FUNCTIONS ----------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// permutationsWithRepetition\u00a0:: Int -&gt; [a] -&gt; [[a]]</span><br/>    <span class=\"kw1\">var</span> permutationsWithRepetition <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> as<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> as.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span><br/>            foldl1<span class=\"br0\">(</span>curry<span class=\"br0\">(</span>cartesianProduct<span class=\"br0\">)</span><span class=\"br0\">(</span>as<span class=\"br0\">)</span><span class=\"sy0\">,</span> replicate<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> as<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// cartesianProduct\u00a0:: [a] -&gt; [b] -&gt; [[a, b]]</span><br/>    <span class=\"kw1\">var</span> cartesianProduct <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>xs<span class=\"sy0\">,</span> ys<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">concat</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">concat</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> ys.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"br0\">[</span><br/>                    <span class=\"br0\">[</span>x<span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>                <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// curry\u00a0:: ((a, b) -&gt; c) -&gt; a -&gt; b -&gt; c</span><br/>    <span class=\"kw1\">var</span> curry <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// flip\u00a0:: (a -&gt; b -&gt; c) -&gt; b -&gt; a -&gt; c</span><br/>    <span class=\"kw1\">var</span> flip <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> f.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>b<span class=\"sy0\">,</span> a<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// foldl1\u00a0:: (a -&gt; a -&gt; a) -&gt; [a] -&gt; a</span><br/>    <span class=\"kw1\">var</span> foldl1 <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> xs.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">reduce</span><span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// replicate\u00a0:: Int -&gt; a -&gt; [a]</span><br/>    <span class=\"kw1\">var</span> replicate <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> v <span class=\"sy0\">=</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            o <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> o<span class=\"sy0\">;</span><br/>        while <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> o <span class=\"sy0\">=</span> o.<span class=\"me1\">concat</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            n <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            v <span class=\"sy0\">=</span> v.<span class=\"me1\">concat</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> o.<span class=\"me1\">concat</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// group\u00a0:: Eq a =&gt; [a] -&gt; [[a]]</span><br/>    <span class=\"kw1\">var</span> group <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> groupBy<span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> a <span class=\"sy0\">===</span> b<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// groupBy\u00a0:: (a -&gt; a -&gt; Bool) -&gt; [a] -&gt; [[a]]</span><br/>    <span class=\"kw1\">var</span> groupBy <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> dct <span class=\"sy0\">=</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">var</span> h <span class=\"sy0\">=</span> a.<span class=\"me1\">active</span>.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> a.<span class=\"me1\">active</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"kw2\">undefined</span><span class=\"sy0\">,</span><br/>                    blnGroup <span class=\"sy0\">=</span> h <span class=\"sy0\">!==</span> <span class=\"kw2\">undefined</span> <span class=\"sy0\">&amp;&amp;</span> f<span class=\"br0\">(</span>h<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">return</span> <span class=\"br0\">{</span><br/>                    active<span class=\"sy0\">:</span> blnGroup <span class=\"sy0\">?</span> a.<span class=\"me1\">active</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                    sofar<span class=\"sy0\">:</span> blnGroup <span class=\"sy0\">?</span> a.<span class=\"me1\">sofar</span> <span class=\"sy0\">:</span> a.<span class=\"me1\">sofar</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span><span class=\"br0\">[</span>a.<span class=\"me1\">active</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>                active<span class=\"sy0\">:</span> xs.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span>xs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                sofar<span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> dct.<span class=\"me1\">sofar</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>dct.<span class=\"me1\">active</span>.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span>dct.<span class=\"me1\">active</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// compare\u00a0:: a -&gt; a -&gt; Ordering</span><br/>    <span class=\"kw1\">var</span> compare <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> a <span class=\"sy0\">&lt;</span> b <span class=\"sy0\">?</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span> a <span class=\"sy0\">&gt;</span> b <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// on\u00a0:: (b -&gt; b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; a -&gt; c</span><br/>    <span class=\"kw1\">var</span> on <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">,</span> g<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// nub\u00a0:: [a] -&gt; [a]</span><br/>    <span class=\"kw1\">var</span> nub <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> nubBy<span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> a <span class=\"sy0\">===</span> b<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// nubBy\u00a0:: (a -&gt; a -&gt; Bool) -&gt; [a] -&gt; [a]</span><br/>    <span class=\"kw1\">var</span> nubBy <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>p<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> x <span class=\"sy0\">=</span> xs.<span class=\"me1\">length</span> <span class=\"sy0\">?</span> xs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"kw2\">undefined</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> x <span class=\"sy0\">!==</span> <span class=\"kw2\">undefined</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>nubBy<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"sy0\">!</span>p<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// find\u00a0:: (a -&gt; Bool) -&gt; [a] -&gt; Maybe a</span><br/>    <span class=\"kw1\">var</span> find <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> lng <span class=\"sy0\">=</span> xs.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> lng<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>xs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> xs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">undefined</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Int -&gt; [a] -&gt; [a]</span><br/>    <span class=\"kw1\">var</span> take <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// unlines\u00a0:: [String] -&gt; String</span><br/>    <span class=\"kw1\">var</span> unlines <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> xs.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// show\u00a0:: a -&gt; String</span><br/>    <span class=\"kw1\">var</span> show <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> JSON.<span class=\"me1\">stringify</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span> <span class=\"co1\">//, null, 2);</span><br/>\u00a0<br/>    <span class=\"co1\">// head\u00a0:: [a] -&gt; a</span><br/>    <span class=\"kw1\">var</span> head <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> xs.<span class=\"me1\">length</span> <span class=\"sy0\">?</span> xs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"kw2\">undefined</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// tail\u00a0:: [a] -&gt; [a]</span><br/>    <span class=\"kw1\">var</span> tail <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> xs.<span class=\"me1\">length</span> <span class=\"sy0\">?</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw2\">undefined</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// length\u00a0:: [a] -&gt; Int</span><br/>    <span class=\"kw1\">var</span> length <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> xs.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// SIGNED DIGIT SEQUENCES  (mapped to sums and to strings)</span><br/>\u00a0<br/>    <span class=\"co1\">// data Sign\u00a0:: [ 0 | 1 | -1 ] = ( Unsigned | Plus | Minus )</span><br/>    <span class=\"co1\">// asSum\u00a0:: [Sign] -&gt; Int</span><br/>    <span class=\"kw1\">var</span> asSum <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> dct <span class=\"sy0\">=</span> xs.<span class=\"me1\">reduceRight</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> sign<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> d <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">//  zero-based index to [1-9] positions</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sign <span class=\"sy0\">!==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"co1\">// Sum increased, digits cleared</span><br/>                <span class=\"kw1\">return</span> <span class=\"br0\">{</span><br/>                    digits<span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                    n<span class=\"sy0\">:</span> a.<span class=\"me1\">n</span> <span class=\"sy0\">+</span> sign <span class=\"sy0\">*</span> parseInt<span class=\"br0\">(</span><span class=\"br0\">[</span>d<span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>a.<span class=\"me1\">digits</span><span class=\"br0\">)</span><br/>                        .<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">return</span> <span class=\"br0\">{</span> <span class=\"co1\">// Digits extended, sum unchanged</span><br/>                digits<span class=\"sy0\">:</span> <span class=\"br0\">[</span>d<span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>a.<span class=\"me1\">digits</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                n<span class=\"sy0\">:</span> a.<span class=\"me1\">n</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>            digits<span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            n<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> dct.<span class=\"me1\">n</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><br/>            dct.<span class=\"me1\">digits</span>.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> parseInt<span class=\"br0\">(</span>dct.<span class=\"me1\">digits</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// data Sign\u00a0:: [ 0 | 1 | -1 ] = ( Unsigned | Plus | Minus )</span><br/>    <span class=\"co1\">// asString\u00a0:: [Sign] -&gt; String</span><br/>    <span class=\"kw1\">var</span> asString <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> ns <span class=\"sy0\">=</span> xs.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> sign<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> d <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                .<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> sign <span class=\"sy0\">===</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> a <span class=\"sy0\">+</span> d <span class=\"sy0\">:</span> a <span class=\"sy0\">+</span> <span class=\"br0\">(</span>sign <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"st0\">' +'</span> <span class=\"sy0\">:</span> <span class=\"st0\">' -'</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> d<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> ns<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">===</span> <span class=\"st0\">'+'</span> <span class=\"sy0\">?</span> tail<span class=\"br0\">(</span>ns<span class=\"br0\">)</span> <span class=\"sy0\">:</span> ns<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// SUM T0 100 ------------------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// universe\u00a0:: [[Sign]]</span><br/>    <span class=\"kw1\">var</span> universe <span class=\"sy0\">=</span> permutationsWithRepetition<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">!==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// allNonNegativeSums\u00a0:: [Int]</span><br/>    <span class=\"kw1\">var</span> allNonNegativeSums <span class=\"sy0\">=</span> universe.<span class=\"me1\">map</span><span class=\"br0\">(</span>asSum<span class=\"br0\">)</span><br/>        .<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> x <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// uniqueNonNegativeSums\u00a0:: [Int]</span><br/>    <span class=\"kw1\">var</span> uniqueNonNegativeSums <span class=\"sy0\">=</span> nub<span class=\"br0\">(</span>allNonNegativeSums<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"st0\">\"Sums to 100:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> unlines<span class=\"br0\">(</span>universe.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> asSum<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">map</span><span class=\"br0\">(</span>asString<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>10 commonest sums (sum, followed by number of routes to it):<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>        show<span class=\"br0\">(</span>take<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> group<span class=\"br0\">(</span>allNonNegativeSums<span class=\"br0\">)</span><br/>            .<span class=\"me1\">sort</span><span class=\"br0\">(</span>on<span class=\"br0\">(</span>flip<span class=\"br0\">(</span>compare<span class=\"br0\">)</span><span class=\"sy0\">,</span> length<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>xs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"br0\">[</span>xs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> xs.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>First positive integer not expressible as a sum of this kind:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>        show<span class=\"br0\">(</span>find<span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> x <span class=\"sy0\">!==</span> i<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> uniqueNonNegativeSums.<span class=\"me1\">sort</span><span class=\"br0\">(</span>compare<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"co1\">// zero-based index</span><br/>\u00a0<br/>        <span class=\"st0\">\"<span class=\"es0\">\\n</span>10 largest sums:<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>        show<span class=\"br0\">(</span>take<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> uniqueNonNegativeSums.<span class=\"me1\">sort</span><span class=\"br0\">(</span>flip<span class=\"br0\">(</span>compare<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">]</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 21, "block": "<pre class=\"text highlighted_source\"># Generate a \"sum\" in the form:  [I, 1, X, 2, X, 3, ..., X, n] where I is \"-\" or \"\", and X is \"+\", \"-\", or \"\"<br/>def generate(n):<br/>  def pm: [\"+\"], [\"-\"], [\"\"];<br/>\u00a0<br/>  if n == 1 then ([\"-\"], [\"\"]) + [1]<br/>  else generate(n-1) + pm +  [n]<br/>  end;<br/>\u00a0<br/># The numerical value of a \"sum\"<br/>def addup:<br/>  reduce .[] as $x ({sum:0, previous: \"0\"};<br/>     if   $x == \"+\" then .sum += (.previous|tonumber) | .previous = \"\"<br/>     elif $x == \"-\" then .sum += (.previous|tonumber) | .previous = \"-\"<br/>     elif $x == \"\" then .<br/>     else .previous += ($x|tostring)<br/>     end)<br/>     | .sum + (.previous | tonumber)\u00a0;<br/>\u00a0<br/># Pretty-print a \"sum\", e.g. [\"\",1,\"+\", 2] =&gt; 1 + 2<br/>def pp: map(if . == \"+\" or . == \"-\" then \" \" + . else tostring end) | join(\"\");<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 60, "block": "<pre class=\"text highlighted_source\"># v0.6<br/>\u00a0<br/>using IterTools<br/>\u00a0<br/>expr(p::String...)::String = @sprintf(\"%s1%s2%s3%s4%s5%s6%s7%s8%s9\", p...)<br/>function genexpr()::Vector{String}<br/>    op = [\"+\", \"-\", \"\"]<br/>    return collect(expr(p...) for (p) in product(op, op, op, op, op, op, op, op, op) if p[1]\u00a0!= \"+\")<br/>end<br/>\u00a0<br/>using DataStructures<br/>\u00a0<br/>function allexpr()::Dict{Int,Int}<br/>    rst = DefaultDict{Int,Int}(0)<br/>    for e in genexpr()<br/>        val = eval(parse(e))<br/>        rst[val] += 1<br/>    end<br/>    return rst<br/>end<br/>\u00a0<br/>sumto(val::Int)::Vector{String} = filter(e -&gt; eval(parse(e)) == val, genexpr())<br/>function maxsolve()::Dict{Int,Int}<br/>    ae = allexpr()<br/>    vmax = maximum(values(ae))<br/>    smax = filter(ae) do v, f<br/>        f == vmax<br/>    end<br/>    return smax<br/>end<br/>function minsolve()::Int<br/>    ae = keys(allexpr())<br/>    for i in 1:typemax(Int)<br/>        if i \u2209 ae<br/>            return i<br/>        end<br/>    end<br/>end<br/>function highestsums(n::Int)::Vector{Int}<br/>    sums = collect(keys(allexpr()))<br/>    return sort!(sums; rev=true)[1:n]<br/>end<br/>\u00a0<br/>solutions = sumto(100)<br/>max   = maxsolve()<br/>min   = minsolve()<br/>hsums = highestsums(10)<br/>\u00a0<br/>println(\"100 =\")<br/>foreach(println, solutions)<br/>\u00a0<br/>println(\"\\nMax number of solutions:\")<br/>for (v, f) in max<br/>    @printf(\"%3i -&gt;\u00a0%2i\\n\", v, f)<br/>end<br/>\u00a0<br/>println(\"\\nMin number with no solutions: $min\")<br/>\u00a0<br/>println(\"\\nHighest sums representable:\")<br/>foreach(println, hsums)</pre>"}, {"lang": "Kotlin", "loc": 101, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.51</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Expression <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> enum <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Op <span class=\"br0\">{</span> ADD, SUB, JOIN <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> code <span class=\"sy0\">=</span> Array<span class=\"sy0\">&lt;</span>Op<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>NUMBER<span class=\"sy0\">_</span>OF<span class=\"sy0\">_</span>DIGITS<span class=\"br0\">)</span> <span class=\"br0\">{</span> Op.<span class=\"me1\">ADD</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    companion <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> NUMBER<span class=\"sy0\">_</span>OF<span class=\"sy0\">_</span>DIGITS <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> THREE<span class=\"sy0\">_</span>POW<span class=\"sy0\">_</span>4 <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> FMT <span class=\"sy0\">=</span> <span class=\"st0\">\"%9d\"</span><br/>        const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> NUMBER<span class=\"sy0\">_</span>OF<span class=\"sy0\">_</span>EXPRESSIONS <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> THREE<span class=\"sy0\">_</span>POW<span class=\"sy0\">_</span>4 <span class=\"sy0\">*</span> THREE<span class=\"sy0\">_</span>POW<span class=\"sy0\">_</span>4<br/>\u00a0<br/>        fun print<span class=\"br0\">(</span>givenSum<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> expression <span class=\"sy0\">=</span> Expression<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            repeat<span class=\"br0\">(</span>Expression.<span class=\"me1\">NUMBER_OF_EXPRESSIONS</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>expression.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> givenSum<span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"${FMT.format(givenSum)} = $expression\"</span><span class=\"br0\">)</span><br/>                expression++<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    operator fun inc<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Expression <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until code.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            code<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> when <span class=\"br0\">(</span>code<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Op.<span class=\"me1\">ADD</span>  -<span class=\"sy0\">&gt;</span> Op.<span class=\"me1\">SUB</span><br/>                Op.<span class=\"me1\">SUB</span>  -<span class=\"sy0\">&gt;</span> Op.<span class=\"me1\">JOIN</span><br/>                Op.<span class=\"me1\">JOIN</span> -<span class=\"sy0\">&gt;</span> Op.<span class=\"me1\">ADD</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>code<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> Op.<span class=\"me1\">ADD</span><span class=\"br0\">)</span> break<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun toInt<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> value <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> number <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sign <span class=\"sy0\">=</span> +<span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>digit in <span class=\"nu0\">1</span>..<span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            when <span class=\"br0\">(</span>code<span class=\"br0\">[</span>NUMBER<span class=\"sy0\">_</span>OF<span class=\"sy0\">_</span>DIGITS - digit<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Op.<span class=\"me1\">ADD</span>  -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span> value +<span class=\"sy0\">=</span> sign <span class=\"sy0\">*</span> number<span class=\"sy0\">;</span> number <span class=\"sy0\">=</span> digit<span class=\"sy0\">;</span> sign <span class=\"sy0\">=</span> +<span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>                Op.<span class=\"me1\">SUB</span>  -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span> value +<span class=\"sy0\">=</span> sign <span class=\"sy0\">*</span> number<span class=\"sy0\">;</span> number <span class=\"sy0\">=</span> digit<span class=\"sy0\">;</span> sign <span class=\"sy0\">=</span> -<span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>                Op.<span class=\"me1\">JOIN</span> -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span> number <span class=\"sy0\">=</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span> number + digit <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> value + sign <span class=\"sy0\">*</span> number<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sb <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>digit in <span class=\"nu0\">1</span>..<span class=\"me1\">NUMBER_OF_DIGITS</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            when <span class=\"br0\">(</span>code<span class=\"br0\">[</span>NUMBER<span class=\"sy0\">_</span>OF<span class=\"sy0\">_</span>DIGITS - digit<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Op.<span class=\"me1\">ADD</span>  -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>digit <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\" + \"</span><span class=\"br0\">)</span><br/>                Op.<span class=\"me1\">SUB</span>  -<span class=\"sy0\">&gt;</span> sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\" - \"</span><span class=\"br0\">)</span><br/>                Op.<span class=\"me1\">JOIN</span> -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>digit<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">trimStart</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Stat <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> countSum <span class=\"sy0\">=</span> mutableMapOf<span class=\"sy0\">&lt;</span>Int, Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sumCount <span class=\"sy0\">=</span> mutableMapOf<span class=\"sy0\">&lt;</span>Int, MutableSet<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> expression <span class=\"sy0\">=</span> Expression<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        repeat <span class=\"br0\">(</span>Expression.<span class=\"me1\">NUMBER_OF_EXPRESSIONS</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sum <span class=\"sy0\">=</span> expression.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            countSum.<span class=\"me1\">put</span><span class=\"br0\">(</span>sum, <span class=\"nu0\">1</span> + <span class=\"br0\">(</span>countSum<span class=\"br0\">[</span>sum<span class=\"br0\">]</span> <span class=\"sy0\">?:</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            expression++<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>k, v<span class=\"br0\">)</span> in countSum<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> set <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>sumCount.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                sumCount<span class=\"br0\">[</span>v<span class=\"br0\">]</span><span class=\"sy0\">!!</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>                mutableSetOf<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            set.<span class=\"me1\">add</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><br/>            sumCount.<span class=\"me1\">put</span><span class=\"br0\">(</span>v, set<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"100 has the following solutions:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    Expression.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> stat <span class=\"sy0\">=</span> Stat<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> maxCount <span class=\"sy0\">=</span> stat.<span class=\"me1\">sumCount</span>.<span class=\"me1\">keys</span>.<span class=\"me1\">max</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> maxSum <span class=\"sy0\">=</span> stat.<span class=\"me1\">sumCount</span><span class=\"br0\">[</span>maxCount<span class=\"br0\">]</span><span class=\"sy0\">!!</span>.<span class=\"me1\">max</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>$maxSum has the maximum number of solutions, namely $maxCount\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> value <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>stat.<span class=\"me1\">countSum</span>.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"br0\">)</span> value++<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>$value is the lowest positive number with no solutions\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>The ten highest numbers that do have solutions are:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    stat.<span class=\"me1\">countSum</span>.<span class=\"me1\">keys</span>.<span class=\"me1\">toIntArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">sorted</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">reversed</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> Expression.<span class=\"me1\">print</span><span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 5, "block": "<pre class=\"text highlighted_source\">operations = <br/>  DeleteCases[Tuples[{\"+\", \"-\", \"\"}, 9], {x_, y__} /; x == \"+\"];<br/>\u00a0<br/>sums = <br/>  Map[StringJoin[Riffle[#, CharacterRange[\"1\", \"9\"]]] &amp;, operations];</pre>"}, {"lang": "Nim", "loc": 77, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import strutils<br/>\u00a0<br/>var<br/>  ligne: string = \"\"<br/>  sum: int<br/>  opera: array[0..9, int] = [0,0,1,1,1,1,1,1,1,1]<br/>  curseur: int = 9<br/>  boucle: bool<br/>  tot: array[1..123456789, int]<br/>  pG: int<br/>  plusGrandes: array[1..10, string]<br/>\u00a0<br/>let<br/>  ope: array[0..3, string] = [\"-\",\"\",\" +\",\" -\"]<br/>  aAtteindre = 100<br/>\u00a0<br/>proc calcul(li: string): int =<br/>  var liS: seq[string]<br/>  liS = split(li,\" \")<br/>  for i in liS:<br/>    result += parseInt(i)<br/>\u00a0<br/>echo \"Valeur \u00e0 atteindre\u00a0: \",aAtteindre<br/>\u00a0<br/>while opera[1]&lt;2:<br/>  ligne.add(ope[opera[1]])<br/>  ligne.add(\"1\")<br/>  for i in 2..9:<br/>    ligne.add(ope[opera[i]])<br/>    ligne.add($i)<br/>  sum = calcul(ligne)<br/>  if sum == aAtteindre:<br/>    stdout.write(ligne)<br/>    echo \" = \",sum<br/>  if sum&gt;0:<br/>    tot[sum] += 1<br/>    pG = 1<br/>    while pG&lt;10:<br/>      if sum&gt;calcul(plusGrandes[pG]):<br/>        for k in countdown(10,pG+1):<br/>          plusGrandes[k]=plusGrandes[k-1]<br/>        plusGrandes[pG]=ligne<br/>        pG = 11<br/>      pG += 1<br/>  ligne = \"\"<br/>  boucle = true<br/>  while boucle:<br/>    opera[curseur] += 1<br/>    if opera[curseur] == 4:<br/>      opera[curseur]=1<br/>      curseur -= 1<br/>    else:<br/>      curseur = 9<br/>      boucle = false<br/>\u00a0<br/>echo \"Valeur atteinte \",tot[aAtteindre],\" fois.\"<br/>echo \"\"<br/>\u00a0<br/>var<br/>  min0: int = 0<br/>  max: int = 0<br/>  valmax: int = 0<br/>\u00a0<br/>for i in 1..123456789:<br/>  if tot[i]==0 and min0 == 0:<br/>    min0 = i<br/>  if tot[i]&gt;max:<br/>    max = tot[i]<br/>    valmax = i<br/>\u00a0<br/>echo \"Plus petite valeur ne pouvant pas \u00eatre atteinte\u00a0: \",min0<br/>echo \"Valeur atteinte le plus souvent\u00a0: \",valmax,\", atteinte \",max,\" fois.\"<br/>echo \"\"<br/>echo \"Plus grandes valeurs pouvant \u00eatre atteintes\u00a0:\"<br/>for i in 1..10:<br/>  echo calcul(plusGrandes[i]),\" = \",plusGrandes[i]</pre>"}, {"lang": "Pascal", "loc": 126, "block": "<pre class=\"pascal highlighted_source\"><span class=\"coMULTI\">{ RossetaCode: Sum to 100, Pascal.<br/>\u00a0<br/>  Find solutions to the \"sum to one hundred\" puzzle.<br/>\u00a0<br/>  We don't use arrays, but recompute all values again and again. <br/>  It is a little surprise that the time efficiency is quite acceptable. }</span><br/>\u00a0<br/><span class=\"kw1\">program</span> sumto100<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  ADD <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> SUB <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> JOIN <span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> <span class=\"coMULTI\">{ opcodes inserted between digits }</span><br/>  NEXPR <span class=\"sy3\">=</span> <span class=\"nu0\">13122</span><span class=\"sy1\">;</span>              <span class=\"coMULTI\">{ the total number of expressions }</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span> j<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  loop<span class=\"sy1\">:</span> <span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/>  test<span class=\"sy1\">,</span> ntest<span class=\"sy1\">,</span> best<span class=\"sy1\">,</span> nbest<span class=\"sy1\">,</span> limit<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> evaluate<span class=\"br0\">(</span>code<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    k<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>    value<span class=\"sy1\">,</span> number<span class=\"sy1\">,</span> power<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    value  <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    number <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    power  <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span>  k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">9</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      number <span class=\"sy1\">:</span><span class=\"sy3\">=</span> power <span class=\"sy3\">*</span> k <span class=\"sy3\">+</span> number<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">case</span> code <span class=\"kw1\">mod</span> <span class=\"nu0\">3</span> <span class=\"kw1\">of</span><br/>        ADD<span class=\"sy1\">:</span> <span class=\"kw1\">begin</span> value <span class=\"sy1\">:</span><span class=\"sy3\">=</span> value <span class=\"sy3\">+</span> number<span class=\"sy1\">;</span> number <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> power <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>        SUB<span class=\"sy1\">:</span> <span class=\"kw1\">begin</span> value <span class=\"sy1\">:</span><span class=\"sy3\">=</span> value <span class=\"sy3\">-</span> number<span class=\"sy1\">;</span> number <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> power <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>        JOIN<span class=\"sy1\">:</span>                                            power <span class=\"sy1\">:</span><span class=\"sy3\">=</span> power <span class=\"sy3\">*</span> <span class=\"nu0\">10</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      code <span class=\"sy1\">:</span><span class=\"sy3\">=</span> code <span class=\"kw1\">div</span> <span class=\"nu0\">3</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    evaluate <span class=\"sy1\">:</span><span class=\"sy3\">=</span> value<br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">procedure</span> print<span class=\"br0\">(</span>code<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    k<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>    a<span class=\"sy1\">,</span> b<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    a <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">19683</span><span class=\"sy1\">;</span><br/>    b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">6561</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span> evaluate<span class=\"br0\">(</span>code<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">9</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">' = '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span>  k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">9</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">case</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>code <span class=\"kw1\">mod</span> a<span class=\"br0\">)</span> <span class=\"kw1\">div</span> b<span class=\"br0\">)</span> <span class=\"kw1\">of</span><br/>        ADD<span class=\"sy1\">:</span> <span class=\"kw1\">if</span> k &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'+'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        SUB<span class=\"sy1\">:</span> <span class=\"coMULTI\">{ always }</span>    <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">'-'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      a <span class=\"sy1\">:</span><span class=\"sy3\">=</span> b<span class=\"sy1\">;</span><br/>      b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> b <span class=\"kw1\">div</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">write</span><span class=\"br0\">(</span> k<span class=\"sy1\">:</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Show all solutions that sum to 100'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> NEXPR <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> evaluate<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">100</span> <span class=\"kw1\">then</span><br/>      print<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Show the sum that has the maximum number of solutions'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  nbest <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> NEXPR <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    test <span class=\"sy1\">:</span><span class=\"sy3\">=</span> evaluate<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> test &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      ntest <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> NEXPR <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> evaluate<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy3\">=</span> test <span class=\"kw1\">then</span><br/>          ntest <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ntest <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> ntest &gt; nbest <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">begin</span><br/>        best <span class=\"sy1\">:</span><span class=\"sy3\">=</span> test<span class=\"sy1\">;</span><br/>        nbest <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ntest<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>best<span class=\"sy1\">,</span> <span class=\"st0\">' has '</span><span class=\"sy1\">,</span> nbest<span class=\"sy1\">,</span> <span class=\"st0\">' solutions'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Show the lowest positive number that can'</span><span class=\"st0\">'t be expressed'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  loop <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">TRUE</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>i &lt;<span class=\"sy3\">=</span> <span class=\"nu0\">123456789</span><span class=\"br0\">)</span> <span class=\"kw3\">and</span> loop <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>j &lt; NEXPR <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">and</span> <span class=\"br0\">(</span>i &lt;&gt; evaluate<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> j <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> i &lt;&gt; evaluate<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      loop <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">FALSE</span><br/>    <span class=\"kw1\">else</span><br/>      i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Show the ten highest numbers that can be expressed'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  limit <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">123456789</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    best <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> NEXPR <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      test <span class=\"sy1\">:</span><span class=\"sy3\">=</span> evaluate<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>test &lt; limit<span class=\"br0\">)</span> <span class=\"kw3\">and</span> <span class=\"br0\">(</span>test &gt; best<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        best <span class=\"sy1\">:</span><span class=\"sy3\">=</span> test<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> NEXPR <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> evaluate<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy3\">=</span> best <span class=\"kw1\">then</span><br/>        print<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    limit <span class=\"sy1\">:</span><span class=\"sy3\">=</span> best<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 62, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> feature <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">{</span> say <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$string</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'123456789'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$length</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> <span class=\"re0\">$string</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@possible_ops</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"\"</span> <span class=\"sy0\">,</span> <span class=\"st_h\">'+'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'-'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@ops</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">sub</span> Next <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">@ops</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> x <span class=\"br0\">(</span><span class=\"re0\">$length</span><span class=\"br0\">)</span> <span class=\"kw1\">unless</span> <span class=\"re0\">@ops</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$ops</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">++</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$#possible_ops</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$ops</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">next</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"co1\"># + before the first number</span><br/>            <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"nu0\">0</span> <span class=\"sy0\">==</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"st_h\">'+'</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$possible_ops</span><span class=\"br0\">[</span> <span class=\"re0\">$ops</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">@ops</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> evaluate <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$expression</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$sum</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <span class=\"co5\">$_</span> <span class=\"kw1\">for</span> <span class=\"re0\">$expression</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/([-+]?[0-9]+)/g</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$sum</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%count</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"kw1\">my</span> <span class=\"re0\">$max_count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>say <span class=\"st_h\">'Show all solutions that sum to 100'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">@ops</span> <span class=\"sy0\">=</span> Next<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$expression</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$expression</span> <span class=\"sy0\">.=</span> <span class=\"re0\">$possible_ops</span><span class=\"br0\">[</span> <span class=\"re0\">$ops</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$expression</span> <span class=\"sy0\">.=</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a> <span class=\"re0\">$string</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> evaluate<span class=\"br0\">(</span><span class=\"re0\">$expression</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"sy0\">++</span><span class=\"re0\">$count</span><span class=\"br0\">{</span><span class=\"re0\">$sum</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$max_count</span> <span class=\"sy0\">=</span> <span class=\"re0\">$sum</span> <span class=\"kw1\">if</span> <span class=\"re0\">$count</span><span class=\"br0\">{</span><span class=\"re0\">$sum</span><span class=\"br0\">}</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$count</span><span class=\"br0\">{</span><span class=\"re0\">$max_count</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    say <span class=\"re0\">$expression</span> <span class=\"kw1\">if</span> <span class=\"nu0\">100</span> <span class=\"sy0\">==</span> <span class=\"re0\">$sum</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"st_h\">'Show the sum that has the maximum number of solutions'</span><span class=\"sy0\">;</span><br/>say <span class=\"st0\">\"sum: $max_count; solutions: $count{$max_count}\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">++</span><span class=\"re0\">$n</span> <span class=\"kw1\">until</span> <span class=\"sy0\">!</span> <a href=\"http://perldoc.perl.org/functions/exists.html\"><span class=\"kw3\">exists</span></a> <span class=\"re0\">$count</span><span class=\"br0\">{</span><span class=\"re0\">$n</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>say <span class=\"st0\">\"Show the lowest positive sum that can't be expressed\"</span><span class=\"sy0\">;</span><br/>say <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>\u00a0<br/>say <span class=\"st_h\">'Show the ten highest numbers that can be expressed'</span><span class=\"sy0\">;</span><br/>say <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <span class=\"br0\">{</span> <span class=\"re0\">$b</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"re0\">$a</span> <span class=\"br0\">}</span> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%count</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 19, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$N</span>   <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@ops</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st_h\">'-'</span><span class=\"sy0\">,</span> <span class=\"st_h\">''</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"st_h\">' + '</span><span class=\"sy0\">,</span> <span class=\"st_h\">' - '</span><span class=\"sy0\">,</span> <span class=\"st_h\">''</span><span class=\"br0\">]</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">8</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@str</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw1\">X</span><span class=\"sy0\">~</span><span class=\"br0\">]</span> <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"me1\">Slip</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span> <span class=\"re0\">@ops</span> <span class=\"kw1\">Z</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">9</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">%sol</span> <span class=\"sy0\">=</span> <span class=\"re0\">@str</span><span class=\"sy0\">.</span><span class=\"kw3\">classify</span><span class=\"sy0\">:</span> <span class=\"sy0\">*.</span><span class=\"kw3\">subst</span><span class=\"br0\">(</span> <span class=\"st_h\">' - '</span><span class=\"sy0\">,</span> <span class=\"st_h\">' -'</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>g <span class=\"br0\">)</span>\\<br/>                          <span class=\"sy0\">.</span><span class=\"kw3\">subst</span><span class=\"br0\">(</span> <span class=\"st_h\">' + '</span><span class=\"sy0\">,</span>  <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>g <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">words</span><span class=\"sy0\">.</span><span class=\"me1\">sum</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%count</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"sy0\">:</span> <span class=\"re0\">%sol</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"me1\">value</span><span class=\"sy0\">.</span><span class=\"kw3\">elems</span> <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">.</span><span class=\"me1\">key</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$max</span><span class=\"sy0\">-</span>solutions    <span class=\"sy0\">=</span> <span class=\"re0\">%count</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span><span class=\"br0\">(</span> <span class=\"sy0\">+</span> <span class=\"sy0\">*.</span><span class=\"me1\">key</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$first</span><span class=\"sy0\">-</span>unsolvable <span class=\"sy0\">=</span> <span class=\"kw3\">first</span> <span class=\"br0\">{</span> <span class=\"re0\">%sol</span><span class=\"br0\">{</span><span class=\"re0\">$_</span><span class=\"br0\">}</span> <span class=\"sy0\">:!</span><span class=\"kw3\">exists</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">..*;</span><br/><span class=\"kw2\">sub</span> n<span class=\"sy0\">-</span>largest<span class=\"sy0\">-</span>sums <span class=\"br0\">(</span>Int <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">%sol</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"br0\">(</span><span class=\"sy0\">-*.</span><span class=\"me1\">key</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"sy0\">:</span> <span class=\"st0\">\"%8s =&gt;\u00a0%s<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">given</span> <span class=\"re0\">%sol</span><span class=\"br0\">{</span><span class=\"re0\">$sum</span><span class=\"br0\">}</span><span class=\"sy0\">:</span>p <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"{.value.elems} solutions for sum {.key}:\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"    $_\"</span> <span class=\"kw1\">for</span> <span class=\"sy0\">.</span><span class=\"me1\">value</span><span class=\"sy0\">.</span><span class=\"me1\">list</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> <span class=\"sy0\">:</span><span class=\"re0\">$max</span><span class=\"sy0\">-</span>solutions<span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$first</span><span class=\"sy0\">-</span>unsolvable<span class=\"sy0\">,</span> <span class=\"st0\">\"$N largest sums:\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">-</span>largest<span class=\"sy0\">-</span>sums<span class=\"br0\">(</span><span class=\"re0\">$N</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 83, "block": "<pre class=\"text highlighted_source\">enum SUB=-1, NOP=0, ADD=1<br/>\u00a0<br/>function eval(sequence s)<br/>integer res = 0, this = 0, op = ADD<br/>    for i=1 to length(s) do<br/>        if s[i]=NOP then<br/>            this = this*10+i<br/>        else<br/>            res += op*this<br/>            this = i<br/>            op = s[i]<br/>        end if<br/>    end for<br/>    return res + op*this<br/>end function<br/>\u00a0<br/>procedure show(sequence s)<br/>string res = \"\"<br/>    for i=1 to length(s) do<br/>        if s[i]!=NOP then<br/>            res &amp;= ','-s[i]<br/>        end if          <br/>        res &amp;= '0'+i<br/>    end for<br/>    puts(1,res&amp;\" = \")<br/>end procedure<br/>\u00a0<br/>-- Logically this intersperses -/nop/+ between each digit, but you do not actually need the digit.<br/>sequence s = repeat(SUB,9)  -- (==&gt; ..nop+add*8)<br/>\u00a0<br/>bool done = false<br/>integer maxl = 0, maxr<br/>integer count = 0<br/>while not done do<br/>    count += 1<br/>    integer r = eval(s), k = getd_index(r)<br/>    sequence solns = iff(k=0?{s}:append(getd_by_index(k),s))<br/>    setd(r,solns)<br/>    if r&gt;0 and maxl&lt;length(solns) then<br/>        maxl = length(solns)<br/>        maxr = r<br/>    end if<br/>    for i=length(s) to 1 by -1 do<br/>        if i=1 and s[i]=NOP then<br/>            done = true<br/>            exit<br/>        elsif s[i]!=ADD then<br/>            s[i] += 1<br/>            exit<br/>        end if<br/>        s[i] = SUB<br/>    end for<br/>end while<br/>\u00a0<br/>printf(1,\"%d solutions considered (dictionary size:\u00a0%d)\\n\",{count,dict_size()})<br/>\u00a0<br/>sequence s100 = getd(100)<br/>printf(1,\"There are\u00a0%d sums to 100:\\n\",{length(s100)})<br/>for i=1 to length(s100) do<br/>    show(s100[i])<br/>   \u00a0?100<br/>end for<br/>\u00a0<br/>printf(1,\"The positive sum of\u00a0%d has the maximum number of solutions:\u00a0%d\\n\",{maxr,maxl})<br/>\u00a0<br/>integer prev = 0<br/>function missing(integer key, sequence /*data*/, integer /*pkey*/, object /*user_data=-2*/)<br/>    if key!=prev+1 then<br/>        return 0<br/>    end if<br/>    prev = key<br/>    return 1<br/>end function<br/>traverse_dict_partial_key(routine_id(\"missing\"),1)<br/>printf(1,\"The lowest positive sum that cannot be expressed:\u00a0%d\\n\",{prev+1})<br/>\u00a0<br/>sequence highest = {}<br/>function top10(integer key, sequence /*data*/, object /*user_data*/)<br/>    highest &amp;= key<br/>    return length(highest)&lt;10<br/>end function<br/>traverse_dict(routine_id(\"top10\"),rev:=1)<br/>printf(1,\"The 10 highest sums: \")\u00a0?highest</pre>"}, {"lang": "Python", "loc": 51, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> product<span class=\"sy0\">,</span> islice<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> expr<span class=\"br0\">(</span>p<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"{}1{}2{}3{}4{}5{}6{}7{}8{}9\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>*p<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> gen_expr<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    op <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'+'</span><span class=\"sy0\">,</span> <span class=\"st0\">'-'</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>expr<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> product<span class=\"br0\">(</span>op<span class=\"sy0\">,</span> repeat<span class=\"sy0\">=</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"st0\">'+'</span><span class=\"br0\">]</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> all_exprs<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    values <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> expr <span class=\"kw1\">in</span> gen_expr<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>        val <span class=\"sy0\">=</span> <span class=\"kw2\">eval</span><span class=\"br0\">(</span>expr<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> val <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> values:<br/>            values<span class=\"br0\">[</span>val<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">else</span>:<br/>            values<span class=\"br0\">[</span>val<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">return</span> values<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> sum_to<span class=\"br0\">(</span>val<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> <span class=\"kw2\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">lambda</span> x: x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> val<span class=\"sy0\">,</span> <span class=\"kw2\">map</span><span class=\"br0\">(</span><span class=\"kw1\">lambda</span> x: <span class=\"br0\">(</span><span class=\"kw2\">eval</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">,</span> gen_expr<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> max_solve<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Sum {} has the maximum number of solutions: {}\"</span>.<br/>          <span class=\"me1\">format</span><span class=\"br0\">(</span>*<span class=\"kw2\">max</span><span class=\"br0\">(</span>all_exprs<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">items</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> key<span class=\"sy0\">=</span><span class=\"kw1\">lambda</span> x: x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> min_solve<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    values <span class=\"sy0\">=</span> all_exprs<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">123456789</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> i <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> values:<br/>            <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Lowest positive sum that can't be expressed: {}\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> highest_sums<span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>:<br/>    sums <span class=\"sy0\">=</span> <span class=\"kw2\">map</span><span class=\"br0\">(</span><span class=\"kw1\">lambda</span> x: x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>               islice<span class=\"br0\">(</span><span class=\"kw2\">sorted</span><span class=\"br0\">(</span>all_exprs<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">items</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> key<span class=\"sy0\">=</span><span class=\"kw1\">lambda</span> x: x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> reverse<span class=\"sy0\">=</span><span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Highest Sums: {}\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"kw2\">list</span><span class=\"br0\">(</span>sums<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>sum_to<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>max_solve<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>min_solve<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>highest_sums<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 67, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define list-partitions<br/>  (match-lambda<br/>    [(list) (list null)]<br/>    [(and L (list _)) (list (list L))]<br/>    [(list L ...)<br/>     (for*/list<br/>          ((i (in-range 1 (add1 (length L))))<br/>           (r (in-list (list-partitions (drop L i)))))<br/>        (cons (take L i) r))]))<br/>\u00a0<br/>(define digits-&gt;number (curry foldl (\u03bb (dgt acc) (+ (* 10 acc) dgt)) 0))<br/>\u00a0<br/>(define partition-digits-to-numbers<br/>  (let ((memo (make-hash)))<br/>    (\u03bb (dgts)<br/>      (hash-ref! memo dgts<br/>                 (\u03bb ()<br/>                   (map (\u03bb (p) (map digits-&gt;number p))<br/>                        (list-partitions dgts)))))))<br/>\u00a0<br/>(define (fold-sum-to-ns digits kons k0)<br/>  (define (get-solutions nmbrs acc chain k)<br/>    (match nmbrs<br/>      [(list)<br/>       (kons (cons acc (let ((niahc (reverse chain)))             <br/>                         (if (eq? '+ (car niahc)) (cdr niahc) niahc)))<br/>             k)]<br/>      [(cons a d)<br/>       (get-solutions d (- acc a) (list* a '- chain)<br/>                      (get-solutions d (+ acc a) (list* a '+ chain) k))]))<br/>  (foldl (\u03bb (nmbrs k) (get-solutions nmbrs 0 null k)) k0 (partition-digits-to-numbers digits)))<br/>\u00a0<br/>(define sum-to-ns/hash-promise<br/>  (delay (fold-sum-to-ns<br/>          '(1 2 3 4 5 6 7 8 9)<br/>          (\u03bb (a.s d) (hash-update d (car a.s) (\u03bb (x) (cons (cdr a.s) x)) list))<br/>          (hash))))<br/>\u00a0<br/>(module+ main<br/>  (define S (force sum-to-ns/hash-promise))<br/>  (displayln \"Show all solutions that sum to 100\")<br/>  (pretty-print (hash-ref S 100))<br/>\u00a0<br/>  (displayln \"Show the sum that has the maximum number of solutions (from zero to infinity*)\")<br/>  (let-values (([k-max v-max]<br/>                (for/fold ((k-max #f) (v-max 0))<br/>                          (([k v] (in-hash S)) #:when (&gt; (length v) v-max))<br/>                  (values k (length v)))))<br/>    (printf \"~a has ~a solutions~%\" k-max v-max))<br/>\u00a0<br/>  (displayln \"Show the lowest positive sum that can't be expressed (has no solutions),<br/> using the rules for this task\")<br/>  (for/first ((n (in-range 1 (add1 123456789))) #:unless (hash-has-key? S n)) n)<br/>\u00a0<br/>  (displayln \"Show the ten highest numbers that can be expressed using the rules for this task\")<br/>  (take (sort (hash-keys S) &gt;) 10))<br/>\u00a0<br/>(module+ test<br/>  (require rackunit)<br/>  (check-equal? (list-partitions null) '(()))<br/>  (check-equal? (list-partitions '(1)) '(((1))))<br/>  (check-equal? (list-partitions '(1 2)) '(((1) (2)) ((1 2))))<br/>  (check-equal? (partition-digits-to-numbers '()) '(()))<br/>  (check-equal? (partition-digits-to-numbers '(1)) '((1)))<br/>  (check-equal? (partition-digits-to-numbers '(1 2)) '((1 2) (12))))</pre>"}, {"lang": "REXX", "loc": 51, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm solves a puzzle:  using the string 123456789, insert  -  or  +  to sum to 100*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> LO HI <span class=\"sy0\">.</span>                                <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> LO==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> LO==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> LO=<span class=\"nu0\">100</span>                 <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> HI==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> HI==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> HI=LO                  <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">if</span> LO==00            <span class=\"kw3\">then</span> HI=<span class=\"nu0\">123456789</span>           <span class=\"coMULTI\">/*LOW specified as zero with leading 0.*/</span><br/>ops= <span class=\"st0\">'+-'</span>;             L=<span class=\"kw6\">length</span><span class=\"br0\">(</span>ops<span class=\"br0\">)</span> + <span class=\"nu0\">1</span>         <span class=\"coMULTI\">/*define operators (and their length). */</span><br/>@<span class=\"sy0\">.</span>=;        <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> L-<span class=\"nu0\">1</span>;  @<span class=\"sy0\">.</span>i=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>ops,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*   \"   some handy-dandy REXX literals*/</span><br/>            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*i*/</span>                          <span class=\"coMULTI\">/*   \"   individual operators for speed*/</span><br/>mx=<span class=\"nu0\">0</span>;  mn=<span class=\"nu0\">999999</span>                                 <span class=\"coMULTI\">/*initialize the minimums and maximums.*/</span><br/>mxL=;  mnL=;       <span class=\"kw1\">do</span> j=LO  <span class=\"kw2\">to</span> HI  <span class=\"kw2\">until</span> LO==00  <span class=\"sy0\">&amp;</span>  mn==<span class=\"nu0\">0</span>   <span class=\"coMULTI\">/*solve with a range of sums*/</span><br/>                   z=solve<span class=\"br0\">(</span>j<span class=\"br0\">)</span>                               <span class=\"coMULTI\">/*find # of solutions for J.*/</span><br/>                   <span class=\"kw1\">if</span> z<span class=\"sy0\">&gt;</span> mx  <span class=\"kw3\">then</span> mxL=                      <span class=\"coMULTI\">/*see if this is a new max. */</span><br/>                   <span class=\"kw1\">if</span> z<span class=\"sy0\">&gt;</span>=mx  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; mxL=mxL j; mx=z; <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*remember this new maximum.*/</span><br/>                   <span class=\"kw1\">if</span> z<span class=\"sy0\">&lt;</span> mn  <span class=\"kw3\">then</span> mnL=                      <span class=\"coMULTI\">/*see if this is a new min. */</span><br/>                   <span class=\"kw1\">if</span> z<span class=\"sy0\">&lt;</span>=mn  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; mnL=mnL j; mn=z; <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*remember this new minimum.*/</span><br/>                   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">if</span> LO==HI <span class=\"kw3\">then</span> <span class=\"kw1\">exit</span>                                         <span class=\"coMULTI\">/*don't display max &amp; min\u00a0? */</span><br/>@@= <span class=\"st0\">'number of solutions: '</span>;   <span class=\"kw1\">say</span><br/>_=<span class=\"kw6\">words</span><span class=\"br0\">(</span>mxL<span class=\"br0\">)</span>;  <span class=\"kw1\">say</span> <span class=\"st0\">'sum'</span>s<span class=\"br0\">(</span>_<span class=\"br0\">)</span>   <span class=\"st0\">\"of\"</span>   mxL  <span class=\"st0\">' '</span>s<span class=\"br0\">(</span>_,<span class=\"st0\">\"have\"</span>,<span class=\"st0\">'has'</span><span class=\"br0\">)</span>   <span class=\"st0\">'the maximum'</span>    @@   mx<br/>_=<span class=\"kw6\">words</span><span class=\"br0\">(</span>mnL<span class=\"br0\">)</span>;  <span class=\"kw1\">say</span> <span class=\"st0\">'sum'</span>s<span class=\"br0\">(</span>_<span class=\"br0\">)</span>   <span class=\"st0\">\"of\"</span>   mnL  <span class=\"st0\">' '</span>s<span class=\"br0\">(</span>_,<span class=\"st0\">\"have\"</span>,<span class=\"st0\">'has'</span><span class=\"br0\">)</span>   <span class=\"st0\">'the minimum'</span>    @@   mn<br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>s:     <span class=\"kw1\">if</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>;  <span class=\"kw1\">return</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"st0\">\"s\"</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*simple pluralizer*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>solve: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> answer;         # =<span class=\"nu0\">0</span>            <span class=\"coMULTI\">/*obtain the answer (sum) to the puzzle*/</span><br/>          <span class=\"kw1\">do</span> a=L-<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> L;        aa=      @<span class=\"sy0\">.</span>a<span class=\"st0\">'1'</span> <span class=\"coMULTI\">/*choose one  of  \u2500       or  nothing. */</span><br/>           <span class=\"kw1\">do</span> b=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> L;        bb=aa <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>b<span class=\"st0\">'2'</span> <span class=\"coMULTI\">/*   \"    \"    \"  \u2500   +,  or  abutment.*/</span><br/>            <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> L;       cc=bb <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>c<span class=\"st0\">'3'</span> <span class=\"coMULTI\">/*   \"    \"    \"  \"   \"    \"      \"    */</span><br/>             <span class=\"kw1\">do</span> d=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> L;      dd=cc <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>d<span class=\"st0\">'4'</span> <span class=\"coMULTI\">/*   \"    \"    \"  \"   \"    \"      \"    */</span><br/>              <span class=\"kw1\">do</span> e=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> L;     ee=dd <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>e<span class=\"st0\">'5'</span> <span class=\"coMULTI\">/*   \"    \"    \"  \"   \"    \"      \"    */</span><br/>               <span class=\"kw1\">do</span> f=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> L;    ff=ee <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>f<span class=\"st0\">'6'</span> <span class=\"coMULTI\">/*   \"    \"    \"  \"   \"    \"      \"    */</span><br/>                <span class=\"kw1\">do</span> g=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> L;   gg=ff <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>g<span class=\"st0\">'7'</span> <span class=\"coMULTI\">/*   \"    \"    \"  \"   \"    \"      \"    */</span><br/>                 <span class=\"kw1\">do</span> h=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> L;  hh=gg <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>h<span class=\"st0\">'8'</span> <span class=\"coMULTI\">/*   \"    \"    \"  \"   \"    \"      \"    */</span><br/>                  <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> L; ii=hh <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>i<span class=\"st0\">'9'</span> <span class=\"coMULTI\">/*   \"    \"    \"  \"   \"    \"      \"    */</span><br/>                  <span class=\"kw1\">interpret</span> <span class=\"st0\">'$='</span> ii              <span class=\"coMULTI\">/*calculate the sum of modified string.*/</span><br/>                  <span class=\"kw1\">if</span> $<span class=\"sy0\">\\</span>==answer  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>    <span class=\"coMULTI\">/*Is sum not equal to answer? Then skip*/</span><br/>                  #=#+<span class=\"nu0\">1</span>;         <span class=\"kw1\">if</span> LO==HI  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'solution: '</span>    $    <span class=\"st0\">\" \u25c4\u2500\u2500\u2500\u25ba \"</span>     ii<br/>                  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*i*/</span><br/>                 <span class=\"kw3\">end</span>    <span class=\"coMULTI\">/*h*/</span><br/>                <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*g*/</span><br/>               <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*f*/</span><br/>              <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*e*/</span><br/>             <span class=\"kw3\">end</span>        <span class=\"coMULTI\">/*d*/</span><br/>            <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*c*/</span><br/>           <span class=\"kw3\">end</span>          <span class=\"coMULTI\">/*b*/</span><br/>          <span class=\"kw3\">end</span>           <span class=\"coMULTI\">/*a*/</span><br/>       y=#                                       <span class=\"coMULTI\">/* [\u2193]  adjust the number of solutions?*/</span><br/>       <span class=\"kw1\">if</span> y==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> y=<span class=\"st0\">'no'</span>                      <span class=\"coMULTI\">/* [\u2193]  left justify plural of solution*/</span><br/>       <span class=\"kw1\">if</span> LO<span class=\"sy0\">\\</span>==00  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>y, <span class=\"nu0\">9</span><span class=\"br0\">)</span>           <span class=\"st0\">'solution'</span>s<span class=\"br0\">(</span>#, , <span class=\"st0\">\" \"</span><span class=\"br0\">)</span>   <span class=\"st0\">'found for'</span>  ,<br/>                            <span class=\"kw6\">right</span><span class=\"br0\">(</span>j, <span class=\"kw6\">length</span><span class=\"br0\">(</span>HI<span class=\"br0\">)</span> <span class=\"br0\">)</span>                         <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, #, <span class=\"st0\">\"\u2500\"</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">return</span> #                                  <span class=\"coMULTI\">/*return the number of solutions found.*/</span></pre>"}, {"lang": "Ruby", "loc": 36, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> gen_expr<br/>  x = <span class=\"br0\">[</span><span class=\"st0\">'-'</span>, <span class=\"st0\">''</span><span class=\"br0\">]</span><br/>  y = <span class=\"br0\">[</span><span class=\"st0\">'+'</span>, <span class=\"st0\">'-'</span>, <span class=\"st0\">''</span><span class=\"br0\">]</span><br/>  x.<span class=\"me1\">product</span><span class=\"br0\">(</span>y,y,y,y,y,y,y,y<span class=\"br0\">)</span><br/>   .<span class=\"me1\">map</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>a,b,c,d,e,f,g,h,i<span class=\"sy0\">|</span><br/>      <span class=\"st0\">\"#{a}1#{b}2#{c}3#{d}4#{e}5#{f}6#{g}7#{h}8#{i}9\"</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> sum_to<span class=\"br0\">(</span>val<span class=\"br0\">)</span><br/>  gen_expr.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>expr<span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"kw3\">eval</span><span class=\"br0\">(</span>expr<span class=\"br0\">)</span>, expr<span class=\"br0\">]</span><span class=\"br0\">}</span>.<span class=\"kw3\">select</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>v,expr<span class=\"sy0\">|</span> v==val<span class=\"br0\">}</span>.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> <span class=\"kw3\">p</span> x<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> max_solve<br/>  n,size = gen_expr.<span class=\"me1\">group_by</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>expr<span class=\"sy0\">|</span> <span class=\"kw3\">eval</span><span class=\"br0\">(</span>expr<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>                   .<span class=\"kw3\">select</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>val,_<span class=\"sy0\">|</span> val<span class=\"sy0\">&gt;</span>=<span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>                   .<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>val,exprs<span class=\"sy0\">|</span> <span class=\"br0\">[</span>val, exprs.<span class=\"me1\">size</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>                   .<span class=\"me1\">max_by</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>_,size<span class=\"sy0\">|</span> size<span class=\"br0\">}</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"sum of #{n} has the maximum number of solutions\u00a0: #{size}\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> min_solve<br/>  solves = gen_expr.<span class=\"me1\">group_by</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>expr<span class=\"sy0\">|</span> <span class=\"kw3\">eval</span><span class=\"br0\">(</span>expr<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  n = <span class=\"nu0\">0</span>.<span class=\"me1\">step</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <span class=\"kw1\">break</span> i <span class=\"kw1\">unless</span> solves<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"lowest positive sum that can't be expressed\u00a0: #{n}\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> highest_sums<span class=\"br0\">(</span>n=<span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>  n = gen_expr.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>expr<span class=\"sy0\">|</span> <span class=\"kw3\">eval</span><span class=\"br0\">(</span>expr<span class=\"br0\">)</span><span class=\"br0\">}</span>.<span class=\"me1\">uniq</span>.<span class=\"me1\">sort</span>.<span class=\"me1\">reverse</span>.<span class=\"me1\">take</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"highest sums\u00a0: #{n}\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>sum_to<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>max_solve<br/>min_solve<br/>highest_sums</pre>"}, {"lang": "Sidef", "loc": 40, "block": "<pre class=\"ruby highlighted_source\">func gen_expr<span class=\"br0\">(</span><span class=\"br0\">)</span> is cached <span class=\"br0\">{</span><br/>    var x = <span class=\"br0\">[</span><span class=\"st0\">'-'</span>, <span class=\"st0\">''</span><span class=\"br0\">]</span><br/>    var y = <span class=\"br0\">[</span><span class=\"st0\">'+'</span>, <span class=\"st0\">'-'</span>, <span class=\"st0\">''</span><span class=\"br0\">]</span><br/>\u00a0<br/>    gather <span class=\"br0\">{</span><br/>        cartesian<span class=\"br0\">(</span><span class=\"br0\">[</span>x,y,y,y,y,y,y,y,y<span class=\"br0\">]</span>, <span class=\"br0\">{</span><span class=\"sy0\">|</span>a,b,c,d,e,f,g,h,i<span class=\"sy0\">|</span><br/>            take<span class=\"br0\">(</span><span class=\"st0\">\"#{a}1#{b}2#{c}3#{d}4#{e}5#{f}6#{g}7#{h}8#{i}9\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func eval_expr<span class=\"br0\">(</span>expr<span class=\"br0\">)</span> is cached <span class=\"br0\">{</span><br/>    expr.<span class=\"me1\">scan</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">-+</span><span class=\"br0\">]</span>?\\d<span class=\"sy0\">+</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">)</span>.<span class=\"me1\">sum_by</span> <span class=\"br0\">{</span> Num<span class=\"br0\">(</span>_<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func sum_to<span class=\"br0\">(</span>val<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    gen_expr<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">grep</span> <span class=\"br0\">{</span> eval_expr<span class=\"br0\">(</span>_<span class=\"br0\">)</span> == val <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func max_solve<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    gen_expr<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">grep</span>     <span class=\"br0\">{</span> eval_expr<span class=\"br0\">(</span>_<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span> <span class=\"br0\">}</span> \\<br/>              .<span class=\"me1\">group_by</span> <span class=\"br0\">{</span> eval_expr<span class=\"br0\">(</span>_<span class=\"br0\">)</span>      <span class=\"br0\">}</span> \\<br/>              .<span class=\"me1\">max_by</span>   <span class=\"br0\">{</span><span class=\"sy0\">|</span>_,v<span class=\"sy0\">|</span> v.<span class=\"me1\">len</span>        <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func min_solve<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var h = gen_expr<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">group_by</span> <span class=\"br0\">{</span> eval_expr<span class=\"br0\">(</span>_<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"me1\">Inf</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> h.<span class=\"me1\">exists</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"kw2\">return</span> i <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func highest_sums<span class=\"br0\">(</span>n=<span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    gen_expr<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> eval_expr<span class=\"br0\">(</span>_<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">uniq</span>.<span class=\"me1\">sort</span>.<span class=\"me1\">reverse</span>.<span class=\"me1\">first</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>sum_to<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> say <span class=\"st0\">\"100 = #{_}\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/>var <span class=\"br0\">(</span>n, solutions<span class=\"br0\">)</span> = max_solve<span class=\"br0\">(</span><span class=\"br0\">)</span>...<br/><span class=\"me1\">say</span> <span class=\"st0\">\"Sum of #{n} has the maximum number of solutions: #{solutions.len}\"</span><br/>say <span class=\"st0\">\"Lowest positive sum that can't be expressed\u00a0: #{min_solve()}\"</span><br/>say <span class=\"st0\">\"Highest sums: #{highest_sums()}\"</span></pre>"}, {"lang": "Tcl", "loc": 37, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> sum_to_100 <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">13121</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> i3 <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"sy0\">%</span>09d <span class=\"br0\">[</span>dec2base <span class=\"nu0\">3</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> form <span class=\"st0\">\"\"</span><br/>\t<span class=\"kw1\">set</span> subs <span class=\"br0\">{</span><span class=\"st0\">\"\"</span> - +<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">foreach</span> a <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$i3</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span> b <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"nu0\">123456789</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">append</span> form <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$subs</span> <span class=\"re0\">$a</span><span class=\"br0\">]</span> <span class=\"re0\">$b</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">lappend</span> R<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"re0\">$form</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"re0\">$form</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"solutions for sum=100:<span class=\"es0\">\\n</span>[join [lsort $R(100)] <span class=\"es0\">\\n</span>]\"</span><br/>    <span class=\"kw1\">set</span> max -<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">foreach</span> key <span class=\"br0\">[</span>array names R<span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$R</span><span class=\"br0\">(</span><span class=\"re0\">$key</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$max</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> max <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$R</span><span class=\"br0\">(</span><span class=\"re0\">$key</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> maxkey <span class=\"re0\">$key</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"max solutions: $max for $maxkey\"</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">123456789</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exists R<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">puts</span> <span class=\"st0\">\"first unsolvable: $i\"</span><br/>\t    <span class=\"kw1\">break</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"highest 10:<span class=\"es0\">\\n</span>[lrange [lsort -integer -decr [array names R]] 0 9]\"</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> dec2base <span class=\"br0\">{</span>base dec<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> res <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$dec</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> res <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"re0\">$dec</span><span class=\"sy0\">%</span><span class=\"re0\">$base</span><span class=\"br0\">]</span><span class=\"re0\">$res</span><br/>\t<span class=\"kw1\">set</span> dec <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"re0\">$dec</span>/<span class=\"re0\">$base</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$res</span> eq <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> res <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$res</span><br/><span class=\"br0\">}</span><br/>sum_to_100</pre>"}, {"lang": "Visual Basic .NET", "loc": 103, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"co1\">' Recursively iterates (increments) iteration array, returns -1 when out of \"digits\".</span><br/><span class=\"kw1\">Function</span> plusOne<span class=\"br0\">(</span>iAry<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span>, spot <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>    <span class=\"kw1\">Dim</span> spotLim <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"kw1\">If</span><span class=\"br0\">(</span>spot <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">' The first \"digit\" has a lower limit.</span><br/>    <span class=\"kw1\">If</span> iAry<span class=\"br0\">(</span>spot<span class=\"br0\">)</span> <span class=\"sy0\">=</span> spotLim <span class=\"kw1\">Then</span> <span class=\"co1\">' Check if spot has reached limit</span><br/>        <span class=\"kw1\">If</span> spot <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"co1\">' No previous spot to increment, so indicate completed.</span><br/>        iAry<span class=\"br0\">(</span>spot<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"co1\">' Reset current spot, and</span><br/>        <span class=\"kw1\">Return</span> plusOne<span class=\"br0\">(</span>iAry, spot <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">' Increment previous spot.</span><br/>    <span class=\"kw1\">Else</span><br/>        iAry<span class=\"br0\">(</span>spot<span class=\"br0\">)</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span> <span class=\"co1\">' Increment current spot.</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Return</span> spot<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' Returns string sequence of operations from iAry and terms string</span><br/><span class=\"kw1\">Function</span> generate<span class=\"br0\">(</span>iAry<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span>, terms <span class=\"kw1\">As</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">String</span><br/>    <span class=\"kw1\">Dim</span> operations <span class=\"kw1\">As</span> <span class=\"kw2\">String</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"\"</span>, <span class=\"st0\">\"-\"</span>, <span class=\"st0\">\"+\"</span><span class=\"br0\">}</span> <span class=\"co1\">' Possible operations.</span><br/>    generate <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> iAry<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        generate <span class=\"sy0\">&amp;=</span> operations<span class=\"br0\">(</span>iAry<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> Mid<span class=\"br0\">(</span>terms, i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' Returns evaluation of string sequence</span><br/><span class=\"kw1\">Function</span> eval<span class=\"br0\">(</span>sequence <span class=\"kw1\">As</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>    eval <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">Dim</span> term <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, operation <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">For</span> <span class=\"kw1\">Each</span> ch <span class=\"kw1\">As</span> <span class=\"kw1\">Char</span> <span class=\"kw1\">In</span> sequence<br/>        <span class=\"kw1\">Select</span> <span class=\"kw1\">Case</span> ch<br/>            <span class=\"kw1\">Case</span> <span class=\"st0\">\"-\"</span>, <span class=\"st0\">\"+\"</span> <span class=\"co1\">' New operation detected, apply previous operation to term,</span><br/>                eval <span class=\"sy0\">+=</span> <span class=\"kw1\">If</span><span class=\"br0\">(</span>operation <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"sy0\">-</span>term, term<span class=\"br0\">)</span>\u00a0: term <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"co1\">' and reset term.</span><br/>                operation <span class=\"sy0\">=</span> <span class=\"kw1\">If</span><span class=\"br0\">(</span>ch <span class=\"sy0\">=</span> <span class=\"st0\">\"-\"</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">' Note next operation.</span><br/>            <span class=\"kw1\">Case</span> <span class=\"kw1\">Else</span> <span class=\"co1\">' Digit detected, increase term.</span><br/>                term <span class=\"sy0\">=</span> term <span class=\"sy0\">*</span> <span class=\"nu0\">10</span> <span class=\"sy0\">+</span> <a href=\"http://www.google.com/search?q=VAL+site:msdn.microsoft.com\"><span class=\"kw7\">Val</span></a><span class=\"br0\">(</span>ch<span class=\"br0\">)</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">Select</span><br/>    <span class=\"kw1\">Next</span><br/>    eval <span class=\"sy0\">+=</span> <span class=\"kw1\">If</span><span class=\"br0\">(</span>operation <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"sy0\">-</span>term, term<span class=\"br0\">)</span> <span class=\"co1\">' Apply final term.</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' Sorts a pair of List(Of Integer) by the first</span><br/><span class=\"kw1\">Sub</span> reSort<span class=\"br0\">(</span><span class=\"kw1\">ByRef</span> first <span class=\"kw1\">As</span> List<span class=\"br0\">(</span><span class=\"kw1\">Of</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span>, <span class=\"kw1\">ByRef</span> second <span class=\"kw1\">As</span> List<span class=\"br0\">(</span><span class=\"kw1\">Of</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> lou <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> List<span class=\"br0\">(</span><span class=\"kw1\">Of</span> <span class=\"kw2\">ULong</span><span class=\"br0\">)</span> <span class=\"co1\">' Temporary list of ULong for sorting.</span><br/>    <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> first<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        lou<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">CULng</span><span class=\"br0\">(</span>first<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <a href=\"http://www.google.com/search?q=SECOND+site:msdn.microsoft.com\"><span class=\"kw7\">second</span></a><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">' \"Pack\" list items.</span><br/>    <span class=\"kw1\">Next</span><br/>    lou<span class=\"sy0\">.</span><span class=\"me1\">Sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> k <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> first<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        first<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">=</span> lou<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">32</span> <span class=\"co1\">' \"Unpack\" first list item.</span><br/>        <a href=\"http://www.google.com/search?q=SECOND+site:msdn.microsoft.com\"><span class=\"kw7\">second</span></a><span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">=</span> lou<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"kw1\">And</span> <span class=\"sy0\">&amp;</span>H7FFFFFFF <span class=\"co1\">' \"Unpack\" second list item.</span><br/>    <span class=\"kw1\">Next</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">' Returns first result not in sequence, assumes passed list is sorted before call,</span><br/><span class=\"co1\">'  uses binary search algo.</span><br/><span class=\"kw1\">Function</span> firstMiss<span class=\"br0\">(</span>loi <span class=\"kw1\">As</span> List<span class=\"br0\">(</span><span class=\"kw1\">Of</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> low <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, high <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> loi<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, middle <span class=\"sy0\">=</span> <span class=\"br0\">(</span>low <span class=\"sy0\">+</span> high<span class=\"br0\">)</span> \\ <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">Do</span><br/>        <span class=\"kw1\">If</span> loi<span class=\"br0\">(</span>middle<span class=\"br0\">)</span> <span class=\"sy0\">=</span> middle <span class=\"kw1\">Then</span> low <span class=\"sy0\">=</span> middle <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Else</span> high <span class=\"sy0\">=</span> middle <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        middle <span class=\"sy0\">=</span> <span class=\"br0\">(</span>low <span class=\"sy0\">+</span> high<span class=\"br0\">)</span> \\ <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">Loop</span> Until high <span class=\"sy0\">&lt;=</span> low<br/>    <span class=\"kw1\">Return</span> middle <span class=\"sy0\">+</span> <span class=\"kw1\">If</span><span class=\"br0\">(</span>loi<span class=\"br0\">(</span>middle<span class=\"br0\">)</span> <span class=\"sy0\">=</span> middle, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' Iterates through all possible operations, </span><br/><span class=\"co1\">'  uses a pair of List (of Integer) to tabulate solutions.</span><br/><span class=\"kw1\">Sub</span> Solve100<span class=\"br0\">(</span><span class=\"kw1\">Optional</span> terms <span class=\"kw1\">As</span> <span class=\"kw2\">String</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"123456789\"</span>,<br/>             <span class=\"kw1\">Optional</span> targSum <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">100</span>,<br/>             <span class=\"kw1\">Optional</span> highNums <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> lastDig <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> Len<span class=\"br0\">(</span>terms<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"co1\">' The final \"digit\".</span><br/>    <span class=\"kw1\">Dim</span> iAry<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New</span> <span class=\"kw2\">Integer</span><span class=\"br0\">(</span>lastDig<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"co1\">' Iterations array.</span><br/>    <span class=\"kw1\">Dim</span> seq <span class=\"kw1\">As</span> <span class=\"kw2\">String</span> <span class=\"co1\">' Sequence of numbers and operations.</span><br/>    <span class=\"kw1\">Dim</span> sVal <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"co1\">' Sequence value.</span><br/>    <span class=\"kw1\">Dim</span> sCnt <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"co1\">' Solution count (targSum).</span><br/>    <span class=\"kw1\">Dim</span> res <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> List<span class=\"br0\">(</span><span class=\"kw1\">Of</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span> <span class=\"co1\">' List of results.</span><br/>    <span class=\"kw1\">Dim</span> tally <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> List<span class=\"br0\">(</span><span class=\"kw1\">Of</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span> <span class=\"co1\">' Tally of results.</span><br/>    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"List of solutions that evaluate to 100:\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Do</span> <span class=\"co1\">' Tabulate results until digits are exhausted.</span><br/>        seq <span class=\"sy0\">=</span> generate<span class=\"br0\">(</span>iAry, terms<span class=\"br0\">)</span> <span class=\"co1\">' Obtain next expression.</span><br/>        sVal <span class=\"sy0\">=</span> eval<span class=\"br0\">(</span>seq<span class=\"br0\">)</span> <span class=\"co1\">' Obtain next evaluation.</span><br/>        <span class=\"kw1\">If</span> sVal <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"co1\">' Don't bother saving the negative results.</span><br/>            <span class=\"kw1\">If</span> res<span class=\"sy0\">.</span><span class=\"me1\">Contains</span><span class=\"br0\">(</span>sVal<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> tally<span class=\"br0\">(</span>res<span class=\"sy0\">.</span><span class=\"me1\">IndexOf</span><span class=\"br0\">(</span>sVal<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span> _<br/>                                  <span class=\"kw1\">Else</span> res<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>sVal<span class=\"br0\">)</span>\u00a0: tally<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">If</span> sVal <span class=\"sy0\">=</span> targSum <span class=\"kw1\">Then</span> _<br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\" {0,2} {1}\"</span>, sCnt, seq<span class=\"br0\">)</span>\u00a0: sCnt <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Loop</span> Until plusOne<span class=\"br0\">(</span>iAry, lastDig<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><br/>    reSort<span class=\"br0\">(</span>tally, res<span class=\"br0\">)</span> <span class=\"co1\">' Sort by tally to find result with the most solutions.</span><br/>    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"The sum that has the the most solutions is {0}, (at {1}).\"</span>,<br/>                      res<span class=\"sy0\">.</span><span class=\"me1\">Last</span>, tally<span class=\"sy0\">.</span><span class=\"me1\">Last</span><span class=\"br0\">)</span><br/>    reSort<span class=\"br0\">(</span>res, tally<span class=\"br0\">)</span> <span class=\"co1\">' Sort by result to find first missing result and top results.</span><br/>    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"The lowest positive sum that can't be expressed is {0}.\"</span>,<br/>                      firstMiss<span class=\"br0\">(</span>res<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"The ten highest numbers that can be expressed are:\"</span><span class=\"br0\">)</span><br/>    res<span class=\"sy0\">.</span><span class=\"me1\">Reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">' To let us take the last items for output.</span><br/>    sCnt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"co1\">' Keep track of items displayed (for formatting).</span><br/>    <span class=\"kw1\">For</span> <span class=\"kw1\">Each</span> item <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"kw1\">In</span> res<span class=\"sy0\">.</span><span class=\"me1\">Take</span><span class=\"br0\">(</span>highNums<span class=\"br0\">)</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"{0, -11}\"</span>, item<span class=\"br0\">)</span><br/>        sCnt <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sCnt <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Mod</span> <span class=\"nu0\">5</span>\u00a0: <span class=\"kw1\">If</span> sCnt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    Solve100<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">' if interested, try this: Solve100(\"987654321\")</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span></pre>"}, {"lang": "zkl", "loc": 15, "block": "<pre class=\"text highlighted_source\">var all =  // ( (1,12,123...-1,-12,...), (2,23,...) ...)<br/>   (9).pump(List,fcn(n){ split(\"123456789\"[n,*]) })       // 45<br/>   .apply(fcn(ns){ ns.extend(ns.copy().apply('*(-1))) }); // 90<br/>fcn calcAllSums{  // calculate all 6572 sums (1715 unique)<br/>   fcn(n,sum,soFar,r){<br/>      if(n==9) return();<br/>      foreach b in (all[n]){<br/>\t if(sum+b&gt;=0 and b.abs()%10==9) r.appendV(sum+b,\"%s%+d\".fmt(soFar,b));<br/>\t self.fcn(b.abs()%10,sum + b,\"%s%+d\".fmt(soFar,b),r);<br/>      }<br/>   }(0,0,\"\",r:=Dictionary());<br/>   r<br/>}<br/>    // \"123\" --&gt; (1,12,123)<br/>fcn split(nstr){ (1).pump(nstr.len(),List,nstr.get.fp(0),\"toInt\") }</pre>"}]}