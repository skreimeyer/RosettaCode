{"task": "Return_multiple_values", "blocks": [{"lang": "ACL2", "loc": 8, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">;; To return multiple values:</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> multiple-values <span class=\"br0\">(</span>a b<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>mv a b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; To extract the values:</span><br/><span class=\"br0\">(</span>mv-<span class=\"kw1\">let</span> <span class=\"br0\">(</span>x y<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>multiple-values <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>+ x y<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ada", "loc": 16, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">procedure</span> MultiReturn <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">procedure</span> SumAndDiff <span class=\"br0\">(</span>x, y\u00a0: Integer; sum, diff\u00a0: <span class=\"kw3\">out</span> Integer<span class=\"br0\">)</span> <span class=\"kw1\">is</span> <span class=\"kw1\">begin</span><br/>      sum\u00a0:= x + y;<br/>      diff\u00a0:= x - y;<br/>   <span class=\"kw1\">end</span> SumAndDiff;<br/>   inta\u00a0: Integer\u00a0:= <span class=\"nu0\">5</span>;<br/>   intb\u00a0: Integer\u00a0:= <span class=\"nu0\">3</span>;<br/>   thesum, thediff\u00a0: Integer;<br/><span class=\"kw1\">begin</span><br/>   SumAndDiff <span class=\"br0\">(</span>inta, intb, thesum, thediff<span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Sum:\"</span> &amp; Integer'Image <span class=\"br0\">(</span>thesum<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Diff:\"</span> &amp; Integer'Image <span class=\"br0\">(</span>thediff<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> MultiReturn;<br/>\u00a0</pre>"}, {"lang": "Agena", "loc": 9, "block": "<pre class=\"text highlighted_source\"># define a function returning three values<br/>mv\u00a0:= proc() is<br/>    return 1, 2, \"three\"<br/>end\u00a0; # mv<br/>\u00a0<br/>scope # test the mv() proc<br/>    local a, b, c\u00a0:= mv();<br/>    print( c, b, a )<br/>epocs</pre>"}, {"lang": "ALGOL 68", "loc": 19, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># example mode for returning multiple values from a procedure #</span><br/><span class=\"kw4\">MODE</span> PAIR <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> name<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> value <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># procedure returning multiple values via a structure #</span><br/><span class=\"kw4\">PROC</span> get pair <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> a <span class=\"br0\">)</span>PAIR<span class=\"sy1\">:</span><br/>    <span class=\"kw2\">CASE</span> a<br/>    <span class=\"kw2\">IN</span> <span class=\"coMULTI\">#1#</span>    <span class=\"br0\">(</span> <span class=\"st0\">\"H\"</span><span class=\"sy1\">,</span>  0 <span class=\"br0\">)</span><br/>    <span class=\"sy1\">,</span>  <span class=\"coMULTI\">#2#</span>    <span class=\"br0\">(</span> <span class=\"st0\">\"He\"</span><span class=\"sy1\">,</span> 1 <span class=\"br0\">)</span><br/>    <span class=\"sy1\">,</span>  <span class=\"coMULTI\">#3#</span>    <span class=\"br0\">(</span> <span class=\"st0\">\"Li\"</span><span class=\"sy1\">,</span> 3 <span class=\"br0\">)</span><br/>    <span class=\"kw2\">OUT</span>       <span class=\"br0\">(</span> <span class=\"st0\">\"?\"</span><span class=\"sy1\">,</span>  a <span class=\"br0\">)</span><br/>    <span class=\"kw2\">ESAC</span><br/><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    <span class=\"coMULTI\"># use the result as a whole #</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> get pair<span class=\"br0\">(</span> 3 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># access the components separately #</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> name <span class=\"kw6\">OF</span> get pair<span class=\"br0\">(</span> 1 <span class=\"br0\">)</span><span class=\"sy1\">,</span> value <span class=\"kw6\">OF</span> get pair<span class=\"br0\">(</span> 2 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 28, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% example using a record type to return multiple values from a procedure\u00a0%<br/>    record Element ( string(2) symbol; integer atomicNumber );<br/>    reference(Element) procedure getElement( integer value n )\u00a0;<br/>    begin<br/>        Element( if      n &lt; 1 then   \"?&lt;\"<br/>                 else if n &gt; 3 then   \"?&gt;\"<br/>                 else case n of (\u00a0%1% \"H\"<br/>                                ,\u00a0%2% \"He\"<br/>                                ,\u00a0%3% \"Li\"<br/>                                )<br/>               , n<br/>               )<br/>    end getElement\u00a0;<br/>   \u00a0% test the procedure\u00a0%<br/>    begin<br/>        reference(Element) elementData;<br/>        for n\u00a0:= 0 until 4 do begin<br/>            elementData\u00a0:= getElement(n);<br/>            write( s_w\u00a0:= 0, i_w\u00a0:= 1<br/>                 , atomicNumber(elementData)<br/>                 , \" \"<br/>                 , symbol(elementData)<br/>                 );<br/>        end<br/>    end<br/>\u00a0<br/>end.</pre>"}, {"lang": "ANSI Standard BASIC", "loc": 11, "block": "<pre class=\"text highlighted_source\">100 DECLARE EXTERNAL SUB sumdiff<br/>110\u00a0!<br/>120 CALL sumdiff(5, 3, sum, diff)<br/>130 PRINT \"Sum is \"; sum<br/>140 PRINT \"Difference is \"; diff<br/>150 END<br/>160\u00a0!<br/>170 EXTERNAL SUB sumdiff(a, b, c, d)<br/>180 LET c = a + b<br/>190 LET d = a - b<br/>200 END SUB</pre>"}, {"lang": "ATS", "loc": 20, "block": "<pre class=\"text highlighted_source\">//<br/>#include<br/>\"share/atspre_staload.hats\"<br/>//<br/>(* ****** ****** *)<br/>\u00a0<br/>fun addsub<br/>(<br/>  x: int, y: int<br/>)\u00a0: (int, int) = (x+y, x-y)<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>main0 () = let<br/>  val (sum, diff) = addsub (33, 12)<br/>in<br/>  println! (\"33 + 12 = \", sum);<br/>  println! (\"33 - 12 = \", diff);<br/>end (* end of [main0] *)</pre>"}, {"lang": "AutoHotkey", "loc": 3, "block": "<pre class=\"autohotkey highlighted_source\">addsub<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">[</span>x <span class=\"sy0\">+</span> y<span class=\"sy0\">,</span> x <span class=\"sy0\">-</span> y<span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AutoIt", "loc": 8, "block": "<pre class=\"autoit highlighted_source\">\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> _AddSub<span class=\"br0\">(</span><span class=\"re0\">$iX</span><span class=\"sy0\">,</span> <span class=\"re0\">$iY</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$aReturn</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/><span class=\"re0\">$aReturn</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$iX</span> <span class=\"sy0\">+</span> <span class=\"re0\">$iY</span><br/><span class=\"re0\">$aReturn</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$iX</span> <span class=\"sy0\">-</span> <span class=\"re0\">$iY</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"re0\">$aReturn</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 19, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' Return multiple values</span><br/>RECORD multi<br/>    <span class=\"kw1\">LOCAL</span> num<br/>    <span class=\"kw1\">LOCAL</span> s$<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/><span class=\"kw1\">END</span> RECORD<br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> f<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">TYPE</span> multi_type<br/>    <span class=\"kw1\">LOCAL</span> r = <span class=\"br0\">{</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span> <span class=\"kw1\">TYPE</span> multi_type<br/>    r.<span class=\"me1\">num</span> = n<br/>    r.<span class=\"me1\">s</span>$<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = <span class=\"st0\">\"Hitchhiker's Guide\"</span><br/>    r.<span class=\"me1\">s</span>$<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = <span class=\"st0\">\"Douglas Adams\"</span><br/>    <span class=\"kw1\">RETURN</span> r<br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"kw1\">DECLARE</span> rec <span class=\"kw1\">TYPE</span> multi_type<br/>rec = f<span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"br0\">)</span><br/><span class=\"kw1\">PRINT</span> rec.<span class=\"me1\">num</span><br/><span class=\"kw1\">PRINT</span> rec.<span class=\"me1\">s</span>$<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/><span class=\"kw1\">PRINT</span> rec.<span class=\"me1\">s</span>$<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span></pre>"}, {"lang": "BBC BASIC", "loc": 9, "block": "<pre class=\"text highlighted_source\">      PROCsumdiff(5, 3, sum, diff)<br/>      PRINT \"Sum is \"\u00a0; sum<br/>      PRINT \"Difference is \"\u00a0; diff<br/>      END<br/>\u00a0<br/>      DEF PROCsumdiff(a, b, RETURN c, RETURN d)<br/>      c = a + b<br/>      d = a - b<br/>      ENDPROC</pre>"}, {"lang": "Bracmat", "loc": 1, "block": "<pre class=\"text highlighted_source\">(addsub=x y.!arg:(?x.?y)&amp;(!x+!y.!x+-1*!y));</pre>"}, {"lang": "C", "loc": 25, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> integer<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">float</span> decimal<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> letter<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> string<span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> bigDecimal<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span>Composite<span class=\"sy0\">;</span><br/>\u00a0<br/>Composite example<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tComposite C <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu16\">2.3</span><span class=\"sy0\">,</span> <span class=\"st0\">'a'</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Hello World\"</span><span class=\"sy0\">,</span> <span class=\"nu16\">45.678</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> C<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tComposite C <span class=\"sy0\">=</span> example<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Values from a function returning a structure\u00a0: {\u00a0%d,\u00a0%f,\u00a0%c,\u00a0%s,\u00a0%f}<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> C.<span class=\"me1\">integer</span><span class=\"sy0\">,</span> C.<span class=\"me1\">decimal</span><span class=\"sy0\">,</span> C.<span class=\"me1\">letter</span><span class=\"sy0\">,</span> C.<span class=\"me1\">string</span><span class=\"sy0\">,</span> C.<span class=\"me1\">bigDecimal</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 19, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;array&gt;</span><br/><span class=\"co2\">#include &lt;cstdint&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;tuple&gt;</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">tuple</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> minmax<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> <span class=\"sy2\">*</span> numbers, <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"kw4\">size_t</span> num<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw4\">const</span> <span class=\"kw4\">auto</span> maximum <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">max_element</span><span class=\"br0\">(</span>numbers, numbers <span class=\"sy2\">+</span> num<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>   <span class=\"kw4\">const</span> <span class=\"kw4\">auto</span> minimum <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">min_element</span><span class=\"br0\">(</span>numbers, numbers <span class=\"sy2\">+</span> num<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">make_tuple</span><span class=\"br0\">(</span><span class=\"sy2\">*</span>minimum, <span class=\"sy2\">*</span>maximum<span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw4\">const</span> <span class=\"kw4\">auto</span> numbers <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">array</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"nu0\">8</span><span class=\"sy1\">&gt;</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">17</span>, <span class=\"nu0\">88</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">33</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">987</span>, <span class=\"sy2\">-</span><span class=\"nu0\">10</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>   <span class=\"kw4\">int</span> min<span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>   <span class=\"kw4\">int</span> max<span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">tie</span><span class=\"br0\">(</span>min, max<span class=\"br0\">)</span> <span class=\"sy1\">=</span> minmax<span class=\"br0\">(</span>numbers.<span class=\"me1\">data</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, numbers.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"The smallest number is \"</span> <span class=\"sy1\">&lt;&lt;</span> min <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\", the biggest \"</span> <span class=\"sy1\">&lt;&lt;</span> max <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"!<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 22, "block": "<pre class=\"c highlighted_source\">using System<span class=\"sy0\">;</span><br/>using System.<span class=\"me1\">Collections</span>.<span class=\"me1\">Generic</span><span class=\"sy0\">;</span><br/>using System.<span class=\"me1\">Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/>class ReturnMultipleValues<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        var values <span class=\"sy0\">=</span> new<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">51</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">26</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> max<span class=\"sy0\">,</span> min<span class=\"sy0\">;</span><br/>        MinMaxNum<span class=\"br0\">(</span>values<span class=\"sy0\">,</span> out max<span class=\"sy0\">,</span> out min<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Min: {0}<span class=\"es1\">\\n</span>Max: {1}\"</span><span class=\"sy0\">,</span> min<span class=\"sy0\">,</span> max<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> MinMaxNum<span class=\"br0\">(</span>IEnumerable<span class=\"sy0\">&lt;</span>int<span class=\"sy0\">&gt;</span> nums<span class=\"sy0\">,</span> out <span class=\"kw4\">int</span> max<span class=\"sy0\">,</span> out <span class=\"kw4\">int</span> min<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        var sortedNums <span class=\"sy0\">=</span> nums.<span class=\"me1\">OrderBy</span><span class=\"br0\">(</span>num <span class=\"sy0\">=&gt;</span> num<span class=\"br0\">)</span>.<span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        max <span class=\"sy0\">=</span> sortedNums.<span class=\"me1\">Last</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        min <span class=\"sy0\">=</span> sortedNums.<span class=\"me1\">First</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clipper", "loc": 2, "block": "<pre class=\"text highlighted_source\">Function Addsub( x, y )<br/>Return { x+y, x-y }</pre>"}, {"lang": "Clojure", "loc": 6, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> quot<span class=\"sy0\">-</span>rem <span class=\"br0\">[</span>m n<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>quot m n<span class=\"br0\">)</span> <span class=\"br0\">(</span>rem m n<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; The following prints 3 2.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>q r<span class=\"br0\">]</span> <span class=\"br0\">(</span>quot<span class=\"sy0\">-</span>rem <span class=\"nu0\">11</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>println q<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>println r<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CMake", "loc": 17, "block": "<pre class=\"cmake highlighted_source\"><span class=\"co1\"># Returns the first and last characters of string.</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:function\"><span class=\"kw1\">function</span></a><span class=\"sy0\">(</span>firstlast string first last<span class=\"sy0\">)</span><br/>  <span class=\"co1\"># f = first character.</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:string\"><span class=\"kw1\">string</span></a><span class=\"sy0\">(</span><span class=\"kw3\">SUBSTRING</span> <span class=\"st0\">\"<span class=\"es1\">${string}</span>\"</span> 0 1 f<span class=\"sy0\">)</span><br/>\u00a0<br/>  <span class=\"co1\"># g = last character.</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:string\"><span class=\"kw1\">string</span></a><span class=\"sy0\">(</span><span class=\"kw3\">LENGTH</span> <span class=\"st0\">\"<span class=\"es1\">${string}</span>\"</span> length<span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:math\"><span class=\"kw1\">math</span></a><span class=\"sy0\">(</span>EXPR index <span class=\"st0\">\"<span class=\"es1\">${length}</span> - 1\"</span><span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:string\"><span class=\"kw1\">string</span></a><span class=\"sy0\">(</span><span class=\"kw3\">SUBSTRING</span> <span class=\"st0\">\"<span class=\"es1\">${string}</span>\"</span> <span class=\"re0\">${index}</span> 1 g<span class=\"sy0\">)</span><br/>\u00a0<br/>  <span class=\"co1\"># Return both characters.</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span><span class=\"st0\">\"<span class=\"es1\">${first}</span>\"</span> <span class=\"st0\">\"<span class=\"es1\">${f}</span>\"</span> <span class=\"kw3\">PARENT_SCOPE</span><span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span><span class=\"st0\">\"<span class=\"es1\">${last}</span>\"</span> <span class=\"st0\">\"<span class=\"es1\">${g}</span>\"</span> <span class=\"kw3\">PARENT_SCOPE</span><span class=\"sy0\">)</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endfunction\"><span class=\"kw1\">endfunction</span></a><span class=\"sy0\">(</span>firstlast<span class=\"sy0\">)</span><br/>\u00a0<br/>firstlast<span class=\"sy0\">(</span><span class=\"st0\">\"Rosetta Code\"</span> begin end<span class=\"sy0\">)</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:message\"><span class=\"kw1\">message</span></a><span class=\"sy0\">(</span><span class=\"kw3\">STATUS</span> <span class=\"st0\">\"begins with <span class=\"es1\">${begin}</span>, ends with <span class=\"es1\">${end}</span>\"</span><span class=\"sy0\">)</span></pre>"}, {"lang": "COBOL", "loc": 75, "block": "<pre class=\"cobol highlighted_source\">\u00a0<br/>       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> multiple-<span class=\"kw3\">values</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       environment <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">configuration</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       repository<span class=\"sy0\">.</span><br/>           <span class=\"kw3\">function</span> multiples<br/>           <span class=\"kw3\">function</span> <span class=\"kw3\">all</span> intrinsic<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">REPLACE</span> <span class=\"sy0\">==</span>:linked-items:<span class=\"sy0\">==</span> <span class=\"kw3\">BY</span> <span class=\"sy0\">==</span><br/>       <span class=\"nu0\">01</span> a <span class=\"kw3\">usage</span> binary-long<span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> b <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> c <span class=\"kw3\">usage</span> float-short<span class=\"sy0\">.</span><br/>       <span class=\"sy0\">==</span><br/>       <span class=\"sy0\">==</span>:record-item:<span class=\"sy0\">==</span> <span class=\"kw3\">BY</span> <span class=\"sy0\">==</span><br/>       <span class=\"nu0\">01</span> master<span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> ma <span class=\"kw3\">usage</span> binary-long<span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> mb <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> mc <span class=\"kw3\">usage</span> float-short<span class=\"sy0\">.</span><br/>       <span class=\"sy0\">==.</span><br/>\u00a0<br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>      \u00a0:linked-items:<br/>\u00a0<br/>      \u00a0:record-item:<br/>\u00a0<br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       sample-<span class=\"kw1\">main</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw2\">move</span> <span class=\"nu0\">41</span> <span class=\"kw2\">to</span> a<br/>       <span class=\"kw2\">move</span> <span class=\"st0\">\"aaaaabbbbb\"</span> <span class=\"kw2\">to</span> b<br/>       <span class=\"kw2\">move</span> <span class=\"kw3\">function</span> e <span class=\"kw2\">to</span> c<br/>\u00a0<br/>       <span class=\"kw2\">display</span> <span class=\"st0\">\"Original: \"</span> a <span class=\"st0\">\", \"</span> b <span class=\"st0\">\", \"</span> c<br/>       <span class=\"kw2\">call</span> <span class=\"st0\">\"subprogram\"</span> <span class=\"kw3\">using</span> a b c<br/>       <span class=\"kw2\">display</span> <span class=\"st0\">\"Modified: \"</span> a <span class=\"st0\">\", \"</span> b <span class=\"st0\">\", \"</span> c<br/>\u00a0<br/>       <span class=\"kw2\">move</span> multiples<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">to</span> master<br/>       <span class=\"kw2\">display</span> <span class=\"st0\">\"Multiple: \"</span> ma <span class=\"st0\">\", \"</span> mb <span class=\"st0\">\", \"</span> mc<br/>\u00a0<br/>       goback<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> multiple-<span class=\"kw3\">values</span><span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; subprogram<br/>       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> subprogram<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">linkage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>      \u00a0:linked-items:<br/>\u00a0<br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span> <span class=\"kw3\">using</span> a b c<span class=\"sy0\">.</span><br/>       <span class=\"kw2\">add</span> <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> a<br/>       <span class=\"kw1\">inspect</span> b <span class=\"kw2\">converting</span> <span class=\"st0\">\"a\"</span> <span class=\"kw2\">to</span> <span class=\"st0\">\"b\"</span><br/>       <span class=\"kw2\">divide</span> <span class=\"nu0\">2</span> <span class=\"kw2\">into</span> c<br/>       goback<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> subprogram<span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; multiples <span class=\"kw3\">function</span><br/>       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       function-id<span class=\"sy0\">.</span> multiples<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">linkage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>      \u00a0:record-item:<br/>\u00a0<br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span> returning master<span class=\"sy0\">.</span><br/>       <span class=\"kw2\">move</span> <span class=\"nu0\">84</span> <span class=\"kw2\">to</span> ma<br/>       <span class=\"kw2\">move</span> <span class=\"st0\">\"multiple\"</span> <span class=\"kw2\">to</span> mb<br/>       <span class=\"kw2\">move</span> <span class=\"kw3\">function</span> pi <span class=\"kw2\">to</span> mc<br/>       goback<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">function</span> multiples<span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> return-three <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"nu0\">3</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 28, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">mixin</span> <span class=\"kw4\">template</span> ret<span class=\"br0\">(</span><span class=\"kw4\">string</span> z<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">mixin</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/>        <span class=\"kw4\">string</span> res<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">auto</span> r <span class=\"sy0\">=</span> z.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\" = \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">auto</span> m <span class=\"sy0\">=</span> r<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">auto</span> s <span class=\"sy0\">=</span> m.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"_\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        res <span class=\"sy0\">~=</span> <span class=\"st0\">\"auto \"</span> <span class=\"sy0\">~</span> s <span class=\"sy0\">~</span> <span class=\"st0\">\" = \"</span> <span class=\"sy0\">~</span> r<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">~</span> <span class=\"st0\">\";\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> n<span class=\"sy0\">;</span> m<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            res <span class=\"sy0\">~=</span> <span class=\"st0\">\"auto \"</span> <span class=\"sy0\">~</span> n <span class=\"sy0\">~</span> <span class=\"st0\">\" = \"</span> <span class=\"sy0\">~</span> s <span class=\"sy0\">~</span> <span class=\"st0\">\"[\"</span> <span class=\"sy0\">~</span> i.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"kw4\">string</span> <span class=\"sy0\">~</span> <span class=\"st0\">\"];<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> res<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> addSub<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T x<span class=\"sy0\">,</span> T y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> tuple<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> y<span class=\"sy0\">,</span> x <span class=\"sy0\">-</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">mixin</span> ret<span class=\"sy0\">!</span>q<span class=\"br0\">{</span> a<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> addSub<span class=\"br0\">(</span><span class=\"nu0\">33</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"33 + 12 =\u00a0%d<span class=\"es1\">\\n</span>33 - 12 =\u00a0%d\"</span><span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 5, "block": "<pre class=\"text highlighted_source\">function-returning-multiple-values:<br/>     10 20<br/>\u00a0<br/>!print\u00a0!print function-returning-multiple-values<br/>\u00a0</pre>"}, {"lang": "Delphi/Pascal", "loc": 17, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> ReturnMultipleValues<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> GetTwoValues<span class=\"br0\">(</span><span class=\"kw1\">var</span> aParam1<span class=\"sy1\">,</span> aParam2<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  aParam1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">100</span><span class=\"sy1\">;</span><br/>  aParam2 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">200</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  x<span class=\"sy1\">,</span> y<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  GetTwoValues<span class=\"br0\">(</span>x<span class=\"sy1\">,</span> y<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "EchoLisp", "loc": 12, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>plus<span class=\"sy0\">-</span>minus x y<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>values <span class=\"br0\">(</span><span class=\"sy0\">+</span> x y<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> x y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>plus<span class=\"sy0\">-</span>minus <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">7</span><br/>     <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>plus<span class=\"sy0\">-</span>minus x y<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> x y<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> x y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>plus<span class=\"sy0\">-</span>minus <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">(</span><span class=\"nu0\">7</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "ECL", "loc": 12, "block": "<pre class=\"text highlighted_source\">MyFunc(INTEGER i1,INTEGER i2)\u00a0:= FUNCTION<br/>  RetMod\u00a0:= MODULE<br/>    EXPORT INTEGER Add \u00a0:= i1 + i2;<br/>    EXPORT INTEGER Prod\u00a0:= i1 * i2;<br/>  END;<br/>  RETURN RetMod;<br/>END;<br/>\u00a0<br/>//Reference each return value separately:<br/>MyFunc(3,4).Add;<br/>MyFunc(3,4).Prod;<br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 4, "block": "<pre class=\"eiffel highlighted_source\">some_feature<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+tuple&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">TUPLE</span></a><br/>\t<span class=\"kw2\">do</span><br/>\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"st0\">'j'</span>, <span class=\"st0\">\"r\"</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">end</span></pre>"}, {"lang": "Elena", "loc": 24, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import extensions.<br/>\u00a0<br/>extension op<br/>{<br/>    MinMax ref:minVal ref:maxVal<br/>    [<br/>        var ordered\u00a0:= self ascendant.<br/>\u00a0<br/>        minVal object\u00a0:= ordered firstMember.<br/>        maxVal object\u00a0:= ordered lastMember.<br/>    ]<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    var values\u00a0:= (4, 51, 1, -3, 3, 6, 8, 26, 2, 4).<br/>    var min\u00a0:= 0.<br/>    var max\u00a0:= 0.<br/>\u00a0<br/>    values MinMax ref:min ref:max.<br/>\u00a0<br/>    console printLine(\"Min: \",min,\" Max: \",max).<br/>].</pre>"}, {"lang": "Elixir", "loc": 8, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def addsub(a, b) do<br/>    {a+b, a-b}<br/>  end<br/>end<br/>\u00a0<br/>{add, sub} = RC.addsub(7, 4)<br/>IO.puts \"Add: #{add},\\tSub: #{sub}\"</pre>"}, {"lang": "Erlang", "loc": 11, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">% Put this code in return_multi.erl and run it as \"escript return_multi.erl\"</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>return_multi<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"br0\">{</span><span class=\"re5\">C</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"sy1\">,</span> <span class=\"re5\">E</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">multiply</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~p ~p ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">C</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span><span class=\"sy1\">,</span> <span class=\"re5\">E</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">multiply</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"br0\">{</span><span class=\"re5\">A</span> <span class=\"sy3\">*</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">A</span> <span class=\"sy3\">+</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"re5\">A</span> <span class=\"sy3\">-</span> <span class=\"re5\">B</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM RETURN_VALUES<br/>\u00a0<br/>PROCEDURE SUM_DIFF(A,B-&gt;C,D)<br/>   C=A+B<br/>   D=A-B<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>   SUM_DIFF(5,3-&gt;SUM,DIFF)<br/>   PRINT(\"Sum is\";SUM)<br/>   PRINT(\"Difference is\";DIFF)<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 14, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">include</span> std\\console.e <span class=\"co1\">--only for any_key, to help make running this program easy on windows GUI</span><br/>\u00a0<br/><span class=\"kw2\">integer</span> aWholeNumber <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/><span class=\"kw2\">atom</span> aFloat <span class=\"sy1\">=</span> <span class=\"nu0\">1.999999</span><br/><span class=\"kw2\">sequence</span> aSequence <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy2\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><br/><span class=\"kw2\">sequence</span> result <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"co1\">--empty initialized sequence</span><br/>\u00a0<br/><span class=\"kw1\">function</span> addmultret<span class=\"br0\">(</span><span class=\"kw2\">integer</span> first<span class=\"sy2\">,</span> <span class=\"kw2\">atom</span> second<span class=\"sy2\">,</span> <span class=\"kw2\">sequence</span> third<span class=\"br0\">)</span><span class=\"co1\">--takes three kinds of input, adds them all into one element of the.. </span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>first <span class=\"sy1\">+</span> second <span class=\"sy1\">+</span> third<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> third<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">&amp;</span> <span class=\"br0\">(</span>first <span class=\"sy1\">*</span> second <span class=\"sy1\">*</span> third<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">*</span> third<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"co1\">--..output sequence and multiplies them into..</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span> <span class=\"co1\">--..the second element</span><br/>\u00a0<br/>result <span class=\"sy1\">=</span> addmultret<span class=\"br0\">(</span>aWholeNumber<span class=\"sy2\">,</span> aFloat<span class=\"sy2\">,</span> aSequence<span class=\"br0\">)</span> <span class=\"co1\">--call function, assign what it gets into result - {9.999999, 23.999988}</span><br/><span class=\"sy2\">?</span> result<br/>any_key<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "F#", "loc": 5, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> addSub x y <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> y, x <span class=\"sy0\">-</span> y<br/>\u00a0<br/><span class=\"kw1\">let</span> sum, diff <span class=\"sy0\">=</span> addSub <span class=\"nu0\">33</span> <span class=\"nu0\">12</span><br/>printfn <span class=\"st0\">\"33 + 12 =\u00a0%d\"</span> sum<br/>printfn <span class=\"st0\">\"33 - 12 =\u00a0%d\"</span> diff</pre>"}, {"lang": "Factor", "loc": 10, "block": "<pre class=\"text highlighted_source\">USING: io kernel math prettyprint\u00a0;<br/>IN: script<br/>\u00a0<br/>: */ ( x y -- x*y x/y )<br/>    [ * ] [ / ] 2bi\u00a0;<br/>\u00a0<br/>15 3 */<br/>\u00a0<br/>[ \"15 * 3 = \" write . ]<br/>[ \"15 / 3 = \" write . ] bi*</pre>"}, {"lang": "FALSE", "loc": 2, "block": "<pre class=\"text highlighted_source\">[\\<a class=\"__cf_email__\" data-cfemail=\"725632\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"042044\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>*@@/]f: { in: a b, out: a*b a/b }<br/>6 2f;! .` ,.   { 3 12 }</pre>"}, {"lang": "Forth", "loc": 2, "block": "<pre class=\"text highlighted_source\">: muldiv ( a b -- a*b a/b )<br/>  2dup / &gt;r * r&gt;\u00a0;</pre>"}, {"lang": "Fortran", "loc": 21, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> multiple_values<br/><span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/><span class=\"kw3\">type</span> res<br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">p</span>, m<br/><span class=\"kw1\">end</span> <span class=\"kw3\">type</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw1\">function</span> addsub<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span>, y<br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>res<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">r</span> <br/>  r<span class=\"sy0\">%</span>p <span class=\"sy0\">=</span> x<span class=\"sy0\">+</span>y<br/>  r<span class=\"sy0\">%</span>m <span class=\"sy0\">=</span> x<span class=\"sy0\">-</span>y<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span><br/>\u00a0<br/><span class=\"kw1\">program</span> main<br/>  <span class=\"kw3\">use</span> multiple_values <br/>  print <span class=\"sy0\">*</span>, addsub<span class=\"br0\">(</span><span class=\"nu0\">33</span>, <span class=\"nu0\">22</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> <br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 53, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co1\">' One way to return multiple values is to use ByRef parameters for the additional one(s)</span><br/><span class=\"kw1\">Function</span> tryOpenFile <span class=\"br0\">(</span>fileName <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>, <span class=\"kw1\">ByRef</span> fileNumber <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>   <span class=\"kw1\">Dim</span> result <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> <br/>   fileNumber = <span class=\"kw1\">FreeFile</span><br/>   result = <span class=\"kw1\">Open</span><span class=\"br0\">(</span>fileName <span class=\"kw1\">For</span> <span class=\"kw1\">Input</span> <span class=\"kw1\">As</span> <span class=\"co2\"># fileNumber)</span><br/>   <span class=\"kw1\">If</span> result &lt;&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>     fileNumber = <span class=\"nu0\">0</span><br/>     <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>   <span class=\"kw1\">Else</span><br/>     <span class=\"kw1\">Return</span> <span class=\"kw1\">True</span><br/>   <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> fn <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>Var b = tryOpenFile<span class=\"br0\">(</span><span class=\"st0\">\"xxx.zyz\"</span>, fn<span class=\"br0\">)</span> <span class=\"co1\">'' this file doesn't exist</span><br/><span class=\"kw1\">Print</span> b, fn<br/>b = tryOpenFile<span class=\"br0\">(</span><span class=\"st0\">\"input.txt\"</span>, fn<span class=\"br0\">)</span> <span class=\"co1\">'' this file does exist</span><br/><span class=\"kw1\">Print</span> b, fn<br/><span class=\"kw1\">Close</span> <span class=\"co2\"># fn</span><br/>\u00a0<br/><span class=\"co1\">' Another way is to use a user defined type</span><br/>\u00a0<br/><span class=\"kw1\">Type</span> FileOpenInfo<br/>  opened <span class=\"kw1\">As</span> Boolean<br/>  fn <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Type</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> tryOpenFile2<span class=\"br0\">(</span>fileName <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> FileOpenInfo<br/>   <span class=\"kw1\">Dim</span> foi <span class=\"kw1\">As</span> FileOpenInfo <br/>   foi.<span class=\"me1\">fn</span> = <span class=\"kw1\">FreeFile</span><br/>   <span class=\"kw1\">Dim</span> result <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>   result = <span class=\"kw1\">Open</span><span class=\"br0\">(</span>fileName <span class=\"kw1\">For</span> <span class=\"kw1\">Input</span> <span class=\"kw1\">As</span> <span class=\"co2\"># foi.fn)   </span><br/>   <span class=\"kw1\">If</span>  result &lt;&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>     foi.<span class=\"me1\">fn</span> = <span class=\"nu0\">0</span><br/>     foi.<span class=\"me1\">opened</span> = <span class=\"kw1\">False</span><br/>   <span class=\"kw1\">Else</span><br/>     foi.<span class=\"me1\">Opened</span> = <span class=\"kw1\">True</span><br/>   <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>   <span class=\"kw1\">Return</span> foi<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/>Var foi = tryOpenFile2<span class=\"br0\">(</span><span class=\"st0\">\"xxx.zyz\"</span><span class=\"br0\">)</span> <br/><span class=\"kw1\">Print</span> foi.<span class=\"me1\">opened</span>, foi.<span class=\"me1\">fn</span><br/>foi = tryOpenFile2<span class=\"br0\">(</span><span class=\"st0\">\"input.txt\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> foi.<span class=\"me1\">opened</span>, foi.<span class=\"me1\">fn</span><br/><span class=\"kw1\">Close</span> <span class=\"co2\"># foi.fn</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>divMod[a, b]\u00a0:= [a div b, a mod b]<br/>\u00a0<br/>[num, remainder] = divMod[10, 3]<br/>\u00a0</pre>"}, {"lang": "FunL", "loc": 5, "block": "<pre class=\"text highlighted_source\">def addsub( x, y ) = (x + y, x - y)<br/>\u00a0<br/>val (sum, difference) = addsub( 33, 12 )<br/>\u00a0<br/>println( sum, difference, addsub(33, 12) )</pre>"}, {"lang": "FutureBasic", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>local fn ReturnMultipleValues( strIn as Str255, strOut as ^Str255, letterCount as ^long )<br/>dim as Str255 s<br/>\u00a0<br/>// Test if incoming string is empty, and exit function if it is<br/>if strIn[0] == 0 then exit fn<br/>\u00a0<br/>// Prepend this string to incoming string and return it<br/>s = \"Here is your original string: \"<br/>strOut.nil$ = s + strIn<br/>\u00a0<br/>// Get length of combined string and return it<br/>// Note: In FutureBasic string[0] is interchangeable with Len(string)<br/>letterCount.nil&amp; = strIn[0] + s[0]<br/>end fn<br/>\u00a0<br/>dim as Str255 outStr<br/>dim as long   outCount<br/>\u00a0<br/>fn ReturnMultipleValues( \"Hello, World!\", @outStr, @outCount )<br/>print outStr; \". The combined strings have\"; outCount; \" letters in them.\"<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 3, "block": "<pre class=\"go highlighted_source\"><span class=\"kw4\">func</span> addsub<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>  <span class=\"kw1\">return</span> x <span class=\"sy3\">+</span> y<span class=\"sy1\">,</span> x <span class=\"sy3\">-</span> y<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 6, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> addSub<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/> <span class=\"br0\">[</span><br/>  sum: x<span class=\"sy0\">+</span>y,<br/>  difference: x<span class=\"sy0\">-</span>y<br/> <span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Harbour", "loc": 2, "block": "<pre class=\"visualfoxpro highlighted_source\"><span class=\"kw1\">FUNCTION</span> Addsub<span class=\"br0\">(</span> x<span class=\"sy0\">,</span> <span class=\"kw3\">y</span> <span class=\"br0\">)</span><br/>   <span class=\"kw2\">RETURN</span> <span class=\"br0\">{</span> x <span class=\"sy0\">+</span> <span class=\"kw3\">y</span><span class=\"sy0\">,</span> x <span class=\"sy0\">-</span> <span class=\"kw3\">y</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 1, "block": "<pre class=\"haskell highlighted_source\">  addsub x y <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> y<span class=\"sy0\">,</span> x <span class=\"sy0\">-</span> y<span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 26, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> retList<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># returns as ordered list</span><br/><span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> retSet<span class=\"br0\">(</span><span class=\"br0\">)</span>             <span class=\"co1\"># returns as un-ordered list</span><br/><span class=\"kw4\">insert</span><span class=\"br0\">(</span>S <span class=\"sy1\">:=</span> <span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>  <br/><span class=\"kw1\">return</span> S<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> retLazy<span class=\"br0\">(</span><span class=\"br0\">)</span>            <span class=\"co1\"># return as a generator</span><br/><span class=\"kw1\">suspend</span> <span class=\"nu0\">1</span><span class=\"sy1\">|</span><span class=\"nu0\">2</span><span class=\"sy1\">|</span><span class=\"nu0\">3</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> retTable<span class=\"br0\">(</span><span class=\"br0\">)</span>           <span class=\"co1\"># return as a table</span><br/><span class=\"kw7\">T</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw7\">T</span><span class=\"br0\">[</span><span class=\"st0\">\"A\"</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span><br/><span class=\"kw7\">T</span><span class=\"br0\">[</span><span class=\"st0\">\"B\"</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span> <br/><span class=\"kw7\">T</span><span class=\"br0\">[</span><span class=\"st0\">\"C\"</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">3</span><br/><span class=\"kw1\">return</span> <span class=\"kw7\">T</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">record</span> retdata<span class=\"br0\">(</span>a<span class=\"sy1\">,</span>b<span class=\"sy1\">,</span>c<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> retRecord<span class=\"br0\">(</span><span class=\"br0\">)</span>          <span class=\"co1\"># return as a record, least general method</span><br/><span class=\"kw1\">return</span> retdata<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">   <span class=\"nu0\">1</span> <span class=\"nu0\">2</span>+<span class=\"nu0\">3</span> <span class=\"nu0\">4</span><br/><span class=\"nu0\">4</span> <span class=\"nu0\">6</span></pre>"}, {"lang": "Java", "loc": 100, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.ArrayList</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Map</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.HashMap</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// =============================================================================</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> RReturnMultipleVals <span class=\"br0\">{</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> K_lipsum <span class=\"sy0\">=</span> <span class=\"st0\">\"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a>   K_1024   <span class=\"sy0\">=</span> 1024L<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> L        <span class=\"sy0\">=</span> <span class=\"st0\">\"L\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> R        <span class=\"sy0\">=</span> <span class=\"st0\">\"R\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Anumberformatexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">NumberFormatException</span></a><span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a> nv_<span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> sv_<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>args.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span><br/>        nv_ <span class=\"sy0\">=</span> K_1024<span class=\"sy0\">;</span><br/>        sv_ <span class=\"sy0\">=</span> K_lipsum<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>        nv_ <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a>.<span class=\"me1\">parseLong</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        sv_ <span class=\"sy0\">=</span> K_lipsum<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span><br/>        nv_ <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a>.<span class=\"me1\">parseLong</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        sv_ <span class=\"sy0\">=</span> args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>        nv_ <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a>.<span class=\"me1\">parseLong</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        sv_ <span class=\"sy0\">=</span> args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> ix <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> ix <span class=\"sy0\">&lt;</span> args.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>ix<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          sv_ <span class=\"sy0\">=</span> sv_ <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> args<span class=\"br0\">[</span>ix<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    RReturnMultipleVals lcl <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> RReturnMultipleVals<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    Pair<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a>, String<span class=\"sy0\">&gt;</span> rvp <span class=\"sy0\">=</span> lcl.<span class=\"me1\">getPairFromPair</span><span class=\"br0\">(</span>nv_, sv_<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// values returned in a bespoke object</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Results extracted from a composite object:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s,\u00a0%s%n%n\"</span>, rvp.<span class=\"me1\">getLeftVal</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, rvp.<span class=\"me1\">getRightVal</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    List<span class=\"sy0\">&lt;</span>Object<span class=\"sy0\">&gt;</span> rvl <span class=\"sy0\">=</span> lcl.<span class=\"me1\">getPairFromList</span><span class=\"br0\">(</span>nv_, sv_<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// values returned in a Java Collection object</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Results extracted from a Java Colections <span class=\"es0\">\\\"</span>List<span class=\"es0\">\\\"</span> object:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s,\u00a0%s%n%n\"</span>, rvl.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, rvl.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    Map<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>, Object<span class=\"sy0\">&gt;</span> rvm <span class=\"sy0\">=</span> lcl.<span class=\"me1\">getPairFromMap</span><span class=\"br0\">(</span>nv_, sv_<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// values returned in a Java Collection object</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Results extracted from a Java Colections <span class=\"es0\">\\\"</span>Map<span class=\"es0\">\\\"</span> object:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s,\u00a0%s%n%n\"</span>, rvm.<span class=\"me1\">get</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span>, rvm.<span class=\"me1\">get</span><span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"co1\">// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>  <span class=\"co1\">// Return a bespoke object.</span><br/>  <span class=\"co1\">// Permits any number and type of value to be returned</span><br/>  <span class=\"kw1\">public</span> <span class=\"sy0\">&lt;</span>T, U<span class=\"sy0\">&gt;</span> Pair<span class=\"sy0\">&lt;</span>T, U<span class=\"sy0\">&gt;</span> getPairFromPair<span class=\"br0\">(</span>T vl_, U vr_<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Pair<span class=\"sy0\">&lt;</span>T, U<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>vl_, vr_<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"co1\">// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>  <span class=\"co1\">// Exploit Java Collections classes to assemble a collection of results.</span><br/>  <span class=\"co1\">// This example uses java.util.List</span><br/>  <span class=\"kw1\">public</span> List<span class=\"sy0\">&lt;</span>Object<span class=\"sy0\">&gt;</span> getPairFromList<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a> nv_, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a> sv_<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    List<span class=\"sy0\">&lt;</span>Object<span class=\"sy0\">&gt;</span> rset <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;</span>Object<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    rset.<span class=\"me1\">add</span><span class=\"br0\">(</span>nv_<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    rset.<span class=\"me1\">add</span><span class=\"br0\">(</span>sv_<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> rset<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"co1\">// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>  <span class=\"co1\">// Exploit Java Collections classes to assemble a collection of results.</span><br/>  <span class=\"co1\">// This example uses java.util.Map</span><br/>  <span class=\"kw1\">public</span> Map<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>, Object<span class=\"sy0\">&gt;</span> getPairFromMap<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a> nv_, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a> sv_<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Map<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>, Object<span class=\"sy0\">&gt;</span> rset <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashMap<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>, Object<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    rset.<span class=\"me1\">put</span><span class=\"br0\">(</span>L, nv_<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    rset.<span class=\"me1\">put</span><span class=\"br0\">(</span>R, sv_<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> rset<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// ===========================================================================</span><br/>  <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> Pair<span class=\"sy0\">&lt;</span>L, R<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> L leftVal<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">private</span> R rightVal<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Pair<span class=\"br0\">(</span>L nv_, R sv_<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      setLeftVal<span class=\"br0\">(</span>nv_<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      setRightVal<span class=\"br0\">(</span>sv_<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> setLeftVal<span class=\"br0\">(</span>L nv_<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      leftVal <span class=\"sy0\">=</span> nv_<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">public</span> L getLeftVal<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> leftVal<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> setRightVal<span class=\"br0\">(</span>R sv_<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      rightVal <span class=\"sy0\">=</span> sv_<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">public</span> R getRightVal<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> rightVal<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 24, "block": "<pre class=\"javascript highlighted_source\"><span class=\"co1\">//returns array with three values</span><br/><span class=\"kw1\">var</span> arrBind <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">//return array of three items to assign</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">//returns object with three named values</span><br/><span class=\"kw1\">var</span> objBind <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">{</span>foo<span class=\"sy0\">:</span> <span class=\"st0\">\"abc\"</span><span class=\"sy0\">,</span> bar<span class=\"sy0\">:</span> <span class=\"st0\">\"123\"</span><span class=\"sy0\">,</span> baz<span class=\"sy0\">:</span> <span class=\"st0\">\"zzz\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">//keep all three values</span><br/><span class=\"kw1\">var</span> <span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> arrBind<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">//assigns a =&gt; 1, b =&gt; 2, c =&gt; 3</span><br/><span class=\"co1\">//skip a value</span><br/><span class=\"kw1\">var</span> <span class=\"br0\">[</span>a<span class=\"sy0\">,</span> <span class=\"sy0\">,</span> c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> arrBind<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">//assigns a =&gt; 1, c =&gt; 3</span><br/><span class=\"co1\">//keep final values together as array</span><br/><span class=\"kw1\">var</span> <span class=\"br0\">[</span>a<span class=\"sy0\">,</span> ...<span class=\"me1\">rest</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> arrBind<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">//assigns a =&gt; 1, rest =&gt; [2, 3]</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">//same return name</span><br/><span class=\"kw1\">var</span> <span class=\"br0\">{</span>foo<span class=\"sy0\">,</span> bar<span class=\"sy0\">,</span> baz<span class=\"br0\">}</span> <span class=\"sy0\">=</span> objBind<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">//assigns foo =&gt; \"abc\", bar =&gt; \"123\", baz =&gt; \"zzz\"</span><br/><span class=\"co1\">//different return name (ignoring baz)</span><br/><span class=\"kw1\">var</span> <span class=\"br0\">{</span>baz<span class=\"sy0\">:</span> foo<span class=\"sy0\">,</span> buz<span class=\"sy0\">:</span> bar<span class=\"br0\">}</span> <span class=\"sy0\">=</span> objBind<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">//assigns baz =&gt; \"abc\", buz =&gt; \"123\"</span><br/><span class=\"co1\">//keep rest of values together as object</span><br/><span class=\"kw1\">var</span> <span class=\"br0\">{</span>foo<span class=\"sy0\">,</span> ...<span class=\"me1\">rest</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> objBind<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">//assigns foo =&gt; \"abc, rest =&gt; {bar: \"123\", baz: \"zzz\"}</span></pre>"}, {"lang": "jq", "loc": 6, "block": "<pre class=\"text highlighted_source\"># To produce a stream:<br/>def addsub(x; y): (x + y), (x - y);<br/>\u00a0<br/># To produce an array:<br/>def add_subtract(x; y): [ x+y, x-y ];<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 3, "block": "<pre class=\"text highlighted_source\">function addsub(x, y)<br/>  return x + y, x - y<br/>end</pre>"}, {"lang": "Kotlin", "loc": 11, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><span class=\"coMULTI\">/* implicitly returns a Pair&lt;Int, Int&gt;*/</span><br/>fun minmax<span class=\"br0\">(</span>ia<span class=\"sy0\">:</span> IntArray<span class=\"br0\">)</span> <span class=\"sy0\">=</span> ia.<span class=\"me1\">min</span><span class=\"br0\">(</span><span class=\"br0\">)</span> to ia.<span class=\"me1\">max</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ia <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">17</span>, <span class=\"nu0\">88</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">33</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">987</span>, -<span class=\"nu0\">10</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a><span class=\"br0\">(</span>min, max<span class=\"br0\">)</span> <span class=\"sy0\">=</span> minmax<span class=\"br0\">(</span>ia<span class=\"br0\">)</span> <span class=\"co1\">// destructuring declaration</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The smallest number is $min\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The largest  number is $max\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 9, "block": "<pre class=\"text highlighted_source\">define multi_value() =&gt; {<br/>\treturn (:'hello word',date)<br/>}<br/>// shows that single method call will return multiple values<br/>// the two values returned are assigned in order to the vars x and y<br/>local(x,y) = multi_value<br/>\u00a0<br/>'x: '+#x<br/>'\\ry: '+#y</pre>"}, {"lang": "Liberty BASIC", "loc": 21, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">data</span>$ <span class=\"sy0\">=</span><span class=\"st0\">\"5 6 7 22 9 3 4 8 7 6 3 -5 2 1 8 9\"</span><br/>\u00a0<br/>a$ <span class=\"sy0\">=</span>minMax$<span class=\"br0\">(</span> <span class=\"kw1\">data</span>$<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\" Minimum was \"</span>; <span class=\"kw1\">word</span>$<span class=\"br0\">(</span> a$<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span>; <span class=\"st0\">\" &amp; maximum was \"</span>; <span class=\"kw1\">word</span>$<span class=\"br0\">(</span> a$<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> minMax$<span class=\"br0\">(</span> i$<span class=\"br0\">)</span><br/>min <span class=\"sy0\">=</span> 1E6<br/>max <span class=\"sy0\">=-</span>1E6<br/>i <span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">do</span><br/>    t$    <span class=\"sy0\">=</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span> i$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> t$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">do</span><br/>    v     <span class=\"sy0\">=</span><span class=\"kw2\">val</span><span class=\"br0\">(</span> t$<span class=\"br0\">)</span><br/>    min   <span class=\"sy0\">=</span><span class=\"kw2\">min</span><span class=\"br0\">(</span> min<span class=\"sy0\">,</span> v<span class=\"br0\">)</span><br/>    max   <span class=\"sy0\">=</span><span class=\"kw2\">max</span><span class=\"br0\">(</span> max<span class=\"sy0\">,</span> v<span class=\"br0\">)</span><br/>    i <span class=\"sy0\">=</span>i <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">loop</span> <span class=\"kw1\">until</span> <span class=\"nu0\">0</span><br/>minMax$ <span class=\"sy0\">=</span><span class=\"kw2\">str$</span><span class=\"br0\">(</span> min<span class=\"br0\">)</span> <span class=\"sy0\">+</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span><span class=\"kw2\">str$</span><span class=\"br0\">(</span> max<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "Lily", "loc": 4, "block": "<pre class=\"text highlighted_source\">define combine(a: Integer, b: String): Tuple[Integer, String]<br/>{<br/>  return &lt;[a, b]&gt;<br/>}</pre>"}, {"lang": "Lua", "loc": 6, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> addsub<span class=\"br0\">(</span> a<span class=\"sy0\">,</span> b <span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy0\">+</span>b<span class=\"sy0\">,</span> a<span class=\"sy0\">-</span>b<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>s<span class=\"sy0\">,</span> d <span class=\"sy0\">=</span> addsub<span class=\"br0\">(</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> s<span class=\"sy0\">,</span> d <span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 6, "block": "<pre class=\"text highlighted_source\">&gt; sumprod\u00a0:= ( a, b ) -&gt; (a + b, a * b):<br/>&gt; sumprod( x, y );<br/>                               x + y, x y<br/>\u00a0<br/>&gt; sumprod( 2, 3 );<br/>                                  5, 6</pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">addsub [x_,y_]:= List [x+y,x-y]<br/>addsub[4,2]</pre>"}, {"lang": "MATLAB / Octave", "loc": 6, "block": "<pre class=\"matlab highlighted_source\">  <span class=\"kw1\">function</span> <span class=\"br0\">[</span>a,b,c<span class=\"br0\">]</span>=foo<span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>    a = <span class=\"nu0\">1</span>-d; <br/>    b = <span class=\"nu0\">2</span>+d; <br/>    c = a+b;<br/>  <span class=\"kw1\">end</span>;  <br/>  <span class=\"br0\">[</span>x,y,z<span class=\"br0\">]</span> = foo<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> </pre>"}, {"lang": "Maxima", "loc": 4, "block": "<pre class=\"text highlighted_source\">f(a, b)\u00a0:= [a * b, a + b]$<br/>\u00a0<br/>[u, v]: f(5, 6);<br/>[30, 11]</pre>"}, {"lang": "Mercury", "loc": 28, "block": "<pre class=\"text highlighted_source\">:- module addsub.<br/>\u00a0<br/>:- interface.<br/>:- import_module io.<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>:- import_module int, list, string.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>    command_line_arguments(Args,\u00a0!IO),<br/>    filter_map(to_int, Args, CleanArgs),<br/>    (length(CleanArgs, 2) -&gt;<br/>        X = det_index1(CleanArgs,1),<br/>        Y = det_index1(CleanArgs,2),<br/>        addsub(X, Y, S, D),<br/>        format(\"%d +\u00a0%d =\u00a0%d\\n%d -\u00a0%d =\u00a0%d\\n\", <br/>               [i(X), i(Y), i(S), i(X), i(Y), i(D)],\u00a0!IO)<br/>   \u00a0;<br/>        write_string(\"Please pass two integers on the command line.\\n\",\u00a0!IO)<br/>    ).<br/>\u00a0<br/>:- pred addsub(int::in, int::in, int::out, int::out) is det.<br/>addsub(X, Y, S, D)\u00a0:-<br/>    S = X + Y,<br/>    D = X - Y.<br/>\u00a0<br/>:- end_module addsub.</pre>"}, {"lang": "Nemerle", "loc": 23, "block": "<pre class=\"text highlighted_source\">using System;<br/>using System.Console;<br/>using Nemerle.Assertions;<br/>\u00a0<br/>module MultReturn<br/>{<br/>    MinMax[T] (ls\u00a0: list[T])\u00a0: T * T<br/>      where T\u00a0: IComparable<br/>      requires ls.Length &gt; 0 otherwise throw ArgumentException(\"An empty list has no extreme values.\")<br/>    {<br/>        def greaterOf(a, b) { if (a.CompareTo(b) &gt; 0) a else b }<br/>        def lesserOf(a, b)  { if (a.CompareTo(b) &lt; 0) a else b }<br/>\u00a0<br/>        (ls.FoldLeft(ls.Head, lesserOf), ls.FoldLeft(ls.Head, greaterOf)) // packing tuple<br/>    }<br/>\u00a0<br/>    Main()\u00a0: void<br/>    {<br/>        def nums = [1, 34, 12, -5, 4, 0];<br/>        def (min, max) = MinMax(nums);                                   // unpacking tuple<br/>        WriteLine($\"Min of nums = $min; max of nums = $max\");<br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 103, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"co1\">-- =============================================================================</span><br/><span class=\"kw1\">class</span> RReturnMultipleVals <span class=\"kw2\">public</span><br/>  <span class=\"kw1\">properties</span> <span class=\"kw2\">constant</span><br/>    L = <span class=\"st0\">'L'</span><br/>    R = <span class=\"st0\">'R'</span><br/>    K_lipsum = <span class=\"st0\">'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'</span><br/>    K_1024 = <span class=\"nu0\">1024</span><br/>\u00a0<br/>  <span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>  method RReturnMultipleVals<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span><br/>    <span class=\"kw1\">return</span><br/>\u00a0<br/>  <span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>  method main<span class=\"br0\">(</span>args = String<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>    arg = Rexx<span class=\"br0\">(</span>args<span class=\"br0\">)</span><br/>    <span class=\"kw1\">parse</span> arg nv_ sv_ .<br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>nv_.<span class=\"kw6\">datatype</span><span class=\"br0\">(</span><span class=\"st0\">'n'</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> nv_ = K_1024<br/>    <span class=\"kw1\">if</span> sv_ = <span class=\"st0\">''</span> <span class=\"kw3\">then</span> sv_ = K_lipsum<br/>\u00a0<br/>    lcl = RReturnMultipleVals<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    rvr = lcl.<span class=\"me0\">getPair</span><span class=\"br0\">(</span>nv_, sv_<span class=\"br0\">)</span> <span class=\"co1\">-- multiple values returned as a string.  Use PARSE to extract values</span><br/>    <span class=\"kw1\">parse</span> rvr val1 val2<br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'Results extracted from a NetRexx string:'</span><br/>    <span class=\"kw1\">say</span> val1<span class=\"st0\">','</span> val2<br/>    <span class=\"kw1\">say</span><br/>\u00a0<br/>    rvr = lcl.<span class=\"me0\">getPairFromRexx</span><span class=\"br0\">(</span>nv_, sv_<span class=\"br0\">)</span> <span class=\"co1\">-- values returned in a NetRexx indexed string</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'Results extracted from a NetRexx \"indexed string\":'</span><br/>    <span class=\"kw1\">say</span> rvr<span class=\"br0\">[</span>L<span class=\"br0\">]</span><span class=\"st0\">','</span> rvr<span class=\"br0\">[</span>R<span class=\"br0\">]</span><br/>    <span class=\"kw1\">say</span><br/>\u00a0<br/>    rvp = lcl.<span class=\"me0\">getPairFromPair</span><span class=\"br0\">(</span>nv_, sv_<span class=\"br0\">)</span> <span class=\"co1\">-- values returned in a bespoke object</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'Results extracted from a composite object:'</span><br/>    <span class=\"kw1\">say</span> rvp.<span class=\"me0\">getLeftVal</span><span class=\"st0\">','</span> rvp.<span class=\"me0\">getRightVal</span><br/>    <span class=\"kw1\">say</span><br/>\u00a0<br/>    rvl = lcl.<span class=\"me0\">getPairFromList</span><span class=\"br0\">(</span>nv_, sv_<span class=\"br0\">)</span> <span class=\"co1\">-- values returned in a Java Collection \"List\" object</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'Results extracted from a Java Colections \"List\" object:'</span><br/>    <span class=\"kw1\">say</span> rvl.<span class=\"me0\">get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"st0\">','</span> rvl.<span class=\"me0\">get</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">say</span><br/>\u00a0<br/>    rvm = lcl.<span class=\"me0\">getPairFromMap</span><span class=\"br0\">(</span>nv_, sv_<span class=\"br0\">)</span> <span class=\"co1\">-- values returned in a Java Collection \"Map\" object</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'Results extracted from a Java Colections \"Map\" object:'</span><br/>    <span class=\"kw1\">say</span> rvm.<span class=\"me0\">get</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"st0\">','</span> rvm.<span class=\"me0\">get</span><span class=\"br0\">(</span>R<span class=\"br0\">)</span><br/>    <span class=\"kw1\">say</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span><br/>\u00a0<br/>  <span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>  <span class=\"co1\">-- returns the values in a NetRexx string.</span><br/>  <span class=\"co1\">--  Caller can the power of PARSE to extract the results</span><br/>  method getPair<span class=\"br0\">(</span>nv_, sv_<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">returns</span> Rexx<br/>    <span class=\"kw1\">return</span> nv_ sv_<br/>\u00a0<br/>  <span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>  <span class=\"co1\">-- Return the values as members of a NetRexx indexed string</span><br/>  method getPairFromRexx<span class=\"br0\">(</span>nv_, sv_<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">returns</span> Rexx<br/>    rval = <span class=\"st0\">''</span><br/>    rval<span class=\"br0\">[</span>L<span class=\"br0\">]</span> = nv_<br/>    rval<span class=\"br0\">[</span>R<span class=\"br0\">]</span> = sv_<br/>    <span class=\"kw1\">return</span> rval<br/>\u00a0<br/>  <span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>  <span class=\"co1\">-- Return a bespoke object.</span><br/>  <span class=\"co1\">-- Permits any number and type of value to be returned</span><br/>  method getPairFromPair<span class=\"br0\">(</span>nv_, sv_<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">returns</span> RReturnMultipleVals.<span class=\"me0\">Pair</span><br/>    rset = RReturnMultipleVals.<span class=\"me0\">Pair</span><span class=\"br0\">(</span>nv_, sv_<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> rset<br/>\u00a0<br/>  <span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>  <span class=\"co1\">-- Exploit Java Collections classes to assemble a collection of results.</span><br/>  <span class=\"co1\">-- This example uses java.util.List</span><br/>  method getPairFromList<span class=\"br0\">(</span>nv_, sv_<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">returns</span> java.<span class=\"me0\">util</span>.<span class=\"me0\">List</span><br/>    rset = ArrayList<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    rset.<span class=\"me0\">add</span><span class=\"br0\">(</span>nv_<span class=\"br0\">)</span><br/>    rset.<span class=\"me0\">add</span><span class=\"br0\">(</span>sv_<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> rset<br/>\u00a0<br/>  <span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>  <span class=\"co1\">-- This example uses java.util.Map</span><br/>  method getPairFromMap<span class=\"br0\">(</span>nv_, sv_<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">returns</span> java.<span class=\"me0\">util</span>.<span class=\"me0\">Map</span><br/>    rset = HashMap<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    rset.<span class=\"me0\">put</span><span class=\"br0\">(</span>L, nv_<span class=\"br0\">)</span><br/>    rset.<span class=\"me0\">put</span><span class=\"br0\">(</span>R, sv_<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> rset<br/>\u00a0<br/><span class=\"co1\">-- =============================================================================</span><br/><span class=\"kw1\">class</span> RReturnMultipleVals.<span class=\"me0\">Pair</span> <span class=\"kw2\">dependent</span><br/>\u00a0<br/>  <span class=\"kw1\">properties</span> indirect<br/>    leftVal<br/>    rightVal<br/>\u00a0<br/>  <span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>  method Pair<span class=\"br0\">(</span>nv_ = parent.<span class=\"me0\">K_1024</span>, sv_ = parent.<span class=\"me0\">K_lipsum</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span><br/>    setLeftVal<span class=\"br0\">(</span>nv_<span class=\"br0\">)</span><br/>    setRightVal<span class=\"br0\">(</span>sv_<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 4, "block": "<pre class=\"text highlighted_source\">proc addsub(x, y): auto =<br/>  (x + y, x - y)<br/>\u00a0<br/>var (a,b) = addsub(12, 15)</pre>"}, {"lang": "Objeck", "loc": 11, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">class</span> Program <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    a <span class=\"sy0\">:=</span> IntHolder<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> b <span class=\"sy0\">:=</span> IntHolder<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Addon<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    a<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> b<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Addon<span class=\"br0\">(</span>a <span class=\"sy0\">:</span> IntHolder<span class=\"sy0\">,</span> b <span class=\"sy0\">:</span> IntHolder<span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    a<span class=\"sy0\">-&gt;</span><span class=\"me1\">Set</span><span class=\"br0\">(</span>a<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> b<span class=\"sy0\">-&gt;</span><span class=\"me1\">Set</span><span class=\"br0\">(</span>b<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 2, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> addsub x y <span class=\"sy0\">=</span><br/>  x <span class=\"sy0\">+</span> y, x <span class=\"sy0\">-</span> y</pre>"}, {"lang": "Oforth", "loc": 10, "block": "<pre class=\"text highlighted_source\">import: date<br/>\u00a0<br/>: returnFourValues 12 13 14 15\u00a0;<br/>: returnOneObject  [ 12, 13, 14, 15, [16, 17 ], Date now, 1.2, \"abcd\" ]\u00a0;<br/>\u00a0<br/>\"Showing four values returned on the parameter stack:\" println<br/>returnFourValues .s clr<br/>\u00a0<br/>\"\\nShowing one object containing four values returned on the parameter stack:\" println<br/>returnOneObject .s clr</pre>"}, {"lang": "ooRexx", "loc": 8, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/>r = addsub<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> r<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> r<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>\u00a0<br/>::routine addsub<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> x, y<br/>  <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span>x + y, x - y<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "OxygenBasic", "loc": 46, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>'============<br/>class vector4<br/>'============<br/>\u00a0<br/>float w,x,y,z<br/>\u00a0<br/>method values(float fw,fx,fy,fz)<br/>this &lt;= fw, fx, fy, fz<br/>end method<br/>\u00a0<br/>method values(vector4 *v)<br/>this &lt;= v.w, v.x, v.y, v.z<br/>end method<br/>\u00a0<br/>method values() as vector4<br/>return this<br/>end method<br/>\u00a0<br/>method ScaledValues(float fw,fx,fy,fz) as vector4<br/>static vector4 v<br/>v &lt;= w*fw, x*fx, y*fy, z*fz<br/>return v<br/>end method<br/>\u00a0<br/>method ShowValues() as string<br/>string cm=\",\"<br/>return w cm x cm y cm z<br/>end method<br/>\u00a0<br/>end class<br/>\u00a0<br/>vector4 aa,bb<br/>\u00a0<br/>bb.values = 1,2,3,4<br/>\u00a0<br/>aa.values = bb.Values()<br/>\u00a0<br/>print aa.ShowValues() 'result 1,2,3,4<br/>\u00a0<br/>aa.values = bb.ScaledValues(100,100,-100,100)<br/>\u00a0<br/>print aa.ShowValues() 'result 100,200,-300,400 <br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 3, "block": "<pre class=\"parigp highlighted_source\">foo<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"br0\">[</span>x<span class=\"sy0\">^</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span> x<span class=\"sy0\">^</span><span class=\"nu1\">3</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 4, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> foo <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$a</span> <span class=\"sy0\">+</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span> <span class=\"sy0\">*</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 5, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> addmul<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$a</span> <span class=\"sy0\">+</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span> <span class=\"sy0\">*</span> <span class=\"re0\">$b</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$add</span><span class=\"sy0\">,</span> <span class=\"re0\">$mul</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> addmul <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 8, "block": "<pre class=\"text highlighted_source\">function stuff()<br/>    return {\"PI\",'=',3.1415926535}<br/>end function<br/>string what<br/>integer op<br/>object val<br/>    {what,op,val} = stuff()<br/>\u00a0</pre>"}, {"lang": "PHP", "loc": 3, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">function</span> addsub<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span> <span class=\"sy0\">-</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">(de addsub (X Y)<br/>   (list (+ X Y) (- X Y)) )</pre>"}, {"lang": "Pike", "loc": 6, "block": "<pre class=\"pike highlighted_source\">array<span class=\"br0\">(</span>int<span class=\"br0\">)</span> addsub<span class=\"br0\">(</span>int x, int y<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">{</span> x<span class=\"sy0\">+</span>y, x<span class=\"sy0\">-</span>y <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">[</span>int z, int w<span class=\"br0\">]</span> <span class=\"sy0\">=</span> addsub<span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PL/I", "loc": 12, "block": "<pre class=\"text highlighted_source\">   define structure 1 h,<br/>                      2 a (10) float;<br/>   declare i fixed binary;<br/>\u00a0<br/>sub: procedure (a, b) returns (type(h));<br/>   declare (a, b) float;<br/>   declare p type (h);<br/>   do i = 1 to 10;<br/>      p.a(i) = i;<br/>   end;<br/>   return (p);<br/>end sub;</pre>"}, {"lang": "PowerShell", "loc": 11, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> multiple<span class=\"sy0\">-</span>value <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>pscustomobject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>        a <span class=\"sy0\">=</span> <span class=\"re0\">$a</span><br/>        b <span class=\"sy0\">=</span> <span class=\"re0\">$b</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"re0\">$m</span> <span class=\"sy0\">=</span>  multiple<span class=\"sy0\">-</span>value <span class=\"st0\">\"value\"</span> <span class=\"nu0\">1</span><br/><span class=\"re0\">$m</span>.a<br/><span class=\"re0\">$m</span>.b<br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 33, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"co1\">;An array, map, or list can be used as a parameter to a procedure and in the</span><br/><span class=\"co1\">;process contain values to be returned as well.</span><br/><span class=\"kw1\">Procedure</span> example_1<span class=\"br0\">(</span>x, y, Array r<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">;array r() will contain the return values</span><br/>  <span class=\"kw1\">Dim</span> r<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">;clear and resize the array</span><br/>  r<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> y  <span class=\"co1\">;return these values in the array</span><br/>  r<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x <span class=\"sy0\">-</span> y<br/>  r<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> y <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">;A pointer to memory or a structured variable may also be returned to reference</span><br/><span class=\"co1\">;multiple return values (requiring the memory to be manually freed afterwards).</span><br/><span class=\"kw1\">Procedure</span> example_2<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> <span class=\"sy0\">*</span>result.<span class=\"kw2\">POINT</span> <span class=\"sy0\">=</span> <span class=\"kw2\">AllocateMemory</span><span class=\"br0\">(</span><span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span><span class=\"kw2\">POINT</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">*</span>result<span class=\"sy0\">\\</span>x <span class=\"sy0\">=</span> x<br/>  <span class=\"sy0\">*</span>result<span class=\"sy0\">\\</span>y <span class=\"sy0\">=</span> y<br/>\u00a0<br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"sy0\">*</span>result <span class=\"co1\">;*result points to a 'POINT' structure containing x and y</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>  example_1<span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"nu0\">5</span>, a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;a() now contains {11, 1, 30}</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Array returned with {\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">Define</span> <span class=\"sy0\">*</span>aPoint.<span class=\"kw2\">POINT</span><br/>  <span class=\"sy0\">*</span>aPoint <span class=\"sy0\">=</span> example_2<span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"co1\">;*aPoint references structured memory containing {6, 5}</span><br/>\u00a0<br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"structured memory holds: (\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>aPoint<span class=\"sy0\">\\</span>x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>aPoint<span class=\"sy0\">\\</span>y<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">FreeMemory</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>aPoint<span class=\"br0\">)</span> <span class=\"co1\">;freememory</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 2, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> addsub<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span>:<br/>  <span class=\"kw1\">return</span> x + y<span class=\"sy0\">,</span> x - y</pre>"}, {"lang": "R", "loc": 1, "block": "<pre class=\"text highlighted_source\">addsub &lt;- function(x, y) list(add=(x + y), sub=(x - y))</pre>"}, {"lang": "Racket", "loc": 7, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(values 4 5)<br/>\u00a0<br/>(define (my-values . return-list)<br/>  (call/cc<br/>   (lambda (return)<br/>     (apply return return-list))))</pre>"}, {"lang": "Raven", "loc": 4, "block": "<pre class=\"text highlighted_source\">define multiReturn use $v<br/>   $v each <br/>\u00a0<br/>3 multiReturn</pre>"}, {"lang": "Retro", "loc": 2, "block": "<pre class=\"text highlighted_source\">: addSubtract ( xy-nm )<br/>  2over - [ + ] dip\u00a0;</pre>"}, {"lang": "REXX", "loc": 21, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program shows and displays examples of multiple  RETURN  values  from a function.*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">70</span>                                <span class=\"coMULTI\">/*the default is:    NUMERIC DIGITS 9  */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> a b <span class=\"sy0\">.</span>                                  <span class=\"coMULTI\">/*obtain two numbers from command line.*/</span><br/><span class=\"kw1\">if</span> a==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> a==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> a=<span class=\"nu0\">82</span>                     <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> b==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> b==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> b=<span class=\"nu0\">20</span>                     <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'     a ='</span>  a                                <span class=\"coMULTI\">/*display the first number to the term.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'     b ='</span>  b                                <span class=\"coMULTI\">/*   \"     \"  second   \"    \"  \"    \"  */</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2550'</span>, <span class=\"nu0\">50</span><span class=\"br0\">)</span>                              <span class=\"coMULTI\">/*display a separator line  \"  \"    \"  */</span><br/>z= arithmetics<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span>                             <span class=\"coMULTI\">/*call the function:   arithmetics     */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> z  abut sum diff rem div Idiv prod pow <span class=\"coMULTI\">/*obtain the function's returned values*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'    || ='</span>  abut                             <span class=\"coMULTI\">/*display   abutment   to the terminal.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'     + ='</span>  sum                              <span class=\"coMULTI\">/*   \"        sum       \"  \"     \"     */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'     - ='</span>  diff                             <span class=\"coMULTI\">/*   \"     difference   \"  \"     \"     */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'    // ='</span>  rem                              <span class=\"coMULTI\">/*   \"     remainder    \"  \"     \"     */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'     / ='</span>  div                              <span class=\"coMULTI\">/*   \"      quotient    \"  \"     \"     */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'    \u00a0% ='</span>  Idiv                             <span class=\"coMULTI\">/*   \"   int. quotient  \"  \"     \"     */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'     * ='</span>  prod                             <span class=\"coMULTI\">/*   \"       product    \"  \"     \"     */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'    ** ='</span>  pow                              <span class=\"coMULTI\">/*   \"        power     \"  \"     \"     */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>arithmetics: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x,y;  <span class=\"kw1\">return</span>  x<span class=\"sy0\">||</span>y  x+y  x-y  x<span class=\"sy0\">//</span>y  x<span class=\"sy0\">/</span>y  x%y  x<span class=\"sy0\">*</span>y  x<span class=\"sy0\">**</span>y</pre>"}, {"lang": "Ring", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Func AddSub x,y <br/>     Return [ x+y, x-y ]<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 3, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> addsub<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>  <span class=\"br0\">[</span>x <span class=\"sy0\">+</span> y, x <span class=\"sy0\">-</span> y<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 11, "block": "<pre class=\"text highlighted_source\">a$ = timeInfo$()<br/>print \" UTC:\";word$(a$,1,\"|\")<br/>print \"Date:\";word$(a$,2,\"|\")<br/>print \"Time:\";word$(a$,3,\"|\")<br/>wait<br/>function timeInfo$()<br/>utc$ = word$(word$(httpget$(\"http://tycho.usno.navy.mil/cgi-bin/timer.pl\"),1,\"UTC\"),2,\"&lt;BR&gt;\") ' Universal time<br/>d$   = date$()<br/>t$  = time$()<br/>timeInfo$ = utc$;\"|\";d$;\"|\";t$<br/>end function</pre>"}, {"lang": "Rust", "loc": 9, "block": "<pre class=\"text highlighted_source\">fn multi_hello() -&gt; (&amp;'static str, i32) {<br/>    (\"Hello\",42)<br/>}<br/>\u00a0<br/>fn main() {<br/>    let (str,num)=multi_hello();<br/>    println!(\"{},{}\",str,num);<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 1, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> addSubMult<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x + y, x - y, x <span class=\"sy0\">*</span> y<span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 2, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>addsub x y<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>values <span class=\"br0\">(</span><span class=\"sy0\">+</span> x y<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> x y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 17, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: sumAndDiff (in integer: x, in integer: y, inout integer: sum, inout integer: diff) is func<br/>  begin<br/>    sum\u00a0:= x + y;<br/>    diff\u00a0:= x - y;<br/> end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: sum is 0;<br/>    var integer: diff is 0;<br/>  begin<br/>    sumAndDiff(5, 3, sum, diff);<br/>    writeln(\"Sum: \" &lt;&amp; sum);<br/>    writeln(\"Diff: \" &lt;&amp; diff);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">func foo<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">return</span> <span class=\"br0\">(</span>a<span class=\"sy0\">+</span>b, a<span class=\"sy0\">*</span>b<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Smalltalk", "loc": 4, "block": "<pre class=\"smalltalk highlighted_source\">foo multipleValuesInto:<span class=\"br0\">[</span>:<span class=\"re5\">a</span>\u00a0:<span class=\"re5\">b</span> | <br/>   <span class=\"re0\">Transcript</span> show:<span class=\"re5\">a</span>; cr.<br/>   <span class=\"re0\">Transcript</span> show:<span class=\"re5\">b</span>; cr.<br/><span class=\"br0\">]</span></pre>"}, {"lang": "Standard ML", "loc": 2, "block": "<pre class=\"text highlighted_source\">fun addsub (x, y) =<br/>  (x + y, x - y)</pre>"}, {"lang": "Swift", "loc": 3, "block": "<pre class=\"text highlighted_source\">func addsub(x: Int, y: Int) -&gt; (Int, Int) {<br/>  return (x + y, x - y)<br/>}</pre>"}, {"lang": "Tcl", "loc": 3, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> addsub <span class=\"br0\">{</span>x y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>+<span class=\"re0\">$y</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>-<span class=\"re0\">$y</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TXR", "loc": 4, "block": "<pre class=\"text highlighted_source\">@(define func (x y z))<br/>@  (bind w \"discarded\")<br/>@  (bind (x y z) (\"a\" \"b\" \"c\"))<br/>@(end)</pre>"}, {"lang": "UNIX Shell", "loc": 16, "block": "<pre class=\"bash highlighted_source\">\u00a0<br/><span class=\"co0\">#!/bin/sh</span><br/>funct1<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"re2\">a</span>=<span class=\"re4\">$1</span><br/>  <span class=\"re2\">b</span>=<span class=\"sy0\">`</span><span class=\"kw2\">expr</span> <span class=\"re1\">$a</span> + <span class=\"nu0\">1</span><span class=\"sy0\">`</span><br/>  <span class=\"kw3\">echo</span> <span class=\"re1\">$a</span> <span class=\"re1\">$b</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re2\">values</span>=<span class=\"sy0\">`</span>funct1 <span class=\"nu0\">5</span><span class=\"sy0\">`</span><br/>\u00a0<br/><span class=\"kw1\">set</span> <span class=\"re1\">$values</span><br/><span class=\"re2\">x</span>=<span class=\"re4\">$1</span><br/><span class=\"re2\">y</span>=<span class=\"re4\">$2</span><br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"x=<span class=\"es2\">$x</span>\"</span><br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"y=<span class=\"es2\">$y</span>\"</span><br/>\u00a0</pre>"}, {"lang": "Ursa", "loc": 20, "block": "<pre class=\"text highlighted_source\">def getstrs (int n)<br/>        decl string&lt;&gt; input<br/>\u00a0<br/>        while (&gt; n 0)<br/>                out \": \" console<br/>                append (in string console) input<br/>                dec n<br/>        end while<br/>\u00a0<br/>        return input<br/>end getstrs<br/>\u00a0<br/>decl int amount<br/>out \"how many strings do you want to enter? \" console<br/>set amount (in int console)<br/>\u00a0<br/>decl string&lt;&gt; ret<br/>set ret (getstrs amount)<br/>\u00a0<br/>out endl ret endl console</pre>"}, {"lang": "VBA", "loc": 21, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw4\">Type</span> Contact<br/>    Name <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>    firstname <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>    Age <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span><br/><span class=\"kw3\">End</span> <span class=\"kw4\">Type</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> SetContact(N <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, Fn <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, A <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>) <span class=\"kw4\">As</span> Contact<br/>    SetContact.Name = N<br/>    SetContact.firstname = Fn<br/>    SetContact.Age = A<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'For use\u00a0:<br/></span><span class=\"kw2\">Sub</span> Test_SetContact()<br/><span class=\"kw4\">Dim</span> Cont <span class=\"kw4\">As</span> Contact<br/>\u00a0<br/>    Cont = SetContact(<span class=\"st0\">\"SMITH\"</span>, <span class=\"st0\">\"John\"</span>, 23)<br/>    Debug.<span class=\"kw4\">Print</span> Cont.Name &amp; <span class=\"st0\">\" \"</span> &amp; Cont.firstname &amp; <span class=\"st0\">\", \"</span> &amp; Cont.Age &amp; <span class=\"st0\">\" years old.\"</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0</pre>"}, {"lang": "Visual FoxPro", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>*!* Return multiple values from a function<br/>*!* The simplest way is to pass the parameters by reference<br/>*!* either by SET UDFPARMS TO REFERENCE, or prefix the variables with @.<br/>LOCAL a, b<br/>a = 5<br/>b = 6<br/>? \"Sum =\", AddUp(@a, @b)    &amp;&amp; Displays 11<br/>? \"a =\", a, \"b =\", b        &amp;&amp; Displays 4, 5<br/>? \"Sum =\", AddUp(@a, @b)    &amp;&amp; Displays 9<br/>\u00a0<br/>FUNCTION AddUp(n1, n2)<br/>LOCAL n <br/>n = n1 + n2<br/>n1 = n1 - 1<br/>n2 = n2 - 1 <br/>RETURN n<br/>ENDFUNC<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 14, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>\u00a0<br/>proc Rect2Polar(X,Y,A,D);       \\Return two polar coordinate values<br/>real X,Y,A,D;<br/>[A(0):= ATan2(Y,X);<br/> D(0):= Sqrt(X*X+Y*Y);<br/>]; \\Rect2Polar<br/>\u00a0<br/>real Ang, Dist;<br/>[Rect2Polar(4.0, 3.0, @Ang, @Dist);  \\(\"@\" is a new feature similar to 'addr')<br/>RlOut(0, Ang); <br/>RlOut(0, Dist); <br/>CrLf(0);<br/>]</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">fcn f{return(1,2,\"three\")}<br/>a,b,c:=f()  // a==1, b==2, c==\"three\"</pre>"}]}