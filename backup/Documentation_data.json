{"task": "Documentation", "blocks": [{"lang": "Ada", "loc": 25, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_Io</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_Io</span>;<br/>\u00a0<br/><span class=\"kw3\">generic</span><br/>   SortName\u00a0: <span class=\"kw3\">in</span> String;<br/>   <span class=\"kw3\">type</span> DataType <span class=\"kw1\">is</span> <span class=\"br0\">(</span>&lt;&gt;<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">type</span> SortArrayType <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Integer <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> DataType;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">procedure</span> Sort <span class=\"br0\">(</span>SortArray\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> SortArrayType;<br/>                        Comp, Write, Ex\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Natural<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw3\">package</span> Instrument <span class=\"kw1\">is</span><br/>   <span class=\"co1\">-- This generic package essentially accomplishes turning the sort</span><br/>   <span class=\"co1\">--  procedures into first-class functions for this limited purpose.</span><br/>   <span class=\"co1\">--  Obviously it doesn't change the way that Ada works with them;</span><br/>   <span class=\"co1\">--  the same thing would have been much more straightforward to</span><br/>   <span class=\"co1\">--  program in a language that had true first-class functions</span><br/>\u00a0<br/>   <span class=\"kw3\">package</span> Dur_Io <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Fixed_Io<span class=\"br0\">(</span>Duration<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> TimeSort <span class=\"br0\">(</span>Arr\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> SortArrayType<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Put;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Put <span class=\"br0\">(</span>File\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> File_Type<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">end</span> Instrument;</pre>"}, {"lang": "AutoHotkey", "loc": 17, "block": "<pre class=\"autohotkey highlighted_source\"><span class=\"co1\">;</span><br/><span class=\"co1\">; Function: example_add</span><br/><span class=\"co1\">; Description:</span><br/><span class=\"co1\">;     Adds two or three numbers (see [url=http://en.wikipedia.org/Number]Number [/url])</span><br/><span class=\"co1\">; Syntax: example_add(number1, number2[, number3=0])</span><br/><span class=\"co1\">; Parameters:</span><br/><span class=\"co1\">;\t\tnumber1 - First number to add.</span><br/><span class=\"co1\">;\t\tnumber2 - Second number to add.</span><br/><span class=\"co1\">;\t\tnumber3 - (Optional) Third number to add. You can just omit this parameter.</span><br/><span class=\"co1\">; Return Value: </span><br/><span class=\"co1\">;\t\tsum of parameters</span><br/><span class=\"co1\">; Example:</span><br/><span class=\"co1\">;\t\tMsgBox\u00a0% example_add(example_add(2, 3, 4), 5)</span><br/><span class=\"co1\">;</span><br/>example_add<span class=\"br0\">(</span>number1<span class=\"sy0\">,</span> number2<span class=\"sy0\">,</span> number3<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> number1 <span class=\"sy0\">+</span> number2 <span class=\"sy0\">+</span> number3<br/><span class=\"br0\">}</span></pre>"}, {"lang": "C", "loc": 14, "block": "<pre class=\"c highlighted_source\"><span class=\"coMULTI\">/**<br/> * \\brief Perform addition on \\p a and \\p b.<br/> *<br/> * \\param a One of the numbers to be added.<br/> * \\param b Another number to be added.<br/> * \\return The sum of \\p a and \\p b.<br/> * \\code<br/> *     int sum = add(1, 2);<br/> * \\endcode<br/> */</span><br/><span class=\"kw4\">int</span> add<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> a <span class=\"sy0\">+</span> b<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 7, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>def <br/> #<span class=\"sy0\">^</span><span class=\"br0\">{</span><span class=\"sy0\">:</span><span class=\"me1\">doc</span> <span class=\"st0\">\"Metadata can contain documentation and can be added to vars like this.\"</span><span class=\"br0\">}</span><br/>     test1<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn test2<br/>  <span class=\"st0\">\"defn and some other macros allow you add documentation like this. Works the same way\"</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 59, "block": "<pre class=\"cobol highlighted_source\">\u00a0<br/>      *&gt;****L* cobweb/cobweb-gtk <span class=\"br0\">[</span><span class=\"nu0\">0.2</span><span class=\"br0\">]</span><br/>      *&gt; <span class=\"kw3\">Author</span>:<br/>      *&gt;   <span class=\"kw3\">Author</span> details<br/>      *&gt; Colophon:<br/>      *&gt;   Part <span class=\"kw3\">of</span> the GnuCobol free software project<br/>      *&gt;   Copyright <span class=\"br0\">(</span>C<span class=\"br0\">)</span> <span class=\"nu0\">2014</span> person<br/>      *&gt;   <span class=\"kw3\">Date</span>      <span class=\"nu0\">20130308</span><br/>      *&gt;   Modified  <span class=\"nu0\">20141003</span><br/>      *&gt;   License   GNU General Public License<span class=\"sy0\">,</span> GPL<span class=\"sy0\">,</span> <span class=\"nu0\">3.0</span> <span class=\"kw3\">or</span> <span class=\"kw3\">greater</span><br/>      *&gt;   Documentation licensed GNU FDL<span class=\"sy0\">,</span> version <span class=\"nu0\">2.1</span> <span class=\"kw3\">or</span> <span class=\"kw3\">greater</span><br/>      *&gt;   HTML Documentation thanks <span class=\"kw2\">to</span> ROBODoc --<span class=\"kw2\">cobol</span><br/>      *&gt; Purpose:<br/>      *&gt; GnuCobol functional bindings <span class=\"kw2\">to</span> GTK+<br/>      *&gt; <span class=\"kw1\">Main</span> module includes paperwork <span class=\"kw3\">output</span> <span class=\"kw3\">and</span> self <span class=\"kw3\">test</span><br/>      *&gt; Synopsis:<br/>      *&gt; |dotfile cobweb-gtk<span class=\"sy0\">.</span>dot<br/>      *&gt; |html &lt;br /&gt;<br/>      *&gt; Functions include<br/>      *&gt; |exec cobcrun cobweb-gtk &gt;cobweb-gtk<span class=\"sy0\">.</span>repository<br/>      *&gt; |html &lt;pre&gt;<br/>      *&gt; |<span class=\"kw2\">copy</span> cobweb-gtk<span class=\"sy0\">.</span>repository<br/>      *&gt; |html &lt;/pre&gt;<br/>      *&gt; |exec rm cobweb-gtk<span class=\"sy0\">.</span>repository<br/>      *&gt; Tectonics:<br/>      *&gt;   cobc -v -b -g -debug cobweb-gtk<span class=\"sy0\">.</span>cob voidcall_gtk<span class=\"sy0\">.</span>c<br/>      *&gt;        `pkg-config --libs gtk+-<span class=\"nu0\">3.0</span>` -lvte2_90 -lyelp<br/>      *&gt;   robodoc --<span class=\"kw2\">cobol</span> --src <span class=\"sy0\">.</span>/ --doc cobwebgtk --multidoc --rc robocob<span class=\"sy0\">.</span>rc --css cobodoc<span class=\"sy0\">.</span>css<br/>      *&gt;   cobc -E -Ddocpass cobweb-gtk<span class=\"sy0\">.</span>cob<br/>      *&gt;   make singlehtml  # once Sphinx <span class=\"kw3\">set</span> <span class=\"kw3\">up</span> <span class=\"kw2\">to</span> read cobweb-gtk<span class=\"sy0\">.</span>i<br/>      *&gt; Example:<br/>      *&gt;  <span class=\"kw2\">COPY</span> cobweb-gtk-preamble<span class=\"sy0\">.</span><br/>      *&gt;  <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>      *&gt;  <span class=\"kw2\">move</span> TOP-LEVEL <span class=\"kw2\">to</span> window-<span class=\"kw3\">type</span><br/>      *&gt;  <span class=\"kw2\">move</span> <span class=\"nu0\">640</span> <span class=\"kw2\">to</span> width-hint<br/>      *&gt;  <span class=\"kw2\">move</span> <span class=\"nu0\">480</span> <span class=\"kw2\">to</span> height-hint<br/>      *&gt;  <span class=\"kw2\">move</span> new-window<span class=\"br0\">(</span><span class=\"st0\">\"window title\"</span><span class=\"sy0\">,</span> window-<span class=\"kw3\">type</span><span class=\"sy0\">,</span><br/>      *&gt;      width-hint<span class=\"sy0\">,</span> height-hint<span class=\"br0\">)</span><br/>      *&gt;    <span class=\"kw2\">to</span> gtk-window-<span class=\"kw3\">data</span><br/>      *&gt;  <span class=\"kw2\">move</span> gtk-<span class=\"kw2\">go</span><span class=\"br0\">(</span>gtk-window<span class=\"br0\">)</span> <span class=\"kw2\">to</span> extraneous<br/>      *&gt;  goback<span class=\"sy0\">.</span><br/>      *&gt; Notes:<br/>      *&gt;  The interface signatures changed between <span class=\"nu0\">0.1</span> <span class=\"kw3\">and</span> <span class=\"nu0\">0.2</span><br/>      *&gt; Screenshot:<br/>      *&gt; image:cobweb-gtk1<span class=\"sy0\">.</span>png<br/>      *&gt; <span class=\"kw1\">Source</span>:<br/>       <span class=\"kw3\">REPLACE</span> <span class=\"sy0\">==</span>FIELDSIZE<span class=\"sy0\">==</span> <span class=\"kw3\">BY</span> <span class=\"sy0\">==</span><span class=\"nu0\">80</span><span class=\"sy0\">==</span><br/>               <span class=\"sy0\">==</span>AREASIZE<span class=\"sy0\">==</span>  <span class=\"kw3\">BY</span> <span class=\"sy0\">==</span><span class=\"nu0\">32768</span><span class=\"sy0\">==</span><br/>               <span class=\"sy0\">==</span>FILESIZE<span class=\"sy0\">==</span>  <span class=\"kw3\">BY</span> <span class=\"sy0\">==</span><span class=\"nu0\">65536</span><span class=\"sy0\">==.</span><br/>\u00a0<br/>id     <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> cobweb-gtk<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"sy0\">...</span><br/>\u00a0<br/>done   goback<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> cobweb-gtk<span class=\"sy0\">.</span><br/>      *&gt;****<br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 1, "block": "<pre>CL-USER 83 &gt; (defun add (a b)\n               \"add two numbers a and b\"\n               (+ a b))\nADD\n</pre>"}, {"lang": "C#", "loc": 20, "block": "<pre class=\"csharp highlighted_source\"><span class=\"co1\">/// &lt;summary&gt;</span><br/><span class=\"co1\">/// The XMLSystem class is here to help handle XML items in this site.</span><br/><span class=\"co1\">/// &lt;/summary&gt;</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> XMLSystem<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> XMLSystem<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">// Constructor</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">/// &lt;summary&gt;</span><br/>    <span class=\"co1\">/// A function to get the contents of an XML document.</span><br/>    <span class=\"co1\">/// &lt;/summary&gt;</span><br/>    <span class=\"co1\">/// &lt;param name=\"name\"&gt;A valid name of an XML document in the data folder&lt;/param&gt;</span><br/>    <span class=\"co1\">/// &lt;returns&gt;An XmlDocument containing the contents of the XML file&lt;/returns&gt;</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> XmlDocument GetXML<span class=\"br0\">(</span><span class=\"kw4\">string</span> name<span class=\"br0\">)</span> <br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">null</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 42, "block": "<pre class=\"d highlighted_source\"><span class=\"co3\">/**<br/>This is a documentation comment for someFunc and someFunc2.<br/>$(DDOC_COMMENT comment inside a documentation comment<br/>(results in a HTML comment not displayed by the browser))<br/>\u00a0<br/>Header:<br/>    content (does not need to be tabbed out; this is done for clarity<br/>    of the comments and has no effect on the resulting documentation)<br/>\u00a0<br/>Params:<br/>    arg1 = Something (listed as \"int &lt;i&gt;arg1&lt;/i&gt; Something\")<br/>    arg2 = Something else<br/>\u00a0<br/>Returns:<br/>    Nothing<br/>\u00a0<br/>TODO:<br/>    Nothing at all<br/>\u00a0<br/>BUG:<br/>    None found<br/>*/</span><br/><span class=\"kw4\">void</span> someFunc<span class=\"br0\">(</span><span class=\"kw4\">int</span> arg1<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> arg2<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// This groups this function with the above (both have the</span><br/><span class=\"co1\">//  same doc and are listed together)</span><br/><span class=\"co2\">/// ditto</span><br/><span class=\"kw4\">void</span> someFunc2<span class=\"br0\">(</span><span class=\"kw4\">int</span> arg1<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> arg2<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">/// Sum function.</span><br/><span class=\"kw4\">int</span> sum<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> y<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> x <span class=\"sy0\">+</span> y<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// These unittests will become part of sum documentation:</span><br/><span class=\"co2\">///</span><br/><span class=\"kw4\">unittest</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>sum<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/++ Another documentation comment +/</span><br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 10, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">type</span><br/>  <span class=\"co1\">/// &lt;summary&gt;Sample class.&lt;/summary&gt;</span><br/>  TMyClass <span class=\"sy3\">=</span> <span class=\"kw1\">class</span><br/>  <span class=\"kw1\">public</span><br/>    <span class=\"co1\">/// &lt;summary&gt;Converts a string into a number.&lt;/summary&gt;</span><br/>    <span class=\"co1\">/// &lt;param name=\"aValue\"&gt;String parameter&lt;/param&gt;</span><br/>    <span class=\"co1\">/// &lt;returns&gt;Numeric equivalent of aValue&lt;/returns&gt;</span><br/>    <span class=\"co1\">/// &lt;exception cref=\"EConvertError\"&gt;aValue is not a valid integer.&lt;/exception&gt;</span><br/>    <span class=\"kw1\">function</span> StringToNumber<span class=\"br0\">(</span>aValue<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "E", "loc": 8, "block": "<pre class=\"e highlighted_source\"><span class=\"sy0\">?</span> <span class=\"coMULTI\">/** This is an object with documentation */</span><br/><span class=\"sy0\">&gt;</span> <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> foo <span class=\"br0\">{</span><br/><span class=\"sy0\">&gt;</span>   <span class=\"co1\"># ...</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">}</span><br/><span class=\"co1\"># value: &lt;foo&gt;</span><br/>\u00a0<br/><span class=\"sy0\">?</span> foo.__getAllegedType<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">getDocComment</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: \" This is an object with documentation \"</span></pre>"}, {"lang": "Eiffel", "loc": 88, "block": "<pre class=\"eiffel highlighted_source\">note<br/>\tdescription<span class=\"sy0\">:</span> <span class=\"st0\">\"Objects that model Times of Day: 00:00:00 - 23:59:59\"</span><br/>\tauthor<span class=\"sy0\">:</span> <span class=\"st0\">\"Eiffel Software Construction Students\"</span><br/>\u00a0<br/><span class=\"kw1\">class</span><br/>    TIME_OF_DAY<br/><span class=\"kw2\">create</span><br/>    make<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>    make<br/>            <span class=\"co1\">-- Initialize to 00:00:00</span><br/>        <span class=\"kw2\">do</span><br/>            hour <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>            minute <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>            second <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw2\">ensure</span><br/>            initialized<span class=\"sy0\">:</span> hour   <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">and</span><br/>                    minute <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">and</span><br/>                    second <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Access</span><br/>\u00a0<br/>    hour<span class=\"sy0\">:</span>   <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>            <span class=\"co1\">-- Hour expressed as 24-hour value</span><br/>\u00a0<br/>    minute<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>            <span class=\"co1\">-- Minutes past the hour</span><br/>\u00a0<br/>    second<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>            <span class=\"co1\">-- Seconds past the minute</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- Element change</span><br/>\u00a0<br/>    set_hour <span class=\"br0\">(</span>h<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><br/>            <span class=\"co1\">-- Set the hour from `h'</span><br/>        <span class=\"kw2\">require</span><br/>            argument_hour_valid<span class=\"sy0\">:</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> h <span class=\"kw2\">and</span> h <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">23</span><br/>        <span class=\"kw2\">do</span><br/>            hour <span class=\"sy0\">:=</span> h<br/>        <span class=\"kw2\">ensure</span><br/>            hour_set<span class=\"sy0\">:</span> hour <span class=\"sy0\">=</span> h<br/>            minute_unchanged<span class=\"sy0\">:</span> minute <span class=\"sy0\">=</span> <span class=\"kw2\">old</span> minute<br/>            second_unchanged<span class=\"sy0\">:</span> second <span class=\"sy0\">=</span> <span class=\"kw2\">old</span> second<br/>        <span class=\"kw2\">end</span><br/>\u00a0<br/>    set_minute <span class=\"br0\">(</span>m<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><br/>            <span class=\"co1\">-- Set the minute from `m'</span><br/>        <span class=\"kw2\">require</span><br/>            argument_minute_valid<span class=\"sy0\">:</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> m <span class=\"kw2\">and</span> m <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">59</span><br/>        <span class=\"kw2\">do</span><br/>            minute <span class=\"sy0\">:=</span> m<br/>        <span class=\"kw2\">ensure</span><br/>            minute_set<span class=\"sy0\">:</span> minute <span class=\"sy0\">=</span> m<br/>            hour_unchanged<span class=\"sy0\">:</span> hour <span class=\"sy0\">=</span> <span class=\"kw2\">old</span> hour<br/>            second_unchanged<span class=\"sy0\">:</span> second <span class=\"sy0\">=</span> <span class=\"kw2\">old</span> second<br/>        <span class=\"kw2\">end</span><br/>\u00a0<br/>    set_second <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><br/>            <span class=\"co1\">-- Set the second from `s'</span><br/>        <span class=\"kw2\">require</span><br/>            argument_second_valid<span class=\"sy0\">:</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> s <span class=\"kw2\">and</span> s <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">59</span><br/>        <span class=\"kw2\">do</span><br/>            second <span class=\"sy0\">:=</span> s<br/>        <span class=\"kw2\">ensure</span><br/>            second_set<span class=\"sy0\">:</span> second <span class=\"sy0\">=</span> s<br/>            hour_unchanged<span class=\"sy0\">:</span> hour <span class=\"sy0\">=</span> <span class=\"kw2\">old</span> hour<br/>            minute_unchanged<span class=\"sy0\">:</span> minute <span class=\"sy0\">=</span> <span class=\"kw2\">old</span> minute<br/>        <span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span> <span class=\"co1\">-- Implementation</span><br/>\u00a0<br/>    protected_routine<br/>            <span class=\"co1\">-- A protected routine (not available to client classes)</span><br/>            <span class=\"co1\">-- Will not be present in documentation (Contract) view</span><br/>        <span class=\"kw2\">do</span><br/>\u00a0<br/>        <span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">invariant</span><br/>\u00a0<br/>    hour_valid<span class=\"sy0\">:</span>   <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> hour   <span class=\"kw2\">and</span> hour   <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">23</span><br/>    minute_valid<span class=\"sy0\">:</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> minute <span class=\"kw2\">and</span> minute <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">59</span><br/>    second_valid<span class=\"sy0\">:</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;=</span> second <span class=\"kw2\">and</span> second <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">59</span><br/>\u00a0<br/><span class=\"kw2\">end</span> <span class=\"co1\">-- class TIME_OF_DAY</span></pre>"}, {"lang": "Elixir", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>def project do<br/>  [app:\u00a0:repo<br/>   version: \"0.1.0-dev\",<br/>   name: \"REPO\",<br/>   source_url: \"https://github.com/USER/REPO\",<br/>   homepage_url: \"http://YOUR_PROJECT_HOMEPAGE\"<br/>   deps: deps]<br/>end<br/>\u00a0</pre>"}, {"lang": "Emacs Lisp", "loc": 3, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> hello <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Say hello to the user.\"</span><br/>  <span class=\"br0\">(</span>message <span class=\"st0\">\"hello\u00a0%d\"</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 13, "block": "<pre class=\"text highlighted_source\">def class Foo {<br/>  \"\"\"<br/>  This is a docstring. Every object in Fancy can have it's own docstring.<br/>  Either defined in the source code, like this one, or by using the Object#docstring: method<br/>  \"\"\"<br/>  def a_method {<br/>    \"\"\"<br/>    Same for methods. They can have docstrings, too.<br/>    \"\"\"<br/>  }<br/>}<br/>Foo docstring println # prints docstring Foo class<br/>Foo instance_method: 'a_method . docstring println # prints method's docstring</pre>"}, {"lang": "Factor", "loc": 13, "block": "<pre class=\"text highlighted_source\">def class Foo {<br/>  \"\"\"<br/>  This is a docstring. Every object in Fancy can have it's own docstring.<br/>  Either defined in the source code, like this one, or by using the Object#docstring: method<br/>  \"\"\"<br/>  def a_method {<br/>    \"\"\"<br/>    Same for methods. They can have docstrings, too.<br/>    \"\"\"<br/>  }<br/>}<br/>Foo docstring println # prints docstring Foo class<br/>Foo instance_method: 'a_method . docstring println # prints method's docstring</pre>"}, {"lang": "Fancy", "loc": 13, "block": "<pre class=\"text highlighted_source\">def class Foo {<br/>  \"\"\"<br/>  This is a docstring. Every object in Fancy can have it's own docstring.<br/>  Either defined in the source code, like this one, or by using the Object#docstring: method<br/>  \"\"\"<br/>  def a_method {<br/>    \"\"\"<br/>    Same for methods. They can have docstrings, too.<br/>    \"\"\"<br/>  }<br/>}<br/>Foo docstring println # prints docstring Foo class<br/>Foo instance_method: 'a_method . docstring println # prints method's docstring</pre>"}, {"lang": "Fortran", "loc": 3, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">SUBROUTINE</span> SHOW<span class=\"br0\">(</span>A,N<span class=\"br0\">)</span>   <span class=\"co1\">!Prints details to I/O unit LINPR.</span><br/>        <span class=\"kw3\">REAL</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span> A    <span class=\"co1\">!Distance to the next node.</span><br/>        <span class=\"kw3\">INTEGER</span> N   <span class=\"co1\">!Number of the current node.</span></pre>"}, {"lang": "Forth", "loc": 1, "block": "<pre class=\"text highlighted_source\">\\ this is a comment</pre>"}, {"lang": "FreeBASIC", "loc": 25, "block": "<pre class=\"go highlighted_source\"><span class=\"co1\">// Example serves as an example but does nothing useful.</span><br/><span class=\"co1\">//</span><br/><span class=\"co1\">// A package comment preceeds the package clause and explains the purpose</span><br/><span class=\"co1\">// of the package.</span><br/><span class=\"kw1\">package</span> example<br/>\u00a0<br/><span class=\"co1\">// Exported variables.</span><br/><span class=\"kw1\">var</span> <span class=\"sy1\">(</span><br/>    <span class=\"co1\">// lookie</span><br/>    X<span class=\"sy1\">,</span> Y<span class=\"sy1\">,</span> Z <span class=\"kw4\">int</span> <span class=\"co1\">// popular names</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"coMULTI\">/* XP does nothing.<br/>\u00a0<br/>Here's a block comment. */</span><br/><span class=\"kw4\">func</span> XP<span class=\"sy1\">()</span> <span class=\"sy1\">{</span> <span class=\"co1\">// here we go!</span><br/>    <span class=\"co1\">// comments inside</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Non-exported.</span><br/><span class=\"kw4\">func</span> nonXP<span class=\"sy1\">()</span> <span class=\"sy1\">{}</span><br/>\u00a0<br/><span class=\"co1\">// Doc not extracted.</span><br/>\u00a0<br/><span class=\"kw1\">var</span> MEMEME <span class=\"kw4\">int</span></pre>"}, {"lang": "Go", "loc": 25, "block": "<pre class=\"go highlighted_source\"><span class=\"co1\">// Example serves as an example but does nothing useful.</span><br/><span class=\"co1\">//</span><br/><span class=\"co1\">// A package comment preceeds the package clause and explains the purpose</span><br/><span class=\"co1\">// of the package.</span><br/><span class=\"kw1\">package</span> example<br/>\u00a0<br/><span class=\"co1\">// Exported variables.</span><br/><span class=\"kw1\">var</span> <span class=\"sy1\">(</span><br/>    <span class=\"co1\">// lookie</span><br/>    X<span class=\"sy1\">,</span> Y<span class=\"sy1\">,</span> Z <span class=\"kw4\">int</span> <span class=\"co1\">// popular names</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"coMULTI\">/* XP does nothing.<br/>\u00a0<br/>Here's a block comment. */</span><br/><span class=\"kw4\">func</span> XP<span class=\"sy1\">()</span> <span class=\"sy1\">{</span> <span class=\"co1\">// here we go!</span><br/>    <span class=\"co1\">// comments inside</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Non-exported.</span><br/><span class=\"kw4\">func</span> nonXP<span class=\"sy1\">()</span> <span class=\"sy1\">{}</span><br/>\u00a0<br/><span class=\"co1\">// Doc not extracted.</span><br/>\u00a0<br/><span class=\"kw1\">var</span> MEMEME <span class=\"kw4\">int</span></pre>"}, {"lang": "Gri", "loc": 6, "block": "<pre class=\"text highlighted_source\">`My Hello Message'<br/>Print a greeting to the user.<br/>This is only a short greeting.<br/>{<br/>    show \"hello\"<br/>}</pre>"}, {"lang": "Haskell", "loc": 26, "block": "<pre class=\"haskell highlighted_source\"><span class=\"co1\">-- |This is a documentation comment for the following function</span><br/>square1 <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>square1 x <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> x<br/>\u00a0<br/><span class=\"co1\">-- |It can even</span><br/><span class=\"co1\">-- span multiple lines</span><br/>square2 <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>square2 x <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> x<br/>\u00a0<br/>square3 <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/><span class=\"co1\">-- ^You can put the comment underneath if you like, like this</span><br/>square3 x <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> x<br/>\u00a0<br/><span class=\"coMULTI\">{-|<br/>  Haskell block comments<br/>  are also supported<br/>-}</span><br/>square4 <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>square4 x <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> x<br/>\u00a0<br/><span class=\"co1\">-- |This is a documentation comment for the following datatype</span><br/><span class=\"kw1\">data</span> Tree a <span class=\"sy0\">=</span> Leaf a <span class=\"sy0\">|</span> Node <span class=\"br0\">[</span>Tree a<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- |This is a documentation comment for the following type class</span><br/><span class=\"kw1\">class</span> Foo a <span class=\"kw1\">where</span><br/>    bar <span class=\"sy0\">::</span> a</pre>"}, {"lang": "Icon and Unicon", "loc": 26, "block": "<pre class=\"icon highlighted_source\"><span class=\"co1\">############################################################################</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\">#\tFile:     filename.icn</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\">#\tSubject:  Short Description</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\">#\tAuthor:   Author's name</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\">#\tDate:     Date</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\">############################################################################</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\">#   This file is in the public domain. (or other license)</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\">############################################################################</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\">#  Long form docmentation</span><br/><span class=\"co1\">#  </span><br/><span class=\"co1\">############################################################################</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\">#  Links:  </span><br/><span class=\"co1\">#</span><br/><span class=\"co1\">############################################################################</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> x1<span class=\"br0\">(</span><span class=\"br0\">)</span>    <span class=\"co1\">#: short description of procedure</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 25, "block": "<pre class=\"j highlighted_source\"><span class=\"co1\">NB. =========================================================</span><br/><span class=\"co1\">NB.*apply v apply verb x to y</span><br/>apply=: <span class=\"nu0\">128</span>!:<span class=\"nu0\">2</span><br/>\u00a0<br/><span class=\"co1\">NB. =========================================================</span><br/><span class=\"co1\">NB.*def c\u00a0: (explicit definition)</span><br/>def=:\u00a0:<br/>\u00a0<br/><span class=\"co1\">NB.*define a\u00a0: 0 (explicit definition script form)</span><br/>define=:\u00a0: <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\">NB.*do v name for \".</span><br/>do=: \".<br/>\u00a0<br/><span class=\"co1\">NB.*drop v name for }.</span><br/>drop=: }.<br/>\u00a0<br/>   Note<span class=\"co2\"> 1<br/>Note accepts multi-line descriptions.<br/>Definitions display the source.<br/>)</span><br/>\u00a0<br/>   usleep<br/><span class=\"nu0\">3</span>\u00a0: <span class=\"st_h\">''</span><span class=\"st_h\">'libc.so.6 usleep &gt; i i'</span><span class=\"st_h\">'&amp;(15!:0) &gt;.y'</span><br/>\u00a0</pre>"}, {"lang": "Java", "loc": 22, "block": "<pre class=\"java highlighted_source\"><span class=\"co3\">/**<br/> * This is a class documentation comment. This text shows at the top of the page for this class<br/> * @author Joe Schmoe<br/> */</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Doc<span class=\"br0\">{</span><br/>   <span class=\"co3\">/**<br/>    * This is a field comment for a variable<br/>    */</span><br/>   <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> field<span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"co3\">/**<br/>    * This is a method comment. It has parameter tags (param), an exception tag (throws),<br/>    * and a return value tag (return).<br/>    *<br/>    * @param num a number with the variable name \"num\"<br/>    * @throws BadException when something bad happens<br/>    * @return another number<br/>    */</span><br/>   <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> method<span class=\"br0\">(</span><span class=\"kw4\">long</span> num<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> BadException<span class=\"br0\">{</span><br/>      <span class=\"co1\">//...code here</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 19, "block": "<pre class=\"scala highlighted_source\"><span class=\"coMULTI\">/**<br/> * A group of *members*.<br/> * @author A Programmer.<br/> * @since version 1.1.51.<br/> * <br/> * This class has no useful logic; it's just a documentation example.<br/> *<br/> * @param T the type of a member in this group.<br/> * @property name the name of this group.<br/> * @constructor Creates an empty group.<br/> */</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Group<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> name<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"coMULTI\">/**<br/>     * Adds a [member] to this group.<br/>     * @throws AddException if the member can't be added.<br/>     * @return the new size of the group.<br/>     */</span><br/>    fun add<span class=\"br0\">(</span>member<span class=\"sy0\">:</span> T<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span> ... <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Logtalk", "loc": 27, "block": "<pre class=\"logtalk highlighted_source\">\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(set(<span class=\"re0\">_Type</span>),<br/>\t<span class=\"kw3\">extends</span>(set)).<br/>\u00a0<br/>\t<span class=\"co1\">% the info/1 directive is the main directive for documenting an entity</span><br/>\t<span class=\"co1\">% its value is a list of Key-Value pairs; the set of keys is user-extendable</span><br/>\t<span class=\"sy2\">:-</span> <span class=\"kw1\">info</span>([<br/>\t\tversion <span class=\"kw5\">is</span> <span class=\"nu0\">1.2</span>,<br/>\t\tauthor <span class=\"kw5\">is</span> <span class=\"st0\">'A. Coder'</span>,<br/>\t\tdate <span class=\"kw5\">is</span> <span class=\"nu0\">2013</span><span class=\"sy1\">/</span><span class=\"nu0\">10</span><span class=\"sy1\">/</span><span class=\"nu0\">13</span>,<br/>\t\tcomment <span class=\"kw5\">is</span> <span class=\"st0\">'Set predicates with elements constrained to a single type.'</span>,<br/>\t\tparnames <span class=\"kw5\">is</span> [<span class=\"st0\">'Type'</span>]<br/>\t]).<br/>\u00a0<br/>\t<span class=\"co1\">% the info/2 directive is the main directive for documenting predicates</span><br/>\t<span class=\"co1\">% its second value is a list of Key-Value pairs; the set of keys is user-extendable</span><br/>\t<span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(intersection<span class=\"sy1\">/</span><span class=\"nu0\">3</span>).<br/>\t<span class=\"sy2\">:-</span> <span class=\"kw1\">mode</span>(intersection(<span class=\"sy1\">+</span>set, <span class=\"sy1\">+</span>set, <span class=\"sy1\">?</span>set), zero_or_one).<br/>\t<span class=\"sy2\">:-</span> <span class=\"kw1\">info</span>(intersection<span class=\"sy1\">/</span><span class=\"nu0\">3</span>, [<br/>\t\tcomment <span class=\"kw5\">is</span> <span class=\"st0\">'Returns the intersection of Set1 and Set2.'</span>,<br/>\t\targnames <span class=\"kw5\">is</span> [<span class=\"st0\">'Set1'</span>, <span class=\"st0\">'Set2'</span>, <span class=\"st0\">'Intersection'</span>]<br/>\t]).<br/>\u00a0<br/>\t...<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 5, "block": "<pre class=\"text highlighted_source\">f[x_,y_]\u00a0:= x + y (* Function comment\u00a0: adds two numbers *)<br/>f::usage = \"f[x,y] gives the sum of x and y\"<br/>\u00a0<br/>?f<br/>-&gt; f[x,y] gives the sum of x and y</pre>"}, {"lang": "MATLAB / Octave", "loc": 3, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> Gnash<span class=\"br0\">(</span>GnashFile<span class=\"br0\">)</span>;\t<span class=\"co1\">%Convert to a \"function\". Data is placed in the \"global\" area.</span><br/><span class=\"co1\">%   My first MatLab attempt, to swallow data as produced by Gnash's DUMP</span><br/><span class=\"co1\">%command in a comma-separated format. Such files start with a line</span></pre>"}, {"lang": "Nim", "loc": 31, "block": "<pre class=\"text highlighted_source\">## Nim directly supports documentation using comments that start with two<br/>## hashes (##). To create the documentation run ``nim doc file.nim``.<br/>## ``nim doc2 file.nim`` is the same, but run after semantic checking, which<br/>## allows it to process macros and output more information.<br/>##<br/>## These are the comments for the entire module.  We can have long descriptions<br/>## here. Syntax is reStructuredText. Only exported symbols (*) get<br/>## documentation created for them.<br/>##<br/>## Here comes a code block inside our documentation:<br/>##<br/>## .. code-block:: nim<br/>##   var inputStrings\u00a0: seq[string]<br/>##   newSeq(inputStrings, 3)<br/>##   inputStrings[0] = \"The fourth\"<br/>##   inputStrings[1] = \"assignment\"<br/>##   inputStrings[2] = \"would crash\"<br/>##   #inputStrings[3] = \"out of bounds\"<br/>\u00a0<br/>type TPerson* = object<br/>  ## This type contains a description of a person<br/>  name: string<br/>  age: int<br/>\u00a0<br/>var numValues*: int ## \\<br/>  ## `numValues` stores the number of values<br/>\u00a0<br/>proc helloWorld*(times: int) =<br/>  ## A useful procedure<br/>  for i in 1..times:<br/>    echo \"hello world\"</pre>"}, {"lang": "Objective-C", "loc": 11, "block": "<pre class=\"objc highlighted_source\"><span class=\"coMULTI\">/*!<br/> @function add<br/> @abstract Adds two numbers<br/> @discussion Use add to sum two numbers.<br/> @param a an integer.<br/> @param b another integer.<br/> @return the sum of a and b<br/> */</span><br/><span class=\"kw4\">int</span> add<span class=\"br0\">(</span><span class=\"kw4\">int</span> a, <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> a <span class=\"sy0\">+</span> b;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">addhelp</span><span class=\"br0\">(</span>funcName<span class=\"sy0\">,</span> <span class=\"st0\">\"funcName(v, n): This is a description of the function named funcName.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">addhelp</span><span class=\"br0\">(</span>funcName<span class=\"sy0\">,</span> <span class=\"st0\">\"funcName(v, n): This is a description of the function named funcName.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 11, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"co1\">#= it's yellow</span><br/><span class=\"kw2\">sub</span> marine <span class=\"br0\">{</span> <span class=\"sy0\">...</span> <span class=\"br0\">}</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">&amp;marine</span><span class=\"sy0\">.</span><span class=\"me1\">WHY</span><span class=\"sy0\">;</span> <span class=\"co1\"># \"it's yellow\"</span><br/>\u00a0<br/><span class=\"co1\">#= a shaggy little thing</span><br/><span class=\"kw2\">class</span> Sheep <span class=\"br0\">{</span><br/>    <span class=\"co1\">#= not too scary</span><br/>    <span class=\"kw2\">method</span> roar <span class=\"br0\">{</span> <span class=\"st_h\">'roar!'</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">say</span> Sheep<span class=\"sy0\">.</span><span class=\"me1\">WHY</span><span class=\"sy0\">;</span> <span class=\"co1\"># \"a shaggy little thing\"</span><br/><span class=\"kw3\">say</span> Sheep<span class=\"sy0\">.^</span>find_method<span class=\"br0\">(</span><span class=\"st_h\">'roar'</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">WHY</span><span class=\"sy0\">;</span> <span class=\"co1\"># \"not too scary\"</span></pre>"}, {"lang": "Perl 6", "loc": 11, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"co1\">#= it's yellow</span><br/><span class=\"kw2\">sub</span> marine <span class=\"br0\">{</span> <span class=\"sy0\">...</span> <span class=\"br0\">}</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">&amp;marine</span><span class=\"sy0\">.</span><span class=\"me1\">WHY</span><span class=\"sy0\">;</span> <span class=\"co1\"># \"it's yellow\"</span><br/>\u00a0<br/><span class=\"co1\">#= a shaggy little thing</span><br/><span class=\"kw2\">class</span> Sheep <span class=\"br0\">{</span><br/>    <span class=\"co1\">#= not too scary</span><br/>    <span class=\"kw2\">method</span> roar <span class=\"br0\">{</span> <span class=\"st_h\">'roar!'</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">say</span> Sheep<span class=\"sy0\">.</span><span class=\"me1\">WHY</span><span class=\"sy0\">;</span> <span class=\"co1\"># \"a shaggy little thing\"</span><br/><span class=\"kw3\">say</span> Sheep<span class=\"sy0\">.^</span>find_method<span class=\"br0\">(</span><span class=\"st_h\">'roar'</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">WHY</span><span class=\"sy0\">;</span> <span class=\"co1\"># \"not too scary\"</span></pre>"}, {"lang": "PHP", "loc": 5, "block": "<pre class=\"text highlighted_source\">: (doc 'car)         # View documentation of a function<br/>\u00a0<br/>: (doc '+Entity)     # View documentation of a class<br/>\u00a0<br/>: (doc '+ 'firefox)  # Explicitly specify a browser</pre>"}, {"lang": "PicoLisp", "loc": 5, "block": "<pre class=\"text highlighted_source\">: (doc 'car)         # View documentation of a function<br/>\u00a0<br/>: (doc '+Entity)     # View documentation of a class<br/>\u00a0<br/>: (doc '+ 'firefox)  # Explicitly specify a browser</pre>"}, {"lang": "PL/I", "loc": 3, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/>help about_comment_based_help<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 3, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/>help about_comment_based_help<br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 35, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"co1\">; This is a small demo-code to demonstrate PureBasic\u2019s internal</span><br/><span class=\"co1\">; documentation system.</span><br/>\u00a0<br/><span class=\"co1\">;- All Includes </span><br/><span class=\"co1\">; By starting the line with \u2018;-\u2018 marks that specific line as a special comment,</span><br/><span class=\"co1\">; and this will be included in the overview, while normal comments will not.  </span><br/>\u00a0<br/><span class=\"kw1\">IncludeFile</span> <span class=\"st0\">\"MyLibs.pbi\"</span><br/><span class=\"kw1\">IncludeFile</span> <span class=\"st0\">\"Combustion_Data.pbi\"</span><br/>\u00a0<br/><span class=\"co1\">;- </span><br/><span class=\"co1\">;- Start of functions and Macros</span><br/><span class=\"co1\">;- Engeneering stuff</span><br/>\u00a0<br/><span class=\"co1\">; A small function to calculate gas properties</span><br/><span class=\"kw1\">Procedure</span>.f CalcR<span class=\"br0\">(</span> p.f, V.f, T.f<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> p<span class=\"sy0\">*</span>V<span class=\"sy0\">/</span>T<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">; Example of a Macro</span><br/><span class=\"co1\">; These are indicated by '+' in the overview</span><br/><span class=\"kw1\">Macro</span> HalfPI<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>#PI<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndMacro</span><br/>\u00a0<br/><span class=\"co1\">;-</span><br/><span class=\"co1\">;- - - - - - - - - - -</span><br/><span class=\"co1\">;- IO-Functions</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> Write_and_Close<span class=\"br0\">(</span> File, Text$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">IsFile</span><span class=\"br0\">(</span>File<span class=\"br0\">)</span><br/>    <span class=\"kw2\">WriteString</span><span class=\"br0\">(</span>File,Text$<span class=\"br0\">)</span><br/>    <span class=\"kw2\">CloseFile</span><span class=\"br0\">(</span>file<span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 8, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">class</span> Doc<span class=\"br0\">(</span><span class=\"kw2\">object</span><span class=\"br0\">)</span>:<br/>   <span class=\"st0\">\"\"\"<br/>   This is a class docstring. Traditionally triple-quoted strings are used because<br/>   they can span multiple lines and you can include quotation marks without escaping.<br/>   \"\"\"</span><br/>   <span class=\"kw1\">def</span> method<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> num<span class=\"br0\">)</span>:<br/>      <span class=\"st0\">\"\"\"This is a method docstring.\"\"\"</span><br/>      <span class=\"kw1\">pass</span></pre>"}, {"lang": "R", "loc": 1, "block": "<pre class=\"text highlighted_source\">example(package.skeleton)</pre>"}, {"lang": "Racket", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang scribble/manual<br/>(require (for-label \"sandwiches.rkt\"))<br/>\u00a0<br/>@defproc[(make-sandwich [ingredients (listof ingredient?)])<br/>         sandwich?]{<br/>  Returns a sandwich given the right ingredients.<br/>}<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 64, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol [<br/>    Title: \"Documentation\"<br/>    URL: http://rosettacode.org/wiki/Documentation<br/>\tPurpose: {To demonstrate documentation of REBOL pograms.}<br/>]</span><br/>\u00a0<br/><span class=\"co1\">; Notice the fields in the program header. The header is required for</span><br/><span class=\"co1\">; valid REBOL programs, although the fields don't have to be filled</span><br/><span class=\"co1\">; in. Standard fields are defined (see 'system/script/header'), but</span><br/><span class=\"co1\">; I can also define other fields as I like and they'll be available</span><br/><span class=\"co1\">; there.</span><br/>\u00a0<br/><span class=\"co1\">; This is a comment. The semicolon can be inserted anywhere outside of</span><br/><span class=\"co1\">; a string and will escape to end of line. See the inline comments</span><br/><span class=\"co1\">; below.</span><br/>\u00a0<br/><span class=\"co1\">; Functions can have a documentation string as the first part of the</span><br/><span class=\"co1\">; argument definition block. Each argument can specify what types it</span><br/><span class=\"co1\">; will accept as well as a description. All typing/documentation</span><br/><span class=\"co1\">; entries are optional. Notice that local variables can be documented</span><br/><span class=\"co1\">; as well.</span><br/>\u00a0<br/>sum: <span class=\"kw2\">func</span> <span class=\"br0\">[</span><br/>\t<span class=\"st0\">\"Add numbers in block.\"</span><br/>\tdata <span class=\"br0\">[</span><span class=\"kw1\">block!</span> <span class=\"kw1\">list!</span><span class=\"br0\">]</span> <span class=\"st0\">\"List of numbers to add together.\"</span><br/>\t<span class=\"sy0\">/</span>average <span class=\"st0\">\"Calculate average instead of sum.\"</span><br/>\t<span class=\"sy0\">/</span>local <br/>\ti <span class=\"st0\">\"Iteration variable.\"</span>  <br/>\tx <span class=\"st0\">\"Variable to hold results.\"</span><br/><span class=\"br0\">]</span> <span class=\"br0\">[</span><br/>\tx: <span class=\"nu0\">0</span>  <span class=\"kw2\">repeat</span> i data <span class=\"br0\">[</span>x: x + i<span class=\"br0\">]</span><br/>\t<span class=\"kw2\">either</span> average <span class=\"br0\">[</span>x <span class=\"sy0\">/</span> <span class=\"kw3\">length?</span> data<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"co1\">; Functions return last result.</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span>sum <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span> crlf  sum<span class=\"sy0\">/</span>average <span class=\"br0\">[</span><span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span> crlf<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; The help message is constructed from the public information about</span><br/><span class=\"co1\">; the function. Internal variable information isn't shown.</span><br/>\u00a0<br/><span class=\"kw3\">help</span> sum  <span class=\"kw3\">print</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/><span class=\"co1\">; The source command provides the source to any user functions,</span><br/><span class=\"co1\">; reconstructing the documentation strings if they're provided:</span><br/>\u00a0<br/><span class=\"kw3\">source</span> sum  <span class=\"kw3\">print</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/><span class=\"co1\">; This is an object, describing a person, whose name is Bob.</span><br/>\u00a0<br/>bob: <span class=\"kw3\">make</span> <span class=\"kw1\">object!</span> <span class=\"br0\">[</span><br/>\tname: <span class=\"st0\">\"Bob Sorkopath\"</span><br/>\tage: <span class=\"nu0\">24</span><br/>\thi: <span class=\"kw2\">func</span> <span class=\"br0\">[</span><span class=\"st0\">\"Say hello.\"</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw3\">print</span> <span class=\"st0\">\"Hello!\"</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; I can use the 'help' word to get a list of the fields of the object</span><br/>\u00a0<br/><span class=\"kw3\">help</span> bob  <span class=\"kw3\">print</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/><span class=\"co1\">; If I want see the documentation or source for 'bob/hi', I have to</span><br/><span class=\"co1\">; get a little tricky to get it from the object's namespace:</span><br/>\u00a0<br/>x: <span class=\"kw3\">get</span> <span class=\"kw3\">in</span> bob 'hi  <span class=\"kw3\">help</span> x  <span class=\"kw3\">print</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/><span class=\"kw3\">probe</span> <span class=\"kw3\">get</span> <span class=\"kw3\">in</span> bob 'hi</pre>"}, {"lang": "Retro", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>doc{<br/>========<br/>Function: foo<br/>========<br/>\u00a0<br/>Stack<br/>----<br/>a1 a2 - b<br/>\u00a0<br/>Usage<br/>-----<br/>Adds a1 to a2 returning b.<br/>}doc<br/>\u00a0<br/>: foo ( aa-b ) +\u00a0;<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 29, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program illustrates how to display embedded documentation (help) within REXX code*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> doc                                    <span class=\"coMULTI\">/*obtain (all) the arguments from C.L. */</span><br/><span class=\"kw1\">if</span> doc=<span class=\"st0\">'?'</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> help                       <span class=\"coMULTI\">/*show documentation if arg=a single\u00a0? */</span><br/><span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0regular\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0*/</span><br/><span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0mainline\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0*/</span><br/><span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0code\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0*/</span><br/><span class=\"coMULTI\">/*\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0here.\u25a0\u25a0\u25a0\u25a0\u25a0*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>help:\u00a0?=<span class=\"nu0\">0</span>;    <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">sourceline</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;  _=<span class=\"kw6\">sourceline</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span>         <span class=\"coMULTI\">/*get a line of source.*/</span><br/>              <span class=\"kw1\">if</span> _=<span class=\"st0\">'&lt;help&gt;'</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; \u00a0?=<span class=\"nu0\">1</span>;  <span class=\"kw1\">iterate</span>;  <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*search for  &lt;help&gt;   */</span><br/>              <span class=\"kw1\">if</span> _=<span class=\"st0\">'&lt;/help&gt;'</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>                         <span class=\"coMULTI\">/*   \"    \"   &lt;/help&gt;  */</span><br/>              <span class=\"kw1\">if</span>\u00a0?            <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> _<br/>              <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>      <span class=\"kw1\">exit</span>                                       <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550start of the in\u2550line documentation AFTER the  &lt;help&gt;<br/>&lt;help&gt;<br/>       To use the  YYYY  program, enter one of:<br/>\u00a0<br/>             YYYY  numberOfItems<br/>             YYYY                            (no arguments uses the default)<br/>             YYYY \u00a0?                         (to see this documentation)<br/>\u00a0<br/>\u00a0<br/>       \u2500\u2500\u2500 where:  numberOfItems             is the number of items to be used.<br/>\u00a0<br/>           If no  \"numberOfItems\"  are entered, the default of  100  is used.<br/>&lt;/help&gt;<br/>\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550end of the in\u2550line documentation BEFORE the &lt;/help&gt; */</span></pre>"}, {"lang": "Ring", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/*<br/>Multiply two numbers<br/>n1: an integer.<br/>n2: an integer.<br/>returns product of n1 and n2<br/> */<br/>see mult(3, 5) + nl<br/>func mult n1, n2<br/>     return n1*n2<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 35, "block": "<pre class=\"ruby highlighted_source\"><span class=\"coMULTI\">=begin rdoc<br/>RDoc is documented here[http://www.ruby-doc.org/core/classes/RDoc.html].<br/>\u00a0<br/>This is a class documentation comment.  This text shows at the top of the page<br/>for the class.<br/>\u00a0<br/>Comments can be written inside \"=begin rdoc\"/\"end\" blocks or <br/>in normal '#' comment blocks.<br/>\u00a0<br/>There are no '@parameters' like javadoc, but 'name-value' lists can be written:<br/>Author:: Joe Schmoe<br/>Date:: today<br/>=end</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Doc<br/>  <span class=\"co1\"># This is a comment for a Constant</span><br/>  Constant = <span class=\"kw2\">nil</span><br/>\u00a0<br/>  <span class=\"co1\"># This is a method comment.  Parameters and return values can be named</span><br/>  <span class=\"co1\"># with the \"call-seq\" directive.  </span><br/>  <span class=\"co1\">#</span><br/>  <span class=\"co1\"># call-seq:</span><br/>  <span class=\"co1\">#   a_method(first_arg, second_arg) -&gt; return_value</span><br/>  <span class=\"co1\">#</span><br/>  <span class=\"kw1\">def</span> a_method<span class=\"br0\">(</span>arg1, arg2=<span class=\"st0\">'default value'</span><span class=\"br0\">)</span><br/>    do_stuff <br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># Class methods will be shown in a separate section of the generated documentation.</span><br/>  <span class=\"kw1\">def</span> <span class=\"kw2\">self</span>.<span class=\"me1\">class_method</span><br/>    Constant<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">#\u00a0:include:boilerplate.txt</span></pre>"}, {"lang": "Scala", "loc": 22, "block": "<pre class=\"scala highlighted_source\"><span class=\"coMULTI\">/**<br/>  * This is a class documentation comment. This text shows at the top of the page for this class<br/>  *<br/>  * @author Joe Schmoe<br/>  */</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Doc <span class=\"br0\">{</span><br/>  <span class=\"coMULTI\">/**<br/>    * This is a field comment for a variable<br/>    */</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> field <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/**<br/>    * This is a method comment. It has parameter tags (param) and a return value tag (return).<br/>    *<br/>    * @param num a number with the variable name \"num\"<br/>    * @return another number<br/>    */</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> method<span class=\"br0\">(</span>num<span class=\"sy0\">:</span> Long<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">//...code here</span><br/>    <span class=\"sy0\">???</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Smalltalk", "loc": 1, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">FooClass</span> comment: <span class=\"st0\">'This is a comment ....'</span>.</pre>"}, {"lang": "SQL PL", "loc": 123, "block": "<pre class=\"sql highlighted_source\">\u00a0<br/><span class=\"kw1\">CREATE</span> TABLESPACE myTs;<br/>\u00a0<br/>COMMENT <span class=\"kw1\">ON</span> TABLESPACE myTs <span class=\"kw1\">IS</span> <span class=\"st0\">'Description of the tablespace.'</span>;<br/>\u00a0<br/><span class=\"kw1\">CREATE</span> SCHEMA mySch;<br/>\u00a0<br/>COMMENT <span class=\"kw1\">ON</span> SCHEMA mySch <span class=\"kw1\">IS</span> <span class=\"st0\">'Description of the schema.'</span>;<br/>\u00a0<br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">TYPE</span> myType <span class=\"kw1\">AS</span> <span class=\"br0\">(</span>col1 <span class=\"kw1\">INT</span><span class=\"br0\">)</span> MODE DB2SQL;<br/>\u00a0<br/>COMMENT <span class=\"kw1\">ON</span> <span class=\"kw1\">TYPE</span> mytype <span class=\"kw1\">IS</span> <span class=\"st0\">'Description of the type.'</span>;<br/>\u00a0<br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">TABLE</span> myTab <span class=\"br0\">(</span><br/>  myCol1 <span class=\"kw1\">INT</span> <span class=\"kw1\">NOT</span> <span class=\"kw1\">NULL</span><span class=\"sy0\">,</span><br/>  myCol2 <span class=\"kw1\">INT</span><br/><span class=\"br0\">)</span>;<br/>\u00a0<br/>COMMENT <span class=\"kw1\">ON</span> <span class=\"kw1\">TABLE</span> myTab <span class=\"kw1\">IS</span> <span class=\"st0\">'Description of the table.'</span>;<br/>COMMENT <span class=\"kw1\">ON</span> myTab <span class=\"br0\">(</span><br/>  myCol1 <span class=\"kw1\">IS</span> <span class=\"st0\">'Description of the column.'</span><span class=\"sy0\">,</span><br/>  myCol2 <span class=\"kw1\">IS</span> <span class=\"st0\">'Description of the column.'</span><br/><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">ALTER</span> <span class=\"kw1\">TABLE</span> myTab <span class=\"kw1\">ADD</span> <span class=\"kw1\">CONSTRAINT</span> myConst <span class=\"kw1\">PRIMARY</span> <span class=\"kw1\">KEY</span> <span class=\"br0\">(</span>myCol1<span class=\"br0\">)</span>;<br/>\u00a0<br/>COMMENT <span class=\"kw1\">ON</span> <span class=\"kw1\">CONSTRAINT</span> myTab<span class=\"sy0\">.</span>myConst <span class=\"kw1\">IS</span> <span class=\"st0\">'Description of the constraint.'</span>;<br/>\u00a0<br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">INDEX</span> myInd <span class=\"kw1\">ON</span><br/>  myTab <span class=\"br0\">(</span>myCol2<span class=\"br0\">)</span>;<br/>\u00a0<br/>COMMENT <span class=\"kw1\">ON</span> <span class=\"kw1\">INDEX</span> myInd <span class=\"kw1\">IS</span> <span class=\"st0\">'Description of the index.'</span>;<br/>\u00a0<br/><span class=\"co1\">-- V11.1</span><br/><span class=\"kw1\">CREATE</span> USAGE LIST myUsList <span class=\"kw1\">FOR</span> <span class=\"kw1\">TABLE</span> myTab;<br/>\u00a0<br/>COMMENT <span class=\"kw1\">ON</span> USAGE LISTmyUsList <span class=\"kw1\">IS</span> <span class=\"st0\">'Description of the usage list.'</span>;<br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Detailed description of the trigger.<br/> */</span><br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">TRIGGER</span> myTrig<br/>  AFTER <span class=\"kw1\">INSERT</span> <span class=\"kw1\">ON</span> myTab<br/>  <span class=\"kw1\">REFERENCING</span> <span class=\"kw1\">NEW</span> <span class=\"kw1\">AS</span> N<br/>  <span class=\"kw1\">FOR</span> EACH <span class=\"kw1\">ROW</span><br/> <span class=\"kw1\">BEGIN</span><br/> <span class=\"kw1\">END</span>;<br/>\u00a0<br/>COMMENT <span class=\"kw1\">ON</span> <span class=\"kw1\">TRIGGER</span> myTrig <span class=\"kw1\">IS</span> <span class=\"st0\">'General description of the trigger.'</span>;<br/>\u00a0<br/><span class=\"kw1\">CREATE</span> VARIABLE myVar <span class=\"kw1\">INT</span>;<br/>\u00a0<br/>COMMENT <span class=\"kw1\">ON</span> VARIABLE myVar <span class=\"kw1\">IS</span> <span class=\"st0\">'General description of the variable.'</span>;<br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * General description of the function (reads until the first dot).<br/> * Detailed description of the function, until the first empty line.<br/> *<br/> * IN VAR1<br/> *   Description of IN parameter in variable VAR1.<br/> * OUT VAR2<br/> *   Description of OUT parameter in variable VAR2.<br/> * INOUT VAR3<br/> *   Description of INOUT parameter in variable VAR3.<br/> * RETURNS Description of what it returns.<br/> */</span><br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">FUNCTION</span> myfun <span class=\"br0\">(</span><br/>  <span class=\"kw1\">IN</span> VAR1 <span class=\"kw1\">INT</span><span class=\"sy0\">,</span><br/>  <span class=\"kw1\">OUT</span> VAR2 <span class=\"kw1\">INT</span><span class=\"sy0\">,</span><br/>  <span class=\"kw1\">INOUT</span> VAR3 <span class=\"kw1\">INT</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">RETURNS</span> <span class=\"kw1\">INT</span><br/> <span class=\"kw1\">BEGIN</span><br/> <span class=\"kw1\">END</span>;<br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * General description of the procedure (reads until the first dot).<br/> * Detailed description of the procedure, until the first empty line.<br/> *<br/> * IN VAR1<br/> *   Description of IN parameter in variable VAR1.<br/> * OUT VAR2<br/> *   Description of OUT parameter in variable VAR2.<br/> * INOUT VAR3<br/> *   Description of INOUT parameter in variable VAR3.<br/> */</span><br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">PROCEDURE</span> myProc <span class=\"br0\">(</span><br/>  <span class=\"kw1\">IN</span> VAR1 <span class=\"kw1\">INT</span><span class=\"sy0\">,</span><br/>  <span class=\"kw1\">OUT</span> VAR2 <span class=\"kw1\">INT</span><span class=\"sy0\">,</span><br/>  <span class=\"kw1\">INOUT</span> VAR3 <span class=\"kw1\">INT</span><span class=\"br0\">)</span><br/> <span class=\"kw1\">BEGIN</span><br/> <span class=\"kw1\">END</span>;<br/>\u00a0<br/><span class=\"kw1\">CREATE</span> MODULE myMod;<br/>\u00a0<br/>COMMENT <span class=\"kw1\">ON</span> MODULE myMod <span class=\"kw1\">IS</span> <span class=\"st0\">'General description of the module.'</span>;<br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * General description of the procedure (reads until the first dot).<br/> * Detailed description of the procedure, until the first empty line.<br/> *<br/> * IN VAR1<br/> *   Description of IN parameter in variable VAR1.<br/> * OUT VAR2<br/> *   Description of OUT parameter in variable VAR2.<br/> * INOUT VAR3<br/> *   Description of INOUT parameter in variable VAR3.<br/> */</span><br/><span class=\"kw1\">ALTER</span> MODULE myMod<br/>  <span class=\"kw1\">ADD</span> <span class=\"kw1\">PROCEDURE</span> myProc <span class=\"br0\">(</span><br/>  <span class=\"kw1\">IN</span> VAR1 <span class=\"kw1\">INT</span><span class=\"sy0\">,</span><br/>  <span class=\"kw1\">OUT</span> VAR2 <span class=\"kw1\">INT</span><span class=\"sy0\">,</span><br/>  <span class=\"kw1\">INOUT</span> VAR3 <span class=\"kw1\">INT</span><span class=\"br0\">)</span><br/> <span class=\"kw1\">BEGIN</span><br/> <span class=\"kw1\">END</span>;<br/>\u00a0<br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">ROLE</span> myRole;<br/>\u00a0<br/>COMMENT <span class=\"kw1\">ON</span> <span class=\"kw1\">ROLE</span> myRole <span class=\"kw1\">IS</span> <span class=\"st0\">'Description of the role.'</span>;<br/>\u00a0<br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">SEQUENCE</span> mySeq;<br/>\u00a0<br/>COMMENT <span class=\"kw1\">ON</span> <span class=\"kw1\">ROLE</span> mySeq <span class=\"kw1\">IS</span> <span class=\"st0\">'Description of the sequence.'</span>;<br/>\u00a0</pre>"}, {"lang": "Stata", "loc": 3, "block": "<pre class=\"text highlighted_source\">prog def hello<br/>\tdi \"Hello, World!\"<br/>end</pre>"}, {"lang": "Swift", "loc": 9, "block": "<pre class=\"text highlighted_source\">/**<br/> Adds two numbers<br/>\u00a0:param: a an integer.<br/>\u00a0:param: b another integer.<br/>\u00a0:returns: the sum of a and b<br/> */<br/>func add(a: Int, b: Int) -&gt; Int {<br/>    return a + b<br/>}</pre>"}, {"lang": "Tcl", "loc": 18, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\">#****f* RosettaCode/TclDocDemo</span><br/><span class=\"co1\"># FUNCTION</span><br/><span class=\"co1\">#    TclDocDemo is a simple illustration of how to do documentation</span><br/><span class=\"co1\">#    of Tcl code using Robodoc.</span><br/><span class=\"co1\"># SYNOPSYS</span><br/><span class=\"co1\">#    TclDocDemo foo bar</span><br/><span class=\"co1\"># INPUTS</span><br/><span class=\"co1\">#    foo -- the first part of the message to print</span><br/><span class=\"co1\">#    bar -- the last part of the message to print</span><br/><span class=\"co1\"># RESULT</span><br/><span class=\"co1\">#    No result</span><br/><span class=\"co1\"># NOTES</span><br/><span class=\"co1\">#    Prints a message based on a template by filling in with the</span><br/><span class=\"co1\">#    supplied strings.</span><br/><span class=\"co1\">#*****</span><br/><span class=\"kw1\">proc</span> TclDocDemo <span class=\"br0\">{</span>foo bar<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%s --\u00a0%s\"</span> <span class=\"re0\">$foo</span> <span class=\"re0\">$bar</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "ZX Spectrum Basic", "loc": 2, "block": "<pre class=\"zxbasic highlighted_source\"> <span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> a=<span class=\"nu0\">10</span>: <span class=\"co3\">REM a is the number of apples</span><br/><span class=\"nu0\">1000</span> DEF FN s<span class=\"br0\">(</span>q<span class=\"br0\">)</span>=q*q: <span class=\"co3\">REM s is a function that takes a single numeric parameter and returns its square</span></pre>"}]}