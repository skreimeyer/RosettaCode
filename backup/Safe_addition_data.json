{"task": "Safe_addition", "blocks": [{"lang": "Ada", "loc": 4, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">type</span> Interval <span class=\"kw1\">is</span> <span class=\"kw3\">record</span><br/>   Lower\u00a0: Float;<br/>   Upper\u00a0: Float;<br/><span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;</pre>"}, {"lang": "AutoHotkey", "loc": 14, "block": "<pre class=\"ahk highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">Msgbox</span></a>\u00a0% IntervalAdd<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">; [2.999999,3.000001]</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/SetFormat.htm\"><span class=\"kw3\">SetFormat</span></a><span class=\"sy0\">,</span> FloatFast<span class=\"sy0\">,</span> <span class=\"nu0\">0.20</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">Msgbox</span></a>\u00a0% IntervalAdd<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">; [2.99999999999999910000,3.00000000000000090000]</span><br/>\u00a0<br/><span class=\"co1\">;In v1.0.48+, floating point variables have about 15 digits of precision internally </span><br/><span class=\"co1\">;unless SetFormat Float (i.e. the slow mode) is present anywhere in the script. </span><br/><span class=\"co1\">;In that case, the stored precision of floating point numbers is determined by A_FormatFloat. </span><br/><span class=\"co1\">;As there is no way for this function to know whether this is the case or not, </span><br/><span class=\"co1\">;it conservatively uses A_FormatFloat in all cases.</span><br/>IntervalAdd<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\terr<span class=\"sy0\">:=</span><span class=\"nu0\">0.1</span><span class=\"sy0\">**</span><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_FormatFloat\"><span class=\"kw2\">A_FormatFloat</span></a><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">15</span>\u00a0? <span class=\"nu0\">15</span>\u00a0: <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_FormatFloat\"><span class=\"kw2\">A_FormatFloat</span></a><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">Return</span> <span class=\"st0\">\"[\"</span> a<span class=\"sy0\">+</span>b<span class=\"sy0\">-</span>err <span class=\"st0\">\",\"</span>a<span class=\"sy0\">+</span>b<span class=\"sy0\">+</span>err <span class=\"st0\">\"]\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C", "loc": 50, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;fenv.h&gt;\t/* fegetround(), fesetround() */</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;\t/* printf() */</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/> * Calculates an interval for a + b.<br/> *   interval[0] &lt;= a + b<br/> *   a + b &lt;= interval[1]<br/> */</span><br/><span class=\"kw4\">void</span><br/>safe_add<span class=\"br0\">(</span><span class=\"kw4\">volatile</span> <span class=\"kw4\">double</span> interval<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">volatile</span> <span class=\"kw4\">double</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">volatile</span> <span class=\"kw4\">double</span> b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/><span class=\"co2\">#pragma STDC FENV_ACCESS ON</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> orig<span class=\"sy0\">;</span><br/>\u00a0<br/>\torig <span class=\"sy0\">=</span> fegetround<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tfesetround<span class=\"br0\">(</span>FE_DOWNWARD<span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"coMULTI\">/* round to -infinity */</span><br/>\tinterval<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> a <span class=\"sy0\">+</span> b<span class=\"sy0\">;</span><br/>\tfesetround<span class=\"br0\">(</span>FE_UPWARD<span class=\"br0\">)</span><span class=\"sy0\">;</span>\t\t<span class=\"coMULTI\">/* round to +infinity */</span><br/>\tinterval<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> a <span class=\"sy0\">+</span> b<span class=\"sy0\">;</span><br/>\tfesetround<span class=\"br0\">(</span>orig<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span><br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">double</span> nums<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">{</span><span class=\"nu16\">0.1</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.2</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">{</span><span class=\"nu19\">1e100</span><span class=\"sy0\">,</span> <span class=\"nu19\">1e-100</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">{</span><span class=\"nu19\">1e308</span><span class=\"sy0\">,</span> <span class=\"nu19\">1e308</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> ival<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>nums<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>nums<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"coMULTI\">/*<br/>\t\t * Calculate nums[i][0] + nums[i][1].<br/>\t\t */</span><br/>\t\tsafe_add<span class=\"br0\">(</span>ival<span class=\"sy0\">,</span> nums<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> nums<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/*<br/>\t\t * Print the result.\u00a0%.17g gives the best output.<br/>\t\t *\u00a0%.16g or plain\u00a0%g gives not enough digits.<br/>\t\t */</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%.17g +\u00a0%.17g =<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> nums<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> nums<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"    [%.17g,\u00a0%.17g]<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> ival<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> ival<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"    size\u00a0%.17g<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> ival<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> ival<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 16, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">auto</span> safeAdd<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T a<span class=\"sy0\">,</span> T b<span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>isFloatingPoint<span class=\"sy0\">!</span>T<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">math</span><span class=\"sy0\">;</span>     <span class=\"co1\">// nexDown, nextUp</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">;</span> <span class=\"co1\">// tuple</span><br/>    <span class=\"kw1\">return</span> tuple<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"st0\">\"d\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"u\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span>nextDown<span class=\"br0\">(</span>a<span class=\"sy0\">+</span>b<span class=\"br0\">)</span><span class=\"sy0\">,</span> nextUp<span class=\"br0\">(</span>a<span class=\"sy0\">+</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> a <span class=\"sy0\">=</span> <span class=\"nu16\">1.2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> b <span class=\"sy0\">=</span> <span class=\"nu16\">0.03</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> r <span class=\"sy0\">=</span> safeAdd<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"(%s +\u00a0%s) is in the range\u00a0%0.16f ..\u00a0%0.16f\"</span><span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> r.<span class=\"me1\">d</span><span class=\"sy0\">,</span> r.<span class=\"me1\">u</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 17, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeInterval<span class=\"br0\">(</span>a <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/float64\"><span class=\"kw6\">float64</span></a><span class=\"sy0\">,</span> b <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/float64\"><span class=\"kw6\">float64</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/require\"><span class=\"kw6\">require</span></a><span class=\"br0\">(</span>a <span class=\"sy0\">&lt;=</span> b<span class=\"br0\">)</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> interval <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> least<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> return a <span class=\"br0\">}</span><br/>        <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> greatest<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> return b <span class=\"br0\">}</span><br/>        <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> __printOn<span class=\"br0\">(</span>out<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            out.<a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">\"[\"</span><span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> <span class=\"st0\">\", \"</span><span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> add<span class=\"br0\">(</span>other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://wiki.erights.org/wiki/require\"><span class=\"kw6\">require</span></a><span class=\"br0\">(</span>a <span class=\"sy0\">&lt;=&gt;</span> b<span class=\"br0\">)</span><br/>            <a href=\"http://wiki.erights.org/wiki/require\"><span class=\"kw6\">require</span></a><span class=\"br0\">(</span>other.<span class=\"me1\">least</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=&gt;</span> other.<span class=\"me1\">greatest</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> result <span class=\"sy0\">:=</span> a <span class=\"sy0\">+</span> other.<span class=\"me1\">least</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            return makeInterval<span class=\"br0\">(</span>result.<span class=\"me1\">previous</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> result.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    return interval<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Forth", "loc": 15, "block": "<pre class=\"text highlighted_source\">c-library m<br/>s\" m\" add-lib<br/>\\c #include &lt;math.h&gt;<br/>c-function fnextafter nextafter r r -- r<br/>end-c-library<br/>\u00a0<br/>s\" MAX-FLOAT\" environment? drop fconstant MAX-FLOAT<br/>\u00a0<br/>: fstepdown ( F: r1 -- r2 )<br/>   MAX-FLOAT fnegate fnextafter\u00a0;<br/>: fstepup ( F: r1 -- r2 )<br/>   MAX-FLOAT fnextafter\u00a0;<br/>\u00a0<br/>: savef+ ( F: r1 r2 -- r3 r4 ) \\ r4 &lt;= r1+r2 &lt;= r3<br/>   f+  fdup fstepup  fswap fstepdown\u00a0;</pre>"}, {"lang": "Go", "loc": 30, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// type requested by task</span><br/><span class=\"kw1\">type</span> interval <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    lower<span class=\"sy1\">,</span> upper <span class=\"kw4\">float64</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// a constructor</span><br/><span class=\"kw4\">func</span> stepAway<span class=\"sy1\">(</span>x <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> interval <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> interval <span class=\"sy1\">{</span><br/>        math<span class=\"sy3\">.</span>Nextafter<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>Inf<span class=\"sy1\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)),</span><br/>        math<span class=\"sy3\">.</span>Nextafter<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>Inf<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">))}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// function requested by task</span><br/><span class=\"kw4\">func</span> safeAdd<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> interval <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> stepAway<span class=\"sy1\">(</span>a <span class=\"sy3\">+</span> b<span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// example</span><br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    a<span class=\"sy1\">,</span> b <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"sy3\">.</span><span class=\"nu0\">03</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> safeAdd<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">   err =. <span class=\"nu0\">2</span>^ <span class=\"nu0\">53</span>-~ <span class=\"nu0\">2</span> &lt;<a class=\"__cf_email__\" data-cfemail=\"133d53\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>^. |   <span class=\"co1\">NB. get the size of one-half unit in the last place</span><br/>   safeadd =. + <span class=\"sy0\">(</span>-,+<span class=\"sy0\">)</span> +&amp;err<br/>   <span class=\"nu0\">0j15</span>\": <span class=\"nu0\">1.14</span> safeadd <span class=\"nu0\">2000.0</span> <span class=\"co1\">NB. print with 15 digits after the decimal</span><br/><span class=\"nu0\">2001.139999999999873</span> <span class=\"nu0\">2001.140000000000327</span></pre>"}, {"lang": "Java", "loc": 20, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> SafeAddition <span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> stepDown<span class=\"br0\">(</span><span class=\"kw4\">double</span> d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">nextAfter</span><span class=\"br0\">(</span>d, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>.<span class=\"me1\">NEGATIVE_INFINITY</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> stepUp<span class=\"br0\">(</span><span class=\"kw4\">double</span> d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">nextUp</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> safeAdd<span class=\"br0\">(</span><span class=\"kw4\">double</span> a, <span class=\"kw4\">double</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span>stepDown<span class=\"br0\">(</span>a <span class=\"sy0\">+</span> b<span class=\"br0\">)</span>, stepUp<span class=\"br0\">(</span>a <span class=\"sy0\">+</span> b<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">1.2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">0.03</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> result <span class=\"sy0\">=</span> safeAdd<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"(%.2f +\u00a0%.2f) is in the range\u00a0%.16f..%.16f\"</span>, a, b, result<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, result<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 21, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>julia&gt; using IntervalArithmetic<br/>\u00a0<br/>julia&gt; n = 2.0<br/>2.0<br/>\u00a0<br/>julia&gt; @interval 2n/3 + 1<br/>[2.33333, 2.33334]<br/>\u00a0<br/>julia&gt; showall(ans)<br/>Interval(2.333333333333333, 2.3333333333333335)<br/>\u00a0<br/>julia&gt; a = @interval(0.1, 0.3)<br/>[0.0999999, 0.300001]<br/>\u00a0<br/>julia&gt; b = @interval(0.3, 0.6)<br/>[0.299999, 0.600001]<br/>\u00a0<br/>julia&gt; a + b<br/>[0.399999, 0.900001]<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 13, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun stepDown<span class=\"br0\">(</span>d<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">nextAfter</span><span class=\"br0\">(</span>d, Double.<span class=\"me1\">NEGATIVE_INFINITY</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun stepUp<span class=\"br0\">(</span>d<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">nextUp</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span> <br/>\u00a0<br/>fun safeAdd<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Double, b<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=</span> stepDown<span class=\"br0\">(</span>a + b<span class=\"br0\">)</span>.<span class=\"me1\">rangeTo</span><span class=\"br0\">(</span>stepUp<span class=\"br0\">(</span>a + b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> <span class=\"nu0\">1.2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> <span class=\"nu0\">0.03</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"($a + $b) is in the range ${safeAdd(a, b)}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 20, "block": "<pre class=\"text highlighted_source\">import posix, strutils<br/>\u00a0<br/>proc `++`(a, b: float): tuple[lower, upper: float] =<br/>  let<br/>    a {.volatile.} = a<br/>    b {.volatile.} = b<br/>    orig = fegetround()<br/>  discard fesetround FE_DOWNWARD<br/>  result.lower = a + b<br/>  discard fesetround FE_UPWARD<br/>  result.upper = a + b<br/>  discard fesetround orig<br/>\u00a0<br/>proc ff(a: float): string = a.formatFloat(ffDefault, 17)<br/>\u00a0<br/>for x, y in [(1.0, 2.0), (0.1, 0.2), (1e100, 1e-100), (1e308, 1e308)].items:<br/>  let (d,u) = x ++ y<br/>  echo x.ff, \" + \", y.ff, \" =\"<br/>  echo \"    [\", d.ff, \", \", u.ff, \"]\"<br/>  echo \"    size \", (u - d).ff, \"\\n\"</pre>"}, {"lang": "Nim", "loc": 20, "block": "<pre class=\"text highlighted_source\">import posix, strutils<br/>\u00a0<br/>proc `++`(a, b: float): tuple[lower, upper: float] =<br/>  let<br/>    a {.volatile.} = a<br/>    b {.volatile.} = b<br/>    orig = fegetround()<br/>  discard fesetround FE_DOWNWARD<br/>  result.lower = a + b<br/>  discard fesetround FE_UPWARD<br/>  result.upper = a + b<br/>  discard fesetround orig<br/>\u00a0<br/>proc ff(a: float): string = a.formatFloat(ffDefault, 17)<br/>\u00a0<br/>for x, y in [(1.0, 2.0), (0.1, 0.2), (1e100, 1e-100), (1e308, 1e308)].items:<br/>  let (d,u) = x ++ y<br/>  echo x.ff, \" + \", y.ff, \" =\"<br/>  echo \"    [\", d.ff, \", \", u.ff, \"]\"<br/>  echo \"    size \", (u - d).ff, \"\\n\"</pre>"}, {"lang": "Phix", "loc": 53, "block": "<pre class=\"text highlighted_source\">include builtins\\VM\\pFPU.e  --\u00a0:%down53 etc<br/>\u00a0<br/>function safe_add(atom a, atom b)<br/>atom low,high<br/>    -- NB: be sure to restore the usual/default rounding!<br/>    #ilASM{<br/>        [32]<br/>            lea esi,[a]<br/>            call\u00a0:%pLoadFlt<br/>            lea esi,[b]<br/>            call\u00a0:%pLoadFlt<br/>            fld st0<br/>            call\u00a0:%down53<br/>            fadd st0,st2<br/>            lea edi,[low]<br/>            call\u00a0:%pStoreFlt<br/>            call\u00a0:%up53<br/>            faddp<br/>            lea edi,[high]<br/>            call\u00a0:%pStoreFlt<br/>            call\u00a0:%near53       -- usual/default<br/>        [64]<br/>            lea rsi,[a]<br/>            call\u00a0:%pLoadFlt<br/>            lea rsi,[b]<br/>            call\u00a0:%pLoadFlt<br/>            fld st0<br/>            call\u00a0:%down64<br/>            fadd st0,st2<br/>            lea rdi,[low]<br/>            call\u00a0:%pStoreFlt<br/>            call\u00a0:%up64<br/>            faddp<br/>            lea rdi,[high]<br/>            call\u00a0:%pStoreFlt<br/>            call\u00a0:%near64   -- usual/default<br/>        []<br/>          }<br/>    return {low,high}<br/>end function<br/>\u00a0<br/>constant nums = {{1, 2},<br/>                 {0.1, 0.2},<br/>                 {1e100, 1e-100},<br/>                 {1e308, 1e308}}<br/>\u00a0<br/>    for i=1 to length(nums) do<br/>        atom {a,b} = nums[i]<br/>        atom {low,high} = safe_add(a,b)<br/>        printf(1,\"%.16g +\u00a0%.16g =\\n\", {a, b});<br/>        printf(1,\"    [%.16g,\u00a0%.16g]\\n\", {low, high});<br/>        printf(1,\"    size\u00a0%.16g\\n\\n\", high - low);<br/>    end for</pre>"}, {"lang": "PicoLisp", "loc": 5, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"nu0\">0.9999999999999999</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> fsum<br/><span class=\"sy0\">&gt;&gt;&gt;</span> fsum<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"nu0\">1.0</span></pre>"}, {"lang": "Python", "loc": 5, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"nu0\">0.9999999999999999</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> fsum<br/><span class=\"sy0\">&gt;&gt;&gt;</span> fsum<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"sy0\">,</span> <span class=\"nu0\">.1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"nu0\">1.0</span></pre>"}, {"lang": "Racket", "loc": 29, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; 1. Racket has exact unlimited integers and fractions, which can be<br/>;;    used to perform exact operations.  For example, given an inexact<br/>;;    flonum, we can convert it to an exact fraction and work with that:<br/>(define (exact+ x y)<br/>  (+ (inexact-&gt;exact x) (inexact-&gt;exact y)))<br/>;; (A variant of this would be to keep all numbers exact, so the default<br/>;; operations never get to inexact numbers)<br/>\u00a0<br/>;; 2. We can implement the required operation using a bunch of<br/>;;    functionality provided by the math library, for example, use<br/>;;    `flnext' and `flprev' to get the surrounding numbers for both<br/>;;    inputs and use them to produce the resulting interval:<br/>(require math)<br/>(define (interval+ x y)<br/>  (cons (+ (flprev x) (flprev y)) (+ (flnext x) (flnext y))))<br/>(interval+ 1.14 2000.0)\u00a0; -&gt; '(2001.1399999999999 . 2001.1400000000003)<br/>;; (Note: I'm not a numeric expert in any way, so there must be room for<br/>;; improvement here...)<br/>\u00a0<br/>;; 3. Yet another option is to use the math library's bigfloats, with an<br/>;;    arbitrary precision:<br/>(bf-precision 1024)\u00a0; 1024 bit floats<br/>;; add two numbers, specified as strings to avoid rounding of number<br/>;; literals<br/>(bf+ (bf \"1.14\") (bf \"2000.0\"))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 5, "block": "<pre class=\"rexx highlighted_source\"><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">1000</span>           <span class=\"coMULTI\">/*defines precision to be 1,000 decimal digits. */</span><br/>\u00a0<br/>y=<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>                    <span class=\"coMULTI\">/*sets  Y  to existing number of decimal digits.*/</span><br/>\u00a0<br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> y + y%10       <span class=\"coMULTI\">/*increase the  (numeric) decimal digits by 10%.*/</span></pre>"}, {"lang": "Ruby", "loc": 23, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'bigdecimal'</span><br/><span class=\"kw3\">require</span> <span class=\"st0\">'bigdecimal/util'</span>  <span class=\"co1\"># String#to_d</span><br/>\u00a0<br/><span class=\"kw1\">def</span> safe_add<span class=\"br0\">(</span>a, b, prec<span class=\"br0\">)</span><br/>  a, b = a.<span class=\"me1\">to_d</span>, b.<span class=\"me1\">to_d</span><br/>  rm = <span class=\"re2\">BigDecimal::ROUND_MODE</span><br/>  orig = BigDecimal.<span class=\"me1\">mode</span><span class=\"br0\">(</span>rm<span class=\"br0\">)</span><br/>\u00a0<br/>  BigDecimal.<span class=\"me1\">mode</span><span class=\"br0\">(</span>rm, <span class=\"re2\">BigDecimal::ROUND_FLOOR</span><span class=\"br0\">)</span><br/>  low = a.<span class=\"me1\">add</span><span class=\"br0\">(</span>b, prec<span class=\"br0\">)</span><br/>\u00a0<br/>  BigDecimal.<span class=\"me1\">mode</span><span class=\"br0\">(</span>rm, <span class=\"re2\">BigDecimal::ROUND_CEILING</span><span class=\"br0\">)</span><br/>  high = a.<span class=\"me1\">add</span><span class=\"br0\">(</span>b, prec<span class=\"br0\">)</span><br/>\u00a0<br/>  BigDecimal.<span class=\"me1\">mode</span><span class=\"br0\">(</span>rm, orig<span class=\"br0\">)</span><br/>  low..<span class=\"me1\">high</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"1\"</span>, <span class=\"st0\">\"2\"</span><span class=\"br0\">]</span>,<br/> <span class=\"br0\">[</span><span class=\"st0\">\"0.1\"</span>, <span class=\"st0\">\"0.2\"</span><span class=\"br0\">]</span>,<br/> <span class=\"br0\">[</span><span class=\"st0\">\"0.1\"</span>, <span class=\"st0\">\"0.00002\"</span><span class=\"br0\">]</span>,<br/> <span class=\"br0\">[</span><span class=\"st0\">\"0.1\"</span>, <span class=\"st0\">\"-0.00002\"</span><span class=\"br0\">]</span>,<br/><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>a, b<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{a} + #{b} = #{safe_add(a, b, 3)}\"</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Scala", "loc": 13, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> SafeAddition <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1.2</span>, <span class=\"nu0\">0.03</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> safeAdd<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> safeAdd<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Double, b<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Seq<span class=\"br0\">(</span>stepDown<span class=\"br0\">(</span>a + b<span class=\"br0\">)</span>, stepUp<span class=\"br0\">(</span>a + b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> stepDown<span class=\"br0\">(</span>d<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">nextAfter</span><span class=\"br0\">(</span>d, Double.<span class=\"me1\">NegativeInfinity</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> stepUp<span class=\"br0\">(</span>d<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">nextUp</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>f<span class=\"st0\">\"($a%.2f + $b%.2f) is in the range ${result.head}%.16f .. ${result.last}%.16f\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Swift", "loc": 4, "block": "<pre class=\"text highlighted_source\">let a = 1.2<br/>let b = 0.03<br/>\u00a0<br/>print(\"\\(a) + \\(b) is in the range \\((a + b).nextDown)...\\((a + b).nextUp)\")</pre>"}, {"lang": "Tcl", "loc": 12, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require critcl<br/><span class=\"kw2\">package</span> provide stepaway <span class=\"nu0\">1.0</span><br/>critcl::<span class=\"me1\">ccode</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">#include &lt;math.h&gt;</span><br/>    <span class=\"co1\">#include &lt;float.h&gt;</span><br/><span class=\"br0\">}</span><br/>critcl::<span class=\"me1\">cproc</span> stepup <span class=\"br0\">{</span>double value<span class=\"br0\">}</span> double <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> nextafter<span class=\"br0\">(</span>value, DBL_MAX<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>critcl::<span class=\"me1\">cproc</span> stepdown <span class=\"br0\">{</span>double value<span class=\"br0\">}</span> double <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> nextafter<span class=\"br0\">(</span>value, -DBL_MAX<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}]}