{"task": "Catamorphism", "blocks": [{"lang": "Ada", "loc": 29, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Catamorphism <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Fun <span class=\"kw1\">is</span> <span class=\"kw3\">access</span> <span class=\"kw3\">function</span> <span class=\"br0\">(</span>Left, Right: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural;<br/>   <span class=\"kw3\">type</span> Arr <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span>Natural <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Natural;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Fold_Left <span class=\"br0\">(</span>F: Fun; A: Arr<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span><br/>      Result: Natural\u00a0:= A<span class=\"br0\">(</span>A'First<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> A'First+<span class=\"nu0\">1</span> .. <span class=\"me1\">A</span>'Last <span class=\"kw1\">loop</span><br/>\t Result\u00a0:= F<span class=\"br0\">(</span>Result, A<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> Fold_Left;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Max <span class=\"br0\">(</span>L, R: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> L &gt; R <span class=\"kw1\">then</span> L <span class=\"kw1\">else</span> R<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">function</span> Min <span class=\"br0\">(</span>L, R: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> L &lt; R <span class=\"kw1\">then</span> L <span class=\"kw1\">else</span> R<span class=\"br0\">)</span>;     <br/>   <span class=\"kw3\">function</span> Add <span class=\"br0\">(</span>Left, Right: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Left + Right<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">function</span> Mul <span class=\"br0\">(</span>Left, Right: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Left * Right<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">package</span> NIO <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Integer_IO</span><span class=\"br0\">(</span>Natural<span class=\"br0\">)</span>;   <br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   NIO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Fold_Left<span class=\"br0\">(</span>Min'<span class=\"kw3\">Access</span>, <span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, Width =&gt; <span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>   NIO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Fold_Left<span class=\"br0\">(</span>Max'<span class=\"kw3\">Access</span>, <span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, Width =&gt; <span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>   NIO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Fold_Left<span class=\"br0\">(</span>Add'<span class=\"kw3\">Access</span>, <span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, Width =&gt; <span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>   NIO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Fold_Left<span class=\"br0\">(</span>Mul'<span class=\"kw3\">Access</span>, <span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, Width =&gt; <span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Catamorphism;</pre>"}, {"lang": "ALGOL 68", "loc": 20, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># applies fn to successive elements of the array of values #</span><br/><span class=\"coMULTI\"># the result is 0 if there are no values                   #</span><br/><span class=\"kw4\">PROC</span> reduce <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> values<span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span><span class=\"br0\">(</span> <span class=\"kw3\">INT</span><span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> <span class=\"br0\">)</span><span class=\"kw3\">INT</span> fn <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">IF</span> <span class=\"kw8\">UPB</span> values <span class=\"sy1\">&lt;</span> <span class=\"kw8\">LWB</span> values<br/>     <span class=\"kw2\">THEN</span> <span class=\"coMULTI\"># no elements #</span><br/>          0<br/>     <span class=\"kw2\">ELSE</span> <span class=\"coMULTI\"># there are some elements #</span><br/>          <span class=\"kw3\">INT</span> result <span class=\"sy1\">:=</span> values<span class=\"br0\">[</span> <span class=\"kw8\">LWB</span> values <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>          <span class=\"kw2\">FOR</span> pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> values <span class=\"sy1\">+</span> 1 <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> values<br/>          <span class=\"kw2\">DO</span><br/>              result <span class=\"sy1\">:=</span> fn<span class=\"br0\">(</span> result<span class=\"sy1\">,</span> values<span class=\"br0\">[</span> pos <span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>          <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>          result<br/>     <span class=\"kw2\">FI</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># reduce #</span><br/>\u00a0<br/><span class=\"coMULTI\"># test the reduce procedure #</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> reduce<span class=\"br0\">(</span> <span class=\"br0\">(</span> 1<span class=\"sy1\">,</span> 2<span class=\"sy1\">,</span> 3<span class=\"sy1\">,</span> 4<span class=\"sy1\">,</span> 5 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span> b <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> a <span class=\"sy1\">+</span> b <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"coMULTI\"># sum #</span><br/>    <span class=\"sy1\">;</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> reduce<span class=\"br0\">(</span> <span class=\"br0\">(</span> 1<span class=\"sy1\">,</span> 2<span class=\"sy1\">,</span> 3<span class=\"sy1\">,</span> 4<span class=\"sy1\">,</span> 5 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span> b <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> a <span class=\"sy1\">*</span> b <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"coMULTI\"># product #</span><br/>    <span class=\"sy1\">;</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> reduce<span class=\"br0\">(</span> <span class=\"br0\">(</span> 1<span class=\"sy1\">,</span> 2<span class=\"sy1\">,</span> 3<span class=\"sy1\">,</span> 4<span class=\"sy1\">,</span> 5 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span> b <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> a <span class=\"sy1\">-</span> b <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"coMULTI\"># difference #</span><br/><span class=\"kw2\">END</span></pre>"}, {"lang": "AppleScript", "loc": 103, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- CATAMORPHISMS --------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- the arguments available to the called function f(a, x, i, l) are</span><br/><span class=\"co1\">-- a: current accumulator value</span><br/><span class=\"co1\">-- x: current item in list</span><br/><span class=\"co1\">-- i: [ 1-based index in list ] optional</span><br/><span class=\"co1\">-- l: [ a reference to the list itself ] optional</span><br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- the arguments available to the called function f(a, x, i, l) are</span><br/><span class=\"co1\">-- a: current accumulator value</span><br/><span class=\"co1\">-- x: current item in list</span><br/><span class=\"co1\">-- i: [ 1-based index in list ] optional</span><br/><span class=\"co1\">-- l: [ a reference to the list itself ] optional</span><br/>\u00a0<br/><span class=\"co1\">-- foldr\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldr<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> lng <span class=\"kw3\">to</span> <span class=\"nu0\">1</span> <span class=\"kw1\">by</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldr<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- OTHER FUNCTIONS DEFINED IN TERMS OF FOLDL AND FOLDR ------------</span><br/>\u00a0<br/><span class=\"co1\">-- concat\u00a0:: [[a]] -&gt; [a] | [String] -&gt; String</span><br/><span class=\"kw3\">on</span> concat<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> append<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">&amp;</span> b<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> class <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span> <span class=\"kw3\">is</span> <span class=\"kw1\">string</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> unit <span class=\"kw3\">to</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> unit <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    foldl<span class=\"br0\">(</span>append, unit, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> concat<br/>\u00a0<br/><span class=\"co1\">-- product\u00a0:: Num a =&gt; [a] -&gt; a</span><br/><span class=\"kw3\">on</span> product<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">*</span> b<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldr<span class=\"br0\">(</span><span class=\"kw1\">result</span>, <span class=\"nu0\">1</span>, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> product<br/>\u00a0<br/><span class=\"co1\">-- sum\u00a0:: Num a =&gt; [a] -&gt; a</span><br/><span class=\"kw3\">on</span> sum<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">+</span> b<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldl<span class=\"br0\">(</span><span class=\"kw1\">result</span>, <span class=\"nu0\">0</span>, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> sum<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST -----------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"kw3\">set</span> xs <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">9</span>, <span class=\"nu0\">10</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">{</span>sum<span class=\"br0\">(</span>xs<span class=\"br0\">)</span>, product<span class=\"br0\">(</span>xs<span class=\"br0\">)</span>, concat<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; {55, 3628800, \"10987654321\"}</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTION -----------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "Bracmat", "loc": 18, "block": "<pre class=\"text highlighted_source\">( ( fold<br/>  =   f xs init first rest<br/>    .  \u00a0!arg:(?f.?xs.?init)<br/>      &amp; (\u00a0!xs:&amp;!init<br/>        |  \u00a0!xs:%?first\u00a0?rest<br/>          &amp;\u00a0!f$(!first.fold$(!f.!rest.!init))<br/>        )<br/>  )<br/>&amp;   out<br/>  $ ( fold<br/>    $ ( (=a b.!arg:(?a.?b)&amp;!a+!b)<br/>      . 1 2 3 4 5<br/>      . 0<br/>      )<br/>    )<br/>&amp; (product=a b.!arg:(?a.?b)&amp;!a*!b)<br/>&amp; out$(fold$(product.1 2 3 4 5.1))<br/>);</pre>"}, {"lang": "BBC BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>      DIM a(4)<br/>      a() = 1, 2, 3, 4, 5<br/>      PRINT FNreduce(a(), \"+\")<br/>      PRINT FNreduce(a(), \"-\")<br/>      PRINT FNreduce(a(), \"*\")<br/>      END<br/>\u00a0<br/>      DEF FNreduce(arr(), op$)<br/>      REM!Keep tmp, arr()<br/>      LOCAL I%, tmp<br/>      tmp = arr(0)<br/>      FOR I% = 1 TO DIM(arr(), 1)<br/>        tmp = EVAL(\"tmp \" + op$ + \" arr(I%)\")<br/>      NEXT<br/>      = tmp<br/>\u00a0</pre>"}, {"lang": "C", "loc": 24, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">int</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>intFn<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> reduce<span class=\"br0\">(</span>intFn fn<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> size<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>elms<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> val <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>elms<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> size<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span><br/>        val <span class=\"sy0\">=</span> fn<span class=\"br0\">(</span>val<span class=\"sy0\">,</span> elms<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> val<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> add<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> a <span class=\"sy0\">+</span> b<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw4\">int</span> sub<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> a <span class=\"sy0\">-</span> b<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw4\">int</span> mul<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> a <span class=\"sy0\">*</span> b<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> nums<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> reduce<span class=\"br0\">(</span>add<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> nums<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> reduce<span class=\"br0\">(</span>sub<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> nums<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> reduce<span class=\"br0\">(</span>mul<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> nums<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 14, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;numeric&gt;</span><br/><span class=\"co2\">#include &lt;functional&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> nums <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> nums_added <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">accumulate</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>nums<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>nums<span class=\"br0\">)</span>, <span class=\"nu0\">0</span>, std<span class=\"sy4\">::</span><span class=\"me2\">plus</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">auto</span> nums_other <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">accumulate</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>nums<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>nums<span class=\"br0\">)</span>, <span class=\"nu0\">0</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> a, <span class=\"kw4\">const</span> <span class=\"kw4\">int</span><span class=\"sy3\">&amp;</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> a <span class=\"sy2\">+</span> <span class=\"nu0\">2</span> <span class=\"sy2\">*</span> b<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"nums_added: \"</span> <span class=\"sy1\">&lt;&lt;</span> nums_added <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"nums_other: \"</span> <span class=\"sy1\">&lt;&lt;</span> nums_other <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 9, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">var</span> nums <span class=\"sy0\">=</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> summation <span class=\"sy0\">=</span> nums<span class=\"sy0\">.</span><span class=\"me1\">Aggregate</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">+</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> product <span class=\"sy0\">=</span> nums<span class=\"sy0\">.</span><span class=\"me1\">Aggregate</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">*</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">string</span> concatenation <span class=\"sy0\">=</span> nums<span class=\"sy0\">.</span><span class=\"me1\">Aggregate</span><span class=\"br0\">(</span><span class=\"kw4\">String</span><span class=\"sy0\">.</span><span class=\"me1\">Empty</span>, <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> b<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0} {1} {2}\"</span>, summation, product, concatenation<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Clojure", "loc": 7, "block": "<pre class=\"clojure highlighted_source\"><span class=\"co1\">; Basic usage</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> <span class=\"sy0\">*</span> '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">120</span><br/><span class=\"co1\">; Using an initial value</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> <span class=\"sy0\">+</span> <span class=\"nu0\">100</span> '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">115</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 18, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">; Basic usage</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>reduce #'* '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">120</span><br/><span class=\"co1\">; Using an initial value</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>reduce #'+ '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-</span><span class=\"kw1\">value</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/><span class=\"nu0\">115</span><br/><span class=\"co1\">; Using only a subsequence</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>reduce #'+ '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">start</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span><span class=\"me1\">end</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"nu0\">9</span><br/><span class=\"co1\">; Apply a function to each element first</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>reduce #'+ '<span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>b <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>c <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">key</span> #'<span class=\"kw1\">cadr</span><span class=\"br0\">)</span><br/><span class=\"nu0\">6</span><br/><span class=\"co1\">; Right-associative reduction</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>reduce #'<span class=\"kw1\">expt</span> '<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">from-end</span> T<span class=\"br0\">)</span><br/><span class=\"nu0\">2417851639229258349412352</span><br/><span class=\"co1\">; Compare with</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>reduce #'<span class=\"kw1\">expt</span> '<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">4096</span></pre>"}, {"lang": "D", "loc": 13, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">meta</span><span class=\"sy0\">,</span> std.<span class=\"me1\">numeric</span><span class=\"sy0\">,</span><br/>           std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> list <span class=\"sy0\">=</span> iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">alias</span> ops <span class=\"sy0\">=</span> AliasSeq<span class=\"sy0\">!</span><span class=\"br0\">(</span>q<span class=\"br0\">{</span>a <span class=\"sy0\">+</span> b<span class=\"br0\">}</span><span class=\"sy0\">,</span> q<span class=\"br0\">{</span>a <span class=\"sy0\">*</span> b<span class=\"br0\">}</span><span class=\"sy0\">,</span> min<span class=\"sy0\">,</span> max<span class=\"sy0\">,</span> gcd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>op<span class=\"sy0\">;</span> ops<span class=\"br0\">)</span><br/>        writeln<span class=\"br0\">(</span>op.<span class=\"me1\">stringof</span><span class=\"sy0\">,</span> <span class=\"st0\">\": \"</span><span class=\"sy0\">,</span> list.<span class=\"me1\">reduce</span><span class=\"sy0\">!</span>op<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// std.algorithm.reduce supports multiple functions in parallel:</span><br/>    reduce<span class=\"sy0\">!</span><span class=\"br0\">(</span>ops<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> ops<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> text<span class=\"br0\">)</span><span class=\"br0\">(</span>tuple<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> list<span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "DCL", "loc": 26, "block": "<pre class=\"dcl highlighted_source\">$ list <span class=\"sy0\">=</span> <span class=\"st0\">\"1,2,3,4,5\"</span><br/>$ <span class=\"kw1\">call</span> reduce list <span class=\"st0\">\"+\"</span><br/>$ <span class=\"kw1\">show symbol</span> result<br/>$<br/>$ numbers <span class=\"sy0\">=</span> <span class=\"st0\">\"5,4,3,2,1\"</span><br/>$ <span class=\"kw1\">call</span> reduce numbers <span class=\"st0\">\"-\"</span><br/>$ <span class=\"kw1\">show symbol</span> result<br/>$<br/>$ <span class=\"kw1\">call</span> reduce list <span class=\"st0\">\"*\"</span><br/>$ <span class=\"kw1\">show symbol</span> result<br/>$ <span class=\"kw1\">exit</span><br/>$<br/>$<span class=\"re2\"> reduce:</span> <span class=\"kw1\">subroutine</span><br/>$ local_list <span class=\"sy0\">=</span> '<span class=\"kw3\">p1</span><br/>$ value <span class=\"sy0\">=</span> <span class=\"kw2\">f$integer</span><span class=\"br0\">(</span> <span class=\"kw2\">f$element</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"st0\">\",\"</span>, local_list <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>$ i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>$<span class=\"re2\"> loop:</span><br/>$  element <span class=\"sy0\">=</span> <span class=\"kw2\">f$element</span><span class=\"br0\">(</span> i, <span class=\"st0\">\",\"</span>, local_list <span class=\"br0\">)</span><br/>$  <span class=\"kw1\">if</span> element <span class=\"sy0\">.eqs.</span> <span class=\"st0\">\",\"</span> <span class=\"kw1\">then</span> $ <span class=\"kw1\">goto</span> done<br/>$  value <span class=\"sy0\">=</span> value '<span class=\"kw3\">p2</span> <span class=\"kw2\">f$integer</span><span class=\"br0\">(</span> element <span class=\"br0\">)</span><br/>$  i <span class=\"sy0\">=</span> i + <span class=\"nu0\">1</span><br/>$  <span class=\"kw1\">goto</span> loop<br/>$<span class=\"re2\"> done:</span><br/>$ result <span class=\"sy0\">==</span> value<br/>$ <span class=\"kw1\">exit</span><br/>$ <span class=\"kw1\">endsubroutine</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 9, "block": "<pre class=\"text highlighted_source\">reduce f lst init:<br/>\tif lst:<br/>\t\tf reduce @f lst init pop-from lst<br/>\telse:<br/>\t\tinit<br/>\u00a0<br/>!. reduce @+ [ 1 10 200 ] 4<br/>!. reduce @- [ 1 10 200 ] 4<br/>\u00a0</pre>"}, {"lang": "EchoLisp", "loc": 21, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; rem\u00a0: the foldX family always need an initial value</span><br/><span class=\"co1\">;; fold left a list </span><br/><span class=\"br0\">(</span>foldl <span class=\"sy0\">+</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span>iota <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; 0 + 1 + .. + 9</span><br/>  \u2192 <span class=\"nu0\">45</span><br/>\u00a0<br/><span class=\"co1\">;; fold left a sequence </span><br/><span class=\"br0\">(</span>lib 'sequences<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>foldl <span class=\"sy0\">*</span> <span class=\"nu0\">1</span> <span class=\"br0\">[</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">362880</span> <span class=\"co1\">;; 10!</span><br/>\u00a0<br/><span class=\"co1\">;; folding left and right</span><br/><span class=\"br0\">(</span>foldl <span class=\"sy0\">/</span> <span class=\"nu0\">1</span> ' <span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">8</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><br/><span class=\"br0\">(</span>foldr <span class=\"sy0\">/</span> <span class=\"nu0\">1</span> '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">3</span><span class=\"sy0\">/</span><span class=\"nu0\">8</span><br/>\u00a0<br/><span class=\"co1\">;;scanl gives the list (or sequence) of intermediate values\u00a0:</span><br/><span class=\"br0\">(</span>scanl <span class=\"sy0\">*</span> <span class=\"nu0\">1</span> '<span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   \u2192 <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">6</span> <span class=\"nu0\">24</span> <span class=\"nu0\">120</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 17, "block": "<pre class=\"text highlighted_source\">import system'collections.<br/>import system'routines.<br/>import extensions.<br/>import extensions'text.<br/>\u00a0<br/>public program =<br/>[<br/>    var numbers\u00a0:= 1 to:10 repeat(:n)( n ); summarize(ArrayList new).<br/>\u00a0<br/>    var summary\u00a0:= numbers accumulate(Variable new:0) with(:a:b)( a + b ).<br/>\u00a0<br/>    var product\u00a0:= numbers accumulate(Variable new:1) with(:a:b)( a * b ).<br/>\u00a0<br/>    var concatenation\u00a0:= numbers accumulate(String new) with(:a:b)( a literal + b literal ).<br/>\u00a0<br/>    console printLine(summary,\" \",product,\" \",concatenation).<br/>].</pre>"}, {"lang": "Elixir", "loc": 6, "block": "<pre class=\"text highlighted_source\">iex(1)&gt; Enum.reduce(1..10, fn i,acc -&gt; i+acc end)<br/>55<br/>iex(2)&gt; Enum.reduce(1..10, fn i,acc -&gt; i*acc end)<br/>3628800<br/>iex(3)&gt; Enum.reduce(10..-10, \"\", fn i,acc -&gt; acc &lt;&gt; to_string(i) end)<br/>\"109876543210-1-2-3-4-5-6-7-8-9-10\"</pre>"}, {"lang": "Erlang", "loc": 18, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>catamorphism<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>test<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">test</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Nums</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Summation</span> <span class=\"sy3\">=</span> <br/>\t\t<a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">X</span> <span class=\"sy3\">+</span> <span class=\"re5\">Acc</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"re5\">Nums</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Product</span> <span class=\"sy3\">=</span> <br/>\t\t<a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">X</span> <span class=\"sy3\">*</span> <span class=\"re5\">Acc</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Nums</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Concatenation</span> <span class=\"sy3\">=</span> <br/>\t\t<a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldr</span><span class=\"br0\">(</span><br/>\t\t\t<span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"kw3\">integer_to_list</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy3\">++</span> <span class=\"re5\">Acc</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <br/>\t\t\t<span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <br/>\t\t\t<span class=\"re5\">Nums</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">Summation</span><span class=\"sy1\">,</span> <span class=\"re5\">Product</span><span class=\"sy1\">,</span> <span class=\"re5\">Concatenation</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 1, "block": "<pre>&gt; let nums = [1 .. 10];;\n\nval nums\u00a0: int list = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]\n\n&gt; let summation = List.fold (+) 0 nums;;\n\nval summation\u00a0: int = 55\n\n&gt; let product = List.fold (*) 1 nums;;\n\nval product\u00a0: int = 3628800\n\n&gt; let concatenation = List.foldBack (fun x y -&gt; x + y) (List.map (fun i -&gt; i.ToString()) nums) \"\";;\n\nval concatenation\u00a0: string = \"12345678910\"\n</pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre class=\"text highlighted_source\">{ 1 2 4 6 10 } 0 [ + ] reduce .</pre>"}, {"lang": "Forth", "loc": 5, "block": "<pre class=\"text highlighted_source\">: lowercase? ( c -- f )<br/>  [char] a [ char z 1+ ] literal within\u00a0;<br/>\u00a0<br/>: char-upcase ( c -- C )<br/>  dup lowercase? if bl xor then\u00a0;</pre>"}, {"lang": "Fortran", "loc": 9, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">SUBROUTINE</span> FOLD<span class=\"br0\">(</span>t,F,i,ist,lst<span class=\"br0\">)</span><br/>       <span class=\"kw3\">INTEGER</span> t<br/>       BYNAME F<br/>        <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> ist,lst<br/>          t <span class=\"sy0\">=</span> F<br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> FOLD      <span class=\"co1\">!Result in temp.</span><br/>\u00a0<br/>      temp <span class=\"sy0\">=</span> a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>; <span class=\"kw1\">CALL</span> FOLD<span class=\"br0\">(</span>temp,temp<span class=\"sy0\">*</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>,i,<span class=\"nu0\">2</span>,N<span class=\"br0\">)</span></pre>"}, {"lang": "FreeBASIC", "loc": 45, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Type</span> IntFunc <span class=\"kw1\">As</span> <span class=\"kw1\">Function</span><span class=\"br0\">(</span><span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>  <br/>\u00a0<br/><span class=\"kw1\">Function</span> reduce<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, f <span class=\"kw1\">As</span> IntFunc<span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>   <span class=\"co1\">'' if array is empty or function pointer is null, return 0 say</span><br/>   <span class=\"kw1\">If</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> = -<span class=\"nu0\">1</span> OrElse f = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"nu0\">0</span> <br/>   <span class=\"kw1\">Dim</span> result <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = a<span class=\"br0\">(</span><span class=\"kw1\">LBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">LBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> + <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>     result = f<span class=\"br0\">(</span>result, a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>   <span class=\"kw1\">Next</span><br/>   <span class=\"kw1\">Return</span> result<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> add<span class=\"br0\">(</span>x <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, y <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">Return</span> x + y<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> subtract<span class=\"br0\">(</span>x <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, y <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">Return</span> x - y<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> multiply<span class=\"br0\">(</span>x <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, y <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">Return</span> x * y<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> max<span class=\"br0\">(</span>x <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, y <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">IIf</span><span class=\"br0\">(</span>x &gt; y, x, y<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> min<span class=\"br0\">(</span>x <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, y <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">IIf</span><span class=\"br0\">(</span>x &lt; y, x, y<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">}</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Sum is       \u00a0:\"</span>; reduce<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, @add<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Difference is\u00a0:\"</span>; reduce<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, @subtract<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Product is   \u00a0:\"</span>; reduce<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, @multiply<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Maximum is   \u00a0:\"</span>; reduce<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, @max<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Minimum is   \u00a0:\"</span>; reduce<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, @min<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"No op is     \u00a0:\"</span>; reduce<span class=\"br0\">(</span>a<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 25, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tn <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">}</span><br/>\u00a0<br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>reduce<span class=\"sy1\">(</span>add<span class=\"sy1\">,</span> n<span class=\"sy1\">))</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>reduce<span class=\"sy1\">(</span>sub<span class=\"sy1\">,</span> n<span class=\"sy1\">))</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>reduce<span class=\"sy1\">(</span>mul<span class=\"sy1\">,</span> n<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> add<span class=\"sy1\">(</span>a <span class=\"kw4\">int</span><span class=\"sy1\">,</span> b <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> a <span class=\"sy3\">+</span> b <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> sub<span class=\"sy1\">(</span>a <span class=\"kw4\">int</span><span class=\"sy1\">,</span> b <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> a <span class=\"sy3\">-</span> b <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> mul<span class=\"sy1\">(</span>a <span class=\"kw4\">int</span><span class=\"sy1\">,</span> b <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> a <span class=\"sy3\">*</span> b <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> reduce<span class=\"sy1\">(</span>rf <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span><span class=\"sy1\">,</span> m <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>\tr <span class=\"sy2\">:=</span> m<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> v <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:]</span> <span class=\"sy1\">{</span><br/>\t\tr <span class=\"sy2\">=</span> rf<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> v<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> r<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 13, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> vector1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">7</span><span class=\"br0\">]</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> vector2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> map1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span>a:<span class=\"nu0\">1</span>, b:<span class=\"nu0\">2</span>, c:<span class=\"nu0\">3</span>, d:<span class=\"nu0\">4</span><span class=\"br0\">]</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> vector1.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20inject\"><span class=\"kw5\">inject</span></a> <span class=\"br0\">{</span> acc, val <span class=\"sy0\">-&gt;</span> acc <span class=\"sy0\">+</span> val <span class=\"br0\">}</span>       <span class=\"co1\">// sum</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> vector1.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20inject\"><span class=\"kw5\">inject</span></a> <span class=\"br0\">{</span> acc, val <span class=\"sy0\">-&gt;</span> acc <span class=\"sy0\">+</span> val<span class=\"sy0\">*</span>val <span class=\"br0\">}</span>   <span class=\"co1\">// sum of squares</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> vector1.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20inject\"><span class=\"kw5\">inject</span></a> <span class=\"br0\">{</span> acc, val <span class=\"sy0\">-&gt;</span> acc <span class=\"sy0\">*</span> val <span class=\"br0\">}</span>       <span class=\"co1\">// product</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> vector1.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20inject\"><span class=\"kw5\">inject</span></a> <span class=\"br0\">{</span> acc, val <span class=\"sy0\">-&gt;</span> acc<span class=\"sy0\">&lt;</span>val<span class=\"sy0\">?</span>val:acc <span class=\"br0\">}</span> <span class=\"co1\">// max</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"br0\">(</span><span class=\"br0\">[</span>vector1,vector2<span class=\"br0\">]</span>.<span class=\"me1\">transpose</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20inject\"><span class=\"kw5\">inject</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> acc, val <span class=\"sy0\">-&gt;</span> acc <span class=\"sy0\">+</span> val<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>val<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"co1\">//dot product (with seed 0)</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"br0\">(</span>map1.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20inject\"><span class=\"kw5\">inject</span></a> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=Map.Entry&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Map.<span class=\"me1\">Entry</span></span></a> accEntry, <a href=\"http://www.google.de/search?as_q=Map.Entry&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Map.<span class=\"me1\">Entry</span></span></a> entry <span class=\"sy0\">-&gt;</span>     <span class=\"co1\">// some sort of weird map-based reduction</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">(</span>accEntry.<span class=\"me1\">key</span> <span class=\"sy0\">+</span> entry.<span class=\"me1\">key</span><span class=\"br0\">)</span>:accEntry.<span class=\"me1\">value</span> <span class=\"sy0\">+</span> entry.<span class=\"me1\">value</span> <span class=\"br0\">]</span>.<span class=\"me1\">entrySet</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20toList\"><span class=\"kw5\">toList</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20pop\"><span class=\"kw5\">pop</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 8, "block": "<pre class=\"haskell highlighted_source\">main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unlines\"><span class=\"kw3\">unlines</span></a> <span class=\"sy0\">$</span><br/>  <span class=\"br0\">[</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr\"><span class=\"kw3\">foldr</span></a> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span>    <span class=\"nu0\">0</span>  <span class=\"co1\">-- sum</span><br/>  <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr\"><span class=\"kw3\">foldr</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>    <span class=\"nu0\">1</span>  <span class=\"co1\">-- product</span><br/>  <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr\"><span class=\"kw3\">foldr</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a><span class=\"br0\">)</span> <span class=\"st0\">\"\"</span> <span class=\"co1\">-- concatenation</span><br/>  <span class=\"br0\">]</span> <span class=\"sy0\">&lt;*&gt;</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 9, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\": \"</span><span class=\"sy0\">,</span>curry<span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>A<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> curry<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>A<span class=\"br0\">)</span><br/>    r <span class=\"sy0\">:=</span> A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">every</span> r <span class=\"sy0\">:=</span> f<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> <span class=\"sy0\">!</span>A<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> r<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">    /</pre>"}, {"lang": "Java", "loc": 9, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.stream.Stream</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> ReduceTask <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>Stream.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"me1\">mapToInt</span><span class=\"br0\">(</span>i <span class=\"sy0\">-&gt;</span> i<span class=\"br0\">)</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>Stream.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">*</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 17, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> nums <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> add<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> a <span class=\"sy0\">+</span> b<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> summation <span class=\"sy0\">=</span> nums.<span class=\"me1\">reduce</span><span class=\"br0\">(</span>add<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> mul<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> a <span class=\"sy0\">*</span> b<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> product <span class=\"sy0\">=</span> nums.<span class=\"me1\">reduce</span><span class=\"br0\">(</span>mul<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> concatenation <span class=\"sy0\">=</span> nums.<span class=\"me1\">reduce</span><span class=\"br0\">(</span>add<span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>summation<span class=\"sy0\">,</span> product<span class=\"sy0\">,</span> concatenation<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre>def factorial: reduce range(2;.+1) as $i (1; . * $i);\n</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">for op in [+, -, *] println(reduce(op, 1:5)) end</pre>"}, {"lang": "Kotlin", "loc": 9, "block": "<pre class=\"scala highlighted_source\">fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Array      \u00a0: ${a.joinToString(\"</span>, <span class=\"st0\">\")}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Sum        \u00a0: ${a.reduce { x, y -&gt; x + y }}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Difference \u00a0: ${a.reduce { x, y -&gt; x - y }}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Product    \u00a0: ${a.reduce { x, y -&gt; x * y }}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Minimum    \u00a0: ${a.reduce { x, y -&gt; if (x &lt; y) x else y }}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Maximum    \u00a0: ${a.reduce { x, y -&gt; if (x &gt; y) x else y }}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Logtalk", "loc": 16, "block": "<pre class=\"logtalk highlighted_source\">\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(folding_examples).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(show<span class=\"sy1\">/</span><span class=\"nu0\">0</span>).<br/>    show <span class=\"sy2\">:-</span><br/>        integer<span class=\"sy1\">::</span>sequence(<span class=\"nu0\">1</span>, <span class=\"nu0\">10</span>, <span class=\"re0\">List</span>),<br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'List: '</span>), <span class=\"kw4\">write</span>(<span class=\"re0\">List</span>), <span class=\"kw5\">nl</span>,<br/>        meta<span class=\"sy1\">::</span>fold_left([<span class=\"re0\">Acc</span>,<span class=\"re0\">N</span>,<span class=\"re0\">Sum0</span>]<span class=\"sy1\">&gt;&gt;</span>(<span class=\"re0\">Sum0</span> <span class=\"kw5\">is</span> <span class=\"re0\">Acc</span><span class=\"sy1\">+</span><span class=\"re0\">N</span>), <span class=\"nu0\">0</span>, <span class=\"re0\">List</span>, <span class=\"re0\">Sum</span>),<br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'Sum of all elements: '</span>), <span class=\"kw4\">write</span>(<span class=\"re0\">Sum</span>), <span class=\"kw5\">nl</span>,<br/>        meta<span class=\"sy1\">::</span>fold_left([<span class=\"re0\">Acc</span>,<span class=\"re0\">N</span>,<span class=\"re0\">Product0</span>]<span class=\"sy1\">&gt;&gt;</span>(<span class=\"re0\">Product0</span> <span class=\"kw5\">is</span> <span class=\"re0\">Acc</span><span class=\"sy1\">*</span><span class=\"re0\">N</span>), <span class=\"nu0\">1</span>, <span class=\"re0\">List</span>, <span class=\"re0\">Product</span>),<br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'Product of all elements: '</span>), <span class=\"kw4\">write</span>(<span class=\"re0\">Product</span>), <span class=\"kw5\">nl</span>,<br/>        meta<span class=\"sy1\">::</span>fold_left([<span class=\"re0\">Acc</span>,<span class=\"re0\">N</span>,<span class=\"re0\">Concat0</span>]<span class=\"sy1\">&gt;&gt;</span>(<span class=\"kw4\">number_codes</span>(<span class=\"re0\">N</span>,<span class=\"re0\">NC</span>), <span class=\"kw4\">atom_codes</span>(<span class=\"re0\">NA</span>,<span class=\"re0\">NC</span>), <span class=\"kw4\">atom_concat</span>(<span class=\"re0\">Acc</span>,<span class=\"re0\">NA</span>,<span class=\"re0\">Concat0</span>)), <span class=\"st0\">''</span>, <span class=\"re0\">List</span>, <span class=\"re0\">Concat</span>),<br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'Concatenation of all elements: '</span>), <span class=\"kw4\">write</span>(<span class=\"re0\">Concat</span>), <span class=\"kw5\">nl</span>.<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0</pre>"}, {"lang": "LOLCODE", "loc": 27, "block": "<pre class=\"lolcode highlighted_source\"><span class=\"kw1\">HAI</span> <span class=\"nu0\">1.3</span><br/>\u00a0<br/>HOW <span class=\"kw2\">IZ</span> I reducin <span class=\"kw4\">YR</span> array <span class=\"kw4\">AN</span> <span class=\"kw4\">YR</span> size <span class=\"kw4\">AN</span> <span class=\"kw4\">YR</span> fn<br/>    <span class=\"kw1\">I HAS A</span> val <span class=\"kw1\">ITZ</span> array'Z SRS <span class=\"nu0\">0</span><br/>    <span class=\"kw2\">IM</span> <span class=\"kw3\">IN</span> <span class=\"kw4\">YR</span> <span class=\"kw3\">LOOP</span> <span class=\"kw4\">UPPIN</span> <span class=\"kw4\">YR</span> i TIL <span class=\"kw2\">BOTH SAEM</span> i <span class=\"kw4\">AN</span> <span class=\"kw2\">DIFF</span> <span class=\"kw2\">OF</span> size <span class=\"kw4\">AN</span> <span class=\"nu0\">1</span><br/>        val <span class=\"kw1\">R</span> I <span class=\"kw2\">IZ</span> fn <span class=\"kw4\">YR</span> val <span class=\"kw4\">AN</span> <span class=\"kw4\">YR</span> array'Z SRS <span class=\"kw2\">SUM</span> <span class=\"kw2\">OF</span> i <span class=\"kw4\">AN</span> <span class=\"nu0\">1</span> <span class=\"kw2\">MKAY</span><br/>    <span class=\"kw2\">IM</span> <span class=\"kw3\">OUTTA</span> <span class=\"kw4\">YR</span> <span class=\"kw3\">LOOP</span><br/>    <span class=\"kw1\">FOUND YR</span> val<br/><span class=\"kw1\">IF U SAY SO</span><br/>\u00a0<br/>O <span class=\"kw1\">HAI</span> <span class=\"kw2\">IM</span> array<br/>    <span class=\"kw1\">I HAS A</span> SRS <span class=\"nu0\">0</span> <span class=\"kw1\">ITZ</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">I HAS A</span> SRS <span class=\"nu0\">1</span> <span class=\"kw1\">ITZ</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">I HAS A</span> SRS <span class=\"nu0\">2</span> <span class=\"kw1\">ITZ</span> <span class=\"nu0\">3</span><br/>    <span class=\"kw1\">I HAS A</span> SRS <span class=\"nu0\">3</span> <span class=\"kw1\">ITZ</span> <span class=\"nu0\">4</span><br/>    <span class=\"kw1\">I HAS A</span> SRS <span class=\"nu0\">4</span> <span class=\"kw1\">ITZ</span> <span class=\"nu0\">5</span><br/><span class=\"kw1\">KTHX</span><br/>\u00a0<br/>HOW <span class=\"kw2\">IZ</span> I add <span class=\"kw4\">YR</span> a <span class=\"kw4\">AN</span> <span class=\"kw4\">YR</span> b<span class=\"sy0\">,</span> <span class=\"kw1\">FOUND YR</span>     <span class=\"kw2\">SUM</span> <span class=\"kw2\">OF</span> a <span class=\"kw4\">AN</span> b<span class=\"sy0\">,</span> <span class=\"kw1\">IF U SAY SO</span><br/>HOW <span class=\"kw2\">IZ</span> I sub <span class=\"kw4\">YR</span> a <span class=\"kw4\">AN</span> <span class=\"kw4\">YR</span> b<span class=\"sy0\">,</span> <span class=\"kw1\">FOUND YR</span>    <span class=\"kw2\">DIFF</span> <span class=\"kw2\">OF</span> a <span class=\"kw4\">AN</span> b<span class=\"sy0\">,</span> <span class=\"kw1\">IF U SAY SO</span><br/>HOW <span class=\"kw2\">IZ</span> I mul <span class=\"kw4\">YR</span> a <span class=\"kw4\">AN</span> <span class=\"kw4\">YR</span> b<span class=\"sy0\">,</span> <span class=\"kw1\">FOUND YR</span> <span class=\"kw2\">PRODUKT</span> <span class=\"kw2\">OF</span> a <span class=\"kw4\">AN</span> b<span class=\"sy0\">,</span> <span class=\"kw1\">IF U SAY SO</span><br/>\u00a0<br/><span class=\"kw1\">VISIBLE</span> I <span class=\"kw2\">IZ</span> reducin <span class=\"kw4\">YR</span> array <span class=\"kw4\">AN</span> <span class=\"kw4\">YR</span> <span class=\"nu0\">5</span> <span class=\"kw4\">AN</span> <span class=\"kw4\">YR</span> add <span class=\"kw2\">MKAY</span><br/><span class=\"kw1\">VISIBLE</span> I <span class=\"kw2\">IZ</span> reducin <span class=\"kw4\">YR</span> array <span class=\"kw4\">AN</span> <span class=\"kw4\">YR</span> <span class=\"nu0\">5</span> <span class=\"kw4\">AN</span> <span class=\"kw4\">YR</span> sub <span class=\"kw2\">MKAY</span><br/><span class=\"kw1\">VISIBLE</span> I <span class=\"kw2\">IZ</span> reducin <span class=\"kw4\">YR</span> array <span class=\"kw4\">AN</span> <span class=\"kw4\">YR</span> <span class=\"nu0\">5</span> <span class=\"kw4\">AN</span> <span class=\"kw4\">YR</span> mul <span class=\"kw2\">MKAY</span><br/>\u00a0<br/><span class=\"kw1\">KTHXBYE</span></pre>"}, {"lang": "Lua", "loc": 32, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw3\">table</span><span class=\"sy0\">.</span><span class=\"kw3\">unpack</span> <span class=\"sy0\">=</span> <span class=\"kw3\">table</span><span class=\"sy0\">.</span><span class=\"kw3\">unpack</span> <span class=\"kw2\">or</span> <span class=\"kw3\">unpack</span> <span class=\"co1\">-- 5.1 compatibility</span><br/><span class=\"kw1\">local</span> nums <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> add<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> a<span class=\"sy0\">+</span>b<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> mult<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> a<span class=\"sy0\">*</span>b<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> cat<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> <span class=\"kw3\">tostring</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">..</span><span class=\"kw3\">tostring</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> <span class=\"kw1\">function</span> reduce<span class=\"br0\">(</span>fun<span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,...</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">if</span> <span class=\"sy0\">...</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">return</span> reduce<span class=\"br0\">(</span>fun<span class=\"sy0\">,</span>fun<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">,...</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">return</span> fun<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>   <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> arithmetic_sum <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> reduce<span class=\"br0\">(</span>add<span class=\"sy0\">,...</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">local</span> factorial5 <span class=\"sy0\">=</span> reduce<span class=\"br0\">(</span>mult<span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"\u03a3(1..9)  \u00a0: \"</span><span class=\"sy0\">,</span>arithmetic_sum<span class=\"br0\">(</span><span class=\"kw3\">table</span><span class=\"sy0\">.</span><span class=\"kw3\">unpack</span><span class=\"br0\">(</span>nums<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"5!       \u00a0: \"</span><span class=\"sy0\">,</span>factorial5<span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"cat {1..9}: \"</span><span class=\"sy0\">,</span>reduce<span class=\"br0\">(</span>cat<span class=\"sy0\">,</span><span class=\"kw3\">table</span><span class=\"sy0\">.</span><span class=\"kw3\">unpack</span><span class=\"br0\">(</span>nums<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 8, "block": "<pre class=\"text highlighted_source\">&gt; nums\u00a0:= seq( 1 .. 10 );<br/>                          nums\u00a0:= 1, 2, 3, 4, 5, 6, 7, 8, 9, 10<br/>\u00a0<br/>&gt; foldl( `+`, 0, nums ); # compute sum using foldl<br/>                          55<br/>\u00a0<br/>&gt; foldr( `*`, 1, nums ); # compute product using foldr<br/>                          3628800</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">Fold[f, x, {a, b, c, d}]</pre>"}, {"lang": "Maxima", "loc": 2, "block": "<pre class=\"text highlighted_source\">lreduce(f, [a, b, c, d], x0);<br/>/* (%o1)                     f(f(f(f(x0, a), b), c), d) */</pre>"}, {"lang": "Nemerle", "loc": 2, "block": "<pre class=\"text highlighted_source\">def seq = [1, 4, 6, 3, 7];<br/>def sum = seq.Fold(0, _ + _); // Fold takes an initial value and a function, here the + operator</pre>"}, {"lang": "Nim", "loc": 19, "block": "<pre class=\"text highlighted_source\">import sequtils<br/>\u00a0<br/>block:<br/>  let<br/>    numbers = @[5, 9, 11]<br/>    addition = foldl(numbers, a + b)<br/>    substraction = foldl(numbers, a - b)<br/>    multiplication = foldl(numbers, a * b)<br/>    words = @[\"nim\", \"is\", \"cool\"]<br/>    concatenation = foldl(words, a &amp; b)<br/>\u00a0<br/>block:<br/>  let<br/>    numbers = @[5, 9, 11]<br/>    addition = foldr(numbers, a + b)<br/>    substraction = foldr(numbers, a - b)<br/>    multiplication = foldr(numbers, a * b)<br/>    words = @[\"nim\", \"is\", \"cool\"]<br/>    concatenation = foldr(words, a &amp; b)</pre>"}, {"lang": "Oberon-2", "loc": 74, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> Catamorphism;<br/><span class=\"kw1\">IMPORT</span><br/>  Object<span class=\"sy0\">,</span><br/>  NPCT<span class=\"sy0\">:</span>Tools<span class=\"sy0\">,</span><br/>  NPCT<span class=\"sy0\">:</span>Args<span class=\"sy0\">,</span><br/>  IntStr<span class=\"sy0\">,</span><br/>  Out;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span><br/>  BinaryFunc<span class=\"sy0\">=</span> <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>  data<span class=\"sy0\">:</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span>;<br/>  i<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Sum<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">RETURN</span> x <span class=\"sy0\">+</span> y<br/>  <span class=\"kw1\">END</span> Sum;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Sub<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">RETURN</span> x <span class=\"sy0\">-</span> y;<br/>  <span class=\"kw1\">END</span> Sub;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Mul<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">RETURN</span> x <span class=\"sy0\">*</span> y;<br/>  <span class=\"kw1\">END</span> Mul;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Reduce<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span>; f<span class=\"sy0\">:</span> BinaryFunc<span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">VAR</span><br/>    i<span class=\"sy0\">,</span>res<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    res <span class=\"sy0\">:=</span> x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>;i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>i &lt; <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span>;<br/>      res <span class=\"sy0\">:=</span> f<span class=\"br0\">(</span>res<span class=\"sy0\">,</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> res<br/>  <span class=\"kw1\">END</span> Reduce;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> InitData<span class=\"br0\">(</span><span class=\"kw1\">VAR</span> x<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">VAR</span><br/>    i<span class=\"sy0\">,</span> j<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>    res<span class=\"sy0\">:</span> IntStr.<span class=\"me1\">ConvResults</span>;<br/>    aux<span class=\"sy0\">:</span> Object.<span class=\"me1\">CharsLatin1</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;j <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>j &lt;<span class=\"sy0\">=</span> <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>      aux <span class=\"sy0\">:=</span> Tools.<span class=\"me1\">AsString</span><span class=\"br0\">(</span>Args.<span class=\"me1\">Get</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      IntStr.<span class=\"me1\">StrToInt</span><span class=\"br0\">(</span>aux^<span class=\"sy0\">,</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>res<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">IF</span> res <span class=\"sy0\">#</span> IntStr.<span class=\"me1\">strAllRight</span> <span class=\"kw1\">THEN</span><br/>        Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Incorrect format for data at index \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>j<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>        <span class=\"kw3\">HALT</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">END</span>;<br/>      <span class=\"kw3\">INC</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span>;<span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span><br/>  <span class=\"kw1\">END</span> InitData;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">IF</span> Args.<span class=\"me1\">Number</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span><br/>    Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Invalid number of arguments. \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>    <span class=\"kw3\">HALT</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ELSE</span><br/>    <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>data<span class=\"sy0\">,</span>Args.<span class=\"me1\">Number</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>    InitData<span class=\"br0\">(</span>data^<span class=\"br0\">)</span>;<br/>    Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>Reduce<span class=\"br0\">(</span>data^<span class=\"sy0\">,</span>Sum<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>    Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>Reduce<span class=\"br0\">(</span>data^<span class=\"sy0\">,</span>Sub<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>    Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>Reduce<span class=\"br0\">(</span>data^<span class=\"sy0\">,</span>Mul<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/>  <span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> Catamorphism.<br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 18, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">use</span> Collection<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Reducer <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    values <span class=\"sy0\">:=</span> IntVector<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    values<span class=\"sy0\">-&gt;</span><span class=\"me1\">Reduce</span><span class=\"br0\">(</span>Add<span class=\"br0\">(</span><span class=\"kw2\">Int</span><span class=\"sy0\">,</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    values<span class=\"sy0\">-&gt;</span><span class=\"me1\">Reduce</span><span class=\"br0\">(</span>Mul<span class=\"br0\">(</span><span class=\"kw2\">Int</span><span class=\"sy0\">,</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Add<span class=\"br0\">(</span>a <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">,</span> b <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> a <span class=\"sy0\">+</span> b<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Mul<span class=\"br0\">(</span>a <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">,</span> b <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> a <span class=\"sy0\">*</span> b<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 6, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> nums <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"nu0\">4</span><span class=\"sy0\">;</span><span class=\"nu0\">5</span><span class=\"sy0\">;</span><span class=\"nu0\">6</span><span class=\"sy0\">;</span><span class=\"nu0\">7</span><span class=\"sy0\">;</span><span class=\"nu0\">8</span><span class=\"sy0\">;</span><span class=\"nu0\">9</span><span class=\"sy0\">;</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> nums <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><br/><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> sum <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> nums<span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> sum <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">55</span><br/><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> product <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left <span class=\"br0\">(</span> <span class=\"sy0\">*</span> <span class=\"br0\">)</span> <span class=\"nu0\">1</span> nums<span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> product <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">3628800</span></pre>"}, {"lang": "Oforth", "loc": 2, "block": "<pre class=\"text highlighted_source\">[ 1, 2, 3, 4, 5 ] reduce(#max)<br/>[ \"abc\", \"def\", \"gfi\" ] reduce(#+)</pre>"}, {"lang": "PARI/GP", "loc": 6, "block": "<pre class=\"parigp highlighted_source\">reduce<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> v<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>t<span class=\"sy0\">=</span>v<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span>t<span class=\"sy0\">=</span>f<span class=\"br0\">(</span>t<span class=\"sy0\">,</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  t<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>reduce<span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>a<span class=\"sy0\">+</span>b<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span><span class=\"nu1\">4</span><span class=\"sy0\">,</span><span class=\"nu1\">5</span><span class=\"sy0\">,</span><span class=\"nu1\">6</span><span class=\"sy0\">,</span><span class=\"nu1\">7</span><span class=\"sy0\">,</span><span class=\"nu1\">8</span><span class=\"sy0\">,</span><span class=\"nu1\">9</span><span class=\"sy0\">,</span><span class=\"nu1\">10</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 53, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> reduce<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/><span class=\"co1\">//  tmyArray = array of LongInt;</span><br/>  tmyArray <span class=\"sy3\">=</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"sy3\">-</span><span class=\"nu0\">5</span><span class=\"sy1\">..</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">LongInt</span><span class=\"sy1\">;</span><br/>  tmyFunc <span class=\"sy3\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"sy1\">,</span>b<span class=\"sy1\">:</span><span class=\"kw4\">LongInt</span><span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">LongInt</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> add<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"sy1\">:</span><span class=\"kw4\">LongInt</span><span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">LongInt</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  add <span class=\"sy1\">:</span><span class=\"sy3\">=</span> x<span class=\"sy3\">+</span>y<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> sub<span class=\"br0\">(</span>k<span class=\"sy1\">,</span>l<span class=\"sy1\">:</span><span class=\"kw4\">LongInt</span><span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">LongInt</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  sub <span class=\"sy1\">:</span><span class=\"sy3\">=</span> k<span class=\"sy3\">-</span>l<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> mul<span class=\"br0\">(</span>r<span class=\"sy1\">,</span>t<span class=\"sy1\">:</span><span class=\"kw4\">LongInt</span><span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">LongInt</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  mul <span class=\"sy1\">:</span><span class=\"sy3\">=</span> r<span class=\"sy3\">*</span>t<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> reduce<span class=\"br0\">(</span>myFunc<span class=\"sy1\">:</span>tmyFunc<span class=\"sy1\">;</span>a<span class=\"sy1\">:</span>tmyArray<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">LongInt</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span>res <span class=\"sy1\">:</span> <span class=\"kw4\">LongInt</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  res <span class=\"sy1\">:</span><span class=\"sy3\">=</span> a<span class=\"br0\">[</span>low<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    res <span class=\"sy1\">:</span><span class=\"sy3\">=</span> myFunc<span class=\"br0\">(</span>res<span class=\"sy1\">,</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  reduce <span class=\"sy1\">:</span><span class=\"sy3\">=</span> res<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> InitMyArray<span class=\"br0\">(</span><span class=\"kw1\">var</span> a<span class=\"sy1\">:</span>tmyArray<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">LongInt</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"co1\">//no a[i] = 0</span><br/>    a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i <span class=\"sy3\">+</span> <span class=\"kw3\">ord</span><span class=\"br0\">(</span>i<span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"re1\">#8</span><span class=\"re1\">#32</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  ma <span class=\"sy1\">:</span> tmyArray<span class=\"sy1\">;</span><br/><span class=\"kw1\">BEGIN</span><br/>  InitMyArray<span class=\"br0\">(</span>ma<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>reduce<span class=\"br0\">(</span><span class=\"sy2\">@</span>add<span class=\"sy1\">,</span>ma<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>reduce<span class=\"br0\">(</span><span class=\"sy2\">@</span>sub<span class=\"sy1\">,</span>ma<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>reduce<span class=\"br0\">(</span><span class=\"sy2\">@</span>mul<span class=\"sy1\">,</span>ma<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">END</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 8, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <span class=\"st_h\">'reduce'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># note the use of the odd $a and $b globals</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">+</span><span class=\"br0\">(</span>reduce <span class=\"br0\">{</span><span class=\"re0\">$a</span> <span class=\"sy0\">+</span> <span class=\"re0\">$b</span><span class=\"br0\">}</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># first argument is really an anon function; you could also do this:</span><br/><span class=\"kw2\">sub</span> func <span class=\"br0\">{</span> <span class=\"re0\">$b</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"$a $b\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"$b $a\"</span> <span class=\"br0\">}</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">+</span><span class=\"br0\">(</span>reduce <span class=\"re0\">\\&amp;func</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span></pre>"}, {"lang": "Perl 6", "loc": 7, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@list</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"re0\">@list</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">]</span> <span class=\"re0\">@list</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"br0\">[</span><span class=\"sy0\">~</span><span class=\"br0\">]</span> <span class=\"re0\">@list</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"br0\">[</span><span class=\"kw3\">min</span><span class=\"br0\">]</span> <span class=\"re0\">@list</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"br0\">[</span><span class=\"kw3\">max</span><span class=\"br0\">]</span> <span class=\"re0\">@list</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"br0\">[</span>lcm<span class=\"br0\">]</span> <span class=\"re0\">@list</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 23, "block": "<pre class=\"text highlighted_source\">function add(integer a, integer b)<br/>    return a + b<br/>end function<br/>\u00a0<br/>function sub(integer a, integer b)<br/>    return a - b<br/>end function<br/>\u00a0<br/>function mul(integer a, integer b)<br/>    return a * b<br/>end function<br/>\u00a0<br/>function reduce(integer rid, sequence s)<br/>object res = s[1]<br/>    for i=2 to length(s) do<br/>        res = call_func(rid,{res,s[i]})<br/>    end for<br/>    return res      <br/>end function<br/>\u00a0<br/>?reduce(routine_id(\"add\"),tagset(5))<br/>?reduce(routine_id(\"sub\"),tagset(5))<br/>?reduce(routine_id(\"mul\"),tagset(5))</pre>"}, {"lang": "PicoLisp", "loc": 11, "block": "<pre class=\"text highlighted_source\">(de reduce (\"Fun\" \"Lst\")<br/>   (let \"A\" (car \"Lst\")<br/>      (for \"N\" (cdr \"Lst\")<br/>         (setq \"A\" (\"Fun\" \"A\" \"N\")) )<br/>      \"A\" ) )<br/>\u00a0<br/>(println<br/>   (reduce + (1 2 3 4 5))<br/>   (reduce * (1 2 3 4 5)) )<br/>\u00a0<br/>(bye)</pre>"}, {"lang": "PowerShell", "loc": 3, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"nu0\">1</span>..<span class=\"nu0\">5</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"kw5\">-Begin</span> <span class=\"br0\">{</span><span class=\"re0\">$result</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"kw5\">-Process</span> <span class=\"br0\">{</span><span class=\"re0\">$result</span> <span class=\"sy0\">+=</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">}</span> <span class=\"kw5\">-End</span> <span class=\"br0\">{</span><span class=\"re0\">$result</span><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 14, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span>library<span class=\"br0\">(</span>lambda<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% foldl is now a predicate of SWI-Prolog 6.3.1</span><br/><span class=\"co1\">%</span><br/>catamorphism <span class=\"sy1\">:-</span><br/>\tnumlist<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">10</span><span class=\"sy4\">,</span>L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tfoldl<span class=\"br0\">(</span>\\XS^YS^ZS^<span class=\"br0\">(</span>ZS <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> XS<span class=\"sy3\">+</span>YS<span class=\"br0\">)</span><span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> Sum<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'Sum of ~w is ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>L<span class=\"sy4\">,</span> Sum<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tfoldl<span class=\"br0\">(</span>\\XP^YP^ZP^<span class=\"br0\">(</span>ZP <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> XP<span class=\"sy3\">*</span>YP<span class=\"br0\">)</span><span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> Prod<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'Prod of ~w is ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>L<span class=\"sy4\">,</span> Prod<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tstring_to_list<span class=\"br0\">(</span>LV<span class=\"sy4\">,</span> \"\"<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tfoldl<span class=\"br0\">(</span>\\XC^YC^ZC^<span class=\"br0\">(</span>string_to_atom<span class=\"br0\">(</span>XS<span class=\"sy4\">,</span> XC<span class=\"br0\">)</span><span class=\"sy4\">,</span>string_concat<span class=\"br0\">(</span>YC<span class=\"sy4\">,</span>XS<span class=\"sy4\">,</span>ZC<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t      L<span class=\"sy4\">,</span> LV<span class=\"sy4\">,</span> Concat<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'Concat of ~w is ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>L<span class=\"sy4\">,</span> Concat<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "Python", "loc": 19, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"co1\"># Python 2.X</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">from</span> <span class=\"kw3\">operator</span> <span class=\"kw1\">import</span> add<br/><span class=\"sy0\">&gt;&gt;&gt;</span> listoflists <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">'the'</span><span class=\"sy0\">,</span> <span class=\"st0\">'cat'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">'sat'</span><span class=\"sy0\">,</span> <span class=\"st0\">'on'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">'the'</span><span class=\"sy0\">,</span> <span class=\"st0\">'mat'</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw2\">help</span><span class=\"br0\">(</span><span class=\"kw2\">reduce</span><span class=\"br0\">)</span><br/>Help on built-<span class=\"kw1\">in</span> function <span class=\"kw2\">reduce</span> <span class=\"kw1\">in</span> module <span class=\"kw3\">__builtin__</span>:<br/>\u00a0<br/><span class=\"kw2\">reduce</span><span class=\"br0\">(</span>...<span class=\"br0\">)</span><br/>    <span class=\"kw2\">reduce</span><span class=\"br0\">(</span>function<span class=\"sy0\">,</span> sequence<span class=\"br0\">[</span><span class=\"sy0\">,</span> initial<span class=\"br0\">]</span><span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> value<br/>\u00a0<br/>    Apply a function of two arguments cumulatively to the items of a sequence<span class=\"sy0\">,</span><br/>    <span class=\"kw1\">from</span> left to right<span class=\"sy0\">,</span> so <span class=\"kw1\">as</span> to <span class=\"kw2\">reduce</span> the sequence to a single value.<br/>    <span class=\"me1\">For</span> example<span class=\"sy0\">,</span> <span class=\"kw2\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">lambda</span> x<span class=\"sy0\">,</span> y: x+y<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span> calculates<br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>+<span class=\"nu0\">2</span><span class=\"br0\">)</span>+<span class=\"nu0\">3</span><span class=\"br0\">)</span>+<span class=\"nu0\">4</span><span class=\"br0\">)</span>+<span class=\"nu0\">5</span><span class=\"br0\">)</span>.  <span class=\"me1\">If</span> initial <span class=\"kw1\">is</span> present<span class=\"sy0\">,</span> it <span class=\"kw1\">is</span> placed before the items<br/>    of the sequence <span class=\"kw1\">in</span> the calculation<span class=\"sy0\">,</span> <span class=\"kw1\">and</span> serves <span class=\"kw1\">as</span> a default when the<br/>    sequence <span class=\"kw1\">is</span> empty.<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw2\">reduce</span><span class=\"br0\">(</span>add<span class=\"sy0\">,</span> listoflists<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">[</span><span class=\"st0\">'the'</span><span class=\"sy0\">,</span> <span class=\"st0\">'cat'</span><span class=\"sy0\">,</span> <span class=\"st0\">'sat'</span><span class=\"sy0\">,</span> <span class=\"st0\">'on'</span><span class=\"sy0\">,</span> <span class=\"st0\">'the'</span><span class=\"sy0\">,</span> <span class=\"st0\">'mat'</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "R", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Reduce('+', c(2,30,400,5000))<br/>5432<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (fold f xs init)<br/>  (if (empty? xs)<br/>      init<br/>      (f (first xs)<br/>         (fold f (rest xs) init))))<br/>\u00a0<br/>(fold + '(1 2 3) 0)  \u00a0; the result is 6<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 36, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program demonstrates a  method  for  catamorphism  for some simple functions.    */</span><br/>@list= <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span><br/>                                <span class=\"kw1\">say</span> <span class=\"st0\">'list:'</span>     fold<span class=\"br0\">(</span>@list,  <span class=\"st0\">\"list\"</span><span class=\"br0\">)</span><br/>                                <span class=\"kw1\">say</span> <span class=\"st0\">' sum:'</span>     fold<span class=\"br0\">(</span>@list,  <span class=\"st0\">\"+\"</span>   <span class=\"br0\">)</span><br/>                                <span class=\"kw1\">say</span> <span class=\"st0\">'prod:'</span>     fold<span class=\"br0\">(</span>@list,  <span class=\"st0\">\"*\"</span>   <span class=\"br0\">)</span><br/>                                <span class=\"kw1\">say</span> <span class=\"st0\">' cat:'</span>     fold<span class=\"br0\">(</span>@list,  <span class=\"st0\">\"||\"</span>  <span class=\"br0\">)</span><br/>                                <span class=\"kw1\">say</span> <span class=\"st0\">' min:'</span>     fold<span class=\"br0\">(</span>@list,  <span class=\"st0\">\"min\"</span> <span class=\"br0\">)</span><br/>                                <span class=\"kw1\">say</span> <span class=\"st0\">' max:'</span>     fold<span class=\"br0\">(</span>@list,  <span class=\"st0\">\"max\"</span> <span class=\"br0\">)</span><br/>                                <span class=\"kw1\">say</span> <span class=\"st0\">' avg:'</span>     fold<span class=\"br0\">(</span>@list,  <span class=\"st0\">\"avg\"</span> <span class=\"br0\">)</span><br/>                                <span class=\"kw1\">say</span> <span class=\"st0\">' GCD:'</span>     fold<span class=\"br0\">(</span>@list,  <span class=\"st0\">\"GCD\"</span> <span class=\"br0\">)</span><br/>                                <span class=\"kw1\">say</span> <span class=\"st0\">' LCM:'</span>     fold<span class=\"br0\">(</span>@list,  <span class=\"st0\">\"LCM\"</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>fold: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> z;  <span class=\"kw1\">arg</span> ,f;         z=<span class=\"kw6\">space</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span>;         BIFs=<span class=\"st0\">'MIN MAX LCM GCD'</span><br/>      za=<span class=\"kw6\">translate</span><span class=\"br0\">(</span>z, f, <span class=\"st0\">' '</span><span class=\"br0\">)</span>;                  zf=f<span class=\"st0\">\"(\"</span><span class=\"kw6\">translate</span><span class=\"br0\">(</span>z, <span class=\"st0\">','</span> , <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"st0\">')'</span><br/>      <span class=\"kw1\">if</span> f==<span class=\"st0\">'+'</span> <span class=\"sy0\">|</span> f==<span class=\"st0\">\"*\"</span>        <span class=\"kw3\">then</span> <span class=\"kw1\">interpret</span>  <span class=\"st0\">\"return\"</span>  za<br/>      <span class=\"kw1\">if</span> f==<span class=\"st0\">'||'</span>                <span class=\"kw3\">then</span> <span class=\"kw1\">return</span>  <span class=\"kw6\">space</span><span class=\"br0\">(</span>z, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> f==<span class=\"st0\">'AVG'</span>               <span class=\"kw3\">then</span> <span class=\"kw1\">interpret</span>  <span class=\"st0\">\"return\"</span>  fold<span class=\"br0\">(</span>z, <span class=\"st0\">'+'</span><span class=\"br0\">)</span>    <span class=\"st0\">\"/\"</span>    <span class=\"kw6\">words</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>f, BIFs<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">interpret</span>  <span class=\"st0\">\"return\"</span>  zf<br/>      <span class=\"kw1\">if</span> f==<span class=\"st0\">'LIST'</span> <span class=\"sy0\">|</span> f==<span class=\"st0\">\"SHOW\"</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> z<br/>      <span class=\"kw1\">return</span> <span class=\"st0\">'illegal function:'</span>     <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>GCD:  <span class=\"kw1\">procedure</span>;  $=;                           <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;  $=$ <span class=\"kw1\">arg</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span>;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*j*/</span><br/>      <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> $ x z <span class=\"sy0\">.</span>;   <span class=\"kw1\">if</span> x=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> x=z            <span class=\"coMULTI\">/* [\u2191] build a list of arguments.*/</span><br/>      x=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                       <span class=\"kw1\">do</span> k=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>;     y=<span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>$, k<span class=\"br0\">)</span><span class=\"br0\">)</span>;   <span class=\"kw1\">if</span> y=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>                         <span class=\"kw1\">do</span> <span class=\"kw2\">until</span> _=<span class=\"nu0\">0</span>;    _=x<span class=\"sy0\">//</span>y;   x=y;   y=_;   <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*until*/</span><br/>                       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>      <span class=\"kw1\">return</span> x<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>LCM:  <span class=\"kw1\">procedure</span>;  $=;                           <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;  $=$ <span class=\"kw1\">arg</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span>;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*j*/</span><br/>      x=<span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>$, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                                <span class=\"coMULTI\">/* [\u2191] build a list of arguments.*/</span><br/>                        <span class=\"kw1\">do</span> k=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>;   \u00a0!=<span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>$, k<span class=\"br0\">)</span><span class=\"br0\">)</span>;  <span class=\"kw1\">if</span>\u00a0!=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>                        x=x<span class=\"sy0\">*</span>! <span class=\"sy0\">/</span> GCD<span class=\"br0\">(</span>x,\u00a0!<span class=\"br0\">)</span>              <span class=\"coMULTI\">/*have  GCD do the heavy lifting.*/</span><br/>                        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>      <span class=\"kw1\">return</span> x</pre>"}, {"lang": "Ring", "loc": 36, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>n = list(10)<br/>for i = 1 to 10<br/>    n[i] = i<br/>next <br/>\u00a0<br/>see \"  +: \" + cat(10,\"+\") + nl+<br/>    \"  -: \" + cat(10,\"-\") + nl +<br/>    \"  *: \" + cat(10,\"*\") + nl +<br/>    \"  /: \" + cat(10,\"/\") + nl+<br/>    \"  ^: \" + cat(10,\"^\") + nl +<br/>    \"min: \" + cat(10,\"min\") + nl+<br/>    \"max: \" + cat(10,\"max\") + nl+<br/>    \"avg: \" + cat(10,\"avg\") + nl +<br/>    \"cat: \" + cat(10,\"cat\") + nl<br/>\u00a0<br/>func cat count,op<br/>     cat = n[1]<br/>     cat2 = \"\"<br/>     for i = 2 to count <br/>         switch op <br/>                on \"+\" cat +=  n[i] <br/>                on \"-\"  cat -=  n[i]<br/>                on \"*\" cat *=  n[i]<br/>                on \"/\" cat /=  n[i]<br/>                on \"^\" cat ^=  n[i]<br/>                on \"max\" cat = max(cat,n[i])<br/>                on \"min\" cat = min(cat,n[i])<br/>                on \"avg\" cat +=  n[i]<br/>                on \"cat\" cat2 += string(n[i])<br/>          off<br/>     next <br/>if op = \"avg\"  cat = cat / count ok<br/>if op = \"cat\"  decimals(0) cat = string(n[1])+cat2 ok<br/>return cat<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 5, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># sum:</span><br/><span class=\"kw3\">p</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span>:<span class=\"sy0\">+</span><span class=\"br0\">)</span><br/><span class=\"co1\"># smallest number divisible by all numbers from 1 to 20:</span><br/><span class=\"kw3\">p</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">20</span><span class=\"br0\">)</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"re3\">:lcm</span><span class=\"br0\">)</span> <span class=\"co1\">#lcm: lowest common multiple</span><br/>\u00a0</pre>"}, {"lang": "Run BASIC", "loc": 28, "block": "<pre class=\"text highlighted_source\">for i = 1 to 10\u00a0:n(i) = i:next i<br/>\u00a0<br/>print \"  +: \";\" \";cat(10,\"+\")<br/>print \"  -: \";\" \";cat(10,\"-\")<br/>print \"  *: \";\" \";cat(10,\"*\")<br/>print \"  /: \";\" \";cat(10,\"/\")<br/>print \"  ^: \";\" \";cat(10,\"^\")<br/>print \"min: \";\" \";cat(10,\"min\")<br/>print \"max: \";\" \";cat(10,\"max\")<br/>print \"avg: \";\" \";cat(10,\"avg\")<br/>print \"cat: \";\" \";cat(10,\"cat\")<br/>\u00a0<br/>function cat(count,op$)<br/>cat = n(1)<br/>for i = 2 to count <br/> if op$ = \"+\" \tthen cat = cat + n(i)<br/> if op$ = \"-\" \tthen cat = cat - n(i)<br/> if op$ = \"*\" \tthen cat = cat * n(i) <br/> if op$ = \"/\" \tthen cat = cat / n(i)<br/> if op$ = \"^\" \tthen cat = cat ^ n(i)<br/> if op$ = \"max\"\tthen cat = max(cat,n(i))<br/> if op$ = \"min\"\tthen cat = min(cat,n(i))<br/> if op$ = \"avg\"\tthen cat = cat + n(i)<br/> if op$ = \"cat\"\tthen cat$ = cat$ + str$(n(i))<br/>next i<br/>if op$ = \"avg\" then cat = cat / count<br/>if op$ = \"cat\" then cat = val(str$(n(1))+cat$)<br/>end function</pre>"}, {"lang": "Rust", "loc": 7, "block": "<pre class=\"text highlighted_source\">fn main() {<br/>    println!(\"Sum: {}\", (1..10).fold(0, |acc, n| acc + n));<br/>    println!(\"Product: {}\", (1..10).fold(1, |acc, n| acc * n));<br/>    let chars = ['a', 'b', 'c', 'd', 'e'];<br/>    println!(\"Concatenation: {}\",<br/>             chars.iter().map(|&amp;c| (c as u8 + 1) as char).collect::&lt;String&gt;());<br/>}</pre>"}, {"lang": "Scala", "loc": 9, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Main <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> Seq<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Array      \u00a0: ${a.mkString(\"</span>, <span class=\"st0\">\")}\"</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Sum        \u00a0: ${a.sum}\"</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Difference \u00a0: ${a.reduce { (x, y) =&gt; x - y }}\"</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Product    \u00a0: ${a.product}\"</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Minimum    \u00a0: ${a.min}\"</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Maximum    \u00a0: ${a.max}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 7, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>reduce fn init lst<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>val init <span class=\"br0\">(</span>fn <span class=\"br0\">(</span><span class=\"kw1\">car</span> rem<span class=\"br0\">)</span> val<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; accumulated value passed as second argument</span><br/>       <span class=\"br0\">(</span>rem lst <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> rem<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> rem<span class=\"br0\">)</span> val<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>reduce <span class=\"sy0\">+</span> <span class=\"nu0\">0</span> '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span> <span class=\"co1\">; =&gt; 15</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>reduce <span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> '<span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span>    <span class=\"co1\">; =&gt; 262144</span></pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">say <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">10</span> <span class=\"sy0\">-&gt;</span> reduce<span class=\"br0\">(</span><span class=\"st0\">'+'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>say <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">10</span> <span class=\"sy0\">-&gt;</span> reduce<span class=\"br0\">{</span><span class=\"sy0\">|</span>a,b<span class=\"sy0\">|</span> a <span class=\"sy0\">+</span> b<span class=\"br0\">}</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Standard ML", "loc": 6, "block": "<pre class=\"text highlighted_source\">- val nums = [1,2,3,4,5,6,7,8,9,10];<br/>val nums = [1,2,3,4,5,6,7,8,9,10]\u00a0: int list<br/>- val sum = foldl op+ 0 nums;<br/>val sum = 55\u00a0: int<br/>- val product = foldl op* 1 nums;<br/>val product = 3628800\u00a0: int</pre>"}, {"lang": "Swift", "loc": 5, "block": "<pre class=\"text highlighted_source\">let nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<br/>\u00a0<br/>print(nums.reduce(0, +))<br/>print(nums.reduce(1, *))<br/>print(nums.reduce(\"\", { $0 + String($1) }))</pre>"}, {"lang": "Tcl", "loc": 7, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> fold <span class=\"br0\">{</span>lambda zero <span class=\"kw2\">list</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> accumulator <span class=\"re0\">$zero</span><br/>    <span class=\"kw1\">foreach</span> item <span class=\"re0\">$list</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> accumulator <span class=\"br0\">[</span>apply <span class=\"re0\">$lambda</span> <span class=\"re0\">$accumulator</span> <span class=\"re0\">$item</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$accumulator</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Wortel", "loc": 1, "block": "<pre class=\"text highlighted_source\">!/ ^+ [1 2 3]\u00a0; returns 6</pre>"}, {"lang": "zkl", "loc": 3, "block": "<pre class=\"text highlighted_source\">T(\"foo\",\"bar\").reduce(fcn(p,n){p+n}) //--&gt; \"foobar\"<br/>\"123four5\".reduce(fcn(p,c){p+(c.matches(\"[0-9]\") and c or 0)}, 0) //--&gt;11<br/>File(\"foo.zkl\").reduce('+(1).fpM(\"0-\"),0) //-&gt;5 (lines in file)</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 15, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">DIM</span> a<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">5</span><br/><span class=\"nu0\">30</span> READ a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">50</span> DATA <span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">LET</span> o$=<span class=\"st0\">\"+\"</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span>: <span class=\"kw1\">PRINT</span> tmp<br/><span class=\"nu0\">70</span> <span class=\"kw1\">LET</span> o$=<span class=\"st0\">\"-\"</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span>: <span class=\"kw1\">PRINT</span> tmp<br/><span class=\"nu0\">80</span> <span class=\"kw1\">LET</span> o$=<span class=\"st0\">\"*\"</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span>: <span class=\"kw1\">PRINT</span> tmp<br/><span class=\"nu0\">90</span> STOP <br/><span class=\"nu0\">1000</span> <span class=\"co3\">REM Reduce</span><br/><span class=\"nu0\">1010</span> <span class=\"kw1\">LET</span> tmp=a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"nu0\">1020</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">5</span><br/><span class=\"nu0\">1030</span> <span class=\"kw1\">LET</span> tmp=<span class=\"kw3\">VAL</span> <span class=\"br0\">(</span><span class=\"st0\">\"tmp\"</span>+o$+<span class=\"st0\">\"a(i)\"</span><span class=\"br0\">)</span><br/><span class=\"nu0\">1040</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">1050</span> <span class=\"kw1\">RETURN</span> </pre>"}]}