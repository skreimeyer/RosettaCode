{"task": "Superpermutation_minimisation", "blocks": [{"lang": "C", "loc": 58, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define MAX 12</span><br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>super <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> pos<span class=\"sy0\">,</span> cnt<span class=\"br0\">[</span>MAX<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// 1! + 2! + ... + n!</span><br/><span class=\"kw4\">int</span> fact_sum<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> s<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> f<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> f <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> f <span class=\"sy0\">*=</span> <span class=\"sy0\">++</span>x<span class=\"sy0\">,</span> s <span class=\"sy0\">+=</span> f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> s<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> r<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>n<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">char</span> c <span class=\"sy0\">=</span> super<span class=\"br0\">[</span>pos <span class=\"sy0\">-</span> n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!--</span>cnt<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tcnt<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>r<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\tsuper<span class=\"br0\">[</span>pos<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> superperm<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> len<span class=\"sy0\">;</span><br/>\u00a0<br/>\tpos <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>\tlen <span class=\"sy0\">=</span> fact_sum<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tsuper <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span>super<span class=\"sy0\">,</span> len <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tsuper<span class=\"br0\">[</span>len<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> cnt<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> super<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"st0\">'0'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>r<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> n<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span> MAX<span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"superperm(%2d) \"</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tsuperperm<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"len =\u00a0%d\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>super<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"co1\">// uncomment next line to see the string itself</span><br/>\t\t<span class=\"co1\">// printf(\":\u00a0%s\", super);</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 45, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">ascii</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> core.<span class=\"me1\">memory</span><span class=\"sy0\">,</span> permutations2<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co3\">/** Uses greedy algorithm of adding another char (or two, or three, ...)<br/>until an unseen perm is formed in the last n chars. */</span><br/><span class=\"kw4\">string</span> superpermutation<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> n<span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span><br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> n <span class=\"sy0\">&lt;</span> uppercase.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">out</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// It's a superpermutation.</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>uppercase<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span><span class=\"br0\">]</span>.<span class=\"me1\">dup</span>.<span class=\"me1\">permutations</span>.<span class=\"me1\">all</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> result.<span class=\"me1\">canFind</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">string</span> result <span class=\"sy0\">=</span> uppercase<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span><span class=\"br0\">[</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span> toFind<span class=\"sy0\">;</span><br/>    GC.<span class=\"me1\">disable</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> perm<span class=\"sy0\">;</span> result.<span class=\"me1\">dup</span>.<span class=\"me1\">permutations</span><span class=\"br0\">)</span><br/>        toFind<span class=\"br0\">[</span>perm<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    GC.<span class=\"me1\">enable</span><span class=\"sy0\">;</span><br/>    toFind.<span class=\"me1\">remove</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> trialPerm <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> auxAdd <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>toFind.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        MIDDLE<span class=\"sy0\">:</span> <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> skip<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            auxAdd<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">skip</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> result<span class=\"br0\">[</span>$ <span class=\"sy0\">-</span> n <span class=\"sy0\">..</span> $ <span class=\"sy0\">-</span> n <span class=\"sy0\">+</span> skip<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> trialAdd<span class=\"sy0\">;</span> auxAdd<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">skip</span><span class=\"br0\">]</span>.<span class=\"me1\">permutations</span><span class=\"sy0\">!</span><span class=\"kw2\">false</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                trialPerm<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span> <span class=\"sy0\">-</span> skip<span class=\"br0\">]</span> <span class=\"sy0\">=</span> result<span class=\"br0\">[</span>$ <span class=\"sy0\">+</span> skip <span class=\"sy0\">-</span> n <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                trialPerm<span class=\"br0\">[</span>n <span class=\"sy0\">-</span> skip <span class=\"sy0\">..</span> $<span class=\"br0\">]</span> <span class=\"sy0\">=</span> trialAdd<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>trialPerm <span class=\"kw2\">in</span> toFind<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    result <span class=\"sy0\">~=</span> trialAdd<span class=\"sy0\">;</span><br/>                    toFind.<span class=\"me1\">remove</span><span class=\"br0\">(</span>trialPerm<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">break</span> MIDDLE<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> n<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>        n.<span class=\"me1\">superpermutation</span>.<span class=\"me1\">length</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 23, "block": "<pre class=\"text highlighted_source\">defmodule Superpermutation do<br/>  def minimisation(1), do: [1]<br/>  def minimisation(n) do<br/>    Enum.chunk(minimisation(n-1), n-1, 1)<br/>    |&gt; Enum.reduce({[],nil}, fn sub,{acc,last} -&gt;<br/>      if Enum.uniq(sub) == sub do<br/>        i = if acc==[], do: 0, else: Enum.find_index(sub, &amp;(&amp;1==last)) + 1<br/>        {acc ++ (Enum.drop(sub,i) ++ [n] ++ sub), List.last(sub)}<br/>      else<br/>        {acc, last}<br/>      end<br/>    end)<br/>    |&gt; elem(0)<br/>  end<br/>end<br/>\u00a0<br/>to_s = fn list -&gt; Enum.map_join(list, &amp;Integer.to_string(&amp;1,16)) end<br/>Enum.each(1..8, fn n -&gt;<br/>  result = Superpermutation.minimisation(n)<br/> \u00a0:io.format \"~3w: len =~8w\u00a0: \", [n, length(result)]<br/>  IO.puts if n&lt;5, do: Enum.join(result),<br/>                else: to_s.(Enum.take(result,20)) &lt;&gt; \"....\" &lt;&gt; to_s.(Enum.slice(result,-20..-1))<br/>end)</pre>"}, {"lang": "FreeBASIC", "loc": 79, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 28-06-2018</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> superpermsize<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> x, y, sum, fac<br/>    <span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>        fac = <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">For</span> y = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> x<br/>            fac *= y<br/>        <span class=\"kw1\">Next</span><br/>        sum += fac<br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">Function</span> = sum<br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> superperm<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> n = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"st0\">\"1\"</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> sup_perm = <span class=\"st0\">\"1\"</span>, insert<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> p, q<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> a, b, i, l, x<br/>\u00a0<br/>    <span class=\"kw1\">For</span> x = <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> n<br/>        insert = <span class=\"kw1\">IIf</span><span class=\"br0\">(</span>x &lt; <span class=\"nu0\">10</span>, <span class=\"kw1\">Str</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>, <span class=\"kw1\">Chr</span><span class=\"br0\">(</span>x + <span class=\"nu0\">55</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        l = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>sup_perm<span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> l &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> l = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>sup_perm<span class=\"br0\">)</span> - x +<span class=\"nu0\">2</span><br/>        <span class=\"kw1\">ReDim</span> q<span class=\"br0\">(</span>l<span class=\"br0\">)</span><br/>        <span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> l<br/>            p = <span class=\"kw1\">Mid</span><span class=\"br0\">(</span>sup_perm, i, x -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">If</span> x &gt; <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span><br/>            <span class=\"kw1\">For</span> a = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> -<span class=\"nu0\">2</span><br/>                <span class=\"kw1\">For</span> b = a+<span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> -<span class=\"nu0\">1</span><br/>                    <span class=\"kw1\">If</span> p<span class=\"br0\">[</span>a<span class=\"br0\">]</span> = p<span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span>, <span class=\"kw1\">For</span>, <span class=\"kw1\">For</span><br/>                <span class=\"kw1\">Next</span><br/>            <span class=\"kw1\">Next</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>            q<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = p + insert + p<br/>        <span class=\"kw1\">Next</span><br/>        sup_perm = q<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">For</span> i = <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>q<span class=\"br0\">)</span><br/>            a = x -<span class=\"nu0\">1</span><br/>            <span class=\"kw1\">Do</span><br/>                <span class=\"kw1\">If</span> <span class=\"kw1\">Right</span><span class=\"br0\">(</span>sup_perm, a<span class=\"br0\">)</span> = <span class=\"kw1\">Left</span><span class=\"br0\">(</span>q<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, a<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>                    sup_perm += <span class=\"kw1\">Mid</span><span class=\"br0\">(</span>q<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, a +<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span><br/>                <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>                a -= <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">Loop</span><br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">Function</span> = sup_perm<br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> superpermutation<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> n<br/>\u00a0<br/><span class=\"kw1\">For</span> n = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">10</span><br/>    superpermutation = superperm<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"### ######## ########   \"</span>; n; superpermsize<span class=\"br0\">(</span>n<span class=\"br0\">)</span>; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>superpermutation<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">5</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">Print</span> superpermutation<br/>    <span class=\"kw1\">Else</span><br/>        <span class=\"kw1\">Print</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 62, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">const</span> max <span class=\"sy2\">=</span> <span class=\"nu0\">12</span><br/>\u00a0<br/><span class=\"kw1\">var</span> <span class=\"sy1\">(</span><br/>    super <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><br/>    pos   <span class=\"kw4\">int</span><br/>    cnt   <span class=\"sy1\">[</span>max<span class=\"sy1\">]</span><span class=\"kw4\">int</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// 1! + 2! + ... + n!</span><br/><span class=\"kw4\">func</span> factSum<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    s <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> x<span class=\"sy1\">,</span> f <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> x &lt; n<span class=\"sy1\">;</span> <span class=\"sy1\">{</span><br/>        x<span class=\"sy2\">++</span><br/>        f <span class=\"sy2\">*=</span> x<br/>        s <span class=\"sy2\">+=</span> f<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> r<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>    <span class=\"sy1\">}</span><br/>    c <span class=\"sy2\">:=</span> super<span class=\"sy1\">[</span>pos<span class=\"sy3\">-</span>n<span class=\"sy1\">]</span><br/>    cnt<span class=\"sy1\">[</span>n<span class=\"sy1\">]</span><span class=\"sy2\">--</span><br/>    <span class=\"kw1\">if</span> cnt<span class=\"sy1\">[</span>n<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        cnt<span class=\"sy1\">[</span>n<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> n<br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>r<span class=\"sy1\">(</span>n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    super<span class=\"sy1\">[</span>pos<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> c<br/>    pos<span class=\"sy2\">++</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> superperm<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    pos <span class=\"sy2\">=</span> n<br/>    le <span class=\"sy2\">:=</span> factSum<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>    super <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> le<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        cnt<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu2\">i</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        super<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"st0\">'0'</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> r<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> n &lt; max<span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"superperm(%2d) \"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>        superperm<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"len =\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>super<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "J", "loc": 18, "block": "<pre class=\"j highlighted_source\">approxmin=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  seqs=. <span class=\"kw2\">y</span>{~<span class=\"sy0\">(</span>A.&amp;i.~\u00a0!<span class=\"sy0\">)</span>#<span class=\"kw2\">y</span><br/>  r=.{.seqs<br/>  seqs=.}.seqs<br/>  <span class=\"kw1\">while.</span>#seqs <span class=\"kw1\">do.</span><br/>    <span class=\"re0\">for_n.</span> i.-#<span class=\"kw2\">y</span> <span class=\"kw1\">do.</span><br/>      tail=. <span class=\"sy0\">(</span>-<span class=\"kw2\">n</span><span class=\"sy0\">)</span>{. r<br/>      b=. tail -:\"<span class=\"nu0\">1</span> <span class=\"kw2\">n</span>{.\"<span class=\"nu0\">1</span> seqs<br/>      <span class=\"kw1\">if.</span> <span class=\"nu0\">1</span> e.b <span class=\"kw1\">do.</span><br/>        j=. b i.<span class=\"nu0\">1</span><br/>        r=. r, <span class=\"kw2\">n</span>}.j{seqs<br/>        seqs=. <span class=\"sy0\">(</span>&lt;&lt;&lt;j<span class=\"sy0\">)</span> { seqs<br/>        <span class=\"kw1\">break.</span><br/>      <span class=\"kw1\">end.</span><br/>    <span class=\"kw1\">end.</span><br/>  <span class=\"kw1\">end.</span><br/>  r<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 51, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">util</span>.<span class=\"me1\">stream</span>.<span class=\"me1\">IntStream</span>.<span class=\"me1\">rangeClosed</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Test <span class=\"br0\">{</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> nMax <span class=\"sy0\">=</span> <span class=\"nu0\">12</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> superperm<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> pos<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> count <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>nMax<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> factSum<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> rangeClosed<span class=\"br0\">(</span><span class=\"nu0\">1</span>, n<span class=\"br0\">)</span><br/>                .<span class=\"me1\">map</span><span class=\"br0\">(</span>m <span class=\"sy0\">-&gt;</span> rangeClosed<span class=\"br0\">(</span><span class=\"nu0\">1</span>, m<span class=\"br0\">)</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">*</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> r<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">char</span> c <span class=\"sy0\">=</span> superperm<span class=\"br0\">[</span>pos <span class=\"sy0\">-</span> n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">--</span>count<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            count<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>r<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        superperm<span class=\"br0\">[</span>pos<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> superPerm<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> chars <span class=\"sy0\">=</span> <span class=\"st0\">\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        pos <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>        superperm <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span>factSum<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            count<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            superperm<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> chars.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>r<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span> nMax<span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            superPerm<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"superPerm(%2d) len =\u00a0%d\"</span>, n, superperm.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 45, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> MAX <span class=\"sy0\">=</span> <span class=\"nu0\">12</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sp <span class=\"sy0\">=</span> CharArray<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> count <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>MAX<span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> pos <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>fun factSum<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> f <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>    <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        f <span class=\"sy0\">*=</span> ++x<br/>        s +<span class=\"sy0\">=</span> f<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> s<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun r<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> sp<span class=\"br0\">[</span>pos - n<span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>--count<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        count<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> n<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>r<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <span class=\"br0\">}</span><br/>    sp<span class=\"br0\">[</span>pos++<span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun superPerm<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    pos <span class=\"sy0\">=</span> n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> len <span class=\"sy0\">=</span> factSum<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>len <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> sp <span class=\"sy0\">=</span> CharArray<span class=\"br0\">(</span>len<span class=\"br0\">)</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span> count<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span> sp<span class=\"br0\">[</span>i - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span> + i <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>r<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n in <span class=\"nu0\">0</span> until MAX<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        superPerm<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"superPerm(${\"</span><span class=\"sy0\">%</span>2d<span class=\"st0\">\".format(n)}) len = ${sp.size}\"</span><span class=\"br0\">)</span>       <br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 10, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> ntheory <span class=\"co2\">qw/forperm/</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$len</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$pre</span><span class=\"sy0\">,</span> <span class=\"re0\">$post</span><span class=\"sy0\">,</span> <span class=\"re0\">$t</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  forperm <span class=\"br0\">{</span><br/>    <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span><span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$post</span> <span class=\"sy0\">.=</span> <span class=\"re0\">$t</span>      <span class=\"kw1\">unless</span> <a href=\"http://perldoc.perl.org/functions/index.html\"><span class=\"kw3\">index</span></a><span class=\"br0\">(</span><span class=\"re0\">$post</span> <span class=\"sy0\">,</span><span class=\"re0\">$t</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$pre</span> <span class=\"sy0\">=</span> <span class=\"re0\">$t</span> <span class=\"sy0\">.</span> <span class=\"re0\">$pre</span> <span class=\"kw1\">unless</span> <a href=\"http://perldoc.perl.org/functions/index.html\"><span class=\"kw3\">index</span></a><span class=\"br0\">(</span><span class=\"re0\">$pre</span><span class=\"sy0\">,</span> <span class=\"re0\">$t</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span> <span class=\"re0\">$len</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"%2d:\u00a0%8d\u00a0%8d<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$len</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$pre</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$post</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 9, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">8</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$len</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$pre</span> <span class=\"sy0\">=</span> <span class=\"kw1\">my</span> <span class=\"re0\">$post</span> <span class=\"sy0\">=</span> <span class=\"kw1\">my</span> <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span>  <span class=\"br0\">(</span><span class=\"st_h\">'a'</span><span class=\"sy0\">..</span><span class=\"st_h\">'z'</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"re0\">$len</span><span class=\"br0\">]</span><span class=\"sy0\">.</span>permutations <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@p</span> <span class=\"br0\">{</span><br/>     <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <span class=\"re0\">@p</span><span class=\"sy0\">.</span><a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st_h\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"re0\">$post</span> <span class=\"sy0\">~=</span> <span class=\"re0\">$t</span>        <span class=\"kw1\">unless</span> <a href=\"http://perldoc.perl.org/functions/index.html\"><span class=\"kw3\">index</span></a><span class=\"br0\">(</span><span class=\"re0\">$post</span><span class=\"sy0\">,</span> <span class=\"re0\">$t</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"re0\">$pre</span>   <span class=\"sy0\">=</span> <span class=\"re0\">$t</span> <span class=\"sy0\">~</span> <span class=\"re0\">$pre</span> <span class=\"kw1\">unless</span> <a href=\"http://perldoc.perl.org/functions/index.html\"><span class=\"kw3\">index</span></a><span class=\"br0\">(</span><span class=\"re0\">$pre</span><span class=\"sy0\">,</span>  <span class=\"re0\">$t</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"%1d:\u00a0%8d\u00a0%8d<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$len</span><span class=\"sy0\">,</span> <span class=\"re0\">$pre</span><span class=\"sy0\">.</span>chars<span class=\"sy0\">,</span> <span class=\"re0\">$post</span><span class=\"sy0\">.</span>chars<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Python", "loc": 141, "block": "<pre class=\"python highlighted_source\"><span class=\"st0\">\"Generate a short Superpermutation of n characters A... as a string using various algorithms.\"</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">from</span> <span class=\"kw3\">__future__</span> <span class=\"kw1\">import</span> print_function<span class=\"sy0\">,</span> division<br/>\u00a0<br/><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> permutations<br/><span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> factorial<br/><span class=\"kw1\">import</span> <span class=\"kw3\">string</span><br/><span class=\"kw1\">import</span> <span class=\"kw3\">datetime</span><br/><span class=\"kw1\">import</span> <span class=\"kw3\">gc</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>MAXN <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> s_perm0<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"<br/>    Uses greedy algorithm of adding another char (or two, or three, ...)<br/>    until an unseen perm is formed in the last n chars<br/>    \"\"\"</span><br/>    allchars <span class=\"sy0\">=</span> <span class=\"kw3\">string</span>.<span class=\"me1\">ascii_uppercase</span><span class=\"br0\">[</span>:n<span class=\"br0\">]</span><br/>    allperms <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> permutations<span class=\"br0\">(</span>allchars<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    sp<span class=\"sy0\">,</span> tofind <span class=\"sy0\">=</span> allperms<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span>allperms<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> tofind:<br/>        <span class=\"kw1\">for</span> skip <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">for</span> trial_add <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> permutations<span class=\"br0\">(</span>sp<span class=\"br0\">[</span>-n:<span class=\"br0\">]</span><span class=\"br0\">[</span>:skip<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>                <span class=\"co1\">#print(sp, skip, trial_add)</span><br/>                trial_perm <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sp + trial_add<span class=\"br0\">)</span><span class=\"br0\">[</span>-n:<span class=\"br0\">]</span><br/>                <span class=\"kw1\">if</span> trial_perm <span class=\"kw1\">in</span> tofind:<br/>                    <span class=\"co1\">#print(sp, skip, trial_add)</span><br/>                    sp +<span class=\"sy0\">=</span> trial_add<br/>                    tofind.<span class=\"me1\">discard</span><span class=\"br0\">(</span>trial_perm<span class=\"br0\">)</span><br/>                    trial_add <span class=\"sy0\">=</span> <span class=\"kw2\">None</span>    <span class=\"co1\"># Sentinel</span><br/>                    <span class=\"kw1\">break</span><br/>            <span class=\"kw1\">if</span> trial_add <span class=\"kw1\">is</span> <span class=\"kw2\">None</span>:<br/>                <span class=\"kw1\">break</span><br/>    <span class=\"kw1\">assert</span> <span class=\"kw2\">all</span><span class=\"br0\">(</span>perm <span class=\"kw1\">in</span> sp <span class=\"kw1\">for</span> perm <span class=\"kw1\">in</span> allperms<span class=\"br0\">)</span> <span class=\"co1\"># Check it is a superpermutation</span><br/>    <span class=\"kw1\">return</span> sp<br/>\u00a0<br/><span class=\"kw1\">def</span> s_perm1<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"<br/>    Uses algorithm of concatenating all perms in order if not already part<br/>    of concatenation.<br/>    \"\"\"</span><br/>    allchars <span class=\"sy0\">=</span> <span class=\"kw3\">string</span>.<span class=\"me1\">ascii_uppercase</span><span class=\"br0\">[</span>:n<span class=\"br0\">]</span><br/>    allperms <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>permutations<span class=\"br0\">(</span>allchars<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    perms<span class=\"sy0\">,</span> sp <span class=\"sy0\">=</span> allperms<span class=\"br0\">[</span>::<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><br/>    <span class=\"kw1\">while</span> perms:<br/>        nxt <span class=\"sy0\">=</span> perms.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> nxt <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> sp:<br/>            sp +<span class=\"sy0\">=</span> nxt<br/>    <span class=\"kw1\">assert</span> <span class=\"kw2\">all</span><span class=\"br0\">(</span>perm <span class=\"kw1\">in</span> sp <span class=\"kw1\">for</span> perm <span class=\"kw1\">in</span> allperms<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> sp<br/>\u00a0<br/><span class=\"kw1\">def</span> s_perm2<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"<br/>    Uses algorithm of concatenating all perms in order first-last-nextfirst-<br/>    nextlast... if not already part of concatenation.<br/>    \"\"\"</span><br/>    allchars <span class=\"sy0\">=</span> <span class=\"kw3\">string</span>.<span class=\"me1\">ascii_uppercase</span><span class=\"br0\">[</span>:n<span class=\"br0\">]</span><br/>    allperms <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>permutations<span class=\"br0\">(</span>allchars<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    perms<span class=\"sy0\">,</span> sp <span class=\"sy0\">=</span> allperms<span class=\"br0\">[</span>::<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><br/>    <span class=\"kw1\">while</span> perms:<br/>        nxt <span class=\"sy0\">=</span> perms.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> nxt <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> sp:<br/>            sp +<span class=\"sy0\">=</span> nxt<br/>        <span class=\"kw1\">if</span> perms:<br/>            nxt <span class=\"sy0\">=</span> perms.<span class=\"me1\">pop</span><span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> nxt <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> sp:<br/>                sp +<span class=\"sy0\">=</span> nxt<br/>    <span class=\"kw1\">assert</span> <span class=\"kw2\">all</span><span class=\"br0\">(</span>perm <span class=\"kw1\">in</span> sp <span class=\"kw1\">for</span> perm <span class=\"kw1\">in</span> allperms<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> sp<br/>\u00a0<br/><span class=\"kw1\">def</span> _s_perm3<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"kw2\">cmp</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"<br/>    Uses algorithm of concatenating all perms in order first,<br/>    next_with_LEASTorMOST_chars_in_same_position_as_last_n_chars, ...<br/>    \"\"\"</span><br/>    allchars <span class=\"sy0\">=</span> <span class=\"kw3\">string</span>.<span class=\"me1\">ascii_uppercase</span><span class=\"br0\">[</span>:n<span class=\"br0\">]</span><br/>    allperms <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>permutations<span class=\"br0\">(</span>allchars<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    perms<span class=\"sy0\">,</span> sp <span class=\"sy0\">=</span> allperms<span class=\"br0\">[</span>::<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><br/>    <span class=\"kw1\">while</span> perms:<br/>        lastn <span class=\"sy0\">=</span> sp<span class=\"br0\">[</span>-n:<span class=\"br0\">]</span><br/>        nxt <span class=\"sy0\">=</span> <span class=\"kw2\">cmp</span><span class=\"br0\">(</span>perms<span class=\"sy0\">,</span><br/>                  key<span class=\"sy0\">=</span><span class=\"kw1\">lambda</span> pm:<br/>                    <span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"br0\">(</span>ch1 <span class=\"sy0\">==</span> ch2<span class=\"br0\">)</span> <span class=\"kw1\">for</span> ch1<span class=\"sy0\">,</span> ch2 <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>pm<span class=\"sy0\">,</span> lastn<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        perms.<span class=\"me1\">remove</span><span class=\"br0\">(</span>nxt<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> nxt <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> sp:<br/>            sp +<span class=\"sy0\">=</span> nxt<br/>    <span class=\"kw1\">assert</span> <span class=\"kw2\">all</span><span class=\"br0\">(</span>perm <span class=\"kw1\">in</span> sp <span class=\"kw1\">for</span> perm <span class=\"kw1\">in</span> allperms<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> sp<br/>\u00a0<br/><span class=\"kw1\">def</span> s_perm3_max<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"<br/>    Uses algorithm of concatenating all perms in order first,<br/>    next_with_MOST_chars_in_same_position_as_last_n_chars, ...<br/>    \"\"\"</span><br/>    <span class=\"kw1\">return</span> _s_perm3<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"kw2\">max</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> s_perm3_min<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"<br/>    Uses algorithm of concatenating all perms in order first,<br/>    next_with_LEAST_chars_in_same_position_as_last_n_chars, ...<br/>    \"\"\"</span><br/>    <span class=\"kw1\">return</span> _s_perm3<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"kw2\">min</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>longest <span class=\"sy0\">=</span> <span class=\"br0\">[</span>factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span> * n <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>MAXN + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>weight<span class=\"sy0\">,</span> runtime <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>__doc__<span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> algo <span class=\"kw1\">in</span> <span class=\"br0\">[</span>s_perm0<span class=\"sy0\">,</span> s_perm1<span class=\"sy0\">,</span> s_perm2<span class=\"sy0\">,</span> s_perm3_max<span class=\"sy0\">,</span> s_perm3_min<span class=\"br0\">]</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>###<span class=\"es0\">\\n</span>###\u00a0%s<span class=\"es0\">\\n</span>###'</span>\u00a0% algo.__name__<span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>algo.__doc__<span class=\"br0\">)</span><br/>    weight<span class=\"br0\">[</span>algo.__name__<span class=\"br0\">]</span><span class=\"sy0\">,</span> runtime<span class=\"br0\">[</span>algo.__name__<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw3\">datetime</span>.<span class=\"me1\">timedelta</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> MAXN + <span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw3\">gc</span>.<span class=\"me1\">collect</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">gc</span>.<span class=\"me1\">disable</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        t <span class=\"sy0\">=</span> <span class=\"kw3\">datetime</span>.<span class=\"kw3\">datetime</span>.<span class=\"me1\">now</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        sp <span class=\"sy0\">=</span> algo<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        t <span class=\"sy0\">=</span> <span class=\"kw3\">datetime</span>.<span class=\"kw3\">datetime</span>.<span class=\"me1\">now</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - t<br/>        <span class=\"kw3\">gc</span>.<span class=\"me1\">enable</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        runtime<span class=\"br0\">[</span>algo.__name__<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> t<br/>        lensp <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>sp<span class=\"br0\">)</span><br/>        wt <span class=\"sy0\">=</span> <span class=\"br0\">(</span>lensp / longest<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span> ** <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'  For N=%i: SP length\u00a0%5i Max:\u00a0%5i Weight:\u00a0%5.2f'</span><br/>             \u00a0% <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> lensp<span class=\"sy0\">,</span> longest<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">,</span> wt<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        weight<span class=\"br0\">[</span>algo.__name__<span class=\"br0\">]</span> *<span class=\"sy0\">=</span> wt<br/>    weight<span class=\"br0\">[</span>algo.__name__<span class=\"br0\">]</span> **<span class=\"sy0\">=</span> <span class=\"nu0\">1</span> / n  <span class=\"co1\"># Geometric mean</span><br/>    weight<span class=\"br0\">[</span>algo.__name__<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> / weight<span class=\"br0\">[</span>algo.__name__<span class=\"br0\">]</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%*s Overall Weight:\u00a0%5.2f in\u00a0%.1f seconds.'</span><br/>         \u00a0% <span class=\"br0\">(</span><span class=\"nu0\">29</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"sy0\">,</span> weight<span class=\"br0\">[</span>algo.__name__<span class=\"br0\">]</span><span class=\"sy0\">,</span> runtime<span class=\"br0\">[</span>algo.__name__<span class=\"br0\">]</span>.<span class=\"me1\">total_seconds</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>###<span class=\"es0\">\\n</span>### Algorithms ordered by shortest superpermutations first<span class=\"es0\">\\n</span>###'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'%12s (%.3f)'</span>\u00a0% kv <span class=\"kw1\">for</span> kv <span class=\"kw1\">in</span><br/>                <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>weight.<span class=\"me1\">items</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> key<span class=\"sy0\">=</span><span class=\"kw1\">lambda</span> keyvalue: -keyvalue<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>###<span class=\"es0\">\\n</span>### Algorithms ordered by shortest runtime first<span class=\"es0\">\\n</span>###'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'%12s (%.3f)'</span>\u00a0% <span class=\"br0\">(</span>k<span class=\"sy0\">,</span> v.<span class=\"me1\">total_seconds</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw1\">in</span><br/>                <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>runtime.<span class=\"me1\">items</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> key<span class=\"sy0\">=</span><span class=\"kw1\">lambda</span> keyvalue: keyvalue<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 33, "block": "<pre class=\"text highlighted_source\">#lang racket/base<br/>(require racket/list racket/format)<br/>\u00a0<br/>(define (index-of1 x l) (for/first ((i (in-naturals 1)) (m (in-list l)) #:when (equal? m x)) i))<br/>\u00a0<br/>(define (sprprm n)<br/>  (define n-1 (- n 1))<br/>  (define sp:n-1 (superperm n-1))<br/>  (let loop ((subs (let loop ((sp sp:n-1) (i (- (length sp:n-1) n-1 -1)) (rv null))<br/>                     (cond<br/>                       [(zero? i) (reverse rv)]<br/>                       [else<br/>                        (define sub (take sp n-1))<br/>                        (loop (cdr sp)<br/>                              (- i 1)<br/>                              (if (check-duplicates sub) rv (cons sub rv)))])))<br/>             (ary null))<br/>    (if (null? subs)<br/>        ary<br/>        (let ((sub (car subs)))<br/>          (define i (if (null? ary) 0 (index-of1 (last ary) sub)))<br/>          (loop (cdr subs) (append ary (drop sub i) (list n) sub))))))<br/>\u00a0<br/>(define superperm<br/>  (let ((hsh (make-hash (list (cons 1 (list 1))))))<br/>    (lambda (n) (hash-ref! hsh n (lambda () (sprprm n))))))<br/>\u00a0<br/>\u00a0<br/>(define (20..20 ary)<br/>  (if (&lt; (length ary) 41) ary (append (take ary 20) (cons '.. (take-right ary 20)))))<br/>\u00a0<br/>(for* ((n (in-range 1 (add1 8))) (ary (in-value (superperm n))))<br/>  (printf \"~a: len = ~a\u00a0: ~a~%\" (~a n #:width 3) (~a (length ary) #:width 8) (20..20 ary)))</pre>"}, {"lang": "REXX", "loc": 30, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program attempts  to find better  minimizations  for computing superpermutations.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> cycles <span class=\"sy0\">.</span>                               <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> cycles==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> cycles==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> cycles=<span class=\"nu0\">7</span>       <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>\u00a0<br/>      <span class=\"kw1\">do</span> n=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span>  cycles<br/>      #=<span class=\"nu0\">0</span>;                           $<span class=\"sy0\">.</span>=         <span class=\"coMULTI\">/*populate the first permutation.      */</span><br/>              <span class=\"kw1\">do</span> pop=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n;       @<span class=\"sy0\">.</span>pop=<span class=\"kw6\">d2x</span><span class=\"br0\">(</span>pop<span class=\"br0\">)</span>;       $<span class=\"sy0\">.</span>0=$<span class=\"sy0\">.</span>0 <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>pop;  <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*pop*/</span><br/>\u00a0<br/>              <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> aPerm<span class=\"br0\">(</span>n, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>              <span class=\"kw1\">if</span> n<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> #=#+<span class=\"nu0\">1</span>;  $<span class=\"sy0\">.</span>#=;     <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n; $<span class=\"sy0\">.</span>#=$<span class=\"sy0\">.</span># <span class=\"sy0\">||</span> @<span class=\"sy0\">.</span>j; <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*j*/</span><br/>              <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*while*/</span><br/>      z=$<span class=\"sy0\">.</span>0<br/>      nm=n-<span class=\"nu0\">1</span><br/>              <span class=\"kw1\">do</span>\u00a0?=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #;  <span class=\"kw1\">if</span> $<span class=\"sy0\">.</span>j==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>;   <span class=\"kw1\">if</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span>$<span class=\"sy0\">.</span>?, z<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>              <span class=\"kw1\">parse</span>  <span class=\"kw2\">var</span>  $<span class=\"sy0\">.</span>?  h  <span class=\"nu0\">2</span>  R  <span class=\"nu0\">1</span>  L  =<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>              <span class=\"kw1\">if</span>  <span class=\"kw6\">left</span><span class=\"br0\">(</span>z, nm<span class=\"br0\">)</span>==R  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;   z=h <span class=\"sy0\">||</span> z;   <span class=\"kw1\">iterate</span>;   <span class=\"kw3\">end</span><br/>              <span class=\"kw1\">if</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>z,  <span class=\"nu0\">1</span><span class=\"br0\">)</span>==h  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;   z=z <span class=\"sy0\">||</span> R;   <span class=\"kw1\">iterate</span>;   <span class=\"kw3\">end</span><br/>              z=z <span class=\"sy0\">||</span> $<span class=\"sy0\">.</span>?<br/>              <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*?*/</span>                        <span class=\"coMULTI\">/* [\u2191]  more IFs could be added for opt*/</span><br/>\u00a0<br/>       <span class=\"kw1\">say</span> <span class=\"st0\">'length of superpermutation('</span>n<span class=\"st0\">\") =\"</span>  <span class=\"kw6\">length</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><br/>       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*cycle*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>aPerm: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> @<span class=\"sy0\">.</span>;     <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n,i;    nm=n-<span class=\"nu0\">1</span>;  <span class=\"kw1\">if</span> n==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>           <span class=\"kw1\">do</span> k=nm  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> nm; kp=k+<span class=\"nu0\">1</span>; <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>k<span class=\"sy0\">&lt;</span>@<span class=\"sy0\">.</span>kp  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; i=k;<span class=\"kw1\">leave</span>; <span class=\"kw3\">end</span>; <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*k*/</span><br/>           <span class=\"kw1\">do</span> j=i+<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span>  j<span class=\"sy0\">&lt;</span>n;  <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span>  @<span class=\"sy0\">.</span>j @<span class=\"sy0\">.</span>n  <span class=\"kw2\">with</span>  @<span class=\"sy0\">.</span>n @<span class=\"sy0\">.</span>j;    n=n-<span class=\"nu0\">1</span>; <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*j*/</span><br/>       <span class=\"kw1\">if</span> i==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>           <span class=\"kw1\">do</span> m=i+<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> @<span class=\"sy0\">.</span>m<span class=\"sy0\">&lt;</span>@<span class=\"sy0\">.</span>i; <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*m*/</span>;    <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span>  @<span class=\"sy0\">.</span>m  @<span class=\"sy0\">.</span>i   <span class=\"kw2\">with</span>   @<span class=\"sy0\">.</span>i  @<span class=\"sy0\">.</span>m<br/>       <span class=\"kw1\">return</span> <span class=\"nu0\">1</span></pre>"}, {"lang": "Ruby", "loc": 22, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\">#A straight forward implementation of N. Johnston's algorithm. I prefer to look at this as 2n+1 where</span><br/><span class=\"co1\">#the second n is first n reversed, and the 1 is always the second symbol. This algorithm will generate</span><br/><span class=\"co1\">#just the left half of the result by setting l to [1,2] and looping from 3 to 6. For the purpose of</span><br/><span class=\"co1\">#this task I am going to start from an empty array and generate the whole strings using just the </span><br/><span class=\"co1\">#rules.</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\">#Nigel Galloway: December 16th., 2014</span><br/><span class=\"co1\">#</span><br/>l = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">6</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>e<span class=\"sy0\">|</span><br/>  a, i = <span class=\"br0\">[</span><span class=\"br0\">]</span>, e<span class=\"sy0\">-</span><span class=\"nu0\">2</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"me1\">l</span>.<span class=\"me1\">length</span><span class=\"sy0\">-</span>e<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>g<span class=\"sy0\">|</span><br/>     <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span>n = l<span class=\"br0\">[</span>g..<span class=\"me1\">g</span><span class=\"sy0\">+</span>e<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">uniq</span>!<br/>       a.<span class=\"me1\">concat</span><span class=\"br0\">(</span>n<span class=\"br0\">[</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>? i\u00a0: <span class=\"nu0\">0</span><span class=\"br0\">)</span>..<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>       i = e<span class=\"sy0\">-</span><span class=\"nu0\">2</span><br/>     <span class=\"kw1\">else</span><br/>       i <span class=\"sy0\">-</span>= <span class=\"nu0\">1</span><br/>     <span class=\"kw1\">end</span><br/>   <span class=\"br0\">}</span><br/>   a.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> <span class=\"kw3\">print</span> n<span class=\"br0\">}</span>; <span class=\"kw3\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><br/>   l = a<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scala", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> SuperpermutationMinimisation <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nMax <span class=\"sy0\">=</span> <span class=\"nu0\">12</span><br/>\u00a0<br/>  <span class=\"sy0\">@</span>annotation.<span class=\"me1\">tailrec</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> factorial<span class=\"br0\">(</span>number<span class=\"sy0\">:</span> Int, acc<span class=\"sy0\">:</span> Long <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Long <span class=\"sy0\">=</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>number <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> acc <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> factorial<span class=\"br0\">(</span>number - <span class=\"nu0\">1</span>, acc <span class=\"sy0\">*</span> number<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> factSum<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Long <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> to n<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>factorial<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">sum</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until nMax<span class=\"br0\">)</span> println<span class=\"br0\">(</span>f<span class=\"st0\">\"superPerm($n%2d) len = ${factSum(n)}%d\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 9, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">for</span> len <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var <span class=\"br0\">(</span>pre=<span class=\"st0\">\"\"</span>, post=<span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    @^len <span class=\"sy0\">-&gt;</span> permutations <span class=\"br0\">{</span><span class=\"sy0\">|*</span><span class=\"kw3\">p</span><span class=\"sy0\">|</span><br/>        var t = <span class=\"kw3\">p</span>.<span class=\"me1\">join</span><br/>        post.<span class=\"me1\">append</span>!<span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">if</span>\u00a0!post.<span class=\"me1\">contains</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>        pre.<span class=\"me1\">prepend</span>!<span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">if</span>\u00a0!pre.<span class=\"me1\">contains</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%2d:\u00a0%8d\u00a0%8d<span class=\"es0\">\\n</span>\"</span>, len, pre.<span class=\"me1\">len</span>, post.<span class=\"me1\">len</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 36, "block": "<pre class=\"text highlighted_source\">const MAX = 12;<br/>var super=Data(), pos, cnt;  // global state, ick<br/>\u00a0<br/>fcn fact_sum(n){ // --&gt;1! + 2! + ... + n!<br/>   [1..n].reduce(fcn(s,n){ s + [2..n].reduce('*,1) },0)<br/>}<br/>\u00a0<br/>fcn r(n){<br/>   if (not n) return(0);<br/>\u00a0<br/>   c\u00a0:= super[pos - n];<br/>   if (not (cnt[n]-=1)){<br/>      cnt[n] = n;<br/>      if (not r(n-1)) return(0);<br/>   }<br/>   super[pos] = c; pos+=1;<br/>   1<br/>}<br/>\u00a0<br/>fcn superperm(n){<br/>   pos = n;<br/>   len\u00a0:= fact_sum(n);<br/>   super.fill(0,len);  // this is pretty close to recalloc()<br/>\u00a0<br/>   cnt = (n+1).pump(List()); //--&gt;(0,1,2,3,..n)<br/>   foreach i in (n){ super[i] = i + 0x31; } //--&gt;\"1\" ... \"123456789:;\"<br/>   while (r(n)){}<br/>}<br/>\u00a0<br/>foreach n in (MAX){<br/>   superperm(n);<br/>   print(\"superperm(%2d) len =\u00a0%d\".fmt(n,super.len()));<br/>   // uncomment next line to see the string itself<br/>   //print(\":\u00a0%s\".fmt(super.text));<br/>   println();<br/>}</pre>"}]}