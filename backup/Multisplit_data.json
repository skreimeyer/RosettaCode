{"task": "Multisplit", "blocks": [{"lang": "Ada", "loc": 81, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Indefinite_Doubly_Linked_Lists</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Multisplit <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">package</span> String_Lists <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Indefinite_Doubly_Linked_Lists</span><br/>     <span class=\"br0\">(</span>Element_Type =&gt; String<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">use</span> <span class=\"kw3\">type</span> String_Lists.<span class=\"me1\">Cursor</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Split<br/>     <span class=\"br0\">(</span>Source    \u00a0: String;<br/>      Separators\u00a0: String_Lists.<span class=\"me1\">List</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span>       String_Lists.<span class=\"me1\">List</span><br/>   <span class=\"kw1\">is</span><br/>      Result            \u00a0: String_Lists.<span class=\"me1\">List</span>;<br/>      Next_Position     \u00a0: Natural\u00a0:= Source'First;<br/>      Prev_Position     \u00a0: Natural\u00a0:= Source'First;<br/>      Separator_Position\u00a0: String_Lists.<span class=\"me1\">Cursor</span>;<br/>      Separator_Length  \u00a0: Natural;<br/>      Changed           \u00a0: Boolean;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">loop</span><br/>         Changed           \u00a0:= False;<br/>         Separator_Position\u00a0:= Separators.<span class=\"me1\">First</span>;<br/>         <span class=\"kw1\">while</span> Separator_Position /= String_Lists.<span class=\"me1\">No_Element</span> <span class=\"kw1\">loop</span><br/>            Separator_Length\u00a0:=<br/>              String_Lists.<span class=\"me1\">Element</span> <span class=\"br0\">(</span>Separator_Position<span class=\"br0\">)</span>'Length;<br/>            <span class=\"kw1\">if</span> Next_Position + Separator_Length - <span class=\"nu0\">1</span> &lt;= Source'Last<br/>              <span class=\"kw2\">and</span> <span class=\"kw1\">then</span> Source<br/>                <span class=\"br0\">(</span>Next_Position .. <span class=\"me1\">Next_Position</span> + Separator_Length - <span class=\"nu0\">1</span><span class=\"br0\">)</span> =<br/>                String_Lists.<span class=\"me1\">Element</span> <span class=\"br0\">(</span>Separator_Position<span class=\"br0\">)</span><br/>            <span class=\"kw1\">then</span><br/>               <span class=\"kw1\">if</span> Next_Position &gt; Prev_Position <span class=\"kw1\">then</span><br/>                  Result.<span class=\"me1\">Append</span><br/>                    <span class=\"br0\">(</span>Source <span class=\"br0\">(</span>Prev_Position .. <span class=\"me1\">Next_Position</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>               <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>               Result.<span class=\"me1\">Append</span> <span class=\"br0\">(</span>String_Lists.<span class=\"me1\">Element</span> <span class=\"br0\">(</span>Separator_Position<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>               Next_Position\u00a0:= Next_Position + Separator_Length;<br/>               Prev_Position\u00a0:= Next_Position;<br/>               Changed      \u00a0:= True;<br/>               <span class=\"kw3\">exit</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>            Separator_Position\u00a0:= String_Lists.<span class=\"me1\">Next</span> <span class=\"br0\">(</span>Separator_Position<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> Changed <span class=\"kw1\">then</span><br/>            Next_Position\u00a0:= Next_Position + <span class=\"nu0\">1</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">if</span> Next_Position &gt; Source'Last <span class=\"kw1\">then</span><br/>            Result.<span class=\"me1\">Append</span> <span class=\"br0\">(</span>Source <span class=\"br0\">(</span>Prev_Position .. <span class=\"me1\">Source</span>'Last<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw3\">exit</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> Split;<br/>\u00a0<br/>   Test_Input     \u00a0: <span class=\"kw3\">constant</span> String\u00a0:= <span class=\"st0\">\"a!===b=!=c\"</span>;<br/>   Test_Separators\u00a0: String_Lists.<span class=\"me1\">List</span>;<br/>   Test_Result    \u00a0: String_Lists.<span class=\"me1\">List</span>;<br/>   Pos            \u00a0: String_Lists.<span class=\"me1\">Cursor</span>;<br/><span class=\"kw1\">begin</span><br/>   Test_Separators.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"st0\">\"==\"</span><span class=\"br0\">)</span>;<br/>   Test_Separators.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"st0\">\"!=\"</span><span class=\"br0\">)</span>;<br/>   Test_Separators.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"st0\">\"=\"</span><span class=\"br0\">)</span>;<br/>   Test_Result\u00a0:= Split <span class=\"br0\">(</span>Test_Input, Test_Separators<span class=\"br0\">)</span>;<br/>   Pos        \u00a0:= Test_Result.<span class=\"me1\">First</span>;<br/>   <span class=\"kw1\">while</span> Pos /= String_Lists.<span class=\"me1\">No_Element</span> <span class=\"kw1\">loop</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span><span class=\"st0\">\" \"</span> &amp; String_Lists.<span class=\"me1\">Element</span> <span class=\"br0\">(</span>Pos<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      Pos\u00a0:= String_Lists.<span class=\"me1\">Next</span> <span class=\"br0\">(</span>Pos<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>   <span class=\"co1\">-- other order of separators</span><br/>   Test_Separators.<span class=\"me1\">Clear</span>;<br/>   Test_Separators.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"st0\">\"=\"</span><span class=\"br0\">)</span>;<br/>   Test_Separators.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"st0\">\"!=\"</span><span class=\"br0\">)</span>;<br/>   Test_Separators.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"st0\">\"==\"</span><span class=\"br0\">)</span>;<br/>   Test_Result\u00a0:= Split <span class=\"br0\">(</span>Test_Input, Test_Separators<span class=\"br0\">)</span>;<br/>   Pos        \u00a0:= Test_Result.<span class=\"me1\">First</span>;<br/>   <span class=\"kw1\">while</span> Pos /= String_Lists.<span class=\"me1\">No_Element</span> <span class=\"kw1\">loop</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span><span class=\"st0\">\" \"</span> &amp; String_Lists.<span class=\"me1\">Element</span> <span class=\"br0\">(</span>Pos<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      Pos\u00a0:= String_Lists.<span class=\"me1\">Next</span> <span class=\"br0\">(</span>Pos<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Multisplit;</pre>"}, {"lang": "ALGOL 68", "loc": 66, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># split a string based on a number of separators #</span><br/>\u00a0<br/><span class=\"coMULTI\"># MODE to hold the split results #</span><br/><span class=\"kw4\">MODE</span> SPLITINFO <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> text      <span class=\"coMULTI\"># delimited string, may be empty          #</span><br/>                       <span class=\"sy1\">,</span> <span class=\"kw3\">INT</span>    position  <span class=\"coMULTI\"># starting position of the token          #</span><br/>                       <span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> delimiter <span class=\"coMULTI\"># the delimiter that terminated the token #</span><br/>                       <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># calculates the length of string s #</span><br/><span class=\"kw4\">OP</span>   LENGTH <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> s <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"kw8\">UPB</span> s <span class=\"sy1\">+</span> 1 <span class=\"br0\">)</span> <span class=\"sy1\">-</span> <span class=\"kw8\">LWB</span> s<span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># returns TRUE if s starts with p, FALSE otherwise #</span><br/><span class=\"kw4\">PRIO</span> STARTSWITH <span class=\"sy1\">=</span> 5<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   STARTSWITH <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> s<span class=\"sy1\">,</span> p <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> <span class=\"kw2\">IF</span> LENGTH p <span class=\"sy1\">&gt;</span> LENGTH s <span class=\"kw2\">THEN</span> <span class=\"kw7\">FALSE</span> <span class=\"kw2\">ELSE</span> s<span class=\"br0\">[</span> <span class=\"kw8\">LWB</span> s <span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"kw8\">LWB</span> s <span class=\"sy1\">+</span> LENGTH p <span class=\"br0\">)</span> <span class=\"sy1\">-</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">=</span> p <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># returns an array of SPLITINFO describing the tokens in str based on the delimiters #</span><br/><span class=\"coMULTI\"># zero-length delimiters are ignored #</span><br/><span class=\"kw4\">PRIO</span> SPLIT <span class=\"sy1\">=</span> 5<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   SPLIT <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> str<span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> delimiters <span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span>SPLITINFO<span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>        <span class=\"coMULTI\"># count the number of tokens #</span><br/>        <span class=\"coMULTI\"># allow there to be as many tokens as characters in the string + 2 #</span><br/>        <span class=\"coMULTI\"># that would cater for a string composed of delimiters only        #</span><br/>        <span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"kw8\">UPB</span> str <span class=\"sy1\">+</span> 3 <span class=\"br0\">)</span> <span class=\"sy1\">-</span> <span class=\"kw8\">LWB</span> str <span class=\"br0\">]</span>SPLITINFO tokens<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">INT</span>   token count   <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">INT</span>   str pos       <span class=\"sy1\">:=</span> <span class=\"kw8\">LWB</span> str<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">INT</span>   str max        <span class=\"sy1\">=</span> <span class=\"kw8\">UPB</span> str<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">BOOL</span>  token pending <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>        <span class=\"coMULTI\"># construct the tokens #</span><br/>        str pos       <span class=\"sy1\">:=</span> <span class=\"kw8\">LWB</span> str<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">INT</span> prev pos  <span class=\"sy1\">:=</span> <span class=\"kw8\">LWB</span> str<span class=\"sy1\">;</span><br/>        token count   <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>        token pending <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">WHILE</span> str pos <span class=\"sy1\">&lt;=</span> str max<br/>        <span class=\"kw2\">DO</span><br/>            <span class=\"kw3\">BOOL</span> found delimiter <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>            <span class=\"kw2\">FOR</span> d <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> delimiters <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> delimiters <span class=\"kw2\">WHILE</span> <span class=\"kw8\">NOT</span> found delimiter <span class=\"kw2\">DO</span><br/>                <span class=\"kw2\">IF</span> LENGTH delimiters<span class=\"br0\">[</span> d <span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> 0 <span class=\"kw2\">THEN</span><br/>                    <span class=\"kw2\">IF</span> found delimiter <span class=\"sy1\">:=</span> str<span class=\"br0\">[</span> str pos <span class=\"sy1\">:</span> <span class=\"br0\">]</span> STARTSWITH delimiters<span class=\"br0\">[</span> d <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span><br/>                        token count          <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>                        tokens<span class=\"br0\">[</span> token count <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> str<span class=\"br0\">[</span> prev pos <span class=\"sy1\">:</span> str pos <span class=\"sy1\">-</span> 1 <span class=\"br0\">]</span><span class=\"sy1\">,</span> prev pos<span class=\"sy1\">,</span> delimiters<span class=\"br0\">[</span> d <span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                        str pos              <span class=\"sy1\">+:=</span> LENGTH delimiters<span class=\"br0\">[</span> d <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                        prev pos              <span class=\"sy1\">:=</span> str pos<span class=\"sy1\">;</span><br/>                        token pending         <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><br/>                    <span class=\"kw2\">FI</span><br/>                <span class=\"kw2\">FI</span><br/>            <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>            <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> found delimiter <span class=\"kw2\">THEN</span><br/>                <span class=\"coMULTI\"># the current character is part of s token #</span><br/>                token pending <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">;</span><br/>                str pos      <span class=\"sy1\">+:=</span> 1<br/>            <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> token pending <span class=\"kw2\">THEN</span><br/>            <span class=\"coMULTI\"># there is an additional token after the final delimiter #</span><br/>            token count <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>            tokens<span class=\"br0\">[</span> token count <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> str<span class=\"br0\">[</span> prev pos <span class=\"sy1\">:</span> <span class=\"br0\">]</span><span class=\"sy1\">,</span> prev pos<span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">)</span><br/>        <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        <span class=\"coMULTI\"># return an array of the actual tokens #</span><br/>        tokens<span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> token count <span class=\"br0\">]</span><br/>     <span class=\"kw2\">END</span> <span class=\"coMULTI\"># SPLIT #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\"># test the SPLIT operator #</span><br/><span class=\"br0\">[</span><span class=\"br0\">]</span>SPLITINFO test tokens <span class=\"sy1\">=</span> <span class=\"st0\">\"a!===b=!=c\"</span> SPLIT <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span><span class=\"br0\">(</span> <span class=\"st0\">\"==\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"!=\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"=\"</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> t <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> test tokens <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> test tokens <span class=\"kw2\">DO</span><br/>    SPLITINFO token <span class=\"sy1\">=</span> test tokens<span class=\"br0\">[</span> t <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"token: [\"</span><span class=\"sy1\">,</span>  text <span class=\"kw6\">OF</span> token<span class=\"sy1\">,</span> <span class=\"st0\">\"] at: \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> position <span class=\"kw6\">OF</span> token<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" delimiter: (\"</span><span class=\"sy1\">,</span> delimiter <span class=\"kw6\">OF</span> token<span class=\"sy1\">,</span> <span class=\"st0\">\")\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">OD</span></pre>"}, {"lang": "AutoHotkey", "loc": 9, "block": "<pre class=\"autohotkey highlighted_source\">Str <span class=\"sy0\">:=</span> <span class=\"st0\">\"a!===b=!=c\"</span><br/>Sep <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"==\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"!=\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"=\"</span><span class=\"br0\">]</span><br/>Res <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span>Str<span class=\"sy0\">,</span> Sep<span class=\"br0\">)</span><br/>for k<span class=\"sy0\">,</span> v in Res<br/>\tOut <span class=\"sy0\">.=</span> <span class=\"br0\">(</span>Out?<span class=\"st0\">\",\"</span>:<span class=\"st0\">\"\"</span><span class=\"br0\">)</span>  v <br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% Out<br/>for k<span class=\"sy0\">,</span> v in Sep<br/>\tN <span class=\"sy0\">.=</span> <span class=\"br0\">(</span>N?<span class=\"st0\">\"|\"</span>:<span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"\\Q\"</span> v <span class=\"st0\">\"\\E\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">,</span> <span class=\"st0\">\"(.*?)(\"</span> N <span class=\"st0\">\")\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"$1 {$2}\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "AWK", "loc": 25, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f MULTISPLIT.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    str = <span class=\"st0\">\"a!===b=!=c\"</span><br/>    sep = <span class=\"st0\">\"(==|!=|=)\"</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"str:\u00a0%s<span class=\"es0\">\\n</span>\"</span>,str<span class=\"br0\">)</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"sep:\u00a0%s<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span>,sep<span class=\"br0\">)</span><br/>    n = <span class=\"kw4\">split</span><span class=\"br0\">(</span>str,str_arr,sep,sep_arr<span class=\"br0\">)</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"parsed: \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>n; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"'%s'\"</span>,str_arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i<span class=\"sy2\">&lt;</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\" '%s' \"</span>,sep_arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>strings: \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span>n; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"'%s' \"</span>,str_arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>separators: \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;</span>n; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"'%s' \"</span>,sep_arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 24, "block": "<pre class=\"text highlighted_source\">      DIM sep$(2)<br/>      sep$() = \"==\", \"!=\", \"=\"<br/>      PRINT \"String splits into:\"<br/>      PRINT FNmultisplit(\"a!===b=!=c\", sep$(), FALSE)<br/>      PRINT \"For extra credit:\"<br/>      PRINT FNmultisplit(\"a!===b=!=c\", sep$(), TRUE)<br/>      END<br/>\u00a0<br/>      DEF FNmultisplit(s$, d$(), info%)<br/>      LOCAL d%, i%, j%, m%, p%, o$<br/>      p% = 1<br/>      REPEAT<br/>        m% = LEN(s$)<br/>        FOR i% = 0 TO DIM(d$(),1)<br/>          d% = INSTR(s$, d$(i%), p%)<br/>          IF d% IF d% &lt; m% m% = d%\u00a0: j% = i%<br/>        NEXT<br/>        IF m% &lt; LEN(s$) THEN<br/>          o$ += \"\"\"\" + MID$(s$, p%, m%-p%) + \"\"\"\"<br/>          IF info% o$ += \" (\" + d$(j%) + \") \" ELSE o$ += \", \"<br/>          p% = m% + LEN(d$(j%))<br/>        ENDIF<br/>      UNTIL m% = LEN(s$)<br/>      = o$ + \"\"\"\" + MID$(s$, p%) + \"\"\"\"</pre>"}, {"lang": "Bracmat", "loc": 18, "block": "<pre class=\"text highlighted_source\">( ( oneOf<br/>  =   operator<br/>    .  \u00a0!arg:%?operator\u00a0?arg<br/>      &amp; ( @(!sjt:!operator\u00a0?arg)&amp;(!operator.!arg)<br/>        | oneOf$!arg<br/>        )<br/>  )<br/>&amp; \"a!===b=!=c\":?unparsed<br/>&amp; \"==\" \"!=\" \"=\":?operators<br/>&amp;   whl<br/>  ' ( @(\u00a0!unparsed<br/>      \u00a0:\u00a0?nonOp [%(oneOf$!operators:(?operator.?unparsed))<br/>       )<br/>    &amp; put$(!nonOp str$(\"{\"\u00a0!operator \"} \"))<br/>    )<br/>&amp; put$!unparsed<br/>&amp; put$\\n<br/>);</pre>"}, {"lang": "C", "loc": 24, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> parse_sep<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>str<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"kw4\">const</span> <span class=\"sy0\">*</span>pat<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> len<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> slen<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>str <span class=\"sy0\">!=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len <span class=\"sy0\">||</span> <span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>str<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tslen <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>pat<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncmp.html\"><span class=\"kw3\">strncmp</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">,</span> pat<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> slen<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"{%.*s}\"</span><span class=\"sy0\">,</span> slen<span class=\"sy0\">,</span> str<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tstr <span class=\"sy0\">+=</span> slen<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>seps<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"==\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"!=\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"=\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\tparse_sep<span class=\"br0\">(</span><span class=\"st0\">\"a!===b=!=c\"</span><span class=\"sy0\">,</span> seps<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 19, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;boost/tokenizer.hpp&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> str<span class=\"br0\">(</span> <span class=\"st0\">\"a!===b=!=c\"</span> <span class=\"br0\">)</span> , output <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">typedef</span> boost<span class=\"sy4\">::</span><span class=\"me2\">tokenizer</span><span class=\"sy1\">&lt;</span>boost<span class=\"sy4\">::</span><span class=\"me2\">char_separator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span> tokenizer <span class=\"sy4\">;</span><br/>   boost<span class=\"sy4\">::</span><span class=\"me2\">char_separator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy1\">&gt;</span> separator <span class=\"br0\">(</span> <span class=\"st0\">\"==\"</span> , <span class=\"st0\">\"!=\"</span> <span class=\"br0\">)</span> , sep <span class=\"br0\">(</span> <span class=\"st0\">\"!\"</span> <span class=\"br0\">)</span>  <span class=\"sy4\">;</span><br/>   tokenizer mytok<span class=\"br0\">(</span> str , separator <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   tokenizer<span class=\"sy4\">::</span><span class=\"me2\">iterator</span> tok_iter <span class=\"sy1\">=</span> mytok.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"sy4\">;</span> tok_iter <span class=\"sy3\">!</span><span class=\"sy1\">=</span> mytok.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span> <span class=\"sy2\">++</span>tok_iter <span class=\"br0\">)</span><br/>      output.<span class=\"me1\">append</span><span class=\"br0\">(</span> <span class=\"sy2\">*</span>tok_iter <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   tokenizer nexttok <span class=\"br0\">(</span> output , sep <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> tok_iter <span class=\"sy1\">=</span> nexttok.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span> tok_iter <span class=\"sy3\">!</span><span class=\"sy1\">=</span> nexttok.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\t <span class=\"sy2\">++</span>tok_iter <span class=\"br0\">)</span> <br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>tok_iter <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 57, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> Multisplit<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">internal</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> s <span class=\"kw1\">in</span> <span class=\"st0\">\"a!===b=!=c\"</span><span class=\"sy0\">.</span><span class=\"me1\">Multisplit</span><span class=\"br0\">(</span><span class=\"kw1\">true</span>, <span class=\"st0\">\"==\"</span>, <span class=\"st0\">\"!=\"</span>, <span class=\"st0\">\"=\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// Split the string and return the separators.</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Write the returned substrings and separators to the console.</span><br/>            <span class=\"br0\">}</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> Multisplit<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">string</span> s, <span class=\"kw4\">bool</span> returnSeparators <span class=\"sy0\">=</span> <span class=\"kw1\">false</span>,<br/>                                                      <span class=\"kw1\">params</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> delimiters<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> currentString <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* Initiate the StringBuilder. This will hold the current string to return<br/>                                                      * once we find a separator. */</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> index <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"co1\">// Initiate the index counter at 0. This tells us our current position in the string to read.</span><br/>\u00a0<br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>index <span class=\"sy0\">&lt;</span> s<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span> <span class=\"co1\">// Loop through the string.</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"co1\">// This will get the highest priority separator found at the current index, or null if there are none.</span><br/>                <span class=\"kw4\">string</span> foundDelimiter <span class=\"sy0\">=</span><br/>                    <span class=\"br0\">(</span><span class=\"kw1\">from</span> delimiter <span class=\"kw1\">in</span> delimiters<br/>                     <span class=\"kw1\">where</span> s<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">&gt;=</span> index <span class=\"sy0\">+</span> delimiter<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">&amp;&amp;</span><br/>                           s<span class=\"sy0\">.</span><span class=\"me1\">Substring</span><span class=\"br0\">(</span>index, delimiter<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> delimiter<br/>                     <span class=\"kw1\">select</span> delimiter<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">FirstOrDefault</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>foundDelimiter <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> currentString<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Return the current string.</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>returnSeparators<span class=\"br0\">)</span> <span class=\"co1\">// Return the separator, if the user specified to do so.</span><br/>                        <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span><br/>                            <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"{{<span class=\"es0\">\\\"</span>{0}<span class=\"es0\">\\\"</span>, ({1}, {2})}}\"</span>,<br/>                                          foundDelimiter,<br/>                                          index, index <span class=\"sy0\">+</span> foundDelimiter<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    currentString<span class=\"sy0\">.</span><span class=\"me1\">Clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Clear the current string.</span><br/>                    index <span class=\"sy0\">+=</span> foundDelimiter<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> <span class=\"co1\">// Move the index past the current separator.</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">else</span><br/>                <span class=\"br0\">{</span><br/>                    currentString<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span>index<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Add the character at this index to the current string.</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>currentString<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> currentString<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// If we have anything left over, return it.</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "CoffeeScript", "loc": 32, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>multi_split = <span class=\"br0\">(</span>text<span class=\"sy0\">,</span> separators<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"co1\"># Split text up, using separators to break up text and discarding</span><br/>  <span class=\"co1\"># separators.</span><br/>  <span class=\"co1\">#</span><br/>  <span class=\"co1\"># Returns an array of strings, which can include empty strings when</span><br/>  <span class=\"co1\"># separators are found either adjacent to each other or at the</span><br/>  <span class=\"co1\"># beginning/end of the text.</span><br/>  <span class=\"co1\">#</span><br/>  <span class=\"co1\"># Separators have precedence, according to their order in the array,</span><br/>  <span class=\"co1\"># and each separator should be at least one character long.</span><br/>  result = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  i = <span class=\"nu0\">0</span><br/>  s = <span class=\"st0\">''</span><br/>  <span class=\"kw1\">while</span> i <span class=\"sy0\">&lt;</span> text.<span class=\"me1\">length</span><br/>    found = <span class=\"kw4\">false</span><br/>    <span class=\"kw1\">for</span> separator <span class=\"kw1\">in</span> separators<br/>      <span class=\"kw1\">if</span> text.<span class=\"me1\">substring</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> i <span class=\"sy0\">+</span> separator.<span class=\"me1\">length</span><span class=\"br0\">)</span> == separator<br/>        found = <span class=\"kw4\">true</span><br/>        i <span class=\"sy0\">+</span>= separator.<span class=\"me1\">length</span><br/>        result.<span class=\"me1\">push</span> s<br/>        s = <span class=\"st0\">''</span><br/>        <span class=\"kw1\">break</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">!</span>found<br/>      s <span class=\"sy0\">+</span>= text<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>      i <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>  result.<span class=\"me1\">push</span> s<br/>  result<br/>\u00a0<br/>console.<span class=\"me1\">log</span> multi_split <span class=\"st0\">'a!===b=!=c'</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">'=='</span><span class=\"sy0\">,</span> <span class=\"st0\">'!='</span><span class=\"sy0\">,</span> <span class=\"st0\">'='</span><span class=\"br0\">]</span> <span class=\"co1\"># [ 'a', '', 'b', '', 'c' ]</span><br/>console.<span class=\"me1\">log</span> multi_split <span class=\"st0\">''</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">'whatever'</span><span class=\"br0\">]</span> <span class=\"co1\"># [ '' ]</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 38, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> multiSplit<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span> s<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> divisors<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> result<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> rest <span class=\"sy0\">=</span> s.<span class=\"me1\">idup</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw4\">bool</span> done <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">string</span> delim<span class=\"sy0\">;</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">string</span> best<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> div<span class=\"sy0\">;</span> divisors<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">const</span> maybe <span class=\"sy0\">=</span> rest.<span class=\"me1\">find</span><span class=\"br0\">(</span>div<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>maybe.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> best.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    best <span class=\"sy0\">=</span> maybe<span class=\"sy0\">;</span><br/>                    delim <span class=\"sy0\">=</span> div<span class=\"sy0\">;</span><br/>                    done <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\t    result.<span class=\"me1\">length</span><span class=\"sy0\">++;</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>done<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            result.<span class=\"me1\">back</span> <span class=\"sy0\">=</span> rest.<span class=\"me1\">idup</span><span class=\"sy0\">;</span><br/>\t\t    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">const</span> t <span class=\"sy0\">=</span> rest.<span class=\"me1\">findSplit</span><span class=\"br0\">(</span>delim<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t    result.<span class=\"me1\">back</span> <span class=\"sy0\">=</span> t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">idup</span><span class=\"sy0\">;</span><br/>\t\t    rest <span class=\"sy0\">=</span> t<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"a!===b=!=c\"</span><br/>    .<span class=\"me1\">multiSplit</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"==\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"!=\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"=\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" {} \"</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 2, "block": "<pre class=\"text highlighted_source\">iex(1)&gt; Regex.split(~r/==|!=|=/, \"a!====b=!=c\")<br/>[\"a\", \"\", \"\", \"b\", \"\", \"c\"]</pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre>20&gt; re:split(\"a!===b=!=c\", \"==|!=|=\",[{return, list}]).\n[\"a\",[],\"b\",[],\"c\"]\n</pre>"}, {"lang": "FreeBASIC", "loc": 74, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> Split<span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>, sepList<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>, result<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>, removeEmpty <span class=\"kw1\">As</span> Boolean = <span class=\"kw1\">False</span>, showSepInfo <span class=\"kw1\">As</span> Boolean = <span class=\"kw1\">False</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> s = <span class=\"st0\">\"\"</span> OrElse <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>sepList<span class=\"br0\">)</span> = -<span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>     <span class=\"kw1\">Redim</span> result<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>     result<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> = s<br/>     <span class=\"kw1\">Return</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> i = <span class=\"nu0\">0</span>, j, count = <span class=\"nu0\">0</span>, empty = <span class=\"nu0\">0</span>, length <br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> position<span class=\"br0\">(</span><span class=\"kw1\">len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> sepIndex<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> sepLength<span class=\"br0\">(</span><span class=\"kw1\">len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  position<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span>\u00a0: sepLength<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>\u00a0<br/>  <span class=\"kw1\">While</span> i  &lt; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> j = <span class=\"kw1\">lbound</span><span class=\"br0\">(</span>sepList<span class=\"br0\">)</span> <span class=\"kw1\">To</span> <span class=\"kw1\">ubound</span><span class=\"br0\">(</span>sepList<span class=\"br0\">)</span><br/>      length = <span class=\"kw1\">len</span><span class=\"br0\">(</span>sepList<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> length = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span> <span class=\"co1\">'' ignore blank separators</span><br/>      <span class=\"kw1\">If</span> <span class=\"kw1\">mid</span><span class=\"br0\">(</span>s, i + <span class=\"nu0\">1</span>, length<span class=\"br0\">)</span> = sepList<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>        count += <span class=\"nu0\">1</span><br/>        position<span class=\"br0\">(</span>count<span class=\"br0\">)</span> = i + <span class=\"nu0\">1</span><br/>        sepIndex<span class=\"br0\">(</span>count<span class=\"br0\">)</span> = j<br/>        sepLength<span class=\"br0\">(</span>count<span class=\"br0\">)</span> = length<br/>        i += length - <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span> j<br/>    i += <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Wend</span><br/>\u00a0<br/>  <span class=\"kw1\">Redim</span> result<span class=\"br0\">(</span>count<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> count  = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">If</span> showSepInfo <span class=\"kw1\">Then</span><br/>      <span class=\"kw1\">Print</span> <span class=\"st0\">\"No delimiters were found\"</span>\u00a0: <span class=\"kw1\">Print</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span> <br/>    result<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> = s<br/>    <span class=\"kw1\">Return</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  position<span class=\"br0\">(</span>count + <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"kw1\">len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> count + <span class=\"nu0\">1</span>  <br/>    length = position<span class=\"br0\">(</span>i<span class=\"br0\">)</span> - position<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span> - sepLength<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    result<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span> - empty<span class=\"br0\">)</span> = <span class=\"kw1\">Mid</span><span class=\"br0\">(</span>s, position<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span> + sepLength<span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span>, length<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> removeEmpty AndAlso cbool<span class=\"br0\">(</span>length = <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span> empty += <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> empty &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Redim</span> <span class=\"kw1\">Preserve</span> result<span class=\"br0\">(</span>count - empty<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> showSepInfo <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"The 1-based indices of the delimiters found are\u00a0: \"</span><br/>    <span class=\"kw1\">Print</span><br/>    <span class=\"kw1\">For</span> x <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> count<br/>      <span class=\"kw1\">Print</span> <span class=\"st0\">\"At index\"</span>; position<span class=\"br0\">(</span>x<span class=\"br0\">)</span>, sepList<span class=\"br0\">(</span>sepIndex<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Print</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span> <br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">Dim</span> s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"st0\">\"a!===b=!=c\"</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The string to be split is\u00a0: \"</span>; s<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> <span class=\"co1\">'' to hold results</span><br/><span class=\"kw1\">Dim</span> b<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"br0\">{</span><span class=\"st0\">\"==\"</span>, <span class=\"st0\">\"!=\"</span>, <span class=\"st0\">\"=\"</span><span class=\"br0\">}</span> <span class=\"co1\">'' separators to be used in order of priority (highest first)</span><br/>split s, b<span class=\"br0\">(</span><span class=\"br0\">)</span>, a<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"kw1\">False</span>, <span class=\"kw1\">True</span>  <span class=\"co1\">'' show separator info</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The sub-strings are\u00a0: \"</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">ubound</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/> <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"##\"</span>; i + <span class=\"nu0\">1</span>; <br/> <span class=\"kw1\">Print</span> <span class=\"st0\">\"\u00a0: \"</span>; a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "F#", "loc": 5, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"sy0\">&gt;</span> <span class=\"st0\">\"a!===b=!=c\"</span>.<span class=\"me1\">Split</span><span class=\"br0\">(</span><span class=\"br0\">[</span>|<span class=\"st0\">\"==\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"!=\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"=\"</span>|<span class=\"br0\">]</span>, System.<span class=\"me1\">StringSplitOptions</span>.<span class=\"me1\">None</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> it\u00a0: <span class=\"kw4\">string</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>|<span class=\"st0\">\"a\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"b\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"c\"</span>|<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"sy0\">&gt;</span> <span class=\"st0\">\"a!===b=!=c\"</span>.<span class=\"me1\">Split</span><span class=\"br0\">(</span><span class=\"br0\">[</span>|<span class=\"st0\">\"=\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"!=\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"==\"</span>|<span class=\"br0\">]</span>, System.<span class=\"me1\">StringSplitOptions</span>.<span class=\"me1\">None</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> it\u00a0: <span class=\"kw4\">string</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>|<span class=\"st0\">\"a\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"b\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"c\"</span>|<span class=\"br0\">]</span></pre>"}, {"lang": "Go", "loc": 26, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> ms<span class=\"sy1\">(</span>txt <span class=\"kw4\">string</span><span class=\"sy1\">,</span> sep <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>ans <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> txt &gt; <span class=\"st0\">\"\"</span> <span class=\"sy1\">{</span><br/>        sepMatch <span class=\"sy2\">:=</span> <span class=\"st0\">\"\"</span><br/>        posMatch <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>txt<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> sep <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> p <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>Index<span class=\"sy1\">(</span>txt<span class=\"sy1\">,</span> s<span class=\"sy1\">);</span> p &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> &amp;&amp; p &lt; posMatch <span class=\"sy1\">{</span><br/>                sepMatch <span class=\"sy2\">=</span> s<br/>                posMatch <span class=\"sy2\">=</span> p<br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        ans <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>ans<span class=\"sy1\">,</span> txt<span class=\"sy1\">[:</span>posMatch<span class=\"sy1\">])</span><br/>        txt <span class=\"sy2\">=</span> txt<span class=\"sy1\">[</span>posMatch<span class=\"sy3\">+</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>sepMatch<span class=\"sy1\">):]</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%q<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> ms<span class=\"sy1\">(</span><span class=\"st0\">\"a!===b=!=c\"</span><span class=\"sy1\">,</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"==\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"!=\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"=\"</span><span class=\"sy1\">}))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 28, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/>       <span class=\"br0\">(</span>isPrefixOf<span class=\"sy0\">,</span> stripPrefix<span class=\"sy0\">,</span> genericLength<span class=\"sy0\">,</span> intercalate<span class=\"br0\">)</span><br/>\u00a0<br/>trysplit <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span><br/>trysplit s delims <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">case</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span>`isPrefixOf` s<span class=\"br0\">)</span> delims <span class=\"kw1\">of</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> Nothing<br/>    <span class=\"br0\">(</span>d:<span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Just <span class=\"br0\">(</span>d<span class=\"sy0\">,</span> <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>Just x<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> x<span class=\"br0\">)</span> <span class=\"sy0\">$</span> stripPrefix d s<span class=\"br0\">)</span><br/>\u00a0<br/>multisplit <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>multisplit list delims <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> ms <span class=\"br0\">[</span><span class=\"br0\">]</span> acc pos <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>acc<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> pos<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      ms l<span class=\"sy0\">@</span><span class=\"br0\">(</span>s:sx<span class=\"br0\">)</span> acc pos <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">case</span> trysplit l delims <span class=\"kw1\">of</span><br/>          Nothing <span class=\"sy0\">-&gt;</span> ms sx <span class=\"br0\">(</span>s\u00a0: acc<span class=\"br0\">)</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          Just <span class=\"br0\">(</span>d<span class=\"sy0\">,</span> sxx<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>acc<span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> pos<span class=\"br0\">)</span>\u00a0: ms sxx <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">+</span> genericLength d<span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span> ms list <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> parsed <span class=\"sy0\">=</span> multisplit <span class=\"st0\">\"a!===b=!=c\"</span> <span class=\"br0\">[</span><span class=\"st0\">\"==\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"!=\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"=\"</span><span class=\"br0\">]</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a><br/>    <span class=\"br0\">[</span> <span class=\"st0\">\"split string:\"</span><br/>    <span class=\"sy0\">,</span> intercalate <span class=\"st0\">\",\"</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <span class=\"sy0\">_,</span> <span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">)</span> parsed<br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"with [(string, delimiter, offset)]:\"</span><br/>    <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> parsed<br/>    <span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 21, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   s <span class=\"sy1\">:=</span> <span class=\"st0\">\"a!===b=!=c\"</span><br/>   <span class=\"co1\"># just list the tokens</span><br/>   <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span>multisplit<span class=\"br0\">(</span>s<span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"st0\">\"==\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"!=\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"=\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"co1\"># list tokens and indices</span><br/>   <span class=\"kw1\">every</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>p <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy1\">||:=</span> t <span class=\"sy1\">:=</span> multisplit<span class=\"br0\">(</span>s<span class=\"sy1\">,</span>sep <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"==\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"!=\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"=\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw1\">break</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <br/>      <span class=\"kw1\">if</span> t <span class=\"sy1\">==</span> <span class=\"sy1\">!</span>sep <span class=\"kw1\">then</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span>t<span class=\"sy1\">,</span><span class=\"st0\">\" (\"</span><span class=\"sy1\">,*</span>p<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">-*</span>t<span class=\"sy1\">,</span><span class=\"st0\">\") \"</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span>t<span class=\"sy1\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> multisplit<span class=\"br0\">(</span>s<span class=\"sy1\">,</span>L<span class=\"br0\">)</span><br/>s <span class=\"sy1\">?</span> <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> <span class=\"kw4\">pos</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>   t <span class=\"sy1\">:=</span> <span class=\"sy1\">=!</span>L <span class=\"sy1\">|</span> <span class=\"nu0\">1</span><span class=\"br0\">(</span> arb<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw4\">match</span><span class=\"br0\">(</span><span class=\"sy1\">!</span>L<span class=\"br0\">)</span><span class=\"sy1\">|</span><span class=\"kw4\">pos</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>   <span class=\"kw1\">suspend</span> t<br/>   <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span> <br/>\u00a0<br/><span class=\"kw1\">procedure</span> arb<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">suspend</span> <span class=\"sy1\">.&amp;</span><span class=\"kw3\">subject</span><span class=\"br0\">[</span><span class=\"sy1\">.&amp;</span><span class=\"kw3\"><span class=\"kw4\">pos</span></span><span class=\"sy1\">:&amp;</span><span class=\"kw3\"><span class=\"kw4\">pos</span></span> <span class=\"sy1\">&lt;-</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\"><span class=\"kw4\">pos</span></span> <span class=\"kw1\">to</span> <span class=\"sy1\">*&amp;</span><span class=\"kw3\">subject</span> <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 12, "block": "<pre class=\"j highlighted_source\">multisplit=: <span class=\"nu0\">4</span>\u00a0:<span class=\"nu0\">0</span><br/>  <span class=\"st_h\">'sep begin'</span>=. |: t=. <span class=\"kw2\">y</span> /:~&amp;.:<span class=\"sy0\">(</span>|.\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span>@;@<span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"ee87c0ae\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#@[ ,.L:<span class=\"nu0\">0</span>\"<span class=\"nu0\">0</span> <a class=\"__cf_email__\" data-cfemail=\"50197e10157e1c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:<span class=\"nu0\">0</span><span class=\"sy0\">)</span> <span class=\"kw2\">x</span><br/>  end=. begin + sep { #@&gt;<span class=\"kw2\">y</span><br/>  last=. next=. <span class=\"nu0\">0</span><br/>  r=. <span class=\"nu0\">2</span> <span class=\"nu0\">0</span>$<span class=\"nu0\">0</span><br/>  <span class=\"kw1\">while.</span> next&lt;#begin <span class=\"kw1\">do.</span><br/>    r=. r,.<span class=\"sy0\">(</span>last}.<span class=\"kw2\">x</span>{.~next{begin<span class=\"sy0\">)</span>;next{t<br/>    last=. next{end<br/>    next=. <span class=\"nu0\">1</span> i.~<span class=\"sy0\">(</span>begin&gt;next{begin<span class=\"sy0\">)</span>*.begin&gt;:last<br/>  <span class=\"kw1\">end.</span><br/>  r=. r,.<span class=\"st_h\">''</span>;~last}.<span class=\"kw2\">x</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 33, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> MultiSplit <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Regex split:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"st0\">\"a!===b=!=c\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"==|!=|=\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Manual split:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s <span class=\"sy0\">:</span> multiSplit<span class=\"br0\">(</span><span class=\"st0\">\"a!===b=!=c\"</span>, <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"st0\">\"==\"</span>, <span class=\"st0\">\"!=\"</span>, <span class=\"st0\">\"=\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\\"</span>%s<span class=\"es0\">\\\"</span> \"</span>, s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> multiSplit<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> txt, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> separators<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> result <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> txtLen <span class=\"sy0\">=</span> txt.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, from <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> to <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> to <span class=\"sy0\">&lt;</span> txtLen<span class=\"sy0\">;</span> to<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> sep <span class=\"sy0\">:</span> separators<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> sepLen <span class=\"sy0\">=</span> sep.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>txt.<span class=\"me1\">regionMatches</span><span class=\"br0\">(</span>to, sep, <span class=\"nu0\">0</span>, sepLen<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    result.<span class=\"me1\">add</span><span class=\"br0\">(</span>txt.<span class=\"me1\">substring</span><span class=\"br0\">(</span>from, to<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    from <span class=\"sy0\">=</span> to <span class=\"sy0\">+</span> sepLen<span class=\"sy0\">;</span><br/>                    to <span class=\"sy0\">=</span> from <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">// compensate for the increment</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>from <span class=\"sy0\">&lt;</span> txtLen<span class=\"br0\">)</span><br/>            result.<span class=\"me1\">add</span><span class=\"br0\">(</span>txt.<span class=\"me1\">substring</span><span class=\"br0\">(</span>from<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 8, "block": "<pre class=\"javascript highlighted_source\">RegExp.<span class=\"me1\">escape</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>text<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> text.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"co2\">/[-[\\]{}()*+?.,\\\\^$|#\\s]/g</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\\\</span>$&amp;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>multisplit <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>string<span class=\"sy0\">,</span> seps<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> sep_regex <span class=\"sy0\">=</span> RegExp<span class=\"br0\">(</span>_.<span class=\"me1\">map</span><span class=\"br0\">(</span>seps<span class=\"sy0\">,</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>sep<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> RegExp.<span class=\"me1\">escape</span><span class=\"br0\">(</span>sep<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'|'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> string.<span class=\"me1\">split</span><span class=\"br0\">(</span>sep_regex<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 47, "block": "<pre class=\"text highlighted_source\"># peeloff(delims) either peels off a delimiter or <br/># a single character from the input string.<br/># The input should be a nonempty string, and delims should be<br/># a non-empty array of delimiters;<br/># return [peeledoff, remainder]<br/># where \"peeledoff\" is either [delim] or the peeled off character:<br/>def peeloff(delims):<br/>  delims[0] as $delim<br/>  | if startswith($delim) then [ [$delim], .[ ($delim|length):]]<br/>    elif (delims|length)&gt;1 then peeloff(delims[1:])<br/>    else [ .[0:1], .[1:]]<br/>    end\u00a0;<br/>\u00a0<br/># multisplit_parse(delims) produces an intermediate parse.<br/># Input must be of the parse form: [ string, [ delim ], ... ]<br/># Output is of the same form.<br/>def multisplit_parse(delims):<br/>  if (delims|length) == 0 or length == 0 then .<br/>  else<br/>    .[length-1] as $last<br/>    |  .[0:length-1] as $butlast<br/>    | if ($last|type) == \"array\" then . # all done<br/>      elif $last == \"\" then .<br/>      else<br/>        ($last | peeloff(delims)) as $p # [ peeledoff, next ]<br/>        | $p[0] as $peeledoff<br/>        | $p[1] as $next<br/>        | if ($next|length) &gt; 0<br/>          then $butlast + [$peeledoff] + ([$next]|multisplit_parse(delims))<br/>          else $butlast + $p<br/>          end<br/>      end<br/>  end\u00a0;<br/>\u00a0<br/>def multisplit(delims):<br/>  [.] | multisplit_parse(delims)<br/>  # insert \"\" between delimiters, compress strings, remove trailing \"\" if any<br/>  | reduce .[] as $x ([]; <br/>      if length == 0 then [ $x ] <br/>      elif ($x|type) == \"array\"<br/>      then if (.[length-1]|type) == \"array\" then . + [\"\",  $x]<br/>           else  . + [$x]<br/>           end<br/>      elif .[length-1]|type == \"string\"<br/>      then .[0:length-1] + [ .[length-1] + $x ]<br/>      else  . + [$x]<br/>      end )\u00a0;</pre>"}, {"lang": "Kotlin", "loc": 31, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> input <span class=\"sy0\">=</span> <span class=\"st0\">\"a!===b=!=c\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> delimiters <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><span class=\"st0\">\"==\"</span>, <span class=\"st0\">\"!=\"</span>, <span class=\"st0\">\"=\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> output <span class=\"sy0\">=</span> input.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>delimiters<span class=\"br0\">)</span>.<span class=\"me1\">toMutableList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until output.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>output<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> output<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"empty string\"</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> output<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"<span class=\"es1\">\\\"</span>\"</span> + output<span class=\"br0\">[</span>i<span class=\"br0\">]</span> + <span class=\"st0\">\"<span class=\"es1\">\\\"</span>\"</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The splits are:\"</span><span class=\"br0\">)</span>         <br/>    println<span class=\"br0\">(</span>output<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// now find positions of matched delimiters</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> matches <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Pair<span class=\"sy0\">&lt;</span>String, Int<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> index <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>index <span class=\"sy0\">&lt;</span> input.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> matched <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>d in delimiters<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>input.<span class=\"me1\">drop</span><span class=\"br0\">(</span>index<span class=\"br0\">)</span>.<span class=\"me1\">take</span><span class=\"br0\">(</span>d.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                matches.<span class=\"me1\">add</span><span class=\"br0\">(</span>d to index<span class=\"br0\">)</span><br/>                index +<span class=\"sy0\">=</span> d.<span class=\"me1\">length</span><br/>                matched <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>                break<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>matched<span class=\"br0\">)</span> index++<br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>The delimiters matched and the indices at which they occur are:\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>matches<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 53, "block": "<pre class=\"lua highlighted_source\"><span class=\"coMULTI\">--[[<br/>Returns a table of substrings by splitting the given string on <br/>occurrences of the given character delimiters, which may be specified <br/>as a single- or multi-character string or a table of such strings.<br/>If chars is omitted, it defaults to the set of all space characters, <br/>and keep is taken to be false. The limit and keep arguments are <br/>optional: they are a maximum size for the result and a flag <br/>determining whether empty fields should be kept in the result.<br/>]]</span><br/><span class=\"kw1\">function</span> split <span class=\"br0\">(</span>str<span class=\"sy0\">,</span> chars<span class=\"sy0\">,</span> limit<span class=\"sy0\">,</span> keep<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> limit<span class=\"sy0\">,</span> splitTable<span class=\"sy0\">,</span> entry<span class=\"sy0\">,</span> pos<span class=\"sy0\">,</span> match <span class=\"sy0\">=</span> limit <span class=\"kw2\">or</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> keep <span class=\"sy0\">==</span> <span class=\"kw4\">nil</span> <span class=\"kw1\">then</span> keep <span class=\"sy0\">=</span> <span class=\"kw4\">true</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> chars <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">for</span> e <span class=\"kw2\">in</span> <span class=\"kw3\">string</span><span class=\"sy0\">.</span>gmatch<span class=\"br0\">(</span>str<span class=\"sy0\">,</span> <span class=\"st0\">\"%S+\"</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>                <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>splitTable<span class=\"sy0\">,</span> e<span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">return</span> splitTable<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">while</span> pos <span class=\"sy0\">&lt;=</span> str<span class=\"sy0\">:</span>len<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        match <span class=\"sy0\">=</span> <span class=\"kw4\">nil</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">type</span><span class=\"br0\">(</span>chars<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"table\"</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> delim <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>chars<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>                <span class=\"kw1\">if</span> str<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>pos<span class=\"sy0\">,</span> pos <span class=\"sy0\">+</span> delim<span class=\"sy0\">:</span>len<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> delim <span class=\"kw1\">then</span><br/>                    match <span class=\"sy0\">=</span> <span class=\"kw3\">string.len</span><span class=\"br0\">(</span>delim<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>                    <span class=\"kw1\">break</span><br/>                <span class=\"kw1\">end</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">elseif</span> str<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>pos<span class=\"sy0\">,</span> pos <span class=\"sy0\">+</span> chars<span class=\"sy0\">:</span>len<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> chars <span class=\"kw1\">then</span><br/>            match <span class=\"sy0\">=</span> <span class=\"kw3\">string.len</span><span class=\"br0\">(</span>chars<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">if</span> match <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> <span class=\"br0\">(</span>keep <span class=\"sy0\">==</span> <span class=\"kw4\">false</span> <span class=\"kw2\">and</span> entry <span class=\"sy0\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>splitTable<span class=\"sy0\">,</span> entry<span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"sy0\">#</span>splitTable <span class=\"sy0\">==</span> limit <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> splitTable <span class=\"kw1\">end</span><br/>                entry <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">else</span><br/>            entry <span class=\"sy0\">=</span> entry <span class=\"sy0\">..</span> str<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>pos<span class=\"sy0\">,</span> pos<span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>        pos <span class=\"sy0\">=</span> pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>match <span class=\"kw2\">or</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> entry <span class=\"sy0\">~=</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>splitTable<span class=\"sy0\">,</span> entry<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> splitTable<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> multisplit <span class=\"sy0\">=</span> split<span class=\"br0\">(</span><span class=\"st0\">\"a!===b=!=c\"</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"st0\">\"==\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"!=\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"=\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Returned result is a table (key/value pairs) - display all entries</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Key<span class=\"es1\">\\t</span>Value\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"---<span class=\"es1\">\\t</span>-----\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>multisplit<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span>k<span class=\"sy0\">,</span> v<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module CheckIt {<br/>            DIM sep$()<br/>            sep$() = (\"==\", \"!=\", \"=\")<br/>            PRINT \"String splits into:\"<br/>            FNmultisplit(\"a!===b=!=c\", sep$(), FALSE)<br/>            PRINT \"For extra credit:\"<br/>            FNmultisplit(\"a!===b=!=c\", sep$(), TRUE)<br/>            END<br/>\u00a0<br/>            SUB FNmultisplit(s$, d$(), info%)<br/>            LOCAL d%, i%, j%, m%, p%, o$<br/>            p% = 1<br/>            REPEAT {<br/>                    m% = LEN(s$)<br/>                    FOR i% = 0 TO DIMENSION(d$(),1)-1<br/>                      d% = INSTR(s$, d$(i%), p%)<br/>                      IF d% THEN IF d% &lt; m% THEN m% = d%\u00a0: j% = i%<br/>                    NEXT I%<br/>                    IF m% &lt; LEN(s$) THEN {<br/>                            o$ += \"\"\"\" + MID$(s$, p%, m%-p%) + \"\"\"\"<br/>                            IF info% THEN  {o$ += \" (\" + d$(j%) + \") \"} ELSE o$ += \", \"<br/>                            p% = m% + LEN(d$(j%))<br/>                  }<br/>\u00a0<br/>            } UNTIL m% = LEN(s$)<br/>            PRINT  o$ + \"\"\"\" + MID$(s$, p%) + \"\"\"\"<br/>            END SUB<br/>}<br/>CheckIt<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">StringSplit[\"a!===b=!=c\", {\"==\", \"!=\", \"=\"}]</pre>"}, {"lang": "Nim", "loc": 19, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>iterator tokenize(text, sep): tuple[token: string, isSep: bool] =<br/>  var i, lastMatch = 0<br/>  while i &lt; text.len:<br/>    for j, s in sep:<br/>      if text[i..text.high].startsWith s:<br/>        if i &gt; lastMatch: yield (text[lastMatch .. &lt;i], false)<br/>        yield (s, true)<br/>        lastMatch = i + s.len<br/>        i += s.high<br/>        break<br/>    inc i<br/>  if i &gt; lastMatch: yield (text[lastMatch .. &lt;i], false)<br/>\u00a0<br/>for token, isSep in \"a!===b=!=c\".tokenize([\"==\", \"!=\", \"=\"]):<br/>  if isSep: stdout.write '{',token,'}'<br/>  else:     stdout.write     token<br/>echo \"\"</pre>"}, {"lang": "Perl", "loc": 11, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> multisplit <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$sep</span><span class=\"sy0\">,</span> <span class=\"re0\">$string</span><span class=\"sy0\">,</span> <span class=\"re0\">%opt</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span> <span class=\"sy0\">;</span><br/>   <span class=\"re0\">$sep</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">'|'</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <a href=\"http://perldoc.perl.org/functions/quotemeta.html\"><span class=\"kw3\">quotemeta</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">@$sep</span><span class=\"sy0\">;</span><br/>   <span class=\"re0\">$sep</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"($sep)\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$opt</span><span class=\"br0\">{</span>keep_separators<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"co2\">/$sep/</span><span class=\"sy0\">,</span> <span class=\"re0\">$string</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"'$_' \"</span> <span class=\"kw1\">for</span> multisplit <span class=\"br0\">[</span><span class=\"st_h\">'=='</span><span class=\"sy0\">,</span><span class=\"st_h\">'!='</span><span class=\"sy0\">,</span><span class=\"st_h\">'='</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"a!===b=!=c\"</span><span class=\"sy0\">;</span> <br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"'$_' \"</span> <span class=\"kw1\">for</span> multisplit <span class=\"br0\">[</span><span class=\"st_h\">'=='</span><span class=\"sy0\">,</span><span class=\"st_h\">'!='</span><span class=\"sy0\">,</span><span class=\"st_h\">'='</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"a!===b=!=c\"</span><span class=\"sy0\">,</span> keep_separators <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 11, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> multisplit<span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"sy0\">,</span> <span class=\"re0\">@seps</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$str</span><span class=\"sy0\">.</span><span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"co2\">/ ||@seps /</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>v<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@chunks</span> <span class=\"sy0\">=</span> multisplit<span class=\"br0\">(</span> <span class=\"st_h\">'a!===b=!=c==d'</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;</span> <span class=\"sy0\">==</span> <span class=\"sy0\">!=</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Print the strings.</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">@chunks</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">Str</span><span class=\"sy0\">.</span><span class=\"me1\">perl</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Print the positions of the separators.</span><br/><span class=\"kw1\">for</span> <span class=\"kw3\">grep</span> Match<span class=\"sy0\">,</span> <span class=\"re0\">@chunks</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$s</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"  $s   from $s.from() to $s.to()\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 24, "block": "<pre class=\"text highlighted_source\">procedure multisplit(string text, sequence delims)<br/>integer k = 1, kdx<br/>    while 1 do<br/>        integer kmin = 0<br/>        for i=1 to length(delims) do<br/>            integer ki = match(delims[i],text,k)<br/>            if ki!=0 then<br/>                if kmin=0 or ki&lt;kmin then<br/>                    kmin = ki<br/>                    kdx = i<br/>                end if<br/>            end if<br/>        end for<br/>        string token = text[k..kmin-1]<br/>        if kmin=0 then<br/>            printf(1,\"Token: [%s] at\u00a0%d\\n\",{token,k})<br/>            exit<br/>        end if<br/>        printf(1,\"Token: [%s] at\u00a0%d, delimiter (%s) at\u00a0%d\\n\",{token,k,delims[kdx],kmin})<br/>        k = kmin+length(delims[kdx])<br/>    end while<br/>end procedure<br/>\u00a0<br/>multisplit(\"a!===b=!=c\",{\"==\",\"!=\",\"=\"})</pre>"}, {"lang": "PicoLisp", "loc": 19, "block": "<pre class=\"text highlighted_source\">(de multisplit (Str Sep)<br/>   (setq Sep (mapcar chop Sep))<br/>   (make<br/>      (for (S (chop Str) S)<br/>         (let L<br/>            (make<br/>               (loop<br/>                  (T (find head Sep (circ S))<br/>                     (link<br/>                        (list<br/>                           (- (length Str) (length S))<br/>                           (pack (cut (length @) 'S)) ) ) )<br/>                  (link (pop 'S))<br/>                  (NIL S (link NIL)) ) )<br/>            (link (pack (cdr (rot L))))<br/>            (and (car L) (link @)) ) ) ) )<br/>\u00a0<br/>(println (multisplit \"a!===b=!=c\" '(\"==\" \"!=\" \"=\")))<br/>(println (multisplit \"a!===b=!=c\" '(\"=\" \"!=\" \"==\")))</pre>"}, {"lang": "Pike", "loc": 17, "block": "<pre class=\"pike highlighted_source\">string input <span class=\"sy0\">=</span> <span class=\"st0\">\"a!===b=!=c\"</span><span class=\"sy0\">;</span><br/>array sep <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"st0\">\"==\"</span>, <span class=\"st0\">\"!=\"</span>, <span class=\"st0\">\"=\"</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>array result <span class=\"sy0\">=</span> replace<span class=\"br0\">(</span>input, sep, `<span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\0</span>\"</span>, sep<span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">]</span>, <span class=\"st0\">\"<span class=\"es0\">\\0</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"st0\">\"<span class=\"es0\">\\0</span>\"</span><span class=\"sy0\">;</span><br/>result<span class=\"sy0\">;</span><br/>Result: <span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"st0\">\"a\"</span>, <span class=\"st0\">\"!=\"</span>, <span class=\"st0\">\"\"</span>, <span class=\"st0\">\"==\"</span>, <span class=\"st0\">\"b\"</span>, <span class=\"st0\">\"=\"</span>, <span class=\"st0\">\"\"</span>, <span class=\"st0\">\"!=\"</span>, <span class=\"st0\">\"c\"</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>int pos <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <br/><span class=\"kw1\">foreach</span><span class=\"br0\">(</span>result<span class=\"sy0\">;</span> int index<span class=\"sy0\">;</span> string data<span class=\"br0\">)</span><br/><span class=\"br0\">{</span> <br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>&lt;<span class=\"st0\">\"==\"</span>, <span class=\"st0\">\"!=\"</span>, <span class=\"st0\">\"=\"</span>&gt;<span class=\"br0\">)</span><span class=\"br0\">[</span>data<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        result<span class=\"br0\">[</span>index<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">{</span> data, pos <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    pos<span class=\"sy0\">+=</span>sizeof<span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>result<span class=\"sy0\">;</span><br/>Result: <span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"st0\">\"a\"</span>, <span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"st0\">\"!=\"</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">)</span>, <span class=\"st0\">\"\"</span>, <span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"st0\">\"==\"</span>, <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">)</span>, <span class=\"st0\">\"b\"</span>, <span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"st0\">\"=\"</span>, <span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"br0\">)</span>, <span class=\"st0\">\"\"</span>, <span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"st0\">\"!=\"</span>, <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"br0\">)</span>, <span class=\"st0\">\"c\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "PowerShell", "loc": 13, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$string</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"a!===b=!=c\"</span><br/><span class=\"re0\">$separators</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re3\">regex</span><span class=\"br0\">]</span><span class=\"st0\">\"(==|!=|=)\"</span><br/>\u00a0<br/><span class=\"re0\">$matchInfo</span> <span class=\"sy0\">=</span> <span class=\"re0\">$separators</span>.Matches<span class=\"br0\">(</span><span class=\"re0\">$string</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span><br/>    <span class=\"kw1\">Select-Object</span> <span class=\"kw5\">-Property</span> Index<span class=\"sy0\">,</span> Value <span class=\"sy0\">|</span><br/>    <span class=\"kw1\">Group-Object</span>  <span class=\"kw5\">-Property</span> Value <span class=\"sy0\">|</span><br/>    <span class=\"kw1\">Select-Object</span> <span class=\"kw5\">-Property</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span>Name<span class=\"sy0\">=</span><span class=\"st0\">\"Separator\"</span>; Expression<span class=\"sy0\">=</span><span class=\"br0\">{</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.Name<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                            Count<span class=\"sy0\">,</span><br/>                            <span class=\"sy0\">@</span><span class=\"br0\">{</span>Name<span class=\"sy0\">=</span><span class=\"st0\">\"Position\"</span>\u00a0; Expression<span class=\"sy0\">=</span><span class=\"br0\">{</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.<span class=\"kw2\">Group</span>.Index<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$matchInfo</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 41, "block": "<pre class=\"prolog highlighted_source\">multisplit<span class=\"br0\">(</span>_LSep<span class=\"sy4\">,</span> <span class=\"st_h\">''</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span><br/>\t<span class=\"br0\">{</span><span class=\"sy5\">!</span><span class=\"br0\">}</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>\u00a0<br/>multisplit<span class=\"br0\">(</span>LSep<span class=\"sy4\">,</span> T<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span><br/>\t<span class=\"br0\">{</span>next_sep<span class=\"br0\">(</span>LSep<span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> Token<span class=\"sy4\">,</span> Sep<span class=\"sy4\">,</span> T1<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   <span class=\"br0\">{</span>Token \\<span class=\"sy6\">=</span> <span class=\"st_h\">''</span> <span class=\"br0\">}</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>Token<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">{</span><span class=\"sy5\">!</span><span class=\"br0\">}</span><span class=\"sy4\">;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   <span class=\"br0\">{</span>Sep \\<span class=\"sy6\">=</span> <span class=\"st_h\">''</span> <span class=\"br0\">}</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>Sep<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">{</span><span class=\"sy5\">!</span><span class=\"br0\">}</span><span class=\"sy4\">;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmultisplit<span class=\"br0\">(</span>LSep<span class=\"sy4\">,</span> T1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>next_sep<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> Lst<span class=\"sy4\">,</span> Token<span class=\"sy4\">,</span> Sep<span class=\"sy4\">,</span> T1<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"co1\">% if we can't find any separator, the game is over</span><br/>\t<span class=\"br0\">(</span>   Lst <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span><br/>\tToken <span class=\"sy6\">=</span> T<span class=\"sy4\">,</span> Sep <span class=\"sy6\">=</span> <span class=\"st_h\">''</span><span class=\"sy4\">,</span> T1 <span class=\"sy6\">=</span> <span class=\"st_h\">''</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">% we sort the list to get nearest longest separator </span><br/>\tpredsort<span class=\"br0\">(</span>my_sort<span class=\"sy4\">,</span> Lst<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span> Sep<span class=\"br0\">)</span><span class=\"sy5\">|</span>_<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tatomic_list_concat<span class=\"br0\">(</span><span class=\"br0\">[</span>Token<span class=\"sy5\">|</span>_<span class=\"br0\">]</span><span class=\"sy4\">,</span> Sep<span class=\"sy4\">,</span> T<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">atom_concat</span></a><span class=\"br0\">(</span>Token<span class=\"sy4\">,</span> Sep<span class=\"sy4\">,</span> Tmp<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">atom_concat</span></a><span class=\"br0\">(</span>Tmp<span class=\"sy4\">,</span> T1<span class=\"sy4\">,</span> T<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>next_sep<span class=\"br0\">(</span><span class=\"br0\">[</span>HSep<span class=\"sy5\">|</span>TSep<span class=\"br0\">]</span><span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> Lst<span class=\"sy4\">,</span> Token<span class=\"sy4\">,</span> Sep<span class=\"sy4\">,</span> T1<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sub_atom</span></a><span class=\"br0\">(</span>T<span class=\"sy4\">,</span> Before<span class=\"sy4\">,</span> Len<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> HSep<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnext_sep<span class=\"br0\">(</span>TSep<span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>Before<span class=\"sy4\">,</span> Len<span class=\"sy4\">,</span>HSep<span class=\"br0\">)</span> <span class=\"sy5\">|</span> Lst<span class=\"br0\">]</span><span class=\"sy4\">,</span> Token<span class=\"sy4\">,</span> Sep<span class=\"sy4\">,</span> T1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>next_sep<span class=\"br0\">(</span><span class=\"br0\">[</span>_HSep<span class=\"sy5\">|</span>TSep<span class=\"br0\">]</span><span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> Lst<span class=\"sy4\">,</span> Token<span class=\"sy4\">,</span> Sep<span class=\"sy4\">,</span> T1<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tnext_sep<span class=\"br0\">(</span>TSep<span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> Lst<span class=\"sy4\">,</span> Token<span class=\"sy4\">,</span> Sep<span class=\"sy4\">,</span> T1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>my_sort<span class=\"br0\">(</span><span class=\"sy6\">&lt;</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>N1<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>N2<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tN1 <span class=\"sy6\">&lt;</span> N2<span class=\"sy4\">.</span><br/>\u00a0<br/>my_sort<span class=\"br0\">(</span><span class=\"sy6\">&gt;</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>N1<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>N2<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tN1 <span class=\"sy6\">&gt;</span> N2<span class=\"sy4\">.</span><br/>\u00a0<br/>my_sort<span class=\"br0\">(</span><span class=\"sy6\">&gt;</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>N<span class=\"sy4\">,</span> N1<span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>N<span class=\"sy4\">,</span> N2<span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tN1 <span class=\"sy6\">&lt;</span> N2<span class=\"sy4\">.</span><br/>\u00a0<br/>my_sort<span class=\"br0\">(</span><span class=\"sy6\">&lt;</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>N<span class=\"sy4\">,</span> N1<span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>N<span class=\"sy4\">,</span> N2<span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tN1 <span class=\"sy6\">&gt;</span> N2<span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 15, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">import</span> <span class=\"kw3\">re</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> ms2<span class=\"br0\">(</span>txt<span class=\"sy0\">=</span><span class=\"st0\">\"a!===b=!=c\"</span><span class=\"sy0\">,</span> sep<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"st0\">\"==\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"!=\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"=\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">if</span> <span class=\"kw1\">not</span> txt <span class=\"kw1\">or</span> <span class=\"kw1\">not</span> sep:<br/>\t\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\tans <span class=\"sy0\">=</span> m <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">for</span> m <span class=\"kw1\">in</span> <span class=\"kw3\">re</span>.<span class=\"me1\">finditer</span><span class=\"br0\">(</span><span class=\"st0\">'(.*?)(?:'</span> + <span class=\"st0\">'|'</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'('</span>+<span class=\"kw3\">re</span>.<span class=\"me1\">escape</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>+<span class=\"st0\">')'</span> <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> sep<span class=\"br0\">)</span> + <span class=\"st0\">')'</span><span class=\"sy0\">,</span> txt<span class=\"br0\">)</span>:<br/>\t\tans +<span class=\"sy0\">=</span> <span class=\"br0\">[</span>m.<span class=\"me1\">group</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>m.<span class=\"me1\">lastindex</span>-<span class=\"nu0\">2</span><span class=\"sy0\">,</span> m.<span class=\"me1\">start</span><span class=\"br0\">(</span>m.<span class=\"me1\">lastindex</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> m <span class=\"kw1\">and</span> txt<span class=\"br0\">[</span>m.<span class=\"me1\">end</span><span class=\"br0\">(</span>m.<span class=\"me1\">lastindex</span><span class=\"br0\">)</span>:<span class=\"br0\">]</span>:<br/>\t\tans +<span class=\"sy0\">=</span> <span class=\"br0\">[</span>txt<span class=\"br0\">[</span>m.<span class=\"me1\">end</span><span class=\"br0\">(</span>m.<span class=\"me1\">lastindex</span><span class=\"br0\">)</span>:<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">return</span> ans<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> ms2<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">[</span><span class=\"st0\">'a'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'b'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'c'</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> ms2<span class=\"br0\">(</span>txt<span class=\"sy0\">=</span><span class=\"st0\">\"a!===b=!=c\"</span><span class=\"sy0\">,</span> sep<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"st0\">\"=\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"!=\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"==\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">[</span><span class=\"st0\">'a'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'b'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'c'</span><span class=\"br0\">]</span></pre>"}, {"lang": "Racket", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(regexp-match* #rx\"==|!=|=\" \"a!===b=!=c\" #:gap-select? #t #:match-select values)<br/>;; =&gt; '(\"a\" (\"!=\") \"\" (\"==\") \"b\" (\"=\") \"\" (\"!=\") \"c\")<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 26, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  splits  a (character) string  based on different  separator  delimiters.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> $                                      <span class=\"coMULTI\">/*obtain optional string from the C.L. */</span><br/><span class=\"kw1\">if</span> $=<span class=\"st0\">''</span>   <span class=\"kw3\">then</span> $= <span class=\"st0\">\"a!===b=!=c\"</span>                   <span class=\"coMULTI\">/*None specified?  Then use the default*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'old string:'</span> $                              <span class=\"coMULTI\">/*display the old string to the screen.*/</span><br/>null= <span class=\"st0\">'0'</span>x                                       <span class=\"coMULTI\">/*null char.   It can be most anything.*/</span><br/>seps= <span class=\"st0\">'==\u00a0!= ='</span>                                  <span class=\"coMULTI\">/*list of separator strings to be used.*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]   process the tokens in  SEPS.  */</span><br/>  <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>seps<span class=\"br0\">)</span>                        <span class=\"coMULTI\">/*parse the string with all the seps.  */</span><br/>  sep=<span class=\"kw6\">word</span><span class=\"br0\">(</span>seps,j<span class=\"br0\">)</span>                               <span class=\"coMULTI\">/*pick a separator to use in below code*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]   process characters in the sep.*/</span><br/>        <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>sep<span class=\"br0\">)</span>                  <span class=\"coMULTI\">/*parse for various separator versions.*/</span><br/>        sep=<span class=\"kw6\">strip</span><span class=\"br0\">(</span><span class=\"kw6\">insert</span><span class=\"br0\">(</span>null, sep, k<span class=\"br0\">)</span>, , null<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*allow imbedded \"nulls\" in separator, */</span><br/>        $=<span class=\"kw6\">changestr</span><span class=\"br0\">(</span>sep, $, null<span class=\"br0\">)</span>                <span class=\"coMULTI\">/*       \u00b7\u00b7\u00b7 but not trailing \"nulls\". */</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]   process strings in the input. */</span><br/>             <span class=\"kw1\">do</span>  <span class=\"kw2\">until</span> $==old;      old=$        <span class=\"coMULTI\">/*keep changing until no more changes. */</span><br/>             $=<span class=\"kw6\">changestr</span><span class=\"br0\">(</span>null <span class=\"sy0\">||</span> null, $, null<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*reduce replicated \"nulls\" in string. */</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*until*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  use  BIF  or  external program.*/</span><br/>        sep=<span class=\"kw6\">changestr</span><span class=\"br0\">(</span>null, sep, <span class=\"st0\">''</span><span class=\"br0\">)</span>             <span class=\"coMULTI\">/*remove true nulls from the separator.*/</span><br/>        <span class=\"kw3\">end</span>        <span class=\"coMULTI\">/*k*/</span><br/>  <span class=\"kw3\">end</span>              <span class=\"coMULTI\">/*j*/</span><br/>\u00a0<br/>showNull= <span class=\"st0\">' {} '</span>                                 <span class=\"coMULTI\">/*just one more thing, display the \u00b7\u00b7\u00b7 */</span><br/>$=<span class=\"kw6\">changestr</span><span class=\"br0\">(</span>null, $, showNull<span class=\"br0\">)</span>                   <span class=\"coMULTI\">/*        \u00b7\u00b7\u00b7 showing of \"null\" chars. */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'new string:'</span> $                              <span class=\"coMULTI\">/*now, display the new string to term. */</span><br/>                                                 <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Multisplit<br/>\u00a0<br/>str = \"a!===b=!=c\" <br/>sep = \"===\u00a0!= =! b =!=\"<br/>sep = str2list(substr(sep, \" \", nl))<br/>for n = 1 to len(sep)<br/>      pos = substr(str, sep[n])<br/>      see \"\" + n + \": \" + substr(str, 1, pos-1) + \" Sep By: \" + sep[n] + nl<br/>next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 9, "block": "<pre class=\"ruby highlighted_source\">text = <span class=\"st0\">'a!===b=!=c'</span><br/>separators = <span class=\"br0\">[</span><span class=\"st0\">'=='</span>, <span class=\"st0\">'!='</span>, <span class=\"st0\">'='</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> multisplit_simple<span class=\"br0\">(</span>text, separators<span class=\"br0\">)</span><br/>  text.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"kw4\">Regexp</span>.<span class=\"me1\">union</span><span class=\"br0\">(</span>separators<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">p</span> multisplit_simple<span class=\"br0\">(</span>text, separators<span class=\"br0\">)</span> <span class=\"co1\"># =&gt; [\"a\", \"\", \"b\", \"\", \"c\"]</span><br/>\u00a0</pre>"}, {"lang": "Run BASIC", "loc": 9, "block": "<pre class=\"text highlighted_source\">str$ = \"a!===b=!=c\" <br/>sep$ = \"===\u00a0!= =! b =!=\"<br/>\u00a0<br/>while word$(sep$,i+1,\" \") &lt;&gt; \"\"<br/> i = i + 1<br/> theSep$ = word$(sep$,i,\" \")<br/> split$  = word$(str$,1,theSep$)<br/> print i;\" \";split$;\" Sep By: \";theSep$<br/>wend</pre>"}, {"lang": "Scala", "loc": 16, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">annotation</span>.<span class=\"me1\">tailrec</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> multiSplit<span class=\"br0\">(</span>str<span class=\"sy0\">:</span>String, sep<span class=\"sy0\">:</span>Seq<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> findSep<span class=\"br0\">(</span>index<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">=</span>sep find <span class=\"br0\">(</span>str startsWith <span class=\"br0\">(</span><span class=\"sy0\">_</span>, index<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"sy0\">@</span>tailrec <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> nextSep<span class=\"br0\">(</span>index<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"br0\">(</span>Int,Int<span class=\"br0\">)</span><span class=\"sy0\">=</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>index<span class=\"sy0\">&gt;</span>str.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>index, <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> findSep<span class=\"br0\">(</span>index<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>         <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Some<span class=\"br0\">(</span>sep<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>index, sep.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>         <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> nextSep<span class=\"br0\">(</span>index + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> getParts<span class=\"br0\">(</span>start<span class=\"sy0\">:</span>Int, pos<span class=\"sy0\">:</span><span class=\"br0\">(</span>Int,Int<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>List<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> part<span class=\"sy0\">=</span>str slice <span class=\"br0\">(</span>start, pos.<span class=\"sy0\">_</span>1<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>pos.<span class=\"sy0\">_</span>2<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> List<span class=\"br0\">(</span>part<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> part <span class=\"sy0\">::</span> getParts<span class=\"br0\">(</span>pos.<span class=\"sy0\">_</span>1+pos.<span class=\"sy0\">_</span>2, nextSep<span class=\"br0\">(</span>pos.<span class=\"sy0\">_</span>1+pos.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">}</span><br/>   getParts<span class=\"br0\">(</span><span class=\"nu0\">0</span>, nextSep<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>println<span class=\"br0\">(</span>multiSplit<span class=\"br0\">(</span><span class=\"st0\">\"a!===b=!=c\"</span>, Seq<span class=\"br0\">(</span><span class=\"st0\">\"!=\"</span>, <span class=\"st0\">\"==\"</span>, <span class=\"st0\">\"=\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 15, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span>use srfi<span class=\"sy0\">-</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>use srfi<span class=\"sy0\">-</span><span class=\"nu0\">42</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>shatter separators the<span class=\"sy0\">-</span><span class=\"kw1\">string</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>str the<span class=\"sy0\">-</span><span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>tmp <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">string=?</span> <span class=\"st0\">\"\"</span> str<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">list</span> tmp<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>if<span class=\"sy0\">-</span>let1 sep <span class=\"br0\">(</span>find <span class=\"br0\">(</span><span class=\"sy0\">^</span>s <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>prefix? <span class=\"kw1\">s</span> str<span class=\"br0\">)</span><span class=\"br0\">)</span> separators<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">cons</span><span class=\"sy0\">*</span> tmp sep<br/>          <span class=\"br0\">(</span>loop <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>drop str <span class=\"br0\">(</span><span class=\"kw1\">string-length</span> sep<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>loop <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>drop str <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> tmp <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>take str <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>glean shards<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>list<span class=\"sy0\">-</span>ec <span class=\"br0\">(</span>: x <span class=\"br0\">(</span>index i<span class=\"br0\">)</span> shards<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">even?</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 9, "block": "<pre class=\"ruby highlighted_source\">func multisplit<span class=\"br0\">(</span>sep, str, keep_sep=<span class=\"kw2\">false</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    sep = sep.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">escape</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'|'</span><span class=\"br0\">)</span>;<br/>    var re = Regex.<span class=\"me1\">new</span><span class=\"br0\">(</span>keep_sep\u00a0? <span class=\"st0\">\"(#{sep})\"</span>\u00a0: sep<span class=\"br0\">)</span>;<br/>    str.<span class=\"kw3\">split</span><span class=\"br0\">(</span>re, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"kw2\">false</span>, <span class=\"kw2\">true</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>bool<span class=\"sy0\">|</span><br/>    say multisplit<span class=\"br0\">(</span><span class=\"sy0\">%</span>w<span class=\"br0\">(</span>==\u00a0!= =<span class=\"br0\">)</span>, <span class=\"st0\">'a!===b=!=c'</span>, keep_sep: bool<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 5, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> simplemultisplit <span class=\"br0\">{</span>text sep<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> map <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> <span class=\"kw1\">foreach</span> s <span class=\"re0\">$sep</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> map <span class=\"re0\">$s</span> <span class=\"st0\">\"<span class=\"es0\">\\u</span>ffff\"</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> map <span class=\"re0\">$map</span> <span class=\"re0\">$text</span><span class=\"br0\">]</span> <span class=\"st0\">\"<span class=\"es0\">\\u</span>ffff\"</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>simplemultisplit <span class=\"st0\">\"a!===b=!=c\"</span> <span class=\"br0\">{</span><span class=\"st0\">\"==\"</span> <span class=\"st0\">\"!=\"</span> <span class=\"st0\">\"=\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span></pre>"}, {"lang": "TXR", "loc": 11, "block": "<pre class=\"text highlighted_source\">@(next\u00a0:args)<br/>@(coll\u00a0:gap 0)@(choose\u00a0:shortest tok)@\\<br/>                @<a class=\"__cf_email__\" data-cfemail=\"4632292d06\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{sep /==/}@\\<br/>              @(or)@\\<br/>                @<a class=\"__cf_email__\" data-cfemail=\"a7d3c8cce7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{sep /!=/}@\\<br/>              @(or)@\\<br/>                @<a class=\"__cf_email__\" data-cfemail=\"03776c6843\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{sep /=/}@\\<br/>              @(end)@(end)@tail<br/>@(output)<br/>@(rep)\"@tok\" {@sep} @(end)\"@tail\"<br/>@(end)</pre>"}, {"lang": "UNIX Shell", "loc": 29, "block": "<pre class=\"bash highlighted_source\">multisplit<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">local</span> <span class=\"re2\">str</span>=<span class=\"re4\">$1</span><br/>    <span class=\"kw3\">shift</span><br/>    <span class=\"kw3\">local</span> <span class=\"re2\">regex</span>=$<span class=\"br0\">(</span> <span class=\"re2\">IFS</span>=<span class=\"st_h\">'|'</span>; <span class=\"kw3\">echo</span> <span class=\"st0\">\"$*\"</span> <span class=\"br0\">)</span><br/>    <span class=\"kw3\">local</span> sep <br/>    <span class=\"kw1\">while</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"re1\">$str</span> =~ <span class=\"re1\">$regex</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>; <span class=\"kw1\">do</span> <br/>        <span class=\"re2\">sep</span>=<span class=\"co1\">${BASH_REMATCH[0]}</span><br/>        words+=<span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es3\">${str%%${sep}</span>*}\"</span> <span class=\"br0\">)</span><br/>        seps+=<span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es2\">$sep</span>\"</span> <span class=\"br0\">)</span><br/>        <span class=\"re2\">str</span>=<span class=\"co1\">${str#*$sep}</span><br/>    <span class=\"kw1\">done</span><br/>    words+=<span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es2\">$str</span>\"</span> <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re2\">words</span>=<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"re2\">seps</span>=<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"re2\">original</span>=<span class=\"st0\">\"a!===b=!=c\"</span><br/><span class=\"re2\">recreated</span>=<span class=\"st0\">\"\"</span><br/>\u00a0<br/>multisplit <span class=\"st0\">\"<span class=\"es2\">$original</span>\"</span> <span class=\"st0\">\"==\"</span> <span class=\"st0\">\"!=\"</span> <span class=\"st0\">\"=\"</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re2\">i</span>=<span class=\"nu0\">0</span>; i<span class=\"sy0\">&lt;</span><span class=\"co1\">${#words[@]}</span>; i++<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">printf</span> <span class=\"st_h\">'w:\"%s\"\\ts:\"%s\"\\n'</span> <span class=\"st0\">\"<span class=\"es3\">${words[i]}</span>\"</span> <span class=\"st0\">\"<span class=\"es3\">${seps[i]}</span>\"</span><br/>    recreated+=<span class=\"st0\">\"<span class=\"es3\">${words[i]}</span><span class=\"es3\">${seps[i]}</span>\"</span><br/><span class=\"kw1\">done</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"re1\">$original</span> == <span class=\"re1\">$recreated</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>; <span class=\"kw1\">then</span><br/>    <span class=\"kw3\">echo</span> <span class=\"st0\">\"successfully able to recreate original string\"</span><br/><span class=\"kw1\">fi</span></pre>"}, {"lang": "VBScript", "loc": 28, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> multisplit(s,sep)<br/>\tarr_sep = Split(sep,<span class=\"st0\">\"|\"</span>)<br/>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arr_sep)<br/>\t\tarr_s = Split(s,arr_sep(i))<br/>\t\ts = Join(arr_s,<span class=\"st0\">\",\"</span>)<br/>\t<span class=\"kw3\">Next</span><br/>\tmultisplit = s<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> multisplit_extra(s,sep)<br/>\t<span class=\"kw4\">Set</span> dict_sep = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"Scripting.Dictionary\"</span>)<br/>\tarr_sep = Split(sep,<span class=\"st0\">\"|\"</span>)<br/>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(arr_sep)<br/>\t\tdict_sep.Add i,<span class=\"st0\">\"(\"</span> &amp; arr_sep(i) &amp; <span class=\"st0\">\")\"</span><br/>\t\tarr_s = Split(s,arr_sep(i))<br/>\t\ts = Join(arr_s,i)<br/>\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw3\">For</span> <span class=\"kw3\">Each</span> key <span class=\"kw3\">In</span> dict_sep.Keys<br/>\t\ts = Replace(s,key,dict_sep.Item(key))<br/>\t<span class=\"kw3\">Next</span><br/>\tmultisplit_extra = s<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.StdOut.Write <span class=\"st0\">\"Standard: \"</span> &amp; multisplit(<span class=\"st0\">\"a!===b=!=c\"</span>,<span class=\"st0\">\"!=|==|=\"</span>)<br/>WScript.StdOut.WriteLine<br/>WScript.StdOut.Write <span class=\"st0\">\"Extra Credit: \"</span> &amp; multisplit_extra(<span class=\"st0\">\"a!===b=!=c\"</span>,<span class=\"st0\">\"!=|==|=\"</span>)<br/>WScript.StdOut.WriteLine</pre>"}, {"lang": "zkl", "loc": 17, "block": "<pre class=\"text highlighted_source\">fcn multisplit(text, sep){<br/>   lastmatch\u00a0:= i\u00a0:= 0; matches\u00a0:= List();<br/>   while(i &lt; text.len()){<br/>      foreach j,s in ([0..].zip(sep)){<br/>         if(i == text.find(s,i)){<br/>\t    if(i &gt; lastmatch) matches.append(text[lastmatch,i-lastmatch]);<br/>\t    matches.append(T(j,i));  # Replace the string containing the matched separator with a tuple of which separator and where in the string the match occured<br/>\t    lastmatch = i + s.len();<br/>\t    i += s.len()-1;<br/>\t    break;<br/>\t }<br/>      }<br/>      i += 1;<br/>   }<br/>   if(i &gt; lastmatch) matches.append(text[lastmatch,i-lastmatch]);<br/>   return(matches);<br/>}</pre>"}]}