{"task": "String_case", "blocks": [{"lang": "360 Assembly", "loc": 15, "block": "<pre class=\"text highlighted_source\">UCASE    CSECT<br/>         USING  UCASE,R15<br/>         MVC    UC,PG<br/>         MVC    LC,PG<br/>         OC     UC,=16C' '         or  X'40' uppercase <br/>         NC     LC,=16X'BF'        and X'BF' lowercase<br/>         XPRNT  PG,L'PG            print original<br/>         XPRNT  UC,L'UC            print uc<br/>         XPRNT  LC,L'LC            print lc<br/>         BR     R14<br/>PG       DC     CL9'alphaBETA'<br/>UC       DS     CL(L'PG)<br/>LC       DS     CL(L'PG)<br/>         YREGS <br/>         END    UCASE</pre>"}, {"lang": "4D", "loc": 3, "block": "<pre class=\"text highlighted_source\">$string:=\"alphaBETA\"<br/>$uppercase:=Uppercase($string)<br/>$lowercase:=Lowercase($string)</pre>"}, {"lang": "6502 Assembly", "loc": 98, "block": "<pre class=\"text highlighted_source\">\t.lf  case6502.lst\t<br/>\t.cr  6502\t<br/>\t.tf  case6502.obj,ap1<br/>;------------------------------------------------------<br/>; String Case for the 6502 by barrym95838 2013.04.07<br/>; Thanks to sbprojects.com for a very nice assembler!<br/>; The target for this assembly is an Apple II with<br/>;   mixed-case output capabilities.  Apple IIs like to<br/>;   work in '+128' ascii, so this version leaves bit 7<br/>;   alone, and can be used with either flavor.<br/>; 6502s work best with data structures &lt; 256 bytes;<br/>;   several instructions would have to be added to<br/>;   properly deal with longer strings.<br/>; Tested and verified on AppleWin 1.20.0.0<br/>;------------------------------------------------------<br/>; Constant Section\t<br/>;\t\t\t<br/>StrPtr\t =   $6\t\t;0-page temp pointer (2 bytes)<br/>Low\t =   $8\t\t;0-page temp low bound<br/>High\t =   $9\t\t;0-page temp high bound<br/>CharOut\t =   $fded\t;Specific to the Apple II<br/>BigA\t =   \"A\"\t;'A' for normal ascii<br/>BigZ\t =   \"Z\"\t;'Z'  \"    \"      \"<br/>LittleA\t =   \"a\"\t;'a'  \"    \"      \"<br/>LittleZ\t =   \"z\"\t;'z'  \"    \"      \"<br/>;======================================================<br/>\t.or  $0f00\t<br/>;------------------------------------------------------<br/>; The main program\t<br/>;\t\t\t<br/>main\tldx  #sTest\t;Point to the test string\t<br/>\tlda  /sTest\t<br/>\tjsr  puts\t;print it to stdout<br/>\tjsr  toUpper\t;convert to UPPER-case<br/>\tjsr  puts\t;print it<br/>\tjsr  toLower\t;convert to lower-case<br/>\tjmp  puts\t;print it and return to caller<br/>;------------------------------------------------------<br/>toUpper\tldy  #LittleA<br/>\tsty  Low\t;set up the flip range<br/>\tldy  #LittleZ\t<br/>\tbne  toLow2\t;return via toLower's tail<br/>;------------------------------------------------------<br/>toLower\tldy  #BigA<br/>\tsty  Low\t;set up the flip range<br/>\tldy  #BigZ\t<br/>toLow2\tsty  High\t<br/>\t;\t\t;return via fall-thru to flip<br/>;------------------------------------------------------<br/>; Given a NUL-terminated string at A:X, flip the case<br/>;   of any chars in the range [Low..High], inclusive;<br/>;   only works on the first 256 bytes of a long string <br/>; Uses:  StrPtr, Low, High<br/>; Preserves:  A, X\t<br/>; Trashes:  Y\t\t<br/>;                       <br/>flip\tstx  StrPtr\t;init string pointer<br/>\tsta  StrPtr+1\t<br/>\tldy  #0\t\t<br/>\tpha  \t\t;save A<br/>flip2\tlda  (StrPtr),y\t;get string char<br/>\tbeq  flip5\t;done if NUL<br/>\tcmp  Low\t<br/>\tbcc  flip4\t;if Low &lt;= char &lt;= High<br/>\tcmp  High\t<br/>\tbeq  flip3\t<br/>\tbcs  flip4\t<br/>flip3\teor  #$20\t;  then flip the case<br/>\tsta  (StrPtr),y\t<br/>flip4\tiny  \t\t;point to next char<br/>\tbne  flip2\t;loop up to 255 times<br/>flip5\tpla  \t\t;restore A<br/>\trts  \t\t;return<br/>;------------------------------------------------------<br/>; Output NUL-terminated string @ A:X; strings longer<br/>;   than 256 bytes are truncated there<br/>; Uses:  StrPtr<br/>; Preserves:  A, X\t<br/>; Trashes:  Y\t\t<br/>;\t\t\t<br/>puts\tstx  StrPtr\t;init string pointer<br/>\tsta  StrPtr+1\t<br/>\tldy  #0\t\t<br/>\tpha  \t\t;save A<br/>puts2\tlda  (StrPtr),y\t;get string char<br/>\tbeq  puts3\t;done if NUL<br/>\tjsr  CharOut\t;output the char<br/>\tiny  \t\t;point to next char<br/>\tbne  puts2\t;loop up to 255 times<br/>puts3\tpla  \t\t;restore A<br/>\trts  \t\t;return<br/>;------------------------------------------------------<br/>; Test String (in '+128' ascii, Apple II style)<br/>;\t\t\t<br/>sTest\t.as\t-\"Alpha, BETA, gamma, {[(&lt;<a class=\"__cf_email__\" data-cfemail=\"4273707102\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>_&gt;)]}.\"<br/>\t.az\t-#13\t<br/>;------------------------------------------------------<br/>\t.en  \t\t</pre>"}, {"lang": "ActionScript", "loc": 3, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">var</span> <span class=\"kw3\">string</span>:<span class=\"kw3\">String</span> = <span class=\"st0\">'alphaBETA'</span>;<br/><span class=\"kw2\">var</span> upper:<span class=\"kw3\">String</span> = <span class=\"kw3\">string</span>.<span class=\"kw3\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/><span class=\"kw2\">var</span> lower:<span class=\"kw3\">String</span> = <span class=\"kw3\">string</span>.<span class=\"kw3\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Ada", "loc": 9, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Characters</span>.<span class=\"me1\">Handling</span>, Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">use</span>  Ada.<span class=\"me1\">Characters</span>.<span class=\"me1\">Handling</span>, Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Upper_Case_String <span class=\"kw1\">is</span><br/>   S\u00a0: <span class=\"kw3\">constant</span> String\u00a0:= <span class=\"st0\">\"alphaBETA\"</span>;<br/><span class=\"kw1\">begin</span><br/>   Put_Line <span class=\"br0\">(</span>To_Upper <span class=\"br0\">(</span>S<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span>To_Lower <span class=\"br0\">(</span>S<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Upper_Case_String;</pre>"}, {"lang": "ALGOL 68", "loc": 31, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\">#!/usr/local/bin/a68g --script #</span><br/>\u00a0<br/><span class=\"coMULTI\"># Demonstrate toupper and tolower for standard ALGOL 68<br/>strings.  This does not work for multibyte character sets. #</span><br/>\u00a0<br/><span class=\"kw3\">INT</span> l2u <span class=\"sy1\">=</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"A\"</span> <span class=\"sy1\">-</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"a\"</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> to upper <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">CHAR</span> c<span class=\"br0\">)</span><span class=\"kw3\">CHAR</span><span class=\"sy1\">:</span><br/>  <span class=\"br0\">(</span><span class=\"kw8\">ABS</span> <span class=\"st0\">\"a\"</span> <span class=\"sy1\">&gt;</span> <span class=\"kw8\">ABS</span> c <span class=\"sy1\">|</span> c <span class=\"sy1\">|:</span> <span class=\"kw8\">ABS</span> c <span class=\"sy1\">&gt;</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"z\"</span> <span class=\"sy1\">|</span> c <span class=\"sy1\">|</span> <span class=\"kw8\">REPR</span> <span class=\"br0\">(</span> <span class=\"kw8\">ABS</span> c <span class=\"sy1\">+</span> l2u <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> to lower <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">CHAR</span> c<span class=\"br0\">)</span><span class=\"kw3\">CHAR</span><span class=\"sy1\">:</span><br/>  <span class=\"br0\">(</span><span class=\"kw8\">ABS</span> <span class=\"st0\">\"A\"</span> <span class=\"sy1\">&gt;</span> <span class=\"kw8\">ABS</span> c <span class=\"sy1\">|</span> c <span class=\"sy1\">|:</span> <span class=\"kw8\">ABS</span> c <span class=\"sy1\">&gt;</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"Z\"</span> <span class=\"sy1\">|</span> c <span class=\"sy1\">|</span> <span class=\"kw8\">REPR</span> <span class=\"br0\">(</span> <span class=\"kw8\">ABS</span> c <span class=\"sy1\">-</span> l2u <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># Operators can be defined in ALGOL 68 #</span><br/><span class=\"kw4\">OP</span> <span class=\"br0\">(</span><span class=\"kw3\">CHAR</span><span class=\"br0\">)</span><span class=\"kw3\">CHAR</span> TOLOWER <span class=\"sy1\">=</span> to lower<span class=\"sy1\">,</span> TOUPPER <span class=\"sy1\">=</span> to upper<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># upper-cases s in place #</span><br/><span class=\"kw4\">PROC</span> string to upper <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span> s<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> s <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> s <span class=\"kw2\">DO</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> to upper<span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># lower-cases s in place #</span><br/><span class=\"kw4\">PROC</span> string to lower <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span> s<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> s <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> s <span class=\"kw2\">DO</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> to lower<span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    <span class=\"kw3\">STRING</span> t <span class=\"sy1\">:=</span> <span class=\"st0\">\"alphaBETA\"</span><span class=\"sy1\">;</span><br/>    string to upper<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"uppercase: \"</span>gl$<span class=\"sy1\">,</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    string to lower<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"lowercase: \"</span>gl$<span class=\"sy1\">,</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 42, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% algol W doesn't have standard case conversion routines, this is one way\u00a0%<br/>   \u00a0% such facilities could be provided                                      \u00a0%<br/>\u00a0<br/>   \u00a0% converts text to upper case                                            \u00a0%<br/>   \u00a0% assumes the letters are contiguous in the character set (as in ASCII)  \u00a0%<br/>   \u00a0% would not work in EBCDIC (as the original algol W implementations used)\u00a0%<br/>    procedure upCase( string(256) value result text )\u00a0;<br/>        for i\u00a0:= 0 until 255 do begin<br/>            string(1) c;<br/>            c\u00a0:= text( i // 1 );<br/>            if c &gt;= \"a\" and c &lt;= \"z\"<br/>            then begin<br/>                text( i // 1 )\u00a0:= code( decode( \"A\" )<br/>                                      + ( decode( c ) - decode( \"a\" ) )<br/>                                      )<br/>            end<br/>        end upCase\u00a0;<br/>\u00a0<br/>   \u00a0% converts text to lower case                                            \u00a0%<br/>   \u00a0% assumes the letters are contiguous in the character set (as in ASCII)  \u00a0%<br/>   \u00a0% would not work in EBCDIC (as the original algol W implementations used)\u00a0%<br/>    procedure dnCase( string(256) value result text )\u00a0;<br/>        for i\u00a0:= 0 until 255 do begin<br/>            string(1) c;<br/>            c\u00a0:= text( i // 1 );<br/>            if c &gt;= \"A\" and c &lt;= \"Z\"<br/>            then begin<br/>                text( i // 1 )\u00a0:= code( decode( \"a\" )<br/>                                      + ( decode( c ) - decode( \"A\" ) )<br/>                                      )<br/>            end<br/>        end dnCase\u00a0;<br/>\u00a0<br/>    string(256) text;<br/>    text\u00a0:= \"alphaBETA\";<br/>    upCase( text );<br/>    write( text( 0 // 40 ) );<br/>    dnCase( text );<br/>    write( text( 0 // 40 ) );<br/>\u00a0<br/>end.</pre>"}, {"lang": "APL", "loc": 1, "block": "<pre>      a\u2190'abcdefghijklmnopqrstuvwxyz'\n      A\u2190'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n      \n      X\u2190'alphaBETA'\n      \n      (a,\u2395AV)[(A,\u2395AV)\u2373'alphaBETA']\nalphabeta\n      (A,\u2395AV)[(a,\u2395AV)\u2373'alphaBETA']\nALPHABETA\n</pre>"}, {"lang": "AppleScript", "loc": 61, "block": "<pre class=\"applescript highlighted_source\">use framework <span class=\"st0\">\"Foundation\"</span><br/>\u00a0<br/><span class=\"co1\">-- TEST -----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    ap<span class=\"br0\">(</span><span class=\"br0\">{</span>toLower, toTitle, toUpper<span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"st0\">\"alphaBETA \u03b1\u03b2\u03b3\u03b4\u0395\u0396\u0397\u0398\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; {\"alphabeta \u03b1\u03b2\u03b3\u03b4\u03b5\u03b6\u03b7\u03b8\", \"Alphabeta \u0391\u03b2\u03b3\u03b4\u03b5\u03b6\u03b7\u03b8\", \"ALPHABETA \u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\"}</span><br/>\u00a0<br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- toLower\u00a0:: String -&gt; String</span><br/><span class=\"kw3\">on</span> toLower<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> ca <span class=\"kw3\">to</span> current <span class=\"kw1\">application</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>ca<span class=\"co2\">'</span>s NSString<span class=\"co2\">'</span>s stringWithString:<span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span>'s \u00ac<br/>        lowercaseStringWithLocale:<span class=\"br0\">(</span>ca<span class=\"co2\">'</span>s NSLocale<span class=\"co2\">'</span>s currentLocale<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/><span class=\"kw3\">end</span> toLower<br/>\u00a0<br/><span class=\"co1\">-- toTitle\u00a0:: String -&gt; String</span><br/><span class=\"kw3\">on</span> toTitle<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> ca <span class=\"kw3\">to</span> current <span class=\"kw1\">application</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>ca<span class=\"co2\">'</span>s NSString<span class=\"co2\">'</span>s stringWithString:<span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span>'s \u00ac<br/>        capitalizedStringWithLocale:<span class=\"br0\">(</span>ca<span class=\"co2\">'</span>s NSLocale<span class=\"co2\">'</span>s currentLocale<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/><span class=\"kw3\">end</span> toTitle<br/>\u00a0<br/><span class=\"co1\">-- toUpper\u00a0:: String -&gt; String</span><br/><span class=\"kw3\">on</span> toUpper<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> ca <span class=\"kw3\">to</span> current <span class=\"kw1\">application</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>ca<span class=\"co2\">'</span>s NSString<span class=\"co2\">'</span>s stringWithString:<span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span>'s \u00ac<br/>        uppercaseStringWithLocale:<span class=\"br0\">(</span>ca<span class=\"co2\">'</span>s NSLocale<span class=\"co2\">'</span>s currentLocale<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/><span class=\"kw3\">end</span> toUpper<br/>\u00a0<br/><span class=\"co1\">-- A list of functions applied to a list of arguments</span><br/><span class=\"co1\">-- (&lt;*&gt; | ap)\u00a0:: [(a -&gt; b)] -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> ap<span class=\"br0\">(</span>fs, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>nf, nx<span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span>length <span class=\"kw3\">of</span> fs, length <span class=\"kw3\">of</span> xs<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> nf<br/>        <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> fs<span class=\"br0\">)</span><br/>            <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> j <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> nx<br/>                <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">contents</span> <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> j <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> ap<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "Arbre", "loc": 2, "block": "<pre class=\"text highlighted_source\">main():<br/>  uppercase('alphaBETA') + '\\n' + lowercase('alphaBETA') + '\\n' -&gt; io</pre>"}, {"lang": "AutoHotkey", "loc": 5, "block": "<pre class=\"autohotkey highlighted_source\">a <span class=\"sy0\">:=</span> <span class=\"st0\">\"alphaBETA\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/StringLower.htm\"><span class=\"kw3\">StringLower</span></a><span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> a <span class=\"co1\">; alphabeta</span><br/><a href=\"http://www.autohotkey.com/docs/commands/StringUpper.htm\"><span class=\"kw3\">StringUpper</span></a><span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> a <span class=\"co1\">; ALPHABETA</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/StringUpper.htm\"><span class=\"kw3\">StringUpper</span></a><span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> T <span class=\"co1\">; Alphabeta (T = title case) eg \"alpha beta gamma\" would become \"Alpha Beta Gamma\"</span></pre>"}, {"lang": "AutoIt", "loc": 3, "block": "<pre class=\"autoit highlighted_source\"><span class=\"re0\">$sString</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"alphaBETA\"</span><br/><span class=\"re0\">$sUppercase</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringUpper.htm\"><span class=\"kw3\">StringUpper</span></a><span class=\"br0\">(</span><span class=\"re0\">$sString</span><span class=\"br0\">)</span> <span class=\"co0\">;\"ALPHABETA\"</span><br/><span class=\"re0\">$sLowercase</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLower.htm\"><span class=\"kw3\">StringLower</span></a><span class=\"br0\">(</span><span class=\"re0\">$sString</span><span class=\"br0\">)</span> <span class=\"co0\">;\"alphabeta\"</span></pre>"}, {"lang": "AWK", "loc": 4, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>  a = <span class=\"st0\">\"alphaBETA\"</span>;<br/>  <span class=\"kw5\">print</span> <span class=\"kw4\">toupper</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>, <span class=\"kw4\">tolower</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 3, "block": "<pre class=\"qbasic highlighted_source\">s$ <span class=\"sy0\">=</span> <span class=\"st0\">\"alphaBETA\"</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckucase%24.shtml\"><span class=\"kw3\">UCASE$</span></a><span class=\"br0\">(</span>s$<span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklcase%24.shtml\"><span class=\"kw3\">LCASE$</span></a><span class=\"br0\">(</span>s$<span class=\"br0\">)</span></pre>"}, {"lang": "Befunge", "loc": 4, "block": "<pre class=\"text highlighted_source\">\"ATEBahpla\" &gt;\u00a0: #v_ 25* , @         &gt;48*-v<br/>                 &gt;\u00a0:: \"`\"` \\\"{\"\\` * |    &gt; , v<br/>                                    &gt;    ^<br/>            ^                                &lt;</pre>"}, {"lang": "Bracmat", "loc": 2, "block": "<pre class=\"text highlighted_source\">  \"alphaBETA\":?s<br/>&amp; out$str$(upp$!s \\n low$!s)</pre>"}, {"lang": "Burlesque", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>blsq ) \"alphaBETA\"^^zz\\/ZZ<br/>\"ALPHABETA\"<br/>\"alphabeta\"<br/>\u00a0</pre>"}, {"lang": "C", "loc": 36, "block": "<pre class=\"c highlighted_source\"><span class=\"coMULTI\">/* Demonstrate toupper and tolower for <br/>   standard C strings.<br/>   This does not work for multibyte character sets. */</span><br/><span class=\"co2\">#include &lt;ctype.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* upper-cases s in place */</span><br/><span class=\"kw4\">void</span> str_toupper<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"sy0\">*</span>s<span class=\"sy0\">=</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/toupper.html\"><span class=\"kw3\">toupper</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        s<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\">/* lower-cases s in place */</span><br/><span class=\"kw4\">void</span> str_tolower<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"sy0\">*</span>s<span class=\"sy0\">=</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/tolower.html\"><span class=\"kw3\">tolower</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        s<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span> t<span class=\"br0\">[</span><span class=\"nu0\">255</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"st0\">\"alphaBETA\"</span><span class=\"sy0\">;</span><br/>    str_toupper<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"uppercase:\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    str_tolower<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"lowercase:\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 21, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;cctype&gt;</span><br/>\u00a0<br/><span class=\"co1\">/// \\brief in-place convert string to upper case</span><br/><span class=\"co1\">/// \\return ref to transformed string</span><br/><span class=\"kw4\">void</span> str_toupper<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"sy3\">&amp;</span>str<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">transform</span><span class=\"br0\">(</span>str.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <br/>                 str.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <br/>                 str.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>                 <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"sy2\">*</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span> std<span class=\"sy4\">::</span><span class=\"kw3\">toupper</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">/// \\brief in-place convert string to lower case</span><br/><span class=\"co1\">/// \\return ref to transformed string</span><br/><span class=\"kw4\">void</span> str_tolower<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"sy3\">&amp;</span>str<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">transform</span><span class=\"br0\">(</span>str.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <br/>                 str.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <br/>                 str.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>                 <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"sy2\">*</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span> std<span class=\"sy4\">::</span><span class=\"kw3\">tolower</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 24, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">string</span> input<span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter a series of letters: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        input <span class=\"sy0\">=</span> Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        stringCase<span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> stringCase<span class=\"br0\">(</span><span class=\"kw4\">string</span> str<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> chars <span class=\"sy0\">=</span> str<span class=\"sy0\">.</span><span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">string</span> newStr <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> i <span class=\"kw1\">in</span> chars<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy0\">.</span><span class=\"me1\">IsLower</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                newStr <span class=\"sy0\">+=</span> <span class=\"kw4\">char</span><span class=\"sy0\">.</span><span class=\"me1\">ToUpper</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>                newStr <span class=\"sy0\">+=</span> <span class=\"kw4\">char</span><span class=\"sy0\">.</span><span class=\"me1\">ToLower</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Converted: {0}\"</span>, newStr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 3, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>def string <span class=\"st0\">\"alphaBETA\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"sy0\">.</span>toUpperCase string<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span><span class=\"sy0\">.</span>toLowerCase string<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CMake", "loc": 4, "block": "<pre class=\"cmake highlighted_source\"><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:string\"><span class=\"kw1\">string</span></a><span class=\"sy0\">(</span><span class=\"kw3\">TOUPPER</span> alphaBETA s<span class=\"sy0\">)</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:message\"><span class=\"kw1\">message</span></a><span class=\"sy0\">(</span><span class=\"kw3\">STATUS</span> <span class=\"st0\">\"Uppercase: <span class=\"es1\">${s}</span>\"</span><span class=\"sy0\">)</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:string\"><span class=\"kw1\">string</span></a><span class=\"sy0\">(</span><span class=\"kw3\">TOLOWER</span> alphaBETA s<span class=\"sy0\">)</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:message\"><span class=\"kw1\">message</span></a><span class=\"sy0\">(</span><span class=\"kw3\">STATUS</span> <span class=\"st0\">\"Lowercase: <span class=\"es1\">${s}</span>\"</span><span class=\"sy0\">)</span></pre>"}, {"lang": "COBOL", "loc": 30, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> string-case-<span class=\"nu0\">85</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  example <span class=\"kw3\">PIC</span> X<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw3\">VALUE</span> <span class=\"st0\">\"alphaBETA\"</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  result  <span class=\"kw3\">PIC</span> X<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">\"Example: \"</span> example<br/>\u00a0<br/>           *&gt; <span class=\"kw3\">Using</span> the intrinsic functions<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">\"Lower-case: \"</span> <span class=\"kw3\">FUNCTION</span> <span class=\"kw4\">LOWER-CASE</span><span class=\"br0\">(</span>example<span class=\"br0\">)</span><br/>\u00a0<br/>           <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">\"Upper-case: \"</span> <span class=\"kw3\">FUNCTION</span> <span class=\"kw4\">UPPER-CASE</span><span class=\"br0\">(</span>example<span class=\"br0\">)</span><br/>\u00a0<br/>           *&gt; <span class=\"kw3\">Using</span> <span class=\"kw1\">INSPECT</span><br/>           <span class=\"kw2\">MOVE</span> example <span class=\"kw2\">TO</span> result<br/>           <span class=\"kw1\">INSPECT</span> result <span class=\"kw2\">CONVERTING</span> <span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><br/>               <span class=\"kw2\">TO</span> <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><br/>           <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">\"Lower-case: \"</span> result<br/>\u00a0<br/>           <span class=\"kw2\">MOVE</span> example <span class=\"kw2\">TO</span> result<br/>           <span class=\"kw1\">INSPECT</span> result <span class=\"kw2\">CONVERTING</span> <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><br/>               <span class=\"kw2\">TO</span>  <span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><br/>           <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">\"Upper-case: \"</span> result<br/>\u00a0<br/>           GOBACK<br/>           <span class=\"sy0\">.</span></pre>"}, {"lang": "ColdFusion", "loc": 2, "block": "<pre class=\"text highlighted_source\">&lt;cfset upper = UCase(\"alphaBETA\")&gt;<br/>&lt;cfset lower = LCase(\"alphaBETA\")&gt;</pre>"}, {"lang": "Common Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\">CL-USER<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>string-upcase <span class=\"st0\">\"alphaBETA\"</span><span class=\"br0\">)</span><br/><span class=\"st0\">\"ALPHABETA\"</span></pre>"}, {"lang": "Component Pascal", "loc": 17, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> AlphaBeta;<br/><span class=\"kw1\">IMPORT</span> StdLog<span class=\"sy0\">,</span>Strings;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Do<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\tstr<span class=\"sy0\">,</span>res<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">128</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tstr <span class=\"sy0\">:=</span> <span class=\"st0\">\"alphaBETA\"</span>;<br/>\tStrings.<span class=\"me1\">ToUpper</span><span class=\"br0\">(</span>str<span class=\"sy0\">,</span>res<span class=\"br0\">)</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Uppercase:&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>res<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\tStrings.<span class=\"me1\">ToLower</span><span class=\"br0\">(</span>str<span class=\"sy0\">,</span>res<span class=\"br0\">)</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Lowercase:&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>res<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> Do;<br/>\u00a0<br/><span class=\"kw1\">END</span> AlphaBeta.<br/>\u00a0</pre>"}, {"lang": "D", "loc": 7, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"alphaBETA\"</span><span class=\"sy0\">;</span><br/>    s.<span class=\"me1\">toUpper</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    s.<span class=\"me1\">toLower</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 2, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw3\">writeln</span><span class=\"br0\">(</span>uppercase<span class=\"br0\">(</span><span class=\"st0\">'alphaBETA'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw3\">writeln</span><span class=\"br0\">(</span>lowercase<span class=\"br0\">(</span><span class=\"st0\">'alphaBETA'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "DWScript", "loc": 2, "block": "<pre class=\"delphi highlighted_source\">PrintLn<span class=\"br0\">(</span><span class=\"kw3\">UpperCase</span><span class=\"br0\">(</span><span class=\"st0\">'alphaBETA'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>PrintLn<span class=\"br0\">(</span><span class=\"kw3\">LowerCase</span><span class=\"br0\">(</span><span class=\"st0\">'alphaBETA'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "E", "loc": 2, "block": "<pre class=\"e highlighted_source\"><span class=\"br0\">[</span><span class=\"st0\">\"alphaBETA\"</span>.<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/><span class=\"st0\">\"alphaBETA\"</span>.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span></pre>"}, {"lang": "EchoLisp", "loc": 12, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>string<span class=\"sy0\">-</span>downcase <span class=\"st0\">\"alphaBETA\"</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"st0\">\"alphabeta\"</span><br/><span class=\"br0\">(</span>string<span class=\"sy0\">-</span>upcase <span class=\"st0\">\"alphaBETA\"</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"st0\">\"ALPHABETA\"</span><br/><span class=\"br0\">(</span>string<span class=\"sy0\">-</span>titlecase <span class=\"st0\">\"alphaBETA\"</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"st0\">\"Alphabeta\"</span><br/><span class=\"br0\">(</span>string<span class=\"sy0\">-</span>randcase <span class=\"st0\">\"alphaBETA\"</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"st0\">\"alphaBEtA\"</span><br/><span class=\"br0\">(</span>string<span class=\"sy0\">-</span>randcase <span class=\"st0\">\"alphaBETA\"</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"st0\">\"AlPHaBeTA\"</span><br/>\u00a0</pre>"}, {"lang": "ECL", "loc": 11, "block": "<pre class=\"text highlighted_source\">IMPORT STD; //Imports the Standard Library<br/>\u00a0<br/>STRING MyBaseString\u00a0:= 'alphaBETA';<br/>\u00a0<br/>UpperCased\u00a0:= STD.str.toUpperCase(MyBaseString);<br/>LowerCased\u00a0:= STD.str.ToLowerCase(MyBaseString);<br/>TitleCased\u00a0:= STD.str.ToTitleCase(MyBaseString);<br/>\u00a0<br/>OUTPUT (UpperCased);<br/>OUTPUT (LowerCased);<br/>OUTPUT (TitleCased);</pre>"}, {"lang": "Elena", "loc": 15, "block": "<pre class=\"text highlighted_source\">import system'culture.<br/>\u00a0<br/>program =<br/>[<br/>    var s1\u00a0:= \"alphaBETA\".<br/>\u00a0<br/>    // Alternative 1<br/>    console writeLine(s1~caseLiteralOp lowerCase).<br/>    console writeLine(s1~caseLiteralOp upperCase).<br/>\u00a0<br/>    // Alternative 2<br/>    console writeLine(s1 toLower locale:currentLocale).<br/>    console writeLine(s1 toUpper locale:currentLocale).<br/>    console readChar.<br/>].</pre>"}, {"lang": "Elixir", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>String.downcase(\"alphaBETA\")<br/># =&gt; alphabeta<br/>String.upcase(\"alphaBETA\")<br/># =&gt; ALPHABETA<br/>String.capitalize(\"alphaBETA\")<br/># =&gt; Alphabeta<br/>\u00a0</pre>"}, {"lang": "Elm", "loc": 6, "block": "<pre class=\"text highlighted_source\">import String exposing (toLower, toUpper)<br/>\u00a0<br/>s = \"alphaBETA\"<br/>\u00a0<br/>lower = toLower s<br/>upper = toUpper s</pre>"}, {"lang": "Erlang", "loc": 2, "block": "<pre class=\"erlang highlighted_source\"><a href=\"http://erlang.org/doc/man/string.html\"><span class=\"kw5\">string</span></a>:<span class=\"re3\">to_upper</span><span class=\"br0\">(</span><span class=\"st0\">\"alphaBETA\"</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><a href=\"http://erlang.org/doc/man/string.html\"><span class=\"kw5\">string</span></a>:<span class=\"re3\">to_lower</span><span class=\"br0\">(</span><span class=\"st0\">\"alphaBETA\"</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Excel", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>=LOWER(A1)<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 5, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"alphaBETA\"</span><br/><span class=\"kw1\">let</span> upper <span class=\"sy0\">=</span> s.<span class=\"me1\">ToUpper</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> lower <span class=\"sy0\">=</span> s.<span class=\"me1\">ToLower</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 4, "block": "<pre class=\"text highlighted_source\">\"alphaBETA\" &gt;lower \u00a0! \"alphabeta\"<br/>\"alphaBETA\" &gt;upper \u00a0! \"ALPHABETA\"<br/>\"alphaBETA\" &gt;title \u00a0! \"Alphabeta\"<br/>\"\u00df\" &gt;case-fold     \u00a0! \"ss\"</pre>"}, {"lang": "Falcon", "loc": 2, "block": "<pre class=\"falcon highlighted_source\"><a href=\"http://falconpl.org/project_docs/core/functions.html#printl\"><span class=\"kw6\">printl</span></a><span class=\"br0\">(</span><span class=\"st0\">\"alphaBETA\"</span>.<span class=\"me0\">lower</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://falconpl.org/project_docs/core/functions.html#printl\"><span class=\"kw6\">printl</span></a><span class=\"br0\">(</span><span class=\"st0\">\"alphaBETA\"</span>.<span class=\"me0\">upper</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Fantom", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fansh&gt; a\u00a0:= \"alphaBETA\"   <br/>alphaBETA<br/>fansh&gt; a.upper // convert whole string to upper case<br/>ALPHABETA<br/>fansh&gt; a.lower // convert whole string to lower case<br/>alphabeta  <br/>fansh&gt; a.capitalize  // make sure first letter is capital<br/>AlphaBETA<br/>fansh&gt; \"BETAalpha\".decapitalize  // make sure first letter is not capital<br/>bETAalpha<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 1, "block": "<pre>: tolower ( C -- c ) 32 or\u00a0;\n: toupper ( c -- C ) 32 invert and\u00a0;\n: lower ( addr len -- ) over + swap  do i <a class=\"__cf_email__\" data-cfemail=\"771437\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> tolower i c!  loop\u00a0;\n: upper ( addr len -- ) over + swap  do i <a class=\"__cf_email__\" data-cfemail=\"6f0c2f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> toupper i c!  loop\u00a0;\n</pre>"}, {"lang": "Fortran", "loc": 38, "block": "<pre class=\"fortran highlighted_source\"> <span class=\"kw1\">program</span> example<br/>\u00a0<br/>   <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>   <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">teststring</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"alphaBETA\"</span><br/>\u00a0<br/>   <span class=\"kw1\">call</span> To_upper<span class=\"br0\">(</span>teststring<span class=\"br0\">)</span><br/>   write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> teststring<br/>   <span class=\"kw1\">call</span> To_lower<span class=\"br0\">(</span>teststring<span class=\"br0\">)</span><br/>   write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> teststring<br/>\u00a0<br/> <span class=\"kw1\">contains</span><br/>\u00a0<br/>   <span class=\"kw1\">subroutine</span> To_upper<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>     <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span> <span class=\"kw3\">out</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">str</span><br/>     <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>     <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">len</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>       <span class=\"kw1\">select</span> <span class=\"kw1\">case</span><span class=\"br0\">(</span>str<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">case</span><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"z\"</span><span class=\"br0\">)</span><br/>           str<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">achar</span><span class=\"br0\">(</span><span class=\"kw4\">iachar</span><span class=\"br0\">(</span>str<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">select</span><br/>     <span class=\"kw1\">end</span> <span class=\"kw1\">do</span> <br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> To_upper<br/>\u00a0<br/>   <span class=\"kw1\">subroutine</span> To_lower<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>     <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span> <span class=\"kw3\">out</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">str</span><br/>     <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>     <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">len</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>       <span class=\"kw1\">select</span> <span class=\"kw1\">case</span><span class=\"br0\">(</span>str<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">case</span><span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"Z\"</span><span class=\"br0\">)</span><br/>           str<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">achar</span><span class=\"br0\">(</span><span class=\"kw4\">iachar</span><span class=\"br0\">(</span>str<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">select</span><br/>     <span class=\"kw1\">end</span> <span class=\"kw1\">do</span>  <br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> To_Lower<br/>\u00a0<br/> <span class=\"kw1\">end</span> <span class=\"kw1\">program</span> example</pre>"}, {"lang": "FreeBASIC", "loc": 6, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"st0\">\"alphaBETA\"</span> <br/><span class=\"kw1\">Print</span> <span class=\"kw1\">UCase</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"kw1\">LCase</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>a = \"alphaBETA\"<br/>println[lc[a]]<br/>println[uc[a]]<br/>\u00a0</pre>"}, {"lang": "FutureBasic", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>dim as Str255 a<br/>\u00a0<br/>a = \"alphaBETA\"<br/>\u00a0<br/>print a<br/>print ucase$(a)<br/>fn lcase(a)<br/>print a<br/>\u00a0</pre>"}, {"lang": "Gambas", "loc": 7, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sString <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\"alphaBETA \"</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <a href=\"http://gambasdoc.org/help/lang/ucase\"><span class=\"kw2\">UCase</span></a><span class=\"br0\">(</span>sString<span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <a href=\"http://gambasdoc.org/help/lang/lcase\"><span class=\"kw2\">LCase</span></a><span class=\"br0\">(</span>sString<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "GAP", "loc": 2, "block": "<pre class=\"text highlighted_source\">LowercaseString(\"alphaBETA\");<br/>UppercaseString(\"alphaBETA\");</pre>"}, {"lang": "GML", "loc": 8, "block": "<pre class=\"gml highlighted_source\">#define cases<br/><span class=\"br0\">{</span><br/>    <span class=\"kw2\">x</span> <span class=\"sy0\">=</span> <span class=\"st0\">'alphaBETA'</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">y</span> <span class=\"sy0\">=</span> <span class=\"kw3\">string_upper</span><span class=\"br0\">(</span><span class=\"kw2\">x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// returns ALPHABETA</span><br/>    z <span class=\"sy0\">=</span> <span class=\"kw3\">string_lower</span><span class=\"br0\">(</span><span class=\"kw2\">x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// returns alphabeta</span><br/>    <span class=\"kw3\">show_message</span><span class=\"br0\">(</span><span class=\"kw2\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">show_message</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Go", "loc": 28, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/>    <span class=\"st0\">\"unicode\"</span><br/>    <span class=\"st0\">\"unicode/utf8\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    show<span class=\"sy1\">(</span><span class=\"st0\">\"alphaBETA\"</span><span class=\"sy1\">)</span><br/>    show<span class=\"sy1\">(</span><span class=\"st0\">\"alpha BETA\"</span><span class=\"sy1\">)</span><br/>    <span class=\"co1\">// Three digraphs that should render similar to DZ, Lj, and nj.</span><br/>    show<span class=\"sy1\">(</span><span class=\"st0\">\"\u01c4\u01c8\u01cc\"</span><span class=\"sy1\">)</span><br/>    <span class=\"co1\">// Unicode apostrophe in third word.</span><br/>    show<span class=\"sy1\">(</span><span class=\"st0\">\"o'hare O'HARE o\u2019hare don't\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> show<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>string:         \"</span><span class=\"sy1\">,</span><br/>        s<span class=\"sy1\">,</span> <span class=\"st0\">\" len:\"</span><span class=\"sy1\">,</span> utf8<span class=\"sy3\">.</span>RuneCountInString<span class=\"sy1\">(</span>s<span class=\"sy1\">),</span> <span class=\"st0\">\"runes\"</span><span class=\"sy1\">)</span> <span class=\"co1\">// DZLjnj</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"All upper case: \"</span><span class=\"sy1\">,</span> strings<span class=\"sy3\">.</span><span class=\"me1\">ToUpper</span><span class=\"sy1\">(</span>s<span class=\"sy1\">))</span> <span class=\"co1\">// DZLJNJ</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"All lower case: \"</span><span class=\"sy1\">,</span> strings<span class=\"sy3\">.</span><span class=\"me1\">ToLower</span><span class=\"sy1\">(</span>s<span class=\"sy1\">))</span> <span class=\"co1\">// dzljnj</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"All title case: \"</span><span class=\"sy1\">,</span> strings<span class=\"sy3\">.</span><span class=\"me1\">ToTitle</span><span class=\"sy1\">(</span>s<span class=\"sy1\">))</span> <span class=\"co1\">// DzLjNj</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"Title words:    \"</span><span class=\"sy1\">,</span> strings<span class=\"sy3\">.</span><span class=\"me1\">Title</span><span class=\"sy1\">(</span>s<span class=\"sy1\">))</span>   <span class=\"co1\">// Dzljnj</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"Swapping case:  \"</span><span class=\"sy1\">,</span>                     <span class=\"co1\">// DzLjNJ</span><br/>        strings<span class=\"sy3\">.</span><span class=\"me1\">Map</span><span class=\"sy1\">(</span>unicode<span class=\"sy3\">.</span><span class=\"me1\">SimpleFold</span><span class=\"sy1\">,</span> s<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 4, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> str <span class=\"sy0\">=</span> <span class=\"st0\">'alphaBETA'</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> str.<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> str.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 6, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><br/>\u00a0<br/>s <span class=\"sy0\">=</span> <span class=\"st0\">\"alphaBETA\"</span><br/>\u00a0<br/>lower <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> toLower s<br/>upper <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> toUpper s</pre>"}, {"lang": "HicEst", "loc": 4, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">CHARACTER</span> str <span class=\"sy1\">=</span> <span class=\"st0\">\"alphaBETA\"</span><br/><span class=\"kw1\">EDIT</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>str<span class=\"sy1\">,</span> UpperCase<span class=\"sy1\">=</span><span class=\"kw1\">LEN</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EDIT</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>str<span class=\"sy1\">,</span> LowerCase<span class=\"sy1\">=</span><span class=\"kw1\">LEN</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EDIT</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>str<span class=\"sy1\">,</span> UpperCase<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> </pre>"}, {"lang": "Icon and Unicon", "loc": 4, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"kw4\">map</span><span class=\"br0\">(</span><span class=\"st0\">\"alphaBETA\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"kw4\">map</span><span class=\"br0\">(</span><span class=\"st0\">\"alphaBETA\"</span><span class=\"sy1\">,&amp;</span><span class=\"kw3\">lcase</span><span class=\"sy1\">,&amp;</span><span class=\"kw3\">ucase</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "IDL", "loc": 1, "block": "<pre>str = \"alphaBETA\"\nprint, str\nprint, strupcase(str) \nprint, strlowcase(str)\n</pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">   toupper <span class=\"st_h\">'alphaBETA'</span><br/>ALPHABETA<br/>   tolower <span class=\"st_h\">'alphaBETA'</span><br/>alphabeta</pre>"}, {"lang": "Java", "loc": 6, "block": "<pre class=\"java highlighted_source\"><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> str <span class=\"sy0\">=</span> <span class=\"st0\">\"alphaBETA\"</span><span class=\"sy0\">;</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>str.<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>str.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\">//Also works with non-English characters with no modification</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"\u00e4\u00e0\u00e2\u00e1\u00e7\u00f1\u00df\u00e6\u03b5\u0431\u1ebf\"</span>.<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"\u00c4\u00c0\u00c2\u00c1\u00c7\u00d1SS\u00c6\u0395\u0411\u1ebe\"</span>.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//does not transalate \"SS\" to \"\u00df\"</span></pre>"}, {"lang": "JavaScript", "loc": 2, "block": "<pre class=\"javascript highlighted_source\">alert<span class=\"br0\">(</span> <span class=\"st0\">\"alphaBETA\"</span>.<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>alert<span class=\"br0\">(</span> <span class=\"st0\">\"alphaBETA\"</span>.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 7, "block": "<pre class=\"text highlighted_source\"># like ruby's downcase - only characters A to Z are affected<br/>def ascii_downcase:<br/>  explode | map( if 65 &lt;= . and . &lt;= 90 then . + 32  else . end) | implode;<br/>\u00a0<br/># like ruby's upcase - only characters a to z are affected<br/>def ascii_upcase:<br/>  explode | map( if 97 &lt;= . and . &lt;= 122 then . - 32  else . end) | implode;</pre>"}, {"lang": "Julia", "loc": 5, "block": "<pre class=\"text highlighted_source\">julia&gt; uppercase(\"alphaBETA\")<br/>\"ALPHABETA\"<br/>\u00a0<br/>julia&gt; lowercase(\"alphaBETA\")<br/>\"alphabeta\"</pre>"}, {"lang": "K", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>  s:\"alphaBETA\"<br/>  upper:{i:_ic x;\u00a0:[96&lt;i; _ci i-32;_ci i]}'<br/>  lower:{i:_ic x;\u00a0:[91&gt;i; _ci i+32;_ci i]}'<br/>  upper s<br/>\"ALPHABETA\"<br/>  lower s<br/>\"alphabeta\"<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 9, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"alphaBETA\"</span><br/>    println<span class=\"br0\">(</span>s.<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>s.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    println<span class=\"br0\">(</span>s.<span class=\"me1\">capitalize</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>s.<span class=\"me1\">decapitalize</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 12, "block": "<pre class=\"text highlighted_source\">// Direct string return<br/>'alphaBETA'-&gt;uppercase&amp;<br/>'alphaBETA'-&gt;lowercase&amp;<br/>\u00a0<br/>// Assignment and manipulation of variables<br/>local(toupper = 'alphaBETA')<br/>#toupper-&gt;uppercase<br/>#toupper<br/>\u00a0<br/>local(tolower = 'alphaBETA')<br/>#tolower-&gt;lowercase<br/>#tolower</pre>"}, {"lang": "Lingo", "loc": 29, "block": "<pre class=\"text highlighted_source\">----------------------------------------<br/>-- Lower to upper case (ASCII only)<br/>-- @param {string} str<br/>-- @return {string}<br/>----------------------------------------<br/>on toUpper (str)<br/>  alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"<br/>  len = str.length<br/>  repeat with i = 1 to len<br/>    pos = offset(str.char[i], alphabet)<br/>    if pos &gt; 0 then put alphabet.char[pos] into char i of str<br/>  end repeat<br/>  return str<br/>end<br/>\u00a0<br/>----------------------------------------<br/>-- Upper to lower case (ASCII only)<br/>-- @param {string} str<br/>-- @return {string}<br/>----------------------------------------<br/>on toLower (str)<br/>  alphabet = \"abcdefghijklmnopqrstuvwxyz\"<br/>  len = str.length<br/>  repeat with i = 1 to len<br/>    pos = offset(str.char[i], alphabet)<br/>    if pos &gt; 0 then put alphabet.char[pos] into char i of str<br/>  end repeat<br/>  return str<br/>end</pre>"}, {"lang": "LiveCode", "loc": 2, "block": "<pre class=\"text highlighted_source\">put upper(\"alphaBETA\") &amp;&amp; lower(\"alphaBETA\")<br/>ALPHABETA alphabeta</pre>"}, {"lang": "Logo", "loc": 1, "block": "<pre>print uppercase \"alphaBETA \u00a0; ALPHABETA\nprint lowercase \"alphaBETA \u00a0; alphabeta\n</pre>"}, {"lang": "Lua", "loc": 3, "block": "<pre class=\"lua highlighted_source\">str <span class=\"sy0\">=</span> <span class=\"st0\">\"alphaBETA\"</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"kw3\">string.upper</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"kw3\">string.lower</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "M4", "loc": 6, "block": "<pre class=\"text highlighted_source\">define(`upcase', `translit(`$*', `a-z', `A-Z')')<br/>define(`downcase', `translit(`$*', `A-Z', `a-z')')<br/>\u00a0<br/>define(`x',`alphaBETA')<br/>upcase(x)<br/>downcase(x)</pre>"}, {"lang": "Maple", "loc": 3, "block": "<pre class=\"text highlighted_source\">str\u00a0:= \"alphaBETA\";<br/>StringTools:-UpperCase(str);<br/>StringTools:-LowerCase(str);</pre>"}, {"lang": "Mathematica", "loc": 3, "block": "<pre class=\"text highlighted_source\">str=\"alphaBETA\";<br/>ToUpperCase[str]<br/>ToLowerCase[str]</pre>"}, {"lang": "MATLAB", "loc": 11, "block": "<pre class=\"matlab highlighted_source\">&gt;&gt; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/upper.html\"><span class=\"kw2\">upper</span></a><span class=\"br0\">(</span><span class=\"co2\">'alphaBETA'</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a> =<br/>\u00a0<br/>ALPHABETA<br/>\u00a0<br/>&gt;&gt; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/lower.html\"><span class=\"kw2\">lower</span></a><span class=\"br0\">(</span><span class=\"co2\">'alphaBETA'</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a> =<br/>\u00a0<br/>alphabeta</pre>"}, {"lang": "Maxima", "loc": 2, "block": "<pre class=\"text highlighted_source\">supcase('alphaBETA');<br/>sdowncase('alphaBETA');</pre>"}, {"lang": "MAXScript", "loc": 3, "block": "<pre class=\"text highlighted_source\">str = \"alphaBETA\"<br/>print (toUpper str)<br/>print (toLower str)</pre>"}, {"lang": "Mercury", "loc": 16, "block": "<pre class=\"text highlighted_source\">:- module string_case.<br/>:- interface.<br/>\u00a0<br/>:- import_module io.<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>:- import_module list, string.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>   S = \"alphaBETA\",<br/>   io.format(\"uppercase      \u00a0:\u00a0%s\\n\", [s(to_upper(S))],\u00a0!IO),<br/>   io.format(\"lowercase      \u00a0:\u00a0%s\\n\", [s(to_lower(S))],\u00a0!IO),<br/>   io.format(\"capitalize first:\u00a0%s\\n\", [s(capitalize_first(S))],\u00a0!IO).<br/>  \u00a0% We can use uncaptitalize_first/1 to ensure the first character in a<br/>  \u00a0% string is lower-case.</pre>"}, {"lang": "Metafont", "loc": 34, "block": "<pre class=\"text highlighted_source\">vardef isbetween(expr a, i, f) =<br/>  if string a:<br/>    if (ASCII(a) &gt;= ASCII(i)) and (ASCII(a) &lt;= ASCII(f)):<br/>      true<br/>    else:<br/>      false<br/>    fi<br/>  else:<br/>    false<br/>  fi enddef;<br/>\u00a0<br/>vardef toupper(expr s) =<br/>  save\u00a0?; string\u00a0?;\u00a0?\u00a0:= \"\"; d\u00a0:= ASCII\"A\" - ASCII\"a\";<br/>  for i = 0 upto length(s)-1:<br/>    if isbetween(substring(i, i+1) of s, \"a\", \"z\"):<br/>     \u00a0?\u00a0:=\u00a0? &amp; char(ASCII(substring(i,i+1) of s) + d)<br/>    else:<br/>     \u00a0?\u00a0:=\u00a0? &amp; substring(i, i+1) of s<br/>    fi;<br/>  endfor<br/> \u00a0?<br/>enddef;<br/>\u00a0<br/>vardef tolower(expr s) =<br/>  save\u00a0?; string\u00a0?;\u00a0?\u00a0:= \"\"; d\u00a0:= ASCII\"a\" - ASCII\"A\";<br/>  for i = 0 upto length(s)-1:<br/>    if isbetween(substring(i, i+1) of s, \"A\", \"Z\"):<br/>     \u00a0?\u00a0:=\u00a0? &amp; char(ASCII(substring(i,i+1) of s) + d)<br/>    else:<br/>     \u00a0?\u00a0:=\u00a0? &amp; substring(i, i+1) of s<br/>    fi;<br/>  endfor<br/> \u00a0?<br/>enddef;</pre>"}, {"lang": "mIRC Scripting Language", "loc": 2, "block": "<pre class=\"mirc highlighted_source\"><a href=\"http://www.mirc.com/echo\"><span class=\"kw3\">echo</span></a> <span class=\"re4\">-ag</span> <span class=\"re0\">$upper</span><span class=\"br0\">(</span>alphaBETA<span class=\"br0\">)</span><br/><a href=\"http://www.mirc.com/echo\"><span class=\"kw3\">echo</span></a> <span class=\"re4\">-ag</span> <span class=\"re0\">$lower</span><span class=\"br0\">(</span>alphaBETA<span class=\"br0\">)</span></pre>"}, {"lang": "Modula-3", "loc": 30, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> TextCase <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO<span class=\"sy0\">,</span> Text<span class=\"sy0\">,</span> ASCII;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Upper<span class=\"br0\">(</span>txt<span class=\"sy0\">:</span> <span class=\"kw4\">TEXT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">TEXT</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">VAR</span><br/>    len <span class=\"sy0\">:=</span> Text.<span class=\"me1\">Length</span><span class=\"br0\">(</span>txt<span class=\"br0\">)</span>;<br/>    res <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>      res <span class=\"sy0\">:=</span> Text.<span class=\"me1\">Cat</span><span class=\"br0\">(</span>res<span class=\"sy0\">,</span> Text.<span class=\"me1\">FromChar</span><span class=\"br0\">(</span>ASCII.<span class=\"me1\">Upper</span><span class=\"br0\">[</span>Text.<span class=\"me1\">GetChar</span><span class=\"br0\">(</span>txt<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> res;<br/>  <span class=\"kw1\">END</span> Upper;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Lower<span class=\"br0\">(</span>txt<span class=\"sy0\">:</span> <span class=\"kw4\">TEXT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">TEXT</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">VAR</span><br/>    len <span class=\"sy0\">:=</span> Text.<span class=\"me1\">Length</span><span class=\"br0\">(</span>txt<span class=\"br0\">)</span>;<br/>    res <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>      res <span class=\"sy0\">:=</span> Text.<span class=\"me1\">Cat</span><span class=\"br0\">(</span>res<span class=\"sy0\">,</span> Text.<span class=\"me1\">FromChar</span><span class=\"br0\">(</span>ASCII.<span class=\"me1\">Lower</span><span class=\"br0\">[</span>Text.<span class=\"me1\">GetChar</span><span class=\"br0\">(</span>txt<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> res;<br/>  <span class=\"kw1\">END</span> Lower;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Upper<span class=\"br0\">(</span><span class=\"st0\">\"alphaBETA<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Lower<span class=\"br0\">(</span><span class=\"st0\">\"alphaBETA<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> TextCase.</pre>"}, {"lang": "MUMPS", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>STRCASE(S)<br/> SET UP=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"<br/> SET LO=\"abcdefghijklmnopqrstuvwxyz\"<br/> WRITE\u00a0!,\"Given: \"_S<br/> WRITE\u00a0!,\"Upper: \"_$TRANSLATE(S,LO,UP)<br/> WRITE\u00a0!,\"Lower: \"_$TRANSLATE(S,UP,LO)<br/> QUIT<br/>\u00a0</pre>"}, {"lang": "Nemerle", "loc": 15, "block": "<pre class=\"text highlighted_source\">using System.Console;<br/>using System.Globalization;<br/>\u00a0<br/>module StringCase<br/>{<br/>    Main()\u00a0: void<br/>    {<br/>        def alpha = \"alphaBETA\";<br/>        WriteLine(alpha.ToUpper());<br/>        WriteLine(alpha.ToLower());<br/>\u00a0<br/>        WriteLine(CultureInfo.CurrentCulture.TextInfo.ToTitleCase(\"exAmpLe sTrinG\"));<br/>\u00a0<br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 10, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>\u00a0<br/>options replace format comments java crossref savelog symbols<br/>\u00a0<br/>abc = <span class=\"st0\">'alphaBETA'</span><br/>\u00a0<br/><span class=\"kw1\">say</span> abc.<span class=\"kw6\">upper</span><br/><span class=\"kw1\">say</span> abc.<span class=\"kw6\">lower</span><br/><span class=\"kw1\">say</span> abc.<span class=\"kw6\">upper</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">-- capitalize 1st character</span><br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 4, "block": "<pre class=\"newlisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#upper-case\"><span class=\"kw1\">upper-case</span></a> <span class=\"st0\">\"alphaBETA\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#lower-case\"><span class=\"kw1\">lower-case</span></a> <span class=\"st0\">\"alphaBETA\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Nial", "loc": 4, "block": "<pre class=\"text highlighted_source\">toupper 'alphaBETA'<br/>=ALPHABETA<br/>tolower 'alphaBETA'<br/>=alphabeta</pre>"}, {"lang": "Nim", "loc": 7, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>var s: string = \"alphaBETA_123\"<br/>echo s,\" as upper case: \", toUpper(s)<br/>echo s,\" as lower case: \", toLower(s)<br/>echo s,\" as Capitalized: \", capitalize(s)<br/>echo s,\" as normal case: \", normalize(s)  # remove underscores, toLower</pre>"}, {"lang": "Objeck", "loc": 5, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/>string <span class=\"sy0\">:=</span> <span class=\"st0\">\"alphaBETA\"</span><span class=\"sy0\">;</span><br/>string<span class=\"sy0\">-&gt;</span><span class=\"me1\">ToUpper</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>string<span class=\"sy0\">-&gt;</span><span class=\"me1\">ToLower</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 4, "block": "<pre class=\"objc highlighted_source\">NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"alphaBETA\"</span>.uppercaseString<span class=\"br0\">)</span>;<br/>NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"alphaBETA\"</span>.lowercaseString<span class=\"br0\">)</span>;<br/>\u00a0<br/>NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"foO BAr\"</span>.capitalizedString<span class=\"br0\">)</span>; <span class=\"co2\">// \"Foo Bar\"</span></pre>"}, {"lang": "OCaml", "loc": 7, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> str <span class=\"sy0\">=</span> <span class=\"st0\">\"alphaBETA\"</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>uppercase str<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">(* ALPHABETA *)</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>lowercase str<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">(* alphabeta *)</span><br/>\u00a0<br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>capitalize str<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">(* AlphaBETA *)</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "Octave", "loc": 5, "block": "<pre class=\"octave highlighted_source\">s <span class=\"sy3\">=</span> <span class=\"co4\">\"alphaBETA\"</span><span class=\"sy5\">;</span><br/>slc <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/tolower.html\"><span class=\"kw5\">tolower</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>suc <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/toupper.html\"><span class=\"kw5\">toupper</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/disp.html\"><span class=\"kw5\">disp</span></a><span class=\"br0\">(</span>slc<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/disp.html\"><span class=\"kw5\">disp</span></a><span class=\"br0\">(</span>suc<span class=\"br0\">)</span><span class=\"sy5\">;</span></pre>"}, {"lang": "Oforth", "loc": 2, "block": "<pre class=\"text highlighted_source\">\"alphaBETA\" toUpper<br/>\"alphaBETA\" toLower</pre>"}, {"lang": "OpenEdge/Progress", "loc": 3, "block": "<pre class=\"progress highlighted_source\"><span class=\"kw3\">CAPS</span><span class=\"br0\">(</span><span class=\"st0\">\"alphaBETA\"</span><span class=\"br0\">)</span> <br/><span class=\"kw3\">LC</span><span class=\"br0\">(</span><span class=\"st0\">\"alphaBETA\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 5, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  Str = <span class=\"st0\">\"alphaBETA\"</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"br0\">{</span>Map Str Char<span class=\"sy0\">.</span>toUpper<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"br0\">{</span>Map Str Char<span class=\"sy0\">.</span>toLower<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "Pascal", "loc": 67, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"co1\">// Uppercase and Lowercase functions for a minimal standard Pascal</span><br/><span class=\"co1\">// where no library routines for these operations exist</span><br/><span class=\"kw1\">PROGRAM</span> upperlower<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// convert a character to uppercase</span><br/><span class=\"kw1\">FUNCTION</span> uch<span class=\"br0\">(</span>ch<span class=\"sy1\">:</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">CHAR</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tuch <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ch<span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">IF</span> ch <span class=\"kw1\">IN</span> <span class=\"br0\">[</span><span class=\"st0\">'a'</span><span class=\"sy1\">..</span><span class=\"st0\">'z'</span><span class=\"br0\">]</span> <span class=\"kw1\">THEN</span><br/>\t\t\tuch <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">chr</span><span class=\"br0\">(</span><span class=\"kw3\">ord</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span> <span class=\"kw3\">AND</span> <span class=\"re0\">$5F</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// convert a character to lowercase</span><br/><span class=\"kw1\">FUNCTION</span> lch<span class=\"br0\">(</span>ch<span class=\"sy1\">:</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">CHAR</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tlch <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ch<span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">IF</span> ch <span class=\"kw1\">IN</span> <span class=\"br0\">[</span><span class=\"st0\">'A'</span><span class=\"sy1\">..</span><span class=\"st0\">'Z'</span><span class=\"br0\">]</span> <span class=\"kw1\">THEN</span><br/>\t\t\tlch <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">chr</span><span class=\"br0\">(</span><span class=\"kw3\">ord</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span> <span class=\"kw1\">OR</span> <span class=\"re0\">$20</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// toggle uper/lower case character</span><br/><span class=\"kw1\">FUNCTION</span> ulch<span class=\"br0\">(</span>ch<span class=\"sy1\">:</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">CHAR</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tulch <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ch<span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">IF</span> ch <span class=\"kw1\">IN</span> <span class=\"br0\">[</span><span class=\"st0\">'a'</span><span class=\"sy1\">..</span><span class=\"st0\">'z'</span><span class=\"br0\">]</span> <span class=\"kw1\">THEN</span> ulch <span class=\"sy1\">:</span><span class=\"sy3\">=</span> uch<span class=\"br0\">(</span>ch<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">IF</span> ch <span class=\"kw1\">IN</span> <span class=\"br0\">[</span><span class=\"st0\">'A'</span><span class=\"sy1\">..</span><span class=\"st0\">'Z'</span><span class=\"br0\">]</span> <span class=\"kw1\">THEN</span> ulch <span class=\"sy1\">:</span><span class=\"sy3\">=</span> lch<span class=\"br0\">(</span>ch<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// convert a string to uppercase</span><br/><span class=\"kw1\">FUNCTION</span> ucase<span class=\"br0\">(</span>str<span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">var</span> i<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tucase <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">FOR</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> Length<span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t\tucase <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ucase <span class=\"sy3\">+</span> uch<span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// convert a string to lowercase</span><br/><span class=\"kw1\">FUNCTION</span> lcase<span class=\"br0\">(</span>str<span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">var</span> i<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tlcase <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">FOR</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> Length<span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t\tlcase <span class=\"sy1\">:</span><span class=\"sy3\">=</span> lcase <span class=\"sy3\">+</span> lch<span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// reverse cases in a given string</span><br/><span class=\"kw1\">FUNCTION</span> ulcase<span class=\"br0\">(</span>str<span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">var</span> i<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tulcase <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">FOR</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> Length<span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t\tulcase <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ulcase <span class=\"sy3\">+</span> ulch<span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>\tab <span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span> <span class=\"sy3\">=</span> <span class=\"st0\">'alphaBETA'</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"co1\">// demonstration</span><br/>\t<span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Original string\u00a0: '</span><span class=\"sy1\">,</span>ab<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Reversed case  \u00a0: '</span><span class=\"sy1\">,</span>ulcase<span class=\"br0\">(</span>ab<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Upper case     \u00a0: '</span><span class=\"sy1\">,</span>ucase<span class=\"br0\">(</span>ab<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Lower case     \u00a0: '</span><span class=\"sy1\">,</span>lcase<span class=\"br0\">(</span>ab<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">END</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Peloton", "loc": 5, "block": "<pre class=\"text highlighted_source\">&lt;@ ENU$$$LSTPSTLITLIT&gt;UPP|<br/>[&lt;@ SAYELTLST&gt;...&lt;/@&gt;] &lt;@ SAYHLPELTLST&gt;...&lt;/@&gt;&lt;@ DEFKEYELTLST&gt;__SuperMacro|...&lt;/@&gt;<br/>&lt;@ SAY&amp;&amp;&amp;LIT&gt;alphaBETA&lt;/@&gt;<br/>\u00a0<br/>&lt;/@&gt;</pre>"}, {"lang": "Perl", "loc": 7, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$string</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"alphaBETA\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/uc.html\"><span class=\"kw3\">uc</span></a><span class=\"br0\">(</span><span class=\"re0\">$string</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\"># =&gt; \"ALPHABETA\"</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/lc.html\"><span class=\"kw3\">lc</span></a><span class=\"br0\">(</span><span class=\"re0\">$string</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\"># =&gt; \"alphabeta\"</span><br/><span class=\"re0\">$string</span> <span class=\"sy0\">=~</span> <span class=\"co2\">tr/[a-z][A-Z]/[A-Z][a-z]/</span><span class=\"sy0\">;</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$string<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\"># =&gt; ALPHAbeta </span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/ucfirst.html\"><span class=\"kw3\">ucfirst</span></a><span class=\"br0\">(</span><span class=\"re0\">$string</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\"># =&gt; \"AlphaBETA\"</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/lcfirst.html\"><span class=\"kw3\">lcfirst</span></a><span class=\"br0\">(</span><span class=\"st0\">\"FOObar\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\"># =&gt; \"fOObar\"</span></pre>"}, {"lang": "Perl 6", "loc": 9, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$word</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"alpha BETA\"</span> <span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"kw3\">uc</span> <span class=\"re0\">$word</span><span class=\"sy0\">;</span>         <span class=\"co1\"># all uppercase (subroutine call)</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$word</span><span class=\"sy0\">.</span><span class=\"kw3\">uc</span><span class=\"sy0\">;</span>         <span class=\"co1\"># all uppercase (method call)</span><br/><span class=\"co1\"># from now on we use only method calls as examples</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$word</span><span class=\"sy0\">.</span><span class=\"kw3\">lc</span><span class=\"sy0\">;</span>         <span class=\"co1\"># all lowercase</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$word</span><span class=\"sy0\">.</span><span class=\"me1\">tc</span><span class=\"sy0\">;</span>         <span class=\"co1\"># first letter titlecase</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$word</span><span class=\"sy0\">.</span><span class=\"me1\">tclc</span><span class=\"sy0\">;</span>       <span class=\"co1\"># first letter titlecase, rest lowercase</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$word</span><span class=\"sy0\">.</span><span class=\"me1\">wordcase</span><span class=\"sy0\">;</span>   <span class=\"co1\"># capitalize each word</span><br/>\u00a0</pre>"}, {"lang": "Phix", "loc": 3, "block": "<pre class=\"text highlighted_source\">constant s = \"alphaBETA\"<br/>?upper(s)<br/>?lower(s)</pre>"}, {"lang": "PHP", "loc": 8, "block": "<pre class=\"php highlighted_source\"><span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"alphaBETA\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/strtoupper\"><span class=\"kw3\">strtoupper</span></a><span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\">// ALPHABETA</span><br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/strtolower\"><span class=\"kw3\">strtolower</span></a><span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\">// alphabeta</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/ucfirst\"><span class=\"kw3\">ucfirst</span></a><span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\">// AlphaBETA</span><br/><span class=\"kw1\">echo</span> lcfirst<span class=\"br0\">(</span><span class=\"st0\">\"FOObar\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\">// fOObar</span><br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/ucwords\"><span class=\"kw3\">ucwords</span></a><span class=\"br0\">(</span><span class=\"st0\">\"foO baR baZ\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\">// FoO BaR BaZ</span><br/><span class=\"kw1\">echo</span> lcwords<span class=\"br0\">(</span><span class=\"st0\">\"FOo BAr BAz\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"co1\">// fOo bAr bAz</span></pre>"}, {"lang": "PicoLisp", "loc": 3, "block": "<pre class=\"text highlighted_source\">(let Str \"alphaBETA\"<br/>   (prinl (uppc Str))<br/>   (prinl (lowc Str)) )</pre>"}, {"lang": "PL/I", "loc": 6, "block": "<pre class=\"pli highlighted_source\">\u00a0<br/><span class=\"kw1\">declare</span> s <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw1\">varying</span> <span class=\"kw1\">initial</span> <span class=\"br0\">(</span><span class=\"st0\">'alphaBETA'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">uppercase</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">lowercase</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PL/SQL", "loc": 10, "block": "<pre class=\"plsql highlighted_source\"><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=DECLARE\"><span class=\"kw1\">DECLARE</span></a><br/>    vc  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=VARCHAR2\"><span class=\"kw1\">VARCHAR2</span></a><span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span> <span class=\"sy0\">:=</span> <span class=\"st0\">'alphaBETA'</span><span class=\"sy0\">;</span><br/>    ivc <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=VARCHAR2\"><span class=\"kw1\">VARCHAR2</span></a><span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    lvc <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=VARCHAR2\"><span class=\"kw1\">VARCHAR2</span></a><span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    uvc <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=VARCHAR2\"><span class=\"kw1\">VARCHAR2</span></a><span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>    ivc <span class=\"sy0\">:=</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=INITCAP\"><span class=\"kw2\">INITCAP</span></a><span class=\"br0\">(</span>vc<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">-- 'Alphabeta'</span><br/>    lvc <span class=\"sy0\">:=</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LOWER\"><span class=\"kw2\">LOWER</span></a><span class=\"br0\">(</span>vc<span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"co1\">-- 'alphabeta'</span><br/>    uvc <span class=\"sy0\">:=</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=UPPER\"><span class=\"kw2\">UPPER</span></a><span class=\"br0\">(</span>vc<span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"co1\">-- 'ALPHABETA'</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a><span class=\"sy0\">;</span> </pre>"}, {"lang": "Pop11", "loc": 3, "block": "<pre class=\"text highlighted_source\">lvars str = 'alphaBETA';<br/>lowertoupper(str) =&gt;<br/>uppertolower(str) =&gt;</pre>"}, {"lang": "Potion", "loc": 25, "block": "<pre class=\"text highlighted_source\">lowercase = (str)\u00a0:<br/>   low = (\"\")<br/>   str length times (i)\u00a0:<br/>      low append(if (65 &lt;= str(i) ord and str(i) ord &lt;= 90)\u00a0:<br/>         \"abcdefghijklmnopqrstuvwxyz\"(str(i) ord - 65)<br/>      . else\u00a0:<br/>         str(i)<br/>      .)<br/>   .<br/>   low join(\"\")<br/>.<br/>uppercase = (str)\u00a0:<br/>   upp = (\"\")<br/>   str length times (i)\u00a0:<br/>      upp append(if (97 &lt;= str(i) ord and str(i) ord &lt;= 122)\u00a0:<br/>         \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"(str(i) ord - 97)<br/>      . else\u00a0:<br/>         str(i)<br/>      .)<br/>   .<br/>   upp join(\"\")<br/>.<br/>\u00a0<br/>lowercase(\"alphaBETA\") print<br/>uppercase(\"alphaBETA\") print</pre>"}, {"lang": "Powerbuilder", "loc": 4, "block": "<pre class=\"powerbuilder highlighted_source\"><span class=\"kw2\">string</span> ls_string<br/>ls_string <span class=\"sy3\">=</span> <span class=\"st0\">'alphaBETA'</span><br/>ls_string  <span class=\"sy3\">=</span> Upper<span class=\"br0\">(</span>ls_string<span class=\"br0\">)</span><br/>ls_string  <span class=\"sy3\">=</span> Lower<span class=\"br0\">(</span>ls_string<span class=\"br0\">)</span></pre>"}, {"lang": "PowerShell", "loc": 8, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$string</span> <span class=\"sy0\">=</span> <span class=\"st0\">'alphaBETA'</span><br/><span class=\"re0\">$lower</span>  <span class=\"sy0\">=</span> <span class=\"re0\">$string</span>.ToLower<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"re0\">$upper</span>  <span class=\"sy0\">=</span> <span class=\"re0\">$string</span>.ToUpper<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"re0\">$title</span>  <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">Get-Culture</span><span class=\"br0\">)</span>.TextInfo.ToTitleCase<span class=\"br0\">(</span><span class=\"re0\">$string</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"re0\">$lower</span><span class=\"sy0\">,</span> <span class=\"re0\">$upper</span><span class=\"sy0\">,</span> <span class=\"re0\">$title</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 11, "block": "<pre class=\"python highlighted_source\">s <span class=\"sy0\">=</span> <span class=\"st0\">\"alphaBETA\"</span><br/><span class=\"kw1\">print</span> s.<span class=\"me1\">upper</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># =&gt; \"ALPHABETA\"</span><br/><span class=\"kw1\">print</span> s.<span class=\"me1\">lower</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># =&gt; \"alphabeta\"</span><br/>\u00a0<br/><span class=\"kw1\">print</span> s.<span class=\"me1\">swapcase</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># =&gt; \"ALPHAbeta\"</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"fOo bAR\"</span>.<span class=\"me1\">capitalize</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># =&gt; \"Foo bar\"</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"fOo bAR\"</span>.<span class=\"me1\">title</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># =&gt; \"Foo Bar\"</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw3\">string</span><br/><span class=\"kw1\">print</span> <span class=\"kw3\">string</span>.<span class=\"me1\">capwords</span><span class=\"br0\">(</span><span class=\"st0\">\"fOo bAR\"</span><span class=\"br0\">)</span> <span class=\"co1\"># =&gt; \"Foo Bar\"</span></pre>"}, {"lang": "QB64", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>DIM s AS STRING * 9<br/>s = \"alphaBETA\"<br/>PRINT \"The original string: \" + s<br/>PRINT \"\"<br/>PRINT \"Translated to lowercase: \" + LCASE$(s)<br/>PRINT \"Translated to uppercase: \" + UCASE$(s)<br/>\u00a0</pre>"}, {"lang": "R", "loc": 3, "block": "<pre class=\"text highlighted_source\"> str &lt;- \"alphaBETA\"<br/> toupper(str)<br/> tolower(str)</pre>"}, {"lang": "Racket", "loc": 9, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(define example \"alphaBETA\")<br/>\u00a0<br/>(string-upcase example)<br/>;\"ALPHABETA\"<br/>(string-downcase example)<br/>;\"alphabeta\"<br/>(string-titlecase example)<br/>;\"Alphabeta\"</pre>"}, {"lang": "Raven", "loc": 2, "block": "<pre class=\"text highlighted_source\">'alphaBETA' upper<br/>'alhpaBETA' lower</pre>"}, {"lang": "REBOL", "loc": 3, "block": "<pre class=\"rebol highlighted_source\"><span class=\"kw3\">print</span> <span class=\"br0\">[</span><span class=\"st0\">\"Original: \"</span> original: <span class=\"st0\">\"alphaBETA\"</span><span class=\"br0\">]</span><br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span><span class=\"st0\">\"Uppercase:\"</span> <span class=\"kw3\">uppercase</span> original<span class=\"br0\">]</span><br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span><span class=\"st0\">\"Lowercase:\"</span> <span class=\"kw3\">lowercase</span> original<span class=\"br0\">]</span></pre>"}, {"lang": "Red", "loc": 7, "block": "<pre class=\"text highlighted_source\">str: \"alphaBETA\"<br/>&gt;&gt; uppercase str<br/>== \"ALPHABETA\"<br/>&gt;&gt; lowercase str<br/>== \"alphabeta\"<br/>&gt;&gt; uppercase/part str 5<br/>== \"ALPHAbeta\"</pre>"}, {"lang": "Retro", "loc": 3, "block": "<pre class=\"text highlighted_source\">with strings'<br/>\"alphaBETA\" toUpper puts<br/>\"alphaBETA\" toLower puts</pre>"}, {"lang": "REXX", "loc": 6, "block": "<pre class=\"rexx highlighted_source\">abc  = <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span>              <span class=\"coMULTI\">/*define all  lowercase  Latin letters.*/</span><br/>abcU = <span class=\"kw6\">translate</span><span class=\"br0\">(</span>abc<span class=\"br0\">)</span>                            <span class=\"coMULTI\">/*   \"    \"   uppercase    \"      \"    */</span><br/>\u00a0<br/>x = <span class=\"st0\">'alphaBETA'</span>                                  <span class=\"coMULTI\">/*define a string to a REXX variable.  */</span><br/>y = <span class=\"kw6\">translate</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>                                 <span class=\"coMULTI\">/*uppercase  X  and store it \u2500\u2500\u2500\u25ba  Y   */</span><br/>z = <span class=\"kw6\">translate</span><span class=\"br0\">(</span>x, abc, abcU<span class=\"br0\">)</span>                      <span class=\"coMULTI\">/*translate uppercase\u2500\u2500\u25balowercase chars*/</span></pre>"}, {"lang": "Ring", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>aString = \"WELCOME TO THE ring programming language\"<br/>see lower(aString) + nl<br/>see upper(aString) + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 5, "block": "<pre class=\"ruby highlighted_source\"><span class=\"st0\">\"alphaBETA\"</span>.<span class=\"me1\">downcase</span> <span class=\"co1\"># =&gt; \"alphabeta\"</span><br/><span class=\"st0\">\"alphaBETA\"</span>.<span class=\"me1\">upcase</span> <span class=\"co1\"># =&gt; \"ALPHABETA\"</span><br/>\u00a0<br/><span class=\"st0\">\"alphaBETA\"</span>.<span class=\"me1\">swapcase</span> <span class=\"co1\"># =&gt; \"ALPHAbeta\"</span><br/><span class=\"st0\">\"alphaBETA\"</span>.<span class=\"me1\">capitalize</span> <span class=\"co1\"># =&gt; \"Alphabeta\"</span></pre>"}, {"lang": "Rust", "loc": 4, "block": "<pre class=\"text highlighted_source\">fn main() {<br/>    println!(\"{}\", \"jalape\u00f1o\".to_uppercase()); // JALAPE\u00d1O<br/>    println!(\"{}\", \"JALAPE\u00d1O\".to_lowercase()); // jalape\u00f1o<br/>}</pre>"}, {"lang": "Scala", "loc": 5, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s<span class=\"sy0\">=</span><span class=\"st0\">\"alphaBETA\"</span><br/>println<span class=\"br0\">(</span>s.<span class=\"me1\">toUpperCase</span><span class=\"br0\">)</span>   <span class=\"co1\">//-&gt; ALPHABETA</span><br/>println<span class=\"br0\">(</span>s.<span class=\"me1\">toLowerCase</span><span class=\"br0\">)</span>   <span class=\"co1\">//-&gt; alphabeta</span><br/>println<span class=\"br0\">(</span>s.<span class=\"me1\">capitalize</span><span class=\"br0\">)</span>    <span class=\"co1\">//-&gt; AlphaBETA</span><br/>println<span class=\"br0\">(</span>s.<span class=\"me1\">reverse</span><span class=\"br0\">)</span>       <span class=\"co1\">//-&gt; ATEBahpla</span></pre>"}, {"lang": "Scheme", "loc": 3, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">s</span> <span class=\"st0\">\"alphaBETA\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">char-upcase</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">char-downcase</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sed", "loc": 2, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw3\">echo</span> <span class=\"st0\">\"alphaBETA\"</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sed</span> <span class=\"st_h\">'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/'</span><br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"alphaBETA\"</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sed</span> <span class=\"st_h\">'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'</span></pre>"}, {"lang": "Seed7", "loc": 1, "block": "<pre>writeln(upper(\"alphaBETA\"));\nwriteln(lower(\"alphaBETA\"));\n</pre>"}, {"lang": "Sidef", "loc": 6, "block": "<pre class=\"ruby highlighted_source\">say <span class=\"st0\">\"alphaBETA\"</span>.<span class=\"me1\">lc</span>;             <span class=\"co1\">#=&gt; alphabeta</span><br/>say <span class=\"st0\">\"alphaBETA\"</span>.<span class=\"me1\">uc</span>;             <span class=\"co1\">#=&gt; ALPHABETA</span><br/>say <span class=\"st0\">\"alphaBETA\"</span>.<span class=\"me1\">tc</span>;             <span class=\"co1\">#=&gt; AlphaBETA</span><br/>say <span class=\"st0\">\"alpha BETA\"</span>.<span class=\"me1\">wc</span>;            <span class=\"co1\">#=&gt; Alpha Beta</span><br/>say <span class=\"st0\">\"alpha BETA\"</span>.<span class=\"me1\">tc</span>;            <span class=\"co1\">#=&gt; Alpha BETA</span><br/>say <span class=\"st0\">\"alpha BETA\"</span>.<span class=\"me1\">tclc</span>;          <span class=\"co1\">#=&gt; Alpha beta</span></pre>"}, {"lang": "Simula", "loc": 6, "block": "<pre class=\"text highlighted_source\">TEXT soup, lower;<br/>soup\u00a0:- \"alphaBETA\";<br/>lower\u00a0:- LOWCASE(COPY(soup));\u00a0! COPY, else soup is changed;<br/>OutText(\"upper: \"); OutText(UPCASE(\"alphaBETA\"));<br/>OutText(\", lower: \"); OutText(lower);<br/>OutText(\", soup: \"); OutText(soup); Outimage;</pre>"}, {"lang": "Slate", "loc": 2, "block": "<pre class=\"text highlighted_source\">'alphaBETA' toLowercase.<br/>'alphaBETA' toUppercase.</pre>"}, {"lang": "Smalltalk", "loc": 2, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"st0\">'ALPHAbeta'</span> asUppercase  <span class=\"coMULTI\">\"-&gt;'ALPHABETA' \"</span><br/><span class=\"st0\">'ALPHAbeta'</span> asLowercase <span class=\"coMULTI\">\"-&gt; 'alphabeta' \"</span></pre>"}, {"lang": "SNOBOL4", "loc": 26, "block": "<pre class=\"text highlighted_source\">        define('uc(str)')\u00a0:(uc_end)<br/>uc      uc = replace(str,&amp;lcase,&amp;ucase)\u00a0:(return)<br/>uc_end<br/>\u00a0<br/>        define('lc(str)')\u00a0:(lc_end)<br/>lc      lc = replace(str,&amp;ucase,&amp;lcase)\u00a0:(return)<br/>lc_end<br/>\u00a0<br/>        define('ucfirst(str)ch')\u00a0:(ucfirst_end)<br/>ucfirst str len(1) . ch = uc(ch) <br/>        ucfirst = str\u00a0:(return)<br/>ucfirst_end<br/>\u00a0<br/>        define('swapc(str)')\u00a0:(swapc_end)<br/>swapc   str = replace(str,&amp;ucase &amp;lcase, &amp;lcase &amp;ucase) <br/>        swapc = str\u00a0:(return)<br/>swapc_end<br/>\u00a0<br/>*       # Test and display<br/>        str = 'alphaBETA'<br/>        output = str<br/>        output = lc(str)<br/>        output = uc(str)<br/>        output = ucfirst(str)<br/>        output = swapc(str)<br/>end</pre>"}, {"lang": "SQL", "loc": 4, "block": "<pre class=\"sql highlighted_source\"><span class=\"kw1\">DECLARE</span> @s <span class=\"kw1\">VARCHAR</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"kw1\">SET</span> @s <span class=\"sy0\">=</span> <span class=\"st0\">'alphaBETA'</span><br/>print <span class=\"kw1\">UPPER</span><span class=\"br0\">(</span>@s<span class=\"br0\">)</span><br/>print <span class=\"kw1\">LOWER</span><span class=\"br0\">(</span>@s<span class=\"br0\">)</span></pre>"}, {"lang": "Standard ML", "loc": 2, "block": "<pre class=\"text highlighted_source\">val strupr = String.map Char.toUpper;<br/>val strlwr = String.map Char.toLower;</pre>"}, {"lang": "Stata", "loc": 5, "block": "<pre class=\"text highlighted_source\">. scalar s=\"alphaBETA\"<br/>. di strupper(s)<br/>ALPHABETA<br/>. di strlower(s)<br/>alphabeta</pre>"}, {"lang": "Swift", "loc": 5, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>println(\"alphaBETA\".uppercaseString)<br/>println(\"alphaBETA\".lowercaseString)<br/>println(\"foO BAr\".capitalizedString)</pre>"}, {"lang": "Tcl", "loc": 30, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> <span class=\"kw2\">string</span> alphaBETA<br/>\u00a0<br/><span class=\"co1\"># three built-in case conversion commands</span><br/><span class=\"kw2\">string</span> toupper <span class=\"re0\">$string</span>  <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; ALPHABETA</span><br/><span class=\"kw2\">string</span> tolower <span class=\"re0\">$string</span>  <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; alphabeta</span><br/><span class=\"kw2\">string</span> totitle <span class=\"re0\">$string</span>  <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; Alphabeta</span><br/>\u00a0<br/><span class=\"co1\"># not built-in</span><br/><span class=\"kw1\">proc</span> swapcase <span class=\"br0\">{</span>s<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> char <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$s</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$char</span> eq <span class=\"br0\">[</span><span class=\"kw1\">set</span> CHAR <span class=\"br0\">[</span><span class=\"kw2\">string</span> toupper <span class=\"re0\">$char</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">append</span> new <span class=\"br0\">[</span><span class=\"kw2\">string</span> tolower <span class=\"re0\">$char</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">append</span> new <span class=\"re0\">$CHAR</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$new</span><br/><span class=\"br0\">}</span><br/>swapcase <span class=\"re0\">$string</span>  <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; ALPHAbeta</span><br/>\u00a0<br/><span class=\"co1\"># better performance, but English alphabet only</span><br/><span class=\"kw1\">proc</span> swapcase_en <span class=\"br0\">{</span>s<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">string</span> map <span class=\"br0\">{</span><br/>        a A b B c C d D e E f F g G h H i I j J k K l L m M n N o O p P q Q r R s S t T u U v V w W x X y Y z Z<br/>        A a B b C c D d E e F f G g H h I i J j K k L l M m N n O o P p Q q R r S s T t U u V v W w X x Y y Z z<br/>    <span class=\"br0\">}</span> <span class=\"re0\">$s</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>swapcase P\u00e8re     <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; p\u00c8RE</span><br/>swapcase_en P\u00e8re  <span class=\"sy0\">;</span><span class=\"co1\"># ==&gt; p\u00e8RE</span></pre>"}, {"lang": "Toka", "loc": 1, "block": "<pre> needs ctype\n \n [ i 1 - ] is i\n [ string.getLength 0 [ dup i + <a class=\"__cf_email__\" data-cfemail=\"741734\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> toupper over i + c! ] countedLoop ] is string.toUpper\n [ string.getLength 0 [ dup i + <a class=\"__cf_email__\" data-cfemail=\"543714\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> tolower over i + c! ] countedLoop ] is string.toLower\n \n \" alphaBETA\" string.toUpper type cr\n \" alphaBETA\" string.toLower type cr\n</pre>"}, {"lang": "TorqueScript", "loc": 1, "block": "<pre> $string = \"alphaBETA\";\n $upperCase = strUpr($string);\n $lowerCase = strLwr($string);\n</pre>"}, {"lang": "TUSCRIPT", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT,{}<br/>string=\"alphaBETA\"<br/>lowercase =EXCHANGE(string,\" {&amp;a} {-0-} \")<br/>uppercase1=EXCHANGE(string,\" {&amp;a} {-0+} \")<br/>uppercase2=CAPS    (string)<br/>PRINT lowercase<br/>PRINT uppercase1<br/>PRINT uppercase2<br/>\u00a0</pre>"}, {"lang": "UNIX Shell", "loc": 2, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw3\">echo</span> alphaBETA <span class=\"sy0\">|</span> <span class=\"kw2\">tr</span> <span class=\"st_h\">'[a-z]'</span> <span class=\"st_h\">'[A-Z]'</span>     <span class=\"co0\"># =&gt; ALPHABETA</span><br/><span class=\"kw3\">echo</span> alphaBETA <span class=\"sy0\">|</span> <span class=\"kw2\">tr</span> <span class=\"st_h\">'[A-Z]'</span> <span class=\"st_h\">'[a-z]'</span>     <span class=\"co0\"># =&gt; alphabeta</span></pre>"}, {"lang": "Ursa", "loc": 2, "block": "<pre class=\"text highlighted_source\">out (lower \"alphaBETA\") endl console<br/>out (upper \"alphaBETA\") endl console</pre>"}, {"lang": "Ursala", "loc": 8, "block": "<pre class=\"text highlighted_source\">#import std<br/>\u00a0<br/>to_upper = * -:~&amp; ~=`A-~p letters<br/>to_lower = * -:~&amp; ~=`A-~rlp letters<br/>\u00a0<br/>#show+<br/>\u00a0<br/>examples = &lt;to_upper 'alphaBETA',to_lower 'alphaBETA'&gt;</pre>"}, {"lang": "Vala", "loc": 7, "block": "<pre class=\"vala highlighted_source\">\u00a0<br/><span class=\"kw4\">string</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"alphaBeta\"</span><span class=\"sy0\">;</span><br/><span class=\"co1\">// stores ALPHABETA to string</span><br/><span class=\"kw4\">string</span> s_upper <span class=\"sy0\">=</span> s.<span class=\"me1\">up</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\">// stores alphabeta to string</span><br/><span class=\"kw4\">string</span> s_lower <span class=\"sy0\">=</span> s.<span class=\"me1\">down</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "VBA", "loc": 7, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> StringCase()<br/><span class=\"kw4\">Dim</span> s <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>s = <span class=\"st0\">\"alphaBETA\"</span><br/>Debug.<span class=\"kw4\">Print</span> UCase(s)<br/>Debug.<span class=\"kw4\">Print</span> LCase(s)<br/>Debug.<span class=\"kw4\">Print</span> WorksheetFunction.Proper(s)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "VBScript", "loc": 3, "block": "<pre class=\"text highlighted_source\">Dim MyWord<br/>MyWord = UCase(\"alphaBETA\")   ' Returns \"ALPHABETA\"<br/>MyWord = LCase(\"alphaBETA\")   ' Returns \"alphabeta\"</pre>"}, {"lang": "Vedit macro language", "loc": 4, "block": "<pre class=\"vedit highlighted_source\">#<span class=\"nu0\">1</span> <span class=\"sy0\">=</span> CP<br/>IT<span class=\"br0\">(</span><span class=\"st0\">\"alphaBETA\"</span><span class=\"br0\">)</span><br/>Case_Upper_Block<span class=\"br0\">(</span>#<span class=\"nu0\">1</span><span class=\"sy0\">,</span> CP<span class=\"br0\">)</span><br/>Case_Lower_Block<span class=\"br0\">(</span>#<span class=\"nu0\">1</span><span class=\"sy0\">,</span> CP<span class=\"br0\">)</span></pre>"}, {"lang": "XPL0", "loc": 18, "block": "<pre class=\"text highlighted_source\">string 0;                       \\use zero-terminated string convention<br/>include c:\\cxpl\\stdlib;         \\ToUpper, ToLower, and 'code' declarations<br/>\u00a0<br/>proc StrToUpper(S);             \\Convert string to uppercase characters<br/>char S;<br/>while S(0) do [S(0):= ToUpper(S(0));  S:=S+1];<br/>\u00a0<br/>proc StrToLower(S);             \\Convert string to lowercase characters<br/>char S;<br/>while S(0) do [S(0):= ToLower(S(0));  S:=S+1];<br/>\u00a0<br/>char Str;<br/>[Str:= \"alphaBETA\";<br/>StrToUpper(Str);<br/>Text(0, Str);  CrLf(0);<br/>StrToLower(Str);<br/>Text(0, Str);  CrLf(0);<br/>]</pre>"}, {"lang": "zkl", "loc": 3, "block": "<pre class=\"text highlighted_source\">s:=\"alphaBETA\";<br/>s.toLower(); //--&gt; \"alphabeta\"<br/>s.toUpper(); //--&gt; \"ALPHABETA\"</pre>"}]}