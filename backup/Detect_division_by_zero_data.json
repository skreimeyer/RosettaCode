{"task": "Detect_division_by_zero", "blocks": [{"lang": "8th", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>1 0 n:/ Inf? . cr<br/>\u00a0</pre>"}, {"lang": "ABAP", "loc": 8, "block": "<pre class=\"abap highlighted_source\"><a href=\"http://help.sap.com/abapdocu/en/ABAPREPORT.htm\"><span class=\"kw3\">report</span></a> zdiv_zero<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">data</span></a> x <span class=\"kw4\">type</span> i<span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPTRY.htm\"><span class=\"kw1\">try</span></a><span class=\"sy0\">.</span><br/>  x <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPCATCH.htm\"><span class=\"kw1\">catch</span></a> CX_SY_ZERODIVIDE<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">write</span></a> <span class=\"st0\">'Divide by zero.'</span><span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPENDTRY.htm\"><span class=\"kw1\">endtry</span></a><span class=\"sy0\">.</span>  <br/>\u00a0</pre>"}, {"lang": "Ada", "loc": 32, "block": "<pre class=\"ada highlighted_source\"><span class=\"co1\">-- Divide By Zero Detection</span><br/>\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_Io</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_Io</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Float_Text_Io</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Float_Text_Io</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Integer_Text_Io</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Integer_Text_Io</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Divide_By_Zero <span class=\"kw1\">is</span><br/>   Fnum\u00a0: Float\u00a0:= <span class=\"nu0\">1.0</span>;<br/>   Fdenom\u00a0: Float\u00a0:= <span class=\"nu0\">0.0</span>;<br/>   Fresult\u00a0: Float;<br/>   Inum\u00a0: Integer\u00a0:= <span class=\"nu0\">1</span>;<br/>   Idenom\u00a0: Integer\u00a0:= <span class=\"nu0\">0</span>;<br/>   Iresult\u00a0: Integer;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">begin</span><br/>      Put<span class=\"br0\">(</span><span class=\"st0\">\"Integer divide by zero: \"</span><span class=\"br0\">)</span>;<br/>      Iresult\u00a0:= Inum / Idenom;<br/>      Put<span class=\"br0\">(</span>Item =&gt; Iresult<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">exception</span><br/>      <span class=\"kw3\">when</span> Constraint_Error =&gt;<br/>         Put<span class=\"br0\">(</span><span class=\"st0\">\"Division by zero detected.\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span>;<br/>   New_Line;<br/>   Put<span class=\"br0\">(</span><span class=\"st0\">\"Floating point divide by zero: \"</span><span class=\"br0\">)</span>;<br/>   Fresult\u00a0:= Fnum / Fdenom;<br/>   <span class=\"kw1\">if</span> Fresult &gt; Float'Last <span class=\"kw2\">or</span> Fresult &lt; Float'First <span class=\"kw1\">then</span><br/>      Put<span class=\"br0\">(</span><span class=\"st0\">\"Division by zero detected (infinite value).\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">else</span><br/>      Put<span class=\"br0\">(</span>Item =&gt; Fresult, Aft =&gt; <span class=\"nu0\">9</span>, Exp =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   New_Line;<br/><span class=\"kw1\">end</span> Divide_By_Zero;</pre>"}, {"lang": "Aime", "loc": 21, "block": "<pre class=\"text highlighted_source\">integer<br/>divide(integer n, integer d)<br/>{<br/>    return n / d;<br/>}<br/>\u00a0<br/>integer<br/>can_divide(integer n, integer d)<br/>{<br/>    return\u00a0!trap(divide, n, d);<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    if (!can_divide(9, 0)) {<br/>        o_text(\"Division by zero.\\n\");<br/>    }<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 26, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> raise exception<span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> args<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  put<span class=\"br0\">(</span>stand error<span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"st0\">\"Exception: \"</span><span class=\"sy1\">,</span>args<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  stop<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> raise zero division error <span class=\"sy1\">:=</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <br/>  raise exception<span class=\"br0\">(</span><span class=\"st0\">\"integer division or modulo by zero\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> int div  <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> a<span class=\"sy1\">/</span>b<span class=\"sy1\">;</span><br/><span class=\"kw4\">PROC</span> int over <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span>  a<span class=\"sy1\">%</span>b<span class=\"sy1\">;</span><br/><span class=\"kw4\">PROC</span> int mod  <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> a<span class=\"sy1\">%*</span>b<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span><br/>  <span class=\"kw4\">OP</span> <span class=\"sy1\">/</span>  <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span> b <span class=\"sy1\">=</span> 0 <span class=\"sy1\">|</span> raise zero division error<span class=\"sy1\">;</span> <span class=\"kw7\">SKIP</span> <span class=\"sy1\">|</span> int div <span class=\"br0\">(</span>a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw4\">OP</span> <span class=\"sy1\">%</span>  <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span>  <span class=\"br0\">(</span> b <span class=\"sy1\">=</span> 0 <span class=\"sy1\">|</span> raise zero division error<span class=\"sy1\">;</span> <span class=\"kw7\">SKIP</span> <span class=\"sy1\">|</span> int over<span class=\"br0\">(</span>a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw4\">OP</span> <span class=\"sy1\">%*</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span>  <span class=\"br0\">(</span> b <span class=\"sy1\">=</span> 0 <span class=\"sy1\">|</span> raise zero division error<span class=\"sy1\">;</span> <span class=\"kw7\">SKIP</span> <span class=\"sy1\">|</span> int mod <span class=\"br0\">(</span>a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">PROC</span> a different handler <span class=\"sy1\">=</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>      put<span class=\"br0\">(</span>stand error<span class=\"sy1\">,</span><span class=\"br0\">(</span><span class=\"st0\">\"caught division by zero\"</span><span class=\"sy1\">,</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      stop<br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">INT</span> x<span class=\"sy1\">:=</span>1<span class=\"sy1\">,</span> y<span class=\"sy1\">:=</span>0<span class=\"sy1\">;</span><br/>  raise zero division error <span class=\"sy1\">:=</span> a different handler<span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span>x<span class=\"sy1\">/</span>y<span class=\"br0\">)</span><br/><span class=\"kw2\">END</span></pre>"}, {"lang": "ALGOL W", "loc": 28, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% integer division procedure                                                \u00a0%<br/>   \u00a0%     sets c to a divided by b, returns true if the division was OK,        \u00a0%<br/>   \u00a0%                                      false if there was division by zero  \u00a0%<br/>    logical procedure divideI ( integer value a, b; integer result c )\u00a0;<br/>    begin<br/>       \u00a0% set exception handling to allow integer division by zero to occur once\u00a0%<br/>        INTDIVZERO\u00a0:= EXCEPTION( false, 1, 0, false, \"INTDIVZERO\" );<br/>        c\u00a0:= a div b;<br/>        not XCPNOTED(INTDIVZERO)<br/>    end divideI\u00a0;<br/>   \u00a0% real division procedure                                                   \u00a0%<br/>   \u00a0%     sets c to a divided by b, returns true if the division was OK,        \u00a0%<br/>   \u00a0%                                      false if there was division by zero  \u00a0%<br/>    logical procedure divideR ( long real value a, b; long real result c )\u00a0;<br/>    begin<br/>       \u00a0% set exception handling to allow realdivision by zero to occur once    \u00a0%<br/>        DIVZERO\u00a0:= EXCEPTION( false, 1, 0, false, \"DIVZERO\" );<br/>        c\u00a0:= a / b;<br/>        not XCPNOTED(DIVZERO)<br/>    end divideR\u00a0;<br/>    integer c;<br/>    real    d;<br/>    write( divideI( 4, 2, c ) );\u00a0% prints false as no exception                 \u00a0%<br/>    write( divideI( 5, 0, c ) );\u00a0% prints true as division by zero was detected \u00a0%<br/>    write( divideR( 4, 2, d ) );\u00a0% prints false as no exception                 \u00a0%<br/>    write( divideR( 5, 0, d ) ) \u00a0% prints true as division by zero was detected \u00a0%<br/>end.</pre>"}, {"lang": "AutoHotkey", "loc": 8, "block": "<pre class=\"autohotkey highlighted_source\">ZeroDiv<span class=\"br0\">(</span>num1<span class=\"sy0\">,</span> num2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">If</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>num1<span class=\"sy0\">/</span>num2<span class=\"br0\">)</span>\u00a0!<span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% num1<span class=\"sy0\">/</span>num2<br/>  <span class=\"kw1\">Else</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">48</span><span class=\"sy0\">,</span> Warning<span class=\"sy0\">,</span> The result is not valid <span class=\"br0\">(</span>Divide By Zero<span class=\"br0\">)</span><span class=\"sy0\">.</span><br/><span class=\"br0\">}</span><br/>ZeroDiv<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"co1\">; is ok</span><br/>ZeroDiv<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"co1\">; divize by zero alert</span></pre>"}, {"lang": "BASIC", "loc": 11, "block": "<pre class=\"text highlighted_source\"> 100  REM TRY<br/> 110  ONERR  GOTO 200<br/> 120 D =  - 44 / 0<br/> 190  END<br/> 200  REM CATCH<br/> 210 E =  PEEK (222) &lt;  &gt; 133<br/> 220  POKE 216,0: REM ONERR OFF<br/> 230  IF E THEN  RESUME<br/> 240  CALL  - 3288: REM RECOVER<br/> 250  PRINT \"DIVISION BY ZERO\"<br/>\u00a0</pre>"}, {"lang": "Batch File", "loc": 5, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a dummy=5/0 2<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">errorlevel</span><span class=\"sy0\">%</span>==1073750993 <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> I caught a division by zero operation...<br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 0</pre>"}, {"lang": "C", "loc": 100, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;limits.h&gt;\t/* INT_MIN */</span><br/><span class=\"co2\">#include &lt;setjmp.h&gt;\t/* siglongjmp(), sigsetjmp() */</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;\t/* perror(), printf() */</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;\t/* exit() */</span><br/><span class=\"co2\">#include &lt;signal.h&gt;\t/* sigaction(), sigemptyset() */</span><br/>\u00a0<br/><span class=\"kw4\">static</span> sigjmp_buf fpe_env<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/> * This SIGFPE handler jumps to fpe_env.<br/> *<br/> * A SIGFPE handler must not return, because the program might retry<br/> * the division, which might cause an infinite loop. The only safe<br/> * options are to _exit() the program or to siglongjmp() out.<br/> */</span><br/><span class=\"kw4\">static</span> <span class=\"kw4\">void</span><br/>fpe_handler<span class=\"br0\">(</span><span class=\"kw4\">int</span> signal<span class=\"sy0\">,</span> siginfo_t <span class=\"sy0\">*</span>w<span class=\"sy0\">,</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>a<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tsiglongjmp<span class=\"br0\">(</span>fpe_env<span class=\"sy0\">,</span> w<span class=\"sy0\">-&gt;</span>si_code<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"coMULTI\">/* NOTREACHED */</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/> * Try to do x / y, but catch attempts to divide by zero.<br/> */</span><br/><span class=\"kw4\">void</span><br/>try_division<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> y<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">struct</span> sigaction act<span class=\"sy0\">,</span> old<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> code<span class=\"sy0\">;</span><br/>\t<span class=\"coMULTI\">/*<br/>\t * The result must be volatile, else C compiler might delay<br/>\t * division until after sigaction() restores old handler.<br/>\t */</span><br/>\t<span class=\"kw4\">volatile</span> <span class=\"kw4\">int</span> result<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/*<br/>\t * Save fpe_env so that fpe_handler() can jump back here.<br/>\t * sigsetjmp() returns zero.<br/>\t */</span><br/>\tcode <span class=\"sy0\">=</span> sigsetjmp<span class=\"br0\">(</span>fpe_env<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>code <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"coMULTI\">/* Install fpe_handler() to trap SIGFPE. */</span><br/>\t\tact.<span class=\"me1\">sa_sigaction</span> <span class=\"sy0\">=</span> fpe_handler<span class=\"sy0\">;</span><br/>\t\tsigemptyset<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>act.<span class=\"me1\">sa_mask</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tact.<span class=\"me1\">sa_flags</span> <span class=\"sy0\">=</span> SA_SIGINFO<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>sigaction<span class=\"br0\">(</span>SIGFPE<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>act<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>old<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/perror.html\"><span class=\"kw3\">perror</span></a><span class=\"br0\">(</span><span class=\"st0\">\"sigaction\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* Do division. */</span><br/>\t\tresult <span class=\"sy0\">=</span> x <span class=\"sy0\">/</span> y<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/*<br/>\t\t * Restore old hander, so that SIGFPE cannot jump out<br/>\t\t * of a call to printf(), which might cause trouble.<br/>\t\t */</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>sigaction<span class=\"br0\">(</span>SIGFPE<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>old<span class=\"sy0\">,</span> NULL<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/perror.html\"><span class=\"kw3\">perror</span></a><span class=\"br0\">(</span><span class=\"st0\">\"sigaction\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d /\u00a0%d is\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> result<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"coMULTI\">/*<br/>\t\t * We caught SIGFPE. Our fpe_handler() jumped to our<br/>\t\t * sigsetjmp() and passes a nonzero code.<br/>\t\t *<br/>\t\t * But first, restore old handler.<br/>\t\t */</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>sigaction<span class=\"br0\">(</span>SIGFPE<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>old<span class=\"sy0\">,</span> NULL<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/perror.html\"><span class=\"kw3\">perror</span></a><span class=\"br0\">(</span><span class=\"st0\">\"sigaction\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* FPE_FLTDIV should never happen with integers. */</span><br/>\t\t<span class=\"kw1\">switch</span> <span class=\"br0\">(</span>code<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">case</span> FPE_INTDIV<span class=\"sy0\">:</span> <span class=\"coMULTI\">/* integer division by zero */</span><br/>\t\t<span class=\"kw1\">case</span> FPE_FLTDIV<span class=\"sy0\">:</span> <span class=\"coMULTI\">/* float division by zero */</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d /\u00a0%d: caught division by zero!<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d /\u00a0%d: caught mysterious error!<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Try some division. */</span><br/><span class=\"kw4\">int</span><br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\ttry_division<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">44</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\ttry_division<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">44</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\ttry_division<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\ttry_division<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\ttry_division<span class=\"br0\">(</span>INT_MIN<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 25, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;iostream&gt;</span><br/><span class=\"co2\">#include&lt;csignal&gt; /* for signal */</span><br/><span class=\"co2\">#include&lt;cstdlib&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> fpe_handler<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"kw4\">signal</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Floating Point Exception: division by zero\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"kw3\">exit</span><span class=\"br0\">(</span><span class=\"kw4\">signal</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"co1\">// Register floating-point exception handler.</span><br/>    <span class=\"kw4\">signal</span><span class=\"br0\">(</span><span class=\"kw2\">SIGFPE</span>, fpe_handler<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> b <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a<span class=\"sy2\">/</span>b <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 16, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaCode <span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>               <span class=\"kw4\">int</span> z <span class=\"sy0\">=</span> x <span class=\"sy0\">/</span> y<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span>DivideByZeroException e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 12, "block": "<pre class=\"text highlighted_source\">shared void run() {<br/>\u00a0<br/>\t//integers divided by zero throw an exception<br/>\ttry {<br/>\t\tvalue a = 1 / 0;<br/>\t} catch (Exception e) {<br/>\t\te.printStackTrace();<br/>\t}<br/>\u00a0<br/>\t//floats divided by zero produce infinity<br/>\tprint(1.0 / 0 == infinity then \"division by zero!\" else \"not division by zero!\");<br/>}</pre>"}, {"lang": "Clojure", "loc": 7, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defn safe-/ <span class=\"br0\">[</span>x y<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>try <span class=\"br0\">(</span>/ x y<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">catch</span> ArithmeticException _<br/>      <span class=\"br0\">(</span>println <span class=\"st0\">\"Division by zero caught!\"</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> x <span class=\"nu0\">0</span><span class=\"br0\">)</span>   Double/POSITIVE_INFINITY<br/>            <span class=\"br0\">(</span>zero? x<span class=\"br0\">)</span> Double/NaN<br/>            <span class=\"sy0\">:</span><span class=\"me1\">else</span>     Double/NEGATIVE_INFINITY<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 4, "block": "<pre class=\"cobol highlighted_source\"><span class=\"kw2\">DIVIDE</span> foo <span class=\"kw3\">BY</span> bar <span class=\"kw2\">GIVING</span> foobar<br/>    <span class=\"kw3\">ON</span> <span class=\"kw3\">SIZE</span> <span class=\"kw3\">ERROR</span><br/>        <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">\"Division by zero detected!\"</span><br/>END-<span class=\"kw2\">DIVIDE</span></pre>"}, {"lang": "Common Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>handler-<span class=\"kw1\">case</span> <span class=\"br0\">(</span>/ x y<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>division-by-zero <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"division by zero caught!~%\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 53, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">string</span> divCheck<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T numer<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> T denom<span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>isIntegral<span class=\"sy0\">!</span>T <span class=\"sy0\">||</span> isFloatingPoint<span class=\"sy0\">!</span>T<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Unqual<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw2\">typeof</span><span class=\"br0\">(</span>numer <span class=\"sy0\">/</span> denom<span class=\"br0\">)</span><span class=\"br0\">)</span> result<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">string</span> msg<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">static</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isIntegral<span class=\"sy0\">!</span>T<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">try</span> <span class=\"br0\">{</span><br/>            result <span class=\"sy0\">=</span> numer <span class=\"sy0\">/</span> denom<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw2\">catch</span><span class=\"br0\">(</span><span class=\"kw3\">Error</span> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            msg <span class=\"sy0\">=</span> <span class=\"st0\">\"| \"</span> <span class=\"sy0\">~</span> e.<span class=\"me1\">msg</span> <span class=\"sy0\">~</span> <span class=\"st0\">\" (by Error)\"</span><span class=\"sy0\">;</span><br/>            result <span class=\"sy0\">=</span> T.<span class=\"me1\">max</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <span class=\"co1\">// Floating Point Type.</span><br/>        result <span class=\"sy0\">=</span> numer <span class=\"sy0\">/</span> denom<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>numer.<span class=\"me1\">isNormal</span> <span class=\"sy0\">&amp;&amp;</span> result.<span class=\"me1\">isInfinity</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            msg <span class=\"sy0\">=</span> <span class=\"st0\">\"| Division by Zero\"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>result <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>result.<span class=\"me1\">isNormal</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>numer.<span class=\"me1\">isNaN</span><span class=\"br0\">)</span><br/>                msg <span class=\"sy0\">=</span> <span class=\"st0\">\"| NaN numerator\"</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>denom.<span class=\"me1\">isNaN</span><span class=\"br0\">)</span><br/>                msg <span class=\"sy0\">=</span> <span class=\"st0\">\"| NaN denominator\"</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>numer.<span class=\"me1\">isInfinity</span><span class=\"br0\">)</span><br/>                msg <span class=\"sy0\">=</span> <span class=\"st0\">\"| Inf numerator\"</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>                msg <span class=\"sy0\">=</span> <span class=\"st0\">\"| NaN (Zero Division by Zero)\"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> format<span class=\"br0\">(</span><span class=\"st0\">\"%5s\u00a0%s\"</span><span class=\"sy0\">,</span> format<span class=\"br0\">(</span><span class=\"st0\">\"%1.1g\"</span><span class=\"sy0\">,</span> <span class=\"kw4\">real</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> msg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Division with check:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"int     1/ 0:  \u00a0%s\"</span><span class=\"sy0\">,</span> divCheck<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"ubyte   1/ 0:  \u00a0%s\"</span><span class=\"sy0\">,</span> divCheck<span class=\"br0\">(</span><span class=\"kw4\">ubyte</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw4\">ubyte</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"real    1/ 0:  \u00a0%s\"</span><span class=\"sy0\">,</span> divCheck<span class=\"br0\">(</span>1.0L<span class=\"sy0\">,</span> 0.0L<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"real   -1/ 0:  \u00a0%s\"</span><span class=\"sy0\">,</span> divCheck<span class=\"br0\">(</span><span class=\"sy0\">-</span>1.0L<span class=\"sy0\">,</span> 0.0L<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"real    0/ 0:  \u00a0%s\"</span><span class=\"sy0\">,</span> divCheck<span class=\"br0\">(</span>0.0L<span class=\"sy0\">,</span> 0.0L<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"real   -4/-2:  \u00a0%s\"</span><span class=\"sy0\">,</span> divCheck<span class=\"br0\">(</span><span class=\"sy0\">-</span>4.0L<span class=\"sy0\">,-</span>2.0L<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"real    2/-inf:\u00a0%s\"</span><span class=\"sy0\">,</span> divCheck<span class=\"br0\">(</span>2.0L<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"kw4\">real</span>.<span class=\"me1\">infinity</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"real -inf/-2:  \u00a0%s\"</span><span class=\"sy0\">,</span> divCheck<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"kw4\">real</span>.<span class=\"me1\">infinity</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>2.0L<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"real +inf/-2:  \u00a0%s\"</span><span class=\"sy0\">,</span> divCheck<span class=\"br0\">(</span><span class=\"kw4\">real</span>.<span class=\"me1\">infinity</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>2.0L<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"real  nan/-2:  \u00a0%s\"</span><span class=\"sy0\">,</span> divCheck<span class=\"br0\">(</span><span class=\"kw4\">real</span>.<span class=\"me1\">nan</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>2.0L<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"real   -2/ nan:\u00a0%s\"</span><span class=\"sy0\">,</span> divCheck<span class=\"br0\">(</span><span class=\"sy0\">-</span>2.0L<span class=\"sy0\">,</span> <span class=\"kw4\">real</span>.<span class=\"me1\">nan</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"real  nan/ 0:  \u00a0%s\"</span><span class=\"sy0\">,</span> divCheck<span class=\"br0\">(</span><span class=\"kw4\">real</span>.<span class=\"me1\">nan</span><span class=\"sy0\">,</span> 0.0L<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"real  inf/ inf:\u00a0%s\"</span><span class=\"sy0\">,</span><br/>             divCheck<span class=\"br0\">(</span><span class=\"kw4\">real</span>.<span class=\"me1\">infinity</span><span class=\"sy0\">,</span> <span class=\"kw4\">real</span>.<span class=\"me1\">infinity</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"real  nan/ nan:\u00a0%s\"</span><span class=\"sy0\">,</span> divCheck<span class=\"br0\">(</span><span class=\"kw4\">real</span>.<span class=\"me1\">nan</span><span class=\"sy0\">,</span> <span class=\"kw4\">real</span>.<span class=\"me1\">nan</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 11, "block": "<pre class=\"text highlighted_source\">divcheck x y:<br/>    true<br/>    try:<br/>        drop / x y<br/>    catch value-error:<br/>        not<br/>\u00a0<br/>if divcheck 1 0:<br/>   \u00a0!print \"Okay\"<br/>else:<br/>   \u00a0!print \"Division by zero\"</pre>"}, {"lang": "Delphi", "loc": 18, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> DivideByZero<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> SysUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  a<span class=\"sy1\">,</span> b<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  a <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">try</span><br/>    <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>a <span class=\"sy3\">/</span> b<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">except</span><br/>    <span class=\"kw1\">on</span> e<span class=\"sy1\">:</span> EZeroDivide <span class=\"kw1\">do</span><br/>      <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>e<span class=\"sy1\">.</span><span class=\"kw1\">Message</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "E", "loc": 8, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> divide<span class=\"br0\">(</span>numerator<span class=\"sy0\">,</span> denominator<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> floatQuotient <span class=\"sy0\">:=</span> numerator <span class=\"sy0\">/</span> denominator<br/>    <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>floatQuotient.<span class=\"me1\">isNaN</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> floatQuotient.<span class=\"me1\">isInfinite</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        return <span class=\"br0\">[</span><span class=\"st0\">\"zero denominator\"</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/else\"><span class=\"kw2\">else</span></a> <span class=\"br0\">{</span><br/>        return <span class=\"br0\">[</span><span class=\"st0\">\"ok\"</span><span class=\"sy0\">,</span> floatQuotient<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "ECL", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>DBZ(REAL8 Dividend,INTEGER8 Divisor)\u00a0:= Quotient/Divisor;<br/>\u00a0<br/>#option ('divideByZero', 'zero');<br/>DBZ(10,0); //returns 0.0<br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 21, "block": "<pre class=\"eiffel highlighted_source\"><span class=\"kw1\">class</span> MAIN<br/>    <span class=\"kw2\">creation</span> main<br/>    <span class=\"kw1\">feature</span> main <span class=\"kw2\">is</span><br/>        <span class=\"kw2\">local</span><br/>            x, y<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a>;<br/>            retried<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a>;<br/>        <span class=\"kw2\">do</span><br/>            x <span class=\"sy0\">:=</span> <span class=\"nu0\">42</span>;<br/>            y <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\u00a0<br/>            <span class=\"kw2\">if</span> <span class=\"kw2\">not</span> retried <span class=\"kw2\">then</span><br/>                io.<span class=\"me1\">put_real</span><span class=\"br0\">(</span>x <span class=\"sy0\">/</span> y<span class=\"br0\">)</span>;<br/>            <span class=\"kw2\">else</span><br/>                print<span class=\"br0\">(</span><span class=\"st0\">\"NaN<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw2\">end</span><br/>        <span class=\"kw2\">rescue</span><br/>            print<span class=\"br0\">(</span><span class=\"st0\">\"Caught division by zero!<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span>;<br/>            retried <span class=\"sy0\">:=</span> <span class=\"kw3\">True</span>;<br/>            <span class=\"kw2\">retry</span><br/>        <span class=\"kw2\">end</span><br/><span class=\"kw2\">end</span></pre>"}, {"lang": "Ela", "loc": 6, "block": "<pre class=\"text highlighted_source\">open core number<br/>\u00a0<br/>x /. y = try Some (x `div` y) with<br/>             _ = None<br/>\u00a0<br/>(12 /. 2, 12 /. 0)</pre>"}, {"lang": "Elixir", "loc": 15, "block": "<pre class=\"text highlighted_source\">defmodule Division do<br/>  def by_zero?(x,y) do<br/>    try do<br/>      _ = x / y<br/>      false<br/>    rescue<br/>      ArithmeticError -&gt; true<br/>    end<br/>  end<br/>end<br/>\u00a0<br/>[{2, 3}, {3, 0}, {0, 5}, {0, 0}, {2.0, 3.0}, {3.0, 0.0}, {0.0, 5.0}, {0.0, 0.0}]<br/>|&gt; Enum.each(fn {x,y} -&gt;<br/>  IO.puts \"#{x} / #{y}\\tdivision by zero  #{Division.by_zero?(x,y)}\"<br/>end)</pre>"}, {"lang": "Emacs Lisp", "loc": 4, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>condition-<span class=\"kw1\">case</span> <span class=\"kw1\">nil</span><br/>    <span class=\"br0\">(</span>/ <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>arith-<span class=\"kw1\">error</span><br/>   <span class=\"br0\">(</span>message <span class=\"st0\">\"Divide by zero (either integer or float)\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 5, "block": "<pre class=\"erlang highlighted_source\"><span class=\"re3\">div_check</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">case</span> <span class=\"kw1\">catch</span> <span class=\"re5\">X</span><span class=\"sy3\">/</span><span class=\"re5\">Y</span> <span class=\"kw1\">of</span><br/>        <span class=\"br0\">{</span><span class=\"st_h\">'EXIT'</span><span class=\"sy1\">,</span><span class=\"re5\">_</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/>        <span class=\"re5\">_</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM DIV_BY_ZERO<br/>\u00a0<br/>EXCEPTION<br/>   IF ERR=11 THEN PRINT(\"Division by Zero\") END IF<br/>END EXCEPTION<br/>\u00a0<br/>BEGIN<br/>  PRINT(0/3)<br/>  PRINT(3/0)<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 9, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> detectDivideZero <span class=\"br0\">(</span>x\u00a0: <span class=\"kw4\">int</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>y\u00a0: <span class=\"kw4\">int</span><span class=\"br0\">)</span>:<span class=\"kw4\">int</span> <span class=\"kw4\">option</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">try</span><br/>        Some<span class=\"br0\">(</span>x <span class=\"sy0\">/</span> y<span class=\"br0\">)</span><br/>    <span class=\"kw1\">with</span><br/>        |\u00a0:? System.<span class=\"me1\">ArithmeticException</span> <span class=\"sy0\">-&gt;</span> None<br/>\u00a0<br/>\u00a0<br/>printfn <span class=\"st0\">\"12 divided by 3 is\u00a0%A\"</span> <span class=\"br0\">(</span>detectDivideZero <span class=\"nu0\">12</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>printfn <span class=\"st0\">\"1 divided by 0 is\u00a0%A\"</span> <span class=\"br0\">(</span>detectDivideZero <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 4, "block": "<pre class=\"text highlighted_source\">USE: math.floats.env<br/>\u00a0<br/>: try-div ( a b -- ) <br/>    '[ { +fp-zero-divide+ } [ _ _ /f . ] with-fp-traps ] try\u00a0;</pre>"}, {"lang": "Fancy", "loc": 8, "block": "<pre class=\"text highlighted_source\">def divide: x by: y {<br/>  try {<br/>    x / y<br/>  } catch DivisionByZeroError =&gt; e {<br/>    e message println # prints error message<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 2, "block": "<pre class=\"text highlighted_source\">: safe-/ ( x y -- x/y )<br/>  ['] / catch -55 = if cr .\" divide by zero!\" 2drop 0 then\u00a0;</pre>"}, {"lang": "Fortran", "loc": 43, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span>  rosetta_divbyzero<br/>   <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>   <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">rdp</span> <span class=\"sy0\">=</span> <span class=\"kw3\">kind</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>.<span class=\"me1\">d0</span><span class=\"br0\">)</span><br/>   <span class=\"kw3\">real</span><span class=\"br0\">(</span>rdp<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">normal</span>,zero<br/>\u00a0<br/>   normal <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>.<span class=\"me1\">d0</span><br/>   zero <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>.<span class=\"me1\">d0</span><br/>\u00a0<br/>   <span class=\"kw1\">call</span> div_by_zero_check<span class=\"br0\">(</span>normal,zero<span class=\"br0\">)</span><br/>\u00a0<br/> <span class=\"kw1\">contains</span><br/>\u00a0<br/>   <span class=\"kw1\">subroutine</span>  div_by_zero_check<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><br/>      <span class=\"kw3\">use</span>, <span class=\"kw3\">intrinsic</span>  <span class=\"sy0\">::</span> <span class=\"me2\">ieee_exceptions</span><br/>      <span class=\"kw3\">use</span>, <span class=\"kw3\">intrinsic</span>  <span class=\"sy0\">::</span> <span class=\"me2\">ieee_arithmetic</span><br/>      <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>      <span class=\"kw3\">real</span><span class=\"br0\">(</span>rdp<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span>,y<br/>\u00a0<br/>      <span class=\"kw3\">real</span><span class=\"br0\">(</span>rdp<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">check</span><br/>      <span class=\"kw3\">type</span><span class=\"br0\">(</span>ieee_status_type<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">status_value</span><br/>      <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">flag</span><br/>      flag <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>      <span class=\"co1\">! Get the flags</span><br/>      <span class=\"kw1\">call</span> ieee_get_status<span class=\"br0\">(</span>status_value<span class=\"br0\">)</span><br/>      <span class=\"co1\">! Set the flags quiet</span><br/>      <span class=\"kw1\">call</span> ieee_set_flag<span class=\"br0\">(</span>ieee_divide_by_zero,<span class=\"kw2\">.<span class=\"me1\">false</span>.</span><span class=\"br0\">)</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"st0\">\"Inf supported? \"</span>,ieee_support_inf<span class=\"br0\">(</span>check<span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"co1\">! Calculation involving exception handling</span><br/>      check <span class=\"sy0\">=</span> x<span class=\"sy0\">/</span>y<br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"st0\">\"Is check finite?\"</span>,ieee_is_finite<span class=\"br0\">(</span>check<span class=\"br0\">)</span>, check<br/>\u00a0<br/>      <span class=\"kw1\">call</span> ieee_get_flag<span class=\"br0\">(</span>ieee_divide_by_zero, flag<span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>flag<span class=\"br0\">)</span> write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"st0\">\"Warning!  Division by zero detected\"</span><br/>\u00a0<br/>      <span class=\"co1\">! Restore the flags</span><br/>      <span class=\"kw1\">call</span> ieee_set_status<span class=\"br0\">(</span>status_value<span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> div_by_zero_check<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> rosetta_divbyzero<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 25, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Const</span> divByZeroResult <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = -<span class=\"nu0\">9223372036854775808</span> <br/>\u00a0<br/><span class=\"kw1\">Sub</span> CheckForDivByZero<span class=\"br0\">(</span>result <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> result = divByZeroResult <span class=\"kw1\">Then</span> <br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"Division by Zero\"</span><br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"Division by Non-Zero\"</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span> <br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> x, y<br/>\u00a0<br/>x = <span class=\"nu0\">0</span>\u00a0: y = <span class=\"nu0\">0</span><br/>CheckForDivByZero<span class=\"br0\">(</span>x/y<span class=\"br0\">)</span> <span class=\"co1\">' automatic conversion to type of parameter which is Integer</span><br/>x = <span class=\"nu0\">1</span><br/>CheckForDivByZero<span class=\"br0\">(</span>x/y<span class=\"br0\">)</span><br/>x = -<span class=\"nu0\">1</span><br/>CheckForDivByZero<span class=\"br0\">(</span>x/y<span class=\"br0\">)</span><br/>y = <span class=\"nu0\">1</span><br/>CheckForDivByZero<span class=\"br0\">(</span>x/y<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to exit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "FutureBasic", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>on error stop<br/>dim as long a<br/>print a / 0<br/>\u00a0</pre>"}, {"lang": "Gambas", "loc": 6, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/try\"><span class=\"kw1\">Try</span></a> <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"nu0\">0</span><br/><a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/error\"><span class=\"kw1\">Error</span></a> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <a href=\"http://gambasdoc.org/help/lang/error\"><span class=\"kw1\">Error</span></a>.<span class=\"me1\">Text</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 16, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> divCheck<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>q <span class=\"kw4\">int</span><span class=\"sy1\">,</span> ok <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">defer</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw3\">recover</span><span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}()</span><br/>    q <span class=\"sy2\">=</span> x <span class=\"sy3\">/</span> y<br/>    <span class=\"kw1\">return</span> q<span class=\"sy1\">,</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>divCheck<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>divCheck<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 4, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> dividesByZero <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20double\"><span class=\"kw4\">double</span></a> n, <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20double\"><span class=\"kw4\">double</span></a> d <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> <span class=\"sy0\">!</span> n.<span class=\"me1\">infinite</span>\u00a0: <span class=\"st0\">'Algorithm fails if the numerator is already infinite.'</span><br/>    <span class=\"br0\">(</span>n/d<span class=\"br0\">)</span>.<span class=\"me1\">infinite</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>n/d<span class=\"br0\">)</span>.<span class=\"me1\">naN</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 3, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Control<span class=\"sy0\">.</span>Exception <span class=\"kw1\">as</span> C<br/>check x y <span class=\"sy0\">=</span> C<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:catch\"><span class=\"kw3\">catch</span></a> <span class=\"br0\">(</span>x `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` y `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:seq\"><span class=\"kw3\">seq</span></a>` <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> False<span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>\\<span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> True<span class=\"br0\">)</span></pre>"}, {"lang": "HicEst", "loc": 7, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">FUNCTION</span> zero_divide<span class=\"br0\">(</span>num<span class=\"sy1\">,</span> denom<span class=\"br0\">)</span><br/>    <span class=\"kw1\">XEQ</span><span class=\"br0\">(</span> num<span class=\"sy1\">//</span> <span class=\"st0\">\"/\"</span> <span class=\"sy1\">//</span> denom<span class=\"sy1\">,</span>  <span class=\"sy1\">*</span><span class=\"nu0\">99</span><span class=\"br0\">)</span> <span class=\"co1\">! on error jump to label 99</span><br/>    zero_divide <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>                <span class=\"co1\">! division OK</span><br/>    <span class=\"kw1\">RETURN</span><br/>\u00a0<br/> <span class=\"nu0\">99</span> zero_divide <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">END</span></pre>"}, {"lang": "HolyC", "loc": 5, "block": "<pre class=\"text highlighted_source\">try {<br/>  Print(\"%d\\n\", 10 / 0);<br/>} catch {<br/>  Print(\"Divide by zero\");<br/>}</pre>"}, {"lang": "i", "loc": 15, "block": "<pre class=\"text highlighted_source\">//Division by zero is defined in 'i' so the result can be checked to determine division by zero.<br/>concept IsDivisionByZero(a, b) {<br/>\tc = a/b<br/>\tif c = 0 and a - 0 or a = 0 and c &gt; 0<br/>\t\tprint( a, \"/\", b, \" is a division by zero.\")<br/>\t\treturn<br/>\tend<br/>\tprint( a, \"/\", b, \" is not division by zero.\")<br/>}<br/>\u00a0<br/>software {<br/>\tIsDivisionByZero(5, 0)<br/>\tIsDivisionByZero(5, 2)<br/>\tIsDivisionByZero(0, 0)<br/>}</pre>"}, {"lang": "IDL", "loc": 1, "block": "<pre class=\"idl highlighted_source\">if not finite<span class=\"br0\">(</span> &lt;i&gt;expression&lt;<span class=\"sy0\">/</span>i&gt; <span class=\"br0\">)</span> then <span class=\"sy0\">...</span></pre>"}, {"lang": "Icon and Unicon", "loc": 4, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"sy1\">&amp;</span><span class=\"kw3\">error</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span><br/>udef <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">/</span> <span class=\"nu0\">0</span> <span class=\"sy1\">|</span> <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"Run-time error \"</span><span class=\"sy1\">,</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">errornumber</span><span class=\"sy1\">,</span> <span class=\"st0\">\"\u00a0: \"</span><span class=\"sy1\">,</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">errortext</span><span class=\"sy1\">,</span><span class=\"st0\">\" in line #\"</span><span class=\"sy1\">,&amp;</span><span class=\"kw3\">line</span><span class=\"sy1\">,</span><span class=\"st0\">\" - converted to failure\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">funnydiv=: <span class=\"nu0\">0</span> { [: <span class=\"sy0\">(</span>,:<span class=\"st_h\">'division by zero detected'</span><span class=\"sy0\">)</span>\"<span class=\"nu0\">_</span>^:<span class=\"sy0\">(</span><span class=\"nu0\">_</span> e. |@,<span class=\"sy0\">)</span> <span class=\"sy0\">(</span>,&gt;:<span class=\"sy0\">)</span>@:<span class=\"sy0\">(</span>,:^:<span class=\"sy0\">(</span><span class=\"nu0\">0</span>&lt;#@$<span class=\"sy0\">))</span>@[\u00a0%\"<span class=\"nu0\">_1</span> <span class=\"nu0\">_</span> ]</pre>"}, {"lang": "Java", "loc": 3, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> infinity<span class=\"br0\">(</span><span class=\"kw4\">double</span> numer, <span class=\"kw4\">double</span> denom<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>.<span class=\"me1\">isInfinite</span><span class=\"br0\">(</span>numer<span class=\"sy0\">/</span>denom<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 7, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> divByZero<span class=\"br0\">(</span>dividend<span class=\"sy0\">,</span>divisor<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> quotient<span class=\"sy0\">=</span>dividend<span class=\"sy0\">/</span>divisor<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>isNaN<span class=\"br0\">(</span>quotient<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"co1\">//Can be changed to whatever is desired by the programmer to be 0, false, or Infinity</span><br/>        <span class=\"kw1\">return</span> quotient<span class=\"sy0\">;</span> <span class=\"co1\">//Will return Infinity or -Infinity in cases of, for example, 5/0 or -7/0 respectively</span><br/><span class=\"br0\">}</span><br/>alert<span class=\"br0\">(</span>divByZero<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">def div(x;y): if y==0 then error(\"NaN\") else x/y end;</pre>"}, {"lang": "Julia", "loc": 6, "block": "<pre class=\"text highlighted_source\">isdefinite(n::Number) =\u00a0!isnan(n) &amp;&amp;\u00a0!isinf(n)<br/>\u00a0<br/>for n in (1, 1//1, 1.0, 1im, 0)<br/>    d = n / 0<br/>    println(\"Dividing $n by 0 \", isdefinite(d)\u00a0? \"results in $d.\"\u00a0: \"yields an indefinite value ($d).\")<br/>end</pre>"}, {"lang": "Kotlin", "loc": 20, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1</span><br/>\u00a0<br/>fun divideByZero<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>        x / y<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a><span class=\"br0\">(</span>e<span class=\"sy0\">:</span> ArithmeticException<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>divideByZero<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Attempted to divide by zero\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>        <span class=\"sy0\">@</span>Suppress<span class=\"br0\">(</span><span class=\"st0\">\"DIVISION_BY_ZERO\"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"$x / $y = ${x / y}\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LabVIEW", "loc": 13, "block": "<pre class=\"text highlighted_source\">define dividehandler(a,b) =&gt; {<br/>\t(<br/>\t\t#a-&gt;isNotA(::integer) &amp;&amp; #a-&gt;isNotA(::decimal) ||<br/>\t\t#b-&gt;isNotA(::integer) &amp;&amp; #b-&gt;isNotA(::decimal) <br/>\t)\u00a0? return 'Error: Please supply all params as integers or decimals'<br/>\tprotect =&gt; {<br/>\t\thandle_error =&gt; { return 'Error: Divide by zero' }<br/>\t\tlocal(x = #a / #b)<br/>\t\treturn #x<br/>\t}<br/>}<br/>\u00a0<br/>dividehandler(1,0)</pre>"}, {"lang": "Lasso", "loc": 13, "block": "<pre class=\"text highlighted_source\">define dividehandler(a,b) =&gt; {<br/>\t(<br/>\t\t#a-&gt;isNotA(::integer) &amp;&amp; #a-&gt;isNotA(::decimal) ||<br/>\t\t#b-&gt;isNotA(::integer) &amp;&amp; #b-&gt;isNotA(::decimal) <br/>\t)\u00a0? return 'Error: Please supply all params as integers or decimals'<br/>\tprotect =&gt; {<br/>\t\thandle_error =&gt; { return 'Error: Divide by zero' }<br/>\t\tlocal(x = #a / #b)<br/>\t\treturn #x<br/>\t}<br/>}<br/>\u00a0<br/>dividehandler(1,0)</pre>"}, {"lang": "Lingo", "loc": 9, "block": "<pre class=\"text highlighted_source\">on div (a, b)<br/>  -- for simplicity type check of vars omitted<br/>  res = value(\"float(a)/b\")<br/>  if voidP(res) then<br/>    _player.alert(\"Division by zero!\")<br/>  else<br/>    return res<br/>  end if<br/>end</pre>"}, {"lang": "Lua", "loc": 5, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> div<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>  quot <span class=\"sy0\">=</span> a<span class=\"sy0\">/</span>b<br/>  <span class=\"kw1\">if</span> quot <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw3\">error</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> quot<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "M4", "loc": 1, "block": "<pre class=\"text highlighted_source\">ifelse(eval(2/0),`',`detected divide by zero or some other error of some kind')</pre>"}, {"lang": "Maple", "loc": 1, "block": "<pre class=\"text highlighted_source\">1/0; # Here is the default behavior.</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">Check[2/0, Print[\"division by 0\"], Power::infy]</pre>"}, {"lang": "MATLAB", "loc": 3, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> <span class=\"br0\">[</span>isDividedByZero<span class=\"br0\">]</span> = dividebyzero<span class=\"br0\">(</span>numerator, denomenator<span class=\"br0\">)</span>    <br/>   isDividedByZero = isinf<span class=\"br0\">(</span> numerator/denomenator <span class=\"br0\">)</span>;<br/>   <span class=\"co1\">% If isDividedByZero equals 1, divide by zero occured.</span></pre>"}, {"lang": "Maxima", "loc": 7, "block": "<pre class=\"text highlighted_source\">f(a, b)\u00a0:= block([q: errcatch(a / b)], if emptyp(q) then 'error else q[1]);<br/>\u00a0<br/>f(5, 6);<br/>5 / 6<br/>\u00a0<br/>f(5, 0;)<br/>'error</pre>"}, {"lang": "MAXScript", "loc": 1, "block": "<pre class=\"text highlighted_source\">if not bit.isFinite (&lt;i&gt;expression&lt;/i&gt;) then...</pre>"}, {"lang": "MUMPS", "loc": 11, "block": "<pre class=\"text highlighted_source\">DIV(A,B)\u00a0;Divide A by B, and watch for division by zero<br/>\u00a0;The ANSI error code for division by zero is \"M9\".<br/>\u00a0;$ECODE errors are surrounded by commas when set.<br/> NEW $ETRAP<br/> SET $ETRAP=\"GOTO DIVFIX^ROSETTA\"<br/> SET D=(A/B)<br/> SET $ETRAP=\"\"<br/> QUIT D<br/>DIVFIX<br/> IF $FIND($ECODE,\",M9,\")&gt;1 WRITE\u00a0!,\"Error: Division by zero\" SET $ECODE=\"\" QUIT \"\"<br/> QUIT \"\"\u00a0; Fall through for other errors</pre>"}, {"lang": "mIRC Scripting Language", "loc": 7, "block": "<pre class=\"mirc highlighted_source\"><span class=\"kw2\">var</span> <span class=\"re1\">%n</span> = <span class=\"re0\">$rand</span><span class=\"br0\">(</span>0,1<span class=\"br0\">)</span><br/><span class=\"kw2\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$calc</span><span class=\"br0\">(</span>1<span class=\"sy0\">/</span> <span class=\"re1\">%n</span><span class=\"br0\">)</span> == <span class=\"re0\">$calc</span><span class=\"br0\">(</span><span class=\"br0\">(</span>1<span class=\"sy0\">/</span> <span class=\"re1\">%n</span><span class=\"br0\">)</span>+1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://www.mirc.com/echo\"><span class=\"kw3\">echo</span></a> <span class=\"re4\">-ag</span> Divides By Zero<br/><span class=\"br0\">}</span><br/><span class=\"kw2\">else</span> <span class=\"br0\">{</span><br/>  <a href=\"http://www.mirc.com/echo\"><span class=\"kw3\">echo</span></a> <span class=\"re4\">-ag</span> Does Not Divide By Zero<br/><span class=\"br0\">}</span></pre>"}, {"lang": "NetLogo", "loc": 23, "block": "<pre class=\"text highlighted_source\">;; Division by zero detection using CAREFULLY<br/>;; The CAREFULLY clause exists in NetLogo since version 2.0<br/>;;   In prior versions of NetLogo, you must examine the divisor prior to performing the division.<br/>;;   The variables result, a, and b must all be previously created global, local, or agent -own'd variables.<br/>;; NetLogo variables are dynamically typed, so we are assuming that a and b contain numbers.<br/>;; (All numbers in NetLogo are double-precision floating-point numbers.)<br/>;;   However, even if not numbers, the result is still the same: the carefully clause will<br/>;; supress the run-time error and run the \"commands if error\" block, setting result to false.<br/>;; this false value can be detected, to alter the rest of the course of the code<br/>;;   This behavior is consistent with other NetLogo primitives, such as POSTIION, that report<br/>;; FALSE, rather than a number, if the operation fails.<br/>carefully<br/>[\u00a0;; commands to try to run<br/>  set result a / b<br/>]<br/>[\u00a0;; commands to run if an error occurs in the previous block.<br/>  set result false<br/>] <br/>ifelse is-number? result<br/>[ output-print (word a \" / \" b \" = \" result) <br/>]<br/>[ output-print (word a \" / \" b \" is not calculable\"<br/>]</pre>"}, {"lang": "NetRexx", "loc": 24, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/>method divide<span class=\"br0\">(</span>dividend, divisor<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">constant</span> <span class=\"kw2\">returns</span> Rexx<br/>  <span class=\"kw1\">do</span><br/>    quotient = dividend <span class=\"sy0\">/</span> divisor<br/>  <span class=\"kw3\">catch</span> exu = DivideException<br/>    exu.<span class=\"me0\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    quotient = <span class=\"st0\">'undefined'</span><br/>  <span class=\"kw3\">catch</span> exr = RuntimeException<br/>    exr.<span class=\"me0\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    quotient = <span class=\"st0\">'error'</span><br/>  <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> quotient<br/>\u00a0<br/>method main<span class=\"br0\">(</span>args = String<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  <span class=\"co1\">-- process input arguments and set sensible defaults</span><br/>  arg = Rexx<span class=\"br0\">(</span>args<span class=\"br0\">)</span><br/>  <span class=\"kw1\">parse</span> arg dividend .<span class=\"st0\">','</span> divisor .<br/>  <span class=\"kw1\">if</span> dividend.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> dividend = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">if</span> divisor.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  = <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> divisor  = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">say</span> dividend <span class=\"st0\">'/'</span> divisor <span class=\"st0\">'='</span> divide<span class=\"br0\">(</span>dividend, divisor<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 15, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"co2\">#! /usr/local/bin/newlisp</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>check<span class=\"sy1\">-</span>division x y<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#catch\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">(</span><span class=\"sy1\">/</span> x y<span class=\"br0\">)</span> <span class=\"re5\">'check-zero</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#not\"><span class=\"kw1\">not</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#integer%3F\"><span class=\"kw1\">integer?</span></a> check<span class=\"sy1\">-</span>zero<span class=\"br0\">)</span><span class=\"br0\">)</span>   <br/>        <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#setq\"><span class=\"kw1\">setq</span></a> check<span class=\"sy1\">-</span>zero <span class=\"st0\">\"Division by zero.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     check<span class=\"sy1\">-</span>zero<br/><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> <span class=\"br0\">(</span>check<span class=\"sy1\">-</span>division <span class=\"nu0\">10</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> <span class=\"br0\">(</span>check<span class=\"sy1\">-</span>division <span class=\"nu0\">4</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> <span class=\"br0\">(</span>check<span class=\"sy1\">-</span>division <span class=\"nu0\">20</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> <span class=\"br0\">(</span>check<span class=\"sy1\">-</span>division <span class=\"nu0\">11</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#exit\"><span class=\"kw1\">exit</span></a><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 12, "block": "<pre class=\"text highlighted_source\"># In debug builds division by zero exceptions are thrown by default, in release<br/># builds not. We can still enable them explicitly.<br/>{.push overflowChecks: on.}<br/>proc divCheck(x, y): bool =<br/>  try:<br/>    discard x div y<br/>  except DivByZeroError:<br/>    return true<br/>  return false<br/>{.pop.} # Restore default check settings<br/>\u00a0<br/>echo divCheck(2, 0)</pre>"}, {"lang": "OCaml", "loc": 6, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> div_check x y <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">try</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALignore\"><span class=\"kw3\">ignore</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">/</span> y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">false</span><br/>  <span class=\"kw1\">with</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#EXCEPTIONDivision_by_zero\"><span class=\"kw5\">Division_by_zero</span></a> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">true</span></pre>"}, {"lang": "Oforth", "loc": 4, "block": "<pre class=\"text highlighted_source\">: divideCheck(n)<br/>| e |<br/>   try: e [ 128 n / ] when: [ \"Zero detected...\" . ]<br/>   \"Leaving\" println\u00a0;</pre>"}, {"lang": "Octave", "loc": 6, "block": "<pre class=\"octave highlighted_source\">d <span class=\"sy3\">=</span> <span class=\"nu0\">5</span><span class=\"sy1\">/</span><span class=\"nu0\">0</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">if</span> <span class=\"br0\">(</span> <a href=\"http://octave.sourceforge.net/octave/function/isinf.html\"><span class=\"kw5\">isinf</span></a><span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>  <span class=\"kw4\">if</span> <span class=\"br0\">(</span> <a href=\"http://octave.sourceforge.net/octave/function/index.html\"><span class=\"kw6\">index</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/lastwarn.html\"><span class=\"kw5\">lastwarn</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy5\">,</span> <span class=\"co4\">\"division by zero\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>     <a href=\"http://octave.sourceforge.net/octave/function/error.html\"><span class=\"kw5\">error</span></a><span class=\"br0\">(</span><span class=\"co4\">\"division by zero\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">endif</span><br/><span class=\"kw4\">endif</span></pre>"}, {"lang": "Ol", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(import (owl math fp))<br/>\u00a0<br/>(define (fzero? n)<br/>   (equal? (fdiv 1 (inexact n)) +inf.0))<br/>\u00a0<br/>(fzero? 5) ==&gt; #false<br/>(fzero? 0) ==&gt; #true<br/>\u00a0</pre>"}, {"lang": "ooRexx", "loc": 18, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"coMULTI\">/* REXX **************************************************************<br/>* program demonstrates  detects and handles  division by zero.<br/>* translated from REXX:<br/>*   removed fancy error reporting (ooRexx does not support linesize)<br/>*   removed label Novalue (as novalue is not enabled there)<br/>* 28.04.2013 Walter Pachl<br/>*********************************************************************/</span><br/><span class=\"kw1\">Signal</span> <span class=\"kw2\">on</span> <span class=\"kw2\">Syntax</span>                   <span class=\"coMULTI\">/*handle all REXX syntax errors. */</span><br/>x = <span class=\"kw6\">sourceline</span><span class=\"br0\">(</span><span class=\"br0\">)</span>                   <span class=\"coMULTI\">/*being cute, x=size of this pgm.*/</span><br/>y = x-x                            <span class=\"coMULTI\">/*setting to zero the obtuse way.*/</span><br/>z = x<span class=\"sy0\">/</span>y                            <span class=\"coMULTI\">/* attempt to divide by 0        */</span><br/><span class=\"kw1\">exit</span>                               <span class=\"coMULTI\">/* will not be reached           */</span><br/>\u00a0<br/><span class=\"kw2\">Syntax</span>:<br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'Syntax raised in line'</span> <span class=\"kw4\">sigl</span><br/>  <span class=\"kw1\">Say</span> <span class=\"kw6\">sourceline</span><span class=\"br0\">(</span><span class=\"kw4\">sigl</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'rc='</span><span class=\"kw4\">rc</span> <span class=\"st0\">'('</span><span class=\"kw6\">errortext</span><span class=\"br0\">(</span><span class=\"kw4\">rc</span><span class=\"br0\">)</span><span class=\"st0\">')'</span><br/>  <span class=\"kw1\">Exit</span> <span class=\"nu0\">12</span></pre>"}, {"lang": "Oz", "loc": 5, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">try</span><br/>   <span class=\"br0\">{</span>Show 42 <span class=\"kw1\">div</span> 0<span class=\"br0\">}</span><br/><span class=\"kw1\">catch</span> error<span class=\"br0\">(</span>kernel<span class=\"br0\">(</span>div0 <span class=\"sy0\">...</span><span class=\"br0\">)</span> <span class=\"sy0\">...</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>   <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Division by zero detected.\"</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"parigp highlighted_source\">iferr<span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"sy0\">/</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><br/>      err<span class=\"sy0\">,</span><br/>      <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"division by 0\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"or other non-invertible divisor\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>      errname<span class=\"br0\">(</span>err<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"e_INV\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 4, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> div_check<br/> <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/local.html\"><span class=\"kw3\">local</span></a> <span class=\"co5\"><a class=\"__cf_email__\" data-cfemail=\"ffdbbf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/eval.html\"><span class=\"kw3\">eval</span></a> <span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"co5\"><a class=\"__cf_email__\" data-cfemail=\"5a7e1a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></span> <span class=\"kw1\">and</span> <span class=\"co5\"><a class=\"__cf_email__\" data-cfemail=\"426602\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></span> <span class=\"sy0\">=~</span> <span class=\"co2\">/division by zero/</span><span class=\"sy0\">;</span><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 4, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> div_check<br/> <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/local.html\"><span class=\"kw3\">local</span></a> <span class=\"co5\"><a class=\"__cf_email__\" data-cfemail=\"ffdbbf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/eval.html\"><span class=\"kw3\">eval</span></a> <span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"co5\"><a class=\"__cf_email__\" data-cfemail=\"5a7e1a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></span> <span class=\"kw1\">and</span> <span class=\"co5\"><a class=\"__cf_email__\" data-cfemail=\"426602\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></span> <span class=\"sy0\">=~</span> <span class=\"co2\">/division by zero/</span><span class=\"sy0\">;</span><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 15, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> <span class=\"kw1\">div</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$r</span><span class=\"sy0\">;</span><br/>    try <span class=\"br0\">{</span><br/>        <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span> <span class=\"sy0\">/</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">CATCH</span> <span class=\"br0\">{</span><br/>           <span class=\"kw3\">say</span> <span class=\"st0\">\"tried to divide by zero\u00a0!\"</span> <span class=\"kw1\">if</span> $<span class=\"sy0\">!</span> <span class=\"sy0\">~~</span> <span class=\"st0\">\"Divide by zero\"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$r</span> <span class=\"sy0\">//</span> <span class=\"kw1\">fail</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"kw1\">div</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># 5</span><br/><span class=\"kw3\">say</span> <span class=\"kw1\">div</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># Inf, 1/0 constants are substituted for Infinity</span><br/><span class=\"kw3\">say</span> <span class=\"kw1\">div</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> sin<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># undef, and prints \"tried to divide by zero\"</span><br/>\u00a0</pre>"}, {"lang": "Phix", "loc": 6, "block": "<pre class=\"text highlighted_source\">try<br/>    integer i = 1/0<br/>catch e<br/>   \u00a0?e[E_USER]<br/>end try<br/>puts(1,\"still running...\\n\")</pre>"}, {"lang": "PHP", "loc": 6, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">function</span> div_check<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"sy0\">@</span><a href=\"http://www.php.net/trigger_error\"><span class=\"kw3\">trigger_error</span></a><span class=\"br0\">(</span><span class=\"st_h\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// a dummy to detect when error didn't occur</span><br/>  <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">/</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$e</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/error_get_last\"><span class=\"kw3\">error_get_last</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"re0\">$e</span><span class=\"br0\">[</span><span class=\"st_h\">'message'</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 1, "block": "<pre class=\"text highlighted_source\">(catch '(\"Div/0\") (/ A B))</pre>"}, {"lang": "PL/I", "loc": 10, "block": "<pre class=\"pli highlighted_source\"><span class=\"kw1\">Proc</span> DivideDZ<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Float</span> <span class=\"kw1\">Bin</span><span class=\"br0\">(</span><span class=\"nu0\">33</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>    <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"br0\">)</span> <span class=\"kw1\">Float</span> <span class=\"kw1\">Bin</span><span class=\"br0\">(</span><span class=\"nu0\">33</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<br/>    <span class=\"kw1\">On</span> <span class=\"kw1\">ZeroDivide</span> <span class=\"kw1\">GoTo</span> MyError<span class=\"sy0\">;</span><br/>    c<span class=\"sy0\">=</span>a<span class=\"sy0\">/</span>b<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">Return</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>MyError<span class=\"sy0\">:</span><br/>    <span class=\"kw1\">Put</span> <span class=\"kw1\">Skip</span> <span class=\"kw1\">List</span><span class=\"br0\">(</span><span class=\"st0\">'Divide by Zero Detected!'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">End</span> DivideDZ<span class=\"sy0\">;</span><br/>\u00a0<br/>xx<span class=\"sy0\">=</span>DivideDZ<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PL/SQL", "loc": 11, "block": "<pre class=\"plsql highlighted_source\"><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FUNCTION\"><span class=\"kw1\">FUNCTION</span></a> divide<span class=\"br0\">(</span>n1 <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IN\"><span class=\"kw1\">IN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER\"><span class=\"kw1\">NUMBER</span></a><span class=\"sy0\">,</span> n2 <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IN\"><span class=\"kw1\">IN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER\"><span class=\"kw1\">NUMBER</span></a><span class=\"br0\">)</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BOOLEAN\"><span class=\"kw1\">BOOLEAN</span></a><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IS\"><span class=\"kw1\">IS</span></a><br/>  result <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER\"><span class=\"kw1\">NUMBER</span></a><span class=\"sy0\">;</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>  result <span class=\"sy0\">:=</span> n1<span class=\"sy0\">/</span>n2<span class=\"sy0\">;</span><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a><span class=\"br0\">(</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FALSE\"><span class=\"kw1\">FALSE</span></a><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=EXCEPTION\"><span class=\"kw1\">EXCEPTION</span></a><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=WHEN\"><span class=\"kw1\">WHEN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=ZERO_DIVIDE\"><span class=\"kw4\">ZERO_DIVIDE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=THEN\"><span class=\"kw1\">THEN</span></a><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN\"><span class=\"kw1\">RETURN</span></a><span class=\"br0\">(</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=TRUE\"><span class=\"kw1\">TRUE</span></a><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> divide<span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 8, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> div <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>    try<span class=\"br0\">{</span><span class=\"re0\">$a</span><span class=\"sy0\">/</span><span class=\"re0\">$b</span><span class=\"br0\">}</span><br/>    catch<span class=\"br0\">{</span><span class=\"st0\">\"Bad parameters: <span class=\"es0\">`$</span>a = $a and <span class=\"es0\">`$</span>b = $b\"</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>div <span class=\"nu0\">10</span> <span class=\"nu0\">2</span><br/>div <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><br/>\u00a0</pre>"}, {"lang": "Pure", "loc": 2, "block": "<pre class=\"text highlighted_source\">&gt; 1/0, -1/0, 0/0;<br/>inf,-inf,nan</pre>"}, {"lang": "Python", "loc": 7, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> div_check<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span>:<br/>  <span class=\"kw1\">try</span>:<br/>    x / y<br/>  <span class=\"kw1\">except</span> <span class=\"kw2\">ZeroDivisionError</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">True</span><br/>  <span class=\"kw1\">else</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">False</span></pre>"}, {"lang": "R", "loc": 4, "block": "<pre class=\"rsplus highlighted_source\">d <span class=\"sy0\">&lt;-</span> <span class=\"nu0\">5</span><span class=\"sy0\">/</span><span class=\"nu0\">0</span><br/><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html\"><span class=\"kw2\">if</span></a> <span class=\"br0\">(</span> <span class=\"sy0\">!</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/is.finite.html\"><span class=\"kw2\">is.<span class=\"me1\">finite</span></span></a><span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"co1\"># it is Inf, -Inf, or NaN</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Racket", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(with-handlers ([exn:fail:contract:divide-by-zero?<br/>                 (\u03bb (e) (displayln \"Divided by zero\"))])<br/>  (/ 1 0))<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 27, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol [<br/>    Title: \"Detect Divide by Zero\"<br/>    URL: http://rosettacode.org/wiki/Divide_by_Zero_Detection<br/>]</span><br/>\u00a0<br/><span class=\"co1\">; The 'try' word returns an error object if the operation fails for</span><br/><span class=\"co1\">; whatever reason. The 'error?' word detects an error object and</span><br/><span class=\"co1\">; 'disarm' keeps it from triggering so I can analyze it to print the</span><br/><span class=\"co1\">; appropriate message. Otherwise, any reference to the error object</span><br/><span class=\"co1\">; will stop the program.</span><br/>\u00a0<br/>div-check: <span class=\"kw2\">func</span> <span class=\"br0\">[</span><br/>\t<span class=\"st0\">\"Attempt to divide two numbers, report result or errors as needed.\"</span><br/>\tx y<br/>\t<span class=\"sy0\">/</span>local result<br/><span class=\"br0\">]</span> <span class=\"br0\">[</span><br/>\t<span class=\"kw2\">either</span> <span class=\"kw3\">error?</span> result: <span class=\"kw2\">try</span> <span class=\"br0\">[</span>x <span class=\"sy0\">/</span> y<span class=\"br0\">]</span><span class=\"br0\">[</span><br/>\t\tresult: <span class=\"kw2\">disarm</span> result<br/>\t\t<span class=\"kw3\">print</span> <span class=\"br0\">[</span><span class=\"st0\">\"Caught\"</span> result<span class=\"sy0\">/</span>type <span class=\"st0\">\"error:\"</span> result<span class=\"sy0\">/</span>id<span class=\"br0\">]</span><br/>\t<span class=\"br0\">]</span> <span class=\"br0\">[</span><br/>\t\t<span class=\"kw3\">print</span> <span class=\"br0\">[</span>x <span class=\"st0\">\"/\"</span> y <span class=\"st0\">\"=\"</span> result<span class=\"br0\">]</span><br/>\t<span class=\"br0\">]</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/>div-check <span class=\"nu0\">12</span> <span class=\"nu0\">2</span>       <span class=\"co1\">; An ordinary calculation.</span><br/>div-check <span class=\"nu0\">6</span> <span class=\"nu0\">0</span>        <span class=\"co1\">; This will detect divide by zero.</span><br/>div-check <span class=\"st0\">\"7\"</span> <span class=\"nu0\">0.0001</span> <span class=\"co1\">; Other errors can be caught as well.</span></pre>"}, {"lang": "REXX", "loc": 23, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  demonstrates  detection  and handling  division by zero.                */</span><br/><span class=\"kw1\">signal</span> <span class=\"kw2\">on</span> <span class=\"kw2\">syntax</span>                                 <span class=\"coMULTI\">/*handle all REXX syntax errors.       */</span><br/>x = <span class=\"kw6\">sourceline</span><span class=\"br0\">(</span><span class=\"br0\">)</span>                                 <span class=\"coMULTI\">/*being cute, x=is the size of this pgm*/</span><br/>y = x - x                                        <span class=\"coMULTI\">/*setting to zero the obtuse way.      */</span><br/>z = x <span class=\"sy0\">/</span> y                                        <span class=\"coMULTI\">/*this'll trigger it,  furrrr shurrre. */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*We're kaput.   Ja vohl\u00a0!             */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>err:    <span class=\"kw1\">if</span> <span class=\"kw4\">rc</span>==<span class=\"nu0\">42</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">say</span>                 <span class=\"coMULTI\">/*first,  check for a specific error.  */</span><br/>                             <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">' ***error*** '</span>, <span class=\"nu0\">79</span>, <span class=\"st0\">\"\u2550\"</span><span class=\"br0\">)</span><br/>                             <span class=\"kw1\">say</span> <span class=\"st0\">'Division by zero detected at line  '</span>       @ ,<br/>                                 <span class=\"st0\">\"  and the REXX statement is:\"</span><br/>                             <span class=\"kw1\">say</span> <span class=\"kw6\">sourceLine</span><span class=\"br0\">(</span>@<span class=\"br0\">)</span><br/>                             <span class=\"kw1\">say</span><br/>                             <span class=\"kw1\">exit</span> <span class=\"nu0\">42</span><br/>                        <span class=\"kw3\">end</span><br/>        <span class=\"kw1\">say</span><br/>        <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">' error! '</span>, <span class=\"nu0\">79</span>, <span class=\"st0\">\"*\"</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">do</span> #=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;   <span class=\"kw1\">say</span>;     <span class=\"kw1\">say</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span>#<span class=\"br0\">)</span>;       <span class=\"kw1\">say</span><br/>                        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*#*/</span><br/>        <span class=\"kw1\">exit</span> <span class=\"nu0\">13</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"kw2\">syntax</span>: @=<span class=\"kw4\">sigl</span>;   <span class=\"kw1\">call</span> err  <span class=\"st0\">'REXX program'</span>   <span class=\"kw6\">condition</span><span class=\"br0\">(</span><span class=\"st0\">\"C\"</span><span class=\"br0\">)</span>   <span class=\"st0\">'error'</span>,   <span class=\"kw6\">condition</span><span class=\"br0\">(</span><span class=\"st0\">'D'</span><span class=\"br0\">)</span>, ,<br/>                            <span class=\"st0\">'REXX source statement (line'</span>   <span class=\"kw4\">sigl</span><span class=\"st0\">\"):\"</span>,    <span class=\"kw6\">sourceLine</span><span class=\"br0\">(</span><span class=\"kw4\">sigl</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ring", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Try<br/>   see 9/0<br/>Catch<br/>   see \"Catch!\" + nl + cCatchError<br/>Done<br/>\u00a0</pre>"}, {"lang": "RPGIV", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>       dcl-c DIVIDE_BY_ZERO 00102;<br/>\u00a0<br/>       dcl-s result zoned(5:2);<br/>       dcl-s value1 zoned(5:2);<br/>       dcl-s value2 zoned(5:2);<br/>\u00a0<br/>       value1 = 10;<br/>       value2 = 0;<br/>\u00a0<br/>       monitor;<br/>         eval(h) result = value1 / value2; // Using half rounding here for the eval result<br/>       on-error DIVIDE_BY_ZERO;<br/>         // Initialise the result to 0. Consider other messaging perhaps.<br/>         result = 0;<br/>       endmon;<br/>\u00a0<br/>       *inlr = *on;  <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 9, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> div_check<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>  <span class=\"kw1\">begin</span><br/>    x <span class=\"sy0\">/</span> y<br/>  <span class=\"kw1\">rescue</span> <span class=\"kw4\">ZeroDivisionError</span><br/>    <span class=\"kw2\">true</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw2\">false</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 11, "block": "<pre class=\"text highlighted_source\">fn test_division(numerator: u32, denominator: u32) {<br/>    match numerator.checked_div(denominator) {<br/>        Some(result) =&gt; println!(\"{} / {} = {}\", numerator, denominator, result),<br/>        None =&gt; println!(\"{} / {} results in a division by zero\", numerator, denominator)<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    test_division(5, 4);<br/>    test_division(4, 0);<br/>}</pre>"}, {"lang": "Scala", "loc": 23, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> DivideByZero <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Application <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> check<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> x / y<br/>      println<span class=\"br0\">(</span>result<span class=\"br0\">)</span> <br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> x<span class=\"sy0\">:</span> ArithmeticException <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"divided by zero = \"</span> + check<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> check1<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int, y<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">util</span>.<span class=\"me1\">Try</span><br/>    Try<span class=\"br0\">(</span>y/x<span class=\"br0\">)</span>.<span class=\"me1\">isFailure</span><br/>  <span class=\"br0\">}</span><br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"divided by zero = \"</span> + check1<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 32, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>\u00a0<br/>const proc: doDivide (in integer: numer, in integer: denom) is func<br/>  begin<br/>    block<br/>      writeln(numer &lt;&amp; \" div \" &lt;&amp; denom &lt;&amp; \" = \" &lt;&amp; numer div denom);<br/>    exception<br/>      catch NUMERIC_ERROR:<br/>        writeln(\"Division by zero detected.\");<br/>    end block;<br/>  end func;<br/>\u00a0<br/>const proc: doDivide (in float: numer, in float: denom) is func<br/>  local<br/>    var float: quotient is 0.0;<br/>  begin<br/>    quotient\u00a0:= numer / denom;<br/>    if quotient &lt;&gt; Infinity and quotient &lt;&gt; -Infinity then<br/>      writeln(numer &lt;&amp; \" / \" &lt;&amp; denom &lt;&amp; \" = \" &lt;&amp; quotient);<br/>    else<br/>      writeln(\"Division by zero detected.\");<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    doDivide(10, 8);<br/>    doDivide(1, 0);<br/>    doDivide(10.0, 8.0);<br/>    doDivide(1.0, 0.0);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 7, "block": "<pre class=\"ruby highlighted_source\">func div_check<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    var result = a<span class=\"sy0\">/</span>b<br/>    result.<span class=\"me1\">abs</span> == Inf\u00a0? <span class=\"kw2\">nil</span>\u00a0: result<br/><span class=\"br0\">}</span><br/>\u00a0<br/>say div_check<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>  <span class=\"co1\"># 5</span><br/>say div_check<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>   <span class=\"co1\"># nil (detected)</span></pre>"}, {"lang": "Slate", "loc": 1, "block": "<pre class=\"text highlighted_source\">[ 1 / 0 ] on: Error do: [|:err| err return: PositiveInfinity].</pre>"}, {"lang": "Smalltalk", "loc": 7, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re6\">zeroDivide</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>:<span class=\"re5\">aBlock</span> |<br/>\t<span class=\"br0\">[</span><span class=\"re5\">aBlock</span> value. <span class=\"kw1\">false</span><span class=\"br0\">]</span> on: <span class=\"re0\">ZeroDivide</span> do: <span class=\"br0\">[</span><span class=\"kw1\">true</span><span class=\"br0\">]</span>.<br/>\t<span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"coMULTI\">\"Testing\"</span><br/>zeroDivide value: <span class=\"br0\">[</span><span class=\"nu0\">2</span>/<span class=\"re5\">1</span><span class=\"br0\">]</span> <span class=\"coMULTI\">\"------&gt; false\"</span><br/>zeroDivide value: <span class=\"br0\">[</span><span class=\"nu0\">2</span>/<span class=\"re5\">0</span><span class=\"br0\">]</span> <span class=\"coMULTI\">\"------&gt; true\"</span></pre>"}, {"lang": "SNOBOL4", "loc": 13, "block": "<pre class=\"text highlighted_source\">        define('zdiv(x,y)')\u00a0:(zdiv_end)<br/>zdiv    &amp;errlimit = 1; setexit(.ztrap)<br/>        zdiv = x / y\u00a0:(return)<br/>ztrap   zdiv =\u00a0?(&amp;errtype\u00a0? (14 | 262)) 'Division by zero'\u00a0:s(continue)f(abort)<br/>zdiv_end<br/>\u00a0<br/>*       # Test and display<br/>        output = '1/1     = ' zdiv(1,1)     \u00a0;* Integers non-zero<br/>        output = '1.0/1.0 = ' zdiv(1.0,1.0) \u00a0;* Reals non-zero<br/>        output = '1/0     = ' zdiv(1,0)     \u00a0;* Integers zero<br/>        output = '1.0/0.0 = ' zdiv(1.0,0.0) \u00a0;* Reals zero<br/>        output = 'Zero checks complete'<br/>end</pre>"}, {"lang": "Standard ML", "loc": 4, "block": "<pre class=\"text highlighted_source\">fun div_check (x, y) = (<br/>  ignore (x div y);<br/>  false<br/>) handle Div =&gt; true</pre>"}, {"lang": "Stata", "loc": 15, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> div_check <span class=\"br0\">{</span>x y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">catch</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>/<span class=\"re0\">$y</span><span class=\"br0\">}</span><span class=\"br0\">}</span> result<span class=\"br0\">]</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">puts</span> <span class=\"st0\">\"valid division: $x/$y=$result\"</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$result</span> eq <span class=\"st0\">\"divide by zero\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">puts</span> <span class=\"st0\">\"caught division by zero: $x/$y -&gt; $result\"</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">puts</span> <span class=\"st0\">\"caught another error: $x/$y -&gt; $result\"</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> denom <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> foo<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    div_check <span class=\"nu0\">42</span> <span class=\"re0\">$denom</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 15, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> div_check <span class=\"br0\">{</span>x y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">catch</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span>/<span class=\"re0\">$y</span><span class=\"br0\">}</span><span class=\"br0\">}</span> result<span class=\"br0\">]</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">puts</span> <span class=\"st0\">\"valid division: $x/$y=$result\"</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$result</span> eq <span class=\"st0\">\"divide by zero\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">puts</span> <span class=\"st0\">\"caught division by zero: $x/$y -&gt; $result\"</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">puts</span> <span class=\"st0\">\"caught another error: $x/$y -&gt; $result\"</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> denom <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> foo<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    div_check <span class=\"nu0\">42</span> <span class=\"re0\">$denom</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TXR", "loc": 6, "block": "<pre class=\"text highlighted_source\">@(do (defun div-check (x y)<br/>       (catch (/ x y)<br/>         (numeric_error (msg)<br/>           'div-check-failed))))<br/>@(bind good @(div-check 32 8))<br/>@(bind bad @(div-check 42 0))</pre>"}, {"lang": "Ursa", "loc": 8, "block": "<pre class=\"text highlighted_source\">def div_check (int x, int y)<br/>\ttry<br/>\t\t/ x y<br/>\t\treturn false<br/>\tcatch divzeroerror<br/>\t\treturn true<br/>\tend try<br/>end</pre>"}, {"lang": "VAX Assembly", "loc": 16, "block": "<pre class=\"text highlighted_source\">65 64 69 76 69 64 00000008'010E0000' 0000     1 desc:\t.ascid\t\"divide by zero\"<br/>            6F 72 65 7A 20 79 62 20  000E       <br/>                               0000  0016     2 .entry\thandler,0<br/>                         E5 AF   7F  0018     3 \tpushaq\tdesc<br/>              00000000'GF   01   FB  001B     4 \tcalls\t#1, g^lib$put_output<br/>                                 04  0022     5 \tret<br/>                                     0023     6 <br/>                               0000  0023     7 .entry\tmain,0<br/>                    6D   EE AF   9E  0025     8 \tmovab\thandler, (fp)\t;register exception handler<br/>                  50   01   00   C7  0029     9 \tdivl3\t#0, #1, r0<br/>                                 04  002D    10 \tret<br/>                                     002E    11 <br/>                                     002E    12 .end\tmain<br/>$ run dv<br/>divide by zero<br/>\u00a0</pre>"}, {"lang": "VBA", "loc": 15, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main()<br/><span class=\"kw4\">Dim</span> Div<br/>    <span class=\"kw3\">If</span> CatchDivideByZero(152, 0, Div) <span class=\"kw3\">Then</span> Debug.<span class=\"kw4\">Print</span> Div <span class=\"kw3\">Else</span> Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Error\"</span><br/>    <span class=\"kw3\">If</span> CatchDivideByZero(152, 10, Div) <span class=\"kw3\">Then</span> Debug.<span class=\"kw4\">Print</span> Div <span class=\"kw3\">Else</span> Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Error\"</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> CatchDivideByZero(Num, Den, Div) <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/>    <span class=\"kw4\">On</span> <span class=\"kw4\">Error</span> <span class=\"kw4\">Resume</span> <span class=\"kw3\">Next</span><br/>    Div = Num / Den<br/>    <span class=\"kw3\">If</span> Err = 0 <span class=\"kw3\">Then</span> CatchDivideByZero = <span class=\"kw5\">True</span><br/>    <span class=\"kw4\">On</span> <span class=\"kw4\">Error</span> <span class=\"kw3\">GoTo</span> 0<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "VBScript", "loc": 15, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> div(num,den)<br/>\t<span class=\"kw4\">On</span> <span class=\"kw4\">Error</span> <span class=\"kw4\">Resume</span> <span class=\"kw3\">Next</span><br/>\tn = num/den<br/>\t<span class=\"kw3\">If</span> Err.Number &lt;&gt; 0 <span class=\"kw3\">Then</span><br/>\t\tdiv = Err.Description &amp; <span class=\"st0\">\" is not allowed.\"</span><br/>\t<span class=\"kw3\">Else</span><br/>\t\tdiv = n<br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.StdOut.WriteLine div(6,3)<br/>WScript.StdOut.WriteLine div(6,0)<br/>WScript.StdOut.WriteLine div(7,-4)<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 6, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>int A, B;<br/>[Trap(false);           \\turn off error trapping<br/>B:= 1234/(A-A);         \\(error not detected at compile time)<br/>if GetErr then Text(0, \"Divide by zero\");<br/>]</pre>"}, {"lang": "Yorick", "loc": 6, "block": "<pre class=\"text highlighted_source\">func div_check(x, y) {<br/>    if(catch(0x01))<br/>        return 1;<br/>    temp = x/y;<br/>    return 0;<br/>}</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">fcn f(x,y){try{x/y}catch(MathError){println(__exception)}}</pre>"}]}