{"task": "Pointers_and_references", "blocks": [{"lang": "Ada", "loc": 2, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">type</span> Int_Access <span class=\"kw1\">is</span> <span class=\"kw3\">access</span> Integer;<br/>Int_Acc\u00a0: Int_Access\u00a0:= <span class=\"kw3\">new</span> Integer'<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "ALGOL 68", "loc": 2, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw3\">INT</span> var <span class=\"sy1\">:=</span> 3<span class=\"sy1\">;</span><br/><span class=\"kw4\">REF</span> <span class=\"kw3\">INT</span> pointer <span class=\"sy1\">:=</span> var<span class=\"sy1\">;</span></pre>"}, {"lang": "AutoHotkey", "loc": 5, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>var<span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span>   <span class=\"co1\">; allocate memory</span><br/><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span><span class=\"nu0\">87</span><span class=\"sy0\">,</span> var<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Char\"</span><span class=\"br0\">)</span> <span class=\"co1\">; store 87 at offset 0</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumGet</span></a><span class=\"br0\">(</span>var<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Char\"</span><span class=\"br0\">)</span> <span class=\"co1\">; get character at offset 0 (87)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"sy0\">&amp;</span>var   <span class=\"co1\">; address of contents pointed to by var structure</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"sy0\">*&amp;</span>var <span class=\"co1\">; integer at address of var contents  (87)</span></pre>"}, {"lang": "BBC BASIC", "loc": 26, "block": "<pre class=\"text highlighted_source\">      REM Pointer to integer variable:<br/>      pointer_to_varA = ^varA%<br/>     \u00a0!pointer_to_varA = 123456<br/>      PRINT\u00a0!pointer_to_varA<br/>\u00a0<br/>      REM Pointer to variant variable:<br/>      pointer_to_varB = ^varB<br/>      |pointer_to_varB = PI<br/>      PRINT |pointer_to_varB<br/>\u00a0<br/>      REM Pointer to procedure:<br/>      PROCmyproc\u00a0: REM conventional call to initialise<br/>      pointer_to_myproc = ^PROCmyproc<br/>      PROC(pointer_to_myproc)<br/>\u00a0<br/>      REM Pointer to function:<br/>      pointer_to_myfunc = ^FNmyfunc<br/>      PRINT FN(pointer_to_myfunc)<br/>      END<br/>\u00a0<br/>      DEF PROCmyproc<br/>      PRINT \"Executing myproc\"<br/>      ENDPROC<br/>\u00a0<br/>      DEF FNmyfunc<br/>      = \"Returned from myfunc\"</pre>"}, {"lang": "C and C++", "loc": 2, "block": "<pre class=\"c highlighted_source\"><span class=\"kw4\">int</span> var <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> <span class=\"sy0\">*</span>pointer <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>var<span class=\"sy0\">;</span></pre>"}, {"lang": "C++", "loc": 1, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw4\">int</span><span class=\"sy2\">*</span> pointer2<span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>var<span class=\"br0\">)</span><span class=\"sy4\">;</span></pre>"}, {"lang": "C#", "loc": 27, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> p<span class=\"sy0\">;</span><br/>\u00a0<br/>\tp <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Ref Before: \"</span> <span class=\"sy0\">+</span> p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">Value</span><span class=\"br0\">(</span><span class=\"kw1\">ref</span> p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Ref After\u00a0: \"</span> <span class=\"sy0\">+</span> p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tp <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Val Before: \"</span> <span class=\"sy0\">+</span> p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">Value</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Val After\u00a0: \"</span> <span class=\"sy0\">+</span> p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tConsole<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> <span class=\"kw1\">Value</span><span class=\"br0\">(</span><span class=\"kw1\">ref</span> <span class=\"kw4\">int</span> <span class=\"kw1\">Value</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">Value</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> <span class=\"kw1\">Value</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"kw1\">Value</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">Value</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "COBOL", "loc": 2, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"nu0\">01</span>  ptr                     <span class=\"kw3\">USAGE</span> <span class=\"kw3\">POINTER</span> <span class=\"kw2\">TO</span> Some-<span class=\"kw3\">Type</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  prog-ptr                <span class=\"kw3\">USAGE</span> PROGRAM-<span class=\"kw3\">POINTER</span> <span class=\"st0\">\"some-program\"</span><span class=\"sy0\">.</span> *&gt; <span class=\"kw2\">TO</span> <span class=\"kw3\">is</span> <span class=\"kw3\">optional</span></pre>"}, {"lang": "Common Lisp", "loc": 28, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Take the address of 'var' and placing it in a pointer:</span><br/>    <span class=\"kw4\">int</span> var<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span><span class=\"sy0\">*</span> ptr <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>var<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Take the pointer to the first item of an array:</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> data<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> p2 <span class=\"sy0\">=</span> data.<span class=\"me1\">ptr</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"co1\">// Depending on variable type, D will automatically pass either</span><br/>    <span class=\"co1\">// by value or reference.</span><br/>    <span class=\"co1\">// By value: structs, statically sized arrays, and other</span><br/>    <span class=\"co1\">//           primitives (int, char, etc...);</span><br/>    <span class=\"co1\">// By reference: classes;</span><br/>    <span class=\"co1\">// By kind of reference: dynamically sized arrays, array slices.</span><br/>\u00a0<br/>    <span class=\"kw4\">struct</span> S <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw4\">class</span> C <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> foo1<span class=\"br0\">(</span>S s<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>        <span class=\"co1\">// By value.</span><br/>    <span class=\"kw4\">void</span> foo2<span class=\"br0\">(</span>C c<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>        <span class=\"co1\">// By reference.</span><br/>    <span class=\"kw4\">void</span> foo3<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>      <span class=\"co1\">// By value.</span><br/>    <span class=\"kw4\">void</span> foo4<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>   <span class=\"co1\">// By value (unlike C).</span><br/>    <span class=\"kw4\">void</span> foo6<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>    <span class=\"co1\">// Just length-pointer struct by value.</span><br/>    <span class=\"kw4\">void</span> foo5<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">ref</span> T t<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"co1\">// By reference regardless of what type</span><br/>                             <span class=\"co1\">// T really is.</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 28, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Take the address of 'var' and placing it in a pointer:</span><br/>    <span class=\"kw4\">int</span> var<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span><span class=\"sy0\">*</span> ptr <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>var<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Take the pointer to the first item of an array:</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> data<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> p2 <span class=\"sy0\">=</span> data.<span class=\"me1\">ptr</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"co1\">// Depending on variable type, D will automatically pass either</span><br/>    <span class=\"co1\">// by value or reference.</span><br/>    <span class=\"co1\">// By value: structs, statically sized arrays, and other</span><br/>    <span class=\"co1\">//           primitives (int, char, etc...);</span><br/>    <span class=\"co1\">// By reference: classes;</span><br/>    <span class=\"co1\">// By kind of reference: dynamically sized arrays, array slices.</span><br/>\u00a0<br/>    <span class=\"kw4\">struct</span> S <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw4\">class</span> C <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> foo1<span class=\"br0\">(</span>S s<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>        <span class=\"co1\">// By value.</span><br/>    <span class=\"kw4\">void</span> foo2<span class=\"br0\">(</span>C c<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>        <span class=\"co1\">// By reference.</span><br/>    <span class=\"kw4\">void</span> foo3<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>      <span class=\"co1\">// By value.</span><br/>    <span class=\"kw4\">void</span> foo4<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>   <span class=\"co1\">// By value (unlike C).</span><br/>    <span class=\"kw4\">void</span> foo6<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>    <span class=\"co1\">// Just length-pointer struct by value.</span><br/>    <span class=\"kw4\">void</span> foo5<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">ref</span> T t<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"co1\">// By reference regardless of what type</span><br/>                             <span class=\"co1\">// T really is.</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 1, "block": "<pre class=\"delphi highlighted_source\">pMyPointer <span class=\"sy1\">:</span> <span class=\"kw4\">Pointer</span> <span class=\"sy1\">;</span></pre>"}, {"lang": "E", "loc": 1, "block": "<pre>var x\u00a0:= 0\ndef slot\u00a0:= &amp;x # define \"slot\" to be x's slot\n\nx\u00a0:= 1         # direct assignment; value is now 1\nslot.put(2)    # via slot object; value is now 2\n\n</pre>"}, {"lang": "EchoLisp", "loc": 15, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> B <span class=\"br0\">(</span>box <span class=\"nu0\">42</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 B <span class=\"co1\">;; box reference</span><br/><span class=\"br0\">(</span>unbox B<span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">42</span> <span class=\"co1\">;; box contents</span><br/>\u00a0<br/><span class=\"co1\">;; sets new value for box contents</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span> change<span class=\"sy0\">-</span>by<span class=\"sy0\">-</span>ref abox avalue<span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span>set<span class=\"sy0\">-</span>box<span class=\"sy0\">!</span> abox avalue<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>change<span class=\"sy0\">-</span>by<span class=\"sy0\">-</span>ref B <span class=\"nu0\">666</span><span class=\"br0\">)</span><br/>    \u2192 #<span class=\"br0\">[</span>box <span class=\"nu0\">666</span><span class=\"br0\">]</span><br/><span class=\"br0\">(</span>unbox B<span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">666</span><br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 1, "block": "<pre> variable myvar   \\ stores 1 cell\n fvariable myfvar \\ stores 1 floating point number (often 8 bytes)\n 2variable my2var \\ stores 2 cells\n</pre>"}, {"lang": "Fortran", "loc": 1, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw3\">real</span>, <span class=\"kw3\">pointer</span> <span class=\"sy0\">::</span> <span class=\"me2\">pointertoreal</span></pre>"}, {"lang": "FreeBASIC", "loc": 47, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Type</span> Cat<br/>  <span class=\"kw1\">name</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>  age <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Type</span><br/>\u00a0<br/><span class=\"kw1\">Type</span> CatInfoType <span class=\"kw1\">As</span> <span class=\"kw1\">Sub</span> <span class=\"br0\">(</span><span class=\"kw1\">As</span> Cat <span class=\"kw1\">Ptr</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> printCatInfo<span class=\"br0\">(</span>c <span class=\"kw1\">As</span> Cat <span class=\"kw1\">Ptr</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"Name \"</span>; c-&gt;<span class=\"kw1\">name</span>, <span class=\"st0\">\"Age\"</span>; c-&gt; age<br/>  <span class=\"kw1\">Print</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">' create Cat object on heap and store a pointer to it</span><br/><span class=\"kw1\">Dim</span> c <span class=\"kw1\">As</span> Cat <span class=\"kw1\">Ptr</span> = New Cat<br/>\u00a0<br/><span class=\"co1\">' set fields using the pointer and the \"crow's foot\" operator</span><br/>c-&gt;<span class=\"kw1\">name</span> = <span class=\"st0\">\"Fluffy\"</span><br/>c-&gt;age = <span class=\"nu0\">9</span><br/>\u00a0<br/><span class=\"co1\">' print them out through a procedure pointer</span><br/><span class=\"kw1\">Dim</span> cit <span class=\"kw1\">As</span> CatInfoType = <span class=\"kw1\">ProcPtr</span><span class=\"br0\">(</span>printCatInfo<span class=\"br0\">)</span><br/>cit<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>\u00a0<br/>Delete c<br/>c = <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">3</span><br/><span class=\"co1\">' create an integer pointer variable and set it to the address of 'i'</span><br/><span class=\"kw1\">Dim</span> pi <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> <span class=\"kw1\">Ptr</span> = @i<br/>\u00a0<br/><span class=\"co1\">'change the variable through the pointer</span><br/>*pi = <span class=\"nu0\">4</span><br/>\u00a0<br/><span class=\"co1\">'print out the result</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"i =\"</span>; *pi<br/>\u00a0<br/><span class=\"co1\">'create a reference to the variable i</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">ByRef</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> j = i<br/>\u00a0<br/><span class=\"co1\">' set j (and hence i) to a new value</span><br/>j = <span class=\"nu0\">5</span><br/>\u00a0<br/><span class=\"co1\">' print them out</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"i =\"</span>; i, <span class=\"st0\">\"j =\"</span>; j<br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 2, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">var</span> p <span class=\"sy3\">*</span><span class=\"kw4\">int</span>  <span class=\"co1\">// declare p to be a pointer to an int</span><br/>i <span class=\"sy2\">=</span> <span class=\"sy3\">&amp;</span>p      <span class=\"co1\">// assign i to be the int value pointed to by p</span></pre>"}, {"lang": "Haskell", "loc": 9, "block": "<pre class=\"haskell highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>STRef<br/>\u00a0<br/>example <span class=\"sy0\">::</span> ST s <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>example <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  p <span class=\"sy0\">&lt;-</span> newSTRef <span class=\"nu0\">1</span><br/>  k <span class=\"sy0\">&lt;-</span> readSTRef p<br/>  writeSTRef p <span class=\"br0\">(</span>k<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 9, "block": "<pre class=\"java highlighted_source\"> <span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Foo <span class=\"br0\">{</span> <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/> <span class=\"kw4\">void</span> somefunction<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>     Foo a<span class=\"sy0\">;</span> <span class=\"co1\">// this declares a reference to Foo object; if this is a class field, it is initialized to null</span><br/>     a <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Foo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// this assigns a to point to a new Foo object</span><br/>     Foo b <span class=\"sy0\">=</span> a<span class=\"sy0\">;</span> <span class=\"co1\">// this declares another reference to point to the same object that \"a\" points to</span><br/>     a.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"co1\">// this modifies the \"x\" field of the object pointed to by \"a\"</span><br/>     <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>b.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// this prints 5, because \"b\" points to the same object as \"a\"</span><br/> <span class=\"br0\">}</span></pre>"}, {"lang": "J", "loc": 9, "block": "<pre class=\"java highlighted_source\"> <span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Foo <span class=\"br0\">{</span> <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/> <span class=\"kw4\">void</span> somefunction<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>     Foo a<span class=\"sy0\">;</span> <span class=\"co1\">// this declares a reference to Foo object; if this is a class field, it is initialized to null</span><br/>     a <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Foo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// this assigns a to point to a new Foo object</span><br/>     Foo b <span class=\"sy0\">=</span> a<span class=\"sy0\">;</span> <span class=\"co1\">// this declares another reference to point to the same object that \"a\" points to</span><br/>     a.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"co1\">// this modifies the \"x\" field of the object pointed to by \"a\"</span><br/>     <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>b.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// this prints 5, because \"b\" points to the same object as \"a\"</span><br/> <span class=\"br0\">}</span></pre>"}, {"lang": "Java", "loc": 9, "block": "<pre class=\"java highlighted_source\"> <span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Foo <span class=\"br0\">{</span> <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/> <span class=\"kw4\">void</span> somefunction<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>     Foo a<span class=\"sy0\">;</span> <span class=\"co1\">// this declares a reference to Foo object; if this is a class field, it is initialized to null</span><br/>     a <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Foo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// this assigns a to point to a new Foo object</span><br/>     Foo b <span class=\"sy0\">=</span> a<span class=\"sy0\">;</span> <span class=\"co1\">// this declares another reference to point to the same object that \"a\" points to</span><br/>     a.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"co1\">// this modifies the \"x\" field of the object pointed to by \"a\"</span><br/>     <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>b.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// this prints 5, because \"b\" points to the same object as \"a\"</span><br/> <span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 39, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// Kotlin Native v0.3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> kotlinx.<span class=\"me1\">cinterop</span>.<span class=\"sy0\">*</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// allocate space for an 'int' on the native heap and wrap a pointer to it in an IntVar object</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> intVar<span class=\"sy0\">:</span> IntVar <span class=\"sy0\">=</span> nativeHeap.<span class=\"me1\">alloc</span><span class=\"sy0\">&lt;</span>IntVar<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    intVar.<span class=\"me1\">value</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>                 <span class=\"co1\">// set its value</span><br/>    println<span class=\"br0\">(</span>intVar.<span class=\"me1\">value</span><span class=\"br0\">)</span>            <span class=\"co1\">// print it</span><br/>    println<span class=\"br0\">(</span>intVar.<span class=\"me1\">ptr</span><span class=\"br0\">)</span>              <span class=\"co1\">// corresponding CPointer object</span><br/>    println<span class=\"br0\">(</span>intVar.<span class=\"me1\">rawPtr</span><span class=\"br0\">)</span>           <span class=\"co1\">// the actual address wrapped by the CPointer</span><br/>\u00a0<br/>    <span class=\"co1\">// change the value and print that</span><br/>    intVar.<span class=\"me1\">value</span> <span class=\"sy0\">=</span> <span class=\"nu0\">333</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>intVar.<span class=\"me1\">value</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>intVar.<span class=\"me1\">ptr</span><span class=\"br0\">)</span>              <span class=\"co1\">// same as before, of course</span><br/>\u00a0<br/>    <span class=\"co1\">// implicitly convert to an opaque pointer which is the supertype of all pointer types</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> op<span class=\"sy0\">:</span> COpaquePointer <span class=\"sy0\">=</span> intVar.<span class=\"me1\">ptr</span><br/>\u00a0<br/>    <span class=\"co1\">// cast opaque pointer to a pointer to ByteVar</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> bytePtr<span class=\"sy0\">:</span> CPointer<span class=\"sy0\">&lt;</span>ByteVar<span class=\"sy0\">&gt;</span> <span class=\"sy0\">=</span> op.<span class=\"me1\">reinterpret</span><span class=\"sy0\">&lt;</span>ByteVar<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>bytePtr.<span class=\"me1\">pointed</span>.<span class=\"me1\">value</span><span class=\"br0\">)</span>   <span class=\"co1\">// value of first byte i.e. 333 - 256 = 77 on Linux</span><br/>    bytePtr <span class=\"sy0\">=</span> <span class=\"br0\">(</span>bytePtr + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span>        <span class=\"co1\">// increment pointer</span><br/>    println<span class=\"br0\">(</span>bytePtr.<span class=\"me1\">pointed</span>.<span class=\"me1\">value</span><span class=\"br0\">)</span>   <span class=\"co1\">// value of second byte i.e. 1 on Linux</span><br/>    println<span class=\"br0\">(</span>bytePtr<span class=\"br0\">)</span>                 <span class=\"co1\">// one byte more than before</span><br/>    bytePtr <span class=\"sy0\">=</span> <span class=\"br0\">(</span>bytePtr + <span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span>     <span class=\"co1\">// decrement pointer</span><br/>    println<span class=\"br0\">(</span>bytePtr<span class=\"br0\">)</span>                 <span class=\"co1\">// back to original value</span><br/>    nativeHeap.<span class=\"me1\">free</span><span class=\"br0\">(</span>intVar<span class=\"br0\">)</span>          <span class=\"co1\">// free native memory</span><br/>\u00a0<br/>    <span class=\"co1\">// allocate space for an array of 3 'int's on the native heap</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> intArray<span class=\"sy0\">:</span> CPointer<span class=\"sy0\">&lt;</span>IntVar<span class=\"sy0\">&gt;</span> <span class=\"sy0\">=</span> nativeHeap.<span class=\"me1\">allocArray</span><span class=\"sy0\">&lt;</span>IntVar<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">2</span><span class=\"br0\">)</span> intArray<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i  <span class=\"co1\">// set them</span><br/>    println<span class=\"br0\">(</span>intArray<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span>             <span class=\"co1\">// print the last element</span><br/>    nativeHeap.<span class=\"me1\">free</span><span class=\"br0\">(</span>intArray<span class=\"br0\">)</span>        <span class=\"co1\">// free native memory</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>A=10<br/>Module Beta {<br/>      Read &amp;X<br/>      X++<br/>}<br/>Beta &amp;A<br/>Print A=11<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 4, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">local</span> table1 <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">}</span><br/><span class=\"kw1\">local</span> table2 <span class=\"sy0\">=</span> table1<br/>table2<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">unpack</span><span class=\"br0\">(</span>table1<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Modula-3", "loc": 5, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">TYPE</span> IntRef <span class=\"sy0\">=</span> <span class=\"kw1\">REF</span> <span class=\"kw4\">INTEGER</span>;<br/>\u00a0<br/><span class=\"kw1\">VAR</span> intref <span class=\"sy0\">:=</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>IntRef<span class=\"br0\">)</span>;<br/>\u00a0<br/>intref^ <span class=\"sy0\">:=</span> <span class=\"nu0\">10</span></pre>"}, {"lang": "Nim", "loc": 5, "block": "<pre class=\"text highlighted_source\">type Foo = ref object<br/>  x, y: float<br/>\u00a0<br/>var f: Foo<br/>new f</pre>"}, {"lang": "OCaml", "loc": 5, "block": "<pre class=\"ocaml highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> p <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">1</span><span class=\"sy0\">;;</span> <span class=\"co1\">(* create a new \"reference\" data structure with initial value 1 *)</span><br/><span class=\"kw1\">let</span> k <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>p<span class=\"sy0\">;;</span>    <span class=\"co1\">(* \"dereference\" the reference, returning the value inside *)</span><br/>p <span class=\"sy0\">:=</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;;</span>    <span class=\"co1\">(* set the value inside to a new value *)</span><br/>\u00a0</pre>"}, {"lang": "Oforth", "loc": 13, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/>\u00a0::class Foo<br/>\u00a0::method init <br/>   <span class=\"kw1\">expose</span> x<br/>   x = <span class=\"nu0\">0</span> <br/>\u00a0::<span class=\"kw1\">attribute</span> x   <br/>\u00a0<br/>\u00a0::routine somefunction<br/>     a = <span class=\"sy0\">.</span>Foo~new   <span class=\"co1\">-- assigns a to point to a new Foo object </span><br/>     b = a          <span class=\"co1\">-- b and a now point to the same object </span><br/>     a~x = <span class=\"nu0\">5</span>        <span class=\"co1\">-- modifies the X variable inside the object pointer to by a</span><br/>     <span class=\"kw1\">say</span> b~x        <span class=\"co1\">-- displays \"5\" because b points to the same object as a </span><br/>\u00a0</pre>"}, {"lang": "ooRexx", "loc": 13, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/>\u00a0::class Foo<br/>\u00a0::method init <br/>   <span class=\"kw1\">expose</span> x<br/>   x = <span class=\"nu0\">0</span> <br/>\u00a0::<span class=\"kw1\">attribute</span> x   <br/>\u00a0<br/>\u00a0::routine somefunction<br/>     a = <span class=\"sy0\">.</span>Foo~new   <span class=\"co1\">-- assigns a to point to a new Foo object </span><br/>     b = a          <span class=\"co1\">-- b and a now point to the same object </span><br/>     a~x = <span class=\"nu0\">5</span>        <span class=\"co1\">-- modifies the X variable inside the object pointer to by a</span><br/>     <span class=\"kw1\">say</span> b~x        <span class=\"co1\">-- displays \"5\" because b points to the same object as a </span><br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 3, "block": "<pre class=\"parigp highlighted_source\">n<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">issquare</span><span class=\"br0\">(</span><span class=\"nu1\">9</span><span class=\"sy0\">,&amp;</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">\\\\ prints 3</span></pre>"}, {"lang": "Pascal", "loc": 9, "block": "<pre class=\"perl highlighted_source\"> <span class=\"co1\"># start with some var definitions</span><br/> <span class=\"kw1\">my</span> <span class=\"re0\">$scalar</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'aa'</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">my</span> <span class=\"re0\">@array</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st_h\">'bb'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'cc'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">my</span> <span class=\"re0\">%hash</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> dd <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'DD'</span><span class=\"sy0\">,</span> ee <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'EE'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"co1\"># make references</span><br/> <span class=\"kw1\">my</span> <span class=\"re0\">$scalarref</span> <span class=\"sy0\">=</span> <span class=\"re0\">\\$scalar</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">my</span> <span class=\"re0\">$arrayref</span> <span class=\"sy0\">=</span> <span class=\"re0\">\\@array</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">my</span> <span class=\"re0\">$hashref</span> <span class=\"sy0\">=</span> <span class=\"re0\">\\%hash</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 9, "block": "<pre class=\"perl highlighted_source\"> <span class=\"co1\"># start with some var definitions</span><br/> <span class=\"kw1\">my</span> <span class=\"re0\">$scalar</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'aa'</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">my</span> <span class=\"re0\">@array</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st_h\">'bb'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'cc'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">my</span> <span class=\"re0\">%hash</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> dd <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'DD'</span><span class=\"sy0\">,</span> ee <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'EE'</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"co1\"># make references</span><br/> <span class=\"kw1\">my</span> <span class=\"re0\">$scalarref</span> <span class=\"sy0\">=</span> <span class=\"re0\">\\$scalar</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">my</span> <span class=\"re0\">$arrayref</span> <span class=\"sy0\">=</span> <span class=\"re0\">\\@array</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">my</span> <span class=\"re0\">$hashref</span> <span class=\"sy0\">=</span> <span class=\"re0\">\\%hash</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 13, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$foo</span> <span class=\"sy0\">=</span> <span class=\"nu0\">42</span><span class=\"sy0\">;</span>    <span class=\"co1\"># place a reference to 42 in $foo's item container</span><br/><span class=\"re0\">$foo</span><span class=\"sy0\">++;</span>          <span class=\"co1\"># deref $foo name, then increment the container's contents to 43</span><br/><span class=\"re0\">$foo</span><span class=\"sy0\">.</span><span class=\"kw3\">say</span><span class=\"sy0\">;</span>        <span class=\"co1\"># deref $foo name, then $foo's container, and call a method on 43.</span><br/>\u00a0<br/><span class=\"re0\">$foo</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">42</span><span class=\"sy0\">;</span>      <span class=\"co1\"># bind a direct ref to 42</span><br/><span class=\"re0\">$foo</span><span class=\"sy0\">++;</span>          <span class=\"co1\"># ERROR, cannot modify immutable value</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@bar</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"co1\"># deref @bar name to array container, then set its values</span><br/><span class=\"re0\">@bar</span>\u00bb<span class=\"sy0\">++;</span>         <span class=\"co1\"># deref @bar name to array container, then increment each value with a hyper</span><br/><span class=\"re0\">@bar</span><span class=\"sy0\">.</span><span class=\"kw3\">say</span><span class=\"sy0\">;</span>        <span class=\"co1\"># deref @bar name to array container, then call say on that, giving 2 3 4</span><br/>\u00a0<br/><span class=\"re0\">@bar</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># bind name directly to a List</span><br/><span class=\"re0\">@bar</span>\u00bb<span class=\"sy0\">++;</span>         <span class=\"co1\"># ERROR, parcels are not mutable</span></pre>"}, {"lang": "Phix", "loc": 5, "block": "<pre class=\"text highlighted_source\">atom addr = allocate(8) -- (assumes 32 bit)<br/>poke4(addr,{NULL,SOME_CONSTANT})<br/>c_proc(xSome_External_Routine,{addr,addr+4})<br/>?peek4s({addr,2})   -- prints {x,y}<br/>free(addr)</pre>"}, {"lang": "PHP", "loc": 28, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"coMULTI\">/* Assignment of scalar variables */</span><br/><span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$b</span> <span class=\"sy0\">=&amp;</span> <span class=\"re0\">$a</span><span class=\"sy0\">;</span> <span class=\"co1\">// $b and $a are now linked together</span><br/><span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"co1\">//both $b and $a now equal 2</span><br/><span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span> <span class=\"co1\">//$c is not a reference; no change to $a or $b</span><br/><a href=\"http://www.php.net/unset\"><span class=\"kw3\">unset</span></a><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//won't unset $b, just $a.</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Passing by Reference in and out of functions */</span><br/><span class=\"kw2\">function</span> <span class=\"sy0\">&amp;</span>pass_out<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">global</span> <span class=\"re0\">$filestr</span><span class=\"sy0\">;</span>  <span class=\"co1\">//$exactly equivalent to: $filestr =&amp; $_GLOBALS['filestr'];</span><br/>\u00a0<br/>    <span class=\"re0\">$filestr</span> <span class=\"sy0\">=</span> get_file_contents<span class=\"br0\">(</span><span class=\"st0\">\"./bigfile.txt\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$_GLOBALS</span><span class=\"br0\">[</span><span class=\"st_h\">'filestr'</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">function</span> pass_in<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$in_filestr</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">echo</span> <span class=\"st0\">\"File Content Length: \"</span><span class=\"sy0\">.</span> <a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$in_filestr</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Changing $in_filestr also changes the global $filestr and $tmp */</span><br/>    <span class=\"re0\">$in_filestr</span> <span class=\"sy0\">.=</span> <span class=\"st0\">\"EDIT\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">echo</span> <span class=\"st0\">\"File Content Length is now longer: \"</span><span class=\"sy0\">.</span> <a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$in_filestr</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$tmp</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>pass_out<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// now $tmp and the global variable $filestr are linked</span><br/>pass_in<span class=\"br0\">(</span><span class=\"re0\">$tmp</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// changes $tmp and prints the length</span><br/>\u00a0<br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 11, "block": "<pre class=\"text highlighted_source\">: (setq L (1 a 2 b 3 c))         # Create a list of 6 items in 'L'<br/>-&gt; (1 a 2 b 3 c)<br/>\u00a0<br/>: (nth L 4)                      # Get a pointer to the 4th item<br/>-&gt; (b 3 c)<br/>\u00a0<br/>: (set (nth L 4) \"Hello\")        # Store \"Hello\" in that location<br/>-&gt; \"Hello\"<br/>\u00a0<br/>: L                              # Look at the modified list in 'L'<br/>-&gt; (1 a 2 \"Hello\" 3 c)</pre>"}, {"lang": "PL/I", "loc": 24, "block": "<pre class=\"pli highlighted_source\">\u00a0<br/><span class=\"kw1\">dcl</span> i <span class=\"kw1\">fixed</span> <span class=\"kw1\">bin</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">dcl</span> p <span class=\"kw1\">pointer</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">dcl</span> j <span class=\"kw1\">fixed</span> <span class=\"kw1\">bin</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">based</span><span class=\"sy0\">;</span><br/>i<span class=\"sy0\">=</span><span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>p<span class=\"sy0\">=</span><span class=\"kw1\">addr</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>p<span class=\"sy0\">-&gt;</span>j<span class=\"sy0\">=</span>p<span class=\"sy0\">-&gt;</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>   <span class=\"sy0\">/</span>an <span class=\"kw1\">other</span> way <span class=\"kw1\">to</span> say i<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">*/</span><br/><span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">edit</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">(</span>F<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"coMULTI\">/* -&gt;  6 */</span><br/>\u00a0<br/><span class=\"coMULTI\">/* second form */</span><br/><span class=\"kw1\">dcl</span> i <span class=\"kw1\">fixed</span> <span class=\"kw1\">bin</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">dcl</span> j <span class=\"kw1\">fixed</span> <span class=\"kw1\">bin</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">based</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>i<span class=\"sy0\">=</span><span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>p<span class=\"sy0\">=</span><span class=\"kw1\">addr</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>j<span class=\"sy0\">=</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>   <span class=\"coMULTI\">/* an other way to say i=i+1 */</span><br/><span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">edit</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">(</span>F<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"coMULTI\">/* -&gt;  6 */</span><br/>\u00a0<br/><span class=\"coMULTI\">/* cascading pointers */</span><br/><span class=\"kw1\">dcl</span> <span class=\"br0\">(</span>p<span class=\"sy0\">,</span>q<span class=\"sy0\">,</span>s<span class=\"sy0\">,</span>t<span class=\"br0\">)</span> <span class=\"kw1\">pointer</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">dcl</span> <span class=\"br0\">(</span>j<span class=\"sy0\">,</span>k<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">bin</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">based</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">dcl</span> <span class=\"br0\">(</span>i1<span class=\"sy0\">,</span>i2<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">bin</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>p<span class=\"sy0\">=</span><span class=\"kw1\">addr</span><span class=\"br0\">(</span>i1<span class=\"br0\">)</span><span class=\"sy0\">;</span> t<span class=\"sy0\">=</span><span class=\"kw1\">addr</span><span class=\"br0\">(</span>i2<span class=\"br0\">)</span><span class=\"sy0\">,</span> q<span class=\"sy0\">=</span><span class=\"kw1\">addr</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span> s<span class=\"sy0\">=</span><span class=\"kw1\">addr</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>q<span class=\"sy0\">-&gt;</span>p<span class=\"sy0\">-&gt;</span>j <span class=\"sy0\">=</span> s<span class=\"sy0\">-&gt;</span>t<span class=\"sy0\">-&gt;</span>k <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span>   <span class=\"coMULTI\">/* to say i1=i2+3 */</span><br/>\u00a0</pre>"}, {"lang": "Pop11", "loc": 1, "block": "<pre>vars vec1, vec2;\n;;; Create a vector and assign (reference to) it to vec1\nconsvector(\"a\", \"b\", \"c\", 3) -&gt; vec1;\n;;; Copy (reference to) vector\nvec1 -&gt; vec2;\n;;; Print value of vec1\nvec1 =&gt;\n;;; Change first element of vec2\n\"d\" -&gt; vec2(1);\n;;; Print value of vec1 -- the value changes because vec1 and\n;;; vec2 reference the same vector\nvec1 =&gt;\n</pre>"}, {"lang": "PureBasic", "loc": 4, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Define</span> varA.i <span class=\"sy0\">=</span> <span class=\"nu0\">5</span>, varB.i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"sy0\">*</span>myInteger.Integer<br/>\u00a0<br/><span class=\"sy0\">*</span>myInteger <span class=\"sy0\">=</span> @varA      <span class=\"co1\">;set pointer to address of an integer variable</span><br/>varB <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>myInteger<span class=\"sy0\">\\</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">3</span> <span class=\"co1\">;set variable to the 3 + value of dereferenced pointer, i.e varB = 8</span></pre>"}, {"lang": "Python", "loc": 32, "block": "<pre class=\"python highlighted_source\"> <span class=\"co1\"># Bind a literal string object to a name:</span><br/> a <span class=\"sy0\">=</span> <span class=\"st0\">\"foo\"</span><br/> <span class=\"co1\"># Bind an empty list to another name:</span><br/> b <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/> <span class=\"co1\"># Classes are \"factories\" for creating new objects: invoke class name as a function:</span><br/> <span class=\"kw1\">class</span> Foo<span class=\"br0\">(</span><span class=\"kw2\">object</span><span class=\"br0\">)</span>:<br/>     <span class=\"kw1\">pass</span><br/> c <span class=\"sy0\">=</span> Foo<span class=\"br0\">(</span><span class=\"br0\">)</span><br/> <span class=\"co1\"># Again, but with optional initialization:</span><br/> <span class=\"kw1\">class</span> Bar<span class=\"br0\">(</span><span class=\"kw2\">object</span><span class=\"br0\">)</span>:<br/>     <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> initializer <span class=\"sy0\">=</span> <span class=\"kw2\">None</span><span class=\"br0\">)</span><br/>         <span class=\"co1\"># \"initializer is an arbitrary identifier, and \"None\" is an arbitrary default value</span><br/>         <span class=\"kw1\">if</span> initializer <span class=\"kw1\">is</span> <span class=\"kw1\">not</span> <span class=\"kw2\">None</span>:<br/>            <span class=\"kw2\">self</span>.<span class=\"me1\">value</span> <span class=\"sy0\">=</span> initializer<br/> d <span class=\"sy0\">=</span> Bar<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/> <span class=\"kw1\">print</span> d.<span class=\"me1\">value</span><br/> <span class=\"co1\"># Test if two names are references to the same object:</span><br/> <span class=\"kw1\">if</span> a <span class=\"kw1\">is</span> b: <span class=\"kw1\">pass</span><br/> <span class=\"co1\"># Alternatively:</span><br/> <span class=\"kw1\">if</span> <span class=\"kw2\">id</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"kw2\">id</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span>: <span class=\"kw1\">pass</span><br/> <span class=\"co1\"># Re-bind a previous used name to a function:</span><br/> <span class=\"kw1\">def</span> a<span class=\"br0\">(</span>fmt<span class=\"sy0\">,</span> *args<span class=\"br0\">)</span>:<br/>     <span class=\"kw1\">if</span> fmt <span class=\"kw1\">is</span> <span class=\"kw2\">None</span>:<br/>         fmt <span class=\"sy0\">=</span> <span class=\"st0\">\"%s\"</span><br/>      <span class=\"kw1\">print</span> fmt\u00a0% <span class=\"br0\">(</span>args<span class=\"br0\">)</span><br/> <span class=\"co1\"># Append reference to a list:</span><br/> b.<span class=\"me1\">append</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/> <span class=\"co1\"># Unbind a reference:</span><br/> <span class=\"kw1\">del</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/> <span class=\"co1\"># Call (anymous function object) from inside a list</span><br/> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"st0\">\"foo\"</span><span class=\"br0\">)</span>  <span class=\"co1\"># Note that the function object we original bound to the name \"a\" continues to exist</span><br/>              <span class=\"co1\"># even if its name is unbound or rebound to some other object.</span></pre>"}, {"lang": "Racket", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define (inc! b) (set-box! b (add1 (unbox b))))<br/>\u00a0<br/>(define b (box 0))<br/>(inc! b)<br/>(inc! b)<br/>(inc! b)<br/>(unbox b)\u00a0; =&gt; 3<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 13, "block": "<pre class=\"sas highlighted_source\"><span class=\"coMULTI\">/* Using ADDR to get memory address, and PEEKC / POKE. There is also PEEK for numeric values. */</span><br/><span class=\"kw6\">data</span> <span class=\"kw1\">_null_</span>;<br/><span class=\"kw3\">length</span> a b c $4;<br/>adr_a=<span class=\"kw3\">addr</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>;<br/>adr_b=<span class=\"kw3\">addr</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span>;<br/>adr_c=<span class=\"kw3\">addr</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span>;<br/>a=<span class=\"st0\">\"ABCD\"</span>;<br/>b=<span class=\"st0\">\"EFGH\"</span>;<br/>c=<span class=\"st0\">\"IJKL\"</span>;<br/>b=<span class=\"kw3\">peekc</span><span class=\"br0\">(</span>adr_a,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/><span class=\"kw4\">call</span> <span class=\"kw3\">poke</span><span class=\"br0\">(</span>b,adr_c,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/><span class=\"kw3\">put</span> a b c;<br/><span class=\"kw6\">run</span>;</pre>"}, {"lang": "SAS", "loc": 13, "block": "<pre class=\"sas highlighted_source\"><span class=\"coMULTI\">/* Using ADDR to get memory address, and PEEKC / POKE. There is also PEEK for numeric values. */</span><br/><span class=\"kw6\">data</span> <span class=\"kw1\">_null_</span>;<br/><span class=\"kw3\">length</span> a b c $4;<br/>adr_a=<span class=\"kw3\">addr</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>;<br/>adr_b=<span class=\"kw3\">addr</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span>;<br/>adr_c=<span class=\"kw3\">addr</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span>;<br/>a=<span class=\"st0\">\"ABCD\"</span>;<br/>b=<span class=\"st0\">\"EFGH\"</span>;<br/>c=<span class=\"st0\">\"IJKL\"</span>;<br/>b=<span class=\"kw3\">peekc</span><span class=\"br0\">(</span>adr_a,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/><span class=\"kw4\">call</span> <span class=\"kw3\">poke</span><span class=\"br0\">(</span>b,adr_c,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/><span class=\"kw3\">put</span> a b c;<br/><span class=\"kw6\">run</span>;</pre>"}, {"lang": "Scala", "loc": 7, "block": "<pre class=\"ruby highlighted_source\">func assign2ref<span class=\"br0\">(</span>ref, value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"sy0\">*</span>ref = value;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var x = <span class=\"nu0\">10</span>;<br/>assign2ref<span class=\"br0\">(</span>\\x, <span class=\"nu0\">20</span><span class=\"br0\">)</span>;<br/>say x;      <span class=\"co1\"># x is now 20</span></pre>"}, {"lang": "Sidef", "loc": 7, "block": "<pre class=\"ruby highlighted_source\">func assign2ref<span class=\"br0\">(</span>ref, value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"sy0\">*</span>ref = value;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var x = <span class=\"nu0\">10</span>;<br/>assign2ref<span class=\"br0\">(</span>\\x, <span class=\"nu0\">20</span><span class=\"br0\">)</span>;<br/>say x;      <span class=\"co1\"># x is now 20</span></pre>"}, {"lang": "Standard ML", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>val p = ref 1; (* create a new \"reference\" data structure with initial value 1 *)<br/>val k =\u00a0!p;    (* \"dereference\" the reference, returning the value inside *)<br/>p\u00a0:= k + 1;    (* set the value inside to a new value *)<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 5, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> var <span class=\"nu0\">3</span><br/><span class=\"kw1\">set</span> pointer var<span class=\"sy0\">;</span> <span class=\"co1\"># assign name \"var\" not value 3</span><br/><span class=\"kw1\">set</span> pointer<span class=\"sy0\">;</span>     <span class=\"co1\"># returns \"var\"</span><br/><span class=\"kw1\">set</span> <span class=\"re0\">$pointer</span><span class=\"sy0\">;</span>    <span class=\"co1\"># returns 3</span><br/><span class=\"kw1\">set</span> <span class=\"re0\">$pointer</span> <span class=\"nu0\">42</span><span class=\"sy0\">;</span> <span class=\"co1\"># variable var now has value 42</span></pre>"}, {"lang": "Toka", "loc": 1, "block": "<pre>variable myvar   #! stores 1 cell\n</pre>"}, {"lang": "XPL0", "loc": 32, "block": "<pre class=\"text highlighted_source\">\\Paraphrasing the C example:<br/>\\This creates a pointer to an integer variable:<br/>int Var, Ptr, V;<br/>Ptr:= @Var;<br/>\u00a0<br/>\\Access the integer variable through the pointer: <br/>Var:= 3;<br/>V:= Ptr(0);     \\set V to the value of Var, i.e. 3<br/>Ptr(0):= 42;    \\set Var to 42<br/>\u00a0<br/>\\Change the pointer to refer to another integer variable:<br/>int OtherVar;<br/>Ptr:= @OtherVar;<br/>\u00a0<br/>\\Change the pointer to not point to anything:<br/>Ptr:= 0;        \\or any integer expression that evaluates to 0<br/>\u00a0<br/>\\Set the pointer to the first item of an array: <br/>int Array(10);<br/>Ptr:= Array;<br/>\\Or alternatively:<br/>Ptr:= @Array(0);<br/>\u00a0<br/>\\Move the pointer to another item in the array:<br/>def IntSize = 4;        \\number of bytes in an integer<br/>Ptr:= Ptr + 3*IntSize;  \\pointer now points to Array(3)<br/>Ptr:= Ptr - 2*IntSize;  \\pointer now points to Array(1)<br/>\u00a0<br/>\\Access an item in the array using the pointer:<br/>V:= Ptr(3);     \\get third item after Array(1), i.e. Array(4)<br/>V:= Ptr(-1);    \\get item immediately preceding Array(1), i.e. Array(0)<br/>]</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">fcn f(r){r.inc()} r:= Ref(1); f(r); r.value; //--&gt;2</pre>"}]}