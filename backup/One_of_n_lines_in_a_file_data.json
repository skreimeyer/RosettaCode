{"task": "One_of_n_lines_in_a_file", "blocks": [{"lang": "Ada", "loc": 34, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Float_Random</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> One_Of_N <span class=\"kw1\">is</span><br/>\u00a0<br/>   Num_Of_Lines: <span class=\"kw3\">constant</span> Positive\u00a0:= <span class=\"nu0\">10</span>;<br/>\u00a0<br/>   <span class=\"kw3\">package</span> Rnd <span class=\"kw3\">renames</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Float_Random</span>;<br/>   Gen: Rnd.<span class=\"me1\">Generator</span>; <span class=\"co1\">-- used globally</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> Choose_One_Of_N<span class=\"br0\">(</span>Last_Line_Number: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span><br/>      Current_Choice: Natural\u00a0:= <span class=\"nu0\">0</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> Line_Number <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Last_Line_Number</span> <span class=\"kw1\">loop</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Rnd.<span class=\"me1\">Random</span><span class=\"br0\">(</span>Gen<span class=\"br0\">)</span> * Float<span class=\"br0\">(</span>Line_Number<span class=\"br0\">)</span> &lt;= <span class=\"nu0\">1.0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>           Current_Choice\u00a0:= Line_Number;<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Current_Choice;<br/>   <span class=\"kw1\">end</span> Choose_One_Of_N;<br/>\u00a0<br/>   Results: <span class=\"kw3\">array</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"me1\">Num_Of_Lines</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Natural\u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>   Index: Integer <span class=\"kw3\">range</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Num_Of_Lines</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Rnd.<span class=\"me1\">Reset</span><span class=\"br0\">(</span>Gen<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">1</span>_000_000 <span class=\"kw1\">loop</span>    <span class=\"co1\">-- compute results</span><br/>      Index\u00a0:= Choose_One_Of_N<span class=\"br0\">(</span>Num_Of_Lines<span class=\"br0\">)</span>;<br/>      Results<span class=\"br0\">(</span>Index<span class=\"br0\">)</span>\u00a0:= Results<span class=\"br0\">(</span>Index<span class=\"br0\">)</span> + <span class=\"nu0\">1</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/>   <span class=\"kw1\">for</span> R <span class=\"kw3\">in</span> Results'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span>    <span class=\"co1\">-- output results</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>Results<span class=\"br0\">(</span>R<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> One_Of_N;</pre>"}, {"lang": "ALGOL 68", "loc": 15, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw2\">BEGIN</span><br/>   <span class=\"kw3\">INT</span> max lines <span class=\"sy1\">=</span> 10<span class=\"sy1\">;</span>\t\t<span class=\"co1\">CO Should be read from a file. CO</span><br/>   <span class=\"br0\">[</span>max lines<span class=\"br0\">]</span><span class=\"kw3\">INT</span> stats<span class=\"sy1\">;</span><br/>   <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> max lines <span class=\"kw2\">DO</span> stats<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 0 <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>   <span class=\"kw25\">first random</span> <span class=\"br0\">(</span>42<span class=\"br0\">)</span><span class=\"sy1\">;</span>\t\t<span class=\"co1\">CO Should have rather more entropy! CO</span><br/>   <span class=\"kw4\">PROC</span> one of n <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"br0\">)</span> <span class=\"kw3\">INT</span> <span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"kw3\">INT</span> result <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>      <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> n <span class=\"kw2\">DO</span> <span class=\"br0\">(</span>random <span class=\"sy1\">&lt;</span> 1<span class=\"sy1\">/</span>i <span class=\"sy1\">|</span> result <span class=\"sy1\">:=</span> i<span class=\"br0\">)</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>      result<br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>   <span class=\"kw2\">TO</span> 1000000 <span class=\"kw2\">DO</span> stats<span class=\"br0\">[</span>one of n <span class=\"br0\">(</span>max lines<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> 1 <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>   <span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Line  Number times chosen\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> max lines <span class=\"kw2\">DO</span> <span class=\"kw22\">printf</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$g<span class=\"br0\">(</span>0<span class=\"br0\">)</span>7xg<span class=\"br0\">(</span>0<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span> i<span class=\"sy1\">,</span> stats<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">OD</span><br/><span class=\"kw2\">END</span></pre>"}, {"lang": "Applesoft BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">10 I = RND(0)\u00a0: REMRANDOM SEED<br/>\u00a0<br/>20 FOR J = 1 TO 1000000\u00a0: REMMAYBE TRY 100 ON A 1MHZ APPLE II<br/>30     N = 10\u00a0: GOSUB 100\"ONE_OF_N<br/>40     C(C) = C(C) + 1<br/>50 NEXT<br/>\u00a0<br/>60 FOR J = 1 TO 10<br/>70     PRINT J, C(J)<br/>80 NEXT<br/>90 END<br/>\u00a0<br/>100 REMONE_OF_N<br/>110 FOR I = 1 TO N<br/>120     IF INT(RND(1) * I) = 0 THEN C = I<br/>130 NEXT I<br/>140 RETURN</pre>"}, {"lang": "AutoHotkey", "loc": 22, "block": "<pre class=\"autohotkey highlighted_source\">one_of_n<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"co1\">; One based line numbers</span><br/>    choice <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> rnd<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>\u00a0% <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">If</span> rnd <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            choice <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> choice<br/><span class=\"br0\">}</span><br/>one_of_n_test<span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> trials<span class=\"sy0\">=</span><span class=\"nu0\">100000</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    bins <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% trials<br/>        bins<span class=\"br0\">[</span>one_of_n<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">return</span> bins<br/><span class=\"br0\">}</span><br/>\u00a0<br/>b <span class=\"sy0\">:=</span> one_of_n_test<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">10</span><br/>   out <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"st0\">\": \"</span> b<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span> <span class=\"st0\">\"`n\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% out</pre>"}, {"lang": "AWK", "loc": 16, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/gawk -f</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># Usage:</span><br/><span class=\"co1\">#   gawk -v Seed=$RANDOM -f one_of_n_lines_in_a_file.awk</span><br/><span class=\"co1\">#</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>   <span class=\"kw4\">srand</span><span class=\"br0\">(</span>Seed <span class=\"sy5\">?</span> Seed <span class=\"sy5\">:</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">NR</span><span class=\"sy3\">*</span><span class=\"kw4\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      line = <span class=\"re0\">$0</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">END</span> <span class=\"br0\">{</span><br/>   <span class=\"kw5\">print</span> line;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 24, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">FUNCTION</span> oneofN&amp; <span class=\"br0\">(</span>n <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> L0 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><span class=\"sy0\">,</span> c <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> chosen<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckrandomize.shtml\"><span class=\"kw3\">RANDOMIZE</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcktimer.shtml\"><span class=\"kw3\">TIMER</span></a><br/>\u00a0<br/><span class=\"kw1\">FOR</span> L0 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1000000</span><br/>    c <span class=\"sy0\">=</span> oneofN&amp;<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    chosen<span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">=</span> chosen<span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">NEXT</span><br/>\u00a0<br/><span class=\"kw1\">FOR</span> L0 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> L0<span class=\"sy0\">,</span> chosen<span class=\"br0\">(</span>L0<span class=\"br0\">)</span><br/><span class=\"kw1\">NEXT</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> oneofN&amp; <span class=\"br0\">(</span>n <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><span class=\"br0\">)</span><br/>    <span class=\"co1\">'assumes first line is 1</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> L1 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><span class=\"sy0\">,</span> choice <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><br/>    <span class=\"kw1\">FOR</span> L1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n<br/>        <span class=\"kw1\">IF</span> <a href=\"http://www.qbasicnews.com/qboho/qckint.shtml\"><span class=\"kw3\">INT</span></a><span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckrnd.shtml\"><span class=\"kw3\">RND</span></a> <span class=\"sy0\">*</span> L1<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> choice <span class=\"sy0\">=</span> L1<br/>    <span class=\"kw1\">NEXT</span><br/>    oneofN&amp; <span class=\"sy0\">=</span> choice<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span></pre>"}, {"lang": "BBC BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">      @% = 7\u00a0: REM Column width<br/>      DIM cnt%(10)<br/>      FOR test% = 1 TO 1000000<br/>        cnt%(FNone_of_n(10)) += 1<br/>      NEXT<br/>      FOR i% = 1 TO 10<br/>        PRINT cnt%(i%);<br/>      NEXT<br/>      PRINT<br/>      END<br/>\u00a0<br/>      DEF FNone_of_n(n%)<br/>      LOCAL i%, l%<br/>      FOR i% = 1 TO n%<br/>        IF RND(1) &lt;= 1/i% l% = i%<br/>      NEXT<br/>      = l%</pre>"}, {"lang": "C", "loc": 27, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw2\">inline</span> <span class=\"kw4\">int</span> irand<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> r<span class=\"sy0\">,</span> randmax <span class=\"sy0\">=</span> RAND_MAX<span class=\"sy0\">/</span>n <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>r <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> randmax<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> r <span class=\"sy0\">/</span> <span class=\"br0\">(</span>randmax <span class=\"sy0\">/</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">inline</span> <span class=\"kw4\">int</span> one_of_n<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>irand<span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> r <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> r<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++,</span> r<span class=\"br0\">[</span>one_of_n<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d%c\"</span><span class=\"sy0\">,</span> r<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">9</span> <span class=\"sy0\">?</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy0\">:</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 28, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;random&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/>mt19937 engine<span class=\"sy4\">;</span> <span class=\"co1\">//mersenne twister</span><br/>\u00a0<br/><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> one_of_n<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> choice<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tuniform_int_distribution<span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> distribution<span class=\"br0\">(</span><span class=\"nu0\">0</span>, i<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy3\">!</span>distribution<span class=\"br0\">(</span>engine<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tchoice <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> choice<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tengine <span class=\"sy1\">=</span> mt19937<span class=\"br0\">(</span>random_device<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">//seed random generator from system</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> results<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">1000000</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>\t\tresults<span class=\"br0\">[</span>one_of_n<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\tostream_iterator<span class=\"sy1\">&lt;</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> out_it<span class=\"br0\">(</span><span class=\"kw3\">cout</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tcopy<span class=\"br0\">(</span>results, results<span class=\"sy2\">+</span><span class=\"nu0\">10</span>, out_it<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 34, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> Random rnd <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> one_of_n<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> currentChoice <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw4\">double</span> outerLimit <span class=\"sy0\">=</span> 1D <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>i<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rnd<span class=\"sy0\">.</span><span class=\"me1\">NextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> outerLimit<span class=\"br0\">)</span><br/>                    currentChoice <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> currentChoice<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Dictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> results <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Dictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">11</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                results<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>i, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> result <span class=\"sy0\">=</span> one_of_n<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                results<span class=\"br0\">[</span>result<span class=\"br0\">]</span> <span class=\"sy0\">=</span> results<span class=\"br0\">[</span>result<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">11</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}<span class=\"es0\">\\t</span>{1}\"</span>, i, results<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Chapel", "loc": 14, "block": "<pre class=\"text highlighted_source\">use Random;<br/>\u00a0<br/>proc one_of_n(n) {<br/>    var rand = new RandomStream();<br/>    var keep = 1;<br/>\u00a0<br/>    for i in 2..n do<br/>        if rand.getNext() &lt; 1.0 / i then<br/>            keep = i;<br/>\u00a0<br/>    delete rand;<br/>\u00a0<br/>    return keep;<br/>}</pre>"}, {"lang": "Clojure", "loc": 11, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> rand<span class=\"sy0\">-</span>seq<span class=\"sy0\">-</span>elem <span class=\"br0\">[</span>sequence<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>f <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>k old<span class=\"br0\">]</span> new<span class=\"br0\">]</span><br/>            <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">inc</span> k<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span>rand<span class=\"sy0\">-</span>int k<span class=\"br0\">)</span><span class=\"br0\">)</span> new old<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> sequence <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> f <span class=\"br0\">[</span><span class=\"nu0\">1</span> nil<span class=\"br0\">]</span><span class=\"br0\">)</span> second<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> one<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>n <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>rand<span class=\"sy0\">-</span>seq<span class=\"sy0\">-</span>elem <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>countmap <span class=\"br0\">(</span>frequencies <span class=\"br0\">(</span><span class=\"kw1\">repeatedly</span> <span class=\"nu0\">1000000</span> #<span class=\"br0\">(</span>one<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>n <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>n cnt<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">sort</span> countmap<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>println n cnt<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 19, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> one-of-n-fn <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>cur <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>sel <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">setq</span> cur <span class=\"br0\">(</span>+ cur <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">eql</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> cur<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setq</span> sel v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        sel<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> test-one-of-n <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>counts <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"nu0\">10</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-contents</span> '<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>fnt<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>test <span class=\"nu0\">0</span> <span class=\"br0\">(</span>+ <span class=\"nu0\">1</span> test<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eql</span> test <span class=\"nu0\">1000000</span><span class=\"br0\">)</span> counts<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">setq</span> fnt <span class=\"br0\">(</span>one-of-n-fn<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>probe <span class=\"nu0\">0</span> <span class=\"br0\">(</span>+ <span class=\"nu0\">1</span> probe<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eql</span> probe <span class=\"nu0\">9</span><span class=\"br0\">)</span> t<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> fnt probe<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>sel <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> fnt <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> counts sel<span class=\"br0\">)</span> <span class=\"br0\">(</span>+ <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> counts sel<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 19, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">random</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// Zero-based line numbers.</span><br/><span class=\"kw4\">int</span> oneOfN<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> choice <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            choice <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> choice<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> bins<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">1</span>_000_000<span class=\"br0\">)</span><br/>        bins<span class=\"br0\">[</span><span class=\"nu0\">10</span>.<span class=\"me1\">oneOfN</span><span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>\u00a0<br/>    bins.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Total of bins: \"</span><span class=\"sy0\">,</span> bins<span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">sum</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Eiffel", "loc": 35, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>\u00a0<br/>\tmake<br/>\t\t\t<span class=\"co1\">-- Simulates one_of_n_lines a 1000000 times.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tt<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\tsimulator<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> simulator.<span class=\"me1\">make_filled</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">create</span> one.<span class=\"me1\">make</span><br/>\t\t\tacross<br/>\t\t\t\t<span class=\"nu0\">1</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> <span class=\"nu0\">1000000</span> <span class=\"kw2\">as</span> c<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\tt <span class=\"sy0\">:=</span> one.<span class=\"me1\">one_of_n_lines</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\t\t\t\tsimulator <span class=\"br0\">[</span>t<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> simulator <span class=\"br0\">[</span>t<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\tacross<br/>\t\t\t\tsimulator <span class=\"kw2\">as</span> s<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\tio.<span class=\"me1\">put_integer</span> <span class=\"br0\">(</span>s.<span class=\"me1\">item</span><span class=\"br0\">)</span><br/>\t\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tone<span class=\"sy0\">:</span> ONE_OF_N_LINES<br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 18, "block": "<pre class=\"text highlighted_source\">defmodule One_of_n_lines_in_file do<br/>  def task do<br/>    dict = Enum.reduce(1..1000000,\u00a0%{}, fn _,acc -&gt;<br/>      Map.update( acc, one_of_n(10), 1, &amp;(&amp;1+1) )<br/>    end)<br/>    Enum.each(Enum.sort(Map.keys(dict)), fn x -&gt;<br/>     \u00a0:io.format \"Line ~2w selected: ~6w~n\", [x, dict[x]]<br/>    end)<br/>  end<br/>\u00a0<br/>  def one_of_n( n ), do: loop( n, 2,\u00a0:rand.uniform, 1 )<br/>\u00a0<br/>  def loop( max, n, _random, acc ) when n == max + 1, do: acc<br/>  def loop( max, n, random, _acc ) when random &lt; (1/n), do: loop( max, n + 1,\u00a0:rand.uniform, n )<br/>  def loop( max, n, _random, acc ), do: loop( max, n + 1,\u00a0:rand.uniform, acc )<br/>end<br/>\u00a0<br/>One_of_n_lines_in_file.task</pre>"}, {"lang": "Erlang", "loc": 18, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> one_of_n_lines_in_file  <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>one_of_n<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">one_of_n</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Dict</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> update_counter<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span>  <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">new</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1000000</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"Line ~p selected: ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">fetch</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sort</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">fetch_keys</span><span class=\"br0\">(</span><span class=\"re5\">Dict</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">_Random</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">Max</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Acc</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Random</span><span class=\"sy1\">,</span> <span class=\"re5\">_Acc</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">Random</span> <span class=\"sy3\">&lt;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy3\">/</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">_Random</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">update_counter</span><span class=\"br0\">(</span> <span class=\"re5\">_N</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">update_counter</span><span class=\"br0\">(</span> <span class=\"re3\">one_of_n</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM ONE_OF_N<br/>\u00a0<br/>DIM CNT[10]<br/>\u00a0<br/>PROCEDURE ONE_OF_N(N-&gt;L)<br/>  LOCAL I<br/>  FOR I=1 TO N DO<br/>     IF RND(1)&lt;=1.0/I THEN L=I END IF<br/>  END FOR<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>  N=10<br/>  RANDOMIZE(TIMER)      \u00a0! init<br/>  FOR TEST=1 TO 1000000 DO<br/>     ONE_OF_N(N-&gt;L)<br/>     CNT[L]+=1<br/>  END FOR<br/>  FOR I=1 TO N DO<br/>     PRINT(CNT[I];)<br/>  END FOR<br/>  PRINT<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 28, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"co1\">--  One of n lines in a file</span><br/><span class=\"kw1\">include</span> std<span class=\"sy1\">/</span><span class=\"kw2\">rand</span>.e<br/><span class=\"kw1\">include</span> std<span class=\"sy1\">/</span>math.e<br/>\u00a0<br/><span class=\"kw1\">function</span> one_of_n<span class=\"br0\">(</span><span class=\"kw2\">integer</span> n<span class=\"br0\">)</span><br/>\t<span class=\"kw2\">integer</span> line_num <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">if</span> rnd<span class=\"br0\">(</span><span class=\"br0\">)</span> &lt; <span class=\"nu0\">1</span> <span class=\"sy1\">/</span> i <span class=\"kw1\">then</span><br/>\t\t\tline_num <span class=\"sy1\">=</span> i<br/>\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\t<span class=\"kw1\">return</span> line_num<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"kw2\">integer</span> num_reps <span class=\"sy1\">=</span> <span class=\"nu0\">1000000</span><span class=\"sy2\">,</span> num_lines_in_file <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><br/>\t<span class=\"kw2\">sequence</span> lines <span class=\"sy1\">=</span> <span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy2\">,</span>num_lines_in_file<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> num_reps <span class=\"kw1\">do</span><br/>\t\tlines<span class=\"br0\">[</span>one_of_n<span class=\"br0\">(</span>num_lines_in_file<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy1\">+=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\t<span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> num_lines_in_file <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"Number of times line\u00a0%d was selected:\u00a0%g<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span>i<span class=\"sy2\">,</span>lines<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\t<span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"Total number selected:\u00a0%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> sum<span class=\"br0\">(</span>lines<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">procedure</span><br/>\u00a0<br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 23, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main args <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> rnd <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">let</span> one_of_n n <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> loop i r <span class=\"sy0\">=</span><br/>            <span class=\"kw1\">if</span> i <span class=\"sy0\">&gt;=</span> n <span class=\"kw1\">then</span> r <span class=\"kw1\">else</span><br/>                <span class=\"kw1\">if</span> rnd.<span class=\"me1\">Next</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>                <span class=\"kw1\">then</span> loop <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> i<br/>                <span class=\"kw1\">else</span> loop <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> r<br/>        loop <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">let</span> test n trials <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> ar <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">zeroCreate</span> n<br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> trials <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">let</span> d <span class=\"sy0\">=</span> one_of_n n<br/>            ar.<span class=\"br0\">[</span>d<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> ar.<span class=\"br0\">[</span>d<span class=\"br0\">]</span><br/>        Console.<span class=\"me1\">WriteLine</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, ar<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    test <span class=\"nu0\">10</span> <span class=\"nu0\">1000000</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Factor", "loc": 11, "block": "<pre class=\"text highlighted_source\">! rosettacode/random-line/random-line.factor<br/>USING: io kernel locals math random\u00a0;<br/>IN: rosettacode.random-line<br/>\u00a0<br/>:: random-line ( -- line )<br/>    readln\u00a0:&gt; choice! 1\u00a0:&gt; count!<br/>    [ readln dup ]<br/>    [ count 1 + dup count! random zero?<br/>        [ choice! ] [ drop ] if<br/>    ] while drop<br/>    choice\u00a0;</pre>"}, {"lang": "Forth", "loc": 13, "block": "<pre class=\"text highlighted_source\">require random.fs<br/>\u00a0<br/>: frnd<br/>   rnd 0 d&gt;f [ s\" MAX-U\" environment? drop 0 d&gt;f 1/f ] fliteral f*\u00a0;<br/>: u&gt;f 0 d&gt;f\u00a0;<br/>: one_of_n ( u1 -- u2 )<br/>   1 swap  1+ 2\u00a0?do  frnd  i u&gt;f 1/f  f&lt;  if drop i then  loop\u00a0;<br/>\u00a0<br/>create hist 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,  does&gt; swap cells +\u00a0;<br/>: simulate  1000000 0 do  1  10 one_of_n 1- hist  +!  loop\u00a0;<br/>: .hist  cr 10 0 do  i 1+ 2 .r .\"\u00a0: \"  i hist @ .  cr loop\u00a0;<br/>\u00a0<br/>simulate .hist bye</pre>"}, {"lang": "Go", "loc": 82, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"bufio\"</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"io\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// choseLineRandomly implements the method described in the task.</span><br/><span class=\"co1\">// input is a an io.Reader, which could be an os.File, for example.</span><br/><span class=\"co1\">// Or, to implement a simulation, it could be anything else that implements</span><br/><span class=\"co1\">// io.Reader.  The method as described suggests saving and returning</span><br/><span class=\"co1\">// lines, but the rest of the task requires line numbers.  This function</span><br/><span class=\"co1\">// thus returns both.</span><br/><span class=\"kw4\">func</span> choseLineRandomly<span class=\"sy1\">(</span>r <a href=\"http://golang.org/search?q=io.Reader\"><span class=\"kw5\">io.<span class=\"me1\">Reader</span></span></a><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">,</span> ln <span class=\"kw4\">int</span><span class=\"sy1\">,</span> err error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    br <span class=\"sy2\">:=</span> bufio<span class=\"sy3\">.</span>NewReader<span class=\"sy1\">(</span>r<span class=\"sy1\">)</span><br/>    s<span class=\"sy1\">,</span> err <span class=\"sy2\">=</span> br<span class=\"sy3\">.</span>ReadString<span class=\"sy1\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    ln <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>    lnLast <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy3\">.</span><br/>    <span class=\"kw1\">var</span> sLast <span class=\"kw4\">string</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// note bufio.ReadString used here.  This effectively defines a</span><br/>        <span class=\"co1\">// line of the file as zero or more bytes followed by a newline.</span><br/>        sLast<span class=\"sy1\">,</span> err <span class=\"sy2\">=</span> br<span class=\"sy3\">.</span><span class=\"me1\">ReadString</span><span class=\"sy1\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> err <span class=\"sy3\">==</span> io<span class=\"sy3\">.</span>EOF <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> s<span class=\"sy1\">,</span> ln<span class=\"sy1\">,</span> <span class=\"kw2\">nil</span> <span class=\"co1\">// normal return</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>        lnLast<span class=\"sy2\">++</span><br/>        <span class=\"kw1\">if</span> rand<span class=\"sy3\">.</span>Float64<span class=\"sy1\">()</span> &lt; <span class=\"nu0\">1</span><span class=\"sy3\">/</span>lnLast <span class=\"sy1\">{</span><br/>            s <span class=\"sy2\">=</span> sLast<br/>            ln <span class=\"sy2\">=</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>lnLast<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"co1\">// error return</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// oneOfN function required for task item 1.  Specified to take a number</span><br/><span class=\"co1\">// n, the number of lines in a file, but the method (above) specified to</span><br/><span class=\"co1\">// to be used does not need n, but rather the file itself.  This function</span><br/><span class=\"co1\">// thus takes both, ignoring n and passing the file to choseLineRandomly.</span><br/><span class=\"kw4\">func</span> oneOfN<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">,</span> file <a href=\"http://golang.org/search?q=io.Reader\"><span class=\"kw5\">io.<span class=\"me1\">Reader</span></span></a><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    _<span class=\"sy1\">,</span> ln<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> choseLineRandomly<span class=\"sy1\">(</span>file<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw3\">panic</span><span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> ln<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// simulated file reader for task item 2</span><br/><span class=\"kw1\">type</span> simReader <span class=\"kw4\">int</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>r <span class=\"sy3\">*</span>simReader<span class=\"sy1\">)</span> Read<span class=\"sy1\">(</span>b <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy3\">*</span>r &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> io<span class=\"sy3\">.</span>EOF<br/>    <span class=\"sy1\">}</span><br/>    b<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><br/>    <span class=\"sy3\">*</span>r<span class=\"sy2\">--</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// task item 2 simulation consists of accumulating frequency statistic</span><br/>    <span class=\"co1\">// on 1,000,000 calls of oneOfN on simulated file.</span><br/>    n <span class=\"sy2\">:=</span> <span class=\"nu0\">10</span><br/>    freq <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    rand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>UnixNano<span class=\"sy1\">())</span><br/>    <span class=\"kw1\">for</span> times <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> times &lt; <span class=\"nu1\">1e6</span><span class=\"sy1\">;</span> times<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        sr <span class=\"sy2\">:=</span> simReader<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>        freq<span class=\"sy1\">[</span>oneOfN<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> &amp;sr<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><span class=\"sy2\">++</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// task item 3.  show frequencies.</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>freq<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 33, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>Map <span class=\"kw1\">as</span> M<br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Environment<br/>\u00a0<br/>testFile <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><br/>\u00a0<br/>selItem g xs <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a><span class=\"st0\">' f (head xs, 1, 2, g) $ tail xs<br/>    where f\u00a0:: RandomGen a =&gt; (b, Int, Int, a) -&gt; b -&gt; (b, Int, Int, a)<br/>          f (c, cn, n, gen) l | v == 1    = (l, n, n+1, ngen)<br/>                              | otherwise = (c, cn, n+1, ngen)<br/>            where (v, ngen) = randomR (1, n) gen<br/>\u00a0<br/>oneOfN a = do<br/>            g &lt;- newStdGen<br/>            let (r, _, _, _) = selItem g a<br/>            return r<br/>\u00a0<br/>test = do<br/>        x &lt;- replicateM 1000000 (oneOfN testFile)<br/>        let f m l = M.insertWith (+) l 1 m<br/>        let results = foldl'</span> f M<span class=\"sy0\">.</span>empty x<br/>        forM<span class=\"sy0\">_</span> <span class=\"br0\">(</span>M<span class=\"sy0\">.</span>toList results<span class=\"br0\">)</span> <span class=\"sy0\">$</span> \\<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"Line number \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> x <span class=\"sy0\">++</span> <br/>\t\t\t\t\t\t\t\t <span class=\"st0\">\" had count\u00a0:\"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> y<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>        a <span class=\"sy0\">&lt;-</span> getArgs<br/>        g <span class=\"sy0\">&lt;-</span> newStdGen<br/>        <span class=\"kw1\">if</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:null\"><span class=\"kw3\">null</span></a> a <span class=\"kw1\">then</span> test<br/>                  <span class=\"kw1\">else</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a><span class=\"sy0\">.</span><span class=\"br0\">(</span>\\<span class=\"br0\">(</span>l<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> <span class=\"sy0\">_,</span> <span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"st0\">\"Line \"</span> <span class=\"sy0\">++</span><br/>                               <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> n <span class=\"sy0\">++</span> <span class=\"st0\">\": \"</span> <span class=\"sy0\">++</span> l<span class=\"br0\">)</span><br/>                       <span class=\"sy0\">.</span>selItem g<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lines\"><span class=\"kw3\">lines</span></a> <span class=\"sy0\">=&lt;&lt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:readFile\"><span class=\"kw3\">readFile</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> a<span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 17, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># one of n</span><br/>   one_of_n_test<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span><span class=\"nu0\">1000000</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> one_of_n<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> i <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span> <br/>      choice <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"sy1\">?</span><span class=\"nu0\">0</span>  <span class=\"sy1\">&lt;</span> <span class=\"nu0\">1</span><span class=\"sy1\">.</span> <span class=\"sy1\">/</span> i<span class=\"sy1\">,</span> i<span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> <span class=\"sy1\">\\</span>choice <span class=\"sy1\">|</span> <span class=\"kw1\">fail</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> one_of_n_test<span class=\"br0\">(</span>n<span class=\"sy1\">,</span>trials<span class=\"br0\">)</span><br/>   bins <span class=\"sy1\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> i <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> trials <span class=\"kw1\">do</span><br/>         bins<span class=\"br0\">[</span>one_of_n<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span>bins<span class=\"br0\">[</span>i <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> bins<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 20, "block": "<pre class=\"j highlighted_source\">randLineBig=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  file=. boxopen <span class=\"kw2\">y</span><br/>  r=. <span class=\"st_h\">''</span><br/>  <span class=\"kw2\">n</span>=. <span class=\"nu0\">1</span><br/>  size=. fsize file<br/>  blocksize=. <span class=\"nu0\">1e7</span><br/>  buffer=. <span class=\"st_h\">''</span><br/>  <span class=\"re0\">for_block.</span> |: blocksize -~/\\@<span class=\"sy0\">(</span>] &lt;. [ * <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> +/<a class=\"__cf_email__\" data-cfemail=\"6b02452b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;<a class=\"__cf_email__\" data-cfemail=\"90bed0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>%~<span class=\"sy0\">)</span> size <span class=\"kw1\">do.</span><br/>    buffer=. buffer, fread file,&lt;block<br/>    linends=. LF = buffer<br/>    lines=. linends &lt;;.<span class=\"nu0\">2</span> buffer<br/>    buffer=. buffer }.~ {: <span class=\"nu0\">1</span>+I.linends<br/>    pick=. <span class=\"sy0\">(</span><span class=\"nu0\">0</span>\u00a0<a class=\"__cf_email__\" data-cfemail=\"cbf48b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>$~ #lines<span class=\"sy0\">)</span> &lt;\u00a0% <span class=\"kw2\">n</span>+i.#lines<br/>    <span class=\"kw1\">if.</span> <span class=\"nu0\">1</span> e. pick <span class=\"kw1\">do.</span><br/>      r=. <span class=\"sy0\">(</span>{:I.pick<span class=\"sy0\">)</span> {:: lines<br/>    <span class=\"kw1\">end.</span><br/>    <span class=\"kw2\">n</span>=. <span class=\"kw2\">n</span>+#lines<br/>  <span class=\"kw1\">end.</span><br/>  r<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 32, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Random</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> OneOfNLines <span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a> rand<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> oneOfN<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> choice <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>rand.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t\tchoice <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">return</span> choice<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span> trials <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> bins <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\trand <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> trials<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\tbins<span class=\"br0\">[</span>oneOfN<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>\u00a0<br/>\u00a0<br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>bins<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>const N = 10<br/>const GOAL = 10^6<br/>\u00a0<br/>function oneofn{T&lt;:Integer}(n::T)<br/>    0 &lt; n || error(\"n = \", n, \", but it should be positive.\")<br/>    oon = 1<br/>    for i in 2:n<br/>        rand(1:i) == 1 || continue<br/>        oon = i<br/>    end<br/>    return oon<br/>end<br/>\u00a0<br/>nhist = zeros(Int, N)<br/>for i in 1:GOAL<br/>    nhist[oneofn(N)] += 1<br/>end<br/>\u00a0<br/>println(\"Simulating oneofn(\", N, \") \", GOAL, \" times:\")<br/>for i in 1:N<br/>    println(@sprintf \"  \u00a0%2d =&gt;\u00a0%6d\" i nhist[i])<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 24, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.51</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun oneOfN<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> choice <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">2</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>r.<span class=\"me1\">nextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1.0</span> / i<span class=\"br0\">)</span> choice <span class=\"sy0\">=</span> i<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> choice<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> freqs <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> reps <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<br/>    repeat<span class=\"br0\">(</span>reps<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> num <span class=\"sy0\">=</span> oneOfN<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        freqs<span class=\"br0\">[</span>num - <span class=\"nu0\">1</span><span class=\"br0\">]</span>++<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"Line ${\"</span><span class=\"sy0\">%</span>-2d<span class=\"st0\">\".format(i)} = ${freqs[i - 1]}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 20, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">DIM</span> chosen<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10000</span><span class=\"co1\">'00</span><br/>    c <span class=\"sy0\">=</span> oneofN<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    chosen<span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">=</span> chosen<span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">NEXT</span><br/>\u00a0<br/><span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">PRINT</span> i<span class=\"sy0\">,</span> chosen<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">NEXT</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> oneofN<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n<br/>        <span class=\"kw1\">IF</span> <span class=\"kw2\">RND</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span>i <span class=\"kw1\">THEN</span> oneofN <span class=\"sy0\">=</span> i<br/>    <span class=\"kw1\">NEXT</span><br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span><br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 33, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw3\">math.randomseed</span><span class=\"br0\">(</span><span class=\"kw3\">os.time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">local</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/><span class=\"kw1\">local</span> trials <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span><br/>\u00a0<br/><span class=\"kw1\">function</span> one<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> chosen <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span>i <span class=\"kw1\">then</span><br/>            chosen <span class=\"sy0\">=</span> i<br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> chosen<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- 0 filled table for storing results</span><br/><span class=\"kw1\">local</span> results <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"kw1\">do</span> results<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- run simulation</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> trials <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">local</span> result <span class=\"sy0\">=</span> one<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    results<span class=\"br0\">[</span>result<span class=\"br0\">]</span> <span class=\"sy0\">=</span> results<span class=\"br0\">[</span>result<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Value\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Occurrences\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"-------------------\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>results<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span>k<span class=\"sy0\">,</span>v<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 8, "block": "<pre class=\"text highlighted_source\">chooseLine[file_]\u00a0:= Block[{strm = OpenRead[file], n = 1, rec, selected},<br/>  \t\t\t\t\t     rec = selected = Read[strm];<br/>  \t\t\t\t\t     While[rec =!= EndOfFile, <br/>                                                    rec=Read[strm];<br/>                                                    n++; <br/>                                                    If[RandomReal[] &lt; 1/n, selected = rec]];<br/>                                             Close[strm];<br/>                                             selected]</pre>"}, {"lang": "MATLAB / Octave", "loc": 14, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> <span class=\"br0\">[</span>n,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/line.html\"><span class=\"kw2\">line</span></a><span class=\"br0\">]</span> = one_of_n_lines_in_a_file<span class=\"br0\">(</span>fn<span class=\"br0\">)</span><br/>fid = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fopen.html\"><span class=\"kw2\">fopen</span></a><span class=\"br0\">(</span>fn,<span class=\"co2\">'r'</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">if</span> fid&lt;<span class=\"nu0\">0</span>, <span class=\"kw1\">return</span>; <span class=\"kw1\">end</span>; <br/>N = <span class=\"nu0\">0</span>; <br/>n = <span class=\"nu0\">1</span>;<br/><span class=\"kw1\">while</span> ~<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/feof.html\"><span class=\"kw2\">feof</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span><br/>\tN = N+<span class=\"nu0\">1</span>;<br/>\tL = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fgetl.html\"><span class=\"kw2\">fgetl</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>N*<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/rand.html\"><span class=\"kw2\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> &lt; <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\tn = N;\t\t<br/>\t\t<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/line.html\"><span class=\"kw2\">line</span></a> = L;<br/>\t<span class=\"kw1\">end</span>; <br/><span class=\"kw1\">end</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fclose.html\"><span class=\"kw2\">fclose</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span>;</pre>"}, {"lang": "Nim", "loc": 16, "block": "<pre class=\"text highlighted_source\">import math<br/>randomize()<br/>\u00a0<br/>proc oneOfN(n: int): int =<br/>  result = 0<br/>  for x in 0 .. &lt;n:<br/>    if random(x+1) == 0:<br/>      result = x<br/>\u00a0<br/>proc oneOfNTest(n = 10, trials = 1_000_000): seq[int] =<br/>  result = newSeq[int](n)<br/>  if n &gt; 0:<br/>    for i in 1..trials:<br/>      inc result[oneOfN(n)]<br/>\u00a0<br/>echo oneOfNTest()</pre>"}, {"lang": "OCaml", "loc": 21, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> one_of_n n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux i r <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> i <span class=\"sy0\">&gt;=</span> n <span class=\"kw1\">then</span> r <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">if</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">then</span> aux <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> i<span class=\"br0\">)</span> i<br/>      <span class=\"kw1\">else</span> aux <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> i<span class=\"br0\">)</span> r<br/>  <span class=\"kw1\">in</span><br/>  aux <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">let</span> test <span class=\"re1\">~n</span> <span class=\"re1\">~trials</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> ar <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make n <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> trials <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> d <span class=\"sy0\">=</span> one_of_n n <span class=\"kw1\">in</span><br/>    ar<span class=\"sy0\">.</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> ar<span class=\"sy0\">.</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"\u00a0%d\"</span><span class=\"br0\">)</span> ar<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span>self_init <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  test <span class=\"re1\">~n</span><span class=\"sy0\">:</span><span class=\"nu0\">10</span> <span class=\"re1\">~trials</span><span class=\"sy0\">:</span><span class=\"nu0\">1</span>_000_000</pre>"}, {"lang": "PARI/GP", "loc": 8, "block": "<pre class=\"parigp highlighted_source\">one_of_n<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>chosen<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>k<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">random</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> chosen<span class=\"sy0\">=</span>k<span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  chosen<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>v<span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu2\">1e6</span><span class=\"sy0\">,</span> v<span class=\"br0\">[</span>one_of_n<span class=\"br0\">(</span><span class=\"nu1\">10</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> v</pre>"}, {"lang": "Pascal", "loc": 39, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> OneOfNLines <span class=\"br0\">(</span>Output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> one_of_n<span class=\"br0\">(</span>n<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    i<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    one_of_n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> random &lt; <span class=\"nu0\">1.0</span> <span class=\"sy3\">/</span> i <span class=\"kw1\">then</span><br/>\tone_of_n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> sum<span class=\"br0\">(</span>a<span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">longint</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    sum <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      sum <span class=\"sy1\">:</span><span class=\"sy3\">=</span> sum <span class=\"sy3\">+</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  num_reps <span class=\"sy3\">=</span> <span class=\"nu0\">1000000</span><span class=\"sy1\">;</span><br/>  num_lines_in_file <span class=\"sy3\">=</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  lines<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"me1\">num_reps</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  randomize<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> num_reps <span class=\"kw1\">do</span><br/>    lines<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> num_reps <span class=\"kw1\">do</span><br/>    inc<span class=\"br0\">(</span>lines<span class=\"br0\">[</span>one_of_n<span class=\"br0\">(</span>num_lines_in_file<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> num_lines_in_file <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Number of times line '</span><span class=\"sy1\">,</span> i<span class=\"sy1\">,</span> <span class=\"st0\">' was selected: '</span><span class=\"sy1\">,</span> lines<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Total number selected: '</span><span class=\"sy1\">,</span> sum<span class=\"br0\">(</span>lines<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 19, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> one_of_n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$return</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$line</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$return</span> <span class=\"sy0\">=</span> <span class=\"re0\">$line</span> <span class=\"kw1\">if</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&gt;</span> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"re0\">$line</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$return</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$repeat</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>_000_000<span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$size</span>   <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@freq</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">++</span><span class=\"re0\">$freq</span><span class=\"br0\">[</span> one_of_n<span class=\"br0\">(</span><span class=\"re0\">$size</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$repeat</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"@freq<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 13, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> one_of_n<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$choice</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$choice</span> <span class=\"sy0\">=</span> <span class=\"re0\">$_</span> <span class=\"kw1\">if</span> <span class=\"sy0\">.</span><span class=\"kw3\">rand</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$choice</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> one_of_n_test<span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"re0\">$trials</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>_000_000<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@bins</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@bins</span><span class=\"br0\">[</span>one_of_n<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">++</span> <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$trials</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@bins</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> one_of_n_test<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 15, "block": "<pre class=\"text highlighted_source\">function one_of_n(integer n)<br/>integer line_num = 1<br/>    for i=2 to n do<br/>        if rnd()&lt;1/i then<br/>            line_num = i<br/>        end if<br/>    end for<br/>    return line_num<br/>end function<br/>\u00a0<br/>sequence counts = repeat(0,10)<br/>    for i=1 to 1000000 do<br/>        counts[one_of_n(10)] += 1<br/>    end for<br/>   \u00a0?counts</pre>"}, {"lang": "PicoLisp", "loc": 11, "block": "<pre class=\"text highlighted_source\">(de one-of-n (N)<br/>   (let R 1<br/>      (for I N<br/>         (when (= 1 (rand 1 I))<br/>            (setq R I) ) )<br/>      R ) )<br/>\u00a0<br/>(let L (need 10 0)<br/>   (do 1000000<br/>      (inc (nth L (one-of-n 10))) )<br/>   L )</pre>"}, {"lang": "PowerShell", "loc": 34, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>OneOfN <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$Number</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"re0\">$current</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$Number</span>; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> <br/>        <span class=\"re0\">$limit</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"re0\">$i</span><br/>\u00a0<br/>        <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>Get<span class=\"sy0\">-</span>Random <span class=\"kw5\">-Minimum</span> <span class=\"nu0\">0.0</span> <span class=\"kw5\">-Maximum</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$limit</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"re0\">$current</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">$current</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re0\">$table</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>ordered<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">11</span>; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span> <br/>    <span class=\"re0\">$table</span>.Add<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Line {0,2}\"</span> <span class=\"kw4\">-f</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">1000000</span>; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span> <br/>    <span class=\"re0\">$index</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Get<span class=\"sy0\">-</span>OneOfN <span class=\"sy0\">-</span>Number <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"re0\">$table</span><span class=\"br0\">[</span><span class=\"re0\">$index</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$table</span><span class=\"br0\">[</span><span class=\"re0\">$index</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"re0\">$table</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 33, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span>.f randomFloat<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">ProcedureReturn</span> <span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">1000000</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1000000</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> one_of_n<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> linesRead, lineChosen<br/>  <span class=\"kw1\">While</span> linesRead <span class=\"sy0\">&lt;</span> n <br/>    linesRead <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> randomFloat<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span><span class=\"nu0\">1.0</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>linesRead<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       lineChosen <span class=\"sy0\">=</span> linesRead<br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">ProcedureReturn</span> lineChosen<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  #testFileLineCount <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>  #simulationCount <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span><br/>  <span class=\"kw1\">Define</span> i<br/>  <span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span>#testFileLineCount<span class=\"br0\">)</span> <span class=\"co1\">;index 0 is not used</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> #simulationCount<br/>    x <span class=\"sy0\">=</span> one_of_n<span class=\"br0\">(</span>#testFileLineCount<span class=\"br0\">)</span><br/>    a<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> #testFileLineCount<br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"  \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 20, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">random</span> <span class=\"kw1\">import</span> randrange<br/><span class=\"kw1\">try</span>:<br/>    <span class=\"kw2\">range</span> <span class=\"sy0\">=</span> <span class=\"kw2\">xrange</span><br/><span class=\"kw1\">except</span>: <span class=\"kw1\">pass</span><br/>\u00a0<br/><span class=\"kw1\">def</span> one_of_n<span class=\"br0\">(</span>lines<span class=\"br0\">)</span>: <span class=\"co1\"># lines is any iterable</span><br/>    choice <span class=\"sy0\">=</span> <span class=\"kw2\">None</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> line <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>lines<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> randrange<span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>            choice <span class=\"sy0\">=</span> line<br/>    <span class=\"kw1\">return</span> choice<br/>\u00a0<br/><span class=\"kw1\">def</span> one_of_n_test<span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> trials<span class=\"sy0\">=</span><span class=\"nu0\">1000000</span><span class=\"br0\">)</span>:<br/>    bins <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> * n<br/>    <span class=\"kw1\">if</span> n:<br/>        <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>trials<span class=\"br0\">)</span>:<br/>            bins<span class=\"br0\">[</span>one_of_n<span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">return</span> bins<br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>one_of_n_test<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 14, "block": "<pre class=\"rsplus highlighted_source\">one_of_n <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/function.html\"><span class=\"kw2\">function</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  choice <span class=\"sy0\">&lt;-</span> 1L<br/>\u00a0<br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/for.html\"><span class=\"kw2\">for</span></a> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html\"><span class=\"kw2\">if</span></a> <span class=\"br0\">(</span>i<span class=\"sy0\">*</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/stats/html/runif.html\"><span class=\"kw7\">runif</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      choice <span class=\"sy0\">&lt;-</span> i<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/return.html\"><span class=\"kw2\">return</span></a><span class=\"br0\">(</span>choice<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/table.html\"><span class=\"kw2\">table</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/sapply.html\"><span class=\"kw2\">sapply</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">1000000</span>, <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/function.html\"><span class=\"kw2\">function</span></a><span class=\"br0\">(</span>i<span class=\"br0\">)</span> one_of_n<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 65, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define (one-of-n n)<br/>  (for/fold ([n 0]) ([i (in-range 1 n)])<br/>    (if (zero? (random (add1 i))) i n)))<br/>\u00a0<br/>(define (try n times)<br/>  (define rs (make-vector n 0))<br/>  (for ([i (in-range times)])<br/>    (define r (one-of-n n))<br/>    (vector-set! rs r (add1 (vector-ref rs r))))<br/>  (vector-&gt;list rs))<br/>\u00a0<br/>(define TIMES 1000000)<br/>(for ([n (in-range 1 21)])<br/>  (define rs (try n TIMES))<br/>  (printf \"~a: ~a\\n    ~a\\n\" (~a #:width 2 n) rs<br/>          (map (lambda (r) (~a (round (/ r TIMES 1/100)) \"%\")) rs)))<br/>\u00a0<br/>#| Sample Run:<br/>\u00a0<br/>1\u00a0: (1000000)<br/>    (100%)<br/>2\u00a0: (499702 500298)<br/>    (50% 50%)<br/>3\u00a0: (332426 333314 334260)<br/>    (33% 33% 33%)<br/>4\u00a0: (249925 250083 249695 250297)<br/>    (25% 25% 25% 25%)<br/>5\u00a0: (200304 199798 199920 199983 199995)<br/>    (20% 20% 20% 20% 20%)<br/>6\u00a0: (166276 167085 165955 166792 167143 166749)<br/>    (17% 17% 17% 17% 17% 17%)<br/>7\u00a0: (142067 143242 142749 142997 143248 142746 142951)<br/>    (14% 14% 14% 14% 14% 14% 14%)<br/>8\u00a0: (125026 125187 125214 124770 124785 125141 125039 124838)<br/>    (13% 13% 13% 12% 12% 13% 13% 12%)<br/>9\u00a0: (111551 111013 110741 111292 111105 110627 110570 111685 111416)<br/>    (11% 11% 11% 11% 11% 11% 11% 11% 11%)<br/>10: (100322 100031 100176 100590 99799 99892 100305 99955 99493 99437)<br/>    (10% 10% 10% 10% 10% 10% 10% 10% 10% 10%)<br/>11: (91237 90706 90962 90901 90872 91002 91164 90967 90092 90706 91391)<br/>    (9% 9% 9% 9% 9% 9% 9% 9% 9% 9% 9%)<br/>12: (83046 83556 83003 84128 83264 83305 83093 83202 83430 83605 83276 83092)<br/>    (8% 8% 8% 8% 8% 8% 8% 8% 8% 8% 8% 8%)<br/>13: (77282 76936 76667 76659 76771 76736 77165 77190 77341 76469 76985 76942 76857)<br/>    (8% 8% 8% 8% 8% 8% 8% 8% 8% 8% 8% 8% 8%)<br/>14: (71389 71496 71141 71314 71670 72062 71979 71361 71198 71457 70854 71686 71300 71093)<br/>    (7% 7% 7% 7% 7% 7% 7% 7% 7% 7% 7% 7% 7% 7%)<br/>15: (66534 66571 66072 66977 66803 66894 67076 66409 66306 67222 66590 66780 66341 66680 66745)<br/>    (7% 7% 7% 7% 7% 7% 7% 7% 7% 7% 7% 7% 7% 7% 7%)<br/>16: (62155 62496 62846 62136 62447 62714 62228 62454 62527 62577 62775 62692 62491 62231 62460 62771)<br/>    (6% 6% 6% 6% 6% 6% 6% 6% 6% 6% 6% 6% 6% 6% 6% 6%)<br/>17: (58852 59046 58726 58782 58979 58725 59051 58935 58910 59082 58567 58863 58625 58922 58648 58456 58831)<br/>    (6% 6% 6% 6% 6% 6% 6% 6% 6% 6% 6% 6% 6% 6% 6% 6% 6%)<br/>18: (55204 55683 55547 55492 55671 55467 55801 55704 55235 55411 55482 55387 55679 55557 55398 55649 55815 55818)<br/>    (6% 6% 6% 6% 6% 6% 6% 6% 6% 6% 6% 6% 6% 6% 6% 6% 6% 6%)<br/>19: (52564 52283 52918 52363 52316 52511 52500 53042 52594 52720 52577 52623 52762 53047 52798 52832 52267 52550 52733)<br/>    (5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5%)<br/>20: (50107 50008 49786 50128 50431 49905 50109 49781 50099 50117 49772 50128 49721 49937 49735 50067 49865 50155 50231 49918)<br/>    (5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5% 5%)<br/>\u00a0<br/>|#<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 15, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program simulates reading a ten\u2500line file,  count selection randomness.*/</span><br/>N=<span class=\"nu0\">10</span>                                   <span class=\"coMULTI\">/*the number of lines in pseudo-file.  */</span><br/>@<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>                                   <span class=\"coMULTI\">/*zero  all  the (ten)  \"buckets\".     */</span><br/>      <span class=\"kw1\">do</span> <span class=\"nu0\">1000000</span>                       <span class=\"coMULTI\">/*perform main loop  one million times.*/</span><br/>     \u00a0?=<span class=\"nu0\">1</span><br/>                 <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N         <span class=\"coMULTI\">/*N  is the number of lines in the file*/</span><br/>                 <span class=\"kw1\">if</span> <span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">99999</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">100000</span>  <span class=\"sy0\">&lt;</span>  <span class=\"nu0\">1</span><span class=\"sy0\">/</span>k  <span class=\"kw3\">then</span>\u00a0?=k  <span class=\"coMULTI\">/*the criteria*/</span><br/>                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>      @<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"2e11136e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>?+<span class=\"nu0\">1</span>                        <span class=\"coMULTI\">/*bump the count in a particular bucket*/</span><br/>      <span class=\"kw3\">end</span>              <span class=\"coMULTI\">/*1000000*/</span><br/>\u00a0<br/>   <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N                       <span class=\"coMULTI\">/*display randomness counts (buckets). */</span><br/>   <span class=\"kw1\">say</span> <span class=\"st0\">\"number of times line\"</span>    <span class=\"kw6\">right</span><span class=\"br0\">(</span>j,<span class=\"nu0\">2</span><span class=\"br0\">)</span>    <span class=\"st0\">\"was selected:\"</span>    <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>j,<span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>                                       <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>cnt = list(10)<br/>for nr = 1 to 10000<br/>    cnt[oneofn(10)] += 1<br/>next<br/>for m = 1 to 10<br/>    see \"\" + m + \"\u00a0: \" + cnt[m] + nl<br/>next<br/>see nl<br/>\u00a0<br/>func oneofn n<br/>for i = 1 to n<br/>    if random(1) &lt;= 1/i d = i ok<br/>next<br/>return d<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 29, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># Returns a random line from _io_, or nil if _io_ has no lines.</span><br/><span class=\"co1\">#  # Get a random line from /etc/passwd</span><br/><span class=\"co1\">#  line = open(\"/etc/passwd\") {|f| random_line(f) }</span><br/><span class=\"kw1\">def</span> random_line<span class=\"br0\">(</span>io<span class=\"br0\">)</span><br/>  choice = io.<span class=\"kw3\">gets</span>; count = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">while</span> line = io.<span class=\"kw3\">gets</span><br/>    <span class=\"kw3\">rand</span><span class=\"br0\">(</span>count <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">zero</span>? <span class=\"kw1\">and</span> choice = line<br/>  <span class=\"kw1\">end</span><br/>  choice<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> one_of_n<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"co1\"># Create a mock IO that provides line numbers instead of lines.</span><br/>  <span class=\"co1\"># Assumes that #random_line calls #gets.</span><br/>  <span class=\"br0\">(</span>mock_io = <span class=\"kw4\">Object</span>.<span class=\"me1\">new</span><span class=\"br0\">)</span>.<span class=\"me1\">instance_eval</span> <span class=\"kw1\">do</span><br/>    <span class=\"re1\">@count</span> = <span class=\"nu0\">0</span><br/>    <span class=\"re1\">@last</span> = n<br/>    <span class=\"kw1\">def</span> <span class=\"kw2\">self</span>.<span class=\"kw3\">gets</span><br/>      <span class=\"br0\">(</span>@count <span class=\"sy0\">&lt;</span> <span class=\"re1\">@last</span><span class=\"br0\">)</span>\u00a0? <span class=\"br0\">(</span>@count <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw2\">nil</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  random_line<span class=\"br0\">(</span>mock_io<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>chosen = <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"nu0\">1</span>_000_000.<span class=\"me1\">times</span> <span class=\"br0\">{</span> chosen<span class=\"br0\">[</span>one_of_n<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>chosen.<span class=\"me1\">keys</span>.<span class=\"me1\">sort</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>key<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{key} chosen #{chosen[key]} times\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 15, "block": "<pre class=\"text highlighted_source\">for i1 = 1 to 1000000<br/>    c = oneOfN(10)<br/>    chosen(c) = chosen(c) + 1<br/>next<br/>\u00a0<br/>for i1 = 1 to 10<br/>    print i1;\" \";chosen(i1)<br/>next<br/>\u00a0<br/>FUNCTION oneOfN(n)<br/>    for i2 = 1 to n<br/>        IF int(rnd(1) * i2) = 0 then choice = i2<br/>    next<br/>    oneOfN = choice<br/>END FUNCTION</pre>"}, {"lang": "Rust", "loc": 29, "block": "<pre class=\"text highlighted_source\">extern crate rand;<br/>\u00a0<br/>use rand::{Rng, thread_rng};<br/>\u00a0<br/>fn one_of_n&lt;R: Rng&gt;(rng: &amp;mut R, n: usize) -&gt; usize {<br/>    (1..n).fold(0, |keep, cand| {<br/>        // Note that this will break if n is larger than u32::MAX<br/>        if rng.gen_weighted_bool(cand as u32 + 1) {<br/>            cand<br/>        } else {<br/>            keep<br/>        }<br/>    })<br/>}<br/>\u00a0<br/>fn main() {<br/>    const LINES: usize = 10;<br/>\u00a0<br/>    let mut dist = [0; LINES];<br/>    let mut rng = thread_rng();<br/>\u00a0<br/>    for _ in 0..1_000_000 {<br/>        let num = one_of_n(&amp;mut rng, LINES);<br/>        dist[num] += 1;<br/>    }<br/>\u00a0<br/>    println!(\"{:?}\", dist);<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 10, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> one<span class=\"sy0\">_</span>of<span class=\"sy0\">_</span>n<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, i<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, j<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> i <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> one<span class=\"sy0\">_</span>of<span class=\"sy0\">_</span>n<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>scala.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span>.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> n <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> i, j + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> simulate<span class=\"br0\">(</span>lines<span class=\"sy0\">:</span> Int, iterations<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> counts <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Array<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">(</span>lines<span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"sy0\">_</span> <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> to iterations<span class=\"sy0\">;</span> i <span class=\"sy0\">=</span> one<span class=\"sy0\">_</span>of<span class=\"sy0\">_</span>n<span class=\"br0\">(</span>lines<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> counts<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> counts<span class=\"br0\">(</span>i<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><br/>  counts<br/><span class=\"br0\">}</span><br/>\u00a0<br/>println<span class=\"br0\">(</span>simulate<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">1000000</span><span class=\"br0\">)</span> mkString <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 28, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func integer: one_of_n (in integer: n) is func<br/>  result<br/>    var integer: r is 1;<br/>  local<br/>    var integer: i is 0;<br/>  begin<br/>    for i range 2 to n do<br/>      if rand(1, i) = 1 then<br/>        r\u00a0:= i;<br/>      end if;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var array integer: r is 10 times 0;<br/>    var integer: i is 0;<br/>  begin<br/>    for i range 1 to 1000000 do<br/>      incr(r[one_of_n(10)]);<br/>    end for;<br/>    for i range 1 to 10 do<br/>      write(r[i] &lt;&amp; \" \");<br/>    end for;<br/>    writeln;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 17, "block": "<pre class=\"ruby highlighted_source\">func one_of_n<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var choice<br/>    n.<span class=\"me1\">times</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>        choice = i <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&gt;</span> i.<span class=\"kw3\">rand</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    choice <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func one_of_n_test<span class=\"br0\">(</span>n = <span class=\"nu0\">10</span>, trials = <span class=\"nu0\">1</span>_000_000<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var bins = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    trials.<span class=\"me1\">times</span> <span class=\"br0\">{</span><br/>        bins<span class=\"br0\">[</span>one_of_n<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span>\u00a0:= <span class=\"nu0\">0</span> <span class=\"sy0\">++</span><br/>    <span class=\"br0\">}</span><br/>    bins<br/><span class=\"br0\">}</span><br/>\u00a0<br/>say one_of_n_test<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Swift", "loc": 16, "block": "<pre class=\"text highlighted_source\">func one_of_n(n: Int) -&gt; Int {<br/>  var result = 1<br/>  for i in 2...n {<br/>    if arc4random_uniform(UInt32(i)) &lt; 1 {<br/>      result = i<br/>    }<br/>  }<br/>  return result<br/>}<br/>\u00a0<br/>var counts = [0,0,0,0,0,0,0,0,0,0]<br/>for _ in 1..1_000_000 {<br/>  counts[one_of_n(10)-1]++<br/>}<br/>\u00a0<br/>println(counts)</pre>"}, {"lang": "Tcl", "loc": 14, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw1\">proc</span> 1ofN <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> line <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$line</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> line<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1.0</span>/<span class=\"br0\">[</span><span class=\"kw2\">incr</span> fraction<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> result <span class=\"re0\">$line</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">incr</span> count<span class=\"br0\">(</span><span class=\"br0\">[</span>1ofN <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>parray count<span class=\"sy0\">;</span>   <span class=\"co1\"># Alphabetic order, but convenient</span></pre>"}, {"lang": "VBScript", "loc": 21, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw4\">Dim</span> chosen(10)<br/>\u00a0<br/><span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> 1000000<br/>\tc = one_of_n(10)<br/>\tchosen(c) = chosen(c) + 1<br/><span class=\"kw3\">Next</span><br/>\u00a0<br/><span class=\"kw3\">For</span> k = 1 <span class=\"kw3\">To</span> 10<br/>\tWScript.StdOut.WriteLine k &amp; <span class=\"st0\">\". \"</span> &amp; chosen(k)<br/><span class=\"kw3\">Next</span> <br/>\u00a0<br/><span class=\"kw2\">Function</span> one_of_n(n)<br/>\tRandomize<br/>\t<span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> n<br/>\t\t<span class=\"kw3\">If</span> Rnd(1) &lt; 1/i <span class=\"kw3\">Then</span><br/>\t\t\tone_of_n = i<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 20, "block": "<pre class=\"text highlighted_source\">fcn one_of_n(lines){ # lines is any iterable<br/>#if 0  // iterative<br/>   choice:=Void;<br/>   foreach i,line in ([0..].zip(lines)){<br/>      if((0).random(i+1)==0) choice=line;<br/>   }<br/>   return(choice);<br/>#else  // functional<br/>   [0..].zip(lines).pump(Ref(Void).set,fcn([(n,line)])<br/>      { if((0).random(n+1)==0) line else Void.Skip }).value<br/>#endif<br/>}<br/>\u00a0<br/>fcn one_of_n_test(n=10, trials=0d1_000_000){<br/>   bins:=n.pump(List(),0); // List(0,0,0...)<br/>   if(n){ foreach i in (trials){ bins[one_of_n((n).walker())]+=1 } }<br/>   return(bins);<br/>}<br/>\u00a0<br/>println(one_of_n_test());</pre>"}]}