{"task": "Pascal%27s_triangle", "blocks": [{"lang": "360 Assembly", "loc": 38, "block": "<pre class=\"text highlighted_source\">*        Pascal's triangle         25/10/2015<br/>PASCAL   CSECT<br/>         USING  PASCAL,R15         set base register<br/>         LA     R7,1               n=1<br/>LOOPN    C      R7,=A(M)           do n=1 to m<br/>         BH     ELOOPN             if n&gt;m then goto <br/>         MVC    U,=F'1'            u(1)=1<br/>         LA     R8,PG              <a class=\"__cf_email__\" data-cfemail=\"a1d1c6c89ce1d1c6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>         LA     R6,1               i=1<br/>LOOPI    CR     R6,R7              do i=1 to n<br/>         BH     ELOOPI             if i&gt;n then goto <br/>         LR     R1,R6              i<br/>         SLA    R1,2               i*4<br/>         L      R3,T-4(R1)         t(i)<br/>         L      R4,T(R1)           t(i+1)<br/>         AR     R3,R4              t(i)+t(i+1)<br/>         ST     R3,U(R1)           u(i+1)=t(i)+t(i+1)<br/>         LR     R1,R6              i<br/>         SLA    R1,2               i*4<br/>         L      R2,U-4(R1)         u(i)<br/>         XDECO  R2,XD              edit u(i)<br/>         MVC    0(4,R8),XD+8       output u(i):4<br/>         LA     R8,4(R8)           pgi=pgi+4<br/>         LA     R6,1(R6)           i=i+1<br/>         B      LOOPI              end i<br/>ELOOPI   MVC    T((M+1)*(L'T)),U   t=u<br/>         XPRNT  PG,80              print<br/>         LA     R7,1(R7)           n=n+1<br/>         B      LOOPN              end n<br/>ELOOPN   XR     R15,R15            set return code<br/>         BR     R14                return to caller<br/>M        EQU    11                 &lt;== input<br/>T        DC     (M+1)F'0'          t(m+1) init 0<br/>U        DC     (M+1)F'0'          u(m+1) init 0<br/>PG       DC     CL80' '            pg     init ' '<br/>XD       DS     CL12               temp<br/>         YREGS<br/>         END    PASCAL</pre>"}, {"lang": "8th", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\\ print the array <br/>: .arr \\ a -- a <br/>  ( . space ) a:each\u00a0;<br/>\u00a0<br/>: pasc \\ a --<br/>  \\ print the row<br/>  .arr cr<br/>  dup <br/>  \\ create two rows from the first, one with a leading the other with a trailing 0<br/>  [0] 0 a:insert swap 0 a:push<br/>  \\ add the arrays together to make the new one<br/>  ' n:+ a:op\u00a0;<br/>\u00a0<br/>\\ print the first 16 rows:<br/>[1] ' pasc 16 times<br/>\u00a0</pre>"}, {"lang": "Ada", "loc": 11, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">package</span> Pascal <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Row <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Natural <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Natural;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Length<span class=\"br0\">(</span>R: Row<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Positive;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> First_Row<span class=\"br0\">(</span>Max_Length: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Row;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Next_Row<span class=\"br0\">(</span>R: Row<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Row;<br/>\u00a0<br/><span class=\"kw1\">end</span> Pascal;</pre>"}, {"lang": "ALGOL 68", "loc": 19, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PRIO</span> MINLWB <span class=\"sy1\">=</span> 8<span class=\"sy1\">,</span> MAXUPB <span class=\"sy1\">=</span> 8<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> MINLWB <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><span class=\"kw8\">LWB</span> a<span class=\"sy1\">&lt;</span><span class=\"kw8\">LWB</span> b<span class=\"sy1\">|</span><span class=\"kw8\">LWB</span> a<span class=\"sy1\">|</span><span class=\"kw8\">LWB</span> b<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   MAXUPB <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><span class=\"kw8\">UPB</span> a<span class=\"sy1\">&gt;</span><span class=\"kw8\">UPB</span> b<span class=\"sy1\">|</span><span class=\"kw8\">UPB</span> a<span class=\"sy1\">|</span><span class=\"kw8\">UPB</span> b<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> <span class=\"sy1\">+</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"br0\">[</span>a MINLWB b<span class=\"sy1\">:</span>a MAXUPB b<span class=\"br0\">]</span><span class=\"kw3\">INT</span> out<span class=\"sy1\">;</span> <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> out <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> out <span class=\"kw2\">DO</span> out<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">:=</span> 0 <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  out<span class=\"br0\">[</span><span class=\"kw8\">LWB</span> a<span class=\"sy1\">:</span><span class=\"kw8\">UPB</span> a<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> a<span class=\"sy1\">;</span> <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> b <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> b <span class=\"kw2\">DO</span> out<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">+:=</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  out<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw3\">INT</span> width <span class=\"sy1\">=</span> 4<span class=\"sy1\">,</span> stop <span class=\"sy1\">=</span> 9<span class=\"sy1\">;</span><br/><span class=\"kw6\">FORMAT</span> centre <span class=\"sy1\">=</span> $n<span class=\"br0\">(</span><span class=\"br0\">(</span>stop<span class=\"sy1\">-</span><span class=\"kw8\">UPB</span> row<span class=\"sy1\">+</span>1<span class=\"br0\">)</span><span class=\"sy1\">*</span>width <span class=\"kw12\">OVER</span> 2<span class=\"br0\">)</span><span class=\"br0\">(</span>q<span class=\"br0\">)</span>$<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">FLEX</span><span class=\"br0\">[</span>1<span class=\"br0\">]</span><span class=\"kw3\">INT</span> row <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span> <span class=\"coMULTI\"># example of rowing #</span><br/><span class=\"kw2\">FOR</span> i <span class=\"kw2\">WHILE</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>centre<span class=\"sy1\">,</span> $g<span class=\"br0\">(</span><span class=\"sy1\">-</span>width<span class=\"br0\">)</span>$<span class=\"sy1\">,</span> row<span class=\"sy1\">,</span> $l$<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># WHILE #</span> i <span class=\"sy1\">&lt;</span> stop <span class=\"kw2\">DO</span><br/>  row <span class=\"sy1\">:=</span> row<span class=\"br0\">[</span><span class=\"kw7\">AT</span> 1<span class=\"br0\">]</span> <span class=\"sy1\">+</span> row<span class=\"br0\">[</span><span class=\"kw7\">AT</span> 2<span class=\"br0\">]</span><br/><span class=\"kw2\">OD</span></pre>"}, {"lang": "ALGOL W", "loc": 19, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% prints the first n lines of Pascal's triangle lines\u00a0%<br/>   \u00a0% if n is &lt;= 0, no output is produced                \u00a0%<br/>    procedure printPascalTriangle( integer value n )\u00a0;<br/>        if n &gt; 0 then begin<br/>            integer array pascalLine ( 1\u00a0:: n );<br/>            pascalLine( 1 )\u00a0:= 1;<br/>            for line\u00a0:= 1 until n do begin<br/>                for i\u00a0:= line - 1 step - 1 until 2 do pascalLine( i )\u00a0:= pascalLine( i - 1 ) + pascalLine( i );<br/>                pascalLine( line )\u00a0:= 1;<br/>                write( s_w\u00a0:= 0, \" \" );<br/>                for i\u00a0:= line until n do writeon( s_w\u00a0:= 0, \"   \" );<br/>                for i\u00a0:= 1 until line do writeon( i_w\u00a0:= 6, s_w\u00a0:= 0, pascalLine( i ) )<br/>            end for_line\u00a0;<br/>        end printPascalTriangle\u00a0;<br/>\u00a0<br/>    printPascalTriangle( 8 )<br/>\u00a0<br/>end.</pre>"}, {"lang": "APL", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>{A\u21900,\u2373\u2375 \u22c4 \u2349A\u2218.!A}<br/>\u00a0</pre>"}, {"lang": "AppleScript", "loc": 135, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- PASCAL ---------------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- pascal\u00a0:: Int -&gt; [[Int]]</span><br/><span class=\"kw3\">on</span> pascal<span class=\"br0\">(</span>intRows<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> addRow<br/>        <span class=\"kw3\">on</span> nextRow<span class=\"br0\">(</span>row<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span> add<br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>                    a <span class=\"sy0\">+</span> b<br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            zipWith<span class=\"br0\">(</span>add, <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;</span> row, row <span class=\"sy0\">&amp;</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> nextRow<br/>\u00a0<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>            xs <span class=\"sy0\">&amp;</span> <span class=\"br0\">{</span>nextRow<span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldr<span class=\"br0\">(</span>addRow, <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span>, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, intRows <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> pascal<br/>\u00a0<br/><span class=\"co1\">-- TEST -----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"kw3\">set</span> lstTriangle <span class=\"kw3\">to</span> pascal<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> spaced<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span> rightAlign<br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">text</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"st0\">\"    \"</span> <span class=\"sy0\">&amp;</span> x<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            intercalate<span class=\"br0\">(</span><span class=\"st0\">\"\"</span>, map<span class=\"br0\">(</span>rightAlign, xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> indented<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, x<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> strIndent <span class=\"kw3\">to</span> leftSpace <span class=\"kw3\">of</span> a<br/>\u00a0<br/>            <span class=\"br0\">{</span>rows:\u00ac<br/>                strIndent <span class=\"sy0\">&amp;</span> x <span class=\"sy0\">&amp;</span> linefeed <span class=\"sy0\">&amp;</span> rows <span class=\"kw3\">of</span> a, leftSpace:\u00ac<br/>                leftSpace <span class=\"kw3\">of</span> a <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"  \"</span><span class=\"br0\">}</span> \u00ac<br/>\u00a0<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    rows <span class=\"kw3\">of</span> foldr<span class=\"br0\">(</span>indented, \u00ac<br/>        <span class=\"br0\">{</span>rows:<span class=\"st0\">\"\"</span>, leftSpace:<span class=\"st0\">\"\"</span><span class=\"br0\">}</span>, map<span class=\"br0\">(</span>spaced, lstTriangle<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> n <span class=\"sy0\">&lt;</span> m <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n <span class=\"kw1\">by</span> d<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- foldr\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldr<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> lng <span class=\"kw3\">to</span> <span class=\"nu0\">1</span> <span class=\"kw1\">by</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldr<br/>\u00a0<br/><span class=\"co1\">-- intercalate\u00a0:: Text -&gt; [Text] -&gt; Text</span><br/><span class=\"kw3\">on</span> intercalate<span class=\"br0\">(</span>strText, lstText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strText<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> strJoined <span class=\"kw3\">to</span> lstText <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> strJoined<br/><span class=\"kw3\">end</span> intercalate<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- min\u00a0:: Ord a =&gt; a -&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> min<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> y <span class=\"sy0\">&lt;</span> x <span class=\"kw3\">then</span><br/>        y<br/>    <span class=\"kw3\">else</span><br/>        x<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> min<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- zipWith\u00a0:: (a -&gt; b -&gt; c) -&gt; [a] -&gt; [b] -&gt; [c]</span><br/><span class=\"kw3\">on</span> zipWith<span class=\"br0\">(</span>f, xs, ys<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> min<span class=\"br0\">(</span>length <span class=\"kw3\">of</span> xs, length <span class=\"kw3\">of</span> ys<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> ys<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> zipWith</pre>"}, {"lang": "AutoHotkey", "loc": 22, "block": "<pre class=\"autohotkey highlighted_source\">n <span class=\"sy0\">:=</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> p0 <span class=\"sy0\">:=</span> <span class=\"st0\">\"1\"</span>        <span class=\"co1\">; 1+n rows of Pascal's triangle</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"re0\">%n%</span> <span class=\"br0\">{</span><br/>   p <span class=\"sy0\">:=</span> <span class=\"st0\">\"p\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%p%</span> <span class=\"sy0\">:=</span> v <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> q <span class=\"sy0\">:=</span> <span class=\"st0\">\"p\"</span> <span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> Parse<span class=\"sy0\">,</span> <span class=\"re0\">%q%</span><span class=\"sy0\">,</span> <span class=\"re0\">%A_Space%</span><br/>      <span class=\"kw1\">If</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>         <span class=\"re0\">%p%</span> <span class=\"sy0\">.=</span> <span class=\"st0\">\" \"</span> v<span class=\"sy0\">+</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span> v <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>   <span class=\"re0\">%p%</span> <span class=\"sy0\">.=</span> <span class=\"st0\">\" 1\"</span><br/><span class=\"br0\">}</span><br/>                         <span class=\"co1\">; Triangular Formatted output</span><br/><a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>tabs<span class=\"sy0\">,</span>n<span class=\"sy0\">,</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Asc</span></a><span class=\"br0\">(</span><span class=\"st0\">\"`t\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>t <span class=\"sy0\">.=</span> tabs <span class=\"st0\">\"`t1\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"re0\">%n%</span> <span class=\"br0\">{</span><br/>   t <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n\"</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>tabs<span class=\"sy0\">,</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> Parse<span class=\"sy0\">,</span> p<span class=\"re0\">%A_Index%</span><span class=\"sy0\">,</span> <span class=\"re0\">%A_Space%</span><br/>      t <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"st0\">\"`t`t\"</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,,</span> <span class=\"re0\">%t%</span>      <span class=\"co1\">; Show result in a GUI</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiClose\"><span class=\"kw7\">GuiClose</span></a>:<br/>  <a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a></pre>"}, {"lang": "AWK", "loc": 1, "block": "<pre class=\"awk highlighted_source\">$ awk '<span class=\"kw2\">BEGIN</span><span class=\"br0\">{</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>i=<span class=\"nu0\">0</span>;i<span class=\"sy2\">&lt;</span><span class=\"nu0\">6</span>;i<span class=\"sy3\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span>c=<span class=\"nu0\">1</span>;r=c;<span class=\"kw1\">for</span><span class=\"br0\">(</span>j=<span class=\"nu0\">0</span>;j<span class=\"sy2\">&lt;</span>i;j<span class=\"sy3\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span>c<span class=\"sy3\">*</span>=<span class=\"br0\">(</span>i<span class=\"sy3\">-</span>j<span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"br0\">(</span>j<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;r=r<span class=\"st0\">\" \"</span>c<span class=\"br0\">}</span>;<span class=\"kw5\">print</span> r<span class=\"br0\">}</span><span class=\"br0\">}</span>'</pre>"}, {"lang": "BASIC", "loc": 16, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"kw1\">DIM</span> i             <span class=\"kw1\">AS</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw1\">DIM</span> row           <span class=\"kw1\">AS</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw1\">DIM</span> nrows         <span class=\"kw1\">AS</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw1\">DIM</span> values<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span>   <span class=\"kw1\">AS</span> <span class=\"kw1\">Integer</span><br/>\u00a0<br/><span class=\"kw1\">INPUT</span> <span class=\"st0\">\"Number of rows: \"</span>; nrows<br/>values<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/><span class=\"kw1\">PRINT</span> <span class=\"kw1\">TAB</span><span class=\"br0\">(</span><span class=\"br0\">(</span>nrows<span class=\"br0\">)</span>*<span class=\"nu0\">3</span><span class=\"br0\">)</span>;<span class=\"st0\">\"  1\"</span><br/><span class=\"kw1\">FOR</span> row = <span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> nrows<br/>    <span class=\"kw1\">PRINT</span> <span class=\"kw1\">TAB</span><span class=\"br0\">(</span><span class=\"br0\">(</span>nrows-row<span class=\"br0\">)</span>*<span class=\"nu0\">3</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">FOR</span> i = row <span class=\"kw1\">TO</span> <span class=\"nu0\">1</span> <span class=\"kw1\">STEP</span> -<span class=\"nu0\">1</span><br/>        values<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = values<span class=\"br0\">(</span>i<span class=\"br0\">)</span> + values<span class=\"br0\">(</span>i-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">PRINT</span> <span class=\"kw1\">USING</span> <span class=\"st0\">\"##### \"</span>; values<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">NEXT</span> i<br/>    <span class=\"kw1\">PRINT</span><br/><span class=\"kw1\">NEXT</span> row</pre>"}, {"lang": "Batch File", "loc": 39, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><span class=\"co2\"><br/>::The Main Thing...</span><br/>cls<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> row=15<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">pascal</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/><a href=\"http://www.ss64.com/nt/pause.html\"><span class=\"kw3\">pause</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 0<br/><span class=\"co2\">::/The Main Thing.</span><br/><span class=\"co2\"><br/>::The Functions...</span><br/>:<span class=\"re0\">pascal</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a prev=<span class=\"sy0\">%</span><span class=\"re3\">row</span><span class=\"sy0\">%</span>-1<br/>\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">I</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>0,1,<span class=\"sy0\">%</span><span class=\"re3\">prev</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> c=1<span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> r=<br/>\t\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">K</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>0,1,<span class=\"sy0\">%</span><span class=\"re3\">row</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> <span class=\"sy0\">!</span><span class=\"re2\">c</span><span class=\"sy0\">!</span>==0 <span class=\"sy0\">(</span><br/>\t\t\t\t<a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">numstr</span> <span class=\"sy0\">!</span><span class=\"re2\">c</span><span class=\"sy0\">!</span><br/>\t\t\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> r=<span class=\"sy0\">!</span><span class=\"re2\">r</span><span class=\"sy0\">!!</span><span class=\"re2\">space</span><span class=\"sy0\">!!</span><span class=\"re2\">c</span><span class=\"sy0\">!</span><br/>\t\t\t<span class=\"sy0\">)</span><br/>\t\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a c=<span class=\"sy0\">!</span><span class=\"re2\">c</span><span class=\"sy0\">!</span><span class=\"re2\">*</span><span class=\"co3\">^(</span><span class=\"sy0\">%%</span><span class=\"re3\">I</span>-<span class=\"sy0\">%%</span><span class=\"re3\">K</span><span class=\"co3\">^)</span>/<span class=\"co3\">^(</span><span class=\"sy0\">%%</span><span class=\"re3\">K</span>+1<span class=\"co3\">^)</span><br/>\t\t<span class=\"sy0\">)</span><br/>\t\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">!</span><span class=\"re2\">r</span><span class=\"sy0\">!</span><br/>\t<span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span><br/>\u00a0<br/>:<span class=\"re0\">numstr</span><br/><span class=\"co2\">\t::This function returns the number of whitespaces to be applied on each numbers.</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> cnt=0<span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> proc=<span class=\"sy0\">%</span><span class=\"re3\">1</span><span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> space=<br/>\t:<span class=\"re0\">loop</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> currchar=<span class=\"sy0\">!</span><span class=\"re2\">proc:~%<span class=\"re3\">cnt</span>%,1</span><span class=\"sy0\">!</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">currchar</span><span class=\"sy0\">!</span>\"==\"\" <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a cnt+=1<span class=\"sy0\">&amp;</span><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> loop<br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a numspaces=5-<span class=\"sy0\">!</span><span class=\"re2\">cnt</span><span class=\"sy0\">!</span><br/>\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">A</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,<span class=\"sy0\">%</span><span class=\"re3\">numspaces</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"space=<span class=\"sy0\">!</span><span class=\"re2\">space</span><span class=\"sy0\">!</span> \"<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span><br/><span class=\"co2\">::/The Functions.</span></pre>"}, {"lang": "BBC BASIC", "loc": 13, "block": "<pre class=\"text highlighted_source\">      nrows% = 10<br/>\u00a0<br/>      colwidth% = 4<br/>      @% = colwidth%\u00a0: REM Set column width<br/>      FOR row% = 1 TO nrows%<br/>        PRINT SPC(colwidth%*(nrows% - row%)/2);<br/>        acc% = 1<br/>        FOR element% = 1 TO row%<br/>          PRINT acc%;<br/>          acc% = acc% * (row% - element%) / element% + 0.5<br/>        NEXT<br/>        PRINT<br/>      NEXT row%</pre>"}, {"lang": "Befunge", "loc": 3, "block": "<pre class=\"text highlighted_source\">0\"\u00a0:swor fo rebmuN\"&gt;:#,_&amp;&gt; 55+, v<br/>v01*p00-1:g00.:&lt;1p011p00:\\-1_v#:&lt;<br/>&gt;g:1+10p/48*,:#^_$ 55+,1+\\: ^&gt;<a class=\"__cf_email__\" data-cfemail=\"50747410\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></pre>"}, {"lang": "Bracmat", "loc": 18, "block": "<pre class=\"text highlighted_source\">( out$\"Number of rows? \"<br/>&amp; get':?R<br/>&amp; -1:?I<br/>&amp;   whl<br/>  ' ( 1+!I:&lt;!R:?I<br/>    &amp; 1:?C<br/>    &amp; -1:?K<br/>    &amp;\u00a0!R+-1*!I:?tabs<br/>    &amp; whl'(!tabs+-1:&gt;0:?tabs&amp;put$\\t)<br/>    &amp;   whl<br/>      ' ( 1+!K:~&gt;!I:?K<br/>        &amp; put$(!C \\t\\t)<br/>        &amp;\u00a0!C*(!I+-1*!K)*(!K+1)^-1:?C<br/>        )<br/>    &amp; put$\\n<br/>    )<br/>&amp;<br/>)</pre>"}, {"lang": "Burlesque", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>blsq ) {1}{1 1}{^^2CO{p^?+}m[1+]1[+}15E!#s&lt;-spbx#S<br/>1<br/>1 1<br/>1 2 1<br/>1 3 3 1<br/>1 4 6 4 1<br/>1 5 10 10 5 1<br/>1 6 15 20 15 6 1<br/>1 7 21 35 35 21 7 1<br/>1 8 28 56 70 56 28 8 1<br/>1 9 36 84 126 126 84 36 9 1<br/>1 10 45 120 210 252 210 120 45 10 1<br/>1 11 55 165 330 462 462 330 165 55 11 1<br/>1 12 66 220 495 792 924 792 495 220 66 12 1<br/>1 13 78 286 715 1287 1716 1716 1287 715 286 78 13 1<br/>1 14 91 364 1001 2002 3003 3432 3003 2002 1001 364 91 14 1<br/>1 15 105 455 1365 3003 5005 6435 6435 5005 3003 1365 455 105 15 1<br/>1 16 120 560 1820 4368 8008 11440 12870 11440 8008 4368 1820 560 120 16 1<br/>\u00a0</pre>"}, {"lang": "C", "loc": 22, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> pascaltriangle<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> c<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> k<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>k<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;=</span> i<span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%3d \"</span><span class=\"sy0\">,</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      c <span class=\"sy0\">=</span> c <span class=\"sy0\">*</span> <span class=\"br0\">(</span>i<span class=\"sy0\">-</span>k<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>k<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  pascaltriangle<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 80, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include&lt;cstdio&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/><span class=\"kw4\">void</span> Pascal_Triangle<span class=\"br0\">(</span><span class=\"kw4\">int</span> size<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> a<span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> i, j<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">//first row and first coloumn has the same value=1</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> size<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ta<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">//Generate the full Triangle</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> size<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;=</span> size <span class=\"sy2\">-</span> i<span class=\"sy4\">;</span> j<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>i <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\ta<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">=</span> a<span class=\"br0\">[</span>i <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy2\">+</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* <br/>\t  1 1 1 1<br/>\t  1 2 3<br/>\t  1 3<br/>\t  1<br/>\u00a0<br/>\tfirst print as above format--&gt;<br/>\u00a0<br/>\tfor (i = 1; i &lt; size; i++) {<br/>\t\tfor (j = 1; j &lt; size; j++) {<br/>\t\t\tif (a[i][j] == 0) {<br/>\t\t\t\t\tbreak;<br/>\t\t\t}<br/>\t\t\t\tprintf(\"%8d\",a[i][j]);<br/>\t\t}<br/>\t\t\tcout&lt;&lt;\"\\n\\n\";<br/>\t}*/</span><br/>\u00a0<br/>\t<span class=\"co1\">// standard Pascal Triangle Format </span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> row,space<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> size<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tspace<span class=\"sy1\">=</span>row<span class=\"sy1\">=</span>i<span class=\"sy4\">;</span><br/>\t\tj<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>space<span class=\"sy1\">&lt;=</span>size<span class=\"sy2\">+</span><span class=\"br0\">(</span>size<span class=\"sy2\">-</span>i<span class=\"br0\">)</span><span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t <span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>\t\t\t space<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t\t <span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>j<span class=\"sy1\">&lt;=</span>i<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t   <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t\t   <span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>j<span class=\"sy1\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span>,a<span class=\"br0\">[</span>row<span class=\"sy2\">--</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"sy2\">++</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t<span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%6d\"</span>,a<span class=\"br0\">[</span>row<span class=\"sy2\">--</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"sy2\">++</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"co1\">//freopen(\"out.txt\",\"w\",stdout);</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> size<span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">cin</span><span class=\"sy1\">&gt;&gt;</span>size<span class=\"sy4\">;</span><br/>\tPascal_Triangle<span class=\"br0\">(</span>size<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 25, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaCode <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw4\">class</span> PascalsTriangle <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> CreateTriangle<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">.</span><span class=\"me1\">PadLeft</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;=</span> i<span class=\"sy0\">;</span> k<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}\"</span>, c<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">PadLeft</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        c <span class=\"sy0\">=</span> c <span class=\"sy0\">*</span> <span class=\"br0\">(</span>i <span class=\"sy0\">-</span> k<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            CreateTriangle<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 12, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defn pascal <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>newrow <span class=\"br0\">(</span>fn newrow <span class=\"br0\">[</span>lst ret<span class=\"br0\">]</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">if</span> lst<br/>                       <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>rest lst<span class=\"br0\">)</span><br/>                              <span class=\"br0\">(</span>conj ret <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>first lst<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>second lst<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                       ret<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        genrow <span class=\"br0\">(</span>fn genrow <span class=\"br0\">[</span>n lst<span class=\"br0\">]</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> n<span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span>println lst<span class=\"br0\">)</span><br/>                         <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>dec n<span class=\"br0\">)</span> <span class=\"br0\">(</span>conj <span class=\"br0\">(</span>newrow lst <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>genrow n <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>pascal <span class=\"nu0\">4</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 31, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>pascal = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  width = <span class=\"nu0\">6</span><br/>  <span class=\"kw1\">for</span> r <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">]</span><br/>    s = ws <span class=\"br0\">(</span>width<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span>r<span class=\"br0\">)</span> <span class=\"co1\"># center row</span><br/>    output = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> s <span class=\"sy0\">+</span>= pad width<span class=\"sy0\">,</span> n<br/>    cell = <span class=\"nu0\">1</span><br/>    output cell<br/>    <span class=\"co1\"># Compute binomial coefficients as you go</span><br/>    <span class=\"co1\"># across the row.</span><br/>    <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>...<span class=\"me1\">r</span><span class=\"br0\">]</span><br/>      cell <span class=\"sy0\">*</span>= <span class=\"br0\">(</span>r<span class=\"sy0\">-</span>c<span class=\"br0\">)</span> <span class=\"sy0\">/</span> c<br/>      output cell<br/>    console.<span class=\"me1\">log</span> s<br/>\u00a0<br/>ws = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  s = <span class=\"st0\">''</span><br/>  s <span class=\"sy0\">+</span>= <span class=\"st0\">' '</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>...<span class=\"me1\">n</span><span class=\"br0\">]</span><br/>  s<br/>\u00a0<br/>pad = <span class=\"br0\">(</span>cnt<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  s = n.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"co1\"># There is probably a better way to do this.</span><br/>  cnt <span class=\"sy0\">-</span>= s.<span class=\"me1\">length</span><br/>  right = Math.<span class=\"me1\">floor</span><span class=\"br0\">(</span>cnt <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  left = cnt <span class=\"sy0\">-</span> right<br/>  ws<span class=\"br0\">(</span>left<span class=\"br0\">)</span> <span class=\"sy0\">+</span> s <span class=\"sy0\">+</span> ws<span class=\"br0\">(</span>right<span class=\"br0\">)</span><br/>\u00a0<br/>pascal<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Commodore BASIC", "loc": 24, "block": "<pre class=\"text highlighted_source\">10 INPUT \"HOW MANY\";N<br/>20 IF N&lt;1 THEN END<br/>30 DIM C(N)<br/>40 DIM D(N)<br/>50 LET C(1)=1<br/>60 LET D(1)=1<br/>70 FOR J=1 TO N<br/>80 FOR I=1 TO N-J+1<br/>90 PRINT \"  \";<br/>100 NEXT I<br/>110 FOR I=1 TO J<br/>120 PRINT C(I)\" \";<br/>130 NEXT I<br/>140 PRINT<br/>150 IF J=N THEN END<br/>160 C(J+1)=1<br/>170 D(J+1)=1<br/>180 FOR I=1 TO J-1<br/>190 D(I+1)=C(I)+C(I+1)<br/>200 NEXT I<br/>210 FOR I=1 TO J<br/>220 C(I)=D(I)<br/>230 NEXT I<br/>240 NEXT J</pre>"}, {"lang": "Common Lisp", "loc": 12, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> pascal <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>genrow n '<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> genrow <span class=\"br0\">(</span>n <span class=\"kw1\">l</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> n<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>genrow <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>newrow <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> newrow <span class=\"br0\">(</span><span class=\"kw1\">l</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      '<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>newrow <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Component Pascal", "loc": 73, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> PascalTriangle;<br/><span class=\"kw1\">IMPORT</span> StdLog<span class=\"sy0\">,</span> DevCommanders<span class=\"sy0\">,</span> TextMappers;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span><br/>\tExpansion<span class=\"sy0\">*</span> <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Show<span class=\"sy0\">*</span><span class=\"br0\">(</span>e<span class=\"sy0\">:</span> Expansion<span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span><br/>\ti<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>i &lt; <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>e<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">#</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\tStdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>e<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">END</span>;<br/>\tStdLog.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> Show;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> GenFor<span class=\"sy0\">*</span><span class=\"br0\">(</span>p<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Expansion;<br/><span class=\"kw1\">VAR</span><br/>\texpA<span class=\"sy0\">,</span>expB<span class=\"sy0\">:</span> Expansion;<br/>\ti<span class=\"sy0\">,</span>j<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> Swap<span class=\"br0\">(</span><span class=\"kw1\">VAR</span> x<span class=\"sy0\">,</span>y<span class=\"sy0\">:</span> Expansion<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\tswap<span class=\"sy0\">:</span> Expansion;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tswap <span class=\"sy0\">:=</span> x; x <span class=\"sy0\">:=</span> y; y <span class=\"sy0\">:=</span> swap<br/>\t<span class=\"kw1\">END</span> Swap;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw3\">ASSERT</span><span class=\"br0\">(</span>p &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>expA<span class=\"sy0\">,</span>p <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>expB<span class=\"sy0\">,</span>p <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> p <span class=\"kw1\">DO</span><br/>\t\t<span class=\"kw1\">IF</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> expA<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <br/>\t\t<span class=\"kw1\">ELSE</span><br/>\t\t\t<span class=\"kw1\">FOR</span> j <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> i <span class=\"kw1\">DO</span><br/>\t\t\t\t<span class=\"kw1\">IF</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <br/>\t\t\t\t\texpB<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> expA<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>\t\t\t\t<span class=\"kw1\">ELSE</span><br/>\t\t\t\t\texpB<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> expA<span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> expA<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>\t\t\t\t<span class=\"kw1\">END</span><br/>\t\t\t<span class=\"kw1\">END</span>;<br/>\t\t\tSwap<span class=\"br0\">(</span>expA<span class=\"sy0\">,</span>expB<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">END</span>;<br/>\texpB <span class=\"sy0\">:=</span> <span class=\"kw2\">NIL</span>; <span class=\"coMULTI\">(* for the GC *)</span><br/>\t<span class=\"kw1\">RETURN</span> expA<br/><span class=\"kw1\">END</span> GenFor;<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Do<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\ts<span class=\"sy0\">:</span> TextMappers.<span class=\"me1\">Scanner</span>;<br/>\texp<span class=\"sy0\">:</span> Expansion;<br/><span class=\"kw1\">BEGIN</span><br/>\ts.<span class=\"me1\">ConnectTo</span><span class=\"br0\">(</span>DevCommanders.<span class=\"me1\">par</span>.<span class=\"me1\">text</span><span class=\"br0\">)</span>;<br/>\ts.<span class=\"me1\">SetPos</span><span class=\"br0\">(</span>DevCommanders.<span class=\"me1\">par</span>.<span class=\"me1\">beg</span><span class=\"br0\">)</span>;<br/>\ts.<span class=\"me1\">Scan</span>;<br/>\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span><span class=\"sy0\">~</span>s.<span class=\"me1\">rider</span>.<span class=\"me1\">eot</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>s.<span class=\"me1\">type</span> <span class=\"sy0\">=</span> TextMappers.<span class=\"me1\">char</span><span class=\"br0\">)</span> &amp; <span class=\"br0\">(</span>s.<span class=\"me1\">char</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'~'</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>\t\t\t<span class=\"kw1\">RETURN</span><br/>\t\t<span class=\"kw1\">ELSIF</span> <span class=\"br0\">(</span>s.<span class=\"me1\">type</span> <span class=\"sy0\">=</span> TextMappers.<span class=\"me1\">int</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>\t\t\texp <span class=\"sy0\">:=</span> GenFor<span class=\"br0\">(</span>s.<span class=\"me1\">int</span><span class=\"br0\">)</span>;<br/>\t\t\tShow<span class=\"br0\">(</span>exp<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\ts.<span class=\"me1\">Scan</span><br/>\t<span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> Do;<br/>\u00a0<br/><span class=\"kw1\">END</span> PascalTriangle.<br/>\u00a0</pre>"}, {"lang": "D", "loc": 25, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> pascalsTriangle<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> rows<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> tri <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span>rows<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>r<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">rows</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> v <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>c<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">r</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            tri<span class=\"br0\">[</span>r<span class=\"br0\">]</span> <span class=\"sy0\">~=</span> v<span class=\"sy0\">;</span><br/>            v <span class=\"sy0\">=</span> <span class=\"br0\">(</span>v <span class=\"sy0\">*</span> <span class=\"br0\">(</span>r <span class=\"sy0\">-</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> tri<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> t <span class=\"sy0\">=</span> pascalsTriangle<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>t <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>               <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>             <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>           <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>         <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>       <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>     <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">21</span><span class=\"sy0\">,</span> <span class=\"nu0\">35</span><span class=\"sy0\">,</span> <span class=\"nu0\">35</span><span class=\"sy0\">,</span> <span class=\"nu0\">21</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">28</span><span class=\"sy0\">,</span> <span class=\"nu0\">56</span><span class=\"sy0\">,</span> <span class=\"nu0\">70</span><span class=\"sy0\">,</span> <span class=\"nu0\">56</span><span class=\"sy0\">,</span> <span class=\"nu0\">28</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">36</span><span class=\"sy0\">,</span> <span class=\"nu0\">84</span><span class=\"sy0\">,</span> <span class=\"nu0\">126</span><span class=\"sy0\">,</span> <span class=\"nu0\">126</span><span class=\"sy0\">,</span> <span class=\"nu0\">84</span><span class=\"sy0\">,</span> <span class=\"nu0\">36</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 44, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import 'dart:io';<br/>\u00a0<br/>pascal(n) {<br/>  if(n&lt;=0) print(\"Not defined\");<br/>\u00a0<br/>  else if(n==1) print(1);<br/>\u00a0<br/>  else {<br/>    List&lt;List&lt;int&gt;&gt; matrix = new List&lt;List&lt;int&gt;&gt;();<br/>    matrix.add(new List&lt;int&gt;());<br/>    matrix.add(new List&lt;int&gt;());<br/>    matrix[0].add(1);<br/>    matrix[1].add(1);<br/>    matrix[1].add(1);<br/>    for (var i = 2; i &lt; n; i++) {<br/>      List&lt;int&gt; list = new List&lt;int&gt;();<br/>      list.add(1);<br/>      for (var j = 1; j&lt;i; j++) {<br/>        list.add(matrix[i-1][j-1]+matrix[i-1][j]);<br/>      }<br/>      list.add(1);<br/>      matrix.add(list);<br/>    }<br/>    for(var i=0; i&lt;n; i++) {<br/>      for(var j=0; j&lt;=i; j++) {<br/>        stdout.write(matrix[i][j]);<br/>        stdout.write(' ');<br/>      }<br/>      stdout.write('\\n');<br/>    }<br/>  }<br/>}<br/>\u00a0<br/>void main() {<br/>  pascal(0);<br/>  pascal(1);<br/>  pascal(3);<br/>  pascal(6);<br/>}<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Delphi", "loc": 21, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> PascalsTriangle<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> <span class=\"kw1\">Pascal</span><span class=\"br0\">(</span>r<span class=\"sy1\">:</span><span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span> c<span class=\"sy1\">,</span> k<span class=\"sy1\">:</span><span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> r <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> i <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">Write</span><span class=\"br0\">(</span>c<span class=\"sy1\">:</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> c <span class=\"sy3\">*</span> <span class=\"br0\">(</span>i <span class=\"sy3\">-</span> k<span class=\"br0\">)</span> <span class=\"kw1\">div</span> <span class=\"br0\">(</span>k <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    Writeln<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">Pascal</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "DWScript", "loc": 15, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">procedure</span> <span class=\"kw1\">Pascal</span><span class=\"br0\">(</span>r <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>   i<span class=\"sy1\">,</span> c<span class=\"sy1\">,</span> k <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> r<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      c<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">for</span> k<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> i <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>         Print<span class=\"br0\">(</span><span class=\"kw3\">Format</span><span class=\"br0\">(</span><span class=\"st0\">'%4d'</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>         c<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"br0\">(</span>c<span class=\"sy3\">*</span><span class=\"br0\">(</span>i<span class=\"sy3\">-</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">div</span> <span class=\"br0\">(</span>k<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      PrintLn<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">Pascal</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "E", "loc": 20, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> pascalsTriangle<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> out<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> row <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">diverge</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/int\"><span class=\"kw6\">int</span></a><span class=\"br0\">)</span><br/>    out.<a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">\"&lt;table style='text-align: center; border: 0; border-collapse: collapse;'&gt;\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> y <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">1</span>..<span class=\"me1\">n</span> <span class=\"br0\">{</span><br/>        out.<a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">\"&lt;tr&gt;\"</span><span class=\"br0\">)</span><br/>        row.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> skip <span class=\"sy0\">:=</span> n <span class=\"sy0\">-</span> y<br/>        <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>skip <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            out.<a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">`&lt;td colspan=\"$skip\"&gt;&lt;/td&gt;`</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> x <span class=\"sy0\">=&gt;</span> v <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> row <span class=\"br0\">{</span><br/>            out.<a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">`&lt;td&gt;$v&lt;/td&gt;&lt;td&gt;&lt;/td&gt;`</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> i <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"sy0\">!</span>y<span class=\"br0\">)</span>.<span class=\"me1\">descending</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            row<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> row<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>        out.<a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/tr&gt;\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    out.<a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">\"&lt;/table&gt;\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Eiffel", "loc": 103, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/>note<br/>\tdescription    <span class=\"sy0\">:</span> <span class=\"st0\">\"Prints pascal's triangle\"</span><br/>\toutput         <span class=\"sy0\">:</span> <span class=\"st0\">\"[<br/>    \t\t\t   Per requirements of the RosettaCode example, execution will print the first n rows of pascal's triangle<br/>    \t\t\t  ]\"</span><br/>\tdate           <span class=\"sy0\">:</span> <span class=\"st0\">\"19 December 2013\"</span><br/>\tauthors        <span class=\"sy0\">:</span> <span class=\"st0\">\"Sandro Meier\"</span>, <span class=\"st0\">\"Roman Brunner\"</span><br/>\trevision       <span class=\"sy0\">:</span> <span class=\"st0\">\"1.0\"</span><br/>\tlibraries      <span class=\"sy0\">:</span> <span class=\"st0\">\"Relies on HASH_TABLE from EIFFEL_BASE library\"</span><br/>\timplementation <span class=\"sy0\">:</span> <span class=\"st0\">\"[<br/>\t\t\t   Recursive implementation to calculate the n'th row.<br/>\t\t\t ]\"</span><br/>\twarning        <span class=\"sy0\">:</span> <span class=\"st0\">\"[<br/>\t\t\t\tWill not work for large n's (INTEGER_32)<br/>\t\t         ]\"</span><br/>\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw1\">inherit</span><br/>\t<a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+arguments&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARGUMENTS</span></a><br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>\tmake<br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tn<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+hash_table&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">HASH_TABLE</span></a><span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a><span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span>,<a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><span class=\"br0\">}</span>pascal_lines.<span class=\"me1\">make</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"co1\">--create the hash_table object</span><br/>\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\tn<span class=\"sy0\">:=</span><span class=\"nu0\">25</span><br/>\t\t\tdraw<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/><span class=\"kw1\">feature</span><br/>\tline<span class=\"br0\">(</span>n<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a><span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\t\t<span class=\"co1\">--Calculates the n'th line</span><br/>\t<span class=\"kw2\">local</span><br/>\t\tupper_line<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a><span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\t\ti<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t<span class=\"kw2\">do</span><br/>\t\t<span class=\"kw2\">if</span>\tn<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw2\">then</span>\t<span class=\"co1\">--trivial case first line</span><br/>\t\t\t<span class=\"kw2\">create</span> <span class=\"kw3\">Result</span>.<span class=\"me1\">make_filled</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, n<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">put</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">put</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">put</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">elseif</span> pascal_lines.<span class=\"me1\">has</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw2\">then</span>\t<span class=\"co1\">--checks if the result was already calculated</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> pascal_lines.<span class=\"me1\">at</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">else</span>\t<span class=\"co1\">--calculates the n'th line recursively</span><br/>\t\t\t<span class=\"kw2\">create</span> <span class=\"kw3\">Result</span>.<span class=\"me1\">make_filled</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,n<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">--for caluclation purposes add a 0 at the beginning of each line</span><br/>\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">put</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\tupper_line<span class=\"sy0\">:=</span>line<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\ti<span class=\"sy0\">:=</span><span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\ti<span class=\"sy0\">&gt;</span>upper_line.<span class=\"me1\">count</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">put</span><span class=\"br0\">(</span>upper_line<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">+</span>upper_line<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>,i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\ti<span class=\"sy0\">:=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">put</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, n<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>\t<span class=\"co1\">--for caluclation purposes add a 0 at the end of each line</span><br/>\t\t\tpascal_lines.<span class=\"me1\">put</span> <span class=\"br0\">(</span><span class=\"kw3\">Result</span>, n<span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tdraw<span class=\"br0\">(</span>n<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><br/>\t\t<span class=\"co1\">--draw n lines of pascal's triangle</span><br/>\t<span class=\"kw2\">local</span><br/>\t\tspace_string<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><br/>\t\twidth, i<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\u00a0<br/>\t<span class=\"kw2\">do</span><br/>\t\tspace_string<span class=\"sy0\">:=</span><span class=\"st0\">\" \"</span>\t\t<span class=\"co1\">--question of design: add space_string at the beginning of each line</span><br/>\t\twidth<span class=\"sy0\">:=</span>line<span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">count</span><br/>\t\tspace_string.<span class=\"me1\">multiply</span> <span class=\"br0\">(</span>width<span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">from</span><br/>\t\t\ti<span class=\"sy0\">:=</span><span class=\"nu0\">1</span><br/>\t\t<span class=\"kw2\">until</span><br/>\t\t\ti<span class=\"sy0\">&gt;</span>n<br/>\t\t<span class=\"kw2\">loop</span><br/>\t\t\tspace_string.<span class=\"me1\">remove_tail</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>space_string<span class=\"br0\">)</span><br/>\t\t\tacross line<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw2\">as</span> c<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">if</span><br/>\t\t\t\t\tc.<span class=\"me1\">item</span><span class=\"sy0\">/=</span><span class=\"nu0\">0</span><br/>\t\t\t\t<span class=\"kw2\">then</span><br/>\t\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>c.<span class=\"me1\">item</span>.<span class=\"me1\">out</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\ti<span class=\"sy0\">:=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>\t\t<span class=\"kw2\">end</span><br/>\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"co1\">--Access</span><br/>\tpascal_lines<span class=\"sy0\">:</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+hash_table&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">HASH_TABLE</span></a><span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a><span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span>,<a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\t\t<span class=\"co1\">--Contains all already calculated lines</span><br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 12, "block": "<pre class=\"text highlighted_source\">defmodule Pascal do<br/>  def triangle(n), do: triangle(n,[1])<br/>\u00a0<br/>  def triangle(0,list), do: list<br/>  def triangle(n,list) do<br/>    IO.inspect list<br/>    new_list = Enum.zip([0]++list, list++[0]) |&gt; Enum.map(fn {a,b} -&gt; a+b end)<br/>    triangle(n-1,new_list)<br/>  end<br/>end<br/>\u00a0<br/>Pascal.triangle(8)</pre>"}, {"lang": "Erlang", "loc": 10, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">import</span><span class=\"br0\">(</span>lists<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>pascal<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">pascal</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">pascal</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">L</span> <span class=\"sy3\">=</span> <span class=\"re3\">pascal</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">[</span><span class=\"re5\">H</span>|_<span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"re5\">L</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">zipwith</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"re5\">Y</span><span class=\"br0\">)</span><span class=\"sy1\">-&gt;</span><span class=\"me1\">X</span><span class=\"sy3\">+</span><span class=\"re5\">Y</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy3\">++</span><span class=\"re5\">H</span><span class=\"sy1\">,</span><span class=\"re5\">H</span><span class=\"sy3\">++</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>|L<span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM PASCAL_TRIANGLE<br/>\u00a0<br/>PROCEDURE PASCAL(R%)<br/>  LOCAL I%,C%,K%<br/>    FOR I%=0 TO R%-1 DO<br/>      C%=1<br/>      FOR K%=0 TO I% DO<br/>        WRITE(\"###\";C%;)<br/>        C%=(C%*(I%-K%)) DIV (K%+1)<br/>      END FOR<br/>      PRINT<br/>   END FOR<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>  PASCAL(9)<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 10, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw2\">sequence</span> row<br/>row <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> m <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span><br/>    row <span class=\"sy1\">=</span> row <span class=\"sy1\">&amp;</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy1\">=</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">2</span> <span class=\"kw1\">by</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        row<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy1\">+=</span> row<span class=\"br0\">[</span>n<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw2\">print</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span>row<span class=\"br0\">)</span><br/>    <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span></pre>"}, {"lang": "F#", "loc": 13, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> nextrow l <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">match</span> l <span class=\"kw1\">with</span><br/>    | <span class=\"br0\">[</span><span class=\"br0\">]</span>      <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    | h\u00a0:: <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    | h\u00a0:: t  <span class=\"sy0\">-&gt;</span> h <span class=\"sy0\">+</span> t.<span class=\"me1\">Head</span>\u00a0:: nextrow t<br/>\u00a0<br/><span class=\"kw1\">let</span> pascalTri n <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">scan</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> l i <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span>\u00a0:: nextrow l<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> .. <span class=\"me1\">n</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">for</span> row <span class=\"kw1\">in</span> pascalTri<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> row <span class=\"kw1\">do</span><br/>        printf <span class=\"st0\">\"%s\"</span> <span class=\"br0\">(</span>i.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"%s\"</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 7, "block": "<pre class=\"text highlighted_source\">USING: grouping kernel math sequences\u00a0;<br/>\u00a0<br/>: (pascal) ( seq -- newseq )<br/>    dup last 0 prefix 0 suffix 2 &lt;clumps&gt; [ sum ] map suffix\u00a0;<br/>\u00a0<br/>: pascal ( n -- seq )<br/>    1 - { { 1 } } swap [ (pascal) ] times\u00a0;</pre>"}, {"lang": "Fantom", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Main<br/>{<br/>  Int[] next_row (Int[] row)<br/>  {<br/>    new_row\u00a0:= [1]<br/>    (row.size-1).times |i|<br/>    {<br/>      new_row.add (row[i] + row[i+1])<br/>    }<br/>    new_row.add (1)<br/>\u00a0<br/>    return new_row<br/>  }<br/>\u00a0<br/>  Void print_pascal (Int n)  // no output for n &lt;= 0<br/>  {<br/>    current_row\u00a0:= [1]<br/>    n.times <br/>    {<br/>      echo (current_row.join(\" \"))<br/>      current_row = next_row (current_row)<br/>    }<br/>  }<br/>\u00a0<br/>  Void main ()<br/>  {<br/>    print_pascal (10)<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 11, "block": "<pre class=\"text highlighted_source\">: init ( n -- )<br/>  here swap cells erase  1 here\u00a0!\u00a0;<br/>: .line ( n -- )<br/>  cr here swap 0 do dup @ . cell+ loop drop\u00a0;<br/>: next ( n -- )<br/>  here swap 1- cells here + do<br/>    i @ i cell+ +!<br/>  -1 cells +loop\u00a0;<br/>: pascal ( n -- )<br/>      dup init   1  .line<br/>  1\u00a0?do i next i 1+ .line loop\u00a0;</pre>"}, {"lang": "Fortran", "loc": 26, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">PROGRAM</span> Pascals_Triangle<br/>\u00a0<br/>  <span class=\"kw1\">CALL</span> Print_Triangle<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">PROGRAM</span> Pascals_Triangle<br/>\u00a0<br/><span class=\"kw1\">SUBROUTINE</span> Print_Triangle<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw3\">IMPLICIT</span> <span class=\"kw3\">NONE</span><br/>  <span class=\"kw3\">INTEGER</span>, <span class=\"kw3\">INTENT</span><span class=\"br0\">(</span><span class=\"kw3\">IN</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>  <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">c</span>, i, j, k, spaces<br/>\u00a0<br/>  <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>     c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>     spaces <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> i<span class=\"br0\">)</span><br/>     <span class=\"kw1\">DO</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, spaces<br/>        WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">\"(A)\"</span>, <span class=\"kw1\">ADVANCE</span><span class=\"sy0\">=</span><span class=\"st0\">\"NO\"</span><span class=\"br0\">)</span> <span class=\"st0\">\" \"</span><br/>     <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>     <span class=\"kw1\">DO</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, i<br/>        WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">\"(I6)\"</span>, <span class=\"kw1\">ADVANCE</span><span class=\"sy0\">=</span><span class=\"st0\">\"NO\"</span><span class=\"br0\">)</span> c<br/>        c <span class=\"sy0\">=</span> c <span class=\"sy0\">*</span> <span class=\"br0\">(</span>i <span class=\"sy0\">-</span> k<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>     WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> Print_Triangle</pre>"}, {"lang": "FreeBASIC", "loc": 37, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> pascalTriangle<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> n = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span><br/>  <span class=\"kw1\">Dim</span> prevRow<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>  <span class=\"kw1\">Dim</span> currRow<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>  <span class=\"kw1\">Dim</span> start<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span>  <span class=\"co1\">''stores starting column for each row</span><br/>  start<span class=\"br0\">(</span>n<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = n - <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Step</span> -<span class=\"nu0\">1</span><br/>    start<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = start<span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"br0\">)</span> + <span class=\"nu0\">3</span><br/>  <span class=\"kw1\">Next</span><br/>  prevRow<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Print</span> <span class=\"kw1\">Tab</span><span class=\"br0\">(</span>start<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">Print</span> 1U<br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> n<br/>    <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> i<br/>      <span class=\"kw1\">If</span> j = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">Print</span> <span class=\"kw1\">Tab</span><span class=\"br0\">(</span>start<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"st0\">\"1\"</span>;<br/>        currRow<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">ElseIf</span> j = i <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">Print</span> <span class=\"st0\">\"     1\"</span><br/>        currRow<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">Else</span><br/>        currRow<span class=\"br0\">(</span>j<span class=\"br0\">)</span> = prevRow<span class=\"br0\">(</span>j - <span class=\"nu0\">1</span><span class=\"br0\">)</span> + prevRow<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"######\"</span>; currRow<span class=\"br0\">(</span>j<span class=\"br0\">)</span>; <span class=\"st0\">\"    \"</span>; <br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span> j <br/>    <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> i<br/>      prevRow<span class=\"br0\">(</span>j<span class=\"br0\">)</span> = currRow<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span> j<br/>  <span class=\"kw1\">Next</span> i<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>pascalTriangle<span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span>  <br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "FunL", "loc": 5, "block": "<pre class=\"text highlighted_source\">import lists.zip<br/>\u00a0<br/>def<br/>  pascal( 1 ) = [1]<br/>  pascal( n ) = [1] + map( (a, b) -&gt; a + b, zip(pascal(n-1), pascal(n-1).tail()) ) + [1]</pre>"}, {"lang": "GAP", "loc": 19, "block": "<pre class=\"text highlighted_source\">Pascal\u00a0:= function(n)<br/>\tlocal i, v;<br/>\tv\u00a0:= [1];<br/>\tfor i in [1 .. n] do<br/>\t\tDisplay(v);<br/>\t\tv\u00a0:= Concatenation([0], v) + Concatenation(v, [0]);<br/>\tod;<br/>end;<br/>\u00a0<br/>Pascal(9);  <br/># [ 1 ]<br/># [ 1, 1 ]<br/># [ 1, 2, 1 ]<br/># [ 1, 3, 3, 1 ]<br/># [ 1, 4, 6, 4, 1 ]<br/># [ 1, 5, 10, 10, 5, 1 ]<br/># [ 1, 6, 15, 20, 15, 6, 1 ]<br/># [ 1, 7, 21, 35, 35, 21, 7, 1 ]<br/># [ 1, 8, 28, 56, 70, 56, 28, 8, 1 ]</pre>"}, {"lang": "Go", "loc": 44, "block": "<pre class=\"go highlighted_source\">\u00a0<br/><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> printTriangle<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// degenerate cases</span><br/>    <span class=\"kw1\">if</span> n &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// iterate over rows, zero based</span><br/>    a <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"sy1\">(</span>n<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>    a<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> row<span class=\"sy1\">,</span> middle <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> row &lt; n<span class=\"sy1\">;</span> row<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// generate new row</span><br/>        even <span class=\"sy2\">:=</span> row&amp;<span class=\"nu0\">1</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">if</span> even <span class=\"sy1\">{</span><br/>            a<span class=\"sy1\">[</span>middle<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> a<span class=\"sy1\">[</span>middle<span class=\"sy1\">]</span> <span class=\"sy3\">*</span> <span class=\"nu0\">2</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> middle<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>            a<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">+=</span> a<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// print row</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> middle<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>a<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> even <span class=\"sy1\">{</span><br/>            middle<span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> middle<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>a<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    printTriangle<span class=\"sy1\">(</span><span class=\"nu0\">4</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0</pre>"}, {"lang": "Groovy", "loc": 2, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> pascal<br/>pascal <span class=\"sy0\">=</span> <span class=\"br0\">{</span> n <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>\u00a0: <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> pascal<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>, pascal<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">transpose</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> it.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span></pre>"}, {"lang": "GW-BASIC", "loc": 9, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"co3\">10</span> <a href=\"http://www.qbasicnews.com/qboho/qckinput.shtml\"><span class=\"kw3\">INPUT</span></a> <span class=\"st0\">\"Number of rows? \"</span><span class=\"sy0\">,</span>R<br/><span class=\"co3\">20</span> <span class=\"kw1\">FOR</span> I<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> R<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/><span class=\"co3\">30</span> C<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/><span class=\"co3\">40</span> <span class=\"kw1\">FOR</span> K<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> I<br/><span class=\"co3\">50</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckusing.shtml\"><span class=\"kw3\">USING</span></a> <span class=\"st0\">\"####\"</span>;C;<br/><span class=\"co3\">60</span> C<span class=\"sy0\">=</span>C<span class=\"sy0\">*</span><span class=\"br0\">(</span>I<span class=\"sy0\">-</span>K<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>K<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"co3\">70</span> <span class=\"kw1\">NEXT</span><br/><span class=\"co3\">80</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a><br/><span class=\"co3\">90</span> <span class=\"kw1\">NEXT</span></pre>"}, {"lang": "Haskell", "loc": 4, "block": "<pre class=\"haskell highlighted_source\">zapWith <span class=\"sy0\">::</span> <span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>zapWith f xs <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> xs<br/>zapWith f <span class=\"br0\">[</span><span class=\"br0\">]</span> ys <span class=\"sy0\">=</span> ys<br/>zapWith f <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> <span class=\"br0\">(</span>y:ys<span class=\"br0\">)</span> <span class=\"sy0\">=</span> f x y\u00a0: zapWith f xs ys</pre>"}, {"lang": "HicEst", "loc": 15, "block": "<pre class=\"hicest highlighted_source\">   <span class=\"kw1\">CALL</span> Pascal<span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">SUBROUTINE</span> Pascal<span class=\"br0\">(</span>rows<span class=\"br0\">)</span><br/>   <span class=\"kw1\">CHARACTER</span> fmt<span class=\"sy1\">*</span><span class=\"nu0\">6</span><br/>   <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>fmt<span class=\"sy1\">,</span> Format<span class=\"sy1\">=</span><span class=\"st0\">'\"i\", i5.5'</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"sy1\">+</span>rows<span class=\"sy1\">/</span><span class=\"nu0\">4</span><br/>\u00a0<br/>   <span class=\"kw1\">DO</span> row <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> rows<span class=\"sy1\">-</span><span class=\"nu0\">1</span><br/>     n <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/>     <span class=\"kw1\">DO</span> k <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> row<br/>       col <span class=\"sy1\">=</span> rows<span class=\"sy1\">*</span><span class=\"br0\">(</span>rows<span class=\"sy1\">-</span>row<span class=\"sy1\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span>k<span class=\"br0\">)</span><span class=\"sy1\">/</span><span class=\"nu0\">4</span><br/>       <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Row<span class=\"sy1\">=</span>row<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> Column<span class=\"sy1\">=</span>col<span class=\"sy1\">,</span> F<span class=\"sy1\">=</span>fmt<span class=\"br0\">)</span> n<br/>       n <span class=\"sy1\">=</span> n <span class=\"sy1\">*</span> <span class=\"br0\">(</span>row <span class=\"sy1\">-</span> k<span class=\"br0\">)</span> <span class=\"sy1\">/</span> <span class=\"br0\">(</span>k <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">ENDDO</span><br/>   <span class=\"kw1\">ENDDO</span><br/><span class=\"kw1\">END</span></pre>"}, {"lang": "Icon and Unicon", "loc": 20, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> math<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/><span class=\"kw1\">every</span> n <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>A <span class=\"kw1\">do</span>  <span class=\"br0\">{</span>    <span class=\"co1\"># for each command line argument </span><br/>   n <span class=\"sy1\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"sy1\">\\</span>n<span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">null</span><br/>   pascal<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>   <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> pascal<span class=\"br0\">(</span>n<span class=\"br0\">)</span>\t\t<span class=\"co1\">#: Pascal triangle</span><br/>   <span class=\"sy1\">/</span>n <span class=\"sy1\">:=</span> <span class=\"nu0\">16</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"width=\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> <span class=\"st0\">\" height=\"</span><span class=\"sy1\">,</span> n<span class=\"br0\">)</span>\t<span class=\"co1\"># carpet header</span><br/>   fw <span class=\"sy1\">:=</span> <span class=\"sy1\">*</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy1\">^</span> n<span class=\"br0\">)</span><span class=\"sy1\">+</span><span class=\"nu0\">1</span><br/>   <span class=\"kw1\">every</span> i <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n <span class=\"sy1\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>      <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"kw4\">repl</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span>fw<span class=\"sy1\">*</span><span class=\"br0\">(</span>n<span class=\"sy1\">-</span>i<span class=\"br0\">)</span><span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">every</span> j <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n <span class=\"sy1\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>         <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"kw4\">center</span><span class=\"br0\">(</span>binocoef<span class=\"br0\">(</span>i<span class=\"sy1\">,</span> j<span class=\"br0\">)</span><span class=\"sy1\">,</span>fw<span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw1\">break</span><span class=\"br0\">)</span><br/>      <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "IDL", "loc": 17, "block": "<pre class=\"idl highlighted_source\">Pro Pascal, n<br/><span class=\"sy0\">;</span>n is the number of lines of the triangle to be displayed<br/> r<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/> print, r<br/>  for i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>, <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> do begin<br/>    pascalrow,r<br/>  endfor<br/>End<br/>\u00a0<br/>Pro PascalRow, r<br/>  for i<span class=\"sy0\">=</span><span class=\"nu0\">0</span>,<span class=\"br0\">(</span>n_elements<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> do begin <br/>    r<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>r<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">+</span>r<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>  endfor<br/>r<span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>, r<span class=\"br0\">]</span><br/>print, r<br/>\u00a0<br/>End</pre>"}, {"lang": "J", "loc": 6, "block": "<pre class=\"j highlighted_source\">  \u00a0!~/~ i.<span class=\"nu0\">5</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">3</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"nu0\">6</span> <span class=\"nu0\">4</span> <span class=\"nu0\">1</span></pre>"}, {"lang": "Java", "loc": 21, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.ArrayList</span><span class=\"sy0\">;</span><br/>...<span class=\"co1\">//class definition, etc.</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> genPyrN<span class=\"br0\">(</span><span class=\"kw4\">int</span> rows<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>rows <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t<span class=\"co1\">//save the last row here</span><br/>\tArrayList<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> last <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tlast.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>last<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;=</span> rows<span class=\"sy0\">;++</span>i<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"co1\">//work on the next row</span><br/>\t\tArrayList<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> thisRow<span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tthisRow.<span class=\"me1\">add</span><span class=\"br0\">(</span>last.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//beginning</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>j <span class=\"sy0\">&lt;</span> i<span class=\"sy0\">;++</span>j<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"co1\">//loop the number of elements in this row</span><br/>\t\t\t<span class=\"co1\">//sum from the last row</span><br/>\t\t\tthisRow.<span class=\"me1\">add</span><span class=\"br0\">(</span>last.<span class=\"me1\">get</span><span class=\"br0\">(</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> last.<span class=\"me1\">get</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tthisRow.<span class=\"me1\">add</span><span class=\"br0\">(</span>last.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//end</span><br/>\t\tlast<span class=\"sy0\">=</span> thisRow<span class=\"sy0\">;</span><span class=\"co1\">//save this row</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>thisRow<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 71, "block": "<pre class=\"javascript highlighted_source\"><span class=\"co1\">// Pascal's triangle object</span><br/><span class=\"kw1\">function</span> pascalTriangle <span class=\"br0\">(</span>rows<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"co1\">// Number of rows the triangle contains</span><br/>\t<span class=\"kw1\">this</span>.<span class=\"me1\">rows</span> <span class=\"sy0\">=</span> rows<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// The 2D array holding the rows of the triangle</span><br/>\t<span class=\"kw1\">this</span>.<span class=\"me1\">triangle</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> rows<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">this</span>.<span class=\"me1\">triangle</span><span class=\"br0\">[</span>r<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> r<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> i <span class=\"sy0\">==</span> r<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">this</span>.<span class=\"me1\">triangle</span><span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\t<span class=\"kw1\">this</span>.<span class=\"me1\">triangle</span><span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">this</span>.<span class=\"me1\">triangle</span><span class=\"br0\">[</span>r<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"kw1\">this</span>.<span class=\"me1\">triangle</span><span class=\"br0\">[</span>r<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">// Method to print the triangle</span><br/>\t<span class=\"kw1\">this</span>.<span class=\"me1\">print</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>base<span class=\"br0\">)</span><br/>\t\t\tbase <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"co1\">// Private method to calculate digits in number</span><br/>\t\t<span class=\"kw1\">var</span> digits <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">var</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\twhile <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\td<span class=\"sy0\">++;</span><br/>\t\t\t\tn <span class=\"sy0\">/=</span> b<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">return</span> d<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"co1\">// Calculate max spaces needed</span><br/>\t\t<span class=\"kw1\">var</span> spacing <span class=\"sy0\">=</span> digits<span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">triangle</span><span class=\"br0\">[</span><span class=\"kw1\">this</span>.<span class=\"me1\">rows</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw4\">Math</span>.<span class=\"me1\">round</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">rows</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"co1\">// Private method to add spacing between numbers</span><br/>\t\t<span class=\"kw1\">var</span> insertSpaces <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">var</span> buf <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\t\t\twhile <span class=\"br0\">(</span>s <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\ts<span class=\"sy0\">--;</span><br/>\t\t\t\tbuf <span class=\"sy0\">+=</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">return</span> buf<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"co1\">// Print the triangle line by line</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> <span class=\"kw1\">this</span>.<span class=\"me1\">triangle</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">var</span> l <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> s <span class=\"sy0\">&lt;</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">round</span><span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">rows</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span> s<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\tl <span class=\"sy0\">+=</span> insertSpaces<span class=\"br0\">(</span>spacing<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"kw1\">this</span>.<span class=\"me1\">triangle</span><span class=\"br0\">[</span>r<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t\t\tl <span class=\"sy0\">+=</span> insertSpaces<span class=\"br0\">(</span>spacing<span class=\"sy0\">-</span><span class=\"kw4\">Math</span>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span>digits<span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">triangle</span><span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>base<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tl <span class=\"sy0\">+=</span> <span class=\"kw1\">this</span>.<span class=\"me1\">triangle</span><span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"kw1\">this</span>.<span class=\"me1\">triangle</span><span class=\"br0\">[</span>r<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\t\tl <span class=\"sy0\">+=</span> insertSpaces<span class=\"br0\">(</span>spacing<span class=\"sy0\">-</span><span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>digits<span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">triangle</span><span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>base<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tprint<span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Display 4 row triangle in base 10</span><br/><span class=\"kw1\">var</span> tri <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> pascalTriangle<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>tri.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\">// Display 8 row triangle in base 16</span><br/>tri <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> pascalTriangle<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>tri.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 11, "block": "<pre class=\"text highlighted_source\"># pascal(n) for n&gt;=0; pascal(0) emits an empty stream.<br/>def pascal(n):<br/>  def _pascal:  # input: the previous row<br/>    . as $in<br/>    | .,<br/>      if length &gt;= n then empty<br/>      else<br/>        reduce range(0;length-1) as $i<br/>          ([1]; . + [ $in[$i] + $in[$i + 1] ]) + [1] | _pascal<br/>      end;<br/>  if n &lt;= 0 then empty else [1] | _pascal end\u00a0;</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre>function pascal(n)\n  if n&lt;=0\n   print(\"n has to have a positive value\")\n  end\n  x=0\n  while x&lt;=n\n   for a=0:x\n    print(binomial(x,a))\n   end\n   println(\"\")\n   x+=1\n  end\nend\n</pre>"}, {"lang": "K", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>pascal:{(x-1){+':x,0}\\1}<br/>pascal 6<br/>(1<br/> 1 1<br/> 1 2 1<br/> 1 3 3 1<br/> 1 4 6 4 1<br/> 1 5 10 10 5 1)</pre>"}, {"lang": "Kotlin", "loc": 18, "block": "<pre class=\"text highlighted_source\">fun pas(rows: Int) {<br/>    for (i in 0..rows - 1) {<br/>        for (j in 0..i)<br/>            print(ncr(i, j).toString() + \" \")<br/>        println()<br/>    }<br/>}<br/>\u00a0<br/>fun ncr(n: Int, r: Int) = fact(n) / (fact(r) * fact(n - r))<br/>\u00a0<br/>fun fact(n: Int)\u00a0: Long {<br/>    var ans = 1.toLong()<br/>    for (i in 2..n)<br/>        ans *= i<br/>    return ans<br/>}<br/>\u00a0<br/>fun main(args: Array&lt;String&gt;) = pas(args[0].toInt())</pre>"}, {"lang": "Liberty BASIC", "loc": 19, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">input</span> <span class=\"st0\">\"How much rows would you like? \"</span>; n<br/><span class=\"kw1\">dim</span> a$<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i<span class=\"sy0\">=</span>  <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n<br/>       c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>       o$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>       <span class=\"kw1\">for</span> k <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> i<br/>             o$ <span class=\"sy0\">=</span>o$\u00a0; c; <span class=\"st0\">\" \"</span><br/>             c <span class=\"sy0\">=</span>c <span class=\"sy0\">*</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span>k<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>k<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">next</span> k<br/>       a$<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>o$<br/><span class=\"kw1\">next</span> i<br/>\u00a0<br/>maxLen <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>a$<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i<span class=\"sy0\">=</span>  <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n<br/>    <span class=\"kw1\">print</span> <span class=\"kw2\">space$</span><span class=\"br0\">(</span><span class=\"br0\">(</span>maxLen<span class=\"sy0\">-</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>a$<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;a$<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">next</span> i<br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Locomotive Basic", "loc": 12, "block": "<pre class=\"locobasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">CLS</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">INPUT</span> <span class=\"st0\">\"Number of rows? \"</span>, rows:<span class=\"kw1\">GOSUB</span> <span class=\"nu0\">40</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">END</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> rows-<span class=\"nu0\">1</span><br/><span class=\"nu0\">50</span> c=<span class=\"nu0\">1</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">FOR</span> k=<span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> i<br/><span class=\"nu0\">70</span> <span class=\"kw1\">PRINT</span> <span class=\"kw1\">USING</span> <span class=\"st0\">\"####\"</span>;c;<br/><span class=\"nu0\">80</span> c=c*<span class=\"br0\">(</span>i-k<span class=\"br0\">)</span>/<span class=\"br0\">(</span>k+<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"nu0\">90</span> <span class=\"kw1\">NEXT</span><br/><span class=\"nu0\">100</span> <span class=\"kw1\">PRINT</span><br/><span class=\"nu0\">110</span> <span class=\"kw1\">NEXT</span><br/><span class=\"nu0\">120</span> <span class=\"kw1\">RETURN</span></pre>"}, {"lang": "Logo", "loc": 7, "block": "<pre class=\"text highlighted_source\">to pascal\u00a0:n<br/>  if\u00a0:n = 1 [output [1]]<br/>  localmake \"a pascal\u00a0:n-1<br/>  output (sentence first\u00a0:a (map \"sum butfirst\u00a0:a butlast\u00a0:a) last\u00a0:a)<br/>end<br/>\u00a0<br/>for [i 1 10] [print pascal\u00a0:i]</pre>"}, {"lang": "Lua", "loc": 16, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> nextrow<span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> ret <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> t<span class=\"br0\">[</span><span class=\"sy0\">#</span>t<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>t <span class=\"kw1\">do</span> ret<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> t<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> ret<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> triangle<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  t <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">unpack</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    t <span class=\"sy0\">=</span> nextrow<span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 3, "block": "<pre class=\"text highlighted_source\">f:=n-&gt;seq(print(seq(binomial(i,k),k=0..i)),i=0..n-1);<br/>\u00a0<br/>f(3);</pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">Column[StringReplace[ToString /@ Replace[MatrixExp[SparseArray[<br/>{Band[{2,1}] -&gt; Range[n-1]},{n,n}]],{x__,0..}-&gt;{x},2] ,{\"{\"|\"}\"|\",\"-&gt;\" \"}], Center]</pre>"}, {"lang": "MATLAB / Octave", "loc": 1, "block": "<pre class=\"matlab highlighted_source\"><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pascal.html\"><span class=\"kw2\">pascal</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span>;</pre>"}, {"lang": "Maxima", "loc": 12, "block": "<pre class=\"text highlighted_source\">sjoin(v, j)\u00a0:= apply(sconcat, rest(join(makelist(j, length(v)), v)))$<br/>\u00a0<br/>display_pascal_triangle(n)\u00a0:= for i from 0 thru 6 do disp(sjoin(makelist(binomial(i, j), j, 0, i), \" \"));<br/>\u00a0<br/>display_pascal_triangle(6);<br/>/* \"1\"<br/>   \"1 1\"<br/>   \"1 2 1\"<br/>   \"1 3 3 1\"<br/>   \"1 4 6 4 1\"<br/>   \"1 5 10 10 5 1\"<br/>   \"1 6 15 20 15 6 1\" */</pre>"}, {"lang": "Metafont", "loc": 18, "block": "<pre class=\"text highlighted_source\">vardef bincoeff(expr n, k) =<br/>save\u00a0?;<br/>?\u00a0:= (1 for i=(max(k,n-k)+1) upto n: * i endfor )<br/>     / (1 for i=2 upto min(k, n-k): * i endfor);\u00a0?<br/>enddef;<br/>\u00a0<br/>def pascaltr expr c =<br/>  string s_;<br/>  for i\u00a0:= 0 upto (c-1):<br/>    s_\u00a0:= \"\" for k=0 upto (c-i): &amp; \"  \" endfor;<br/>    s_\u00a0:= s_ for k=0 upto i: &amp; decimal(bincoeff(i,k))<br/>             &amp; \"  \" if bincoeff(i,k)&lt;9: &amp; \" \" fi endfor;<br/>    message s_;<br/>  endfor<br/>enddef;<br/>\u00a0<br/>pascaltr(4);<br/>end</pre>"}, {"lang": "Microsoft Small Basic", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>TextWindow.Write(\"Number of rows? \")<br/>r = TextWindow.ReadNumber()<br/>For i = 0 To r - 1<br/>  c = 1<br/>  For k = 0 To i<br/>    TextWindow.CursorLeft = (k + 1) * 4 - Text.GetLength(c)<br/>    TextWindow.Write(c)    <br/>    c = c * (i - k) / (k + 1)<br/>  EndFor<br/>  TextWindow.WriteLine(\"\")<br/>EndFor<br/>\u00a0</pre>"}, {"lang": "Modula-2", "loc": 33, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> Pascal;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> PrintLine<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span><br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    m<span class=\"sy0\">,</span>j <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">IF</span> n&lt;<span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> <span class=\"kw1\">END</span>;<br/>    m <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>    WriteString<span class=\"br0\">(</span><span class=\"st0\">\"1 \"</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">FOR</span> j<span class=\"sy0\">:=</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>        m <span class=\"sy0\">:=</span> m <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> j<span class=\"br0\">)</span> <span class=\"kw1\">DIV</span> j;<br/>        FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%i \"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> m<span class=\"br0\">)</span>;<br/>        WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>    WriteLn<br/><span class=\"kw1\">END</span> PrintLine;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Print<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span> i <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n <span class=\"kw1\">DO</span><br/>        PrintLine<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> Print;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>    Print<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    ReadChar<br/><span class=\"kw1\">END</span> Pascal.</pre>"}, {"lang": "NetRexx", "loc": 41, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">numeric</span> digits <span class=\"nu0\">1000</span> <span class=\"co1\">-- allow very large numbers</span><br/><span class=\"kw1\">parse</span> arg rows .<br/><span class=\"kw1\">if</span> rows = <span class=\"st0\">''</span> <span class=\"kw3\">then</span> rows = <span class=\"nu0\">11</span> <span class=\"co1\">-- default to 11 rows</span><br/>printPascalTriangle<span class=\"br0\">(</span>rows<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- -----------------------------------------------------------------------------</span><br/>method printPascalTriangle<span class=\"br0\">(</span>rows = <span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  lines = <span class=\"st0\">''</span><br/>  mx = <span class=\"br0\">(</span>factorial<span class=\"br0\">(</span>rows - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> factorial<span class=\"br0\">(</span>rows\u00a0% <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> factorial<span class=\"br0\">(</span>rows - <span class=\"nu0\">1</span> - rows\u00a0% <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">-- width of widest number</span><br/>\u00a0<br/>  <span class=\"kw1\">loop</span> row = <span class=\"nu0\">1</span> to rows<br/>    n1 = <span class=\"nu0\">1</span>.<span class=\"kw6\">center</span><span class=\"br0\">(</span>mx<span class=\"br0\">)</span><br/>    line = n1<br/>    <span class=\"kw1\">loop</span> col = <span class=\"nu0\">2</span> to row<br/>      n2 = col - <span class=\"nu0\">1</span><br/>      n1 = n1 <span class=\"sy0\">*</span> <span class=\"br0\">(</span>row - n2<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n2<br/>      line = line n1.<span class=\"kw6\">center</span><span class=\"br0\">(</span>mx<span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span> col<br/>    lines<span class=\"br0\">[</span>row<span class=\"br0\">]</span> = line.<span class=\"kw6\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> row<br/>\u00a0<br/>  <span class=\"co1\">-- display triangle</span><br/>  ml = lines<span class=\"br0\">[</span>rows<span class=\"br0\">]</span>.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">-- length of longest line</span><br/>  <span class=\"kw1\">loop</span> row = <span class=\"nu0\">1</span> to rows<br/>    <span class=\"kw1\">say</span> lines<span class=\"br0\">[</span>row<span class=\"br0\">]</span>.<span class=\"kw6\">centre</span><span class=\"br0\">(</span>ml<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> row<br/>\u00a0<br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- -----------------------------------------------------------------------------</span><br/>method factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  fac = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">loop</span> n_ = <span class=\"nu0\">2</span> to n<br/>    fac = fac <span class=\"sy0\">*</span> n_<br/>    <span class=\"kw3\">end</span> n_<br/>  <span class=\"kw1\">return</span> fac <span class=\"coMULTI\">/*calc. factorial*/</span><br/>\u00a0</pre>"}, {"lang": "Nial", "loc": 5, "block": "<pre class=\"text highlighted_source\">factorial is recur [ 0 =, 1 first, pass, product, -1 +]<br/>combination is fork [ &gt; [first, second], 0 first, <br/>   / [factorial second, * [factorial - [second, first], factorial first] ]<br/>]<br/>pascal is transpose each combination cart [pass, pass] tell</pre>"}, {"lang": "Nim", "loc": 9, "block": "<pre class=\"text highlighted_source\">import sequtils<br/>\u00a0<br/>proc pascal(n: int) =<br/>  var row = @[1]<br/>  for r in 1..n:<br/>    echo row<br/>    row = zip(row &amp; @[0], @[0] &amp; row).mapIt(int, it[0] + it[1])<br/>\u00a0<br/>pascal(10)</pre>"}, {"lang": "OCaml", "loc": 10, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"co1\">(* generate next row from current row *)</span><br/><span class=\"kw1\">let</span> next_row row <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map2 <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> @ row<span class=\"br0\">)</span> <span class=\"br0\">(</span>row @ <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">(* returns the first n rows *)</span><br/><span class=\"kw1\">let</span> pascal n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> loop i row <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> i <span class=\"sy0\">=</span> n <span class=\"kw1\">then</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">else</span> row <span class=\"sy0\">::</span> loop <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>next_row row<span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span> loop <span class=\"nu0\">0</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span></pre>"}, {"lang": "Octave", "loc": 13, "block": "<pre class=\"octave highlighted_source\"><span class=\"kw4\">function</span> pascaltriangle<span class=\"br0\">(</span>h<span class=\"br0\">)</span><br/>  <span class=\"kw4\">for</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">:</span>h<span class=\"sy1\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw4\">for</span> k <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">:</span>h<span class=\"sy1\">-</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><br/>      <a href=\"http://octave.sourceforge.net/octave/function/printf.html\"><span class=\"kw5\">printf</span></a><span class=\"br0\">(</span><span class=\"co4\">\"  \"</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>    <span class=\"kw4\">endfor</span><br/>    <span class=\"kw4\">for</span> <a href=\"http://octave.sourceforge.net/octave/function/j.html\"><span class=\"kw10\">j</span></a> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">:</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><br/>      <a href=\"http://octave.sourceforge.net/octave/function/printf.html\"><span class=\"kw5\">printf</span></a><span class=\"br0\">(</span><span class=\"co4\">\"%3d \"</span><span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/bincoeff.html\"><span class=\"kw6\">bincoeff</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/j.html\"><span class=\"kw10\">j</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>    <span class=\"kw4\">endfor</span><br/>    <a href=\"http://octave.sourceforge.net/octave/function/printf.html\"><span class=\"kw5\">printf</span></a><span class=\"br0\">(</span><span class=\"co4\">\"\\n\"</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endfor</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/>pascaltriangle<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy5\">;</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: pascal(n)  [ 1 ] #[ dup println dup 0 + 0 rot + zipWith(#+) ] times(n) drop\u00a0;</pre>"}, {"lang": "Oz", "loc": 31, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">NextLine</span> Xs<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>zip 0<span class=\"sy0\">|</span>Xs <span class=\"br0\">{</span>Append Xs <span class=\"br0\">[</span>0<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>      <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> Left Right<span class=\"br0\">}</span><br/>         Left <span class=\"sy0\">+</span> Right<br/>      <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Triangle</span> N<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>take <span class=\"br0\">{</span>Iterate <span class=\"br0\">[</span>1<span class=\"br0\">]</span> NextLine<span class=\"br0\">}</span> N<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> lazy <span class=\"br0\">{</span><span class=\"re1\">Iterate</span> I F<span class=\"br0\">}</span><br/>     I<span class=\"sy0\">|</span><span class=\"br0\">{</span>Iterate <span class=\"br0\">{</span>F I<span class=\"br0\">}</span> F<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% Only works nicely for N =&lt; 5.</span><br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">PrintTriangle</span> T<span class=\"br0\">}</span><br/>     N = <span class=\"br0\">{</span>Length T<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"kw1\">for</span><br/>        Line <span class=\"kw1\">in</span> T<br/>        Indent <span class=\"kw1\">in</span> N<span class=\"sy0\">-</span>1<span class=\"sy0\">..</span>0;<span class=\"sy0\">~</span>1<br/>     <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> _ <span class=\"kw1\">in</span> 1<span class=\"sy0\">..</span>Indent <span class=\"kw1\">do</span> <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>printInfo <span class=\"st0\">\" \"</span><span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">for</span> L <span class=\"kw1\">in</span> Line <span class=\"kw1\">do</span> <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>printInfo L<span class=\"sy0\">#</span><span class=\"st0\">\" \"</span><span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>        <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>printInfo <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>PrintTriangle <span class=\"br0\">{</span>Triangle 5<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 15, "block": "<pre class=\"parigp highlighted_source\">pascals_triangle<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>my<span class=\"br0\">(</span>row<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>prevrow<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>x<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>N<span class=\"sy0\">,</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>x<span class=\"sy0\">&gt;</span><span class=\"nu1\">5</span><span class=\"sy0\">,</span><span class=\"kw1\">break</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         row<span class=\"sy0\">=</span><span class=\"kw1\">eval</span><span class=\"br0\">(</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span><span class=\"nu1\">11</span><span class=\"sy0\">^</span><span class=\"br0\">(</span>x<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">print</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>prevrow<span class=\"sy0\">=</span>row<span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>y<span class=\"sy0\">=</span><span class=\"nu1\">6</span><span class=\"sy0\">,</span>N<span class=\"sy0\">,</span><br/>   <span class=\"kw1\">for</span><span class=\"br0\">(</span>p<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>#prevrow<span class=\"sy0\">,</span><br/>         row<span class=\"br0\">[</span>p<span class=\"br0\">]</span><span class=\"sy0\">=</span>prevrow<span class=\"br0\">[</span>p<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>prevrow<span class=\"br0\">[</span>p<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         row<span class=\"sy0\">=</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span>row<span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         prevrow<span class=\"sy0\">=</span>row<span class=\"sy0\">;</span><br/>         <span class=\"kw1\">print</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Pascal", "loc": 21, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> PascalsTriangle<span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> Pascal<span class=\"br0\">(</span>r <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    i<span class=\"sy1\">,</span> c<span class=\"sy1\">,</span> k <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> r<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">for</span> k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> i <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">begin</span><br/>        <span class=\"kw3\">write</span><span class=\"br0\">(</span>c<span class=\"sy1\">:</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>c <span class=\"sy3\">*</span> <span class=\"br0\">(</span>i<span class=\"sy3\">-</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">div</span> <span class=\"br0\">(</span>k<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  Pascal<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 8, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> pascal <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$rows</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"sy0\">@</span><span class=\"kw1\">next</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$rows</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"@next<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"sy0\">@</span><span class=\"kw1\">next</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"re0\">$next</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"re0\">$next</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 5, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> pascal <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"re0\">$_</span> <span class=\"kw1\">Z</span><span class=\"sy0\">+</span> <span class=\"sy0\">|</span><span class=\"re0\">$_</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> pascal<span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 12, "block": "<pre class=\"text highlighted_source\">sequence row = {}<br/>for m = 1 to 13 do<br/>    row = row &amp; 1<br/>    for n=length(row)-1 to 2 by -1 do<br/>        row[n] += row[n-1]<br/>    end for<br/>    printf(1,repeat(' ',(13-m)*2))<br/>    for i=1 to length(row) do<br/>        printf(1,\"\u00a0%3d\",row[i])<br/>    end for<br/>    puts(1,'\\n')<br/>end for</pre>"}, {"lang": "PHP", "loc": 47, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"kw2\">&lt;?php</span><br/> <span class=\"co1\">//Author Ivan Gavryshin @dcc0</span><br/><span class=\"kw2\">function</span> tre<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"re0\">$ck</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$kn</span><span class=\"sy0\">=</span><span class=\"re0\">$n</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$kn</span><span class=\"sy0\">%</span><span class=\"nu19\">2</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/> <span class=\"re0\">$kn</span><span class=\"sy0\">=</span><span class=\"re0\">$kn</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/> <span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/> <span class=\"kw1\">else</span><br/>  <span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"re0\">$kn</span><span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$kn</span><span class=\"sy0\">=</span><span class=\"re0\">$kn</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$i</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/> <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$k</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$k</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$kn</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$k</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>   <span class=\"re0\">$ck</span> <span class=\"sy0\">=</span> <span class=\"re0\">$ck</span><span class=\"sy0\">/</span><span class=\"re0\">$k</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"re0\">$k</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$ck</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">echo</span>  <span class=\"st0\">\"+\"</span> <span class=\"sy0\">.</span> <span class=\"re0\">$ck</span> <span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$kn</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">echo</span> <span class=\"re0\">$arr</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$arr</span><span class=\"sy0\">=</span><a href=\"http://www.php.net/array_reverse\"><span class=\"kw3\">array_reverse</span></a><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">&lt;=</span> <span class=\"re0\">$kn</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/> <span class=\"kw1\">echo</span>  <span class=\"st0\">\"+\"</span> <span class=\"sy0\">.</span> <span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span>  <span class=\"sy0\">;</span><br/>     <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"br0\">}</span><br/>\u00a0<br/> <span class=\"br0\">}</span><br/> <span class=\"co1\">//set amount of strings here</span><br/> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">&lt;=</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/> <span class=\"sy0\">++</span><span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">echo</span> tre<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">echo</span> <span class=\"st0\">\"&lt;br/&gt;\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"sy1\">?&gt;</span><br/>\u00a0</pre>"}, {"lang": "PHP", "loc": 23, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">function</span> pascalsTriangle<span class=\"br0\">(</span><span class=\"re0\">$num</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$triangle</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">Array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;=</span><span class=\"re0\">$num</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$triangle</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">Array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.php.net/isset\"><span class=\"kw3\">isset</span></a><span class=\"br0\">(</span><span class=\"re0\">$triangle</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"re0\">$triangle</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$c</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$j</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"re0\">$j</span><span class=\"sy0\">&lt;</span><a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$triangle</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"re0\">$j</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"re0\">$triangle</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/isset\"><span class=\"kw3\">isset</span></a><span class=\"br0\">(</span><span class=\"re0\">$triangle</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.php.net/isset\"><span class=\"kw3\">isset</span></a><span class=\"br0\">(</span><span class=\"re0\">$triangle</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0? <span class=\"re0\">$triangle</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$triangle</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"re0\">$c</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$triangle</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$tria</span> <span class=\"sy0\">=</span> pascalsTriangle<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$tria</span> <span class=\"kw1\">as</span> <span class=\"re0\">$val</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$val</span> <span class=\"kw1\">as</span> <span class=\"re0\">$value</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">echo</span> <span class=\"re0\">$value</span> <span class=\"sy0\">.</span> <span class=\"st_h\">' '</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">echo</span> <span class=\"st_h\">'&lt;br&gt;'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PL/I", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>declare (t, u)(40) fixed binary;<br/>declare (i, n) fixed binary;<br/>\u00a0<br/>t,u = 0;<br/>get (n);<br/>if n &lt;= 0 then return;<br/>\u00a0<br/>do n = 1 to n;<br/>   u(1) = 1;<br/>   do i = 1 to n;<br/>      u(i+1) = t(i) + t(i+1);<br/>   end;<br/>   put skip edit ((u(i) do i = 1 to n)) (col(40-2*n), (n+1) f(4));<br/>   t = u;<br/>end;<br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 8, "block": "<pre class=\"text highlighted_source\">(de pascalTriangle (N)<br/>   (for I N<br/>      (space (* 2 (- N I)))<br/>      (let C 1<br/>         (for K I<br/>            (prin (align 3 C) \" \")<br/>            (setq C (*/ C (- I K) K)) ) )<br/>      (prinl) ) )</pre>"}, {"lang": "Potion", "loc": 18, "block": "<pre class=\"text highlighted_source\">printpascal = (n)\u00a0:<br/>   if (n &lt; 1)\u00a0:<br/>      1 print<br/>      (1)<br/>   . else\u00a0:<br/>      prev = printpascal(n - 1)<br/>      prev append(0)<br/>      curr = (1)<br/>      n times (i):<br/>         curr append(prev(i) + prev(i + 1))<br/>      .<br/>      \"\\n\" print<br/>      curr join(\", \") print<br/>      curr<br/>   .<br/>.<br/>\u00a0<br/>printpascal(read number integer)</pre>"}, {"lang": "PowerShell", "loc": 66, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$Infinity</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/><span class=\"re0\">$NewNumbers</span> <span class=\"sy0\">=</span> <span class=\"re0\">$null</span><br/><span class=\"re0\">$Numbers</span> <span class=\"sy0\">=</span> <span class=\"re0\">$null</span><br/><span class=\"re0\">$Result</span> <span class=\"sy0\">=</span> <span class=\"re0\">$null</span><br/><span class=\"re0\">$Number</span> <span class=\"sy0\">=</span> <span class=\"re0\">$null</span><br/><span class=\"re0\">$Power</span> <span class=\"sy0\">=</span> <a href=\"about:blank\"><span class=\"kw6\">$args</span></a><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">Write-Host</span> <span class=\"re0\">$Power</span><br/>\u00a0<br/><span class=\"kw3\">For</span><span class=\"br0\">(</span><br/>   <span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span>;<br/>   <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$Infinity</span>;<br/>   <span class=\"re0\">$i</span><span class=\"sy0\">++</span><br/>   <span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><br/>    <span class=\"re0\">$Numbers</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> Object<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"nu0\">1</span><br/>    <span class=\"re0\">$Numbers</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Power</span><br/>   <span class=\"kw3\">For</span><span class=\"br0\">(</span><br/>      <span class=\"re0\">$k</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span>;<br/>      <span class=\"re0\">$k</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$NewNumbers</span>.Length;<br/>      <span class=\"re0\">$k</span><span class=\"sy0\">++</span><br/>      <span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>       <span class=\"re0\">$Numbers</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Numbers</span> <span class=\"sy0\">+</span> <span class=\"re0\">$NewNumbers</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"kw3\">If</span><span class=\"br0\">(</span><br/>     <span class=\"re0\">$i</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><br/>     <span class=\"br0\">)</span><br/>     <span class=\"br0\">{</span><br/>      <span class=\"re0\">$Numbers</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Numbers</span> <span class=\"sy0\">+</span> <span class=\"re0\">$Power</span><br/>     <span class=\"br0\">}</span><br/>    <span class=\"re0\">$NewNumbers</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> Object<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"nu0\">0</span><br/>   Try<br/>   <span class=\"br0\">{</span><br/>   <span class=\"kw3\">For</span><span class=\"br0\">(</span><br/>      <span class=\"re0\">$j</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span>;<br/>      <span class=\"re0\">$j</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$Numbers</span>.Length;<br/>      <span class=\"re0\">$j</span><span class=\"sy0\">++</span><br/>      <span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>       <span class=\"re0\">$Result</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Numbers</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$Numbers</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>       <span class=\"re0\">$NewNumbers</span> <span class=\"sy0\">=</span> <span class=\"re0\">$NewNumbers</span> <span class=\"sy0\">+</span> <span class=\"re0\">$Result</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/>   Catch <span class=\"br0\">[</span>System.Management.Automation.RuntimeException<span class=\"br0\">]</span><br/>   <span class=\"br0\">{</span><br/>    <span class=\"kw1\">Write-Warning</span> <span class=\"st0\">\"Value was too large for a Decimal. Script aborted.\"</span><br/>    <span class=\"kw3\">Break</span>;<br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw3\">Foreach</span><span class=\"br0\">(</span><br/>          <span class=\"re0\">$Number</span> <span class=\"kw3\">in</span> <span class=\"re0\">$Numbers</span><br/>          <span class=\"br0\">)</span><br/>          <span class=\"br0\">{</span><br/>          <span class=\"kw3\">If</span><span class=\"br0\">(</span><br/>            <span class=\"re0\">$Number</span>.ToString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">-eq</span> <span class=\"st0\">\"+unendlich\"</span><br/>            <span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>             <span class=\"kw1\">Write-Warning</span> <span class=\"st0\">\"Value was too large for a Decimal. Script aborted.\"</span><br/>             Exit<br/>            <span class=\"br0\">}</span><br/>          <span class=\"br0\">}</span><br/>    <span class=\"kw1\">Write-Host</span> <span class=\"re0\">$Numbers</span><br/>    <span class=\"re0\">$Infinity</span><span class=\"sy0\">++</span><br/>   <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 37, "block": "<pre class=\"prolog highlighted_source\">pascal<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tpascal<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy5\">|</span>X<span class=\"br0\">]</span><span class=\"sy3\">-</span>X<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>my_format<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>pascal<span class=\"br0\">(</span>Max<span class=\"sy4\">,</span> Max<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> LC<span class=\"sy4\">,</span> LF<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"sy5\">!</span><span class=\"sy4\">,</span><br/>\tmake_new_line<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tappend_dl<span class=\"br0\">(</span>LC<span class=\"sy4\">,</span> <span class=\"br0\">[</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a><span class=\"sy5\">|</span>X<span class=\"br0\">]</span><span class=\"sy3\">-</span>X<span class=\"sy4\">,</span> LF<span class=\"sy3\">-</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>pascal<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Max<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> NC<span class=\"sy4\">,</span> LF<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tbuild_new_line<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tappend_dl<span class=\"br0\">(</span>NC<span class=\"sy4\">,</span> <span class=\"br0\">[</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a><span class=\"sy5\">|</span>X<span class=\"br0\">]</span><span class=\"sy3\">-</span>X<span class=\"sy4\">,</span> NC1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tN1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tpascal<span class=\"br0\">(</span>N1<span class=\"sy4\">,</span> Max<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">NL</span></a><span class=\"sy4\">,</span> NC1<span class=\"sy4\">,</span> LF<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>build_new_line<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> R<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tbuild<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> X<span class=\"sy3\">-</span>X<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>build<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> V<span class=\"sy4\">,</span> RC<span class=\"sy4\">,</span> RF<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tappend_dl<span class=\"br0\">(</span>RC<span class=\"sy4\">,</span> <span class=\"br0\">[</span>V<span class=\"sy5\">|</span>Y<span class=\"br0\">]</span><span class=\"sy3\">-</span>Y<span class=\"sy4\">,</span> RF<span class=\"sy3\">-</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>build<span class=\"br0\">(</span><span class=\"br0\">[</span>H<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> V<span class=\"sy4\">,</span> RC<span class=\"sy4\">,</span> R<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tV1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> V<span class=\"sy3\">+</span>H<span class=\"sy4\">,</span><br/>\tappend_dl<span class=\"br0\">(</span>RC<span class=\"sy4\">,</span> <span class=\"br0\">[</span>V1<span class=\"sy5\">|</span>Y<span class=\"br0\">]</span><span class=\"sy3\">-</span>Y<span class=\"sy4\">,</span> RC1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tbuild<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> H<span class=\"sy4\">,</span> RC1<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>append_dl<span class=\"br0\">(</span>X1<span class=\"sy3\">-</span>X2<span class=\"sy4\">,</span> X2<span class=\"sy3\">-</span>X3<span class=\"sy4\">,</span> X1<span class=\"sy3\">-</span>X3<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% to have a correct output\u00a0!</span><br/>my_format<span class=\"br0\">(</span><span class=\"br0\">[</span>H<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span>H<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>my_writef<span class=\"sy4\">,</span> T<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">.</span><br/>\u00a0<br/>my_writef<span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\twritef<span class=\"br0\">(</span><span class=\"st_h\">'\u00a0%5r'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>X<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 17, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> pascaltriangle<span class=\"br0\">(</span> n.i<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span>  <span class=\"nu0\">0</span> <span class=\"kw1\">To</span>  n<br/>       c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>       <span class=\"kw1\">For</span> k<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> i<br/>             <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span> c<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>         c <span class=\"sy0\">=</span> c <span class=\"sy0\">*</span> <span class=\"br0\">(</span>i<span class=\"sy0\">-</span>k<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>k<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"co1\">;</span><br/>        <span class=\"kw1\">Next</span> <span class=\"co1\">;k</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"co1\">; n\u00e4chste zeile</span><br/>  <span class=\"kw1\">Next</span> <span class=\"co1\">;i</span><br/>\u00a0<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>Parameter.i <span class=\"sy0\">=</span> <span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">ProgramParameter</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>pascaltriangle<span class=\"br0\">(</span>Parameter<span class=\"br0\">)</span><span class=\"co1\">;</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 9, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> pascal<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>   <span class=\"st0\">\"\"\"Prints out n rows of Pascal's triangle.<br/>   It returns False for failure and True for success.\"\"\"</span><br/>   row <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>   k <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>   <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">max</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>      <span class=\"kw1\">print</span> row<br/>      row<span class=\"sy0\">=</span><span class=\"br0\">[</span>l+r <span class=\"kw1\">for</span> l<span class=\"sy0\">,</span>r <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>row+k<span class=\"sy0\">,</span>k+row<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>   <span class=\"kw1\">return</span> n<span class=\"sy0\">&gt;=</span><span class=\"nu0\">1</span></pre>"}, {"lang": "q", "loc": 9, "block": "<pre class=\"q highlighted_source\">\u00a0<br/>pascal:<span class=\"br0\">{</span><span class=\"br0\">(</span>x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">+':</span>x<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">\\</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>pascal <span class=\"nu0\">5</span><br/><span class=\"nu0\">1</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">1</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">3</span> <span class=\"nu0\">1</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"nu0\">6</span> <span class=\"nu0\">4</span> <span class=\"nu0\">1</span><br/>\u00a0</pre>"}, {"lang": "Qi", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define iterate<br/>  _ _ 0 -&gt; []<br/>  F V N -&gt; [V|(iterate F (F V) (1- N))])<br/>\u00a0<br/>(define next-row<br/>  R -&gt; (MAPCAR + [0|R] (append R [0])))<br/>\u00a0<br/>(define pascal<br/>  N -&gt; (iterate next-row [1] N))<br/>\u00a0</pre>"}, {"lang": "R", "loc": 10, "block": "<pre class=\"text highlighted_source\">pascalTriangle &lt;- function(h) {<br/>  for(i in 0:(h-1)) {<br/>    s &lt;- \"\"<br/>    for(k in 0:(h-i)) s &lt;- paste(s, \"  \", sep=\"\")<br/>    for(j in 0:i) {<br/>      s &lt;- paste(s, sprintf(\"%3d \", choose(i, j)), sep=\"\")<br/>    }<br/>    print(s)<br/>  }<br/>}</pre>"}, {"lang": "Racket", "loc": 13, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define (pascal n)<br/>  (define (next-row current-row)<br/>    (map + (cons 0 current-row)<br/>           (append current-row '(0))))<br/>  (reverse<br/>   (for/fold ([triangle '((1))])<br/>             ([row (in-range 1 n)])<br/>     (cons (next-row (first triangle)) triangle))))<br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "RapidQ", "loc": 12, "block": "<pre class=\"text highlighted_source\">DEFINT values(100) = {0,1}<br/>\u00a0<br/>INPUT \"Number of rows: \"; nrows<br/>PRINT SPACE$((nrows)*3);\"  1\"<br/>FOR row = 2 TO nrows<br/>    PRINT SPACE$((nrows-row)*3+1);<br/>    FOR i = row TO 1 STEP -1<br/>        values(i) = values(i) + values(i-1)<br/>        PRINT FORMAT$(\"%5d \", values(i));<br/>    NEXT i<br/>    PRINT<br/>NEXT row</pre>"}, {"lang": "Retro", "loc": 6, "block": "<pre class=\"text highlighted_source\">2 elements i j<br/>: pascalTriangle<br/>  cr dup<br/>  [ dup\u00a0!j 1 swap 1+ [\u00a0!i dup putn space @j @i - * @i 1+ / ] iter cr drop ] iter drop<br/>;<br/>13 pascalTriangle</pre>"}, {"lang": "REXX", "loc": 25, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program displays (or writes to a file)   Pascal's triangle  (centered/formatted).*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">3000</span>                              <span class=\"coMULTI\">/*be able to handle gihugeic triangles.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> nn <span class=\"sy0\">.</span>                                   <span class=\"coMULTI\">/*obtain the optional argument from CL.*/</span><br/><span class=\"kw1\">if</span> nn==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> nn==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> nn=<span class=\"nu0\">10</span>                  <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>N=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>nn<span class=\"br0\">)</span>                                        <span class=\"coMULTI\">/*N  is the number of rows in triangle.*/</span><br/>w=<span class=\"kw6\">length</span><span class=\"br0\">(</span>\u00a0!<span class=\"br0\">(</span>N-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span>\u00a0!<span class=\"br0\">(</span>N%2<span class=\"br0\">)</span> <span class=\"sy0\">/</span>\u00a0!<span class=\"br0\">(</span>N-<span class=\"nu0\">1</span>-N%2<span class=\"br0\">)</span> <span class=\"br0\">)</span>         <span class=\"coMULTI\">/*W:  the width of the biggest integer.*/</span><br/>@<span class=\"sy0\">.</span>=<span class=\"nu0\">1</span>;    $<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"625f22\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>;   unity=<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, w<span class=\"br0\">)</span>              <span class=\"coMULTI\">/*defaults rows &amp; lines; aligned unity.*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  build rows of Pascals' triangle*/</span><br/>  <span class=\"kw1\">do</span>   r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;           rm=r-<span class=\"nu0\">1</span>              <span class=\"coMULTI\">/*Note:  the first column is always  1.*/</span><br/>    <span class=\"kw1\">do</span> c=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> rm;           cm=c-<span class=\"nu0\">1</span>              <span class=\"coMULTI\">/*build the rest of the columns in row.*/</span><br/>    @<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c= @<span class=\"sy0\">.</span>rm<span class=\"sy0\">.</span>cm + @<span class=\"sy0\">.</span>rm<span class=\"sy0\">.</span>c                      <span class=\"coMULTI\">/*assign value to a specific row &amp; col.*/</span><br/>    $<span class=\"sy0\">.</span>r  = $<span class=\"sy0\">.</span>r     <span class=\"kw6\">right</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>r<span class=\"sy0\">.</span>c, w<span class=\"br0\">)</span>               <span class=\"coMULTI\">/*and construct a line for output (row)*/</span><br/>    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span>                                  <span class=\"coMULTI\">/* [\u2191]    C  is the column being built.*/</span><br/>  <span class=\"kw1\">if</span> r<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> $<span class=\"sy0\">.</span>r=$<span class=\"sy0\">.</span>r  unity                  <span class=\"coMULTI\">/*for  rows\u22652,  append a trailing  \"1\".*/</span><br/>  <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*r*/</span>                                  <span class=\"coMULTI\">/* [\u2191]    R  is the  row   being built.*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  WIDTH: for nicely looking line.*/</span><br/>width=<span class=\"kw6\">length</span><span class=\"br0\">(</span>$<span class=\"sy0\">.</span>N<span class=\"br0\">)</span>                                <span class=\"coMULTI\">/*width of the last (output) line (row)*/</span><br/>                                                 <span class=\"coMULTI\">/*if NN&lt;0, output is written to a file.*/</span><br/>      <span class=\"kw1\">do</span> r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N;     $$=<span class=\"kw6\">center</span><span class=\"br0\">(</span>$<span class=\"sy0\">.</span>r, width<span class=\"br0\">)</span>   <span class=\"coMULTI\">/*center this particular Pascals' row. */</span><br/>      <span class=\"kw1\">if</span> nn<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span>                       $$ <span class=\"coMULTI\">/*SAY    if   NN    is positive,  else */</span><br/>               <span class=\"kw3\">else</span> <span class=\"kw1\">call</span> <span class=\"kw6\">lineout</span> <span class=\"st0\">'PASCALS.'</span>n, $$ <span class=\"coMULTI\">/*write this Pascal's row \u2500\u2500\u2500\u25ba  a file.*/</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*r*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>!: <span class=\"kw1\">procedure</span>;\u00a0!=<span class=\"nu0\">1</span>;  <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;\u00a0!=!<span class=\"sy0\">*</span>j; <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*j*/</span>;  <span class=\"kw1\">return</span>\u00a0!   <span class=\"coMULTI\">/*compute factorial*/</span></pre>"}, {"lang": "Ring", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>row = 5<br/>for i = 0 to row - 1<br/>    col = 1<br/>    see left(\"     \",row-i)<br/>    for k = 0 to i<br/>        see \"\" + col + \" \"<br/>        col = col*(i-k)/(k+1)<br/>    next<br/>    see nl<br/>next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 10, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> pascal<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw3\">raise</span> <span class=\"kw4\">ArgumentError</span>, <span class=\"st0\">\"must be positive.\"</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">yield</span> ar = <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">times</span> <span class=\"kw1\">do</span><br/>    ar.<span class=\"me1\">unshift</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"co1\"># tack a zero on both ends</span><br/>    <span class=\"kw1\">yield</span> ar = ar.<span class=\"me1\">each_cons</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:sum<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>pascal<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>row<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> row.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>.<span class=\"me1\">center</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">}</span></pre>"}, {"lang": "Run BASIC", "loc": 10, "block": "<pre class=\"text highlighted_source\">input \"number of rows? \";r<br/>for i = 0 to r - 1<br/>  c = 1<br/>  print left$(\"                          \",(r*2)-(i*2));<br/>  for k = 0 to i<br/>    print using(\"####\",c);<br/>    c = c*(i-k)/(k+1)<br/>  next<br/>  print<br/>next</pre>"}, {"lang": "Rust", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fn pascal_triangle(n: u64)<br/>{<br/>\u00a0<br/>  for i in 0..n {<br/>    let mut c = 1;<br/>    for _j in 1..2*(n-1-i)+1 {<br/>      print!(\" \");<br/>    }<br/>    for k in 0..i+1 {<br/>      print!(\"{:2} \", c);<br/>      c = c * (i-k)/(k+1);<br/>    }<br/>    println!();<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 6, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> tri<span class=\"br0\">(</span>row<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <br/>    row <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> List<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> n<span class=\"sy0\">:</span> Int <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span> +<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tri<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span> zip tri<span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">tail</span><span class=\"br0\">)</span> map <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a + b <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span>+ <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 10, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>row row<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"nu0\">0</span> row<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">append</span> row '<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>triangle row rows<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> rows <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      '<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cons</span> row <span class=\"br0\">(</span>triangle <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>row row<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> rows <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>triangle <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 22, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: numRows is 0;<br/>    var array integer: values is [] (0, 1);<br/>    var integer: row is 0;<br/>    var integer: index is 0;<br/>  begin<br/>    write(\"Number of rows: \");<br/>    readln(numRows);<br/>    writeln(\"1\" lpad succ(numRows) * 3);<br/>    for row range 2 to numRows do<br/>      write(\"\" lpad (numRows - row) * 3);<br/>      values &amp;:= [] 0;<br/>      for index range succ(row) downto 2 do<br/>        values[index] +:= values[pred(index)];<br/>        write(\" \" &lt;&amp; values[index] lpad 5);<br/>      end for;<br/>      writeln;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 9, "block": "<pre class=\"ruby highlighted_source\">func pascal<span class=\"br0\">(</span>rows<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var row = <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">{</span> <span class=\"sy0\">|</span> n<span class=\"sy0\">|</span><br/>        say row.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>        row = <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> row<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> row<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> .. <span class=\"me1\">n</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>..., <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span>..<span class=\"me1\">rows</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>pascal<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span></pre>"}, {"lang": "Stata", "loc": 26, "block": "<pre class=\"text highlighted_source\">function pascal1(n) {<br/>\treturn(comb(J(1,n,0::n-1),J(n,1,0..n-1)))<br/>}<br/>\u00a0<br/>function pascal2(n) {<br/>\ta = I(n)<br/>\ta[.,1] = J(n,1,1)<br/>\tfor (i=3; i&lt;=n; i++) {<br/>\t\ta[i,2..i-1] = a[i-1,2..i-1]+a[i-1,1..i-2]<br/>\t}<br/>\treturn(a)<br/>}<br/>\u00a0<br/>function pascal3(n) {<br/>\ta = J(n,n,0)<br/>\tfor (i=1; i&lt;n; i++) {<br/>\t\ta[i+1,i] = i<br/>\t}<br/>\ts = p = I(n)<br/>\tk = 1<br/>\tfor (i=0; i&lt;n; i++) {<br/>\t\tp = p*a/k++<br/>\t\ts = s+p<br/>\t}<br/>\treturn(s)<br/>}</pre>"}, {"lang": "Swift", "loc": 23, "block": "<pre class=\"text highlighted_source\">func pascal(n:Int)-&gt;[Int]{<br/>    if n==1{<br/>        let a=[1]<br/>        print(a)<br/>        return a<br/>    }<br/>    else{<br/>        var a=pascal(n:n-1)<br/>        var temp=a<br/>        for i in 0..&lt;a.count{<br/>            if i+1==a.count{<br/>                temp.append(1)<br/>                break<br/>            }<br/>            temp[i+1] = a[i]+a[i+1]<br/>        }<br/>        a=temp<br/>        print(a)<br/>        return a<br/>    }<br/>}<br/>let waste = pascal(n:10)<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 18, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> pascal_iterative n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">error</span> <span class=\"st0\">\"undefined behaviour for n &lt; 1\"</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> row <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">lappend</span> rows <span class=\"re0\">$row</span>    <br/>    <span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> prev <span class=\"re0\">$row</span><br/>        <span class=\"kw1\">set</span> row <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$prev</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">lappend</span> row <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$prev</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> - <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span> + <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$prev</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">lappend</span> row <span class=\"nu0\">1</span><br/>        <span class=\"kw2\">lappend</span> rows <span class=\"re0\">$row</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$rows</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"br0\">[</span>pascal_iterative <span class=\"nu0\">6</span><span class=\"br0\">]</span> \\n<span class=\"br0\">]</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">PROGRAM:PASCALTR<br/>:Lbl IN<br/>:ClrHome<br/>:Disp \"NUMBER OF ROWS\"<br/>:Input N<br/>:If N &lt; 1:Goto IN<br/>:{N,N}\u2192dim([A])<br/>:\"CHEATING TO MAKE IT FASTER\"<br/>:For(I,1,N)<br/>:1\u2192[A](1,1)<br/>:End<br/>:For(I,2,N)<br/>:For(J,2,I)<br/>:[A](I-1,J-1)+[A](I-1,J)\u2192[A](I,J)<br/>:End<br/>:End<br/>:[A]</pre>"}, {"lang": "Turing", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>procedure pascal (n\u00a0: int)<br/>    for i\u00a0: 0 .. n<br/>        var c\u00a0: int<br/>        c\u00a0:= 1<br/>        for k\u00a0: 0 .. i<br/>            put intstr(c) + \" \" ..<br/>            c\u00a0:= c * (i - k) div (k + 1)<br/>        end for<br/>        put \"\"<br/>    end for<br/>end pascal<br/>\u00a0<br/>pascal(5)</pre>"}, {"lang": "uBasic/4tH", "loc": 14, "block": "<pre class=\"text highlighted_source\">Input \"Number Of Rows: \"; N<br/>@(1) = 1<br/>Print Tab((N+1)*3);\"1\"<br/>\u00a0<br/>For R = 2 To N<br/>    Print Tab((N-R)*3+1);<br/>    For I = R To 1 Step -1<br/>        @(I) = @(I) + @(I-1)<br/>        Print Using \"______\";@(i);<br/>    Next<br/>Next<br/>\u00a0<br/>Print<br/>End</pre>"}, {"lang": "UNIX Shell", "loc": 18, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\">#! /bin/bash</span><br/>pascal<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">local</span> <span class=\"re5\">-i</span> <span class=\"re2\">n</span>=<span class=\"co1\">${1:-1}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> n <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">then</span><br/>        <span class=\"kw3\">echo</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw3\">local</span> <span class=\"re2\">output</span>=$<span class=\"br0\">(</span> <span class=\"re1\">$FUNCNAME</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">set</span> <span class=\"re5\">--</span> $<span class=\"br0\">(</span> <span class=\"kw2\">tail</span> <span class=\"re5\">-n</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;&lt;</span><span class=\"st0\">\"<span class=\"es2\">$output</span>\"</span> <span class=\"br0\">)</span>   <span class=\"co0\"># previous row</span><br/>        <span class=\"kw3\">echo</span> <span class=\"st0\">\"<span class=\"es2\">$output</span>\"</span><br/>        <span class=\"kw3\">printf</span> <span class=\"st0\">\"1 \"</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"re5\">-n</span> <span class=\"re4\">$1</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>; <span class=\"kw1\">do</span><br/>            <span class=\"kw3\">printf</span> <span class=\"st0\">\"%d \"</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"re4\">$1</span> + <span class=\"co1\">${2:-0}</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">shift</span><br/>        <span class=\"kw1\">done</span><br/>        <span class=\"kw3\">echo</span><br/>    <span class=\"kw1\">fi</span><br/><span class=\"br0\">}</span><br/>pascal <span class=\"st0\">\"$1\"</span></pre>"}, {"lang": "Ursala", "loc": 4, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>\u00a0<br/>pascal = choose**ziDS+ iota*t+ iota+ successor</pre>"}, {"lang": "VBScript", "loc": 14, "block": "<pre class=\"vb highlighted_source\">Pascal_Triangle(WScript.Arguments(0))<br/><span class=\"kw2\">Function</span> Pascal_Triangle(n)<br/>\t<span class=\"kw4\">Dim</span> values(100)<br/>\tvalues(1) = 1<br/>\tWScript.StdOut.Write values(1)<br/>\tWScript.StdOut.WriteLine<br/>\t<span class=\"kw3\">For</span> row = 2 <span class=\"kw3\">To</span> n<br/>\t\t<span class=\"kw3\">For</span> i = row <span class=\"kw3\">To</span> 1 <span class=\"kw3\">Step</span> -1<br/>\t\t\tvalues(i) = values(i) + values(i-1)<br/>\t\t\tWScript.StdOut.Write values(i) &amp; <span class=\"st0\">\" \"</span><br/>\t\t<span class=\"kw3\">Next</span><br/>\t\tWScript.StdOut.WriteLine<br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "Vedit macro language", "loc": 13, "block": "<pre class=\"vedit highlighted_source\">#<span class=\"nu0\">100</span> <span class=\"sy0\">=</span> Get_Num<span class=\"br0\">(</span><span class=\"st0\">\"Number of rows: \"</span><span class=\"sy0\">,</span> STATLINE<span class=\"br0\">)</span><br/>#<span class=\"nu0\">0</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> #<span class=\"nu0\">1</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>Ins_Char<span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"sy0\">,</span> COUNT<span class=\"sy0\">,</span> #<span class=\"nu0\">100</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> Num_Ins<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">99</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> #<span class=\"nu0\">99</span> <span class=\"sy0\">&lt;=</span> #<span class=\"nu0\">100</span><span class=\"sy0\">;</span> #<span class=\"nu0\">99</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Ins_Char<span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"sy0\">,</span> COUNT<span class=\"sy0\">,</span> <span class=\"br0\">(</span>#<span class=\"nu0\">100</span><span class=\"sy0\">-</span>#<span class=\"nu0\">99</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    #@99 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">98</span> <span class=\"sy0\">=</span> #<span class=\"nu0\">99</span><span class=\"sy0\">;</span> #<span class=\"nu0\">98</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> #<span class=\"nu0\">98</span><span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t#<span class=\"nu0\">97</span> <span class=\"sy0\">=</span> #<span class=\"nu0\">98</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t#@98 <span class=\"sy0\">+=</span> #@97<br/>\tNum_Ins<span class=\"br0\">(</span>#@98<span class=\"sy0\">,</span> COUNT<span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    Ins_Newline<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Visual Basic", "loc": 18, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Sub</span> pascaltriangle()<br/>    <span class=\"co1\">'Pascal's triangle<br/></span>    Const m = 11<br/>    <span class=\"kw4\">Dim</span> t(40) <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, u(40) <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>    <span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, n <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, s <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, ss <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>    ss = <span class=\"st0\">\"\"</span><br/>    <span class=\"kw3\">For</span> n = 1 <span class=\"kw3\">To</span> m<br/>        u(1) = 1<br/>        s = <span class=\"st0\">\"\"</span><br/>        <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> n<br/>            u(i + 1) = t(i) + t(i + 1)<br/>            s = s &amp; u(i) &amp; <span class=\"st0\">\" \"</span><br/>            t(i) = u(i)<br/>        <span class=\"kw3\">Next</span> i<br/>        ss = ss &amp; s &amp; vbCrLf<br/>    <span class=\"kw3\">Next</span> n<br/>    MsgBox ss, , <span class=\"st0\">\"Pascal's triangle\"</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span> 'pascaltriangle</pre>"}, {"lang": "XPL0", "loc": 22, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>\u00a0<br/>proc Pascal(N);         \\Display the first N rows of Pascal's triangle<br/>int  N;                 \\if N&lt;=0 then nothing is displayed<br/>int  Row, I, Old(40), New(40);<br/>[for Row:= 0 to N-1 do<br/>        [New(0):= 1;<br/>        for I:= 1 to Row do New(I):= Old(I-1) + Old(I);<br/>        for I:= 1 to (N-Row-1)*2 do ChOut(0, ^ );<br/>        for I:= 0 to Row do<br/>                [if New(I)&lt;100 then ChOut(0, ^ );<br/>                IntOut(0, New(I));<br/>                if New(I)&lt;10 then ChOut(0, ^ );<br/>                ChOut(0, ^ );<br/>                ];<br/>        New(Row+1):= 0;<br/>        I:= Old;  Old:= New;  New:= I;<br/>        CrLf(0);<br/>        ];<br/>];<br/>\u00a0<br/>Pascal(13)</pre>"}, {"lang": "zkl", "loc": 13, "block": "<pre class=\"text highlighted_source\">fcn pascalTriangle(n){ // n&lt;=0--&gt;\"\"<br/>   foreach i in (n){<br/>      c\u00a0:= 1;<br/>      print(\" \"*(2*(n-1-i)));<br/>      foreach k in (i+1){<br/>         print(\"%3d \".fmt(c));<br/>         c = c * (i-k)/(k+1);<br/>      }<br/>      println();<br/>   }<br/>}<br/>\u00a0<br/>pascalTriangle(8);</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 24, "block": "<pre class=\"text highlighted_source\"> 10 INPUT \"How many rows? \";n<br/> 15 IF n&lt;1 THEN GO TO 210<br/> 20 DIM c(n)<br/> 25 DIM d(n)<br/> 30 LET c(1)=1<br/> 35 LET d(1)=1<br/> 40 FOR r=1 TO n<br/> 50 FOR i=1 TO (n-r)<br/> 60 PRINT \" \";<br/> 70 NEXT i<br/> 80 FOR i=1 TO r<br/> 90 PRINT c(i);\" \";<br/>100 NEXT i<br/>110 PRINT<br/>120 IF r&gt;=n THEN GO TO 140<br/>130 LET d(r+1)=1<br/>140 FOR i=2 TO r<br/>150 LET d(i)=c(i-1)+c(i)<br/>160 NEXT i <br/>165 IF r&gt;=n THEN GO TO 200<br/>170 FOR i=1 TO r+1<br/>180 LET c(i)=d(i)<br/>190 NEXT i<br/>200 NEXT r</pre>"}]}