{"task": "Enforced_immutability", "blocks": [{"lang": "8th", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>123 const var, one-two-three<br/>\u00a0</pre>"}, {"lang": "ACL2", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defconst *pi-approx* <span class=\"nu0\">22</span>/<span class=\"nu0\">7</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ada", "loc": 2, "block": "<pre class=\"ada highlighted_source\">Foo\u00a0: <span class=\"kw3\">constant</span>\u00a0:= <span class=\"nu0\">42</span>;<br/>Foo\u00a0: <span class=\"kw3\">constant</span> Blahtype\u00a0:= Blahvalue;</pre>"}, {"lang": "ALGOL 68", "loc": 4, "block": "<pre class=\"text highlighted_source\">INT max allowed = 20;<br/>REAL pi = 3.1415 9265;    # pi is constant that the compiler will enforce     #<br/>REF REAL var = LOC REAL;  # var is a constant pointer to a local REAL address #<br/>var\u00a0:= pi # constant pointer var has the REAL value referenced assigned pi    #</pre>"}, {"lang": "AutoHotkey", "loc": 23, "block": "<pre class=\"autohotkey highlighted_source\">MyData <span class=\"sy0\">:=</span> new FinalBox<span class=\"br0\">(</span><span class=\"st0\">\"Immutable data\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"MyData.Data = \"</span> MyData<span class=\"sy0\">.</span>Data<br/>MyData<span class=\"sy0\">.</span>Data <span class=\"sy0\">:=</span> <span class=\"st0\">\"This will fail to set\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"MyData.Data = \"</span> MyData<span class=\"sy0\">.</span>Data<br/>\u00a0<br/>Class FinalBox <span class=\"br0\">{</span><br/>   __New<span class=\"br0\">(</span>FinalValue<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      ObjInsert<span class=\"br0\">(</span>this<span class=\"sy0\">,</span> <span class=\"st0\">\"proxy\"</span><span class=\"sy0\">,</span><span class=\"br0\">{</span>Data:FinalValue<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">}</span><br/><span class=\"co1\">; override the built-in methods:</span><br/>   __Get<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span><span class=\"sy0\">,</span> this<span class=\"br0\">[</span><span class=\"st0\">\"proxy\"</span><span class=\"sy0\">,</span>k<span class=\"br0\">]</span><br/>   <span class=\"br0\">}</span><br/>   __Set<span class=\"br0\">(</span>p<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw6\">Insert</span><span class=\"br0\">(</span>p<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span><br/>   <span class=\"br0\">}</span><br/>   Remove<span class=\"br0\">(</span>p<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 1, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckconst.shtml\"><span class=\"kw3\">CONST</span></a> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span></pre>"}, {"lang": "BBC BASIC", "loc": 3, "block": "<pre class=\"text highlighted_source\">      DEF FNconst = 2.71828182845905<br/>      PRINT FNconst<br/>      FNconst = 1.234\u00a0: REM Reports 'Syntax error'</pre>"}, {"lang": "Bracmat", "loc": 4, "block": "<pre class=\"text highlighted_source\">myVar=immutable (m=mutable) immutable;<br/>changed:?(myVar.m);<br/>lst$myVar<br/>\u00a0</pre>"}, {"lang": "C", "loc": 3, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#define PI      3.14159265358979323</span><br/><span class=\"co2\">#define MINSIZE 10</span><br/><span class=\"co2\">#define MAXSIZE 100</span></pre>"}, {"lang": "C++", "loc": 22, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> MyOtherClass<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> m_x<span class=\"sy4\">;</span><br/>  MyOtherClass<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> initX <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> m_x<span class=\"br0\">(</span>initX<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  MyOtherClass mocA, mocB<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> mocA.<span class=\"me1\">m_x</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span> <span class=\"co1\">// displays 0, the default value given for MyOtherClass's constructor.</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> mocB.<span class=\"me1\">m_x</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span> <span class=\"co1\">// displays 7, the value we provided for the constructor for mocB.</span><br/>\u00a0<br/>  <span class=\"co1\">// Uncomment this, and the compile will fail; m_x is a const member.</span><br/>  <span class=\"co1\">// mocB.m_x = 99;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 6, "block": "<pre class=\"clojure highlighted_source\">user<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">def</span> d <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\">; immutable vector</span><br/>#'user<span class=\"sy0\">/</span>d<br/>user<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">assoc</span> d <span class=\"nu0\">3</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">7</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>user<span class=\"sy0\">&gt;</span> d<br/><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span></pre>"}, {"lang": "COBOL", "loc": 4, "block": "<pre class=\"cobol highlighted_source\">ENVIRONMENT <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">CONFIGURATION</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">SPECIAL-NAMES</span><span class=\"sy0\">.</span><br/>    <span class=\"kw3\">SYMBOLIC</span> <span class=\"kw3\">CHARACTERS</span> NUL <span class=\"kw3\">IS</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> TAB <span class=\"kw3\">IS</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span></pre>"}, {"lang": "D", "loc": 67, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">random</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// enum allows to define manifest (compile-time) constants:</span><br/><span class=\"kw4\">int</span> sqr<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> x <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw4\">enum</span> <span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">enum</span> y <span class=\"sy0\">=</span> sqr<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Forces Compile-Time Function Evaluation (CTFE).</span><br/>\u00a0<br/><span class=\"co1\">// enums are compile-time constants:</span><br/><span class=\"kw4\">enum</span> MyEnum <span class=\"br0\">{</span> A<span class=\"sy0\">,</span> B<span class=\"sy0\">,</span> C <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">// immutable defines values that can't change:</span><br/><span class=\"kw4\">immutable</span> <span class=\"kw4\">double</span> pi <span class=\"sy0\">=</span> <span class=\"nu16\">3.1415</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">// A module-level immutable storage class variable that's not</span><br/><span class=\"co1\">// explicitly initialized can be initialized by its constructor,</span><br/><span class=\"co1\">// otherwise its value is the default initializer during its life-time.</span><br/>\u00a0<br/><span class=\"kw4\">immutable</span> <span class=\"kw4\">int</span> z<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    z <span class=\"sy0\">=</span> uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Run-time initialization.</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Test1 <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">int</span> w<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        w <span class=\"sy0\">=</span> uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Run-time initialization.</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">// The items array can't be immutable here.</span><br/><span class=\"co1\">// \"in\" is short for \"const scope\":</span><br/><span class=\"kw4\">void</span> foo<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw2\">scope</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> items<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// items is constant here.</span><br/>    <span class=\"co1\">// items[0] = 100; // Cannot modify const expression.</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">struct</span> Test2 <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> x_<span class=\"sy0\">;</span> <span class=\"co1\">// Mutable.</span><br/>    <span class=\"kw4\">@property</span> <span class=\"kw4\">int</span> x<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"kw2\">this</span>.<span class=\"me1\">x_</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Unlike C++, D const and immutable are transitive.</span><br/><span class=\"co1\">// And there is also \"inout\". See D docs.</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> data <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">30</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    foo<span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    data<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span> <span class=\"co1\">// But data is mutable here.</span><br/>\u00a0<br/>    <span class=\"co1\">// Currently manifest constants like arrays and associative arrays</span><br/>    <span class=\"co1\">// are copied in-place every time they are used:</span><br/>    <span class=\"kw4\">enum</span> array <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    foo<span class=\"br0\">(</span>array<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> t <span class=\"sy0\">=</span> Test2<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> x2 <span class=\"sy0\">=</span> t.<span class=\"me1\">x</span><span class=\"sy0\">;</span> <span class=\"co1\">// Reading x is allowed.</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>x2 <span class=\"sy0\">==</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Not allowed, the setter property is missing:</span><br/>    <span class=\"co1\">// t.x = 10; // Error: not a property t.x</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 3, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">const</span><br/>  STR1 <span class=\"sy3\">=</span> <span class=\"st0\">'abc'</span><span class=\"sy1\">;</span>         <span class=\"co1\">// regular constant</span><br/>  STR2<span class=\"sy1\">:</span> <span class=\"kw4\">string</span> <span class=\"sy3\">=</span> <span class=\"st0\">'def'</span><span class=\"sy1\">;</span> <span class=\"co1\">// typed constant</span></pre>"}, {"lang": "E", "loc": 3, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> x <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>x <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span>  <span class=\"co1\"># this is an error</span></pre>"}, {"lang": "Ela", "loc": 2, "block": "<pre class=\"text highlighted_source\">open unsafe.cell<br/>r = ref 0</pre>"}, {"lang": "Elixir", "loc": 1, "block": "<pre>iex(1)&gt; x = 10          # bind\n10\niex(2)&gt; 10 = x          # Pattern matching\n10\niex(3)&gt; x = 20          # rebound\n20\niex(4)&gt; ^x = 10         # pin operator ^\n** (MatchError) no match of right hand side value: 10\n</pre>"}, {"lang": "Erlang", "loc": 2, "block": "<pre class=\"erlang highlighted_source\"><span class=\"re5\">X</span> <span class=\"sy3\">=</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span><br/><span class=\"re5\">X</span> <span class=\"sy3\">=</span> <span class=\"nu0\">20</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Euphoria", "loc": 3, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">constant</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">constant</span> s <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"sy2\">,</span><span class=\"nu0\">3</span><span class=\"br0\">}</span><br/><span class=\"kw1\">constant</span> str <span class=\"sy1\">=</span> <span class=\"st0\">\"immutable string\"</span></pre>"}, {"lang": "Fortran", "loc": 1, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw3\">real</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">pi</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3.141593</span></pre>"}, {"lang": "F#", "loc": 1, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> hello <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello!\"</span></pre>"}, {"lang": "Factor", "loc": 2, "block": "<pre class=\"text highlighted_source\">TUPLE: range<br/>    { from read-only } { length read-only } { step read-only }\u00a0;</pre>"}, {"lang": "Go", "loc": 6, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    s <span class=\"sy2\">:=</span> <span class=\"st0\">\"immutable\"</span><br/>    s<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'a'</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 2, "block": "<pre class=\"haskell highlighted_source\"><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi\"><span class=\"kw3\">pi</span></a>  <span class=\"sy0\">=</span> <span class=\"nu0\">3.14159</span><br/>msg <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World\"</span></pre>"}, {"lang": "Icon and Unicon", "loc": 1, "block": "<pre class=\"icon highlighted_source\"><span class=\"sy2\">$</span><span class=\"kw6\">define</span> <span class=\"st0\">\"1234\"</span></pre>"}, {"lang": "J", "loc": 6, "block": "<pre class=\"j highlighted_source\">  B=: A=: <span class=\"st_h\">'this is a test'</span><br/>  A=: <span class=\"st_h\">'*'</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span>} A<br/>   A<br/>th** *s*a test<br/>   B<br/>this is a test</pre>"}, {"lang": "Java", "loc": 4, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">final</span> <span class=\"kw4\">int</span> immutableInt <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> mutableInt <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>mutableInt <span class=\"sy0\">=</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span> <span class=\"co1\">//this is fine</span><br/>immutableInt <span class=\"sy0\">=</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span> <span class=\"co1\">//this is an error</span></pre>"}, {"lang": "JavaScript", "loc": 2, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">const</span> pi <span class=\"sy0\">=</span> <span class=\"nu0\">3.1415</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">const</span> msg <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 2, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>[\"a\", \"b\"] as $a | $a[0] = 1 as $b | $a</pre>"}, {"lang": "Julia", "loc": 2, "block": "<pre class=\"text highlighted_source\">const x = 1<br/>x = \u03c0 # ERROR: invalid ridefinition of constant x</pre>"}, {"lang": "Kotlin", "loc": 27, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.0</span><br/>\u00a0<br/><span class=\"co1\">//  constant top level property</span><br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> N <span class=\"sy0\">=</span> <span class=\"nu0\">5</span>  <br/>\u00a0<br/><span class=\"co1\">//  read-only top level property</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> letters <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">'A'</span>, <span class=\"st0\">'B'</span>, <span class=\"st0\">'C'</span>, <span class=\"st0\">'D'</span>, <span class=\"st0\">'E'</span><span class=\"br0\">)</span> <span class=\"co1\">// 'listOf' creates here a List&lt;Char) which is immutable</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> MyClass <span class=\"br0\">{</span>  <span class=\"co1\">// MyClass is effectively immutable because it's only property is read-only</span><br/>                 <span class=\"co1\">// and it is not 'open' so cannot be sub-classed</span><br/>    <span class=\"co1\">// read-only class property</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> myInt <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>\u00a0<br/>    fun myFunc<span class=\"br0\">(</span>p<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span>  <span class=\"co1\">// parameter 'p' is read-only</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> pp <span class=\"sy0\">=</span> p        <span class=\"co1\">// local variable 'pp' is mutable</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>pp <span class=\"sy0\">&lt;</span> N<span class=\"br0\">)</span> <span class=\"br0\">{</span>  <span class=\"co1\">// compiler will change 'N' to 5</span><br/>            print<span class=\"br0\">(</span>letters<span class=\"br0\">[</span>pp++<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> mc <span class=\"sy0\">=</span> MyClass<span class=\"br0\">(</span><span class=\"br0\">)</span>   <span class=\"co1\">// 'mc' cannot be re-assigned a different object</span><br/>    println<span class=\"br0\">(</span>mc.<span class=\"me1\">myInt</span><span class=\"br0\">)</span><br/>    mc.<span class=\"me1\">myFunc</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Logtalk", "loc": 17, "block": "<pre class=\"logtalk highlighted_source\">\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(immutable).<br/>\u00a0<br/>    <span class=\"co1\">% forbid using (complementing) categories for adding to or</span><br/>    <span class=\"co1\">% modifying (aka hot patching) the object</span><br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">set_logtalk_flag</span>(complements, deny).<br/>    <span class=\"co1\">% forbid dynamically adding new predicates at runtime</span><br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">set_logtalk_flag</span>(dynamic_declarations, deny).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(foo<span class=\"sy1\">/</span><span class=\"nu0\">1</span>).<br/>    foo(<span class=\"nu0\">1</span>).       <span class=\"co1\">% static predicate by default</span><br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">private</span>(bar<span class=\"sy1\">/</span><span class=\"nu0\">2</span>)<br/>    bar(<span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>).    <span class=\"co1\">% static predicate by default</span><br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 5, "block": "<pre class=\"text highlighted_source\">Tau = 2*Pi;Protect[Tau]<br/>{\"Tau\"}<br/>\u00a0<br/>Tau = 2<br/>-&gt;Set::wrsym: Symbol Tau is Protected. </pre>"}, {"lang": "MBS", "loc": 1, "block": "<pre class=\"text highlighted_source\">CONSTANT INT foo=640;</pre>"}, {"lang": "Nemerle", "loc": 2, "block": "<pre class=\"text highlighted_source\">def foo = 42;              // immutable by default<br/>mutable bar = \"O'Malleys\"; // mutable because you asked it to be</pre>"}, {"lang": "Nim", "loc": 7, "block": "<pre class=\"text highlighted_source\">var x = \"mutablefoo\" # Mutable variable<br/>let y = \"immutablefoo\" # Immutable variable, at runtime<br/>const z = \"constantfoo\" # Immutable constant, at compile time<br/>\u00a0<br/>x[0] = 'M'<br/>y[0] = 'I' # Compile error: 'y[0]' cannot be assigned to<br/>z[0] = 'C' # Compile error: 'z[0]' cannot be assigned to</pre>"}, {"lang": "OCaml", "loc": 15, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">type</span> im_string<br/>\u00a0<br/><span class=\"kw1\">val</span> create <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">-&gt;</span> im_string<br/><span class=\"kw1\">val</span> make <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEchar\"><span class=\"kw4\">char</span></a> <span class=\"sy0\">-&gt;</span> im_string<br/><span class=\"kw1\">val</span> of_string <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a> <span class=\"sy0\">-&gt;</span> im_string<br/><span class=\"kw1\">val</span> to_string <span class=\"sy0\">:</span> im_string <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a><br/><span class=\"kw1\">val</span> copy <span class=\"sy0\">:</span> im_string <span class=\"sy0\">-&gt;</span> im_string<br/><span class=\"kw1\">val</span> sub <span class=\"sy0\">:</span> im_string <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">-&gt;</span> im_string<br/><span class=\"kw1\">val</span> length <span class=\"sy0\">:</span> im_string <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a><br/><span class=\"kw1\">val</span> get <span class=\"sy0\">:</span> im_string <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEchar\"><span class=\"kw4\">char</span></a><br/><span class=\"kw1\">val</span> iter <span class=\"sy0\">:</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEchar\"><span class=\"kw4\">char</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEunit\"><span class=\"kw4\">unit</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> im_string <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEunit\"><span class=\"kw4\">unit</span></a><br/><span class=\"kw1\">val</span> escaped <span class=\"sy0\">:</span> im_string <span class=\"sy0\">-&gt;</span> im_string<br/><span class=\"kw1\">val</span> index <span class=\"sy0\">:</span> im_string <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEchar\"><span class=\"kw4\">char</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a><br/><span class=\"kw1\">val</span> contains <span class=\"sy0\">:</span> im_string <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEchar\"><span class=\"kw4\">char</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool\"><span class=\"kw4\">bool</span></a><br/><span class=\"kw1\">val</span> print <span class=\"sy0\">:</span> im_string <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEunit\"><span class=\"kw4\">unit</span></a></pre>"}, {"lang": "Oforth", "loc": 12, "block": "<pre class=\"text highlighted_source\">Object Class new: MyClass(a, b)<br/>\u00a0<br/>MyClass method: setA(value)  value\u00a0:= a\u00a0;<br/>MyClass method: setB(value)  value\u00a0:= b\u00a0;<br/>\u00a0<br/>MyClass method: initialize(v, w)  self setA(v) self setB(w)\u00a0;<br/>\u00a0<br/>MyClass new(1, 2)                // OK\u00a0: An immutable object<br/>MyClass new(1, 2) setA(4)        // KO\u00a0: An immutable object can't be updated after initialization<br/>MyClass new(ListBuffer new, 12)  // KO\u00a0: Not an immutable value.<br/>ListBuffer new Constant new: T   // KO\u00a0: A constant cannot be mutable.<br/>Channel new send(ListBuffer new) // KO\u00a0: A mutable object can't be sent into a channel.</pre>"}, {"lang": "PARI/GP", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> constant PI <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3.14159</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> constant MSG <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"Hello World\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> constant PI <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3.14159</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> constant MSG <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"Hello World\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> constant PI <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3.14159</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> constant MSG <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"Hello World\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 4, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">constant</span> <span class=\"re0\">$pi</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3.14159</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">constant</span> <span class=\"re0\">$msg</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> <span class=\"re0\">@arr</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 3, "block": "<pre class=\"text highlighted_source\">constant n = 1<br/>constant s = {1,2,3}<br/>constant str = \"immutable string\"</pre>"}, {"lang": "PHP", "loc": 2, "block": "<pre class=\"php highlighted_source\"><a href=\"http://www.php.net/define\"><span class=\"kw3\">define</span></a><span class=\"br0\">(</span><span class=\"st0\">\"PI\"</span><span class=\"sy0\">,</span> <span class=\"nu19\">3.14159265358</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/define\"><span class=\"kw3\">define</span></a><span class=\"br0\">(</span><span class=\"st0\">\"MSG\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Hello World\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 5, "block": "<pre class=\"text highlighted_source\">: (de pi () 4)<br/>-&gt; pi<br/>\u00a0<br/>: (pi)<br/>-&gt; 4</pre>"}, {"lang": "PL/I", "loc": 6, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process source attributes xref<span class=\"sy0\">;</span><br/> constants<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> three <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"kw1\">Value</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Skip</span> <span class=\"kw1\">List</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span>three<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Skip</span> <span class=\"kw1\">List</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerBASIC", "loc": 2, "block": "<pre class=\"text highlighted_source\">$me = \"myname\"<br/>%age = 35</pre>"}, {"lang": "PureBasic", "loc": 3, "block": "<pre class=\"purebasic highlighted_source\">#i_Const1 <span class=\"sy0\">=</span> <span class=\"nu0\">11</span><br/>#i_Const2 <span class=\"sy0\">=</span> <span class=\"nu0\">3.1415</span><br/>#i_Const3 <span class=\"sy0\">=</span> <span class=\"st0\">\"A'm a string\"</span></pre>"}, {"lang": "Python", "loc": 7, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello\"</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"h\"</span><br/>\u00a0<br/>Traceback <span class=\"br0\">(</span>most recent call last<span class=\"br0\">)</span>:<br/>  File <span class=\"st0\">\"&lt;pyshell#1&gt;\"</span><span class=\"sy0\">,</span> line <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw1\">in</span> <span class=\"sy0\">&lt;</span>module<span class=\"sy0\">&gt;</span><br/>    s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"h\"</span><br/><span class=\"kw2\">TypeError</span>: <span class=\"st0\">'str'</span> <span class=\"kw2\">object</span> does <span class=\"kw1\">not</span> support item assignment</pre>"}, {"lang": "Racket", "loc": 1, "block": "<pre class=\"text highlighted_source\">(struct coordinate (x y))\u00a0; immutable struct</pre>"}, {"lang": "REXX", "loc": 37, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  emulates  immutable variables  (as a post-computational check).         */</span><br/><span class=\"kw1\">call</span> immutable <span class=\"st0\">'$=1'</span>                             <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2500 assigns an immutable variable. */</span><br/><span class=\"kw1\">call</span> immutable <span class=\"st0\">'   pi = 3.14159'</span>                 <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2500    \"     \"     \"         \"     */</span><br/><span class=\"kw1\">call</span> immutable <span class=\"st0\">'radius= 2*pi/4 '</span>                 <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2500    \"     \"     \"         \"     */</span><br/><span class=\"kw1\">call</span> immutable <span class=\"st0\">'     r=13/2    '</span>                 <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2500    \"     \"     \"         \"     */</span><br/><span class=\"kw1\">call</span> immutable <span class=\"st0\">'     d=0002 * r'</span>                 <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2500    \"     \"     \"         \"     */</span><br/><span class=\"kw1\">call</span> immutable <span class=\"st0\">' f.1  = 12**2  '</span>                 <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2500    \"     \"     \"         \"     */</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'       $ ='</span>  $                              <span class=\"coMULTI\">/*show the variable, just to be sure.  */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'      pi ='</span>  pi                             <span class=\"coMULTI\">/*  \"   \"      \"       \"   \"  \"   \"    */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'  radius ='</span>  radius                         <span class=\"coMULTI\">/*  \"   \"      \"       \"   \"  \"   \"    */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'       r ='</span>  r                              <span class=\"coMULTI\">/*  \"   \"      \"       \"   \"  \"   \"    */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'       d ='</span>  d                              <span class=\"coMULTI\">/*  \"   \"      \"       \"   \"  \"   \"    */</span><br/>\u00a0<br/>                    <span class=\"kw1\">do</span> radius=<span class=\"nu0\">10</span>  <span class=\"kw2\">to</span>  -<span class=\"nu0\">10</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span> <span class=\"coMULTI\">/*perform some faux important stuff.   */</span><br/>                    circum=$<span class=\"sy0\">*</span>pi<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>radius         <span class=\"coMULTI\">/*some kind of impressive calculation. */</span><br/>                    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                  <span class=\"coMULTI\">/* [\u2191]  that should do it, by gum.     */</span><br/><span class=\"kw1\">call</span> immutable                                   <span class=\"coMULTI\">/* \u25c4\u2550\u2550\u2550 see if immutable variables OK. */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>immutable: <span class=\"kw1\">if</span> <span class=\"kw6\">symbol</span><span class=\"br0\">(</span><span class=\"st0\">'immutable.0'</span><span class=\"br0\">)</span>==<span class=\"st0\">'LIT'</span>  <span class=\"kw3\">then</span> immutable<span class=\"sy0\">.</span>0= <span class=\"coMULTI\">/*1st time see immutable? */</span><br/>           <span class=\"kw1\">if</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"br0\">)</span>==<span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>                                <span class=\"coMULTI\">/* [\u2193]  chk all immutables*/</span><br/>                              <span class=\"kw1\">do</span> __=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>immutable<span class=\"sy0\">.</span>0<span class=\"br0\">)</span>; _=<span class=\"kw6\">word</span><span class=\"br0\">(</span>immutable<span class=\"sy0\">.</span>0,__<span class=\"br0\">)</span><br/>                              <span class=\"kw1\">if</span> <span class=\"kw2\">value</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span>==<span class=\"kw2\">value</span><span class=\"br0\">(</span><span class=\"st0\">'IMMUTABLE.!'</span>_<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>   <span class=\"coMULTI\">/*same?*/</span><br/>                              <span class=\"kw1\">call</span> ser -<span class=\"nu0\">12</span>, <span class=\"st0\">'immutable variable  '</span> _ <span class=\"st0\">\"  compromised.\"</span><br/>                              <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*__*/</span>                  <span class=\"coMULTI\">/* [\u2191]  Error?  ERRmsg, exit*/</span><br/>                            <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>                        <span class=\"coMULTI\">/*return and indicate  A-OK.*/</span><br/>                            <span class=\"kw3\">end</span>                             <span class=\"coMULTI\">/* [\u2193] immutable must have =*/</span><br/>           <span class=\"kw1\">if</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"st0\">'='</span>,<span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> ser -<span class=\"nu0\">4</span>, <span class=\"st0\">\"no equal sign in assignment:\"</span>  <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>           <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> _ <span class=\"st0\">'='</span> __;         <span class=\"kw2\">upper</span> _;    _=<span class=\"kw6\">space</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span>    <span class=\"coMULTI\">/*purify variable name.*/</span><br/>           <span class=\"kw1\">if</span> <span class=\"kw6\">symbol</span><span class=\"br0\">(</span><span class=\"st0\">\"_\"</span><span class=\"br0\">)</span>==<span class=\"st0\">'BAD'</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> ser -<span class=\"nu0\">8</span>,_ <span class=\"st0\">\"isn't a valid variable symbol.\"</span><br/>           immutable<span class=\"sy0\">.</span>0=immutable<span class=\"sy0\">.</span>0 _                        <span class=\"coMULTI\">/*add immutable var to list.*/</span><br/>           <span class=\"kw1\">interpret</span> <span class=\"st0\">'__='</span>__;     <span class=\"kw1\">call</span> <span class=\"kw2\">value</span> _,__           <span class=\"coMULTI\">/*assign value to a variable*/</span><br/>           <span class=\"kw1\">call</span> <span class=\"kw2\">value</span> <span class=\"st0\">'IMMUTABLE.!'</span>_,__                     <span class=\"coMULTI\">/*assign value to bkup var. */</span><br/>           <span class=\"kw1\">return</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>immutable<span class=\"sy0\">.</span>0<span class=\"br0\">)</span>                        <span class=\"coMULTI\">/*return number immutables. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>ser:       <span class=\"kw1\">say</span>;     <span class=\"kw1\">say</span> <span class=\"st0\">'***error***'</span>  <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;     <span class=\"kw1\">say</span>;     <span class=\"kw1\">exit</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>     <span class=\"coMULTI\">/*error msg.*/</span></pre>"}, {"lang": "Ring", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Enforced immutability<br/>\u00a0<br/>x = 10<br/>assert( x = 10) <br/>assert( x = 100 )<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 21, "block": "<pre class=\"ruby highlighted_source\">msg = <span class=\"st0\">\"Hello World\"</span><br/>msg <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"!\"</span><br/><span class=\"kw3\">puts</span> msg                <span class=\"co1\">#=&gt; Hello World!</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> msg.<span class=\"me1\">frozen</span>?        <span class=\"co1\">#=&gt; false</span><br/>msg.<span class=\"me1\">freeze</span><br/><span class=\"kw3\">puts</span> msg.<span class=\"me1\">frozen</span>?        <span class=\"co1\">#=&gt; true</span><br/><span class=\"kw1\">begin</span><br/>  msg <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"!\"</span><br/><span class=\"kw1\">rescue</span> <span class=\"sy0\">=&gt;</span> e<br/>  <span class=\"kw3\">p</span> e                   <span class=\"co1\">#=&gt; #&lt;RuntimeError: can't modify frozen String&gt;</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> msg                <span class=\"co1\">#=&gt; Hello World!</span><br/>msg2 = msg<br/>\u00a0<br/><span class=\"co1\"># The object is frozen, not the variable.</span><br/>msg = <span class=\"st0\">\"hello world\"</span>     <span class=\"co1\"># A new object was assigned to the variable.</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> msg.<span class=\"me1\">frozen</span>?        <span class=\"co1\">#=&gt; false</span><br/><span class=\"kw3\">puts</span> msg2.<span class=\"me1\">frozen</span>?       <span class=\"co1\">#=&gt; true</span></pre>"}, {"lang": "Rust", "loc": 2, "block": "<pre class=\"text highlighted_source\">let x = 3;<br/>x += 2;</pre>"}, {"lang": "Scala", "loc": 2, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pi <span class=\"sy0\">=</span> <span class=\"nu0\">3.14159</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> msg <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello World\"</span></pre>"}, {"lang": "Seed7", "loc": 3, "block": "<pre class=\"text highlighted_source\">const integer: foo is 42;<br/>const string: bar is \"bar\";<br/>const blahtype: blah is blahvalue;</pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">define PI = <span class=\"nu0\">3.14159</span>;            <span class=\"co1\"># compile-time defined constant</span><br/>const MSG = <span class=\"st0\">\"Hello world!\"</span>;     <span class=\"co1\"># run-time defined constant</span></pre>"}, {"lang": "SuperCollider", "loc": 6, "block": "<pre class=\"text highlighted_source\">// you can freeze any object.<br/>b = [1, 2, 3];<br/>b[1] = 100; // returns [1, 100, 3]<br/>b.freeze; // make b immutable<br/>b[1] = 2; // throws an error (\"Attempted write to immutable object.\")<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 10, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> constant <span class=\"br0\">{</span>varName <span class=\"br0\">{</span>value <span class=\"st0\">\"\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$varName</span> var<br/>    <span class=\"co1\"># Allow application of immutability to an existing variable, e.g., a procedure argument</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"br0\">[</span><span class=\"kw2\">info</span> frame <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> == <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> value <span class=\"re0\">$var</span><span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> var <span class=\"re0\">$value</span><span class=\"br0\">}</span><br/>    trace add <span class=\"kw1\">variable</span> var write <span class=\"br0\">[</span><span class=\"kw2\">list</span> apply <span class=\"br0\">{</span><span class=\"br0\">{</span>val v1 v2 op<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$v1</span> var<br/>        <span class=\"kw1\">set</span> var <span class=\"re0\">$val</span><span class=\"sy0\">;</span> <span class=\"co1\"># Restore to what it should be</span><br/>        <span class=\"kw1\">return</span> -code <span class=\"kw1\">error</span> <span class=\"st0\">\"immutable\"</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"re0\">$value</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "UNIX Shell", "loc": 2, "block": "<pre class=\"text highlighted_source\">PIE=APPLE<br/>readonly PIE</pre>"}, {"lang": "XPL0", "loc": 3, "block": "<pre class=\"text highlighted_source\">define Pi=3.14;<br/>Pi:= 3.15;      \\causes a compile error: statement starting with a constant<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 5, "block": "<pre class=\"text highlighted_source\">List(1,2,3).del(0) //--&gt; L(2,3)<br/>ROList(1,2,3).del(0) //--&gt;SyntaxError\u00a0: Can't find del, which means you can't call it<br/>d:=Dictionary(); d.add(\"one\",1)<br/>D(one:1)<br/>d.makeReadOnly(); d.add(\"2\",2)  //--&gt;AccessError(This Dictionary is read only)</pre>"}]}