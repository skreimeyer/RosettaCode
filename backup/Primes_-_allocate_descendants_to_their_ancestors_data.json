{"task": "Primes_-_allocate_descendants_to_their_ancestors", "blocks": [{"lang": "AutoHotkey", "loc": 165, "block": "<pre class=\"autohotkey highlighted_source\">#Warn<br/><a href=\"http://www.autohotkey.com/docs/commands/_SingleInstance.htm\"><span class=\"kw5\">#SingleInstance</span></a> force<br/><a href=\"http://www.autohotkey.com/docs/commands/_NoEnv.htm\"><span class=\"kw5\">#NoEnv</span></a>            <span class=\"co1\">; Recommended for performance and compatibility with future AutoHotkey releases.</span><br/><a href=\"http://www.autohotkey.com/docs/commands/SendMode.htm\"><span class=\"kw3\">SendMode</span></a> <a href=\"http://www.autohotkey.com/docs/commands/Input.htm\"><span class=\"kw3\">Input</span></a>    <span class=\"co1\">; Recommended for new scripts due to its superior speed and reliability.</span><br/><a href=\"http://www.autohotkey.com/docs/commands/SetBatchLines.htm\"><span class=\"kw3\">SetBatchLines</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/><a href=\"http://www.autohotkey.com/docs/commands/SetFormat.htm\"><span class=\"kw3\">SetFormat</span></a><span class=\"sy0\">,</span> IntegerFast<span class=\"sy0\">,</span> D<br/>\u00a0<br/>MaxPrime    <span class=\"sy0\">=</span> <span class=\"nu0\">99</span>\t\t<span class=\"co1\">; upper bound for the prime factors</span><br/>MaxAncestor <span class=\"sy0\">=</span> <span class=\"nu0\">99</span>\t\t<span class=\"co1\">; greatest parent number</span><br/>\u00a0<br/>Descendants <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>Primes <span class=\"sy0\">:=</span> GetPrimes<span class=\"br0\">(</span>MaxPrime<span class=\"br0\">)</span><br/>Exclusions <span class=\"sy0\">:=</span> Primes<span class=\"sy0\">.</span>Clone<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>Exclusions<span class=\"sy0\">.</span><span class=\"kw6\">Insert</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"re3\">A_Is64bitOS</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% MaxAncestor<br/>\t\tDescendants<span class=\"sy0\">.</span><span class=\"kw6\">Insert</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>\tfor i<span class=\"sy0\">,</span> Prime in Primes<br/>\t<span class=\"br0\">{</span><br/>\t\tDescendants<span class=\"br0\">[</span>Prime<span class=\"sy0\">,</span> Prime<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>\t\tfor Parent<span class=\"sy0\">,</span> Children in Descendants<br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>Sum <span class=\"sy0\">:=</span> Parent<span class=\"sy0\">+</span>Prime<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> MaxAncestor<span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">break</span></a><br/>\u00a0<br/>\t\t\tfor pr in Children<br/>\t\t\t\tDescendants<span class=\"br0\">[</span>Sum<span class=\"sy0\">,</span> pr<span class=\"sy0\">*</span>Prime<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tfor i<span class=\"sy0\">,</span> v in Exclusions<br/>\t\tDescendants<span class=\"br0\">[</span>v<span class=\"br0\">]</span><span class=\"sy0\">.</span>Remove<span class=\"br0\">(</span>v<span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">else</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% MaxAncestor<br/>\t\tDescendants<span class=\"sy0\">.</span><span class=\"kw6\">Insert</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>\tfor i<span class=\"sy0\">,</span> Prime in Primes<br/>\t<span class=\"br0\">{</span><br/>\t\tDescendants<span class=\"br0\">[</span>Prime<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw6\">Insert</span><span class=\"br0\">(</span>Prime<span class=\"br0\">)</span><br/>\u00a0<br/>\t\tfor Parent<span class=\"sy0\">,</span> Children in Descendants<br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>Sum <span class=\"sy0\">:=</span> Parent<span class=\"sy0\">+</span>Prime<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> MaxAncestor<span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">break</span></a><br/>\u00a0<br/>\t\t\tfor j<span class=\"sy0\">,</span> pr in Children<br/>\t\t\t\tDescendants<span class=\"br0\">[</span>Sum<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw6\">Insert</span><span class=\"br0\">(</span>pr<span class=\"sy0\">*</span>Prime<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tfor i<span class=\"sy0\">,</span> v in Exclusions<br/>\t\tDescendants<span class=\"br0\">[</span>v<span class=\"br0\">]</span><span class=\"sy0\">.</span>Remove<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>MaxAncestor <span class=\"sy0\">&gt;</span> MaxPrime<span class=\"br0\">)</span><br/>\tPrimes <span class=\"sy0\">:=</span> GetPrimes<span class=\"br0\">(</span>MaxAncestor<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/IfExist.htm\"><span class=\"kw3\">IfExist</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%A_ScriptName%</span><span class=\"sy0\">.</span>txt<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/FileDelete.htm\"><span class=\"kw3\">FileDelete</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%A_ScriptName%</span><span class=\"sy0\">.</span>txt<br/>\u00a0<br/><span class=\"co1\">;-------------------------------------------------------</span><br/><span class=\"co1\">; Arrays\u00a0:</span><br/><span class=\"co1\">; Integer keys are stored using the native integer type</span><br/><span class=\"co1\">; 32bit key max = 2.147.483.647</span><br/><span class=\"co1\">; 64bit key max = 9.223.372.036.854.775.807</span><br/><span class=\"co1\">;-------------------------------------------------------</span><br/>Tot_desc <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>for Parent<span class=\"sy0\">,</span> Children in Descendants<br/><span class=\"br0\">{</span><br/>\tls_desc <span class=\"sy0\">=</span><br/>\t<span class=\"kw1\">if</span> <span class=\"re3\">A_Is64bitOS</span><br/>\t<span class=\"br0\">{</span><br/>\t\tnb_desc <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\tfor pr in Children<br/>\t\t\tls_desc <span class=\"sy0\">.=</span> <span class=\"st0\">\", \"</span> pr<span class=\"sy0\">,</span> nb_desc<span class=\"sy0\">++</span><br/>\t\tls_desc <span class=\"sy0\">:=</span> LTrim<span class=\"br0\">(</span>ls_desc<span class=\"sy0\">,</span> <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span><br/>\t<span class=\"br0\">{</span><br/>\t\tnb_desc <span class=\"sy0\">:=</span> Children<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\tfor i<span class=\"sy0\">,</span> pr in Children<br/>\t\t\tls_desc <span class=\"sy0\">.=</span> <span class=\"st0\">\",\"</span> pr<br/>\t\tls_desc <span class=\"sy0\">:=</span> LTrim<span class=\"br0\">(</span>ls_desc<span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><span class=\"sy0\">,</span> ls_desc<span class=\"sy0\">,</span> N D`<span class=\"sy0\">,</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> ls_desc<span class=\"sy0\">,</span> ls_desc<span class=\"sy0\">,</span> `<span class=\"sy0\">,,</span>`<span class=\"sy0\">,</span><span class=\"re0\">%A_Space%</span><span class=\"sy0\">,</span> All<br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tls_anc <span class=\"sy0\">=</span><br/>\tnb_anc <span class=\"sy0\">:=</span> GetAncestors<span class=\"br0\">(</span>ls_anc<span class=\"sy0\">,</span> Parent<span class=\"br0\">)</span><br/>\tls_anc <span class=\"sy0\">:=</span> LTrim<span class=\"br0\">(</span>ls_anc<span class=\"sy0\">,</span> <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">FileAppend</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"[\"</span> Parent <span class=\"st0\">\"] Level: \"</span> nb_anc <span class=\"st0\">\"`r`nAncestors: \"</span> <span class=\"br0\">(</span>nb_anc\u00a0? ls_anc\u00a0: <span class=\"st0\">\"None\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"`r`n\"</span><br/>\t\t\t\t <span class=\"sy0\">,</span> <span class=\"re0\">%A_ScriptName%</span><span class=\"sy0\">.</span>txt<br/>\u00a0<br/>\t<span class=\"kw1\">if</span> nb_desc<br/>\t<span class=\"br0\">{</span><br/>\t\tTot_desc <span class=\"sy0\">+=</span> nb_desc<br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">FileAppend</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"Descendants: \"</span> nb_desc <span class=\"st0\">\"`r`n\"</span> ls_desc <span class=\"st0\">\"`r`n`r`n\"</span><span class=\"sy0\">,</span> <span class=\"re0\">%A_ScriptName%</span><span class=\"sy0\">.</span>txt<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">FileAppend</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"Descendants: None`r`n`r`n\"</span><span class=\"sy0\">,</span> <span class=\"re0\">%A_ScriptName%</span><span class=\"sy0\">.</span>txt<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">FileAppend</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"Total descendants \"</span> Tot_desc<span class=\"sy0\">,</span> <span class=\"re0\">%A_ScriptName%</span><span class=\"sy0\">.</span>txt<br/><span class=\"kw1\">return</span><br/>\u00a0<br/>GetAncestors<span class=\"br0\">(</span>ByRef _lsAnc<span class=\"sy0\">,</span> _child<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tglobal Primes<br/>\u00a0<br/>\tlChild <span class=\"sy0\">:=</span> _child<br/>\tlIndex <span class=\"sy0\">:=</span> lParent <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> lChild <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/>\t<span class=\"br0\">{</span><br/>\t\tlPrime <span class=\"sy0\">:=</span> Primes<span class=\"br0\">[</span><span class=\"sy0\">++</span>lIndex<span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">while</span>\u00a0!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">mod</span></a><span class=\"br0\">(</span>lChild<span class=\"sy0\">,</span> lPrime<span class=\"br0\">)</span><br/>\t\t\tlChild <span class=\"sy0\">//=</span> lPrime<span class=\"sy0\">,</span> lParent <span class=\"sy0\">+=</span> lPrime<br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>lParent <span class=\"sy0\">=</span> _child <span class=\"kw1\">or</span> _child <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>\t_lsAnc <span class=\"sy0\">:=</span> <span class=\"st0\">\", \"</span> lParent _lsAnc<br/>\tli <span class=\"sy0\">:=</span> GetAncestors<span class=\"br0\">(</span>_lsAnc<span class=\"sy0\">,</span> lParent<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> <span class=\"sy0\">++</span>li<br/><span class=\"br0\">}</span><br/>\u00a0<br/>GetPrimes<span class=\"br0\">(</span>_maxPrime<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> _nbrPrime<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tlPrimes <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>_maxPrime <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">or</span> _nbrPrime <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tlPrimes<span class=\"sy0\">.</span><span class=\"kw6\">Insert</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\tlValue <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>lValue <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> _maxPrime <span class=\"kw1\">or</span> lPrimes<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> _nbrPrime<br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tlMaxPrime <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Floor</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Sqrt</span></a><span class=\"br0\">(</span>lValue<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\t\tfor lKey<span class=\"sy0\">,</span> lPrime in lPrimes<br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>lPrime <span class=\"sy0\">&gt;</span> lMaxPrime<span class=\"br0\">)</span>\t\t<span class=\"co1\">; if prime divisor is greater than Floor(Sqrt(lValue))</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t\tlPrimes<span class=\"sy0\">.</span><span class=\"kw6\">Insert</span><span class=\"br0\">(</span>lValue<span class=\"br0\">)</span><br/>\t\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">break</span></a><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t\t<span class=\"kw1\">if</span>\u00a0!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>lValue<span class=\"sy0\">,</span> lPrime<span class=\"br0\">)</span><br/>\t\t\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">break</span></a><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> lPrimes<br/><span class=\"br0\">}</span></pre>"}, {"lang": "C", "loc": 214, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;math.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define MAXPRIME 99\t\t\t\t\t\t// upper bound for the prime factors</span><br/><span class=\"co2\">#define MAXPARENT 99\t\t\t\t\t// greatest parent number</span><br/><span class=\"co2\">#define NBRPRIMES 30\t\t\t\t\t// max number of prime factors</span><br/><span class=\"co2\">#define NBRANCESTORS 10\t\t\t\t\t// max number of parent's ancestors</span><br/>\u00a0<br/>FILE <span class=\"sy0\">*</span>FileOut<span class=\"sy0\">;</span><br/><span class=\"kw4\">char</span> format<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\",\u00a0%lld\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> Primes<span class=\"br0\">[</span>NBRPRIMES<span class=\"br0\">]</span><span class=\"sy0\">;</span>\t\t\t\t\t<span class=\"co1\">// table of the prime factors</span><br/><span class=\"kw4\">int</span> iPrimes<span class=\"sy0\">;</span>\t\t\t\t\t\t\t<span class=\"co1\">// max index of the prime factor table</span><br/>\u00a0<br/><span class=\"kw4\">short</span> Ancestors<span class=\"br0\">[</span>NBRANCESTORS<span class=\"br0\">]</span><span class=\"sy0\">;</span>\t\t\t<span class=\"co1\">// table of the parent's ancestors</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> Children <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">long</span> <span class=\"kw4\">long</span> Child<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">struct</span> Children <span class=\"sy0\">*</span>pNext<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">struct</span> Children <span class=\"sy0\">*</span>Parents<span class=\"br0\">[</span>MAXPARENT<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>\t<span class=\"co1\">// table pointing to the root and to the last descendants (per parent)</span><br/><span class=\"kw4\">int</span> CptDescendants<span class=\"br0\">[</span>MAXPARENT<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span>\t\t\t<span class=\"co1\">// counter table of the descendants (per parent)</span><br/><span class=\"kw4\">long</span> <span class=\"kw4\">long</span> MaxDescendant <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">long</span> <span class=\"kw4\">long</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span><span class=\"nu16\">3.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">33.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"co1\">// greatest descendant number</span><br/>\u00a0<br/><span class=\"kw4\">short</span> GetParent<span class=\"br0\">(</span><span class=\"kw4\">long</span> <span class=\"kw4\">long</span> child<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">struct</span> Children <span class=\"sy0\">*</span>AppendChild<span class=\"br0\">(</span><span class=\"kw4\">struct</span> Children <span class=\"sy0\">*</span>node<span class=\"sy0\">,</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> child<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">short</span> GetAncestors<span class=\"br0\">(</span><span class=\"kw4\">short</span> child<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">void</span> PrintDescendants<span class=\"br0\">(</span><span class=\"kw4\">struct</span> Children <span class=\"sy0\">*</span>node<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> GetPrimes<span class=\"br0\">(</span><span class=\"kw4\">int</span> primes<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> maxPrime<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">long</span> <span class=\"kw4\">long</span> Child<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">short</span> i<span class=\"sy0\">,</span> Parent<span class=\"sy0\">,</span> Level<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> TotDesc <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>iPrimes <span class=\"sy0\">=</span> GetPrimes<span class=\"br0\">(</span>Primes<span class=\"sy0\">,</span> MAXPRIME<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>Child <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> Child <span class=\"sy0\">&lt;=</span> MaxDescendant<span class=\"sy0\">;</span> Child<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Parent <span class=\"sy0\">=</span> GetParent<span class=\"br0\">(</span>Child<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tParents<span class=\"br0\">[</span>Parent<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> AppendChild<span class=\"br0\">(</span>Parents<span class=\"br0\">[</span>Parent<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> Child<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Parents<span class=\"br0\">[</span>Parent<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span><br/>\t\t\t\tParents<span class=\"br0\">[</span>Parent<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> Parents<span class=\"br0\">[</span>Parent<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tCptDescendants<span class=\"br0\">[</span>Parent<span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>MAXPARENT <span class=\"sy0\">&gt;</span> MAXPRIME<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>GetPrimes<span class=\"br0\">(</span>Primes<span class=\"sy0\">,</span> MAXPARENT<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>fopen_s<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>FileOut<span class=\"sy0\">,</span> <span class=\"st0\">\"Ancestors.txt\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"w\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>Parent <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> Parent <span class=\"sy0\">&lt;=</span> MAXPARENT<span class=\"sy0\">;</span> Parent<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tLevel <span class=\"sy0\">=</span> GetAncestors<span class=\"br0\">(</span>Parent<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>FileOut<span class=\"sy0\">,</span> <span class=\"st0\">\"[%d] Level:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> Parent<span class=\"sy0\">,</span> Level<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Level<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>FileOut<span class=\"sy0\">,</span> <span class=\"st0\">\"Ancestors:\u00a0%d\"</span><span class=\"sy0\">,</span> Ancestors<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> Level<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>FileOut<span class=\"sy0\">,</span> <span class=\"st0\">\",\u00a0%d\"</span><span class=\"sy0\">,</span> Ancestors<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>FileOut<span class=\"sy0\">,</span> <span class=\"st0\">\"Ancestors: None\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>CptDescendants<span class=\"br0\">[</span>Parent<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>FileOut<span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>Descendants:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> CptDescendants<span class=\"br0\">[</span>Parent<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tstrcpy_s<span class=\"br0\">(</span>format<span class=\"sy0\">,</span> <span class=\"st0\">\"%lld\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tPrintDescendants<span class=\"br0\">(</span>Parents<span class=\"br0\">[</span>Parent<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>FileOut<span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>FileOut<span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>Descendants: None<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>FileOut<span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tTotDesc <span class=\"sy0\">+=</span> CptDescendants<span class=\"br0\">[</span>Parent<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>FileOut<span class=\"sy0\">,</span> <span class=\"st0\">\"Total descendants\u00a0%d<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> TotDesc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>FileOut<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">short</span> GetParent<span class=\"br0\">(</span><span class=\"kw4\">long</span> <span class=\"kw4\">long</span> child<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">long</span> <span class=\"kw4\">long</span> Child <span class=\"sy0\">=</span> child<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">short</span> Parent <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">short</span> Index <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>Child <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> Parent <span class=\"sy0\">&lt;=</span> MAXPARENT<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Index <span class=\"sy0\">&gt;</span> iPrimes<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>Child <span class=\"sy0\">%</span> Primes<span class=\"br0\">[</span>Index<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tChild <span class=\"sy0\">/=</span> Primes<span class=\"br0\">[</span>Index<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tParent <span class=\"sy0\">+=</span> Primes<span class=\"br0\">[</span>Index<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tIndex<span class=\"sy0\">++;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Parent <span class=\"sy0\">==</span> child <span class=\"sy0\">||</span> Parent <span class=\"sy0\">&gt;</span> MAXPARENT <span class=\"sy0\">||</span> child <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> Parent<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> Children <span class=\"sy0\">*</span>AppendChild<span class=\"br0\">(</span><span class=\"kw4\">struct</span> Children <span class=\"sy0\">*</span>node<span class=\"sy0\">,</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> child<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">static</span> <span class=\"kw4\">struct</span> Children <span class=\"sy0\">*</span>NodeNew<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>NodeNew <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">struct</span> Children <span class=\"sy0\">*</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> Children<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tNodeNew<span class=\"sy0\">-&gt;</span>Child <span class=\"sy0\">=</span> child<span class=\"sy0\">;</span><br/>\t\tNodeNew<span class=\"sy0\">-&gt;</span>pNext <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>node <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span><br/>\t\t\tnode<span class=\"sy0\">-&gt;</span>pNext <span class=\"sy0\">=</span> NodeNew<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> NodeNew<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">short</span> GetAncestors<span class=\"br0\">(</span><span class=\"kw4\">short</span> child<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">short</span> Child <span class=\"sy0\">=</span> child<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">short</span> Parent <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">short</span> Index <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>Child <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>Child <span class=\"sy0\">%</span> Primes<span class=\"br0\">[</span>Index<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tChild <span class=\"sy0\">/=</span> Primes<span class=\"br0\">[</span>Index<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tParent <span class=\"sy0\">+=</span> Primes<span class=\"br0\">[</span>Index<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tIndex<span class=\"sy0\">++;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Parent <span class=\"sy0\">==</span> child <span class=\"sy0\">||</span> child <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tIndex <span class=\"sy0\">=</span> GetAncestors<span class=\"br0\">(</span>Parent<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tAncestors<span class=\"br0\">[</span>Index<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Parent<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"sy0\">++</span>Index<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> PrintDescendants<span class=\"br0\">(</span><span class=\"kw4\">struct</span> Children <span class=\"sy0\">*</span>node<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">static</span> <span class=\"kw4\">struct</span> Children <span class=\"sy0\">*</span>NodeCurr<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">static</span> <span class=\"kw4\">struct</span> Children <span class=\"sy0\">*</span>NodePrev<span class=\"sy0\">;</span><br/>\u00a0<br/>\tNodeCurr <span class=\"sy0\">=</span> node<span class=\"sy0\">;</span><br/>\tNodePrev <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>NodeCurr<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>FileOut<span class=\"sy0\">,</span> format<span class=\"sy0\">,</span> NodeCurr<span class=\"sy0\">-&gt;</span>Child<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tstrcpy_s<span class=\"br0\">(</span>format<span class=\"sy0\">,</span> <span class=\"st0\">\",\u00a0%lld\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tNodePrev <span class=\"sy0\">=</span> NodeCurr<span class=\"sy0\">;</span><br/>\t\tNodeCurr <span class=\"sy0\">=</span> NodeCurr<span class=\"sy0\">-&gt;</span>pNext<span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>NodePrev<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> GetPrimes<span class=\"br0\">(</span><span class=\"kw4\">int</span> primes<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> maxPrime<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>maxPrime <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> Index <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> Value <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> Max<span class=\"sy0\">,</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\tprimes<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>Value <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> maxPrime<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tMax <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/floor.html\"><span class=\"kw3\">floor</span></a><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> Value<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> Index<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>primes<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> Max<span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>Index <span class=\"sy0\">&gt;=</span> NBRPRIMES<span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\tprimes<span class=\"br0\">[</span>Index<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Value<span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Value <span class=\"sy0\">%</span> primes<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> Index<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Go", "loc": 84, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"sort\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> getPrimes<span class=\"sy1\">(</span>max <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> max &lt; <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{}</span><br/>    <span class=\"sy1\">}</span><br/>    lprimes <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">}</span><br/>outer<span class=\"sy1\">:</span><br/>    <span class=\"kw1\">for</span> x <span class=\"sy2\">:=</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span> x &lt;<span class=\"sy2\">=</span> max<span class=\"sy1\">;</span> x <span class=\"sy2\">+=</span> <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> lprimes <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> x<span class=\"sy3\">%</span>p <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">continue</span> outer<br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        lprimes <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>lprimes<span class=\"sy1\">,</span> x<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> lprimes<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">const</span> maxSum <span class=\"sy2\">=</span> <span class=\"nu0\">99</span><br/>    descendants <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">int64</span><span class=\"sy1\">,</span> maxSum<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    ancestors <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> maxSum<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> maxSum<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        descendants<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int64</span><span class=\"sy1\">{}</span><br/>        ancestors<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{}</span><br/>    <span class=\"sy1\">}</span><br/>    primes <span class=\"sy2\">:=</span> getPrimes<span class=\"sy1\">(</span>maxSum<span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> primes <span class=\"sy1\">{</span><br/>        descendants<span class=\"sy1\">[</span>p<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>descendants<span class=\"sy1\">[</span>p<span class=\"sy1\">],</span> <span class=\"kw4\">int64</span><span class=\"sy1\">(</span>p<span class=\"sy1\">))</span><br/>        <span class=\"kw1\">for</span> s <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> s &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>descendants<span class=\"sy1\">)</span><span class=\"sy3\">-</span>p<span class=\"sy1\">;</span> s<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            temp <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int64</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>descendants<span class=\"sy1\">[</span>s<span class=\"sy1\">]))</span><br/>            <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>descendants<span class=\"sy1\">[</span>s<span class=\"sy1\">]);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>                temp<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw4\">int64</span><span class=\"sy1\">(</span>p<span class=\"sy1\">)</span> <span class=\"sy3\">*</span> descendants<span class=\"sy1\">[</span>s<span class=\"sy1\">][</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>            <span class=\"sy1\">}</span><br/>            descendants<span class=\"sy1\">[</span>s<span class=\"sy3\">+</span>p<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>descendants<span class=\"sy1\">[</span>s<span class=\"sy3\">+</span>p<span class=\"sy1\">],</span> temp<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> p <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> append<span class=\"sy1\">(</span>primes<span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        le <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>descendants<span class=\"sy1\">[</span>p<span class=\"sy1\">])</span><br/>        <span class=\"kw1\">if</span> le <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"sy1\">}</span><br/>        descendants<span class=\"sy1\">[</span>p<span class=\"sy1\">][</span>le<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>        descendants<span class=\"sy1\">[</span>p<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> descendants<span class=\"sy1\">[</span>p<span class=\"sy1\">][:</span>le<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>    <span class=\"sy1\">}</span><br/>    total <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> s <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> s &lt;<span class=\"sy2\">=</span> maxSum<span class=\"sy1\">;</span> s<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        x <span class=\"sy2\">:=</span> descendants<span class=\"sy1\">[</span>s<span class=\"sy1\">]</span><br/>        sort<span class=\"sy3\">.</span>Slice<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> x<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> &lt; x<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><br/>        <span class=\"sy1\">})</span><br/>        total <span class=\"sy2\">+=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>descendants<span class=\"sy1\">[</span>s<span class=\"sy1\">])</span><br/>        index <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy1\">;</span> index &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>descendants<span class=\"sy1\">[</span>s<span class=\"sy1\">]);</span> index<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> descendants<span class=\"sy1\">[</span>s<span class=\"sy1\">][</span>index<span class=\"sy1\">]</span> &gt; <span class=\"kw4\">int64</span><span class=\"sy1\">(</span>maxSum<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> d <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> descendants<span class=\"sy1\">[</span>s<span class=\"sy1\">][:</span>index<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            ancestors<span class=\"sy1\">[</span>d<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>ancestors<span class=\"sy1\">[</span>s<span class=\"sy1\">],</span> s<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy1\">(</span>s &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">21</span> &amp;&amp; s &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">45</span><span class=\"sy1\">)</span> <span class=\"sy3\">||</span> <span class=\"sy1\">(</span>s &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">47</span> &amp;&amp; s &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">73</span><span class=\"sy1\">)</span> <span class=\"sy3\">||</span> <span class=\"sy1\">(</span>s &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">75</span> &amp;&amp; s &lt; maxSum<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"sy1\">}</span><br/>        temp <span class=\"sy2\">:=</span> fmt<span class=\"sy3\">.</span>Sprintf<span class=\"sy1\">(</span><span class=\"st0\">\"%v\"</span><span class=\"sy1\">,</span> ancestors<span class=\"sy1\">[</span>s<span class=\"sy1\">])</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"%2d:\u00a0%d Ancestor(s):\u00a0%-14s\"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>ancestors<span class=\"sy1\">[</span>s<span class=\"sy1\">]),</span> temp<span class=\"sy1\">)</span><br/>        le <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>descendants<span class=\"sy1\">[</span>s<span class=\"sy1\">])</span><br/>        <span class=\"kw1\">if</span> le &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">10</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%5d Descendant(s):\u00a0%v<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> le<span class=\"sy1\">,</span> descendants<span class=\"sy1\">[</span>s<span class=\"sy1\">])</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%5d Descendant(s):\u00a0%v<span class=\"es1\">\\b</span> ...]<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> le<span class=\"sy1\">,</span> descendants<span class=\"sy1\">[</span>s<span class=\"sy1\">][:</span><span class=\"nu0\">10</span><span class=\"sy1\">])</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Total descendants\"</span><span class=\"sy1\">,</span> total<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "J", "loc": 37, "block": "<pre class=\"j highlighted_source\">require<span class=\"st_h\">'strings files'</span><br/>\u00a0<br/>family=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span> M.<br/>  <span class=\"kw1\">if.</span> <span class=\"nu0\">2</span>&gt;<span class=\"kw2\">y</span> <span class=\"kw1\">do.</span><br/>    i.<span class=\"nu0\">0</span>   <span class=\"co1\">NB. no primes less than 2</span><br/>  <span class=\"kw1\">else.</span><br/>    p=. i.&amp;.<span class=\"sy0\">(</span>p:inv<span class=\"sy0\">)</span> <span class=\"kw2\">y</span><br/>    <span class=\"sy0\">(</span><span class=\"kw2\">y</span>#~<span class=\"nu0\">1</span> p:<span class=\"kw2\">y</span><span class=\"sy0\">)</span>,~.;p <span class=\"sy0\">(</span>* family<span class=\"sy0\">)</span>&amp;.&gt;<span class=\"kw2\">y</span>-p<br/>  <span class=\"kw1\">end.</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>familytree=: +/@q:^:a:\u00a0::<span class=\"sy0\">(</span><span class=\"st_h\">''</span>\"<span class=\"nu0\">_</span><span class=\"sy0\">)</span><br/>\u00a0<br/>descendants=: family -. ]<br/>ancestors=: <span class=\"nu0\">1</span> }. familytree<br/>level=: #@ancestors\"<span class=\"nu0\">0</span><br/>\u00a0<br/>taskfmt=:<span class=\"st_h\">'None'</span>\"<span class=\"nu0\">_</span>^:<span class=\"sy0\">(</span><span class=\"nu0\">0</span>=#<span class=\"sy0\">)</span>@rplc&amp;<span class=\"sy0\">(</span><span class=\"st_h\">' '</span>;<span class=\"st_h\">', '</span><span class=\"sy0\">)</span>@\":<br/>\u00a0<br/>task1=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  text=. <span class=\"st_h\">'['</span>,<span class=\"sy0\">(</span>\":<span class=\"kw2\">y</span><span class=\"sy0\">)</span>,<span class=\"st_h\">'] Level: '</span>,<span class=\"sy0\">(</span>\":level <span class=\"kw2\">y</span><span class=\"sy0\">)</span>,LF<br/>  text=. text,<span class=\"st_h\">'Ancestors: '</span>,<span class=\"sy0\">(</span>taskfmt /:~ancestors <span class=\"kw2\">y</span><span class=\"sy0\">)</span>,LF<br/>  <span class=\"kw1\">if.</span> #descendants <span class=\"kw2\">y</span> <span class=\"kw1\">do.</span><br/>    text=. text,<span class=\"st_h\">'Descendants: '</span>,<span class=\"sy0\">(</span>\":#descendants <span class=\"kw2\">y</span><span class=\"sy0\">)</span>,LF<br/>    text=. text,<span class=\"sy0\">(</span>taskfmt /:~descendants <span class=\"kw2\">y</span><span class=\"sy0\">)</span>,LF<br/>  <span class=\"kw1\">else.</span><br/>    text=. text,<span class=\"st_h\">'Descendants: None'</span>,LF<br/>  <span class=\"kw1\">end.</span><br/>  text=. text,LF<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>task=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  tot=. <span class=\"st_h\">'Total descendants '</span>,<span class=\"sy0\">(</span>\":#@; descendants&amp;.&gt; <span class=\"nu0\">1</span>+i.<span class=\"kw2\">y</span><span class=\"sy0\">)</span>,LF<br/>  <span class=\"sy0\">((</span>;task1&amp;.&gt;<span class=\"nu0\">1</span>+i.<span class=\"kw2\">y</span><span class=\"sy0\">)</span>,tot<span class=\"sy0\">)</span> fwrite jpath <span class=\"st_h\">'~user/temp/Ancestors.txt'</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>task <span class=\"nu0\">99</span></pre>"}, {"lang": "Kotlin", "loc": 45, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> MAXSUM <span class=\"sy0\">=</span> <span class=\"nu0\">99</span><br/>\u00a0<br/>fun getPrimes<span class=\"br0\">(</span>max<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>max <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> emptyList<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lprimes <span class=\"sy0\">=</span> mutableListOf<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    outer<span class=\"sy0\">@</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>x in <span class=\"nu0\">3</span>..<span class=\"me1\">max</span> step <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>p in lprimes<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">%</span> p <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> continue<span class=\"sy0\">@</span>outer<br/>        lprimes.<span class=\"me1\">add</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> lprimes<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> descendants <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>MAXSUM + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> mutableListOf<span class=\"sy0\">&lt;</span>Long<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ancestors   <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>MAXSUM + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> mutableListOf<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> primes <span class=\"sy0\">=</span> getPrimes<span class=\"br0\">(</span>MAXSUM<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>p in primes<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        descendants<span class=\"br0\">[</span>p<span class=\"br0\">]</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span>p.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>s in <span class=\"nu0\">1</span> until descendants.<span class=\"me1\">size</span> - p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> temp <span class=\"sy0\">=</span> descendants<span class=\"br0\">[</span>s + p<span class=\"br0\">]</span> + descendants<span class=\"br0\">[</span>s<span class=\"br0\">]</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> p <span class=\"sy0\">*</span> it <span class=\"br0\">}</span><br/>            descendants<span class=\"br0\">[</span>s + p<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp.<span class=\"me1\">toMutableList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>p in primes + <span class=\"nu0\">4</span><span class=\"br0\">)</span> descendants<span class=\"br0\">[</span>p<span class=\"br0\">]</span>.<span class=\"me1\">removeAt</span><span class=\"br0\">(</span>descendants<span class=\"br0\">[</span>p<span class=\"br0\">]</span>.<span class=\"me1\">lastIndex</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> total <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>s in <span class=\"nu0\">1</span>..<span class=\"me1\">MAXSUM</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        descendants<span class=\"br0\">[</span>s<span class=\"br0\">]</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        total +<span class=\"sy0\">=</span> descendants<span class=\"br0\">[</span>s<span class=\"br0\">]</span>.<span class=\"me1\">size</span>        <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>d in descendants<span class=\"br0\">[</span>s<span class=\"br0\">]</span>.<span class=\"me1\">takeWhile</span> <span class=\"br0\">{</span> it <span class=\"sy0\">&lt;=</span> MAXSUM.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            ancestors<span class=\"br0\">[</span>d.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>ancestors<span class=\"br0\">[</span>s<span class=\"br0\">]</span> + s<span class=\"br0\">)</span>.<span class=\"me1\">toMutableList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s in <span class=\"nu0\">21</span>..<span class=\"nu0\">45</span> || s in <span class=\"nu0\">47</span>..<span class=\"nu0\">73</span> || s in <span class=\"nu0\">75</span> until MAXSUM<span class=\"br0\">)</span> continue<br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"${\"</span><span class=\"sy0\">%</span>2d<span class=\"st0\">\".format(s)}: ${ancestors[s].size} Ancestor(s): \"</span><span class=\"br0\">)</span><br/>        print<span class=\"br0\">(</span>ancestors<span class=\"br0\">[</span>s<span class=\"br0\">]</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">padEnd</span><span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"${\"</span><span class=\"sy0\">%</span>5d<span class=\"st0\">\".format(descendants[s].size)} Descendant(s): \"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"${descendants[s].joinToString(\"</span>, <span class=\"st0\">\", \"</span><span class=\"br0\">[</span><span class=\"st0\">\", \"</span><span class=\"br0\">]</span><span class=\"st0\">\", 10)}\"</span><span class=\"br0\">)</span>        <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Total descendants $total\"</span><span class=\"br0\">)</span>  <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 40, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$max</span> <span class=\"sy0\">=</span> <span class=\"nu0\">99</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@primes</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"re0\">$max</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"sy0\">:</span> <span class=\"sy0\">*.</span><span class=\"me1\">is</span><span class=\"sy0\">-</span>prime<span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">%tree</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> allocate <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$prod</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"re0\">@primes</span><span class=\"sy0\">.</span><span class=\"kw3\">kv</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$k</span><span class=\"sy0\">,</span> <span class=\"re0\">$p</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$k</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$sum</span> <span class=\"sy0\">+</span> <span class=\"re0\">$p</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$max</span> <span class=\"br0\">{</span><br/>            allocate<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$k</span><span class=\"sy0\">,</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">+</span> <span class=\"re0\">$p</span><span class=\"sy0\">,</span> <span class=\"re0\">$prod</span> <span class=\"sy0\">*</span> <span class=\"re0\">$p</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">last</span> <span class=\"kw1\">if</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">==</span> <span class=\"re0\">$prod</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">%tree</span><span class=\"br0\">{</span><span class=\"re0\">$sum</span><span class=\"br0\">}</span><span class=\"sy0\">&lt;</span>descendants<span class=\"sy0\">&gt;</span><span class=\"br0\">{</span><span class=\"re0\">$prod</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">%tree</span><span class=\"br0\">{</span><span class=\"re0\">$n</span><span class=\"br0\">}</span><span class=\"sy0\">&lt;</span>ancestor<span class=\"sy0\">&gt;</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">unless</span> <span class=\"re0\">%tree</span><span class=\"br0\">{</span><span class=\"re0\">$n</span><span class=\"br0\">}</span><span class=\"sy0\">&lt;</span>ancestor<span class=\"sy0\">&gt;;</span><br/>            <span class=\"re0\">%tree</span><span class=\"br0\">{</span><span class=\"re0\">$prod</span><span class=\"br0\">}</span><span class=\"sy0\">&lt;</span>ancestor<span class=\"sy0\">&gt;</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$sum</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Set</span> <span class=\"br0\">(</span><span class=\"sy0\">|</span><span class=\"br0\">)</span> <span class=\"re0\">%tree</span><span class=\"br0\">{</span><span class=\"re0\">$sum</span><span class=\"br0\">}</span><span class=\"sy0\">&lt;</span>ancestor<span class=\"sy0\">&gt;</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$prod</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$max</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">last</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> abbrev <span class=\"br0\">(</span><span class=\"re0\">@d</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># abbreviate long lists to first and last 5 elements</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">@d</span> <span class=\"kw1\">if</span> <span class=\"re0\">@d</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">11</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@d</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">'...'</span><span class=\"sy0\">,</span> <span class=\"re0\">@d</span><span class=\"br0\">[</span><span class=\"sy0\">*-</span><span class=\"nu0\">5</span> <span class=\"sy0\">..</span> <span class=\"sy0\">*-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">.</span><span class=\"re0\">&amp;allocate</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$max</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$total</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">$max</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"re0\">%tree</span><span class=\"br0\">{</span><span class=\"re0\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">&lt;</span>descendants<span class=\"sy0\">&gt;.</span><span class=\"kw3\">keys</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> flat <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"nu0\">46</span><span class=\"sy0\">,</span> <span class=\"nu0\">99</span> <span class=\"br0\">{</span> <span class=\"co1\"># print some representative lines</span><br/>    <span class=\"kw3\">printf</span> <span class=\"st0\">\"%2d,\u00a0%2d Ancestors:\u00a0%-15s\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span><span class=\"sy0\">,</span> <span class=\"re0\">%tree</span><span class=\"br0\">{</span><span class=\"re0\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">&lt;</span>ancestor<span class=\"sy0\">&gt;,</span><br/>        <span class=\"st0\">\"[{\u00a0%tree{$_}&lt;ancestor&gt;.keys.sort: +* }],\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$dn</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"kw1\">my</span> <span class=\"re0\">$dl</span> <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">%tree</span><span class=\"br0\">{</span><span class=\"re0\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">&lt;</span>descendants<span class=\"sy0\">&gt;</span> <span class=\"sy0\">!</span>eqv Any<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$dn</span> <span class=\"sy0\">=</span> <span class=\"re0\">%tree</span><span class=\"br0\">{</span><span class=\"re0\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">&lt;</span>descendants<span class=\"sy0\">&gt;.</span><span class=\"kw3\">keys</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$dl</span> <span class=\"sy0\">=</span> abbrev<span class=\"br0\">(</span><span class=\"re0\">%tree</span><span class=\"br0\">{</span><span class=\"re0\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">&lt;</span>descendants<span class=\"sy0\">&gt;.</span><span class=\"kw3\">keys</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">:</span> <span class=\"sy0\">+*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">printf</span> <span class=\"st0\">\"%4d Descendants:\u00a0%s\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$dn</span><span class=\"sy0\">,</span> <span class=\"st0\">\"[$dl]<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Total descendants: $total\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Python", "loc": 44, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">__future__</span> <span class=\"kw1\">import</span> print_function<br/><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> takewhile<br/>\u00a0<br/>maxsum <span class=\"sy0\">=</span> <span class=\"nu0\">99</span><br/>\u00a0<br/><span class=\"kw1\">def</span> get_primes<span class=\"br0\">(</span><span class=\"kw2\">max</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">max</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    lprimes <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"kw2\">max</span> + <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> lprimes:<br/>            <span class=\"kw1\">if</span> x\u00a0% p <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>                <span class=\"kw1\">break</span><br/>        <span class=\"kw1\">else</span>:<br/>            lprimes.<span class=\"me1\">append</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> lprimes<br/>\u00a0<br/>descendants <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> _ <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>maxsum + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>ancestors <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> _ <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>maxsum + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>primes <span class=\"sy0\">=</span> get_primes<span class=\"br0\">(</span>maxsum<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> primes:<br/>    descendants<span class=\"br0\">[</span>p<span class=\"br0\">]</span>.<span class=\"me1\">append</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>descendants<span class=\"br0\">)</span> - p<span class=\"br0\">)</span>:<br/>        descendants<span class=\"br0\">[</span>s + p<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <span class=\"br0\">[</span>p * pr <span class=\"kw1\">for</span> pr <span class=\"kw1\">in</span> descendants<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> primes + <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>:<br/>    descendants<span class=\"br0\">[</span>p<span class=\"br0\">]</span>.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>total <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> maxsum + <span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>    descendants<span class=\"br0\">[</span>s<span class=\"br0\">]</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> d <span class=\"kw1\">in</span> takewhile<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> x: x <span class=\"sy0\">&lt;=</span> maxsum<span class=\"sy0\">,</span> descendants<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">)</span>:<br/>        ancestors<span class=\"br0\">[</span>d<span class=\"br0\">]</span> <span class=\"sy0\">=</span> ancestors<span class=\"br0\">[</span>s<span class=\"br0\">]</span> + <span class=\"br0\">[</span>s<span class=\"br0\">]</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Level:\"</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>ancestors<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Ancestors:\"</span><span class=\"sy0\">,</span> ancestors<span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>ancestors<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"None\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Descendants:\"</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>descendants<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>descendants<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"None\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>descendants<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span>descendants<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    total +<span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>descendants<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Total descendants\"</span><span class=\"sy0\">,</span> total<span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 18, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define-syntax-rule (define/mem (name args ...) body ...)<br/>  (begin<br/>    (define cache (make-hash))<br/>    (define (name args ...)<br/>      (hash-ref! cache (list args ...) (lambda () body ...)))))<br/>\u00a0<br/>(define (take-last x n)<br/>  (drop x (- (length x) n)))<br/>\u00a0<br/>(define (borders x)<br/>  (if (&gt; (length x) 5)<br/>    (append (take x 2) '(...) (take-last x 2))<br/>    x))<br/>\u00a0<br/>(define (add-tail list x)<br/>  (reverse (cons x (reverse list))))</pre>"}, {"lang": "Visual Basic .NET", "loc": 218, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Imports</span> System<span class=\"sy0\">.</span><span class=\"me1\">Math</span><br/>\u00a0<br/><span class=\"kw1\">Module</span> Module1<br/>    <span class=\"kw1\">Const</span> MAXPRIME <span class=\"sy0\">=</span> <span class=\"nu0\">99</span>                             <span class=\"co1\">' upper bound for the prime factors</span><br/>    <span class=\"kw1\">Const</span> MAXPARENT <span class=\"sy0\">=</span> <span class=\"nu0\">99</span>                            <span class=\"co1\">' greatest parent number</span><br/>\u00a0<br/>    <span class=\"kw1\">Const</span> NBRCHILDREN <span class=\"sy0\">=</span> <span class=\"nu0\">547100</span>                      <span class=\"co1\">' max number of children (total descendants)</span><br/>\u00a0<br/>    <span class=\"kw1\">Public</span> Primes <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> Collection<span class=\"br0\">(</span><span class=\"br0\">)</span>               <span class=\"co1\">' table of the prime factors</span><br/>    <span class=\"kw1\">Public</span> PrimesR <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> Collection<span class=\"br0\">(</span><span class=\"br0\">)</span>              <span class=\"co1\">' table of the prime factors in reversed order</span><br/>    <span class=\"kw1\">Public</span> Ancestors <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> Collection<span class=\"br0\">(</span><span class=\"br0\">)</span>            <span class=\"co1\">' table of the parent's ancestors</span><br/>\u00a0<br/>    <span class=\"kw1\">Public</span> Parents<span class=\"br0\">(</span>MAXPARENT <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span>        <span class=\"co1\">' index table of the root descendant (per parent)</span><br/>    <span class=\"kw1\">Public</span> CptDescendants<span class=\"br0\">(</span>MAXPARENT <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"co1\">' counter table of the descendants (per parent)</span><br/>    <span class=\"kw1\">Public</span> Children<span class=\"br0\">(</span>NBRCHILDREN<span class=\"br0\">)</span> <span class=\"kw1\">As</span> ChildStruct     <span class=\"co1\">' table of the whole descendants</span><br/>    <span class=\"kw1\">Public</span> iChildren <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span>                     <span class=\"co1\">' max index of the Children table</span><br/>\u00a0<br/>    <span class=\"kw1\">Public</span> Delimiter <span class=\"kw1\">As</span> <span class=\"kw2\">String</span> <span class=\"sy0\">=</span> <span class=\"st0\">\", \"</span><br/>    <span class=\"kw1\">Public</span> <span class=\"kw1\">Structure</span> ChildStruct<br/>        <span class=\"kw1\">Public</span> Child <span class=\"kw1\">As</span> <span class=\"kw2\">Long</span><br/>        <span class=\"kw1\">Public</span> pLower <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>        <span class=\"kw1\">Public</span> pHigher <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Structure</span><br/>    <span class=\"kw1\">Sub</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Dim</span> Parent <span class=\"kw1\">As</span> <span class=\"kw2\">Short</span><br/>        <span class=\"kw1\">Dim</span> Sum <span class=\"kw1\">As</span> <span class=\"kw2\">Short</span><br/>        <span class=\"kw1\">Dim</span> i <span class=\"kw1\">As</span> <span class=\"kw2\">Short</span><br/>        <span class=\"kw1\">Dim</span> TotDesc <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">Dim</span> MidPrime <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>\u00a0<br/>        <span class=\"kw1\">If</span> GetPrimes<span class=\"br0\">(</span>Primes, MAXPRIME<span class=\"br0\">)</span> <span class=\"sy0\">=</span> vbFalse <span class=\"kw1\">Then</span><br/>            <span class=\"kw1\">Return</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>        <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> Primes<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Step</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            PrimesR<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>Primes<span class=\"sy0\">.</span><span class=\"me1\">Item</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Next</span><br/>\u00a0<br/>        MidPrime <span class=\"sy0\">=</span> PrimesR<span class=\"sy0\">.</span><span class=\"me1\">Item</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>        <span class=\"kw1\">For</span> <span class=\"kw1\">Each</span> Prime <span class=\"kw1\">In</span> PrimesR<br/>            Parents<span class=\"br0\">(</span>Prime<span class=\"br0\">)</span> <span class=\"sy0\">=</span> InsertChild<span class=\"br0\">(</span>Parents<span class=\"br0\">(</span>Prime<span class=\"br0\">)</span>, Prime<span class=\"br0\">)</span><br/>            CptDescendants<span class=\"br0\">(</span>Prime<span class=\"br0\">)</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>            <span class=\"kw1\">If</span> Prime <span class=\"sy0\">&gt;</span> MidPrime <span class=\"kw1\">Then</span><br/>                <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>            <span class=\"kw1\">For</span> Parent <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> MAXPARENT<br/>                Sum <span class=\"sy0\">=</span> Parent <span class=\"sy0\">+</span> Prime<br/>\u00a0<br/>                <span class=\"kw1\">If</span> Sum <span class=\"sy0\">&gt;</span> MAXPARENT <span class=\"kw1\">Then</span><br/>                    <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>                <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>                <span class=\"kw1\">If</span> Parents<span class=\"br0\">(</span>Parent<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>                    InsertPreorder<span class=\"br0\">(</span>Parents<span class=\"br0\">(</span>Parent<span class=\"br0\">)</span>, Sum, Prime<span class=\"br0\">)</span><br/>                    CptDescendants<span class=\"br0\">(</span>Sum<span class=\"br0\">)</span> <span class=\"sy0\">+=</span> CptDescendants<span class=\"br0\">(</span>Parent<span class=\"br0\">)</span><br/>                <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>            <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">Next</span><br/>\u00a0<br/>        RemoveFalseChildren<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">If</span> MAXPARENT <span class=\"sy0\">&gt;</span> MAXPRIME <span class=\"kw1\">Then</span><br/>            <span class=\"kw1\">If</span> GetPrimes<span class=\"br0\">(</span>Primes, MAXPARENT<span class=\"br0\">)</span> <span class=\"sy0\">=</span> vbFalse <span class=\"kw1\">Then</span><br/>                <span class=\"kw1\">Return</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>        FileOpen<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"st0\">\"Ancestors.txt\"</span>, OpenMode<span class=\"sy0\">.</span><span class=\"me1\">Output</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">For</span> Parent <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> MAXPARENT<br/>            GetAncestors<span class=\"br0\">(</span>Parent<span class=\"br0\">)</span><br/>            PrintLine<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"st0\">\"[\"</span> <span class=\"sy0\">&amp;</span> Parent<span class=\"sy0\">.</span><span class=\"me1\">ToString</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"] Level: \"</span> <span class=\"sy0\">&amp;</span> Ancestors<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"kw1\">If</span> Ancestors<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"kw1\">Then</span><br/>                Print<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"st0\">\"Ancestors: \"</span> <span class=\"sy0\">&amp;</span> Ancestors<span class=\"sy0\">.</span><span class=\"me1\">Item</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> Ancestors<span class=\"sy0\">.</span><span class=\"me1\">Count</span><br/>                    Print<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"st0\">\", \"</span> <span class=\"sy0\">&amp;</span> Ancestors<span class=\"sy0\">.</span><span class=\"me1\">Item</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">Next</span><br/>                PrintLine<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                Ancestors<span class=\"sy0\">.</span><span class=\"me1\">Clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">Else</span><br/>                PrintLine<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"st0\">\"Ancestors: None\"</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>            <span class=\"kw1\">If</span> CptDescendants<span class=\"br0\">(</span>Parent<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>                PrintLine<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"st0\">\"Descendants: \"</span> <span class=\"sy0\">&amp;</span> CptDescendants<span class=\"br0\">(</span>Parent<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">)</span><br/>                Delimiter <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>                PrintDescendants<span class=\"br0\">(</span>Parents<span class=\"br0\">(</span>Parent<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                PrintLine<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                TotDesc <span class=\"sy0\">+=</span> CptDescendants<span class=\"br0\">(</span>Parent<span class=\"br0\">)</span><br/>            <span class=\"kw1\">Else</span><br/>                PrintLine<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"st0\">\"Descendants: None\"</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>            PrintLine<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Next</span><br/>        Primes<span class=\"sy0\">.</span><span class=\"me1\">Clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        PrimesR<span class=\"sy0\">.</span><span class=\"me1\">Clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        PrintLine<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"st0\">\"Total descendants \"</span> <span class=\"sy0\">&amp;</span> TotDesc<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">)</span><br/>        PrintLine<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        FileClose<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>    <span class=\"kw1\">Function</span> InsertPreorder<span class=\"br0\">(</span>_index <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span>, _sum <span class=\"kw1\">As</span> <span class=\"kw2\">Short</span>, _prime <span class=\"kw1\">As</span> <span class=\"kw2\">Short</span><span class=\"br0\">)</span><br/>        Parents<span class=\"br0\">(</span>_sum<span class=\"br0\">)</span> <span class=\"sy0\">=</span> InsertChild<span class=\"br0\">(</span>Parents<span class=\"br0\">(</span>_sum<span class=\"br0\">)</span>, Children<span class=\"br0\">(</span>_index<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Child</span> <span class=\"sy0\">*</span> _prime<span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">If</span> Children<span class=\"br0\">(</span>_index<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">pLower</span> <span class=\"kw1\">Then</span><br/>            InsertPreorder<span class=\"br0\">(</span>Children<span class=\"br0\">(</span>_index<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">pLower</span>, _sum, _prime<span class=\"br0\">)</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>        <span class=\"kw1\">If</span> Children<span class=\"br0\">(</span>_index<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">pHigher</span> <span class=\"kw1\">Then</span><br/>            InsertPreorder<span class=\"br0\">(</span>Children<span class=\"br0\">(</span>_index<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">pHigher</span>, _sum, _prime<span class=\"br0\">)</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>        <span class=\"kw1\">Return</span> <span class=\"kw1\">Nothing</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>    <span class=\"kw1\">Function</span> InsertChild<span class=\"br0\">(</span>_index <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span>, _child <span class=\"kw1\">As</span> <span class=\"kw2\">Long</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>        <span class=\"kw1\">If</span> _index <span class=\"kw1\">Then</span><br/>            <span class=\"kw1\">If</span> _child <span class=\"sy0\">&lt;=</span> Children<span class=\"br0\">(</span>_index<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Child</span> <span class=\"kw1\">Then</span><br/>                Children<span class=\"br0\">(</span>_index<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">pLower</span> <span class=\"sy0\">=</span> InsertChild<span class=\"br0\">(</span>Children<span class=\"br0\">(</span>_index<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">pLower</span>, _child<span class=\"br0\">)</span><br/>            <span class=\"kw1\">Else</span><br/>                Children<span class=\"br0\">(</span>_index<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">pHigher</span> <span class=\"sy0\">=</span> InsertChild<span class=\"br0\">(</span>Children<span class=\"br0\">(</span>_index<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">pHigher</span>, _child<span class=\"br0\">)</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">Else</span><br/>            iChildren <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>            _index <span class=\"sy0\">=</span> iChildren<br/>            Children<span class=\"br0\">(</span>_index<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Child</span> <span class=\"sy0\">=</span> _child<br/>            Children<span class=\"br0\">(</span>_index<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">pLower</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            Children<span class=\"br0\">(</span>_index<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">pHigher</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>        <span class=\"kw1\">Return</span> _index<br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>    <span class=\"kw1\">Function</span> RemoveFalseChildren<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Dim</span> Exclusions <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> Collection<br/>\u00a0<br/>        Exclusions<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">For</span> <span class=\"kw1\">Each</span> Prime <span class=\"kw1\">In</span> Primes<br/>            Exclusions<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>Prime<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Next</span><br/>\u00a0<br/>        <span class=\"kw1\">For</span> <span class=\"kw1\">Each</span> ex <span class=\"kw1\">In</span> Exclusions<br/>            Parents<span class=\"br0\">(</span>ex<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Children<span class=\"br0\">(</span>Parents<span class=\"br0\">(</span>ex<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">pHigher</span><br/>            CptDescendants<span class=\"br0\">(</span>ex<span class=\"br0\">)</span> <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">Next</span><br/>\u00a0<br/>        Exclusions<span class=\"sy0\">.</span><span class=\"me1\">Clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Return</span> <span class=\"kw1\">Nothing</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>    <span class=\"kw1\">Function</span> GetAncestors<span class=\"br0\">(</span>_child <span class=\"kw1\">As</span> <span class=\"kw2\">Short</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Dim</span> Child <span class=\"kw1\">As</span> <span class=\"kw2\">Short</span> <span class=\"sy0\">=</span> _child<br/>        <span class=\"kw1\">Dim</span> Parent <span class=\"kw1\">As</span> <span class=\"kw2\">Short</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>        <span class=\"kw1\">For</span> <span class=\"kw1\">Each</span> Prime <span class=\"kw1\">In</span> Primes<br/>            <span class=\"kw1\">If</span> Child <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>                <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>            <span class=\"kw1\">While</span> Child <span class=\"kw1\">Mod</span> Prime <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>                Child <span class=\"sy0\">/=</span> Prime<br/>                Parent <span class=\"sy0\">+=</span> Prime<br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">While</span><br/>        <span class=\"kw1\">Next</span><br/>\u00a0<br/>        <span class=\"kw1\">If</span> Parent <span class=\"sy0\">=</span> _child <span class=\"kw1\">Or</span> _child <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>            <span class=\"kw1\">Return</span> <span class=\"kw1\">Nothing</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>        GetAncestors<span class=\"br0\">(</span>Parent<span class=\"br0\">)</span><br/>        Ancestors<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>Parent<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Return</span> <span class=\"kw1\">Nothing</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>    <span class=\"kw1\">Function</span> PrintDescendants<span class=\"br0\">(</span>_index <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> Children<span class=\"br0\">(</span>_index<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">pLower</span> <span class=\"kw1\">Then</span><br/>            PrintDescendants<span class=\"br0\">(</span>Children<span class=\"br0\">(</span>_index<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">pLower</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>        Print<span class=\"br0\">(</span><span class=\"nu0\">1</span>, Delimiter<span class=\"sy0\">.</span><span class=\"me1\">ToString</span> <span class=\"sy0\">&amp;</span> Children<span class=\"br0\">(</span>_index<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Child</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">)</span><br/>        Delimiter <span class=\"sy0\">=</span> <span class=\"st0\">\", \"</span><br/>\u00a0<br/>        <span class=\"kw1\">If</span> Children<span class=\"br0\">(</span>_index<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">pHigher</span> <span class=\"kw1\">Then</span><br/>            PrintDescendants<span class=\"br0\">(</span>Children<span class=\"br0\">(</span>_index<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">pHigher</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>        <span class=\"kw1\">Return</span> <span class=\"kw1\">Nothing</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>    <span class=\"kw1\">Function</span> GetPrimes<span class=\"br0\">(</span><span class=\"kw1\">ByRef</span> _primes <span class=\"kw1\">As</span> <span class=\"kw2\">Object</span>, <span class=\"kw1\">Optional</span> _maxPrime <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Boolean</span><br/>        <span class=\"kw1\">Dim</span> Value <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>        <span class=\"kw1\">Dim</span> Max <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>        <span class=\"kw1\">Dim</span> Prime <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>\u00a0<br/>        <span class=\"kw1\">If</span> _maxPrime <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span><br/>            <span class=\"kw1\">Return</span> vbFalse<br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>        _primes<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">While</span> Value <span class=\"sy0\">&lt;=</span> _maxPrime<br/>            Max <span class=\"sy0\">=</span> Floor<span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=SQRT+site:msdn.microsoft.com\"><span class=\"kw7\">Sqrt</span></a><span class=\"br0\">(</span>Value<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"kw1\">For</span> <span class=\"kw1\">Each</span> Prime <span class=\"kw1\">In</span> _primes<br/>                <span class=\"kw1\">If</span> Prime <span class=\"sy0\">&gt;</span> Max <span class=\"kw1\">Then</span><br/>                    _primes<span class=\"sy0\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>Value<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>                <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>                <span class=\"kw1\">If</span> Value <span class=\"kw1\">Mod</span> Prime <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>                    <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>                <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>            <span class=\"kw1\">Next</span><br/>\u00a0<br/>            Value <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">While</span><br/>\u00a0<br/>        <span class=\"kw1\">Return</span> vbTrue<br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Module</span></pre>"}, {"lang": "zkl", "loc": 30, "block": "<pre class=\"text highlighted_source\">const maxsum=99;<br/>\u00a0<br/>primes:=Utils.Generator(Import(\"sieve.zkl\").postponed_sieve)<br/>        .pump(List,'wrap(p){ (p&lt;=maxsum) and p or Void.Stop });<br/>\u00a0<br/>descendants,ancestors:=List()*(maxsum + 1), List()*(maxsum + 1);<br/>\u00a0<br/>foreach p in (primes){<br/>   descendants[p].insert(0,p);<br/>   foreach s in ([1..descendants.len() - p - 1]){<br/>      descendants[s + p].merge(descendants[s].apply('*(p)));<br/>   }<br/>}<br/>\u00a0<br/>    // descendants[prime] is a list that starts with prime, remove prime. 4:\u00a0???<br/>foreach p in (primes + 4) { descendants[p].pop(0) }<br/>\u00a0<br/>ta,td:=0,0;<br/>foreach s in ([1..maxsum]){<br/>   foreach d in (descendants[s].filter('&lt;=(maxsum))){<br/>      ancestors[d]=ancestors[s].copy() + s;<br/>   }<br/>\u00a0<br/>   println(\"%2d Ancestors: \".fmt(s),ancestors[s].len() and ancestors[s] or \"None\");<br/>   println(\"   Descendants: \", if(z:=descendants[s]) <br/>\t\t\t\tString(z.len(),\"\u00a0: \",z) else \"None\");<br/>   ta+=ancestors[s].len(); td+=descendants[s].len();<br/>} <br/>println(\"Total ancestors:\u00a0%,d\".fmt(ta));<br/>println(\"Total descendants:\u00a0%,d\".fmt(td));</pre>"}]}