{"task": "Topic_variable", "blocks": [{"lang": "AppleScript", "loc": 47, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>    ap<span class=\"br0\">(</span><span class=\"br0\">{</span>square, squareRoot<span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"kw1\">result</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; {9, 1.732050807569}</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- square\u00a0:: Num a =&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> square<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    x <span class=\"sy0\">*</span> x<br/><span class=\"kw3\">end</span> square<br/>\u00a0<br/><span class=\"co1\">-- squareRoot\u00a0:: Num a, Float b =&gt; a -&gt; b</span><br/><span class=\"kw3\">on</span> squareRoot<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    x <span class=\"sy0\">^</span> <span class=\"nu0\">0.5</span><br/><span class=\"kw3\">end</span> squareRoot<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- A list of functions applied to a list of arguments</span><br/><span class=\"co1\">-- (&lt;*&gt; | ap)\u00a0:: [(a -&gt; b)] -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> ap<span class=\"br0\">(</span>fs, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> f <span class=\"kw3\">in</span> fs<br/>        <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span><span class=\"kw1\">contents</span> <span class=\"kw3\">of</span> f<span class=\"br0\">)</span><br/>            <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> x <span class=\"kw3\">in</span> xs<br/>                <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">contents</span> <span class=\"kw3\">of</span> x<span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> ap<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "Axe", "loc": 2, "block": "<pre class=\"text highlighted_source\">3<br/>Disp *3\u25b6Dec,i</pre>"}, {"lang": "Clojure", "loc": 8, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/>user<span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3</span><br/><span class=\"nu0\">3</span><br/>user<span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>pow <span class=\"sy0\">*</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"nu0\">9.0</span><br/>user<span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>pow <span class=\"sy0\">*</span><span class=\"nu0\">2</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/><span class=\"nu0\">1.7320508075688772</span><br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre>7&gt; 1 + 2.\n3\n8&gt; v(-1).\n3\n</pre>"}, {"lang": "Forth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: myloop 11 1 do i . loop cr\u00a0; myloop</pre>"}, {"lang": "FreeBASIC", "loc": 20, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co1\">' Three different ways of returning a value from a function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> Sum <span class=\"br0\">(</span>x <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, y <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  Sum = x + y  <span class=\"co1\">'' using name of function</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> Sum2 <span class=\"br0\">(</span>x <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, y <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">Function</span> = x + y  <span class=\"co1\">'' using Function keyword</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> Sum3 <span class=\"br0\">(</span>x <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, y <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">Return</span> x + y  <span class=\"co1\">'' using Return keyword which always returns immediately</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> Sum <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> Sum2<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> Sum3<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 33, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"math\"</span><br/>    <span class=\"st0\">\"os\"</span><br/>    <span class=\"st0\">\"strconv\"</span><br/>    <span class=\"st0\">\"text/template\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> sqr<span class=\"sy1\">(</span>x <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    f<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> strconv<span class=\"sy3\">.</span>ParseFloat<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> <span class=\"nu0\">64</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"NA\"</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> strconv<span class=\"sy3\">.</span>FormatFloat<span class=\"sy1\">(</span>f<span class=\"sy3\">*</span>f<span class=\"sy1\">,</span> <span class=\"st0\">'f'</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">64</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> sqrt<span class=\"sy1\">(</span>x <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    f<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> strconv<span class=\"sy3\">.</span>ParseFloat<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> <span class=\"nu0\">64</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"NA\"</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> strconv<span class=\"sy3\">.</span>FormatFloat<span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Sqrt<span class=\"sy1\">(</span>f<span class=\"sy1\">),</span> <span class=\"st0\">'f'</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">64</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    f <span class=\"sy2\">:=</span> template<span class=\"sy3\">.</span>FuncMap<span class=\"sy1\">{</span><span class=\"st0\">\"sqr\"</span><span class=\"sy1\">:</span> sqr<span class=\"sy1\">,</span> <span class=\"st0\">\"sqrt\"</span><span class=\"sy1\">:</span> sqrt<span class=\"sy1\">}</span><br/>    t <span class=\"sy2\">:=</span> template<span class=\"sy3\">.</span><span class=\"me1\">Must</span><span class=\"sy1\">(</span>template<span class=\"sy3\">.</span><span class=\"me1\">New</span><span class=\"sy1\">(</span><span class=\"st0\">\"\"</span><span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"me1\">Funcs</span><span class=\"sy1\">(</span>f<span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"me1\">Parse</span><span class=\"sy1\">(</span><span class=\"co2\">`. = {{.}}<br/>square: {{sqr .}}<br/>square root: {{sqrt .}}<br/>`</span><span class=\"sy1\">))</span><br/>    t<span class=\"sy3\">.</span><span class=\"me1\">Execute</span><span class=\"sy1\">(</span>os<span class=\"sy3\">.</span><span class=\"me1\">Stdout</span><span class=\"sy1\">,</span> <span class=\"st0\">\"3\"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 6, "block": "<pre class=\"haskell highlighted_source\">\u00a0<br/>Prelude<span class=\"sy0\">&gt;</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><br/><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><br/>Prelude<span class=\"sy0\">&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> it<br/><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">16</span><span class=\"sy0\">,</span><span class=\"nu0\">25</span><span class=\"sy0\">,</span><span class=\"nu0\">36</span><span class=\"sy0\">,</span><span class=\"nu0\">49</span><span class=\"sy0\">,</span><span class=\"nu0\">64</span><span class=\"sy0\">,</span><span class=\"nu0\">81</span><span class=\"sy0\">,</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 3, "block": "<pre class=\"j highlighted_source\">   example=: *:,\u00a0%:  <span class=\"co1\">NB. *: is square,\u00a0%: is square root</span><br/>   example <span class=\"nu0\">3</span><br/><span class=\"nu0\">9</span> <span class=\"nu0\">1.73205</span></pre>"}, {"lang": "jq", "loc": 4, "block": "<pre class=\"text highlighted_source\">julia&gt; 3<br/>3<br/>julia&gt; ans * ans, ans - 1<br/>(9, 2)</pre>"}, {"lang": "Julia", "loc": 4, "block": "<pre class=\"text highlighted_source\">julia&gt; 3<br/>3<br/>julia&gt; ans * ans, ans - 1<br/>(9, 2)</pre>"}, {"lang": "Kotlin", "loc": 9, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"nu0\">3</span>.<span class=\"me1\">let</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span>it<span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span>it <span class=\"sy0\">*</span> it<span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span>Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>it.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre>In[1]:= 3\n\nOut[1]= 3\n\nIn[2]:=\u00a0%1^2\n\nOut[2]= 9\n\nIn[3]:= Sqrt[%%]\n\nOut[3]= Sqrt[3]\n\nIn[4]:= N[Out[-1]] (* for floating point *)\n\nOut[4]= 1.73205</pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">3 dup sq swap sqrt</pre>"}, {"lang": "PARI/GP", "loc": 2, "block": "<pre class=\"parigp highlighted_source\"><span class=\"nu1\">3</span><br/><span class=\"br0\">[</span><span class=\"kw1\">sqrt</span><span class=\"br0\">(</span><span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"sy0\">,%^</span><span class=\"nu1\">2</span><span class=\"br0\">]</span></pre>"}, {"lang": "Perl", "loc": 1, "block": "<pre class=\"perl highlighted_source\"><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a> <span class=\"sy0\">.</span> <span class=\"st0\">\" \"</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">64</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl 6", "loc": 3, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">given</span> <span class=\"nu0\">3</span> <span class=\"br0\">{</span><br/>    <span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> <span class=\"re0\">$_</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">.</span><span class=\"kw3\">sqrt</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 9, "block": "<pre class=\"text highlighted_source\">PicoLisp sets the value of the variable (symbol) '@' to the result of<br/>conditional and controlling expressions in flow- and logic-functions (cond, if,<br/>and, when, while, etc.).<br/>\u00a0<br/>Within a function or method '@' behaves like a local variable, i.e. its value is<br/>automatically saved upon function entry and restored at exit.<br/>\u00a0<br/>For example, to read the current input channel until EOF, and print the square<br/>of every item which is a number:</pre>"}, {"lang": "PowerShell", "loc": 4, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"nu0\">65</span>..<span class=\"nu0\">67</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span>     <span class=\"co1\"># Multiply the numbers by 2</span><br/><span class=\"nu0\">65</span>..<span class=\"nu0\">67</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re3\">char</span><span class=\"br0\">]</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"br0\">}</span>  <span class=\"co1\"># ASCII values of the numbers</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 5, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">3</span><br/><span class=\"nu0\">3</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> _*_<span class=\"sy0\">,</span> _**<span class=\"nu0\">0.5</span><br/><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.7320508075688772</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "Racket", "loc": 59, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(module topic1 racket<br/> \u00a0;; define $ as a \"parameter\", but make it look like a plain identifier<br/>  (provide $ (rename-out [$if if] [$#%app #%app]))<br/>  (define current-value (make-parameter #f))<br/>  (define-syntax $<br/>    (syntax-id-rules (set!)<br/>      [(_ x ...) ((current-value) x ...)]<br/>      [(set! _ val) (current-value val)]<br/>      [_ (current-value)]))<br/> \u00a0;; make an `if' form that binds it to the condition result<br/>  (define-syntax-rule ($if C T E)<br/>    (parameterize ([current-value C])<br/>      (if $ T E)))<br/> \u00a0;; function application with []s uses the topic variable for the first arg<br/>  (define-syntax ($#%app stx)<br/>    (syntax-case stx ()<br/>      [(_ f x y ...) (equal? #\\[ (syntax-property stx 'paren-shape))<br/>       #'(parameterize ([current-value x]) (f y ...))]<br/>      [(_ f x ...) #'(f x ...)])))<br/>\u00a0<br/>(module topic2 racket<br/> \u00a0;; better variant: define `$' as a syntax parameter, which is adjusted to an<br/> \u00a0;; actual local binding; make it work in `if', and have a function definition<br/> \u00a0;; form that binds it to the actual arguments<br/>  (provide $ (rename-out [$if if]) defun)<br/>  (require racket/stxparam)<br/>  (define-syntax-parameter $ (\u03bb(stx) (raise-syntax-error '$ \"not in scope\")))<br/>  (define-syntax-rule ($if C T E)<br/>    (let ([c C]) (syntax-parameterize ([$ (make-rename-transformer #'c)])<br/>                   (if c T E))))<br/>  (define-syntax-rule (defun name body ...)<br/>    (define (name arg)<br/>      (syntax-parameterize ([$ (make-rename-transformer #'arg)])<br/>        body ...)))<br/>  )<br/>\u00a0<br/>(module sample1 racket<br/>  (require (submod \"..\" topic1))<br/>  (if (memq 2 '(1 2 3)) (cadr $) 'missing)<br/> \u00a0;; =&gt; 3<br/>  (define (foo) (list (sqrt $) (* $ $)))<br/>  [foo 9]<br/> \u00a0;; =&gt; '(3 81)<br/>  )<br/>(require 'sample1)<br/>\u00a0<br/>(module sample2 racket<br/>  (require (submod \"..\" topic2))<br/>  (if (memq 2 '(1 2 3)) (cadr $) 'missing)<br/> \u00a0;; =&gt; 3<br/>  (defun foo (list (sqrt $) (* $ $)))<br/>  (foo 9)<br/> \u00a0;; =&gt; '(3 81)<br/>  )<br/>(require 'sample2)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 6, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm shows something close to a \"topic variable\" (for funcs/subs).*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N                            <span class=\"coMULTI\">/*get an arg from CL, maybe a 3? */</span><br/><span class=\"kw1\">say</span>  mysub<span class=\"br0\">(</span>N<span class=\"br0\">)</span>   <span class=\"st0\">'  \u25c4\u2500\u2500\u2500'</span>               <span class=\"coMULTI\">/*invoke a function to square it.*/</span><br/><span class=\"kw1\">exit</span>                                   <span class=\"coMULTI\">/*stick a fork in it, we're done.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500MYSUB subroutine (function)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>mysub:  <span class=\"kw1\">return</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span>               <span class=\"coMULTI\">/*return the square of passed arg*/</span></pre>"}, {"lang": "Ring", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>see \"sum1 = \" + sum1(1,2) + nl<br/>see \"sum2 = \" + sum2(2,3) + nl<br/>\u00a0<br/>func sum1 (x, y) <br/>     sum = x + y <br/>     return sum<br/>\u00a0<br/>func sum2 (x, y) <br/>     return x + y <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 7, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">while</span> DATA.<span class=\"kw3\">gets</span>     <span class=\"co1\"># assigns to $_ (local scope)</span><br/>  <span class=\"kw3\">print</span>             <span class=\"co1\"># If no arguments are given, prints $_</span><br/><span class=\"kw1\">end</span><br/>__END__<br/>This is line one<br/>This is line two<br/>This is line three</pre>"}, {"lang": "Scala", "loc": 13, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> TopicVar <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> SuperString<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> org<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> it<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> println<span class=\"br0\">(</span>org<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> SuperString<span class=\"br0\">(</span><span class=\"st0\">\"FvdB\"</span><span class=\"br0\">)</span><span class=\"br0\">{</span>it<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> SuperString<span class=\"br0\">(</span><span class=\"st0\">\"FvdB\"</span><span class=\"br0\">)</span><span class=\"br0\">{</span>println<span class=\"br0\">(</span>org<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>  Seq<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">foreach</span> <span class=\"br0\">{</span>println<span class=\"br0\">}</span><br/>  Seq<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">foreach</span> <span class=\"br0\">{</span>println<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  Seq<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>.<span class=\"me1\">foreach</span> <span class=\"br0\">{</span> it <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>it<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  Seq<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>.<span class=\"me1\">foreach</span> <span class=\"br0\">{</span> it <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>it + it<span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 1, "block": "<pre class=\"ruby highlighted_source\">say <span class=\"br0\">[</span><span class=\"nu0\">9</span>,<span class=\"nu0\">16</span>,<span class=\"nu0\">25</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">}</span>;   <span class=\"co1\"># prints: [3, 4, 5]</span></pre>"}, {"lang": "Standard ML", "loc": 7, "block": "<pre class=\"text highlighted_source\">- 3.0;<br/>val it = 3.0\u00a0: real<br/>- it * it;<br/>val it = 9.0\u00a0: real<br/>- Math.sqrt it;<br/>val it = 3.0\u00a0: real<br/>-</pre>"}, {"lang": "UNIX Shell", "loc": 2, "block": "<pre class=\"text highlighted_source\">multiply 3 4    # We assume this user defined function has been previously defined<br/>echo $?    # This will output 12, but $? will now be zero indicating a successful echo</pre>"}, {"lang": "zkl", "loc": 6, "block": "<pre class=\"text highlighted_source\">a,_,c:=List(1,2,3,4,5,6) //--&gt;a=1, c=3, here _ is used as \"ignore\"<br/>3.0\u00a0: _.sqrt()\u00a0: println(_) //--&gt;\"1.73205\", _ (and\u00a0:) is used to \"explode\" a computation<br/>                            // as syntactic sugar<br/>1.0 + 2\u00a0: _.sqrt()\u00a0: _.pow(4)  // no variables used, the compiler \"implodes\" the computation<br/>    // --&gt; 9<br/>\u00a0</pre>"}]}