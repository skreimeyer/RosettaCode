{"task": "Seven-sided_dice_from_five-sided_dice", "blocks": [{"lang": "Ada", "loc": 10, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">package</span> Random_57 <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Mod_7 <span class=\"kw1\">is</span> <span class=\"kw2\">mod</span> <span class=\"nu0\">7</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Random7 <span class=\"kw1\">return</span> Mod_7;<br/>     <span class=\"co1\">-- a \"fast\" implementation, minimazing the calls to the Random5 generator</span><br/>   <span class=\"kw3\">function</span> Simple_Random7 <span class=\"kw1\">return</span> Mod_7;<br/>     <span class=\"co1\">-- a simple implementation</span><br/>\u00a0<br/><span class=\"kw1\">end</span> Random_57;</pre>"}, {"lang": "ALGOL 68", "loc": 35, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> dice5 <span class=\"sy1\">=</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>  1 <span class=\"sy1\">+</span> <span class=\"kw8\">ENTIER</span> <span class=\"br0\">(</span>5<span class=\"sy1\">*</span>random<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> mulby5 <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>   <span class=\"kw8\">ABS</span> <span class=\"br0\">(</span><span class=\"kw8\">BIN</span> n <span class=\"kw11\">SHL</span> 2<span class=\"br0\">)</span> <span class=\"sy1\">+</span> n<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> dice7 <span class=\"sy1\">=</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"kw3\">INT</span> d55 <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>  <span class=\"kw3\">INT</span> m <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">WHILE</span><br/>    m <span class=\"sy1\">:=</span> <span class=\"kw8\">ABS</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">2r1</span> <span class=\"kw16\">AND</span> <span class=\"kw8\">BIN</span> m<span class=\"br0\">)</span> <span class=\"kw11\">SHL</span> 2<span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"kw8\">ABS</span> <span class=\"br0\">(</span><span class=\"kw8\">BIN</span> m <span class=\"kw11\">SHR</span> 1<span class=\"br0\">)</span><span class=\"sy1\">;</span>  <span class=\"coMULTI\"># repeats 4 - 2 - 1 #</span><br/>    d55 <span class=\"sy1\">:=</span> mulby5<span class=\"br0\">(</span>mulby5<span class=\"br0\">(</span>d55<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> mulby5<span class=\"br0\">(</span>dice5<span class=\"br0\">)</span> <span class=\"sy1\">+</span> dice5 <span class=\"sy1\">-</span> 6<span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># WHILE #</span> d55 <span class=\"sy1\">&lt;</span> m <span class=\"kw2\">DO</span> <span class=\"kw7\">SKIP</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  m <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">WHILE</span> d55<span class=\"sy1\">&gt;</span>0 <span class=\"kw2\">DO</span><br/>    d55 <span class=\"sy1\">+:=</span> m<span class=\"sy1\">;</span><br/>    m <span class=\"sy1\">:=</span> <span class=\"kw8\">ABS</span> <span class=\"br0\">(</span><span class=\"kw8\">BIN</span> d55 <span class=\"kw16\">AND</span> <span class=\"re0\">2r111</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># modulas by 8 #</span><br/>    d55 <span class=\"sy1\">:=</span> <span class=\"kw8\">ABS</span> <span class=\"br0\">(</span><span class=\"kw8\">BIN</span> d55 <span class=\"kw11\">SHR</span> 3<span class=\"br0\">)</span>    <span class=\"coMULTI\"># divide by 8 #</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  m<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> distcheck <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">PROC</span> <span class=\"kw3\">INT</span> dice<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> count<span class=\"sy1\">,</span> upb<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"br0\">[</span>upb<span class=\"br0\">]</span><span class=\"kw3\">INT</span> sum<span class=\"sy1\">;</span> <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> sum <span class=\"kw2\">DO</span> sum<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 0 <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> count <span class=\"kw2\">DO</span> sum<span class=\"br0\">[</span>dice<span class=\"br0\">]</span><span class=\"sy1\">+:=</span>1 <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> sum <span class=\"kw2\">WHILE</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"kw22\">whole</span><span class=\"br0\">(</span>sum<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">,</span>0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> i <span class=\"sy1\">/=</span> <span class=\"kw8\">UPB</span> sum <span class=\"kw2\">DO</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  distcheck<span class=\"br0\">(</span>dice5<span class=\"sy1\">,</span> 1000000<span class=\"sy1\">,</span> 5<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  distcheck<span class=\"br0\">(</span>dice7<span class=\"sy1\">,</span> 1000000<span class=\"sy1\">,</span> 7<span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 11, "block": "<pre class=\"autohotkey highlighted_source\">dice5<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span>  <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> v<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><br/>   <span class=\"kw1\">Return</span><span class=\"sy0\">,</span> v<br/><span class=\"br0\">}</span><br/>\u00a0<br/>dice7<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span>  <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><br/>   <span class=\"br0\">{</span>  v <span class=\"sy0\">:=</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">6</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/IfLess.htm\"><span class=\"kw3\">IfLess</span></a> v<span class=\"sy0\">,</span> <span class=\"nu0\">21</span><span class=\"sy0\">,</span> <span class=\"kw1\">Return</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>v <span class=\"sy0\">//</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BBC BASIC", "loc": 31, "block": "<pre class=\"text highlighted_source\">      MAXRND = 7<br/>      FOR r% = 2 TO 5<br/>        check% = FNdistcheck(FNdice7, 10^r%, 0.1)<br/>        PRINT \"Over \"; 10^r% \" runs dice7 \";<br/>        IF check% THEN<br/>          PRINT \"failed distribution check with \"; check% \" bin(s) out of range\"<br/>        ELSE<br/>          PRINT \"passed distribution check\"<br/>        ENDIF<br/>      NEXT<br/>      END<br/>\u00a0<br/>      DEF FNdice7<br/>      LOCAL x%\u00a0: x% = FNdice5 + 5*FNdice5<br/>      IF x%&gt;26 THEN = FNdice7 ELSE = (x%+1) MOD 7 + 1<br/>\u00a0<br/>      DEF FNdice5 = RND(5)<br/>\u00a0<br/>      DEF FNdistcheck(RETURN func%, repet%, delta)<br/>      LOCAL i%, m%, r%, s%, bins%()<br/>      DIM bins%(MAXRND)<br/>      FOR i% = 1 TO repet%<br/>        r% = FN(^func%)<br/>        bins%(r%) += 1<br/>        IF r%&gt;m% m% = r%<br/>      NEXT<br/>      FOR i% = 1 TO m%<br/>        IF bins%(i%)/(repet%/m%) &gt; 1+delta s% += 1<br/>        IF bins%(i%)/(repet%/m%) &lt; 1-delta s% += 1<br/>      NEXT<br/>      = s%</pre>"}, {"lang": "C", "loc": 20, "block": "<pre class=\"c highlighted_source\"><span class=\"kw4\">int</span> rand5<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> r<span class=\"sy0\">,</span> rand_max <span class=\"sy0\">=</span> RAND_MAX <span class=\"sy0\">-</span> <span class=\"br0\">(</span>RAND_MAX <span class=\"sy0\">%</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>r <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> rand_max<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> r <span class=\"sy0\">/</span> <span class=\"br0\">(</span>rand_max <span class=\"sy0\">/</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> rand5_7<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> r<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>r <span class=\"sy0\">=</span> rand5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span> <span class=\"sy0\">+</span> rand5<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">27</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> r <span class=\"sy0\">/</span> <span class=\"nu0\">3</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span>check<span class=\"br0\">(</span>rand5<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">,</span> <span class=\"nu18\">.05</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"flat<span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"not flat<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span>check<span class=\"br0\">(</span>rand7<span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">,</span> <span class=\"nu18\">.05</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"flat<span class=\"es1\">\\n</span>\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"not flat<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 49, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> F<span class=\"sy1\">&gt;</span> <span class=\"kw2\">class</span> fivetoseven<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  fivetoseven<span class=\"br0\">(</span>F f<span class=\"br0\">)</span><span class=\"sy4\">:</span> d5<span class=\"br0\">(</span>f<span class=\"br0\">)</span>, rem<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, max<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw4\">int</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>  F d5<span class=\"sy4\">;</span><br/>  <span class=\"kw4\">int</span> rem, max<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> F<span class=\"sy1\">&gt;</span><br/> <span class=\"kw4\">int</span> fivetoseven<span class=\"sy1\">&lt;</span>F<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">operator</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>rem<span class=\"sy2\">/</span><span class=\"nu0\">7</span> <span class=\"sy1\">==</span> max<span class=\"sy2\">/</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>max <span class=\"sy1\">&lt;</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw4\">int</span> rand5 <span class=\"sy1\">=</span> d5<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>      max <span class=\"sy2\">*</span><span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy4\">;</span><br/>      rem <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy2\">*</span>rem <span class=\"sy2\">+</span> rand5<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> groups <span class=\"sy1\">=</span> max <span class=\"sy2\">/</span> <span class=\"nu0\">7</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rem <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">7</span><span class=\"sy2\">*</span>groups<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      rem <span class=\"sy2\">-</span><span class=\"sy1\">=</span> <span class=\"nu0\">7</span><span class=\"sy2\">*</span>groups<span class=\"sy4\">;</span><br/>      max <span class=\"sy2\">-</span><span class=\"sy1\">=</span> <span class=\"nu0\">7</span><span class=\"sy2\">*</span>groups<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">int</span> result <span class=\"sy1\">=</span> rem <span class=\"sy2\">%</span> <span class=\"nu0\">7</span><span class=\"sy4\">;</span><br/>  rem <span class=\"sy2\">/</span><span class=\"sy1\">=</span> <span class=\"nu0\">7</span><span class=\"sy4\">;</span><br/>  max <span class=\"sy2\">/</span><span class=\"sy1\">=</span> <span class=\"nu0\">7</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> result<span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> d5<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu16\">5.0</span><span class=\"sy2\">*</span>std<span class=\"sy4\">::</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy2\">/</span><span class=\"br0\">(</span><span class=\"kw2\">RAND_MAX</span> <span class=\"sy2\">+</span> <span class=\"nu16\">1.0</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fivetoseven<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"sy2\">*</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">&gt;</span> d7<span class=\"br0\">(</span>d5<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw3\">srand</span><span class=\"br0\">(</span><span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  test_distribution<span class=\"br0\">(</span>d5, <span class=\"nu0\">1000000</span>, <span class=\"nu16\">0.001</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  test_distribution<span class=\"br0\">(</span>d7, <span class=\"nu0\">1000000</span>, <span class=\"nu16\">0.001</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 27, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> SevenSidedDice<br/><span class=\"br0\">{</span><br/>    Random random <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tSevenSidedDice sevenDice <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> SevenSidedDice<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Random number from 1 to 7: \"</span><span class=\"sy0\">+</span> sevenDice<span class=\"sy0\">.</span><span class=\"me1\">seven</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">Read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw4\">int</span> seven<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">int</span> v<span class=\"sy0\">=</span><span class=\"nu0\">21</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>v<span class=\"sy0\">&gt;</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>\t\t\t\tv<span class=\"sy0\">=</span>five<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>five<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">5</span><span class=\"sy0\">-</span><span class=\"nu0\">6</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">+</span>v<span class=\"sy0\">%</span>7<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw4\">int</span> five<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> random<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 15, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">def</span> dice5 #<span class=\"br0\">(</span>rand<span class=\"sy0\">-</span>int <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> dice7 <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>quot <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> dice5                     <span class=\"co1\">; do the following to dice5</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">repeatedly</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>            <span class=\"co1\">; call it twice</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #<span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"sy0\">%</span>1 <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">5</span> <span class=\"sy0\">%</span>2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">; d1 + 5*d2 =&gt; 0..24</span><br/>             #<span class=\"br0\">(</span><span class=\"br0\">)</span>                       <span class=\"co1\">; wrap that up in a function</span><br/>             <span class=\"kw1\">repeatedly</span>                <span class=\"co1\">; make infinite sequence of the above</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">drop-while</span> #<span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"sy0\">%</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co1\">; throw away anything &gt; 20</span><br/>             <span class=\"kw1\">first</span><span class=\"br0\">)</span>                    <span class=\"co1\">; grab first acceptable element</span><br/>        <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                            <span class=\"co1\">; divide by three rounding down</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>n <span class=\"br0\">[</span><span class=\"nu0\">100</span> <span class=\"nu0\">1000</span> <span class=\"nu0\">10000</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>num <span class=\"kw1\">count</span> okay?<span class=\"br0\">]</span> <span class=\"br0\">(</span>verify dice7 n<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>println <span class=\"st0\">\"Saw\"</span> num <span class=\"kw1\">count</span> <span class=\"st0\">\"times:\"</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">if</span> okay? <span class=\"st0\">\"that's\"</span> <span class=\"st0\">\"   not\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"acceptable\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 7, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> d5 <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> d7 <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for d55 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* <span class=\"nu0\">5</span> <span class=\"br0\">(</span>d5<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>d5<span class=\"br0\">)</span> -<span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>        until <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> d55 <span class=\"nu0\">21</span><span class=\"br0\">)</span><br/>        finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span>mod d55 <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 47, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">random</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> verify_distribution_uniformity_naive<span class=\"sy0\">:</span> distCheck<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">/// Generates a random number in [1, 5].</span><br/><span class=\"kw4\">int</span> dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*pure nothrow*/</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> uniform<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">/// Naive, generates a random number in [1, 7] using dice5.</span><br/><span class=\"kw4\">int</span> fiveToSevenNaive<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*pure nothrow*/</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span> <span class=\"sy0\">-</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>r <span class=\"sy0\">&lt;</span> <span class=\"nu0\">21</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span>r <span class=\"sy0\">%</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> fiveToSevenNaive<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co3\">/**<br/>Generates a random number in [1, 7] using dice5,<br/>minimizing calls to dice5.<br/>*/</span><br/><span class=\"kw4\">int</span> fiveToSevenSmart<span class=\"br0\">(</span><span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> rem <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> max <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>rem <span class=\"sy0\">/</span> <span class=\"nu0\">7</span> <span class=\"sy0\">==</span> max <span class=\"sy0\">/</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>max <span class=\"sy0\">&lt;</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">immutable</span> <span class=\"kw4\">int</span> rand5 <span class=\"sy0\">=</span> dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            max <span class=\"sy0\">*=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>            rem <span class=\"sy0\">=</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> rem <span class=\"sy0\">+</span> rand5<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">immutable</span> <span class=\"kw4\">int</span> groups <span class=\"sy0\">=</span> max <span class=\"sy0\">/</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rem <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">7</span> <span class=\"sy0\">*</span> groups<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            rem <span class=\"sy0\">-=</span> <span class=\"nu0\">7</span> <span class=\"sy0\">*</span> groups<span class=\"sy0\">;</span><br/>            max <span class=\"sy0\">-=</span> <span class=\"nu0\">7</span> <span class=\"sy0\">*</span> groups<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">int</span> result <span class=\"sy0\">=</span> rem <span class=\"sy0\">%</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span><br/>    rem <span class=\"sy0\">/=</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span><br/>    max <span class=\"sy0\">/=</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> result <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> <span class=\"kw4\">int</span> N <span class=\"sy0\">=</span> <span class=\"nu0\">400</span>_000<span class=\"sy0\">;</span><br/>    distCheck<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>dice5<span class=\"sy0\">,</span> N<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    distCheck<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>fiveToSevenNaive<span class=\"sy0\">,</span> N<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    distCheck<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>fiveToSevenSmart<span class=\"sy0\">,</span> N<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 9, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  return <a href=\"http://wiki.erights.org/wiki/entropy\"><span class=\"kw7\">entropy</span></a>.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> dice7<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> d55 <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><br/>  <a href=\"http://wiki.erights.org/wiki/while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>d55 <span class=\"sy0\">:=</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">21</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  return d55 <span class=\"sy0\">%%</span> <span class=\"nu0\">7</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 18, "block": "<pre class=\"text highlighted_source\">defmodule Dice do<br/>  def dice5, do:\u00a0:rand.uniform( 5 )<br/>\u00a0<br/>  def dice7 do<br/>    dice7_from_dice5<br/>  end<br/>\u00a0<br/>  defp dice7_from_dice5 do<br/>    d55 = 5*dice5 + dice5 - 6           # 0..24<br/>    if d55 &lt; 21, do: rem( d55, 7 ) + 1,<br/>                 else: dice7_from_dice5<br/>  end<br/>end<br/>\u00a0<br/>fun5 = fn -&gt; Dice.dice5 end<br/>IO.inspect VerifyDistribution.naive( fun5, 1000000, 3 )<br/>fun7 = fn -&gt; Dice.dice7 end<br/>IO.inspect VerifyDistribution.naive( fun7, 1000000, 3 )</pre>"}, {"lang": "Erlang", "loc": 18, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> dice <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>dice5<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> dice7<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">dice5</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">dice7</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re3\">dice7_small_enough</span><span class=\"br0\">(</span> <span class=\"re3\">dice5</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"nu0\">5</span> <span class=\"sy3\">+</span> <span class=\"re3\">dice5</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">6</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span> <span class=\"co1\">% 0 - 24</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>       <span class=\"me1\">verify_distribution_uniformity</span>:<span class=\"re3\">naive</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> dice7<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1000000</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">dice7_small_enough</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">21</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">N</span> <span class=\"kw2\">div</span> <span class=\"nu0\">3</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/><span class=\"re3\">dice7_small_enough</span><span class=\"br0\">(</span> <span class=\"re5\">_N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">dice7</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 57, "block": "<pre class=\"text highlighted_source\">USING: kernel random sequences assocs locals sorting prettyprint<br/>  math math.functions math.statistics math.vectors math.ranges\u00a0;<br/>IN: rosetta-code.dice7<br/>\u00a0<br/>! Output a random integer 1..5.<br/>: dice5 ( -- x )<br/>   5 [1,b] random<br/>;<br/>\u00a0<br/>! Output a random integer 1..7 using dice5 as randomness source.<br/>: dice7 ( -- x )<br/>   0 [ dup 21 &lt; ] [ drop dice5 5 * dice5 + 6 - ] do until<br/>   7 rem 1 +<br/>;<br/>\u00a0<br/>! Roll the die by calling the quotation the given number of times and return<br/>! an array with roll results.<br/>! Sample call: 1000 [ dice7 ] roll<br/>: roll ( times quot: ( -- x ) -- array )<br/>   [ call( --  x ) ] curry replicate<br/>;<br/>\u00a0<br/>! Input array contains outcomes of a number of die throws. Each die result is<br/>! an integer in the range 1..X. Calculate and return the number of each<br/>! of the results in the array so that in the first position of the result<br/>! there is the number of ones in the input array, in the second position<br/>! of the result there is the number of twos in the input array, etc.<br/>: count-dice-outcomes ( X array -- array )<br/>    histogram<br/>    swap [1,b] [ over [ 0 or ] change-at ] each<br/>    sort-keys values<br/>;<br/>\u00a0<br/>! Verify distribution uniformity/Naive. Delta is the acceptable deviation<br/>! from the ideal number of items in each bucket, expressed as a fraction of<br/>! the total count. Sides is the number of die sides. Die-func is a word that<br/>! produces a random number on stack in the range [1..sides], times is the<br/>! number of times to call it.<br/>! Sample call: 0.02 7 [ dice7 ] 100000 verify<br/>:: verify ( delta sides die-func: ( -- random ) times -- )<br/>   sides<br/>   times die-func roll<br/>   count-dice-outcomes<br/>   dup .<br/>   times sides /\u00a0:&gt; ideal-count<br/>   ideal-count v-n vabs<br/>   times v/n<br/>   delta [ &lt; ] curry all?<br/>   [ \"Random enough\" . ] [ \"Not random enough\" . ] if<br/>;<br/>\u00a0<br/>\u00a0<br/>! Call verify with 1, 10, 100, ... 1000000 rolls of 7-sided die.<br/>: verify-all ( -- )<br/>   { 1 10 100 1000 10000 100000 1000000 }<br/>   [| times | 0.02 7 [ dice7 ] times verify ] each<br/>;</pre>"}, {"lang": "Forth", "loc": 7, "block": "<pre class=\"text highlighted_source\">require random.fs<br/>\u00a0<br/>: d5 5 random 1+\u00a0;<br/>: discard? 5 = swap 1 &gt; and\u00a0;<br/>: d7<br/>   begin d5 d5 2dup discard? while 2drop repeat<br/>   1- 5 * + 1- 7 mod 1+\u00a0;</pre>"}, {"lang": "Fortran", "loc": 37, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> rand_mod<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw1\">function</span> rand5<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">rand5</span><br/>  <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">r</span><br/>\u00a0<br/>  <span class=\"kw1\">call</span> <span class=\"kw4\">random_number</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>  rand5 <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">*</span>r <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> rand7<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">rand7</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span><br/>    rand7 <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">*</span>rand5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> rand5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">6</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rand7 &lt; <span class=\"nu0\">21</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      rand7 <span class=\"sy0\">=</span> rand7 <span class=\"sy0\">/</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span><br/>\u00a0<br/><span class=\"kw1\">program</span> Randtest<br/>  <span class=\"kw3\">use</span> rand_mod<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">samples</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span><br/>\u00a0<br/>  <span class=\"kw1\">call</span> distcheck<span class=\"br0\">(</span>rand7, samples, <span class=\"nu0\">0.005</span><span class=\"br0\">)</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> distcheck<span class=\"br0\">(</span>rand7, samples, <span class=\"nu0\">0.001</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "Go", "loc": 56, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// \"given\"</span><br/><span class=\"kw4\">func</span> dice5<span class=\"sy1\">()</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// function specified by task \"Seven-sided dice from five-sided dice\"</span><br/><span class=\"kw4\">func</span> dice7<span class=\"sy1\">()</span> <span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>        <span class=\"nu2\">i</span> <span class=\"sy2\">=</span> <span class=\"nu0\">5</span><span class=\"sy3\">*</span>dice5<span class=\"sy1\">()</span> <span class=\"sy3\">+</span> dice5<span class=\"sy1\">()</span><br/>        <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">27</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"sy3\">/</span> <span class=\"nu0\">3</span><span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// function specified by task \"Verify distribution uniformity/Naive\"</span><br/><span class=\"co1\">//</span><br/><span class=\"co1\">// Parameter \"f\" is expected to return a random integer in the range 1..n.</span><br/><span class=\"co1\">// (Values out of range will cause an unceremonious crash.)</span><br/><span class=\"co1\">// \"Max\" is returned as an \"indication of distribution achieved.\"</span><br/><span class=\"co1\">// It is the maximum delta observed from the count representing a perfectly</span><br/><span class=\"co1\">// uniform distribution.</span><br/><span class=\"co1\">// Also returned is a boolean, true if \"max\" is less than threshold</span><br/><span class=\"co1\">// parameter \"delta.\"</span><br/><span class=\"kw4\">func</span> distCheck<span class=\"sy1\">(</span>f <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"kw4\">int</span><span class=\"sy1\">,</span> n <span class=\"kw4\">int</span><span class=\"sy1\">,</span><br/>    repeats <span class=\"kw4\">int</span><span class=\"sy1\">,</span> delta <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>max <span class=\"kw4\">float64</span><span class=\"sy1\">,</span> flatEnough <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    count <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; repeats<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        count<span class=\"sy1\">[</span>f<span class=\"sy1\">()</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><span class=\"sy2\">++</span><br/>    <span class=\"sy1\">}</span><br/>    expected <span class=\"sy2\">:=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>repeats<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> c <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> count <span class=\"sy1\">{</span><br/>        max <span class=\"sy2\">=</span> math<span class=\"sy3\">.</span>Max<span class=\"sy1\">(</span>max<span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>Abs<span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span>c<span class=\"sy1\">)</span><span class=\"sy3\">-</span>expected<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> max<span class=\"sy1\">,</span> max &lt; delta<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// Driver, produces output satisfying both tasks.</span><br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    rand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>UnixNano<span class=\"sy1\">())</span><br/>    <span class=\"kw1\">const</span> calls <span class=\"sy2\">=</span> <span class=\"nu0\">1000000</span><br/>    max<span class=\"sy1\">,</span> flatEnough <span class=\"sy2\">:=</span> distCheck<span class=\"sy1\">(</span>dice7<span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">,</span> calls<span class=\"sy1\">,</span> <span class=\"nu0\">500</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Max delta:\"</span><span class=\"sy1\">,</span> max<span class=\"sy1\">,</span> <span class=\"st0\">\"Flat enough:\"</span><span class=\"sy1\">,</span> flatEnough<span class=\"sy1\">)</span><br/>    max<span class=\"sy1\">,</span> flatEnough <span class=\"sy2\">=</span> distCheck<span class=\"sy1\">(</span>dice7<span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">,</span> calls<span class=\"sy1\">,</span> <span class=\"nu0\">500</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Max delta:\"</span><span class=\"sy1\">,</span> max<span class=\"sy1\">,</span> <span class=\"st0\">\"Flat enough:\"</span><span class=\"sy1\">,</span> flatEnough<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 13, "block": "<pre class=\"groovy highlighted_source\">random <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=Random&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> rand5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    random.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> rand7From5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> raw <span class=\"sy0\">=</span> <span class=\"nu0\">25</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>raw <span class=\"sy0\">&gt;</span> <span class=\"nu0\">21</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        raw <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>rand5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> rand5<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"br0\">(</span>raw <span class=\"sy0\">%</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 9, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/>\u00a0<br/>sevenFrom5Dice <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  d51 <span class=\"sy0\">&lt;-</span> randomRIO<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>  d52 <span class=\"sy0\">&lt;-</span> randomRIO<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>  <span class=\"kw1\">let</span> d7 <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">*</span>d51<span class=\"sy0\">+</span>d52<span class=\"sy0\">-</span><span class=\"nu0\">6</span><br/>  <span class=\"kw1\">if</span> d7 <span class=\"sy0\">&gt;</span> <span class=\"nu0\">20</span> <span class=\"kw1\">then</span> sevenFrom5Dice<br/>       <span class=\"kw1\">else</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">$</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> d7 `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` <span class=\"nu0\">7</span></pre>"}, {"lang": "Icon and Unicon", "loc": 17, "block": "<pre class=\"icon highlighted_source\">\u00a0<br/><span class=\"sy2\">$</span><span class=\"kw6\">include</span> <span class=\"st0\">\"distribution-checker.icn\"</span><br/>\u00a0<br/><span class=\"co1\"># return a uniformly distributed number from 1 to 7,</span><br/><span class=\"co1\"># but only using a random number in range 1 to 5.</span><br/><span class=\"kw1\">procedure</span> die_7 <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">while</span> rnd <span class=\"sy1\">:=</span> <span class=\"nu0\">5</span><span class=\"sy1\">*?</span><span class=\"nu0\">5</span> <span class=\"sy1\">+</span> <span class=\"sy1\">?</span><span class=\"nu0\">5</span> <span class=\"sy1\">-</span> <span class=\"nu0\">6</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> rnd <span class=\"sy1\">&lt;</span> <span class=\"nu0\">21</span> <span class=\"kw1\">then</span> <span class=\"kw1\">suspend</span> rnd <span class=\"sy1\">%</span> <span class=\"nu0\">7</span> <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> verify_uniform <span class=\"br0\">(</span><span class=\"kw1\">create</span> <span class=\"br0\">(</span><span class=\"sy1\">|</span>die_7<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"nu0\">1000000</span><span class=\"sy1\">,</span> <span class=\"nu0\">0.01</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">then</span> <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"uniform\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"skewed\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 7, "block": "<pre class=\"j highlighted_source\">rollD5=: [: &gt;: ]\u00a0<a class=\"__cf_email__\" data-cfemail=\"310e71\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>$ 5:      <span class=\"co1\">NB. makes a y shape array of 5s, \"rolls\" the array and increments.</span><br/>roll2xD5=: [: rollD5 <span class=\"nu0\">2</span> ,~ */ <span class=\"co1\">NB. rolls D5 twice for each desired D7 roll (y rows, 2 cols)</span><br/>toBase10=: <span class=\"nu0\">5</span> #. &lt;:           <span class=\"co1\">NB. decrements and converts rows from base 5 to 10</span><br/>keepGood=: #~ <span class=\"nu0\">21</span>&amp;&gt;           <span class=\"co1\">NB. compress out values not less than 21</span><br/>groupin3s=: [: &gt;. &gt;:\u00a0% 3:    <span class=\"co1\">NB. increments, divides by 3 and takes ceiling</span><br/>\u00a0<br/>getD7=: <a class=\"__cf_email__\" data-cfemail=\"0661746973766f683575466d63637641696962\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@<a class=\"__cf_email__\" data-cfemail=\"493d260b283a2c7879093b2625257b310d7c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></pre>"}, {"lang": "Java", "loc": 21, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Random</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> SevenSidedDice <br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a> rnd <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tSevenSidedDice now<span class=\"sy0\">=</span><span class=\"kw1\">new</span> SevenSidedDice<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Random number from 1 to 7: \"</span><span class=\"sy0\">+</span>now.<span class=\"me1\">seven</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw4\">int</span> seven<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> v<span class=\"sy0\">=</span><span class=\"nu0\">21</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>v<span class=\"sy0\">&gt;</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>\t\t\tv<span class=\"sy0\">=</span>five<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>five<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">5</span><span class=\"sy0\">-</span><span class=\"nu0\">6</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">+</span>v<span class=\"sy0\">%</span>7<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw4\">int</span> five<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">+</span>rnd.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 18, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> dice5<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"nu0\">5</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> dice7<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/> while <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><br/> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> dice55 <span class=\"sy0\">=</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dice55 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">21</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> dice55 <span class=\"sy0\">%</span> <span class=\"nu0\">7</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>distcheck<span class=\"br0\">(</span>dice5<span class=\"sy0\">,</span> <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>print<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>distcheck<span class=\"br0\">(</span>dice7<span class=\"sy0\">,</span> <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Julia", "loc": 6, "block": "<pre class=\"text highlighted_source\">dice5() = rand(1:5)<br/>\u00a0<br/>function dice7()<br/>    r = 5*dice5() + dice5() - 6<br/>    r &lt; 21\u00a0? (r%7 + 1)\u00a0: dice7()<br/>end</pre>"}, {"lang": "Kotlin", "loc": 44, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> + r.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun dice7<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> t <span class=\"sy0\">=</span> <span class=\"br0\">(</span>dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span> + dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>       <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>t <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">21</span><span class=\"br0\">)</span> continue<br/>       <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"nu0\">1</span> + t / <span class=\"nu0\">3</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun checkDist<span class=\"br0\">(</span>gen<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Int, nRepeats<span class=\"sy0\">:</span> Int, tolerance<span class=\"sy0\">:</span> Double <span class=\"sy0\">=</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> occurs <span class=\"sy0\">=</span> mutableMapOf<span class=\"sy0\">&lt;</span>Int, Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"me1\">nRepeats</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d <span class=\"sy0\">=</span> gen<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>occurs.<span class=\"me1\">containsKey</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            occurs<span class=\"br0\">[</span>d<span class=\"br0\">]</span> <span class=\"sy0\">=</span> occurs<span class=\"br0\">[</span>d<span class=\"br0\">]</span><span class=\"sy0\">!!</span> + <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>            occurs.<span class=\"me1\">put</span><span class=\"br0\">(</span>d, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> expected <span class=\"sy0\">=</span> <span class=\"br0\">(</span>nRepeats.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span>/ occurs.<span class=\"me1\">size</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> maxError <span class=\"sy0\">=</span> <span class=\"br0\">(</span>expected <span class=\"sy0\">*</span> tolerance / <span class=\"nu0\">100.0</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Repetitions = $nRepeats, Expected = $expected\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Tolerance = $tolerance%, Max Error = $maxError<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Integer   Occurrences   Error  Acceptable\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> <span class=\"st0\">\" \u00a0%d       \u00a0%5d     \u00a0%5d    \u00a0%s\"</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> allAcceptable <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>k,v<span class=\"br0\">)</span> in occurs.<span class=\"me1\">toSortedMap</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> error <span class=\"sy0\">=</span> Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>v - expected<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> acceptable <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>error <span class=\"sy0\">&lt;=</span> maxError<span class=\"br0\">)</span> <span class=\"st0\">\"Yes\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"No\"</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>acceptable <span class=\"sy0\">==</span> <span class=\"st0\">\"No\"</span><span class=\"br0\">)</span> allAcceptable <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        println<span class=\"br0\">(</span>f.<span class=\"me1\">format</span><span class=\"br0\">(</span>k, v, error, acceptable<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span>  <br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Acceptable overall: ${if (allAcceptable) \"</span>Yes<span class=\"st0\">\" else \"</span>No<span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    checkDist<span class=\"br0\">(</span><span class=\"sy0\">::</span>dice7, <span class=\"nu0\">1</span><span class=\"sy0\">_</span>400<span class=\"sy0\">_</span>000<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 25, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>n<span class=\"sy0\">=</span><span class=\"nu0\">1000000</span>    <span class=\"co1\">'1000000 would take several minutes</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Testing \"</span>;n;<span class=\"st0\">\" times\"</span><br/><span class=\"kw1\">if</span>  <span class=\"kw2\">not</span><span class=\"br0\">(</span>check<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">0.05</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">print</span> <span class=\"st0\">\"Test failed\"</span> <span class=\"kw1\">else</span> <span class=\"kw1\">print</span> <span class=\"st0\">\"Test passed\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">'function check(n, delta) is defined at</span><br/><span class=\"co1\">'http://rosettacode.org/wiki/Verify_distribution_uniformity/Naive#Liberty_BASIC</span><br/>\u00a0<br/><span class=\"kw1\">function</span> GENERATOR<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">'GENERATOR = int(rnd(0)*10) '0..9</span><br/>    <span class=\"co1\">'GENERATOR = 1+int(rnd(0)*5) '1..5: dice5</span><br/>\u00a0<br/>    <span class=\"co1\">'dice7()</span><br/>    <span class=\"kw1\">do</span><br/>        temp <span class=\"sy0\">=</span>dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span><span class=\"nu0\">5</span> <span class=\"sy0\">+</span>dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"nu0\">6</span><br/>    <span class=\"kw1\">loop</span> <span class=\"kw1\">until</span> temp <span class=\"sy0\">&lt;</span><span class=\"nu0\">21</span><br/>    GENERATOR <span class=\"sy0\">=</span><span class=\"br0\">(</span> temp <span class=\"kw1\">mod</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> dice5<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    dice5<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw2\">rnd</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"co1\">'1..5: dice5</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 7, "block": "<pre class=\"lua highlighted_source\">dice5 <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> dice7<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  x <span class=\"sy0\">=</span> dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span> <span class=\"sy0\">+</span> dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">6</span><br/>  <span class=\"kw1\">if</span> x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">20</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> dice7<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> x<span class=\"sy0\">%</span><span class=\"nu0\">7</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">sevenFrom5Dice\u00a0:= (tmp$ = 5*RandomInteger[{1, 5}] + RandomInteger[{1, 5}] - 6; <br/>  If [tmp$ &lt; 21, 1 + Mod[tmp$ , 7], sevenFrom5Dice])</pre>"}, {"lang": "OCaml", "loc": 17, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"nu0\">5</span> <span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> dice7 <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> rolls2answer <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>create <span class=\"nu0\">25</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> roll1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">5</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> roll2 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">5</span> <span class=\"kw1\">do</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>add rolls2answer <span class=\"br0\">(</span>roll1,roll2<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>n <span class=\"sy0\">/</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">incr</span> n<br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> trial <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>find rolls2answer <span class=\"br0\">(</span>dice5<span class=\"br0\">(</span><span class=\"br0\">)</span>,dice5<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">if</span> trial <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">7</span> <span class=\"kw1\">then</span> trial <span class=\"kw1\">else</span> aux<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  aux<br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "PARI/GP", "loc": 7, "block": "<pre class=\"parigp highlighted_source\">dice5<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">5</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>dice7<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span>t<span class=\"sy0\">=</span>dice5<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu1\">5</span><span class=\"sy0\">+</span>dice5<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu1\">21</span><span class=\"sy0\">,</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span>t<span class=\"sy0\">+</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span><span class=\"nu1\">3</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 14, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> dice5 <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">+</span><a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> dice7 <span class=\"br0\">{</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$d7</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"re0\">*dice5</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>dice5<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$d7</span> <span class=\"kw1\">if</span> <span class=\"re0\">$d7</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">%count7</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$count7</span><span class=\"br0\">{</span>dice7<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">++</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"%s:\u00a0%5.2f%%<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$count7</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">/</span><span class=\"re0\">$n</span><span class=\"sy0\">*</span><span class=\"nu0\">7</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%count7</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 20, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$d5</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> d5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$d5</span><span class=\"sy0\">.</span><span class=\"me1\">roll</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span>  <span class=\"co1\"># 1d5</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> d7<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$flat</span> <span class=\"sy0\">=</span> <span class=\"nu0\">21</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$flat</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> d5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> d5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">until</span> <span class=\"re0\">$flat</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">21</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$flat</span> <span class=\"sy0\">%</span> <span class=\"nu0\">7</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Testing</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@dist</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>_000_000<span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$expect</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">/</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">loop</span> <span class=\"br0\">(</span><span class=\"re0\">$_</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span> <span class=\"sy0\">--</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">@dist</span><span class=\"br0\">[</span>d7<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">++;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Expect<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span><span class=\"re0\">$expect</span><span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"%.3f\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"re0\">@dist</span><span class=\"sy0\">.</span><span class=\"kw3\">kv</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$v</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"$i<span class=\"es0\">\\t</span>$v<span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">~</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$v</span> <span class=\"sy0\">-</span> <span class=\"re0\">$expect</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"re0\">$expect</span><span class=\"sy0\">*</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"%+.2f%%\"</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 7, "block": "<pre class=\"text highlighted_source\">(de dice5 ()<br/>   (rand 1 5) )<br/>\u00a0<br/>(de dice7 ()<br/>   (use R<br/>      (until (&gt; 21 (setq R (+ (* 5 (dice5)) (dice5) -6))))<br/>      (inc (% R 7)) ) )</pre>"}, {"lang": "PureBasic", "loc": 14, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> dice5<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> dice7<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> x<br/>\u00a0<br/>  x <span class=\"sy0\">=</span> dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span> <span class=\"sy0\">+</span> dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">6</span><br/>  <span class=\"kw1\">If</span> x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">20</span> <br/>    <span class=\"kw1\">ProcedureReturn</span> dice7<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span> <br/>\u00a0<br/>  <span class=\"kw1\">ProcedureReturn</span> x <span class=\"sy0\">%</span> <span class=\"nu0\">7</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 8, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">random</span> <span class=\"kw1\">import</span> randint<br/>\u00a0<br/><span class=\"kw1\">def</span> dice5<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> randint<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> dice7<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    r <span class=\"sy0\">=</span> dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> + dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> * <span class=\"nu0\">5</span> - <span class=\"nu0\">6</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>r\u00a0% <span class=\"nu0\">7</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> r <span class=\"sy0\">&lt;</span> <span class=\"nu0\">21</span> <span class=\"kw1\">else</span> dice7<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (dice5) (add1 (random 5)))<br/>\u00a0<br/>(define (dice7)<br/>  (define res (+ (* 5 (dice5)) (dice5) -6))<br/>  (if (&lt; res 21) (+ 1 (modulo res 7)) (dice7)))<br/>\u00a0</pre>"}, {"lang": "R", "loc": 1, "block": "<pre class=\"text highlighted_source\">dice5 &lt;- function(n=1) sample(5, n, replace=TRUE)</pre>"}, {"lang": "REXX", "loc": 21, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program simulates a 7\u2500sided die based on a 5\u2500sided throw for a number of trials. */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> trials sample seed <span class=\"sy0\">.</span>                   <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> trials==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> trials=<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> trials=      <span class=\"nu0\">1</span>  <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> sample==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> sample=<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> sample=<span class=\"nu0\">1000000</span>  <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>seed,<span class=\"st0\">'W'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> <span class=\"kw6\">random</span> ,,seed   <span class=\"coMULTI\">/*Integer?  Then use it as a RAND seed.*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  one million samples to be used.*/</span><br/>    <span class=\"kw1\">do</span> #=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> trials;       die<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>             <span class=\"coMULTI\">/*performs the number of desired trials*/</span><br/>    k=<span class=\"nu0\">0</span><br/>                  <span class=\"kw1\">do</span>  <span class=\"kw2\">until</span> k==sample;         r=<span class=\"nu0\">5</span> <span class=\"sy0\">*</span> <span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span>  +  <span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span>  -  <span class=\"nu0\">6</span><br/>                  <span class=\"kw1\">if</span> r<span class=\"sy0\">&gt;</span><span class=\"nu0\">20</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>                  k=k+<span class=\"nu0\">1</span>;    r=r <span class=\"sy0\">//</span> <span class=\"nu0\">7</span>  +  <span class=\"nu0\">1</span>;    die<span class=\"sy0\">.</span>r=die<span class=\"sy0\">.</span>r + <span class=\"nu0\">1</span><br/>                  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*until*/</span><br/>    <span class=\"kw1\">say</span><br/>    expect=sample%7<br/>    <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'trial:'</span><span class=\"kw6\">right</span><span class=\"br0\">(</span>#, <span class=\"nu0\">4</span><span class=\"br0\">)</span>     <span class=\"st0\">\"   \"</span>     sample <span class=\"st0\">'samples, expect='</span>expect, <span class=\"nu0\">80</span>, <span class=\"st0\">\"\u2500\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>                  <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">7</span><br/>                  <span class=\"kw1\">say</span> <span class=\"st0\">'      side'</span>     j      <span class=\"st0\">\"had \"</span>       die<span class=\"sy0\">.</span>j       <span class=\"st0\">' occurrences'</span>,<br/>                      <span class=\"st0\">'      difference from expected:'</span><span class=\"kw6\">right</span><span class=\"br0\">(</span>die<span class=\"sy0\">.</span>j-expect, <span class=\"kw6\">length</span><span class=\"br0\">(</span>sample<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*#*/</span>                                  <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 21, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Seven-sided dice from five-sided dice<br/>\u00a0<br/>for n = 1 to 20<br/>         d = dice7()<br/>         see \"\" + d + \" \"<br/>next<br/>see nl<br/>\u00a0<br/>func dice7()<br/>         x = dice5() * 5 + dice5() - 6<br/>         if x &gt; 20 <br/>            return dice7()<br/>         ok<br/>         dc = x\u00a0% 7 + 1<br/>         return dc<br/>\u00a0<br/>func dice5()<br/>        rnd = random(4) + 1<br/>        return rnd<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 15, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'./distcheck.rb'</span><br/>\u00a0<br/><span class=\"kw1\">def</span> d5<br/>  <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> d7<br/>  <span class=\"kw3\">loop</span> <span class=\"kw1\">do</span><br/>    d55 = <span class=\"nu0\">5</span><span class=\"sy0\">*</span>d5 <span class=\"sy0\">+</span> d5 <span class=\"sy0\">-</span> <span class=\"nu0\">6</span><br/>    <span class=\"kw2\">return</span> <span class=\"br0\">(</span>d55 <span class=\"sy0\">%</span> <span class=\"nu0\">7</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> d55 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">21</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>distcheck<span class=\"br0\">(</span><span class=\"nu0\">1</span>_000_000<span class=\"br0\">)</span> <span class=\"br0\">{</span>d5<span class=\"br0\">}</span><br/>distcheck<span class=\"br0\">(</span><span class=\"nu0\">1</span>_000_000<span class=\"br0\">)</span> <span class=\"br0\">{</span>d7<span class=\"br0\">}</span></pre>"}, {"lang": "Scala", "loc": 17, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> SevenSidedDice <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rnd <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Random<br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> seven <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> v <span class=\"sy0\">=</span> <span class=\"nu0\">21</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> five <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> + rnd.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>v <span class=\"sy0\">&gt;</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> v <span class=\"sy0\">=</span> five + five <span class=\"sy0\">*</span> <span class=\"nu0\">5</span> - <span class=\"nu0\">6</span><br/>    <span class=\"nu0\">1</span> + v <span class=\"sy0\">%</span> <span class=\"nu0\">7</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"Random number from 1 to 7: \"</span> + seven<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 16, "block": "<pre class=\"ruby highlighted_source\">func dice5 <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"nu0\">5</span>.<span class=\"kw3\">rand</span>.<span class=\"me1\">int</span> <span class=\"br0\">}</span><br/>\u00a0<br/>func dice7 <span class=\"br0\">{</span><br/>  <span class=\"kw3\">loop</span> <span class=\"br0\">{</span><br/>    var d7 = <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">*</span>dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> dice5<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span>;<br/>    d7 <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> d7;<br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var count7 = <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span>;<br/>\u00a0<br/>var n = 1e6;<br/>n.<span class=\"me1\">times</span> <span class=\"br0\">{</span> count7<span class=\"br0\">{</span>dice7<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span>\u00a0:= <span class=\"nu0\">0</span> <span class=\"sy0\">++</span> <span class=\"br0\">}</span><br/>count7.<span class=\"me1\">keys</span>.<span class=\"me1\">sort</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>k<span class=\"sy0\">|</span><br/>    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s:\u00a0%5.2f%%<span class=\"es0\">\\n</span>\"</span>, k, <span class=\"nu0\">100</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>count7<span class=\"br0\">{</span>k<span class=\"br0\">}</span><span class=\"sy0\">/</span>n <span class=\"sy0\">*</span> <span class=\"nu0\">7</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 10, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> D5 <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span> + int<span class=\"br0\">(</span><span class=\"nu0\">5</span> <span class=\"sy0\">*</span> rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> D7 <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> d55 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">5</span> <span class=\"sy0\">*</span> <span class=\"br0\">[</span>D5<span class=\"br0\">]</span> + <span class=\"br0\">[</span>D5<span class=\"br0\">]</span> - <span class=\"nu0\">6</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$d55</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">21</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$d55</span> <span class=\"sy0\">%</span> <span class=\"nu0\">7</span> + <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VBScript", "loc": 13, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">function</span> dice5<br/>\tdice5 = int(rnd*5) + 1<br/><span class=\"kw3\">end</span> <span class=\"kw2\">function</span><br/>\u00a0<br/><span class=\"kw2\">function</span> dice7<br/>\t<span class=\"kw4\">dim</span> j<br/>\t<span class=\"kw3\">do</span><br/>\t\tj = 5 * dice5 + dice5 - 6<br/>\t<span class=\"kw3\">loop</span> <span class=\"kw3\">until</span> j &lt; 21<br/>\tdice7 = j <span class=\"kw4\">mod</span> 7 + 1<br/><span class=\"kw3\">end</span> <span class=\"kw2\">function</span></pre>"}, {"lang": "Verilog", "loc": 125, "block": "<pre class=\"verilog highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"co1\">///////////////////////////////////////////////////////////////////////////////</span><br/><span class=\"co1\">/// seven_sided_dice_tb\u00a0: (testbench)                                       ///</span><br/><span class=\"co1\">///      Check the distribution of the output of a seven sided dice circuit ///</span><br/><span class=\"co1\">///////////////////////////////////////////////////////////////////////////////</span><br/><span class=\"kw1\">module</span> seven_sided_dice_tb<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">reg</span> <span class=\"br0\">[</span><span class=\"nu0\">31</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> freq<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">reg</span>        clk<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">wire</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> dice_face<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">reg</span>        req<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">wire</span>       valid_roll<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">integer</span>    i<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">initial</span> <span class=\"kw1\">begin</span><br/>    clk <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">forever</span> <span class=\"kw1\">begin</span><br/>       <span class=\"sy0\">#</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>       clk <span class=\"sy0\">&lt;=</span> <span class=\"sy0\">~</span>clk<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">initial</span> <span class=\"kw1\">begin</span><br/>    req <span class=\"sy0\">&lt;=</span> <span class=\"re0\">1'b1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span> i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">begin</span><br/>      freq<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">3</span><span class=\"re0\">2'b0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">repeat</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"kw1\">posedge</span> clk<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">repeat</span><span class=\"br0\">(</span><span class=\"nu0\">7000000</span><span class=\"br0\">)</span> <span class=\"kw1\">begin</span><br/>      <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"kw1\">posedge</span> clk<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">~</span>valid_roll<span class=\"br0\">)</span> <span class=\"kw1\">begin</span> <br/>        <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"kw1\">posedge</span> clk<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">end</span><br/>      freq<span class=\"br0\">[</span>dice_face<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> freq<span class=\"br0\">[</span>dice_face<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"re0\">2'b1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw2\">$display</span><span class=\"br0\">(</span><span class=\"st0\">\"********************************************\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">$display</span><span class=\"br0\">(</span><span class=\"st0\">\"*** Seven sided dice distribution:          \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">$display</span><span class=\"br0\">(</span><span class=\"st0\">\"    Theoretical distribution is an uniform  \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">$display</span><span class=\"br0\">(</span><span class=\"st0\">\"    distribution with (1/7)-probability     \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">$display</span><span class=\"br0\">(</span><span class=\"st0\">\"    for each possible outcome,              \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">$display</span><span class=\"br0\">(</span><span class=\"st0\">\"  The experimental distribution is:          \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span> i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>freq<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"re0\">2'd1_000_000</span><span class=\"br0\">)</span> <span class=\"kw1\">begin</span><br/>        <span class=\"kw2\">$display</span><span class=\"br0\">(</span><span class=\"st0\">\"%d with probability 1/7 - (%d ppm)\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"re0\">2'd1_000_000</span> <span class=\"sy0\">-</span> freq<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">begin</span><br/>        <span class=\"kw2\">$display</span><span class=\"br0\">(</span><span class=\"st0\">\"%d with probability 1/7 + (%d ppm)\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"br0\">(</span>freq<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">3</span><span class=\"re0\">2'd1_000_000</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw2\">$finish</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  seven_sided_dice DUT<span class=\"br0\">(</span><br/>    .clk<span class=\"br0\">(</span>clk<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    .req<span class=\"br0\">(</span>req<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    .valid_roll<span class=\"br0\">(</span>valid_roll<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    .dice_face<span class=\"br0\">(</span>dice_face<span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">endmodule</span><br/><span class=\"co1\">///////////////////////////////////////////////////////////////////////////////</span><br/><span class=\"co1\">/// seven_sided_dice\u00a0:                                                      ///</span><br/><span class=\"co1\">///      Synthsizeable module that using a 5 sided dice as a black box      ///</span><br/><span class=\"co1\">///      is able to reproduce teh outcomes if a 7-sided dice                ///</span><br/><span class=\"co1\">///////////////////////////////////////////////////////////////////////////////</span><br/><span class=\"kw1\">module</span> seven_sided_dice<span class=\"br0\">(</span><br/>  <span class=\"kw1\">input</span> <span class=\"kw1\">wire</span>       clk<span class=\"sy0\">,</span><br/>  <span class=\"kw1\">input</span> <span class=\"kw1\">wire</span>       req<span class=\"sy0\">,</span><br/>  <span class=\"kw1\">output</span> <span class=\"kw1\">reg</span>       valid_roll<span class=\"sy0\">,</span><br/>  <span class=\"kw1\">output</span> <span class=\"kw1\">reg</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> dice_face<br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">wire</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> face1<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">wire</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> face2<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">reg</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> combination<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">reg</span> req_p1<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">reg</span> req_p2<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">reg</span> req_p3<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">always</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"kw1\">posedge</span> clk<span class=\"br0\">)</span> <span class=\"kw1\">begin</span><br/>    req_p1 <span class=\"sy0\">&lt;=</span> req<span class=\"sy0\">;</span><br/>    req_p2 <span class=\"sy0\">&lt;=</span> req_p1<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">always</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"kw1\">posedge</span> clk<span class=\"br0\">)</span> <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>req_p1<span class=\"br0\">)</span> <span class=\"kw1\">begin</span><br/>      combination <span class=\"sy0\">&lt;=</span> face1 <span class=\"sy0\">+</span> face2 <span class=\"sy0\">+</span> <span class=\"br0\">{</span>face2<span class=\"sy0\">,</span> <span class=\"re0\">2'b00</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>req_p2<span class=\"br0\">)</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">case</span><span class=\"br0\">(</span>combination<span class=\"br0\">)</span><br/>           <span class=\"re0\">5'd0</span><span class=\"sy0\">,</span>  <span class=\"re0\">5'd1</span><span class=\"sy0\">,</span>  <span class=\"re0\">5'd2</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span>valid_roll<span class=\"sy0\">,</span> dice_face<span class=\"br0\">}</span> <span class=\"sy0\">&lt;=</span> <span class=\"br0\">{</span><span class=\"re0\">1'b1</span><span class=\"sy0\">,</span> <span class=\"re0\">3'd0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>           <span class=\"re0\">5'd3</span><span class=\"sy0\">,</span>  <span class=\"re0\">5'd4</span><span class=\"sy0\">,</span>  <span class=\"re0\">5'd5</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span>valid_roll<span class=\"sy0\">,</span> dice_face<span class=\"br0\">}</span> <span class=\"sy0\">&lt;=</span> <span class=\"br0\">{</span><span class=\"re0\">1'b1</span><span class=\"sy0\">,</span> <span class=\"re0\">3'd1</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>           <span class=\"re0\">5'd6</span><span class=\"sy0\">,</span>  <span class=\"re0\">5'd7</span><span class=\"sy0\">,</span>  <span class=\"re0\">5'd8</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span>valid_roll<span class=\"sy0\">,</span> dice_face<span class=\"br0\">}</span> <span class=\"sy0\">&lt;=</span> <span class=\"br0\">{</span><span class=\"re0\">1'b1</span><span class=\"sy0\">,</span> <span class=\"re0\">3'd2</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>           <span class=\"re0\">5'd9</span><span class=\"sy0\">,</span> <span class=\"re0\">5'd10</span><span class=\"sy0\">,</span> <span class=\"re0\">5'd11</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span>valid_roll<span class=\"sy0\">,</span> dice_face<span class=\"br0\">}</span> <span class=\"sy0\">&lt;=</span> <span class=\"br0\">{</span><span class=\"re0\">1'b1</span><span class=\"sy0\">,</span> <span class=\"re0\">3'd3</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>          <span class=\"re0\">5'd12</span><span class=\"sy0\">,</span> <span class=\"re0\">5'd13</span><span class=\"sy0\">,</span> <span class=\"re0\">5'd14</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span>valid_roll<span class=\"sy0\">,</span> dice_face<span class=\"br0\">}</span> <span class=\"sy0\">&lt;=</span> <span class=\"br0\">{</span><span class=\"re0\">1'b1</span><span class=\"sy0\">,</span> <span class=\"re0\">3'd4</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>          <span class=\"re0\">5'd15</span><span class=\"sy0\">,</span> <span class=\"re0\">5'd16</span><span class=\"sy0\">,</span> <span class=\"re0\">5'd17</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span>valid_roll<span class=\"sy0\">,</span> dice_face<span class=\"br0\">}</span> <span class=\"sy0\">&lt;=</span> <span class=\"br0\">{</span><span class=\"re0\">1'b1</span><span class=\"sy0\">,</span> <span class=\"re0\">3'd5</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>          <span class=\"re0\">5'd18</span><span class=\"sy0\">,</span> <span class=\"re0\">5'd19</span><span class=\"sy0\">,</span> <span class=\"re0\">5'd20</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span>valid_roll<span class=\"sy0\">,</span> dice_face<span class=\"br0\">}</span> <span class=\"sy0\">&lt;=</span> <span class=\"br0\">{</span><span class=\"re0\">1'b1</span><span class=\"sy0\">,</span> <span class=\"re0\">3'd6</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">default</span><span class=\"sy0\">:</span> valid_roll <span class=\"sy0\">&lt;=</span> <span class=\"re0\">1'b0</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">endcase</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  five_sided_dice dice1<span class=\"br0\">(</span><br/>    .clk<span class=\"br0\">(</span>clk<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    .req<span class=\"br0\">(</span>req<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    .dice_face<span class=\"br0\">(</span>face1<span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  five_sided_dice dice2<span class=\"br0\">(</span><br/>    .clk<span class=\"br0\">(</span>clk<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    .req<span class=\"br0\">(</span>req<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    .dice_face<span class=\"br0\">(</span>face2<span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">endmodule</span><br/>\u00a0<br/><span class=\"co1\">///////////////////////////////////////////////////////////////////////////////</span><br/><span class=\"co1\">/// five_sided_dice\u00a0:                                                       ///</span><br/><span class=\"co1\">///      A model of the five sided dice component                           ///</span><br/><span class=\"co1\">///////////////////////////////////////////////////////////////////////////////</span><br/><span class=\"kw1\">module</span> five_sided_dice<span class=\"br0\">(</span><br/>  <span class=\"kw1\">input</span> <span class=\"kw1\">wire</span> clk<span class=\"sy0\">,</span><br/>  <span class=\"kw1\">input</span> <span class=\"kw1\">wire</span> req<span class=\"sy0\">,</span><br/>  <span class=\"kw1\">output</span> <span class=\"kw1\">reg</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> dice_face<br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">always</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"kw1\">posedge</span> clk<span class=\"br0\">)</span> <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>req<span class=\"br0\">)</span> <span class=\"kw1\">begin</span><br/>      dice_face  <span class=\"sy0\">&lt;=</span> $urandom <span class=\"sy0\">%</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">endmodule</span><br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 12, "block": "<pre class=\"text highlighted_source\">var die5=(1).random.fp(6); // [1..5]<br/>fcn die7{ while((r:=5*die5() + die5())&gt;=27){} r/3-1 }<br/>\u00a0<br/>fcn rtest(N){ //test spread over [0..9]<br/>   dist:=L(0,0,0,0,0,0,0,0,0,0);<br/>   do(N){ dist[die7()]+=1 }<br/>   sum:=dist.sum();<br/>   dist=dist.apply('wrap(n){ \"%.2f%%\".fmt(n.toFloat()/sum*100) }).println();<br/>}<br/>\u00a0<br/>println(\"Looking for \",100.0/7,\"%\");<br/>rtest(0d1_000_000);</pre>"}]}