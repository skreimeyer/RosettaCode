{"task": "Vigen%C3%A8re_cipher", "blocks": [{"lang": "Ada", "loc": 63, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Vignere_Cipher <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">subtype</span> Letter <span class=\"kw1\">is</span> Character <span class=\"kw3\">range</span> 'A' .. 'Z';<br/>   <span class=\"kw3\">subtype</span> Lowercase <span class=\"kw1\">is</span> Character <span class=\"kw3\">range</span> 'a' .. 'z';<br/>\u00a0<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"+\"</span><span class=\"br0\">(</span>X, Y: Letter<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Letter <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> Character'Val<span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>Character'Pos<span class=\"br0\">(</span>X<span class=\"br0\">)</span>-Character'Pos<span class=\"br0\">(</span>'A'<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                + <span class=\"br0\">(</span>Character'Pos<span class=\"br0\">(</span>Y<span class=\"br0\">)</span>-Character'Pos<span class=\"br0\">(</span>'A'<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw2\">mod</span> <span class=\"nu0\">26</span><br/>                          + Character'Pos<span class=\"br0\">(</span>'A'<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Normalize<span class=\"br0\">(</span>S: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      <span class=\"co1\">-- removes all characters except for uppercase and lowercase letters</span><br/>      <span class=\"co1\">-- replaces lowercase by uppercase letters</span><br/>      Offset: Integer\u00a0:= Character'Pos<span class=\"br0\">(</span>'A'<span class=\"br0\">)</span> - Character'Pos<span class=\"br0\">(</span>'a'<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> S=<span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span>;<br/>      <span class=\"kw1\">elsif</span> S<span class=\"br0\">(</span>S'First<span class=\"br0\">)</span> <span class=\"kw3\">in</span> Letter <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">return</span> S<span class=\"br0\">(</span>S'First<span class=\"br0\">)</span> &amp; Normalize<span class=\"br0\">(</span>S<span class=\"br0\">(</span>S'First+<span class=\"nu0\">1</span> .. <span class=\"me1\">S</span>'Last<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">elsif</span>  S<span class=\"br0\">(</span>S'First<span class=\"br0\">)</span> <span class=\"kw3\">in</span> Lowercase <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">return</span> <span class=\"br0\">(</span>Character'Val<span class=\"br0\">(</span>Character'Pos<span class=\"br0\">(</span>S<span class=\"br0\">(</span>S'First<span class=\"br0\">)</span><span class=\"br0\">)</span> + Offset<span class=\"br0\">)</span><br/>                   &amp; Normalize<span class=\"br0\">(</span>S<span class=\"br0\">(</span>S'First+<span class=\"nu0\">1</span> .. <span class=\"me1\">S</span>'Last<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">else</span><br/>         <span class=\"kw1\">return</span> Normalize<span class=\"br0\">(</span>S<span class=\"br0\">(</span>S'First+<span class=\"nu0\">1</span> .. <span class=\"me1\">S</span>'Last<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> Normalize;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Encrypt<span class=\"br0\">(</span>Key: String; Text: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      Ciphertext: String<span class=\"br0\">(</span>Text'<span class=\"kw3\">Range</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Text'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         Ciphertext<span class=\"br0\">(</span>I<span class=\"br0\">)</span>\u00a0:= Text<span class=\"br0\">(</span>I<span class=\"br0\">)</span><br/>           + Key<span class=\"br0\">(</span>Key'First + <span class=\"br0\">(</span><span class=\"br0\">(</span>I-Text'First<span class=\"br0\">)</span> <span class=\"kw2\">mod</span> Key'Length<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Ciphertext;<br/>   <span class=\"kw1\">end</span> Encrypt;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Invert<span class=\"br0\">(</span>Key: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      Result: String<span class=\"br0\">(</span>Key'<span class=\"kw3\">Range</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Key'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         Result<span class=\"br0\">(</span>I<span class=\"br0\">)</span><br/>          \u00a0:= Character'Val<span class=\"br0\">(</span> <span class=\"nu0\">26</span> - <span class=\"br0\">(</span>Character'Pos<span class=\"br0\">(</span>Key<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>-Character'Pos<span class=\"br0\">(</span>'A'<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                               + Character'Pos<span class=\"br0\">(</span>'A'<span class=\"br0\">)</span> <span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> Invert;<br/>\u00a0<br/>   <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>   Input: String\u00a0:= Get_Line;<br/>   Key:   String\u00a0:= Normalize<span class=\"br0\">(</span>Get_Line<span class=\"br0\">)</span>;<br/>   Ciph:  String\u00a0:= Encrypt<span class=\"br0\">(</span>Key =&gt; Key, Text =&gt; Normalize<span class=\"br0\">(</span>Input<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"Input      =\"</span> &amp; Input<span class=\"br0\">)</span>;<br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"Key        =\"</span> &amp; Key<span class=\"br0\">)</span>;<br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"Ciphertext =\"</span> &amp; Ciph<span class=\"br0\">)</span>;<br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"Decryption =\"</span> &amp; Encrypt<span class=\"br0\">(</span>Key =&gt; Invert<span class=\"br0\">(</span>Key<span class=\"br0\">)</span>, Text =&gt; Ciph<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Vignere_Cipher;</pre>"}, {"lang": "ALGOL 68", "loc": 62, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw3\">STRING</span> key <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> vigenere cipher <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span> key<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> key <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> key <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">IF</span> key<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&gt;=</span> <span class=\"st0\">\"A\"</span> <span class=\"kw16\">AND</span> key<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;=</span> <span class=\"st0\">\"Z\"</span> <span class=\"kw2\">THEN</span><br/>      key <span class=\"sy1\">+:=</span> key<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> key<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&gt;=</span> <span class=\"st0\">\"a\"</span> <span class=\"kw16\">AND</span> key<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;=</span> <span class=\"st0\">\"z\"</span> <span class=\"kw2\">THEN</span><br/>      key <span class=\"sy1\">+:=</span> <span class=\"kw8\">REPR</span><span class=\"br0\">(</span><span class=\"kw8\">ABS</span> key<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">+</span> <span class=\"kw8\">ABS</span><span class=\"st0\">\"A\"</span> <span class=\"sy1\">-</span> <span class=\"kw8\">ABS</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span> <span class=\"kw2\">FI</span><br/>  <span class=\"kw2\">OD</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> encrypt <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> text<span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  <span class=\"kw3\">STRING</span> out <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">INT</span> j <span class=\"sy1\">:=</span> <span class=\"kw8\">LWB</span> text<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> text <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> text <span class=\"kw2\">DO</span><br/>    <span class=\"kw3\">CHAR</span> c <span class=\"sy1\">:=</span> text<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">IF</span> c <span class=\"sy1\">&gt;=</span> <span class=\"st0\">\"a\"</span> <span class=\"kw16\">AND</span> c <span class=\"sy1\">&lt;=</span> <span class=\"st0\">\"z\"</span> <span class=\"kw2\">THEN</span><br/>      c <span class=\"sy1\">:=</span> <span class=\"kw8\">REPR</span><span class=\"br0\">(</span><span class=\"kw8\">ABS</span> c <span class=\"sy1\">+</span> <span class=\"br0\">(</span><span class=\"kw8\">ABS</span><span class=\"st0\">\"A\"</span> <span class=\"sy1\">-</span> <span class=\"kw8\">ABS</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> c <span class=\"sy1\">&gt;=</span> <span class=\"st0\">\"A\"</span> <span class=\"kw16\">AND</span> c <span class=\"sy1\">&lt;=</span> <span class=\"st0\">\"Z\"</span> <span class=\"kw2\">THEN</span><br/>      out <span class=\"sy1\">+:=</span> <span class=\"kw8\">REPR</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw8\">ABS</span> c <span class=\"sy1\">+</span> <span class=\"kw8\">ABS</span> key<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">-</span> 2<span class=\"sy1\">*</span><span class=\"kw8\">ABS</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span> <span class=\"kw12\">MOD</span> 26 <span class=\"sy1\">+</span> <span class=\"kw8\">ABS</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      j <span class=\"sy1\">:=</span> j <span class=\"kw12\">MOD</span> <span class=\"kw8\">UPB</span> key <span class=\"sy1\">+</span> 1<br/>    <span class=\"kw2\">FI</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  out<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> decrypt <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> text<span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  <span class=\"kw3\">STRING</span> out<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">INT</span> j <span class=\"sy1\">:=</span> <span class=\"kw8\">LWB</span> text<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> text <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> text <span class=\"kw2\">DO</span><br/>    <span class=\"kw3\">CHAR</span> c <span class=\"sy1\">:=</span> text<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">IF</span> c <span class=\"sy1\">&gt;=</span> <span class=\"st0\">\"a\"</span> <span class=\"kw16\">AND</span> c <span class=\"sy1\">&lt;=</span> <span class=\"st0\">\"z\"</span> <span class=\"kw2\">THEN</span><br/>      c <span class=\"sy1\">:=</span> <span class=\"kw8\">REPR</span><span class=\"br0\">(</span><span class=\"kw8\">ABS</span> c <span class=\"sy1\">+</span> <span class=\"br0\">(</span><span class=\"kw8\">ABS</span><span class=\"st0\">\"A\"</span> <span class=\"sy1\">-</span> <span class=\"kw8\">ABS</span><span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> c <span class=\"sy1\">&gt;=</span> <span class=\"st0\">\"A\"</span> <span class=\"kw16\">AND</span> c <span class=\"sy1\">&lt;=</span> <span class=\"st0\">\"Z\"</span> <span class=\"kw2\">THEN</span><br/>      out <span class=\"sy1\">+:=</span> <span class=\"kw8\">REPR</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw8\">ABS</span> c <span class=\"sy1\">-</span> <span class=\"kw8\">ABS</span> key<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">+</span> 26<span class=\"br0\">)</span> <span class=\"kw12\">MOD</span> 26 <span class=\"sy1\">+</span> <span class=\"kw8\">ABS</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      j <span class=\"sy1\">:=</span> j <span class=\"kw12\">MOD</span> <span class=\"kw8\">UPB</span> key <span class=\"sy1\">+</span> 1<br/>    <span class=\"kw2\">FI</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  out<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  vigenere cipher<span class=\"br0\">(</span>key<span class=\"sy1\">:=</span><span class=\"st0\">\"VIGENERECIPHER\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">STRING</span> original <span class=\"sy1\">:=</span> <span class=\"st0\">\"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\"</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">STRING</span> encrypted <span class=\"sy1\">:=</span> encrypt<span class=\"br0\">(</span>original<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">STRING</span> decrypted <span class=\"sy1\">:=</span> decrypt<span class=\"br0\">(</span>encrypted<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span>original<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Encrypted: \"</span><span class=\"sy1\">,</span> encrypted<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Decrypted: \"</span><span class=\"sy1\">,</span> decrypted<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "Applesoft BASIC", "loc": 29, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>  100\u00a0:<br/>  110  REM  VIGENERE CIPHER<br/>  120\u00a0:<br/>  200  REM  SET-UP<br/>  210 K$ = \"LEMON\": PRINT \"KEY: \"; K$<br/>  220 PT$ = \"ATTACK AT DAWN\": PRINT \"PLAIN TEXT: \";PT$<br/>  230  DEF  FN MOD(A) = A -  INT (A / 26) * 26 <br/>  300  REM  ENCODING<br/>  310 K = 1<br/>  320  FOR I = 1 TO  LEN (PT$)<br/>  330  IF  ASC ( MID$ (PT$,I,1)) &lt; 65<br/>       OR  ASC ( MID$ (PT$,I,1)) &gt; 90 THEN  NEXT I<br/>  340 TV =  ASC ( MID$ (PT$,I,1)) - 65<br/>  350 KV =  ASC ( MID$ (K$,K,1)) - 65<br/>  360 CT$ = CT$ +  CHR$ ( FN MOD(TV + KV) + 65)<br/>  370 K = K + 1: IF K &gt;  LEN (K$) THEN K = 1      <br/>  380  NEXT I<br/>  390  PRINT \"CIPHER TEXT: \";CT$<br/>  400  REM  DECODING<br/>  410 K = 1<br/>  420  FOR I = 1 TO  LEN (CT$)<br/>  430 TV =  ASC ( MID$ (CT$,I,1)) - 65<br/>  440 KV =  ASC ( MID$ (K$,K,1)) -  65<br/>  450 T = TV - KV: IF T &lt; 0 THEN T = T + 26<br/>  460 DT$ = DT$ +  CHR$ (T + 65)<br/>  470 K = K + 1: IF K &gt;  LEN (K$) THEN K = 1<br/>  480  NEXT I<br/>  490  PRINT \"DECRYPTED TEXT: \";DT$ </pre>"}, {"lang": "AutoHotkey", "loc": 23, "block": "<pre class=\"autohotkey highlighted_source\">Key <span class=\"sy0\">=</span> VIGENERECIPHER<br/><a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">=</span> Beware the Jabberwock<span class=\"sy0\">,</span> my son! The jaws that bite<span class=\"sy0\">,</span> the claws that catch!<br/>\u00a0<br/>out <span class=\"sy0\">:=</span> <span class=\"st0\">\"Input      =\"</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">text</span></a> <span class=\"st0\">\"`nkey        =\"</span> key <span class=\"st0\">\"`nCiphertext =\"</span> <span class=\"br0\">(</span>c <span class=\"sy0\">:=</span> VigenereCipher<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> Key<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"`nDecrypted  =\"</span> VigenereDecipher<span class=\"br0\">(</span>c<span class=\"sy0\">,</span> key<span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/Variables.htm#Clipboard\"><span class=\"kw2\">clipboard</span></a> <span class=\"sy0\">:=</span> out<br/>\u00a0<br/>VigenereCipher<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> Key<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/StringUpper.htm\"><span class=\"kw3\">StringUpper</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><br/>   <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> <span class=\"st0\">\"[^A-Z]\"</span><span class=\"br0\">)</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> Parse<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><br/>   <span class=\"br0\">{</span><br/>      a   <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Asc</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span>                                   <span class=\"sy0\">-</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Asc</span></a><span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span><br/>      b   <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Asc</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>Key<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">+</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span><span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>Key<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Asc</span></a><span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span><br/>      out <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Chr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">+</span>b<span class=\"sy0\">,</span><span class=\"nu0\">26</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Asc</span></a><span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> out<br/><span class=\"br0\">}</span><br/>\u00a0<br/>VigenereDecipher<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> key<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> Parse<span class=\"sy0\">,</span> key<br/>      decoderKey <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Chr</span></a><span class=\"br0\">(</span><span class=\"nu0\">26</span><span class=\"sy0\">-</span><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Asc</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">65</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">65</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> VigenereCipher<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,</span> decoderKey<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BBC BASIC", "loc": 40, "block": "<pre class=\"text highlighted_source\">      key$ = \"LEMON\"<br/>      plaintext$ = \"ATTACK AT DAWN\"<br/>      ciphertext$ = FNencrypt(plaintext$, key$)<br/>      PRINT \"Key = \"\"\" key$ \"\"\"\"<br/>      PRINT \"Plaintext  = \"\"\" plaintext$ \"\"\"\"<br/>      PRINT \"Ciphertext = \"\"\" ciphertext$ \"\"\"\"<br/>      PRINT \"Decrypted  = \"\"\" FNdecrypt(ciphertext$, key$) \"\"\"\"<br/>      END<br/>\u00a0<br/>      DEF FNencrypt(plain$, key$)<br/>      LOCAL i%, k%, n%, o$<br/>      plain$ = FNupper(plain$)<br/>      key$ = FNupper(key$)<br/>      FOR i% = 1 TO LEN(plain$)<br/>        n% = ASCMID$(plain$, i%)<br/>        IF n% &gt;= 65 IF n% &lt;= 90 THEN<br/>          o$ += CHR$(65 + (n% + ASCMID$(key$, k%+1)) MOD 26)<br/>          k% = (k% + 1) MOD LEN(key$)<br/>        ENDIF<br/>      NEXT<br/>      = o$<br/>\u00a0<br/>      DEF FNdecrypt(cipher$, key$)<br/>      LOCAL i%, k%, n%, o$<br/>      cipher$ = FNupper(cipher$)<br/>      key$ = FNupper(key$)<br/>      FOR i% = 1 TO LEN(cipher$)<br/>        n% = ASCMID$(cipher$, i%)<br/>        o$ += CHR$(65 + (n% + 26 - ASCMID$(key$, k%+1)) MOD 26)<br/>        k% = (k% + 1) MOD LEN(key$)<br/>      NEXT<br/>      = o$<br/>\u00a0<br/>      DEF FNupper(A$)<br/>      LOCAL A%,C%<br/>      FOR A% = 1 TO LEN(A$)<br/>        C% = ASCMID$(A$,A%)<br/>        IF C% &gt;= 97 IF C% &lt;= 122 MID$(A$,A%,1) = CHR$(C%-32)<br/>      NEXT<br/>      = A$</pre>"}, {"lang": "Befunge", "loc": 4, "block": "<pre class=\"text highlighted_source\">\"VIGENERECIPHER\"&gt;&gt;&gt;&gt;1\\:!v&gt;\"A\"-\\:00p0v<br/>&gt;&gt;!#:0#-0#1g#,*#&lt;+:v:-1$_^#!:\\+1g00p&lt;<br/>\\\"{\"\\v&gt;9+2*%\"A\"+^&gt;$&gt;~&gt;:48*\\`#@_::\"`\"`<br/>*84*`&lt;^4+\"4\"+g0\\_^#!+`*55\\`\\0::-\"A\"-*</pre>"}, {"lang": "C", "loc": 113, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;stdbool.h&gt;</span><br/><span class=\"co2\">#include &lt;ctype.h&gt;</span><br/><span class=\"co2\">#include &lt;getopt.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define NUMLETTERS 26</span><br/><span class=\"co2\">#define BUFSIZE 4096</span><br/>\u00a0<br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>get_input<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> usage<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Usage: vinigere [-d] key\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> sign <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <br/>    <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> plainmsg<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Plain text:  \"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> cryptmsg<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Cipher text: \"</span><span class=\"sy0\">;</span><br/>    bool encrypt <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> opt<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>opt <span class=\"sy0\">=</span> getopt<span class=\"br0\">(</span>argc<span class=\"sy0\">,</span> argv<span class=\"sy0\">,</span> <span class=\"st0\">\"d\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>opt<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">case</span> <span class=\"st0\">'d'</span><span class=\"sy0\">:</span> <br/>            sign <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            encrypt <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">default</span><span class=\"sy0\">:</span> <br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"Unrecogized command line argument:'-%i'<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> opt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> usage<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>argc <span class=\"sy0\">-</span> optind <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"%s requires one argument and one only<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> argv<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> usage<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"co1\">// Convert argument into array of shifts</span><br/>    <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy0\">*</span><span class=\"kw4\">const</span> restrict key <span class=\"sy0\">=</span> argv<span class=\"br0\">[</span>optind<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> <span class=\"kw4\">const</span> keylen <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> shifts<span class=\"br0\">[</span>keylen<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> <span class=\"sy0\">*</span>restrict plaintext <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span> <br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> keylen<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isalpha.html\"><span class=\"kw3\">isalpha</span></a><span class=\"br0\">(</span>key<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"Invalid key<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> charcase <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isupper.html\"><span class=\"kw3\">isupper</span></a><span class=\"br0\">(</span>key<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">'A'</span> <span class=\"sy0\">:</span> <span class=\"st0\">'a'</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">// If decrypting, shifts will be negative.</span><br/>        <span class=\"co1\">// This line would turn \"bacon\" into {1, 0, 2, 14, 13}</span><br/>        shifts<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>key<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> charcase<span class=\"br0\">)</span> <span class=\"sy0\">*</span> sign<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fflush.html\"><span class=\"kw3\">fflush</span></a><span class=\"br0\">(</span>stdout<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">// Print \"Plain text: \" if encrypting and \"Cipher text:  \" if</span><br/>        <span class=\"co1\">// decrypting</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>encrypt<span class=\"br0\">)</span> <span class=\"sy0\">?</span> plainmsg <span class=\"sy0\">:</span> cryptmsg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        plaintext <span class=\"sy0\">=</span> get_input<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>plaintext <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"Error getting input<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span>plaintext<span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Reprompt if entry is empty</span><br/>\u00a0<br/>    <span class=\"kw4\">size_t</span> <span class=\"kw4\">const</span> plainlen <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>plaintext<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">char</span><span class=\"sy0\">*</span> <span class=\"kw4\">const</span> restrict ciphertext <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>plainlen <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span> <span class=\"sy0\">*</span>ciphertext<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ciphertext <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"Memory error<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> plainlen<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// Skip non-alphabetical characters</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isalpha.html\"><span class=\"kw3\">isalpha</span></a><span class=\"br0\">(</span>plaintext<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            ciphertext<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> plaintext<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"co1\">// Check case</span><br/>        <span class=\"kw4\">char</span> <span class=\"kw4\">const</span> charcase <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isupper.html\"><span class=\"kw3\">isupper</span></a><span class=\"br0\">(</span>plaintext<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">'A'</span> <span class=\"sy0\">:</span> <span class=\"st0\">'a'</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">// Wrapping conversion algorithm</span><br/>        ciphertext<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>plaintext<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> shifts<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">-</span> charcase <span class=\"sy0\">+</span> NUMLETTERS<span class=\"br0\">)</span> <span class=\"sy0\">%</span> NUMLETTERS<span class=\"br0\">)</span> <span class=\"sy0\">+</span> charcase<span class=\"sy0\">;</span><br/>        j <span class=\"sy0\">=</span> <span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> keylen<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    ciphertext<span class=\"br0\">[</span>plainlen<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>encrypt<span class=\"br0\">)</span> <span class=\"sy0\">?</span> cryptmsg <span class=\"sy0\">:</span> plainmsg<span class=\"sy0\">,</span> ciphertext<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>ciphertext<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// Silence warnings about const not being maintained in cast to void*</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> plaintext<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>get_input<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"kw4\">const</span> restrict buf <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>BUFSIZE <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>buf <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fgets.html\"><span class=\"kw3\">fgets</span></a><span class=\"br0\">(</span>buf<span class=\"sy0\">,</span> BUFSIZE<span class=\"sy0\">,</span> stdin<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Get rid of newline</span><br/>    <span class=\"kw4\">size_t</span> <span class=\"kw4\">const</span> len <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>buf<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>buf<span class=\"br0\">[</span>len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span> buf<span class=\"br0\">[</span>len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> buf<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 73, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Vigenere<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  string key<span class=\"sy4\">;</span><br/>\u00a0<br/>  Vigenere<span class=\"br0\">(</span>string key<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> key.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>key<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&gt;=</span> <span class=\"st0\">'A'</span> <span class=\"sy3\">&amp;&amp;</span> key<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;=</span> <span class=\"st0\">'Z'</span><span class=\"br0\">)</span><br/>        this<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>key <span class=\"sy2\">+</span><span class=\"sy1\">=</span> key<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>key<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&gt;=</span> <span class=\"st0\">'a'</span> <span class=\"sy3\">&amp;&amp;</span> key<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;=</span> <span class=\"st0\">'z'</span><span class=\"br0\">)</span><br/>        this<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>key <span class=\"sy2\">+</span><span class=\"sy1\">=</span> key<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy2\">+</span> <span class=\"st0\">'A'</span> <span class=\"sy2\">-</span> <span class=\"st0\">'a'</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  string encrypt<span class=\"br0\">(</span>string text<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    string out<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> text.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw4\">char</span> c <span class=\"sy1\">=</span> text<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>c <span class=\"sy1\">&gt;=</span> <span class=\"st0\">'a'</span> <span class=\"sy3\">&amp;&amp;</span> c <span class=\"sy1\">&lt;=</span> <span class=\"st0\">'z'</span><span class=\"br0\">)</span><br/>        c <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">'A'</span> <span class=\"sy2\">-</span> <span class=\"st0\">'a'</span><span class=\"sy4\">;</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>c <span class=\"sy1\">&lt;</span> <span class=\"st0\">'A'</span> <span class=\"sy3\">||</span> c <span class=\"sy1\">&gt;</span> <span class=\"st0\">'Z'</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">continue</span><span class=\"sy4\">;</span><br/>\u00a0<br/>      out <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span>c <span class=\"sy2\">+</span> key<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy2\">-</span> <span class=\"nu0\">2</span><span class=\"sy2\">*</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">26</span> <span class=\"sy2\">+</span> <span class=\"st0\">'A'</span><span class=\"sy4\">;</span> <br/>      j <span class=\"sy1\">=</span> <span class=\"br0\">(</span>j <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> key.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> out<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  string decrypt<span class=\"br0\">(</span>string text<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    string out<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> text.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw4\">char</span> c <span class=\"sy1\">=</span> text<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>c <span class=\"sy1\">&gt;=</span> <span class=\"st0\">'a'</span> <span class=\"sy3\">&amp;&amp;</span> c <span class=\"sy1\">&lt;=</span> <span class=\"st0\">'z'</span><span class=\"br0\">)</span><br/>        c <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"st0\">'A'</span> <span class=\"sy2\">-</span> <span class=\"st0\">'a'</span><span class=\"sy4\">;</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>c <span class=\"sy1\">&lt;</span> <span class=\"st0\">'A'</span> <span class=\"sy3\">||</span> c <span class=\"sy1\">&gt;</span> <span class=\"st0\">'Z'</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">continue</span><span class=\"sy4\">;</span><br/>\u00a0<br/>      out <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span>c <span class=\"sy2\">-</span> key<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy2\">+</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> <span class=\"nu0\">26</span> <span class=\"sy2\">+</span> <span class=\"st0\">'A'</span><span class=\"sy4\">;</span> <br/>      j <span class=\"sy1\">=</span> <span class=\"br0\">(</span>j <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">%</span> key.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> out<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  Vigenere cipher<span class=\"br0\">(</span><span class=\"st0\">\"VIGENERECIPHER\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  string original <span class=\"sy1\">=</span> <span class=\"st0\">\"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\"</span><span class=\"sy4\">;</span><br/>  string encrypted <span class=\"sy1\">=</span> cipher.<span class=\"me1\">encrypt</span><span class=\"br0\">(</span>original<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  string decrypted <span class=\"sy1\">=</span> cipher.<span class=\"me1\">decrypt</span><span class=\"br0\">(</span>encrypted<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> original <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>  <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Encrypted: \"</span> <span class=\"sy1\">&lt;&lt;</span> encrypted <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>  <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Decrypted: \"</span> <span class=\"sy1\">&lt;&lt;</span> decrypted <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 46, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> VigenereCipher<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> VCipher<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">string</span> encrypt<span class=\"br0\">(</span><span class=\"kw4\">string</span> txt, <span class=\"kw4\">string</span> pw, <span class=\"kw4\">int</span> d<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> pwi <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, tmp<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">string</span> ns <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>            txt <span class=\"sy0\">=</span> txt<span class=\"sy0\">.</span><span class=\"me1\">ToUpper</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            pw <span class=\"sy0\">=</span> pw<span class=\"sy0\">.</span><span class=\"me1\">ToUpper</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> t <span class=\"kw1\">in</span> txt<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>t <span class=\"sy0\">&lt;</span> <span class=\"nu0\">65</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>                tmp <span class=\"sy0\">=</span> t <span class=\"sy0\">-</span> <span class=\"nu0\">65</span> <span class=\"sy0\">+</span> d <span class=\"sy0\">*</span> <span class=\"br0\">(</span>pw<span class=\"br0\">[</span>pwi<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">65</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tmp <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> tmp <span class=\"sy0\">+=</span> <span class=\"nu0\">26</span><span class=\"sy0\">;</span><br/>                ns <span class=\"sy0\">+=</span> Convert<span class=\"sy0\">.</span><span class=\"me1\">ToChar</span><span class=\"br0\">(</span><span class=\"nu0\">65</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span> tmp <span class=\"sy0\">%</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>pwi <span class=\"sy0\">==</span> pw<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span> pwi <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> ns<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            VCipher v <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> VCipher<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">string</span> s0 <span class=\"sy0\">=</span> <span class=\"st0\">\"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\"</span>,<br/>                   pw <span class=\"sy0\">=</span> <span class=\"st0\">\"VIGENERECIPHER\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>s0 <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">+</span> pw <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">string</span> s1 <span class=\"sy0\">=</span> v<span class=\"sy0\">.</span><span class=\"me1\">encrypt</span><span class=\"br0\">(</span>s0, pw, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Encrypted: \"</span> <span class=\"sy0\">+</span> s1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            s1 <span class=\"sy0\">=</span> v<span class=\"sy0\">.</span><span class=\"me1\">encrypt</span><span class=\"br0\">(</span>s1, <span class=\"st0\">\"VIGENERECIPHER\"</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Decrypted: \"</span> <span class=\"sy0\">+</span> s1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Press any key to continue...\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Ceylon", "loc": 25, "block": "<pre class=\"text highlighted_source\">shared void run() {<br/>\u00a0<br/>    function normalize(String text) =&gt; text.uppercased.filter(Character.letter);<br/>\u00a0<br/>    function crypt(String text, String key, Character(Character, Character) transform) =&gt; String {<br/>        for ([a, b] in zipPairs(normalize(text), normalize(key).cycled))<br/>        transform(a, b)<br/>    };<br/>\u00a0<br/>    function encrypt(String clearText, String key) =&gt; <br/>            crypt(clearText, key, (Character a, Character b) =&gt; <br/>\t\t\t\t('A'.integer + ((a.integer + b.integer - 130)\u00a0% 26)).character);<br/>\u00a0<br/>    function decrypt(String cipherText, String key) =&gt; <br/>            crypt(cipherText, key, (Character a, Character b) =&gt; <br/>        \t\t('A'.integer + ((a.integer - b.integer + 26)\u00a0% 26)).character);<br/>\u00a0<br/>    value key = \"VIGENERECIPHER\";<br/>    value message = \"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\";<br/>    value encrypted = encrypt(message, key);<br/>    value decrypted = decrypt(encrypted, key);<br/>\u00a0<br/>    print(encrypted);<br/>    print(decrypted);<br/>}</pre>"}, {"lang": "Common Lisp", "loc": 26, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> strip <span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>remove-if-<span class=\"kw1\">not</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">(</span>char<span class=\"sy0\">&lt;=</span> #\\A c #\\Z<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>string-upcase s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> vigen\u00e8re <span class=\"br0\">(</span>s key <span class=\"sy0\">&amp;</span>key decipher<br/>\t\t\t<span class=\"sy0\">&amp;</span>aux <span class=\"br0\">(</span>A <span class=\"br0\">(</span>char-code #\\A<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t     <span class=\"br0\">(</span>op <span class=\"br0\">(</span><span class=\"kw1\">if</span> decipher #'- #'+<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>labels<br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>to-char <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">(</span>code-char <span class=\"br0\">(</span>+ c A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>to-code <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">(</span>- <span class=\"br0\">(</span>char-code c<span class=\"br0\">)</span> A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>k <span class=\"br0\">(</span>map '<span class=\"kw1\">list</span> #'to-code <span class=\"br0\">(</span>strip key<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span><span class=\"kw1\">last</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span> k<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>map 'string<br/>\t   <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>\t     <span class=\"br0\">(</span><span class=\"kw1\">prog1</span><br/>\t       <span class=\"br0\">(</span>to-char<br/>\t\t <span class=\"br0\">(</span>mod <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> op <span class=\"br0\">(</span>to-code c<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t       <span class=\"br0\">(</span><span class=\"kw1\">setf</span> k <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t   <span class=\"br0\">(</span>strip s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>msg <span class=\"st0\">\"Beware the Jabberwock... The jaws that... the claws that catch!\"</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>key <span class=\"st0\">\"vigenere cipher\"</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>enc <span class=\"br0\">(</span>vigen\u00e8re msg key<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>dec <span class=\"br0\">(</span>vigen\u00e8re enc key <span class=\"sy0\">:</span><span class=\"me1\">decipher</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"msg: ~a~%enc: ~a~%dec: ~a~%\"</span> msg enc dec<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Clojure", "loc": 29, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> org<span class=\"sy0\">.</span>rosettacode<span class=\"sy0\">.</span>clojure<span class=\"sy0\">.</span>vigenere<br/>  <span class=\"br0\">(</span>:<span class=\"me1\">require</span> <span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>string\u00a0:<span class=\"me1\">as</span> string<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; convert letter to offset from \\A</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> to<span class=\"sy0\">-</span>num <span class=\"br0\">[</span>char<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span>int char<span class=\"br0\">)</span> <span class=\"br0\">(</span>int \\A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; convert number to letter, treating it as modulo 26 offset from \\A</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> from<span class=\"sy0\">-</span>num <span class=\"br0\">[</span>num<span class=\"br0\">]</span> <span class=\"br0\">(</span>char <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>mod num <span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>int \\A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Convert a string to a sequence of just the letters as uppercase chars</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> to<span class=\"sy0\">-</span>normalized<span class=\"sy0\">-</span>seq <span class=\"br0\">[</span><span class=\"kw1\">str</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">map</span> #'<span class=\"kw1\">first</span> <span class=\"br0\">(</span><span class=\"kw1\">re-seq</span> #<span class=\"st0\">\"[A-Z]\"</span> <span class=\"br0\">(</span>string<span class=\"sy0\">/</span>upper<span class=\"sy0\">-</span>case <span class=\"kw1\">str</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; add (op=+) or subtract (op=-) the numerical value of the key letter from the</span><br/><span class=\"co1\">; text letter.  </span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> crypt1 <span class=\"br0\">[</span>op text key<span class=\"br0\">]</span> <br/>  <span class=\"br0\">(</span>from<span class=\"sy0\">-</span>num <span class=\"br0\">(</span><span class=\"kw1\">apply</span> op <span class=\"br0\">(</span>list <span class=\"br0\">(</span>to<span class=\"sy0\">-</span>num text<span class=\"br0\">)</span> <span class=\"br0\">(</span>to<span class=\"sy0\">-</span>num key<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> crypt <span class=\"br0\">[</span>op text key<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>xcrypt1 <span class=\"br0\">(</span>partial #'crypt1 op<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'<span class=\"kw1\">str</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">map</span> xcrypt1 <span class=\"br0\">(</span>to<span class=\"sy0\">-</span>normalized<span class=\"sy0\">-</span>seq text<span class=\"br0\">)</span> <br/>                   <span class=\"br0\">(</span><span class=\"kw1\">cycle</span> <span class=\"br0\">(</span>to<span class=\"sy0\">-</span>normalized<span class=\"sy0\">-</span>seq key<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; encipher a text</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> encrypt <span class=\"br0\">[</span>plaintext key<span class=\"br0\">]</span> <span class=\"br0\">(</span>crypt #'<span class=\"sy0\">+</span> plaintext key<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; decipher a text</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> decrypt <span class=\"br0\">[</span>ciphertext key<span class=\"br0\">]</span> <span class=\"br0\">(</span>crypt #'<span class=\"sy0\">-</span> ciphertext key<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 35, "block": "<pre class=\"coffeescript highlighted_source\"><span class=\"co1\"># Simple helper since charCodeAt is quite long to write.</span><br/>code = <span class=\"br0\">(</span>char<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> char.<span class=\"me1\">charCodeAt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>encrypt = <span class=\"br0\">(</span>text<span class=\"sy0\">,</span> key<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>\tres = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\tj = <span class=\"nu0\">0</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> text.<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">continue</span> <span class=\"kw1\">if</span> c <span class=\"sy0\">&lt;</span> <span class=\"st0\">'A'</span> <span class=\"kw2\">or</span> c <span class=\"sy0\">&gt;</span> <span class=\"st0\">'Z'</span><br/>\u00a0<br/>\t\tres.<span class=\"me1\">push</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>code c<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>code key<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">130</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span> <span class=\"sy0\">+</span> <span class=\"nu0\">65</span><br/>\t\tj = <span class=\"sy0\">++</span>j <span class=\"sy0\">%</span> key.<span class=\"me1\">length</span><br/>\u00a0<br/>\tString.<span class=\"me1\">fromCharCode</span> res...<br/>\u00a0<br/><span class=\"me1\">decrypt</span> = <span class=\"br0\">(</span>text<span class=\"sy0\">,</span> key<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>\tres = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\tj = <span class=\"nu0\">0</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> text.<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">continue</span> <span class=\"kw1\">if</span> c <span class=\"sy0\">&lt;</span> <span class=\"st0\">'A'</span> <span class=\"kw2\">or</span> c <span class=\"sy0\">&gt;</span> <span class=\"st0\">'Z'</span><br/>\u00a0<br/>\t\tres.<span class=\"me1\">push</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>code c<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>code key<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span> <span class=\"sy0\">+</span> <span class=\"nu0\">65</span><br/>\t\tj = <span class=\"sy0\">++</span>j <span class=\"sy0\">%</span> key.<span class=\"me1\">length</span><br/>\u00a0<br/>\tString.<span class=\"me1\">fromCharCode</span> res...<br/>\u00a0<br/><span class=\"co1\"># Trying it out</span><br/>key       = <span class=\"st0\">\"VIGENERECIPHER\"</span><br/>original  = <span class=\"st0\">\"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\"</span><br/>encrypted = encrypt original<span class=\"sy0\">,</span> key<br/>\u00a0<br/>console.<span class=\"me1\">log</span> <span class=\"st0\">\"Original \u00a0: #{original}\"</span><br/>console.<span class=\"me1\">log</span> <span class=\"st0\">\"Encrypted\u00a0: #{encrypted}\"</span><br/>console.<span class=\"me1\">log</span> <span class=\"st0\">\"Decrypted\u00a0: #{decrypt encrypted, key}\"</span></pre>"}, {"lang": "D", "loc": 29, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">string</span> encrypt<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span> txt<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">string</span> key<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> @<span class=\"kw4\">safe</span><br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>key.<span class=\"me1\">removechars</span><span class=\"br0\">(</span><span class=\"st0\">\"^A-Z\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> key<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">string</span> res<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> c<span class=\"sy0\">;</span> txt.<span class=\"me1\">toUpper</span>.<span class=\"me1\">removechars</span><span class=\"br0\">(</span><span class=\"st0\">\"^A-Z\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        res <span class=\"sy0\">~=</span> <span class=\"br0\">(</span>c <span class=\"sy0\">+</span> key<span class=\"br0\">[</span>i <span class=\"sy0\">%</span> $<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"st0\">'A'</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span> <span class=\"sy0\">+</span> <span class=\"st0\">'A'</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> res<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">string</span> decrypt<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span> txt<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">string</span> key<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> @<span class=\"kw4\">safe</span><br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>key.<span class=\"me1\">removechars</span><span class=\"br0\">(</span><span class=\"st0\">\"^A-Z\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> key<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">string</span> res<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">immutable</span> c<span class=\"sy0\">;</span> txt.<span class=\"me1\">toUpper</span>.<span class=\"me1\">removechars</span><span class=\"br0\">(</span><span class=\"st0\">\"^A-Z\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       res <span class=\"sy0\">~=</span> <span class=\"br0\">(</span>c <span class=\"sy0\">-</span> key<span class=\"br0\">[</span>i <span class=\"sy0\">%</span> $<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span> <span class=\"sy0\">+</span> <span class=\"st0\">'A'</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> res<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> key <span class=\"sy0\">=</span> <span class=\"st0\">\"VIGENERECIPHER\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> original <span class=\"sy0\">=</span> <span class=\"st0\">\"Beware the Jabberwock, my son!\"</span> <span class=\"sy0\">~</span><br/>                         <span class=\"st0\">\" The jaws that bite, the claws that catch!\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> encoded <span class=\"sy0\">=</span> original.<span class=\"me1\">encrypt</span><span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>encoded<span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> encoded.<span class=\"me1\">decrypt</span><span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elena", "loc": 48, "block": "<pre class=\"text highlighted_source\">import system'text.<br/>import system'math.<br/>import system'routines.<br/>import extensions.<br/>\u00a0<br/>class VCipher<br/>{<br/>    literal encrypt(LiteralValue txt, LiteralValue pw, IntNumber d)<br/>    [<br/>        var output\u00a0:= TextBuilder new.<br/>        int pwi\u00a0:= 0.<br/>\u00a0<br/>        literal $pw\u00a0:= pw upperCase.<br/>\u00a0<br/>        txt upperCase; forEach(:t)<br/>        [<br/>            if(t &gt;= $65)<br/>            [<br/>                int tmp\u00a0:= t toInt - 65 + d * ($pw[pwi] toInt - 65).<br/>                if (tmp &lt; 0)<br/>                [<br/>                    tmp += 26<br/>                ].<br/>                output write((65 + tmp mod:26) toChar).<br/>                pwi += 1.<br/>                if (pwi == $pw length) [ pwi\u00a0:= 0 ]<br/>            ]<br/>        ].<br/>\u00a0<br/>        ^ output literal<br/>    ]<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    var v\u00a0:= VCipher new.<br/>\u00a0<br/>    var s0\u00a0:= \"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\".<br/>    var pw\u00a0:= \"VIGENERECIPHER\".<br/>\u00a0<br/>    console printLine(s0,'newLine,pw,'newLine).<br/>    var s1\u00a0:= v encrypt(s0, pw, 1).<br/>    console printLine(\"Encrypted:\",s1).<br/>    s1\u00a0:= v encrypt(s1, \"VIGENERECIPHER\", -1).<br/>    console printLine(\"Decrypted:\",s1).<br/>    console printLine(\"Press any key to continue..\").<br/>    console readKey.<br/>].</pre>"}, {"lang": "Elixir", "loc": 28, "block": "<pre class=\"text highlighted_source\">defmodule VigenereCipher do<br/>  @base \u00a0?A<br/>  @size \u00a0?Z - @base + 1<br/>\u00a0<br/>  def encrypt(text, key), do: crypt(text, key, 1)<br/>\u00a0<br/>  def decrypt(text, key), do: crypt(text, key, -1)<br/>\u00a0<br/>  defp crypt(text, key, dir) do<br/>    text = String.upcase(text) |&gt; String.replace(~r/[^A-Z]/, \"\") |&gt; to_char_list<br/>    key_iterator = String.upcase(key) |&gt; String.replace(~r/[^A-Z]/, \"\") |&gt; to_char_list<br/>                   |&gt; Enum.map(fn c -&gt; (c - @base) * dir end) |&gt; Stream.cycle<br/>    Enum.zip(text, key_iterator)<br/>    |&gt; Enum.reduce('', fn {char, offset}, ciphertext -&gt;<br/>         [rem(char - @base + offset + @size, @size) + @base | ciphertext]<br/>       end)<br/>    |&gt; Enum.reverse |&gt; List.to_string<br/>  end<br/>end<br/>\u00a0<br/>plaintext = \"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\"<br/>key = \"Vigenere cipher\"<br/>ciphertext = VigenereCipher.encrypt(plaintext, key)<br/>recovered  = VigenereCipher.decrypt(ciphertext, key)<br/>\u00a0<br/>IO.puts \"Original: #{plaintext}\"<br/>IO.puts \"Encrypted: #{ciphertext}\"<br/>IO.puts \"Decrypted: #{recovered}\"</pre>"}, {"lang": "Erlang", "loc": 47, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">% Erlang implementation of Vigen\u00e8re cipher</span><br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>vigenere<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>encrypt<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> decrypt<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">import</span><span class=\"br0\">(</span>lists<span class=\"sy1\">,</span> <span class=\"br0\">[</span>append<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> filter<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> map<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> zipwith<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">% Utility functions for character tests and conversions</span><br/><span class=\"re3\">isupper</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">C</span>|_<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">isupper</span><span class=\"br0\">(</span><span class=\"re5\">C</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">isupper</span><span class=\"br0\">(</span><span class=\"re5\">C</span><span class=\"br0\">)</span>     <span class=\"sy1\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re5\">C</span> <span class=\"sy3\">&gt;=</span> <span class=\"re6\">$A</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span><span class=\"re5\">C</span> <span class=\"sy3\">=&lt;</span> <span class=\"re6\">$Z</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">islower</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">C</span>|_<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">islower</span><span class=\"br0\">(</span><span class=\"re5\">C</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">islower</span><span class=\"br0\">(</span><span class=\"re5\">C</span><span class=\"br0\">)</span>     <span class=\"sy1\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re5\">C</span> <span class=\"sy3\">&gt;=</span> <span class=\"re6\">$a</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span><span class=\"re5\">C</span> <span class=\"sy3\">=&lt;</span> <span class=\"re6\">$z</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">isalpha</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">C</span>|_<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">isalpha</span><span class=\"br0\">(</span><span class=\"re5\">C</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">isalpha</span><span class=\"br0\">(</span><span class=\"re5\">C</span><span class=\"br0\">)</span>     <span class=\"sy1\">-&gt;</span> <span class=\"re3\">isupper</span><span class=\"br0\">(</span><span class=\"re5\">C</span><span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"re3\">islower</span><span class=\"br0\">(</span><span class=\"re5\">C</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">toupper</span><span class=\"br0\">(</span><span class=\"re5\">S</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"kw4\">is_list</span><span class=\"br0\">(</span><span class=\"re5\">S</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> toupper<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">S</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">toupper</span><span class=\"br0\">(</span><span class=\"re5\">C</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"re5\">C</span> <span class=\"sy3\">&gt;=</span> <span class=\"re6\">$a</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span><span class=\"re5\">C</span> <span class=\"sy3\">=&lt;</span> <span class=\"re6\">$z</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">C</span> <span class=\"sy3\">-</span> <span class=\"re6\">$a</span> <span class=\"sy3\">+</span> <span class=\"re6\">$A</span><span class=\"sy1\">;</span><br/><span class=\"re3\">toupper</span><span class=\"br0\">(</span><span class=\"re5\">C</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">C</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">% modulo function that normalizes into positive range for positive divisor</span><br/><span class=\"re3\">mod</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re5\">X</span> <span class=\"kw2\">rem</span> <span class=\"re5\">Y</span> <span class=\"sy3\">+</span> <span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"kw2\">rem</span> <span class=\"re5\">Y</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">% convert letter to position in alphabet (A=0,B=1,...,Y=24,Z=25).</span><br/><span class=\"re3\">to_pos</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">L</span> <span class=\"sy3\">&gt;=</span> <span class=\"re6\">$A</span><span class=\"sy1\">,</span> <span class=\"re5\">L</span> <span class=\"sy3\">=&lt;</span> <span class=\"re6\">$Z</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">L</span> <span class=\"sy3\">-</span> <span class=\"re6\">$A</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">% convert position in alphabet back to letter</span><br/><span class=\"re3\">from_pos</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">mod</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"re6\">$A</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">% encode the given letter given the single-letter key</span><br/><span class=\"re3\">encipher</span><span class=\"br0\">(</span><span class=\"re5\">P</span><span class=\"sy1\">,</span> <span class=\"re5\">K</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">from_pos</span><span class=\"br0\">(</span><span class=\"re3\">to_pos</span><span class=\"br0\">(</span><span class=\"re5\">P</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"re3\">to_pos</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">% decode the given letter given the single-letter key</span><br/><span class=\"re3\">decipher</span><span class=\"br0\">(</span><span class=\"re5\">C</span><span class=\"sy1\">,</span> <span class=\"re5\">K</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">from_pos</span><span class=\"br0\">(</span><span class=\"re3\">to_pos</span><span class=\"br0\">(</span><span class=\"re5\">C</span><span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"re3\">to_pos</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">% extend a list by repeating it until it is at least N elements long</span><br/><span class=\"re3\">cycle_to</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">List</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">List</span><span class=\"br0\">)</span> <span class=\"sy3\">&gt;=</span> <span class=\"re5\">N</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">List</span><span class=\"sy1\">;</span><br/><span class=\"re3\">cycle_to</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">List</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">append</span><span class=\"br0\">(</span><span class=\"re5\">List</span><span class=\"sy1\">,</span> <span class=\"re3\">cycle_to</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">List</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">List</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"co1\">% Encryption prep: reduce string to only its letters, in uppercase</span><br/><span class=\"re3\">normalize</span><span class=\"br0\">(</span><span class=\"re5\">Str</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">toupper</span><span class=\"br0\">(</span><span class=\"re3\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> isalpha<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Str</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">crypt</span><span class=\"br0\">(</span><span class=\"re5\">RawText</span><span class=\"sy1\">,</span> <span class=\"re5\">RawKey</span><span class=\"sy1\">,</span> <span class=\"re5\">Func</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>  <span class=\"re5\">PlainText</span> <span class=\"sy3\">=</span> <span class=\"re3\">normalize</span><span class=\"br0\">(</span><span class=\"re5\">RawText</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"re3\">zipwith</span><span class=\"br0\">(</span><span class=\"re5\">Func</span><span class=\"sy1\">,</span> <span class=\"re5\">PlainText</span><span class=\"sy1\">,</span> <span class=\"re3\">cycle_to</span><span class=\"br0\">(</span><span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">PlainText</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">normalize</span><span class=\"br0\">(</span><span class=\"re5\">RawKey</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">encrypt</span><span class=\"br0\">(</span><span class=\"re5\">Text</span><span class=\"sy1\">,</span> <span class=\"re5\">Key</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">crypt</span><span class=\"br0\">(</span><span class=\"re5\">Text</span><span class=\"sy1\">,</span> <span class=\"re5\">Key</span><span class=\"sy1\">,</span> <span class=\"kw1\">fun</span> encipher<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">decrypt</span><span class=\"br0\">(</span><span class=\"re5\">Text</span><span class=\"sy1\">,</span> <span class=\"re5\">Key</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">crypt</span><span class=\"br0\">(</span><span class=\"re5\">Text</span><span class=\"sy1\">,</span> <span class=\"re5\">Key</span><span class=\"sy1\">,</span> <span class=\"kw1\">fun</span> decipher<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Factor", "loc": 30, "block": "<pre class=\"text highlighted_source\">USING: arrays ascii formatting kernel math math.functions<br/>math.order sequences\u00a0;<br/>IN: rosetta-code.vigenere-cipher<br/>\u00a0<br/>: mult-pad ( key input -- x )<br/>    [ length ] <a class=\"__cf_email__\" data-cfemail=\"781a1138\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 2dup &lt; [ swap ] when / ceiling\u00a0;<br/>\u00a0<br/>: lengthen-pad ( key input -- rep-key input )<br/>    [ mult-pad ] 2keep [ &lt;repetition&gt; concat ] dip<br/>    [ length ] keep [ head ] dip\u00a0;<br/>\u00a0<br/>: normalize ( str -- only-upper-letters )<br/>    &gt;upper [ LETTER? ] filter\u00a0;<br/>\u00a0<br/>: vigenere-encrypt ( key input -- ecrypted )<br/>    [ normalize ] <a class=\"__cf_email__\" data-cfemail=\"5f3d361f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> lengthen-pad<br/>    [ [ CHAR: A - ] map ] <a class=\"__cf_email__\" data-cfemail=\"1a78735a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> [ + 26 mod CHAR: A + ] 2map\u00a0;<br/>\u00a0<br/>: vigenere-decrypt ( key input -- decrypted )<br/>    [ normalize ] <a class=\"__cf_email__\" data-cfemail=\"26444f66\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> lengthen-pad [ [ CHAR: A - ] map ] <a class=\"__cf_email__\" data-cfemail=\"f2909bb2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    [ - 26 - abs 26 mod CHAR: A + ] 2map\u00a0;<br/>\u00a0<br/>: main ( -- )<br/>    \"Vigenere cipher\" dup<br/>    \"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\"<br/>    2dup \"Key:\u00a0%s\\nInput:\u00a0%s\\n\" printf<br/>    vigenere-encrypt dup \"Encrypted:\u00a0%s\\n\" printf<br/>    vigenere-decrypt \"Decrypted:\u00a0%s\\n\" printf\u00a0;<br/>\u00a0<br/>MAIN: main</pre>"}, {"lang": "Fortran", "loc": 62, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> vigenere_cipher<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"nu0\">80</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">plaintext</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\"</span>, <span class=\"sy0\">&amp;</span><br/>                   ciphertext <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"nu0\">14</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">key</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"VIGENERECIPHER\"</span><br/>\u00a0<br/>\u00a0<br/>  <span class=\"kw1\">call</span> encrypt<span class=\"br0\">(</span>plaintext, ciphertext, key<span class=\"br0\">)</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> plaintext<br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> ciphertext<br/>  <span class=\"kw1\">call</span> decrypt<span class=\"br0\">(</span>ciphertext, plaintext, key<span class=\"br0\">)</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> plaintext<br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw1\">subroutine</span> encrypt<span class=\"br0\">(</span>intxt, outtxt, k<span class=\"br0\">)</span><br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>  <span class=\"sy0\">::</span> <span class=\"me2\">intxt</span>, k<br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">out</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">outtxt</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">chrn</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">cp</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, kp <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>  outtxt <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">len</span><span class=\"br0\">(</span><span class=\"kw4\">trim</span><span class=\"br0\">(</span>intxt<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">select</span> <span class=\"kw1\">case</span><span class=\"br0\">(</span>intxt<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">case</span> <span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"Z\"</span>, <span class=\"st0\">\"a\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"z\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">select</span> <span class=\"kw1\">case</span><span class=\"br0\">(</span>intxt<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">case</span><span class=\"br0\">(</span><span class=\"st0\">\"a\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"z\"</span><span class=\"br0\">)</span><br/>            chrn <span class=\"sy0\">=</span> <span class=\"kw4\">iachar</span><span class=\"br0\">(</span>intxt<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">32</span><br/>\u00a0<br/>          <span class=\"kw1\">case</span> <span class=\"kw1\">default</span><br/>            chrn <span class=\"sy0\">=</span> <span class=\"kw4\">iachar</span><span class=\"br0\">(</span>intxt<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">select</span><br/>\u00a0<br/>        outtxt<span class=\"br0\">(</span>cp<span class=\"sy0\">:</span>cp<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">achar</span><span class=\"br0\">(</span><span class=\"kw4\">modulo</span><span class=\"br0\">(</span>chrn <span class=\"sy0\">+</span> <span class=\"kw4\">iachar</span><span class=\"br0\">(</span>k<span class=\"br0\">(</span>kp<span class=\"sy0\">:</span>kp<span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">65</span><span class=\"br0\">)</span><br/>        cp <span class=\"sy0\">=</span> cp <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        kp <span class=\"sy0\">=</span> kp <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>kp &gt; <span class=\"kw4\">len</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> kp <span class=\"sy0\">=</span> kp <span class=\"sy0\">-</span> <span class=\"kw4\">len</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">select</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/>\u00a0<br/><span class=\"kw1\">subroutine</span> decrypt<span class=\"br0\">(</span>intxt, outtxt, k<span class=\"br0\">)</span><br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>  <span class=\"sy0\">::</span> <span class=\"me2\">intxt</span>, k<br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">out</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">outtxt</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">chrn</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">cp</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, kp <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>  outtxt <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">len</span><span class=\"br0\">(</span><span class=\"kw4\">trim</span><span class=\"br0\">(</span>intxt<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    chrn <span class=\"sy0\">=</span> <span class=\"kw4\">iachar</span><span class=\"br0\">(</span>intxt<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    outtxt<span class=\"br0\">(</span>cp<span class=\"sy0\">:</span>cp<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">achar</span><span class=\"br0\">(</span><span class=\"kw4\">modulo</span><span class=\"br0\">(</span>chrn <span class=\"sy0\">-</span> <span class=\"kw4\">iachar</span><span class=\"br0\">(</span>k<span class=\"br0\">(</span>kp<span class=\"sy0\">:</span>kp<span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">65</span><span class=\"br0\">)</span><br/>    cp <span class=\"sy0\">=</span> cp <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    kp <span class=\"sy0\">=</span> kp <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>kp &gt; <span class=\"kw4\">len</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span> kp <span class=\"sy0\">=</span> kp <span class=\"sy0\">-</span> <span class=\"kw4\">len</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "F#", "loc": 29, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">module</span> vigenere <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> keyschedule <span class=\"br0\">(</span>key:<span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> key.<span class=\"me1\">ToUpper</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">filter</span> System.<span class=\"me1\">Char</span>.<span class=\"me1\">IsLetter</span><br/>        <span class=\"kw1\">let</span> l <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">length</span> s<br/>        <span class=\"br0\">(</span><span class=\"kw1\">fun</span> n <span class=\"sy0\">-&gt;</span> <span class=\"kw4\">int</span> s.<span class=\"br0\">[</span>n <span class=\"sy0\">%</span> l<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">let</span> enc k c <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>c <span class=\"sy0\">+</span> k <span class=\"sy0\">-</span> <span class=\"nu0\">130</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">65</span><br/>    <span class=\"kw1\">let</span> dec k c <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>c <span class=\"sy0\">-</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">130</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">65</span><br/>    <span class=\"kw1\">let</span> crypt f key <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">mapi</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> n c <span class=\"sy0\">-&gt;</span> f <span class=\"br0\">(</span>key n<span class=\"br0\">)</span> c <span class=\"sy0\">|&gt;</span> <span class=\"kw4\">char</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">let</span> encrypt key <span class=\"br0\">(</span>plaintext:<span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        plaintext.<span class=\"me1\">ToUpper</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">filter</span> System.<span class=\"me1\">Char</span>.<span class=\"me1\">IsLetter</span><br/>        <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">map</span> <span class=\"kw4\">int</span><br/>        <span class=\"sy0\">|&gt;</span> crypt enc <span class=\"br0\">(</span>keyschedule key<span class=\"br0\">)</span><br/>        <span class=\"sy0\">|&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> a <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">new</span> <span class=\"kw4\">string</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">let</span> decrypt key <span class=\"br0\">(</span>ciphertext:<span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        ciphertext.<span class=\"me1\">ToUpper</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">ToCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">map</span> <span class=\"kw4\">int</span><br/>        <span class=\"sy0\">|&gt;</span> crypt dec <span class=\"br0\">(</span>keyschedule key<span class=\"br0\">)</span><br/>        <span class=\"sy0\">|&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> a <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">new</span> <span class=\"kw4\">string</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> passwd <span class=\"sy0\">=</span> <span class=\"st0\">\"Vigenere Cipher\"</span><br/><span class=\"kw1\">let</span> cipher <span class=\"sy0\">=</span> vigenere.<span class=\"me1\">encrypt</span> passwd <span class=\"st0\">\"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\"</span><br/><span class=\"kw1\">let</span> plain <span class=\"sy0\">=</span> vigenere.<span class=\"me1\">decrypt</span> passwd cipher<br/>printfn <span class=\"st0\">\"%s<span class=\"es0\">\\n</span>%s\"</span> cipher plain<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 69, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">type</span> vkey <span class=\"kw4\">string</span><br/>\u00a0<br/><span class=\"kw4\">func</span> newVigen\u00e8re<span class=\"sy1\">(</span>key <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>vkey<span class=\"sy1\">,</span> <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    v <span class=\"sy2\">:=</span> vkey<span class=\"sy1\">(</span>upperOnly<span class=\"sy1\">(</span>key<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">return</span> v<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>v<span class=\"sy1\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"co1\">// key length 0 invalid</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>k vkey<span class=\"sy1\">)</span> encipher<span class=\"sy1\">(</span>pt <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    ct <span class=\"sy2\">:=</span> upperOnly<span class=\"sy1\">(</span>pt<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> c <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> ct <span class=\"sy1\">{</span><br/>        ct<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'A'</span> <span class=\"sy3\">+</span> <span class=\"sy1\">(</span>c<span class=\"sy3\">-</span><span class=\"st0\">'A'</span><span class=\"sy3\">+</span>k<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">%</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>k<span class=\"sy1\">)]</span><span class=\"sy3\">-</span><span class=\"st0\">'A'</span><span class=\"sy1\">)</span><span class=\"sy3\">%</span><span class=\"nu0\">26</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>ct<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>k vkey<span class=\"sy1\">)</span> decipher<span class=\"sy1\">(</span>ct <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    pt <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>ct<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> pt <span class=\"sy1\">{</span><br/>        c <span class=\"sy2\">:=</span> ct<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>        <span class=\"kw1\">if</span> c &lt; <span class=\"st0\">'A'</span> <span class=\"sy3\">||</span> c <span class=\"sy3\">&gt;</span> <span class=\"st0\">'Z'</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"kw2\">false</span> <span class=\"co1\">// invalid ciphertext</span><br/>        <span class=\"sy1\">}</span><br/>        pt<span class=\"sy1\">[</span>i<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'A'</span> <span class=\"sy3\">+</span> <span class=\"sy1\">(</span>c<span class=\"sy3\">-</span>k<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">%</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>k<span class=\"sy1\">)]</span><span class=\"sy3\">+</span><span class=\"nu0\">26</span><span class=\"sy1\">)</span><span class=\"sy3\">%</span><span class=\"nu0\">26</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>pt<span class=\"sy1\">),</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// upperOnly extracts letters A-Z, a-z from a string and</span><br/><span class=\"co1\">// returns them all upper case in a byte slice.</span><br/><span class=\"co1\">// Useful for vkey constructor and encipher function.</span><br/><span class=\"kw4\">func</span> upperOnly<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span> <span class=\"sy1\">{</span><br/>    u <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">);</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        c <span class=\"sy2\">:=</span> s<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>        <span class=\"kw1\">if</span> c &gt;<span class=\"sy2\">=</span> <span class=\"st0\">'A'</span> <span class=\"sy3\">&amp;&amp;</span> c <span class=\"sy3\">&lt;=</span> <span class=\"st0\">'Z'</span> <span class=\"sy1\">{</span><br/>            u <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>u<span class=\"sy1\">,</span> c<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> c &gt;<span class=\"sy2\">=</span> <span class=\"st0\">'a'</span> <span class=\"sy3\">&amp;&amp;</span> c <span class=\"sy3\">&lt;=</span> <span class=\"st0\">'z'</span> <span class=\"sy1\">{</span><br/>            u <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>u<span class=\"sy1\">,</span> c<span class=\"sy3\">-</span><span class=\"nu0\">32</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> u<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">const</span> testKey <span class=\"sy2\">=</span> <span class=\"st0\">\"Vigen\u00e8re Cipher\"</span><br/><span class=\"kw1\">const</span> testPT <span class=\"sy2\">=</span> <span class=\"co2\">`Beware the Jabberwock, my son!<br/>    The jaws that bite, the claws that catch!`</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Supplied key: \"</span><span class=\"sy1\">,</span> testKey<span class=\"sy1\">)</span><br/>    v<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> newVigen\u00e8re<span class=\"sy1\">(</span>testKey<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>ok <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Invalid key\"</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Effective key:\"</span><span class=\"sy1\">,</span> v<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"Plain text:\"</span><span class=\"sy1\">,</span> testPT<span class=\"sy1\">)</span><br/>    ct <span class=\"sy2\">:=</span> v<span class=\"sy3\">.</span><span class=\"me1\">encipher</span><span class=\"sy1\">(</span>testPT<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"Enciphered:\"</span><span class=\"sy1\">,</span> ct<span class=\"sy1\">)</span><br/>    dt<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> v<span class=\"sy3\">.</span>decipher<span class=\"sy1\">(</span>ct<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>ok <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Invalid ciphertext\"</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Deciphered:\"</span><span class=\"sy1\">,</span> dt<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 26, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><br/><span class=\"kw1\">import</span> Text<span class=\"sy0\">.</span>Printf<br/>\u00a0<br/><span class=\"co1\">-- Perform encryption or decryption, depending on f.</span><br/>crypt f key <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> toLetter <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> f <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:cycle\"><span class=\"kw3\">cycle</span></a> key<span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span> toLetter <span class=\"sy0\">=</span> chr <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>ord <span class=\"st0\">'A'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Encrypt or decrypt one letter.</span><br/>enc k c <span class=\"sy0\">=</span> <span class=\"br0\">(</span>ord k <span class=\"sy0\">+</span> ord c<span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` <span class=\"nu0\">26</span><br/>dec k c <span class=\"sy0\">=</span> <span class=\"br0\">(</span>ord c <span class=\"sy0\">-</span> ord k<span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` <span class=\"nu0\">26</span><br/>\u00a0<br/><span class=\"co1\">-- Given a key, encrypt or decrypt an input string.</span><br/>encrypt <span class=\"sy0\">=</span> crypt enc<br/>decrypt <span class=\"sy0\">=</span> crypt dec<br/>\u00a0<br/><span class=\"co1\">-- Convert a string to have only upper case letters.</span><br/>convert <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> toUpper <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> isLetter<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> key  <span class=\"sy0\">=</span> <span class=\"st0\">\"VIGENERECIPHER\"</span><br/>      text <span class=\"sy0\">=</span> <span class=\"st0\">\"Beware the Jabberwock, my son! The jaws that bite, \"</span><br/>             <span class=\"sy0\">++</span> <span class=\"st0\">\"the claws that catch!\"</span><br/>      encr <span class=\"sy0\">=</span> encrypt key <span class=\"sy0\">$</span> convert text<br/>      decr <span class=\"sy0\">=</span> decrypt key encr<br/>  printf <span class=\"st0\">\"    Input:\u00a0%s<span class=\"es0\">\\n</span>      Key:\u00a0%s<span class=\"es0\">\\n</span>Encrypted:\u00a0%s<span class=\"es0\">\\n</span>Decrypted:\u00a0%s<span class=\"es0\">\\n</span>\"</span><br/>    text key encr decr</pre>"}, {"lang": "Icon and Unicon", "loc": 24, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   ptext <span class=\"sy1\">:=</span> <span class=\"st0\">\"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\"</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Key        = \"</span><span class=\"sy1\">,</span>ekey <span class=\"sy1\">:=</span> <span class=\"st0\">\"VIGENERECIPHER\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Plain Text = \"</span><span class=\"sy1\">,</span>ptext<span class=\"br0\">)</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Normalized = \"</span><span class=\"sy1\">,</span>GFormat<span class=\"br0\">(</span>ptext <span class=\"sy1\">:=</span> NormalizeText<span class=\"br0\">(</span>ptext<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Enciphered = \"</span><span class=\"sy1\">,</span>GFormat<span class=\"br0\">(</span>ctext <span class=\"sy1\">:=</span> Vignere<span class=\"br0\">(</span><span class=\"st0\">\"e\"</span><span class=\"sy1\">,</span>ekey<span class=\"sy1\">,</span>ptext<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Deciphered = \"</span><span class=\"sy1\">,</span>GFormat<span class=\"br0\">(</span>ptext <span class=\"sy1\">:=</span> Vignere<span class=\"br0\">(</span><span class=\"st0\">\"d\"</span><span class=\"sy1\">,</span>ekey<span class=\"sy1\">,</span>ctext<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> Vignere<span class=\"br0\">(</span>mode<span class=\"sy1\">,</span>ekey<span class=\"sy1\">,</span>ptext<span class=\"sy1\">,</span>alpha<span class=\"br0\">)</span>   <span class=\"co1\">#: Vignere cipher</span><br/>   <span class=\"sy1\">/</span>alpha <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">ucase</span>                                              <span class=\"co1\"># default </span><br/>   <span class=\"kw1\">if</span> <span class=\"sy1\">*</span>alpha <span class=\"sy1\">~=</span> <span class=\"sy1\">*</span><span class=\"kw4\">cset</span><span class=\"br0\">(</span>alpha<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw4\">runerr</span><span class=\"br0\">(</span><span class=\"nu0\">205</span><span class=\"sy1\">,</span>alpha<span class=\"br0\">)</span>              <span class=\"co1\"># no dups</span><br/>   alpha <span class=\"sy1\">||:=</span> alpha                                              <span class=\"co1\"># unobstructed</span><br/>\u00a0<br/>   <span class=\"kw1\">every</span> ctext<span class=\"sy1\">:=</span><span class=\"st0\">\"\"</span> <span class=\"sy1\">&amp;</span> p<span class=\"sy1\">:=</span>ptext<span class=\"br0\">[</span>i <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*</span>ptext<span class=\"br0\">]</span> <span class=\"sy1\">&amp;</span> k<span class=\"sy1\">:=</span>ekey<span class=\"br0\">[</span><span class=\"br0\">(</span>i<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">%*</span>ekey<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span> <br/>      <span class=\"kw1\">case</span> mode <span class=\"kw1\">of</span> <span class=\"br0\">{</span><br/>         <span class=\"st0\">\"e\"</span><span class=\"sy1\">|</span><span class=\"st0\">\"encrypt\"</span><span class=\"sy1\">:</span> <br/>            ctext<span class=\"sy1\">||:=</span><span class=\"kw4\">map</span><span class=\"br0\">(</span>p<span class=\"sy1\">,</span>alpha<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">+:*</span>alpha<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>alpha<span class=\"br0\">[</span><span class=\"kw4\">find</span><span class=\"br0\">(</span>k<span class=\"sy1\">,</span>alpha<span class=\"br0\">)</span><span class=\"sy1\">+:</span><span class=\"br0\">(</span><span class=\"sy1\">*</span>alpha<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>         <span class=\"st0\">\"d\"</span><span class=\"sy1\">|</span><span class=\"st0\">\"decrypt\"</span><span class=\"sy1\">:</span> <br/>            ctext<span class=\"sy1\">||:=</span><span class=\"kw4\">map</span><span class=\"br0\">(</span>p<span class=\"sy1\">,</span>alpha<span class=\"br0\">[</span><span class=\"kw4\">find</span><span class=\"br0\">(</span>k<span class=\"sy1\">,</span>alpha<span class=\"br0\">)</span><span class=\"sy1\">+:</span><span class=\"br0\">(</span><span class=\"sy1\">*</span>alpha<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>alpha<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">+:*</span>alpha<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">default</span><span class=\"sy1\">:</span> <span class=\"kw4\">runerr</span><span class=\"br0\">(</span><span class=\"nu0\">205</span><span class=\"sy1\">,</span>mode<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/><span class=\"kw1\">return</span> ctext<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 13, "block": "<pre class=\"j highlighted_source\"><span class=\"co1\">NB.*vig c Vigen\u00e8re cipher</span><br/><span class=\"co1\">NB. cipher=. key 0 vig charset plain</span><br/><span class=\"co1\">NB. plain=. key 1 vig charset cipher</span><br/>vig=: conjunction define<br/>:<br/>  r=. <span class=\"sy0\">(</span>#<span class=\"kw2\">y</span><span class=\"sy0\">)</span> $ <span class=\"kw2\">n</span> i.<span class=\"kw2\">x</span><br/>  <span class=\"kw2\">n</span> {~ <span class=\"sy0\">(</span>#<span class=\"kw2\">n</span><span class=\"sy0\">)</span> | <span class=\"sy0\">(</span>r*<span class=\"nu0\">_1</span>^<span class=\"kw2\">m</span><span class=\"sy0\">)</span> + <span class=\"kw2\">n</span> i.<span class=\"kw2\">y</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>ALPHA=: <span class=\"sy0\">(</span><span class=\"nu0\">65</span>,:<span class=\"nu0\">26</span><span class=\"sy0\">)</span> ];.<span class=\"nu0\">0</span> a.               <span class=\"co1\">NB. Character Set</span><br/>preprocess=: <span class=\"sy0\">(</span>#~ e.&amp;ALPHA<span class=\"sy0\">)</span>@toupper     <span class=\"co1\">NB. force uppercase and discard non-alpha chars</span><br/>vigEncryptRC=: <span class=\"nu0\">0</span> vig ALPHA preprocess<br/>vigDecryptRC=: <span class=\"nu0\">1</span> vig ALPHA preprocess</pre>"}, {"lang": "Java", "loc": 33, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> VigenereCipher <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> key <span class=\"sy0\">=</span> <span class=\"st0\">\"VIGENERECIPHER\"</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> ori <span class=\"sy0\">=</span> <span class=\"st0\">\"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\"</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> enc <span class=\"sy0\">=</span> encrypt<span class=\"br0\">(</span>ori, key<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>enc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>decrypt<span class=\"br0\">(</span>enc, key<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> encrypt<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> text, <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> key<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> res <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>        text <span class=\"sy0\">=</span> text.<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> text.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">char</span> c <span class=\"sy0\">=</span> text.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&lt;</span> <span class=\"st0\">'A'</span> <span class=\"sy0\">||</span> c <span class=\"sy0\">&gt;</span> <span class=\"st0\">'Z'</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            res <span class=\"sy0\">+=</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>c <span class=\"sy0\">+</span> key.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"st0\">'A'</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span> <span class=\"sy0\">+</span> <span class=\"st0\">'A'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            j <span class=\"sy0\">=</span> <span class=\"sy0\">++</span>j <span class=\"sy0\">%</span> key.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> res<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> decrypt<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> text, <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> key<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> res <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>        text <span class=\"sy0\">=</span> text.<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> text.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">char</span> c <span class=\"sy0\">=</span> text.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&lt;</span> <span class=\"st0\">'A'</span> <span class=\"sy0\">||</span> c <span class=\"sy0\">&gt;</span> <span class=\"st0\">'Z'</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            res <span class=\"sy0\">+=</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>c <span class=\"sy0\">-</span> key.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span> <span class=\"sy0\">+</span> <span class=\"st0\">'A'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            j <span class=\"sy0\">=</span> <span class=\"sy0\">++</span>j <span class=\"sy0\">%</span> key.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> res<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 24, "block": "<pre class=\"javascript highlighted_source\"><span class=\"co1\">// helpers</span><br/><span class=\"co1\">// helper</span><br/><span class=\"kw1\">function</span> ordA<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> a.<span class=\"me1\">charCodeAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">65</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// vigenere</span><br/><span class=\"kw1\">function</span> vigenere<span class=\"br0\">(</span>text<span class=\"sy0\">,</span> key<span class=\"sy0\">,</span> decode<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> b<span class=\"sy0\">;</span><br/>  key <span class=\"sy0\">=</span> key.<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"co2\">/[^A-Z]/g</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> text.<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"co2\">/[^A-Z]/g</span><span class=\"sy0\">,</span> <span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"co2\">/[A-Z]/g</span><span class=\"sy0\">,</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    b <span class=\"sy0\">=</span> key<span class=\"br0\">[</span>i<span class=\"sy0\">++</span> <span class=\"sy0\">%</span> key.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">String</span>.<span class=\"me1\">fromCharCode</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>ordA<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>decode <span class=\"sy0\">?</span> <span class=\"nu0\">26</span> <span class=\"sy0\">-</span> ordA<span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"sy0\">:</span> ordA<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span> <span class=\"sy0\">+</span> <span class=\"nu0\">65</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// example</span><br/><span class=\"kw1\">var</span> text <span class=\"sy0\">=</span> <span class=\"st0\">\"The quick brown fox Jumped over the lazy Dog the lazy dog lazy dog dog\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> key <span class=\"sy0\">=</span> <span class=\"st0\">'alex'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> enc <span class=\"sy0\">=</span> vigenere<span class=\"br0\">(</span>text<span class=\"sy0\">,</span>key<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> dec <span class=\"sy0\">=</span> vigenere<span class=\"br0\">(</span>enc<span class=\"sy0\">,</span>key<span class=\"sy0\">,</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>enc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>dec<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Julia", "loc": 46, "block": "<pre class=\"text highlighted_source\">function encrypt(msg::AbstractString, key::AbstractString)<br/>    msg    = uppercase(join(filter(isalpha, collect(msg))))<br/>    key    = uppercase(join(filter(isalpha, collect(key))))<br/>    msglen = length(msg)<br/>    keylen = length(key)<br/>\u00a0<br/>    if keylen &lt; msglen<br/>        key = repeat(key, div(msglen - keylen, keylen) + 2)[1:msglen]<br/>    end<br/>\u00a0<br/>    enc = Vector{Char}(msglen)<br/>\u00a0<br/>    @inbounds for i in 1:length(msg)<br/>        enc[i] = Char((Int(msg[i]) + Int(key[i]) - 130)\u00a0% 26 + 65)<br/>    end<br/>\u00a0<br/>    return join(enc)<br/>end<br/>\u00a0<br/>function decrypt(enc::AbstractString, key::AbstractString)<br/>    enc    = uppercase(join(filter(isalpha, collect(enc))))<br/>    key    = uppercase(join(filter(isalpha, collect(key))))<br/>    msglen = length(enc)<br/>    keylen = length(key)<br/>\u00a0<br/>    if keylen &lt; msglen<br/>        key = repeat(key, div(msglen - keylen, keylen) + 2)[1:msglen]<br/>    end<br/>\u00a0<br/>    msg = Vector{Char}(msglen)<br/>\u00a0<br/>    @inbounds for i in 1:length(enc)<br/>        msg[i] = Char((Int(enc[i]) - Int(key[i]) + 26)\u00a0% 26 + 65)<br/>    end<br/>\u00a0<br/>    return join(msg)<br/>end<br/>\u00a0<br/>const messages = (\"Attack at dawn.\", \"Don't attack.\", \"The war is over.\")<br/>const key = \"LEMON\"<br/>\u00a0<br/>for msg in messages<br/>    enc = encrypt(msg, key)<br/>    dec = decrypt(enc, key)<br/>    println(\"Original: $msg\\n -&gt; encrypted: $enc\\n -&gt; decrypted: $dec\")<br/>end</pre>"}, {"lang": "Kotlin", "loc": 26, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/>fun vigenere<span class=\"br0\">(</span>text<span class=\"sy0\">:</span> String, key<span class=\"sy0\">:</span> String, encrypt<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> t <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>encrypt<span class=\"br0\">)</span> text.<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> text<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sb <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> ki <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>c in t<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c <span class=\"sy0\">!</span>in <span class=\"st0\">'A'</span>..<span class=\"st0\">'Z'</span><span class=\"br0\">)</span> continue<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ci <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>encrypt<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>c.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> + key<span class=\"br0\">[</span>ki<span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">130</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>            <span class=\"br0\">(</span>c.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - key<span class=\"br0\">[</span>ki<span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> +  <span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span><br/>        sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">(</span>ci + <span class=\"nu0\">65</span><span class=\"br0\">)</span>.<span class=\"me1\">toChar</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        ki <span class=\"sy0\">=</span> <span class=\"br0\">(</span>ki + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> key.<span class=\"me1\">length</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> key <span class=\"sy0\">=</span> <span class=\"st0\">\"VIGENERECIPHER\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> text <span class=\"sy0\">=</span> <span class=\"st0\">\"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> encoded <span class=\"sy0\">=</span> vigenere<span class=\"br0\">(</span>text, key<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>encoded<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> decoded <span class=\"sy0\">=</span> vigenere<span class=\"br0\">(</span>encoded, key, <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>decoded<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 52, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>ori$ <span class=\"sy0\">=</span> <span class=\"st0\">\"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\"</span><br/>key$ <span class=\"sy0\">=</span> filter$<span class=\"br0\">(</span><span class=\"st0\">\"vigenerecipher\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> ori$ <br/><span class=\"kw1\">print</span> key$<br/>enc$ <span class=\"sy0\">=</span> encrypt$<span class=\"br0\">(</span>ori$<span class=\"sy0\">,</span> key$<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> enc$<br/>dec$ <span class=\"sy0\">=</span> decrypt$<span class=\"br0\">(</span>enc$<span class=\"sy0\">,</span> key$<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> dec$<br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> encrypt$<span class=\"br0\">(</span><span class=\"kw1\">text</span>$<span class=\"sy0\">,</span> key$<span class=\"br0\">)</span><br/>    flt$ <span class=\"sy0\">=</span> filter$<span class=\"br0\">(</span><span class=\"kw1\">text</span>$<span class=\"br0\">)</span><br/>    encrypt$ <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>flt$<span class=\"br0\">)</span><br/>        m$ <span class=\"sy0\">=</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span>flt$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        m <span class=\"sy0\">=</span> <span class=\"kw2\">asc</span><span class=\"br0\">(</span>m$<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"kw2\">asc</span><span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span><br/>        k$ <span class=\"sy0\">=</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span>key$<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        k <span class=\"sy0\">=</span> <span class=\"kw2\">asc</span><span class=\"br0\">(</span>k$<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"kw2\">asc</span><span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span><br/>        j <span class=\"sy0\">=</span> <span class=\"br0\">(</span>j <span class=\"kw1\">mod</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>key$<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        c <span class=\"sy0\">=</span> <span class=\"br0\">(</span>m <span class=\"sy0\">+</span> k<span class=\"br0\">)</span> <span class=\"kw1\">mod</span> <span class=\"nu0\">26</span><br/>        c$<span class=\"sy0\">=</span><span class=\"kw2\">chr$</span><span class=\"br0\">(</span><span class=\"kw2\">asc</span><span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>c<span class=\"br0\">)</span><br/>        encrypt$<span class=\"sy0\">=</span>encrypt$<span class=\"sy0\">+</span>c$<br/>    <span class=\"kw1\">next</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> decrypt$<span class=\"br0\">(</span>flt$<span class=\"sy0\">,</span> key$<span class=\"br0\">)</span><br/>    decrypt$ <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>flt$<span class=\"br0\">)</span><br/>        m$ <span class=\"sy0\">=</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span>flt$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        m <span class=\"sy0\">=</span> <span class=\"kw2\">asc</span><span class=\"br0\">(</span>m$<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"kw2\">asc</span><span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span><br/>        k$ <span class=\"sy0\">=</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span>key$<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        k <span class=\"sy0\">=</span> <span class=\"kw2\">asc</span><span class=\"br0\">(</span>k$<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"kw2\">asc</span><span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span><br/>        j <span class=\"sy0\">=</span> <span class=\"br0\">(</span>j <span class=\"kw1\">mod</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>key$<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        c <span class=\"sy0\">=</span> <span class=\"br0\">(</span>m <span class=\"sy0\">-</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"kw1\">mod</span> <span class=\"nu0\">26</span><br/>        c$<span class=\"sy0\">=</span><span class=\"kw2\">chr$</span><span class=\"br0\">(</span><span class=\"kw2\">asc</span><span class=\"br0\">(</span><span class=\"st0\">\"A\"</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>c<span class=\"br0\">)</span><br/>        decrypt$<span class=\"sy0\">=</span>decrypt$<span class=\"sy0\">+</span>c$<br/>    <span class=\"kw1\">next</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> filter$<span class=\"br0\">(</span>ori$<span class=\"br0\">)</span><br/><span class=\"co1\">'a..z A..Z go caps, other skipped</span><br/>    filter$<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>ori$<span class=\"br0\">)</span><br/>        c$ <span class=\"sy0\">=</span> <span class=\"kw2\">upper$</span><span class=\"br0\">(</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span>ori$<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span><span class=\"st0\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"sy0\">,</span> c$<span class=\"br0\">)</span> <span class=\"kw1\">then</span> filter$ <span class=\"sy0\">=</span> filter$ <span class=\"sy0\">+</span> c$<br/>    <span class=\"kw1\">next</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span> <br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 42, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> Encrypt<span class=\"br0\">(</span> _msg<span class=\"sy0\">,</span> _key <span class=\"br0\">)</span>    <br/>    <span class=\"kw1\">local</span> msg <span class=\"sy0\">=</span> <span class=\"br0\">{</span> _msg<span class=\"sy0\">:</span>upper<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>byte<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">local</span> key <span class=\"sy0\">=</span> <span class=\"br0\">{</span> _key<span class=\"sy0\">:</span>upper<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>byte<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span>    <br/>    <span class=\"kw1\">local</span> enc <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">local</span> j<span class=\"sy0\">,</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>msg <span class=\"kw1\">do</span>    <br/>        <span class=\"kw1\">if</span> msg<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"kw3\">string.byte</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> msg<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> <span class=\"kw3\">string.byte</span><span class=\"br0\">(</span><span class=\"st0\">'Z'</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            enc<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> msg<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> key<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"kw3\">string.byte</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span> <span class=\"sy0\">+</span> <span class=\"kw3\">string.byte</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span><br/>\u00a0<br/>            k <span class=\"sy0\">=</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">if</span> j <span class=\"sy0\">==</span> <span class=\"sy0\">#</span>key <span class=\"kw1\">then</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> j <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">string.char</span><span class=\"br0\">(</span> <span class=\"kw3\">unpack</span><span class=\"br0\">(</span>enc<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Decrypt<span class=\"br0\">(</span> _msg<span class=\"sy0\">,</span> _key <span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> msg <span class=\"sy0\">=</span> <span class=\"br0\">{</span> _msg<span class=\"sy0\">:</span>byte<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">local</span> key <span class=\"sy0\">=</span> <span class=\"br0\">{</span> _key<span class=\"sy0\">:</span>upper<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>byte<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span>      <br/>    <span class=\"kw1\">local</span> dec <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">local</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>msg <span class=\"kw1\">do</span>            <br/>       dec<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> msg<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> key<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">26</span> <span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span> <span class=\"sy0\">+</span> <span class=\"kw3\">string.byte</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span><br/>\u00a0<br/>       <span class=\"kw1\">if</span> j <span class=\"sy0\">==</span> <span class=\"sy0\">#</span>key <span class=\"kw1\">then</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> j <span class=\"sy0\">=</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span>    <br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">string.char</span><span class=\"br0\">(</span> <span class=\"kw3\">unpack</span><span class=\"br0\">(</span>dec<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>\u00a0<br/>original <span class=\"sy0\">=</span> <span class=\"st0\">\"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\"</span><br/>key <span class=\"sy0\">=</span> <span class=\"st0\">\"VIGENERECIPHER\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>encrypted <span class=\"sy0\">=</span> Encrypt<span class=\"br0\">(</span> original<span class=\"sy0\">,</span> key <span class=\"br0\">)</span><br/>decrypted <span class=\"sy0\">=</span> Decrypt<span class=\"br0\">(</span> encrypted<span class=\"sy0\">,</span> key <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> encrypted <span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> decrypted <span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica", "loc": 31, "block": "<pre class=\"text highlighted_source\">encode[text_String, key_String]\u00a0:=<br/> Module[{textCode, keyCode},<br/>  textCode = <br/>   Cases[ToCharacterCode[<br/>      <a class=\"__cf_email__\" data-cfemail=\"92c6fdc7e2e2f7e0d1f3e1f7d2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>       text], _?(IntervalMemberQ[<a class=\"__cf_email__\" data-cfemail=\"f0b99e84958286919cb0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{65, 90}, #] &amp;)] - 65;<br/>  keyCode = <br/>   Cases[ToCharacterCode[<br/>      <a class=\"__cf_email__\" data-cfemail=\"df8bb08aafafbaad9cbeacba9f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>       key], _?(IntervalMemberQ[<a class=\"__cf_email__\" data-cfemail=\"c68fa8b2a3b4b0a7aa86\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{65, 90}, #] &amp;)] - 65; <br/>  keyCode = <br/>   If[Length[textCode] &lt; Length[keyCode], <br/>    keyCode[[;; <a class=\"__cf_email__\" data-cfemail=\"400c252e2734280034253834032f2425\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]], <br/>    PadRight[keyCode, <a class=\"__cf_email__\" data-cfemail=\"0448616a63706c4470617c70476b6061\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, keyCode]];<br/>  FromCharacterCode[Mod[textCode + keyCode, 26] + 65]]<br/>\u00a0<br/>decode[text_String, key_String]\u00a0:=<br/> Module[{textCode, keyCode},<br/>  textCode = <br/>   Cases[ToCharacterCode[<br/>      <a class=\"__cf_email__\" data-cfemail=\"5c0833092c2c392e1f3d2f391c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>       text], _?(IntervalMemberQ[<a class=\"__cf_email__\" data-cfemail=\"95dcfbe1f0e7e3f4f9d5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{65, 90}, #] &amp;)] - 65;<br/>  keyCode = <br/>   Cases[ToCharacterCode[<br/>      <a class=\"__cf_email__\" data-cfemail=\"7a2e152f0a0a1f08391b091f3a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>       key], _?(IntervalMemberQ[<a class=\"__cf_email__\" data-cfemail=\"80c9eef4e5f2f6e1ecc0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{65, 90}, #] &amp;)] - 65; <br/>  keyCode = <br/>   If[Length[textCode] &lt; Length[keyCode], <br/>    keyCode[[;; <a class=\"__cf_email__\" data-cfemail=\"9fd3faf1f8ebf7dfebfae7ebdcf0fbfa\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]], <br/>    PadRight[keyCode, <a class=\"__cf_email__\" data-cfemail=\"baf6dfd4ddced2facedfc2cef9d5dedf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, keyCode]];<br/>  FromCharacterCode[Mod[textCode - keyCode, 26] + 65]]</pre>"}, {"lang": "NetRexx", "loc": 153, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref savelog symbols nobinary<br/>\u00a0<br/>pt  = <span class=\"st0\">'Attack at dawn!'</span><br/>key = <span class=\"st0\">'LEMON'</span><br/>test<span class=\"br0\">(</span>key, pt<span class=\"br0\">)</span><br/>\u00a0<br/>key = <span class=\"st0\">'N'</span> <span class=\"co1\">-- rot-13</span><br/>test<span class=\"br0\">(</span>key, pt<span class=\"br0\">)</span><br/>\u00a0<br/>key = <span class=\"st0\">'B'</span> <span class=\"co1\">-- Caesar</span><br/>test<span class=\"br0\">(</span>key, pt<span class=\"br0\">)</span><br/>\u00a0<br/>pt = <span class=\"st0\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><br/>key = <span class=\"st0\">'A'</span><br/>test<span class=\"br0\">(</span>key, pt<span class=\"br0\">)</span><br/>\u00a0<br/>pt = sampledata<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>key = <span class=\"st0\">'Hamlet; Prince of Denmark'</span><br/>test<span class=\"br0\">(</span>key, pt<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/>method vigenere<span class=\"br0\">(</span>meth, key, text<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>\u00a0<br/>  <span class=\"kw1\">select</span><br/>    <span class=\"kw3\">when</span> <span class=\"st0\">'encipher'</span>.<span class=\"kw6\">abbrev</span><span class=\"br0\">(</span>meth.<span class=\"kw6\">lower</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> df = <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">when</span> <span class=\"st0\">'decipher'</span>.<span class=\"kw6\">abbrev</span><span class=\"br0\">(</span>meth.<span class=\"kw6\">lower</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> df = -<span class=\"nu0\">1</span><br/>    <span class=\"kw3\">otherwise</span> <span class=\"kw1\">signal</span> IllegalArgumentException<span class=\"br0\">(</span>meth <span class=\"st0\">'must be \"encipher\" or \"decipher\"'</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span><br/>\u00a0<br/>  alpha = <span class=\"st0\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><br/>\u00a0<br/>  text = stringscrubber<span class=\"br0\">(</span>text<span class=\"br0\">)</span><br/>  key  = stringscrubber<span class=\"br0\">(</span>key<span class=\"br0\">)</span><br/>  code = <span class=\"st0\">''</span><br/>  <span class=\"kw1\">loop</span> l_ = <span class=\"nu0\">1</span> to text.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    M = alpha.<span class=\"me0\">pos</span><span class=\"br0\">(</span>text.<span class=\"kw6\">substr</span><span class=\"br0\">(</span>l_, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>    k_ = <span class=\"br0\">(</span>l_ - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> key.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    K = alpha.<span class=\"me0\">pos</span><span class=\"br0\">(</span>key.<span class=\"kw6\">substr</span><span class=\"br0\">(</span>k_ + <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>    C = mod<span class=\"br0\">(</span><span class=\"br0\">(</span>M + K <span class=\"sy0\">*</span> df<span class=\"br0\">)</span>, alpha.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    C = alpha.<span class=\"kw6\">substr</span><span class=\"br0\">(</span>C + <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    code = code <span class=\"sy0\">||</span> C<br/>    <span class=\"kw3\">end</span> l_<br/>\u00a0<br/>  <span class=\"kw1\">return</span> code<br/>\u00a0<br/>method vigenere_encipher<span class=\"br0\">(</span>key, plaintext<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> vigenere<span class=\"br0\">(</span><span class=\"st0\">'encipher'</span>, key, plaintext<span class=\"br0\">)</span><br/>\u00a0<br/>method vigenere_decipher<span class=\"br0\">(</span>key, ciphertext<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> vigenere<span class=\"br0\">(</span><span class=\"st0\">'decipher'</span>, key, ciphertext<span class=\"br0\">)</span><br/>\u00a0<br/>method mod<span class=\"br0\">(</span>N = int, D = int<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>\u00a0<br/><span class=\"kw1\">return</span> <span class=\"br0\">(</span>D + <span class=\"br0\">(</span>N <span class=\"sy0\">//</span> D<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> D<br/>\u00a0<br/>method stringscrubber<span class=\"br0\">(</span>cleanup<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>\u00a0<br/>  alpha = <span class=\"st0\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><br/>\u00a0<br/>  cleanup = cleanup.<span class=\"kw6\">upper</span>.<span class=\"kw6\">space</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">loop</span> <span class=\"kw2\">label</span> f_ forever<br/>    x_ = cleanup.<span class=\"kw6\">verify</span><span class=\"br0\">(</span>alpha<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> x_ = <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span> f_<br/>    cleanup = cleanup.<span class=\"kw6\">changestr</span><span class=\"br0\">(</span>cleanup.<span class=\"kw6\">substr</span><span class=\"br0\">(</span>x_, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"st0\">''</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> f_<br/>\u00a0<br/>  <span class=\"kw1\">return</span> cleanup<br/>\u00a0<br/>method test<span class=\"br0\">(</span>key, pt<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>\u00a0<br/>  ct = vigenere_encipher<span class=\"br0\">(</span>key, pt<span class=\"br0\">)</span><br/>  display<span class=\"br0\">(</span>ct<span class=\"br0\">)</span><br/>  dt = vigenere_decipher<span class=\"br0\">(</span>key, ct<span class=\"br0\">)</span><br/>  display<span class=\"br0\">(</span>dt<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/>method display<span class=\"br0\">(</span>text<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>\u00a0<br/>  line = <span class=\"st0\">''</span><br/>  o_ = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">loop</span> c_ = <span class=\"nu0\">1</span> to text.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    b_ = o_ <span class=\"sy0\">//</span> <span class=\"nu0\">5</span><br/>    o_ = o_ + <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> b_ = <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> line = line<span class=\"st0\">' '</span><br/>    line = line <span class=\"sy0\">||</span> text.<span class=\"kw6\">substr</span><span class=\"br0\">(</span>c_, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> c_<br/>\u00a0<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'....+....|'</span>.<span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">loop</span> <span class=\"kw2\">label</span> l_ forever<br/>    <span class=\"kw1\">parse</span> line w1 w2 w3 w4 w5 w6 W7 w8 w9 w10 w11 w12 line<br/>    pline = w1 w2 w3 w4 w5 w6 w7 w8 w9 w10 w11 w12<br/>    <span class=\"kw1\">say</span> pline.<span class=\"kw6\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> line.<span class=\"kw6\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me0\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span> l_<br/>    <span class=\"kw3\">end</span> l_<br/>  <span class=\"kw1\">say</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/>method sampledata<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> Rexx<br/>\u00a0<br/>  NL = char<span class=\"br0\">(</span><span class=\"st0\">'\\n'</span><span class=\"br0\">)</span>  <br/>  antic_disposition = Rexx<span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>  antic_disposition = <span class=\"br0\">[</span>                                         -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"To be, or not to be--that is the question:\"</span>        <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"Whether 'tis nobler in the mind to suffer\"</span>         <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"The slings and arrows of outrageous fortune\"</span>       <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"Or to take arms against a sea of troubles\"</span>         <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"And by opposing end them. To die, to sleep--\"</span>      <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"No more--and by a sleep to say we end\"</span>             <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"The heartache, and the thousand natural shocks\"</span>    <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"That flesh is heir to. 'Tis a consummation\"</span>        <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"Devoutly to be wished. To die, to sleep--\"</span>         <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"To sleep--perchance to dream: ay, there's the rub,\"</span><span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"For in that sleep of death what dreams may come\"</span>   <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"When we have shuffled off this mortal coil,\"</span>       <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"Must give us pause. There's the respect\"</span>           <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"That makes calamity of so long life.\"</span>              <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"For who would bear the whips and scorns of time,\"</span>  <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"Th' oppressor's wrong, the proud man's contumely\"</span>  <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"The pangs of despised love, the law's delay,\"</span>      <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"The insolence of office, and the spurns\"</span>           <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"That patient merit of th' unworthy takes,\"</span>         <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"When he himself might his quietus make\"</span>            <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"With a bare bodkin? Who would fardels bear,\"</span>       <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"To grunt and sweat under a weary life,\"</span>            <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"But that the dread of something after death,\"</span>      <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"The undiscovered country, from whose bourn\"</span>        <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"No traveller returns, puzzles the will,\"</span>           <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"And makes us rather bear those ills we have\"</span>       <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"Than fly to others that we know not of?\"</span>           <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"Thus conscience does make cowards of us all,\"</span>      <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"And thus the native hue of resolution\"</span>             <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"Is sicklied o'er with the pale cast of thought,\"</span>   <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"And enterprise of great pith and moment\"</span>           <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"With this regard their currents turn awry\"</span>         <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"And lose the name of action. -- Soft you now,\"</span>     <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"The fair Ophelia! -- Nymph, in thy orisons\"</span>        <span class=\"br0\">)</span>, -<br/>    Rexx<span class=\"br0\">(</span><span class=\"st0\">\"Be all my sins remembered.\"</span>                        <span class=\"br0\">)</span>  -<br/>    <span class=\"br0\">]</span><br/>\u00a0<br/>    melancholy_dane = Rexx<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">loop</span> l_ = <span class=\"nu0\">0</span> for antic_disposition.<span class=\"me0\">length</span><br/>      melancholy_dane = melancholy_dane <span class=\"sy0\">||</span> antic_disposition<span class=\"br0\">[</span>l_<span class=\"br0\">]</span> <span class=\"sy0\">||</span> NL<br/>      <span class=\"kw3\">end</span> l_<br/>\u00a0<br/>    <span class=\"kw1\">return</span> melancholy_dane<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 28, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>proc isAlpha(c): bool = c in 'a'..'z' or c in 'A'..'Z'<br/>\u00a0<br/>proc encrypt(msg, key): string =<br/>  result = \"\"<br/>  var pos = 0<br/>  for c in msg:<br/>    if isAlpha c:<br/>      result.add chr(((ord(key[pos]) + ord(toUpper c)) mod 26) + ord('A'))<br/>      pos = (pos + 1) mod key.len<br/>\u00a0<br/>proc decrypt(msg, key): string =<br/>  result = \"\"<br/>  var pos = 0<br/>  for c in msg:<br/>    result.add chr(((26 + ord(c) - ord(key[pos])) mod 26) + ord('A'))<br/>    pos = (pos + 1) mod key.len<br/>\u00a0<br/>const text = \"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\"<br/>const key = \"VIGENERECIPHER\"<br/>\u00a0<br/>let encr = encrypt(text, key)<br/>let decr = decrypt(encr, key)<br/>\u00a0<br/>echo text<br/>echo encr<br/>echo decr</pre>"}, {"lang": "Objeck", "loc": 47, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>   <span class=\"kw1\">class</span> VigenereCipher <span class=\"br0\">{</span><br/>      <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>         key <span class=\"sy0\">:=</span> <span class=\"st0\">\"VIGENERECIPHER\"</span><span class=\"sy0\">;</span><br/>         ori <span class=\"sy0\">:=</span> <span class=\"st0\">\"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\"</span><span class=\"sy0\">;</span><br/>         enc <span class=\"sy0\">:=</span> encrypt<span class=\"br0\">(</span>ori<span class=\"sy0\">,</span> key<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"encrypt: \"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span>enc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"decrypt: \"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span>decrypt<span class=\"br0\">(</span>enc<span class=\"sy0\">,</span> key<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> encrypt<span class=\"br0\">(</span>text <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"sy0\">,</span> key <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">String</span> <span class=\"br0\">{</span><br/>         res <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>         text <span class=\"sy0\">:=</span> text<span class=\"sy0\">-&gt;</span><span class=\"me1\">ToUpper</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         j <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>         <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> text<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            c <span class=\"sy0\">:=</span> text<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>c <span class=\"sy0\">&gt;=</span> 'A' <span class=\"sy0\">&amp;</span> c <span class=\"sy0\">&lt;=</span> 'Z'<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>               res<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>c <span class=\"sy0\">+</span> key<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> 'A'<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span> <span class=\"sy0\">+</span> 'A'<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span><span class=\"kw2\">Char</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>               j <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>               j <span class=\"sy0\">:=</span> j <span class=\"sy0\">%</span> key<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> res<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> decrypt<span class=\"br0\">(</span>text <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"sy0\">,</span> key <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">String</span> <span class=\"br0\">{</span><br/>         res <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>         text <span class=\"sy0\">:=</span> text<span class=\"sy0\">-&gt;</span><span class=\"me1\">ToUpper</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         j <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>         <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> text<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            c <span class=\"sy0\">:=</span> text<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>c <span class=\"sy0\">&gt;=</span> 'A' <span class=\"sy0\">&amp;</span> c <span class=\"sy0\">&lt;=</span> 'Z'<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>               res<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>c <span class=\"sy0\">-</span> key<span class=\"sy0\">-&gt;</span><span class=\"me1\">Get</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span> <span class=\"sy0\">+</span> 'A'<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span><span class=\"kw2\">Char</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>               j <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>               j <span class=\"sy0\">:=</span> j <span class=\"sy0\">%</span> key<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>         <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>         <span class=\"kw1\">return</span> res<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 41, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> cipher src key crypt <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> str <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>uppercase src <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> key <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>uppercase key <span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"co1\">(* strip out non-letters *)</span><br/>  <span class=\"kw1\">let</span> len <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length str <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux i j <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> j <span class=\"sy0\">&gt;=</span> len <span class=\"kw1\">then</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>sub str <span class=\"nu0\">0</span> i <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">if</span> str<span class=\"sy0\">.</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"sy0\">'</span>A<span class=\"sy0\">'</span> <span class=\"sy0\">&amp;&amp;</span> str<span class=\"sy0\">.</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> <span class=\"sy0\">'</span>Z<span class=\"sy0\">'</span><br/>    <span class=\"kw1\">then</span> <span class=\"br0\">(</span>str<span class=\"sy0\">.</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> str<span class=\"sy0\">.</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span> aux <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> i<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span> aux i <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> j<span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> res <span class=\"sy0\">=</span> aux <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> slen <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length res <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> klen <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length key <span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> d <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_char\"><span class=\"kw3\">int_of_char</span></a> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> f <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> crypt<br/>    <span class=\"kw1\">then</span> <span class=\"kw1\">fun</span> i <span class=\"sy0\">-&gt;</span> d res<span class=\"sy0\">.</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> d <span class=\"sy0\">'</span>A<span class=\"sy0\">'</span> <span class=\"sy0\">+</span> d key<span class=\"sy0\">.</span><span class=\"br0\">[</span>i <span class=\"kw1\">mod</span> klen<span class=\"br0\">]</span> <span class=\"sy0\">-</span> d <span class=\"sy0\">'</span>A<span class=\"sy0\">'</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">fun</span> i <span class=\"sy0\">-&gt;</span> d res<span class=\"sy0\">.</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span> d key<span class=\"sy0\">.</span><span class=\"br0\">[</span>i <span class=\"kw1\">mod</span> klen<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">26</span><br/>  <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> slen <span class=\"kw1\">do</span><br/>    res<span class=\"sy0\">.</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALchar_of_int\"><span class=\"kw3\">char_of_int</span></a> <span class=\"br0\">(</span>d <span class=\"sy0\">'</span>A<span class=\"sy0\">'</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>f i<span class=\"br0\">)</span> <span class=\"kw1\">mod</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span>res<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> str <span class=\"sy0\">=</span> <span class=\"st0\">\"Beware the Jabberwock, my son! The jaws that bite, \\<br/>             the claws that catch!\"</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> key <span class=\"sy0\">=</span> <span class=\"st0\">\"VIGENERECIPHER\"</span> <span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> cod <span class=\"sy0\">=</span> cipher str key <span class=\"kw1\">true</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> dec <span class=\"sy0\">=</span> cipher cod key <span class=\"kw1\">false</span> <span class=\"kw1\">in</span><br/>\u00a0<br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"Text:\u00a0%s\\n\"</span> str<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"key: \u00a0%s\\n\"</span> key<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"Code:\u00a0%s\\n\"</span> cod<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"Back:\u00a0%s\\n\"</span> dec<span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "ooRexx", "loc": 195, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* Rexx */</span><br/><span class=\"kw1\">Do</span><br/>  alpha = <span class=\"st0\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><br/>  key   = <span class=\"st0\">'LEMON'</span><br/>\u00a0<br/>  pt = <span class=\"st0\">'Attack at dawn!'</span><br/>  <span class=\"kw1\">Call</span> test key, pt<br/>\u00a0<br/>  key = <span class=\"st0\">'N'</span><br/>  <span class=\"kw1\">Call</span> test key, pt<br/>\u00a0<br/>  key = <span class=\"st0\">'B'</span><br/>  <span class=\"kw1\">Call</span> test key, pt<br/>\u00a0<br/>  pt = alpha<br/>  key = <span class=\"st0\">'A'</span><br/>  <span class=\"kw1\">Call</span> test key, pt<br/>\u00a0<br/>  pt = sampledata<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  key = <span class=\"st0\">'Hamlet; Prince of Denmark'</span><br/>  <span class=\"kw1\">Call</span> test key, pt<br/>\u00a0<br/>  <span class=\"kw1\">Return</span><br/><span class=\"kw3\">End</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>vigenere:<br/><span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> alpha<br/><span class=\"kw1\">Do</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw2\">upper</span> <span class=\"kw1\">Arg</span> meth, key, text<br/>\u00a0<br/>  <span class=\"kw1\">Select</span><br/>    <span class=\"kw3\">When</span> <span class=\"st0\">'ENCIPHER'</span>~<span class=\"kw6\">abbrev</span><span class=\"br0\">(</span>meth, <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> df = <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">When</span> <span class=\"st0\">'DECIPHER'</span>~<span class=\"kw6\">abbrev</span><span class=\"br0\">(</span>meth, <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> df = -<span class=\"nu0\">1</span><br/>    <span class=\"kw3\">Otherwise</span> <span class=\"kw1\">Do</span><br/>      <span class=\"kw1\">Say</span> meth <span class=\"st0\">'invalid.  Must be \"ENCIPHER\" or \"DECIPHER\"'</span><br/>      <span class=\"kw1\">Exit</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>\u00a0<br/>  text = stringscrubber<span class=\"br0\">(</span>text<span class=\"br0\">)</span><br/>  key  = stringscrubber<span class=\"br0\">(</span>key<span class=\"br0\">)</span><br/>  code = <span class=\"st0\">''</span><br/>\u00a0<br/>  <span class=\"kw1\">Do</span> l_ = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> text~<span class=\"kw6\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    M = alpha~<span class=\"kw6\">pos</span><span class=\"br0\">(</span>text~<span class=\"kw6\">substr</span><span class=\"br0\">(</span>l_, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>    k_ = <span class=\"br0\">(</span>l_ - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> key~<span class=\"kw6\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    K = alpha~<span class=\"kw6\">pos</span><span class=\"br0\">(</span>key~<span class=\"kw6\">substr</span><span class=\"br0\">(</span>k_ + <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>    C = mod<span class=\"br0\">(</span><span class=\"br0\">(</span>M + K <span class=\"sy0\">*</span> df<span class=\"br0\">)</span>, alpha~<span class=\"kw6\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    C = alpha~<span class=\"kw6\">substr</span><span class=\"br0\">(</span>C + <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    code = code <span class=\"sy0\">||</span> C<br/>    <span class=\"kw3\">End</span> l_<br/>\u00a0<br/>  <span class=\"kw1\">Return</span> code<br/>\u00a0<br/>  <span class=\"kw1\">Return</span><br/><span class=\"kw3\">End</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>vigenere_encipher:<br/><span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> alpha<br/><span class=\"kw1\">Do</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw2\">upper</span> <span class=\"kw1\">Arg</span> key, plaintext<br/>\u00a0<br/>  <span class=\"kw1\">Return</span> vigenere<span class=\"br0\">(</span><span class=\"st0\">'ENCIPHER'</span>, key, plaintext<span class=\"br0\">)</span><br/><span class=\"kw3\">End</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>vigenere_decipher:<br/><span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> alpha<br/><span class=\"kw1\">Do</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw2\">upper</span> <span class=\"kw1\">Arg</span> key, ciphertext<br/>\u00a0<br/>  <span class=\"kw1\">Return</span> vigenere<span class=\"br0\">(</span><span class=\"st0\">'DECIPHER'</span>, key, ciphertext<span class=\"br0\">)</span><br/><span class=\"kw3\">End</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>mod:<br/><span class=\"kw1\">Procedure</span><br/><span class=\"kw1\">Do</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> N, D<br/>\u00a0<br/>  <span class=\"kw1\">Return</span> <span class=\"br0\">(</span>D + <span class=\"br0\">(</span>N <span class=\"sy0\">//</span> D<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> D<br/><span class=\"kw3\">End</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>stringscrubber:<br/><span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> alpha<br/><span class=\"kw1\">Do</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw2\">upper</span> <span class=\"kw1\">Arg</span> cleanup<br/>\u00a0<br/>  cleanup = cleanup~<span class=\"kw6\">space</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Do</span> label f_ <span class=\"kw2\">forever</span><br/>    x_ = cleanup~<span class=\"kw6\">verify</span><span class=\"br0\">(</span>alpha<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> x_ = <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">Leave</span> f_<br/>    cleanup = cleanup~<span class=\"kw6\">changestr</span><span class=\"br0\">(</span>cleanup~<span class=\"kw6\">substr</span><span class=\"br0\">(</span>x_, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"st0\">''</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> f_<br/>\u00a0<br/>  <span class=\"kw1\">Return</span> cleanup<br/><span class=\"kw3\">End</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>test:<br/><span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> alpha<br/><span class=\"kw1\">Do</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> key, pt<br/>\u00a0<br/>  ct = vigenere_encipher<span class=\"br0\">(</span>key, pt<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Call</span> display ct<br/>  dt = vigenere_decipher<span class=\"br0\">(</span>key, ct<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Call</span> display dt<br/>\u00a0<br/>  <span class=\"kw1\">Return</span><br/><span class=\"kw3\">End</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>display:<br/><span class=\"kw1\">Procedure</span><br/><span class=\"kw1\">Do</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> text<br/>\u00a0<br/>  line = <span class=\"st0\">''</span><br/>  o_ = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Do</span> c_ = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> text~<span class=\"kw6\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    b_ = o_ <span class=\"sy0\">//</span> <span class=\"nu0\">5</span><br/>    o_ = o_ + <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> b_ = <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> line = line<span class=\"st0\">' '</span><br/>    line = line <span class=\"sy0\">||</span> text~<span class=\"kw6\">substr</span><span class=\"br0\">(</span>c_, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">End</span> c_<br/>\u00a0<br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'....+....|'</span>~<span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Do</span> label l_ <span class=\"kw2\">forever</span><br/>    <span class=\"kw1\">Parse</span> <span class=\"kw2\">Var</span> line w1 w2 w3 w4 w5 w6 W7 w8 w9 w10 w11 w12 line<br/>    pline = w1 w2 w3 w4 w5 w6 w7 w8 w9 w10 w11 w12<br/>    <span class=\"kw1\">Say</span> pline~<span class=\"kw6\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> line~<span class=\"kw6\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span>~<span class=\"kw6\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">Leave</span> l_<br/>    <span class=\"kw3\">End</span> l_<br/>  <span class=\"kw1\">Say</span><br/>\u00a0<br/>  <span class=\"kw1\">Return</span><br/><span class=\"kw3\">End</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>sampledata:<br/><span class=\"kw1\">Procedure</span><br/><span class=\"kw1\">Do</span><br/>\u00a0<br/>  NL = <span class=\"st0\">'0a'</span>x<br/>  X = <span class=\"nu0\">0</span><br/>  antic_disposition<span class=\"sy0\">.</span> = <span class=\"st0\">''</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"To be, or not to be--that is the question:\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"Whether 'tis nobler in the mind to suffer\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"The slings and arrows of outrageous fortune\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"Or to take arms against a sea of troubles\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"And by opposing end them. To die, to sleep--\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"No more--and by a sleep to say we end\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"The heartache, and the thousand natural shocks\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"That flesh is heir to. 'Tis a consummation\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"Devoutly to be wished. To die, to sleep--\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"To sleep--perchance to dream: ay, there's the rub,\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"For in that sleep of death what dreams may come\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"When we have shuffled off this mortal coil,\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"Must give us pause. There's the respect\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"That makes calamity of so long life.\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"For who would bear the whips and scorns of time,\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"Th' oppressor's wrong, the proud man's contumely\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"The pangs of despised love, the law's delay,\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"The insolence of office, and the spurns\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"That patient merit of th' unworthy takes,\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"When he himself might his quietus make\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"With a bare bodkin? Who would fardels bear,\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"To grunt and sweat under a weary life,\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"But that the dread of something after death,\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"The undiscovered country, from whose bourn\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"No traveller returns, puzzles the will,\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"And makes us rather bear those ills we have\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"Than fly to others that we know not of?\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"Thus conscience does make cowards of us all,\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"And thus the native hue of resolution\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"Is sicklied o'er with the pale cast of thought,\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"And enterprise of great pith and moment\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"With this regard their currents turn awry\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"And lose the name of action. -- Soft you now,\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"The fair Ophelia! -- Nymph, in thy orisons\"</span><br/>  X = X + <span class=\"nu0\">1</span>; antic_disposition<span class=\"sy0\">.</span>0 = X; antic_disposition<span class=\"sy0\">.</span>X = <span class=\"st0\">\"Be all my sins remembered.\"</span><br/>\u00a0<br/>  melancholy_dane = <span class=\"st0\">''</span><br/>  <span class=\"kw1\">Do</span> l_ = <span class=\"nu0\">1</span> <span class=\"kw2\">for</span> antic_disposition<span class=\"sy0\">.</span>0<br/>    melancholy_dane = melancholy_dane <span class=\"sy0\">||</span> antic_disposition<span class=\"sy0\">.</span>l_ <span class=\"sy0\">||</span> NL<br/>    <span class=\"kw3\">End</span> l_<br/>\u00a0<br/>  <span class=\"kw1\">Return</span> melancholy_dane<br/><span class=\"kw3\">End</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0</pre>"}, {"lang": "Pascal", "loc": 106, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"co1\">// The Vigenere cipher in reasonably standard Pascal</span><br/><span class=\"co1\">// &lt;no library functions: all conversions hand-coded&gt;</span><br/><span class=\"kw1\">PROGRAM</span> Vigenere<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// get a letter's alphabetic position (A=0)</span><br/><span class=\"kw1\">FUNCTION</span> letternum<span class=\"br0\">(</span>letter<span class=\"sy1\">:</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">BYTE</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tletternum <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">ord</span><span class=\"br0\">(</span>letter<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"kw3\">ord</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// convert a character to uppercase</span><br/><span class=\"kw1\">FUNCTION</span> uch<span class=\"br0\">(</span>ch<span class=\"sy1\">:</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">CHAR</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tuch <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ch<span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">IF</span> ch <span class=\"kw1\">IN</span> <span class=\"br0\">[</span><span class=\"st0\">'a'</span><span class=\"sy1\">..</span><span class=\"st0\">'z'</span><span class=\"br0\">]</span> <span class=\"kw1\">THEN</span><br/>\t\t\tuch <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">chr</span><span class=\"br0\">(</span><span class=\"kw3\">ord</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span> <span class=\"kw3\">AND</span> <span class=\"re0\">$5F</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// convert a string to uppercase</span><br/><span class=\"kw1\">FUNCTION</span> ucase<span class=\"br0\">(</span>str<span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">VAR</span> i<span class=\"sy1\">:</span> <span class=\"kw4\">BYTE</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tucase <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">FOR</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> Length<span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t\tucase <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ucase <span class=\"sy3\">+</span> uch<span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// construct a Vigenere-compatible string:</span><br/><span class=\"co1\">// uppercase; no spaces or punctuation.</span><br/><span class=\"kw1\">FUNCTION</span> vstr<span class=\"br0\">(</span>pt<span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">VAR</span> c<span class=\"sy1\">:</span> Cardinal<span class=\"sy1\">;</span><br/>\t\ts<span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tvstr<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>\t\ts \t<span class=\"sy1\">:</span><span class=\"sy3\">=</span> ucase<span class=\"br0\">(</span>pt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">FOR</span> c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> Length<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">DO</span> <span class=\"kw1\">BEGIN</span> <br/>\t\t\t<span class=\"kw1\">IF</span> s<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"kw1\">IN</span> <span class=\"br0\">[</span><span class=\"st0\">'A'</span><span class=\"sy1\">..</span><span class=\"st0\">'Z'</span><span class=\"br0\">]</span> <span class=\"kw1\">THEN</span><br/>\t\t\t\tvstr <span class=\"sy3\">+=</span> s<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// construct a repeating Vigenere key</span><br/><span class=\"kw1\">FUNCTION</span> vkey<span class=\"br0\">(</span>pt<span class=\"sy1\">,</span> key<span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">VAR</span> c<span class=\"sy1\">,</span>n<span class=\"sy1\">:</span> Cardinal<span class=\"sy1\">;</span><br/>\t\tk  <span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tk    <span class=\"sy1\">:</span><span class=\"sy3\">=</span> vstr<span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\tvkey <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">FOR</span> c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> Length<span class=\"br0\">(</span>pt<span class=\"br0\">)</span> <span class=\"kw1\">DO</span> <span class=\"kw1\">BEGIN</span>   <br/>\t\t\tn <span class=\"sy1\">:</span><span class=\"sy3\">=</span> c <span class=\"kw1\">mod</span> Length<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t\t<span class=\"kw1\">IF</span> n&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> vkey <span class=\"sy3\">+=</span> k<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"kw1\">ELSE</span> vkey <span class=\"sy3\">+=</span> k<span class=\"br0\">[</span>Length<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// Vigenere encipher\t</span><br/><span class=\"kw1\">FUNCTION</span> enVig<span class=\"br0\">(</span>pt<span class=\"sy1\">,</span>key<span class=\"sy1\">:</span><span class=\"kw4\">STRING</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">VAR</span> ct<span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span><br/>\t\tc<span class=\"sy1\">,</span>n\t <span class=\"sy1\">:</span> Cardinal<span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tct <span class=\"sy1\">:</span><span class=\"sy3\">=</span> pt<span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">FOR</span> c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> Length<span class=\"br0\">(</span>pt<span class=\"br0\">)</span> <span class=\"kw1\">DO</span> <span class=\"kw1\">BEGIN</span><br/>\t\t\tn <span class=\"sy1\">:</span><span class=\"sy3\">=</span> letternum<span class=\"br0\">(</span>pt<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy3\">+</span>letternum<span class=\"br0\">(</span>key<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t\tn <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n <span class=\"kw1\">mod</span> <span class=\"nu0\">26</span><span class=\"sy1\">;</span><br/>\t\t\tct<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"kw3\">chr</span><span class=\"br0\">(</span><span class=\"kw3\">ord</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span><span class=\"sy3\">+</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\t\tenVig <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ct<span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// Vigenere decipher</span><br/><span class=\"kw1\">FUNCTION</span> deVig<span class=\"br0\">(</span>ct<span class=\"sy1\">,</span>key<span class=\"sy1\">:</span><span class=\"kw4\">STRING</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">VAR</span> pt\t<span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span><span class=\"sy1\">;</span><br/>\t\tc<span class=\"sy1\">,</span>n\t<span class=\"sy1\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tpt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> ct<span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">FOR</span> c <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> Length<span class=\"br0\">(</span>ct<span class=\"br0\">)</span> <span class=\"kw1\">DO</span> <span class=\"kw1\">BEGIN</span><br/>\t\t\tn <span class=\"sy1\">:</span><span class=\"sy3\">=</span> letternum<span class=\"br0\">(</span>ct<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy3\">-</span>letternum<span class=\"br0\">(</span>key<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t\t<span class=\"kw1\">IF</span> n&lt;<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> n<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">26</span><span class=\"sy3\">+</span>n<span class=\"sy1\">;</span><br/>\t\t\tpt<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"kw3\">chr</span><span class=\"br0\">(</span><span class=\"kw3\">ord</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span><span class=\"sy3\">+</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span><br/>\t\tdeVig <span class=\"sy1\">:</span><span class=\"sy3\">=</span> pt<span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">END</span><span class=\"sy1\">;</span>\t<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">VAR</span> \tkey<span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span> <span class=\"sy3\">=</span> <span class=\"st0\">'Vigenere cipher'</span><span class=\"sy1\">;</span><br/>\t\tmsg<span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span> <span class=\"sy3\">=</span> <span class=\"st0\">'Beware the Jabberwock! The jaws that bite, the claws that catch!'</span><span class=\"sy1\">;</span><br/>\t\tvtx<span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span> <span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>\t\tctx<span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span> <span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>\t\tptx<span class=\"sy1\">:</span> <span class=\"kw4\">STRING</span> <span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"co1\">// make Vigenere-compatible</span><br/>\tvtx <span class=\"sy1\">:</span><span class=\"sy3\">=</span> vstr<span class=\"br0\">(</span>msg<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\tkey <span class=\"sy1\">:</span><span class=\"sy3\">=</span> vkey<span class=\"br0\">(</span>vtx<span class=\"sy1\">,</span>key<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"co1\">// Vigenere encipher / decipher</span><br/>\tctx <span class=\"sy1\">:</span><span class=\"sy3\">=</span> enVig<span class=\"br0\">(</span>vtx<span class=\"sy1\">,</span>key<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\tptx <span class=\"sy1\">:</span><span class=\"sy3\">=</span> deVig<span class=\"br0\">(</span>ctx<span class=\"sy1\">,</span>key<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"co1\">// display results</span><br/>\t<span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Message     \u00a0: '</span><span class=\"sy1\">,</span>msg<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Plaintext   \u00a0: '</span><span class=\"sy1\">,</span>vtx<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Key         \u00a0: '</span><span class=\"sy1\">,</span>key<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Ciphertext  \u00a0: '</span><span class=\"sy1\">,</span>ctx<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Plaintext   \u00a0: '</span><span class=\"sy1\">,</span>ptx<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">END</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 40, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  printHelp<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\"># translate to upper-case, remove anything else</span><br/><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/tr.html\"><span class=\"kw3\">tr</span></a><span class=\"sy0\">/</span>a<span class=\"sy0\">-</span>z<span class=\"sy0\">/</span>A<span class=\"sy0\">-</span>Z<span class=\"sy0\">/,</span> <a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a><span class=\"sy0\">/</span><span class=\"br0\">[</span><span class=\"sy0\">^</span>A<span class=\"sy0\">-</span>Z<span class=\"br0\">]</span><span class=\"sy0\">//</span>g<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"kw2\">ARGV</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$cipher_decipher</span> <span class=\"sy0\">=</span> <span class=\"re0\">$ARGV</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$cipher_decipher</span> <span class=\"sy0\">!~</span> <span class=\"co2\">/ENC|DEC/</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  printHelp<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\"># user should say what to do</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Key: \"</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$key</span> <span class=\"sy0\">=</span> <span class=\"re0\">$ARGV</span><span class=\"br0\">[</span> <span class=\"nu0\">2</span> <span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"re0\">$cipher_decipher</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/ENC/</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Plain-text: \"</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$plain</span> <span class=\"sy0\">=</span> <span class=\"re0\">$ARGV</span><span class=\"br0\">[</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Encrypted: \"</span> <span class=\"sy0\">.</span> Vigenere<span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$key</span><span class=\"sy0\">,</span> <span class=\"re0\">$plain</span> <span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"kw1\">elsif</span><span class=\"br0\">(</span> <span class=\"re0\">$cipher_decipher</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/DEC/</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Cipher-text: \"</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$cipher</span> <span class=\"sy0\">=</span> <span class=\"re0\">$ARGV</span><span class=\"br0\">[</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Decrypted: \"</span> <span class=\"sy0\">.</span> Vigenere<span class=\"br0\">(</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$key</span><span class=\"sy0\">,</span> <span class=\"re0\">$cipher</span> <span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> printHelp<span class=\"br0\">{</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Usage:<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">.</span><br/>        <span class=\"st0\">\"Encrypting:<span class=\"es0\">\\n</span> perl cipher.pl ENC (plain text) (key)<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">.</span><br/>        <span class=\"st0\">\"Decrypting:<span class=\"es0\">\\n</span> perl cipher.pl DEC (cipher text) (key)<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/exit.html\"><span class=\"kw3\">exit</span></a> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> Vigenere<span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$direction</span><span class=\"sy0\">,</span> <span class=\"re0\">$key</span><span class=\"sy0\">,</span> <span class=\"re0\">$text</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw1\">my</span> <span class=\"re0\">$count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$count</span> <span class=\"sy0\">&lt;</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> <span class=\"re0\">$text</span><span class=\"sy0\">;</span> <span class=\"re0\">$count</span> <span class=\"sy0\">++</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"re0\">$key_offset</span> <span class=\"sy0\">=</span> <span class=\"re0\">$direction</span> <span class=\"sy0\">*</span> <a href=\"http://perldoc.perl.org/functions/ord.html\"><span class=\"kw3\">ord</span></a> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span> <span class=\"re0\">$key</span><span class=\"sy0\">,</span> <span class=\"re0\">$count</span> <span class=\"sy0\">%</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a> <span class=\"re0\">$key</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$char_offset</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/ord.html\"><span class=\"kw3\">ord</span></a> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span> <span class=\"re0\">$text</span><span class=\"sy0\">,</span> <span class=\"re0\">$count</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$cipher</span> <span class=\"sy0\">.=</span> <a href=\"http://perldoc.perl.org/functions/chr.html\"><span class=\"kw3\">chr</span></a> <span class=\"nu0\">65</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$char_offset</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"re0\">$key_offset</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"co1\"># 65 is the ASCII character code for 'A'</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$cipher</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 12, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> s2v <span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$s</span><span class=\"sy0\">.</span><span class=\"kw3\">uc</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"br0\">(</span><span class=\"co2\">/ &lt;[ A..Z ]&gt; /</span><span class=\"br0\">)</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">ord</span>\u00a0\u00bb<span class=\"sy0\">-</span>\u00bb <span class=\"nu0\">65</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> v2s <span class=\"br0\">(</span><span class=\"re0\">@v</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"re0\">@v</span>\u00a0\u00bb<span class=\"sy0\">%</span>\u00bb <span class=\"nu0\">26</span>\u00a0\u00bb<span class=\"sy0\">+</span>\u00bb <span class=\"nu0\">65</span><span class=\"br0\">)</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">chr</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> blacken <span class=\"br0\">(</span><span class=\"re0\">$red</span><span class=\"sy0\">,</span> <span class=\"re0\">$key</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> v2s<span class=\"br0\">(</span>s2v<span class=\"br0\">(</span><span class=\"re0\">$red</span><span class=\"br0\">)</span>\u00a0\u00bb<span class=\"sy0\">+</span>\u00bb s2v<span class=\"br0\">(</span><span class=\"re0\">$key</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> redden  <span class=\"br0\">(</span><span class=\"re0\">$blk</span><span class=\"sy0\">,</span> <span class=\"re0\">$key</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> v2s<span class=\"br0\">(</span>s2v<span class=\"br0\">(</span><span class=\"re0\">$blk</span><span class=\"br0\">)</span>\u00a0\u00bb<span class=\"sy0\">-</span>\u00bb s2v<span class=\"br0\">(</span><span class=\"re0\">$key</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$red</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$key</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Vigenere Cipher!!!\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"re0\">$red</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"kw1\">my</span> <span class=\"re0\">$black</span> <span class=\"sy0\">=</span> blacken<span class=\"br0\">(</span><span class=\"re0\">$red</span><span class=\"sy0\">,</span> <span class=\"re0\">$key</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> redden<span class=\"br0\">(</span><span class=\"re0\">$black</span><span class=\"sy0\">,</span> <span class=\"re0\">$key</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 22, "block": "<pre class=\"text highlighted_source\">enum type mode ENCRYPT = +1, DECRYPT = -1 end type<br/>\u00a0<br/>function Vigenere(string s, string key, mode m)<br/>string res = \"\"<br/>integer k = 1, ch<br/>    s = upper(s)<br/>    for i=1 to length(s) do<br/>        ch = s[i]<br/>        if ch&gt;='A' and ch&lt;='Z' then<br/>            res &amp;= 'A'+mod(ch+m*(key[k]+26),26)<br/>            k = mod(k,length(key))+1<br/>        end if<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>constant key = \"LEMON\",<br/>         s = \"ATTACK AT DAWN\",<br/>         e = Vigenere(s,key,ENCRYPT),<br/>         d = Vigenere(e,key,DECRYPT)<br/>\u00a0<br/>printf(1,\"Original:\u00a0%s\\nEncrypted:\u00a0%s\\nDecrypted:\u00a0%s\\n\",{s,e,d})</pre>"}, {"lang": "PHP", "loc": 46, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/>\u00a0<br/><span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$key</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"VIGENERECIPHER\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://www.php.net/printf\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Text: <span class=\"es6\">%s</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$str</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/printf\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"key:  <span class=\"es6\">%s</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$key</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$cod</span> <span class=\"sy0\">=</span> encipher<span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"sy0\">,</span> <span class=\"re0\">$key</span><span class=\"sy0\">,</span> <span class=\"kw4\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://www.php.net/printf\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Code: <span class=\"es6\">%s</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$cod</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$dec</span> <span class=\"sy0\">=</span> encipher<span class=\"br0\">(</span><span class=\"re0\">$cod</span><span class=\"sy0\">,</span> <span class=\"re0\">$key</span><span class=\"sy0\">,</span> <span class=\"kw4\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://www.php.net/printf\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Back: <span class=\"es6\">%s</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$dec</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">function</span> encipher<span class=\"br0\">(</span><span class=\"re0\">$src</span><span class=\"sy0\">,</span> <span class=\"re0\">$key</span><span class=\"sy0\">,</span> <span class=\"re0\">$is_encode</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"re0\">$key</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/strtoupper\"><span class=\"kw3\">strtoupper</span></a><span class=\"br0\">(</span><span class=\"re0\">$key</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$src</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/strtoupper\"><span class=\"kw3\">strtoupper</span></a><span class=\"br0\">(</span><span class=\"re0\">$src</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$dest</span> <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* strip out non-letters */</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;=</span> <a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$src</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$char</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/substr\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$src</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span><a href=\"http://www.php.net/ctype_upper\"><span class=\"kw3\">ctype_upper</span></a><span class=\"br0\">(</span><span class=\"re0\">$char</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$dest</span> <span class=\"sy0\">.=</span> <span class=\"re0\">$char</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;=</span> <a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$dest</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$char</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/substr\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$dest</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.php.net/ctype_upper\"><span class=\"kw3\">ctype_upper</span></a><span class=\"br0\">(</span><span class=\"re0\">$char</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"re0\">$dest</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/substr_replace\"><span class=\"kw3\">substr_replace</span></a><span class=\"br0\">(</span><span class=\"re0\">$dest</span><span class=\"sy0\">,</span><br/>            <a href=\"http://www.php.net/chr\"><span class=\"kw3\">chr</span></a> <span class=\"br0\">(</span><br/>                <a href=\"http://www.php.net/ord\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><span class=\"st_h\">'A'</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>                <span class=\"br0\">(</span><span class=\"re0\">$is_encode</span><br/>                  \u00a0? <a href=\"http://www.php.net/ord\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><span class=\"re0\">$char</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <a href=\"http://www.php.net/ord\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><span class=\"st_h\">'A'</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <a href=\"http://www.php.net/ord\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><span class=\"re0\">$key</span><span class=\"br0\">[</span><span class=\"re0\">$i</span> <span class=\"sy0\">%</span> <a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$key</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <a href=\"http://www.php.net/ord\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><span class=\"st_h\">'A'</span><span class=\"br0\">)</span><br/>                   <span class=\"sy0\">:</span> <a href=\"http://www.php.net/ord\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><span class=\"re0\">$char</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <a href=\"http://www.php.net/ord\"><span class=\"kw3\">ord</span></a><span class=\"br0\">(</span><span class=\"re0\">$key</span><span class=\"br0\">[</span><span class=\"re0\">$i</span> <span class=\"sy0\">%</span> <a href=\"http://www.php.net/strlen\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span><span class=\"re0\">$key</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">26</span><br/>                <span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span><br/>            <span class=\"br0\">)</span><br/>        <span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$dest</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy1\">?&gt;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 22, "block": "<pre class=\"text highlighted_source\">(de vigenereKey (Str)<br/>   (extract<br/>      '((C)<br/>         (when (&gt;= \"Z\" (uppc C) \"A\")<br/>            (- (char (uppc C)) 65) ) )<br/>      (chop Str) ) )<br/>\u00a0<br/>(de vigenereEncrypt (Str Key)<br/>   (pack<br/>      (mapcar<br/>         '((C K)<br/>            (char (+ 65 (% (+ C K) 26))) )<br/>         (vigenereKey Str)<br/>         (apply circ (vigenereKey Key)) ) ) )<br/>\u00a0<br/>(de vigenereDecrypt (Str Key)<br/>   (pack<br/>      (mapcar<br/>         '((C K)<br/>            (char (+ 65 (% (+ 26 (- C K)) 26))) )<br/>         (vigenereKey Str)<br/>         (apply circ (vigenereKey Key)) ) ) )</pre>"}, {"lang": "PL/I", "loc": 46, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>cypher: procedure options (main);      /* 21 September 2012 */<br/>   declare t(26) character (26);<br/>   declare (i, j, k, L) fixed binary;<br/>   declare (original, encoded, coder) character (1000) varying initial ('');<br/>   declare cypher character (30) varying;<br/>   declare (co, ct, cc) character (1);<br/>\u00a0<br/>   /* Set up cypher table. */<br/>   t(1) = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';<br/>   do i = 2 to 26;<br/>      t(i) =  substr(t(i-1), 2, 25) || substr(t(i-1), 1, 1);<br/>   end;<br/>\u00a0<br/>   cypher = 'VIGILANCE';<br/>   original = 'Meet me on Tuesday evening at seven.';<br/>   put edit ('Message=', original) (a);<br/>   original = uppercase(original);<br/>\u00a0<br/>   /* Create the cypher text, same length as original, or longer. */<br/>   coder = repeat(cypher, length(original)/length(cypher));<br/>\u00a0<br/>   /* Encode the original message, character by character. */<br/>   /* Non-alphabetic characters are ignored. */<br/>   L = 0;<br/>   do i = 1 to length(original);<br/>      co = substr(original, i, 1);<br/>      j = index(t(1), co);<br/>      if j = 0 then iterate; /* Ignore non-alphabetic character */<br/>      L = L + 1;<br/>      ct = substr(coder, L, 1);<br/>      k = index(t(1), ct);<br/>      encoded = encoded || substr(t(j), k, 1);<br/>   end;<br/>   put skip data (encoded);<br/>\u00a0<br/>   /* DECODING. */<br/>   put skip list ('Decoded=');<br/>   do i = 1 to length(encoded);<br/>      cc = substr(coder, i, 1);<br/>      j = index(t(1), cc);<br/>      k = index(t(j), substr(encoded, i, 1));<br/>      put edit (substr(t(1), k, 1) ) (a(1));<br/>   end;<br/>end cypher;<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 85, "block": "<pre class=\"powershell highlighted_source\"><span class=\"co1\"># Author: D. Cudnohufsky</span><br/><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>VigenereCipher<br/><span class=\"br0\">{</span><br/>    <span class=\"kw3\">Param</span><br/>    <span class=\"br0\">(</span><br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span> <span class=\"re0\">$Text</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span> <span class=\"re0\">$Key</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span><span class=\"kw3\">switch</span><span class=\"br0\">]</span> <span class=\"re0\">$Decode</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    begin<br/>    <span class=\"br0\">{</span>    <br/>        <span class=\"re0\">$map</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re3\">char</span><span class=\"br0\">]</span><span class=\"st0\">'A'</span>..<span class=\"br0\">[</span><span class=\"re3\">char</span><span class=\"br0\">]</span><span class=\"st0\">'Z'</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    process<br/>    <span class=\"br0\">{</span><br/>        <span class=\"re0\">$Key</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Key</span> <span class=\"kw4\">-replace</span> <span class=\"st0\">'[^a-zA-Z]'</span><span class=\"sy0\">,</span><span class=\"st0\">''</span><br/>        <span class=\"re0\">$Text</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Text</span> <span class=\"kw4\">-replace</span> <span class=\"st0\">'[^a-zA-Z]'</span><span class=\"sy0\">,</span><span class=\"st0\">''</span><br/>\u00a0<br/>        <span class=\"re0\">$keyChars</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Key</span>.toUpper<span class=\"br0\">(</span><span class=\"br0\">)</span>.ToCharArray<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"re0\">$Chars</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Text</span>.toUpper<span class=\"br0\">(</span><span class=\"br0\">)</span>.ToCharArray<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw3\">function</span> encode<br/>        <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw3\">param</span><br/>            <span class=\"br0\">(</span><br/>                <span class=\"re0\">$Char</span><span class=\"sy0\">,</span><br/>                <span class=\"re0\">$keyChar</span><span class=\"sy0\">,</span><br/>                <span class=\"re0\">$Alpha</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re3\">char</span><span class=\"br0\">]</span><span class=\"st0\">'A'</span>..<span class=\"br0\">[</span><span class=\"re3\">char</span><span class=\"br0\">]</span><span class=\"st0\">'Z'</span><br/>            <span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"re0\">$charIndex</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Alpha</span>.IndexOf<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$Char</span><span class=\"br0\">)</span><br/>            <span class=\"re0\">$keyIndex</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Alpha</span>.IndexOf<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$keyChar</span><span class=\"br0\">)</span><br/>            <span class=\"re0\">$NewIndex</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$charIndex</span> <span class=\"sy0\">+</span> <span class=\"re0\">$KeyIndex</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"re0\">$Alpha</span>.Length<br/>            <span class=\"re0\">$Alpha</span><span class=\"br0\">[</span><span class=\"re0\">$NewIndex</span><span class=\"br0\">]</span><br/>\u00a0<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw3\">function</span> decode<br/>        <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw3\">param</span><br/>            <span class=\"br0\">(</span><br/>                <span class=\"re0\">$Char</span><span class=\"sy0\">,</span><br/>                <span class=\"re0\">$keyChar</span><span class=\"sy0\">,</span><br/>                <span class=\"re0\">$Alpha</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re3\">char</span><span class=\"br0\">]</span><span class=\"st0\">'A'</span>..<span class=\"br0\">[</span><span class=\"re3\">char</span><span class=\"br0\">]</span><span class=\"st0\">'Z'</span><br/>            <span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"re0\">$charIndex</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Alpha</span>.IndexOf<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$Char</span><span class=\"br0\">)</span><br/>            <span class=\"re0\">$keyIndex</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Alpha</span>.IndexOf<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$keyChar</span><span class=\"br0\">)</span><br/>            <span class=\"re0\">$int</span> <span class=\"sy0\">=</span> <span class=\"re0\">$charIndex</span> <span class=\"sy0\">-</span> <span class=\"re0\">$keyIndex</span><br/>            <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$int</span> <span class=\"kw4\">-lt</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$NewIndex</span> <span class=\"sy0\">=</span> <span class=\"re0\">$int</span> <span class=\"sy0\">+</span> <span class=\"re0\">$Alpha</span>.Length <span class=\"br0\">}</span><br/>            <span class=\"kw3\">else</span> <span class=\"br0\">{</span> <span class=\"re0\">$NewIndex</span> <span class=\"sy0\">=</span> <span class=\"re0\">$int</span> <span class=\"br0\">}</span><br/>            <span class=\"re0\">$Alpha</span><span class=\"br0\">[</span><span class=\"re0\">$NewIndex</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw3\">while</span> <span class=\"br0\">(</span> <span class=\"re0\">$keyChars</span>.Length <span class=\"kw4\">-lt</span> <span class=\"re0\">$Chars</span>.Length <span class=\"br0\">)</span> <br/>        <span class=\"br0\">{</span><br/>            <span class=\"re0\">$keyChars</span> <span class=\"sy0\">=</span> <span class=\"re0\">$keyChars</span> <span class=\"sy0\">+</span> <span class=\"re0\">$keyChars</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw3\">for</span> <span class=\"br0\">(</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$Chars</span>.Length; <span class=\"re0\">$i</span><span class=\"sy0\">++</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw3\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$Chars</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span><span class=\"kw3\">in</span> <span class=\"re0\">$map</span> <span class=\"kw4\">-and</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$keyChars</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span><span class=\"kw3\">in</span> <span class=\"re0\">$map</span> <span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$Decode</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$Chars</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> decode <span class=\"re0\">$Chars</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"re0\">$keyChars</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"re0\">$map</span><span class=\"br0\">}</span><br/>                <span class=\"kw3\">else</span> <span class=\"br0\">{</span><span class=\"re0\">$Chars</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> encode <span class=\"re0\">$Chars</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"re0\">$keyChars</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"re0\">$map</span><span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"re0\">$Chars</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re3\">char</span><span class=\"br0\">]</span><span class=\"re0\">$Chars</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$OutText</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$Chars</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"re0\">$OutText</span><br/>        <span class=\"re0\">$OutText</span> <span class=\"sy0\">=</span> <span class=\"re0\">$null</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PureBasic", "loc": 61, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> prepString<span class=\"br0\">(</span>text.s, Array letters<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;convert characters to an ordinal (0-25) and remove non-alphabetic characters,</span><br/>  <span class=\"co1\">;returns dimension size of result array letters()</span><br/>  <span class=\"kw1\">Protected</span> <span class=\"sy0\">*</span>letter.Character, index<br/>  <span class=\"kw1\">Dim</span> letters<span class=\"br0\">(</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span>text<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  text <span class=\"sy0\">=</span> <span class=\"kw2\">UCase</span><span class=\"br0\">(</span>text<span class=\"br0\">)</span><br/>  <span class=\"sy0\">*</span>letter <span class=\"sy0\">=</span> @text<br/>  <span class=\"kw1\">While</span> <span class=\"sy0\">*</span>letter<span class=\"sy0\">\\</span>c<br/>    <span class=\"kw1\">Select</span> <span class=\"sy0\">*</span>letter<span class=\"sy0\">\\</span>c<br/>      <span class=\"kw1\">Case</span> 'A' <span class=\"kw1\">To</span> 'Z'<br/>        letters<span class=\"br0\">(</span>index<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>letter<span class=\"sy0\">\\</span>c <span class=\"sy0\">-</span> <span class=\"nu0\">65</span><br/>        index <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">EndSelect</span><br/>    <span class=\"sy0\">*</span>letter <span class=\"sy0\">+</span> <span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Character<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">If</span> index <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">Redim</span> letters<span class=\"br0\">(</span>index <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> index <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.s VC_encrypt<span class=\"br0\">(</span>text.s, keyText.s, reverse <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;if reverse &lt;&gt; 0 then reverse the key (decrypt)</span><br/>  <span class=\"kw1\">Protected</span> <span class=\"sy0\">*</span>letter.Character<br/>  <span class=\"kw1\">Dim</span> text<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> keyText<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> prepString<span class=\"br0\">(</span>text, text<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Or</span> prepString<span class=\"br0\">(</span>keyText, keyText<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span>: <span class=\"kw1\">ProcedureReturn</span>: <span class=\"kw1\">EndIf</span> <span class=\"co1\">;exit, nothing to work with</span><br/>\u00a0<br/>  <span class=\"kw1\">Protected</span> i, keyLength <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>keyText<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> reverse<br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> keyLength<br/>      keyText<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">26</span> <span class=\"sy0\">-</span> keyText<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">EndIf</span> <br/>\u00a0<br/>  <span class=\"kw1\">Protected</span> textLength <span class=\"sy0\">=</span> ArraySize<span class=\"br0\">(</span>text<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;zero-based length</span><br/>  <span class=\"kw1\">Protected</span> result.s <span class=\"sy0\">=</span> <span class=\"kw2\">Space</span><span class=\"br0\">(</span>textLength <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"sy0\">*</span>resultLetter.Character<br/>  keyLength <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"co1\">;convert from zero-based to one-based count</span><br/>  <span class=\"sy0\">*</span>resultLetter <span class=\"sy0\">=</span> @result<br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> textLength<br/>    <span class=\"sy0\">*</span>resultLetter<span class=\"sy0\">\\</span>c <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>text<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> keyText<span class=\"br0\">(</span>i <span class=\"sy0\">%</span> keyLength<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">65</span><br/>    <span class=\"sy0\">*</span>resultLetter <span class=\"sy0\">+</span> <span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Character<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">ProcedureReturn</span> result<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.s VC_decrypt<span class=\"br0\">(</span>cypherText.s, keyText.s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> VC_encrypt<span class=\"br0\">(</span>cypherText, keyText.s, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> VignereCipher.s, plainText.s, encryptedText.s, decryptedText.s<br/>\u00a0<br/>  VignereCipher.s <span class=\"sy0\">=</span> <span class=\"st0\">\"VIGNERECIPHER\"</span><br/>  plainText <span class=\"sy0\">=</span> <span class=\"st0\">\"The quick brown fox jumped over the lazy dogs.\"</span>: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"st0\">\"Plain text = \"</span>, <span class=\"nu0\">17</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> #DQUOTE$ <span class=\"sy0\">+</span> plainText <span class=\"sy0\">+</span> #DQUOTE$<span class=\"br0\">)</span><br/>  encryptedText <span class=\"sy0\">=</span> VC_encrypt<span class=\"br0\">(</span>plainText, VignereCipher<span class=\"br0\">)</span>: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"st0\">\"Encrypted text = \"</span>, <span class=\"nu0\">17</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> #DQUOTE$ <span class=\"sy0\">+</span> encryptedText <span class=\"sy0\">+</span> #DQUOTE$<span class=\"br0\">)</span><br/>  decryptedText <span class=\"sy0\">=</span> VC_decrypt<span class=\"br0\">(</span>encryptedText, VignereCipher<span class=\"br0\">)</span>: <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"st0\">\"Decrypted text = \"</span>, <span class=\"nu0\">17</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> #DQUOTE$ <span class=\"sy0\">+</span> decryptedText <span class=\"sy0\">+</span> #DQUOTE$<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 21, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> starmap<span class=\"sy0\">,</span> cycle<br/>\u00a0<br/><span class=\"kw1\">def</span> encrypt<span class=\"br0\">(</span>message<span class=\"sy0\">,</span> key<span class=\"br0\">)</span>:<br/>\u00a0<br/>    <span class=\"co1\"># convert to uppercase.</span><br/>    <span class=\"co1\"># strip out non-alpha characters.</span><br/>    message <span class=\"sy0\">=</span> <span class=\"kw2\">filter</span><span class=\"br0\">(</span><span class=\"kw2\">str</span>.<span class=\"me1\">isalpha</span><span class=\"sy0\">,</span> message.<span class=\"me1\">upper</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># single letter encrpytion.</span><br/>    <span class=\"kw1\">def</span> enc<span class=\"br0\">(</span>c<span class=\"sy0\">,</span>k<span class=\"br0\">)</span>: <span class=\"kw1\">return</span> <span class=\"kw2\">chr</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">ord</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span> + <span class=\"kw2\">ord</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> - <span class=\"nu0\">2</span>*<span class=\"kw2\">ord</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0% <span class=\"nu0\">26</span><span class=\"br0\">)</span> + <span class=\"kw2\">ord</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>starmap<span class=\"br0\">(</span>enc<span class=\"sy0\">,</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>message<span class=\"sy0\">,</span> cycle<span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> decrypt<span class=\"br0\">(</span>message<span class=\"sy0\">,</span> key<span class=\"br0\">)</span>:<br/>\u00a0<br/>    <span class=\"co1\"># single letter decryption.</span><br/>    <span class=\"kw1\">def</span> dec<span class=\"br0\">(</span>c<span class=\"sy0\">,</span>k<span class=\"br0\">)</span>: <span class=\"kw1\">return</span> <span class=\"kw2\">chr</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">ord</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> - <span class=\"kw2\">ord</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span> - <span class=\"nu0\">2</span>*<span class=\"kw2\">ord</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0% <span class=\"nu0\">26</span><span class=\"br0\">)</span> + <span class=\"kw2\">ord</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"\"</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>starmap<span class=\"br0\">(</span>dec<span class=\"sy0\">,</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>message<span class=\"sy0\">,</span> cycle<span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "R", "loc": 18, "block": "<pre class=\"text highlighted_source\">mod1 = function(v, n)<br/># mod1(1:20, 6)   =&gt;   1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2<br/>    ((v - 1)\u00a0%% n) + 1<br/>\u00a0<br/>str2ints = function(s)<br/>    as.integer(Filter(Negate(is.na),<br/>        factor(levels = LETTERS, strsplit(toupper(s), \"\")[[1]])))<br/>\u00a0<br/>vigen = function(input, key, decrypt = F)<br/>   {input = str2ints(input)<br/>    key = rep(str2ints(key), len = length(input)) - 1<br/>    paste(collapse = \"\", LETTERS[<br/>        mod1(input + (if (decrypt) -1 else 1)*key, length(LETTERS))])}<br/>\u00a0<br/>message(vigen(\"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\", \"vigenerecipher\"))<br/>  # WMCEEIKLGRPIFVMEUGXQPWQVIOIAVEYXUEKFKBTALVXTGAFXYEVKPAGY<br/>message(vigen(\"WMCEEIKLGRPIFVMEUGXQPWQVIOIAVEYXUEKFKBTALVXTGAFXYEVKPAGY\", \"vigenerecipher\", decrypt = T))<br/>  # BEWARETHEJABBERWOCKMYSONTHEJAWSTHATBITETHECLAWSTHATCATCH</pre>"}, {"lang": "Racket", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define chr integer-&gt;char)<br/>(define ord char-&gt;integer)<br/>\u00a0<br/>(define (encrypt msg key)<br/>  (define cleaned<br/>    (list-&gt;string<br/>     (for/list ([c (string-upcase msg)] <br/>                #:when (char-alphabetic? c)) c)))<br/>  (list-&gt;string<br/>   (for/list ([c cleaned] [k (in-cycle key)])<br/>     (chr (+ (modulo (+ (ord c) (ord k)) 26) (ord #\\A))))))<br/>\u00a0<br/>(define (decrypt msg key)<br/>  (list-&gt;string<br/>   (for/list ([c msg] [k (in-cycle key)])<br/>     (chr (+ (modulo (- (ord c) (ord k)) 26) (ord #\\A))))))<br/>\u00a0<br/>(decrypt (encrypt \"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\"<br/>                  \"VIGENERECIPHER\")<br/>         \"VIGENERECIPHER\")<br/>\u00a0</pre>"}, {"lang": "Red", "loc": 1, "block": "<pre>red.exe -c vign1.red</pre>"}, {"lang": "REXX", "loc": 27, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  encrypts  (and displays)  uppercased text  using  the  Vigen\u00e8re  cypher.*/</span><br/>@<span class=\"sy0\">.</span>1 = <span class=\"st0\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><br/>L=<span class=\"kw6\">length</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>1<span class=\"br0\">)</span><br/>                         <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> L;                        jm=j-<span class=\"nu0\">1</span>;    <a class=\"__cf_email__\" data-cfemail=\"cebff38e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>jm<br/>                         @<span class=\"sy0\">.</span>j=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>q, <span class=\"nu0\">2</span>, L - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"kw6\">left</span><span class=\"br0\">(</span>q, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>\u00a0<br/>cypher = <span class=\"kw6\">space</span><span class=\"br0\">(</span><span class=\"st0\">'WHOOP DE DOO    NO BIG DEAL HERE OR THERE'</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>oMsg   = <span class=\"st0\">'People solve problems by trial and error; judgement helps pick the trial.'</span><br/>oMsgU  = oMsg;    <span class=\"kw2\">upper</span> oMsgU<br/>cypher_= <span class=\"kw6\">copies</span><span class=\"br0\">(</span>cypher, <span class=\"kw6\">length</span><span class=\"br0\">(</span>oMsg<span class=\"br0\">)</span>\u00a0% <span class=\"kw6\">length</span><span class=\"br0\">(</span>cypher<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>                                <span class=\"kw1\">say</span> <span class=\"st0\">'   original text ='</span>   oMsg<br/>   xMsg= Ncypher<span class=\"br0\">(</span>oMsgU<span class=\"br0\">)</span>;        <span class=\"kw1\">say</span> <span class=\"st0\">'   cyphered text ='</span>   xMsg<br/>   bMsg= Dcypher<span class=\"br0\">(</span>xMsg<span class=\"br0\">)</span>\u00a0;        <span class=\"kw1\">say</span> <span class=\"st0\">'re-cyphered text ='</span>   bMsg<br/><span class=\"kw1\">exit</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>Ncypher:  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;    nMsg=;       #=<span class=\"nu0\">1</span>      <span class=\"coMULTI\">/*unsupported char? \u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193*/</span><br/>              <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;   j=<span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>x,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span>, @<span class=\"sy0\">.</span>1<span class=\"br0\">)</span>;   <span class=\"kw1\">if</span> j==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>              nMsg=nMsg <span class=\"sy0\">||</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>j, <span class=\"kw6\">pos</span><span class=\"br0\">(</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span> cypher_, #, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, @<span class=\"sy0\">.</span>1<span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;     #=#+<span class=\"nu0\">1</span><br/>              <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>          <span class=\"kw1\">return</span> nMsg<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>Dcypher:  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;    dMsg=<br/>              <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;   j=<span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>cypher_, i, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,  @<span class=\"sy0\">.</span>1<span class=\"br0\">)</span><br/>              dMsg=dMsg <span class=\"sy0\">||</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>1, <span class=\"kw6\">pos</span><span class=\"br0\">(</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>x, i, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, @<span class=\"sy0\">.</span>j<span class=\"br0\">)</span>,   <span class=\"nu0\">1</span>  <span class=\"br0\">)</span><br/>              <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>          <span class=\"kw1\">return</span> dMsg</pre>"}, {"lang": "Ring", "loc": 47, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Vigen\u00e8re cipher<br/>\u00a0<br/>key = \"LEMON\"<br/>plaintext = \"ATTACK AT DAWN\"<br/>ciphertext = encrypt(plaintext, key)<br/>see \"key = \"+ key + nl<br/>see \"plaintext  = \" + plaintext + nl<br/>see \"ciphertext = \" + ciphertext + nl<br/>see \"decrypted  = \" + decrypt(ciphertext, key) + nl<br/>\u00a0<br/>\u00a0<br/>func encrypt(plain, key)<br/>        o = \"\"<br/>        k = 0<br/>        plain = fnupper(plain)<br/>        key = fnupper(key)<br/>        for i = 1 to len(plain)<br/>             n = ascii(plain[i])<br/>             if n &gt;= 65 and n &lt;= 90<br/>                o = o + char(65 + (n + ascii(key[k+1]))\u00a0% 26)<br/>                k = (k + 1)\u00a0% len(key)<br/>             ok<br/>        next<br/>        return o<br/>\u00a0<br/>func decrypt(cipher, key)<br/>        o = \"\"<br/>        k = 0<br/>        cipher = fnupper(cipher)<br/>        key = fnupper(key)<br/>        for i = 1 to len(cipher)<br/>             n = ascii(cipher[i])<br/>             o = o + char(65 + (n + 26 - ascii(key[k+1]))\u00a0% 26)<br/>             k = (k + 1)\u00a0% len(key)<br/>        next<br/>        return o<br/>\u00a0<br/>func fnupper(a)<br/>        for aa = 1 to len(a)<br/>             c = ascii(a[aa])<br/>            if c &gt;= 97 and c &lt;= 122 <br/>               a[aa] = char(c-32)<br/>           ok<br/>        next<br/>        return a<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 23, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">module</span> VigenereCipher<br/>\u00a0<br/>  BASE = <span class=\"st0\">'A'</span>.<span class=\"me1\">ord</span><br/>  SIZE = <span class=\"st0\">'Z'</span>.<span class=\"me1\">ord</span> <span class=\"sy0\">-</span> BASE <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> encrypt<span class=\"br0\">(</span>text, key<span class=\"br0\">)</span><br/>    crypt<span class=\"br0\">(</span>text, key,\u00a0:<span class=\"sy0\">+</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> decrypt<span class=\"br0\">(</span>text, key<span class=\"br0\">)</span><br/>    crypt<span class=\"br0\">(</span>text, key,\u00a0:<span class=\"sy0\">-</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> crypt<span class=\"br0\">(</span>text, key, dir<span class=\"br0\">)</span><br/>    text = text.<span class=\"me1\">upcase</span>.<span class=\"kw3\">gsub</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">[</span>^A<span class=\"sy0\">-</span>Z<span class=\"br0\">]</span><span class=\"sy0\">/</span>, <span class=\"st0\">''</span><span class=\"br0\">)</span><br/>    key_iterator = key.<span class=\"me1\">upcase</span>.<span class=\"kw3\">gsub</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">[</span>^A<span class=\"sy0\">-</span>Z<span class=\"br0\">]</span><span class=\"sy0\">/</span>, <span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">chars</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> c.<span class=\"me1\">ord</span> <span class=\"sy0\">-</span> BASE<span class=\"br0\">}</span>.<span class=\"me1\">cycle</span><br/>    text.<span class=\"me1\">each_char</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>ciphertext, char<span class=\"sy0\">|</span><br/>      offset = key_iterator.<span class=\"kw1\">next</span><br/>      ciphertext <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>char.<span class=\"me1\">ord</span> <span class=\"sy0\">-</span> BASE<span class=\"br0\">)</span>.<span class=\"me1\">send</span><span class=\"br0\">(</span>dir, offset<span class=\"br0\">)</span> <span class=\"sy0\">%</span> SIZE <span class=\"sy0\">+</span> BASE<span class=\"br0\">)</span>.<span class=\"me1\">chr</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 49, "block": "<pre class=\"text highlighted_source\">use std::ascii::AsciiExt;<br/>\u00a0<br/>static A: u8 = 'A' as u8;<br/>\u00a0<br/>fn uppercase_and_filter(input: &amp;str) -&gt; Vec&lt;u8&gt; {<br/>    let alphabet = b\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";<br/>    let mut result = Vec::new();<br/>\u00a0<br/>    for c in input.chars() {<br/>        // Ignore anything that is not in our short list of chars. We can then safely cast to u8.<br/>        if alphabet.iter().any(|&amp;x| x as char == c) {<br/>            result.push(c.to_ascii_uppercase() as u8);<br/>        }<br/>    }<br/>\u00a0<br/>    return result;<br/>}<br/>\u00a0<br/>fn vigenere(key: &amp;str, text: &amp;str, is_encoding: bool) -&gt; String {<br/>\u00a0<br/>    let key_bytes = uppercase_and_filter(key);<br/>    let text_bytes = uppercase_and_filter(text);<br/>\u00a0<br/>    let mut result_bytes = Vec::new();<br/>\u00a0<br/>    for (i, c) in text_bytes.iter().enumerate() {<br/>        let c2 = if is_encoding {<br/>            (c + key_bytes[i\u00a0% key_bytes.len()] - 2 * A)\u00a0% 26 + A<br/>        } else {<br/>            (c + 26 - key_bytes[i\u00a0% key_bytes.len()])\u00a0% 26 + A<br/>        };<br/>        result_bytes.push(c2);<br/>    }<br/>\u00a0<br/>    String::from_utf8(result_bytes).unwrap()<br/>}<br/>\u00a0<br/>fn main() {<br/>    let text = \"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\";<br/>    let key = \"VIGENERECIPHER\";<br/>\u00a0<br/>    println!(\"Text: {}\", text);<br/>    println!(\"Key:  {}\", key);<br/>\u00a0<br/>    let encoded = vigenere(key, text, true);<br/>    println!(\"Code: {}\", encoded);<br/>    let decoded = vigenere(key, &amp;encoded, false);<br/>    println!(\"Back: {}\", decoded);<br/>}</pre>"}, {"lang": "Scala", "loc": 36, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Vigenere <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> encrypt<span class=\"br0\">(</span>msg<span class=\"sy0\">:</span> String, key<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> result<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> to msg.<span class=\"me1\">length</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> msg.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'A'</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'Z'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        result +<span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>c + key.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> - <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"st0\">'A'</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span> + <span class=\"st0\">'A'</span><span class=\"br0\">)</span>.<span class=\"me1\">toChar</span><br/>        j <span class=\"sy0\">=</span> <span class=\"br0\">(</span>j + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> key.<span class=\"me1\">length</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> result<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> decrypt<span class=\"br0\">(</span>msg<span class=\"sy0\">:</span> String, key<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> result<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> to msg.<span class=\"me1\">length</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> msg.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;=</span> <span class=\"st0\">'A'</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">&lt;=</span> <span class=\"st0\">'Z'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        result +<span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>c - key.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> + <span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span> + <span class=\"st0\">'A'</span><span class=\"br0\">)</span>.<span class=\"me1\">toChar</span><br/>        j <span class=\"sy0\">=</span> <span class=\"br0\">(</span>j + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> key.<span class=\"me1\">length</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> result<br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>println<span class=\"br0\">(</span><span class=\"st0\">\"Encrypt text ABC =&gt; \"</span> + Vigenere.<span class=\"me1\">encrypt</span><span class=\"br0\">(</span><span class=\"st0\">\"ABC\"</span>, <span class=\"st0\">\"KEY\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>println<span class=\"br0\">(</span><span class=\"st0\">\"Decrypt text KFA =&gt; \"</span> + Vigenere.<span class=\"me1\">decrypt</span><span class=\"br0\">(</span><span class=\"st0\">\"KFA\"</span>, <span class=\"st0\">\"KEY\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 51, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func string: vigenereCipher (in string: source, in var string: keyword) is func<br/>  result<br/>    var string: dest is \"\";<br/>  local<br/>    var char: ch is ' ';<br/>    var integer: index is 1;<br/>    var integer: shift is 0;<br/>  begin<br/>    keyword\u00a0:= upper(keyword);<br/>    for ch range source do<br/>      if ch in {'A' .. 'Z'} | {'a' .. 'z'} then<br/>        shift\u00a0:= ord(keyword[succ(pred(index) rem length(keyword))]) - ord('A');<br/>        dest &amp;:= chr(ord('A') + (ord(upper(ch)) - ord('A') + shift) rem 26);<br/>        incr(index);<br/>      end if;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const func string: vigenereDecipher (in string: source, in var string: keyword) is func<br/>  result<br/>    var string: dest is \"\";<br/>  local<br/>    var char: ch is ' ';<br/>    var integer: index is 0;<br/>    var integer: shift is 0;<br/>  begin<br/>    keyword\u00a0:= upper(keyword);<br/>    for ch key index range source do<br/>      if ch in {'A' .. 'Z'} | {'a' .. 'z'} then<br/>        shift\u00a0:= ord(keyword[succ(pred(index) rem length(keyword))]) - ord('A');<br/>        dest &amp;:= chr(ord('A') + (ord(upper(ch)) - ord('A') - shift) mod 26);<br/>      end if;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    const string: input is \"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\";<br/>    const string: keyword is \"VIGENERECIPHER\";<br/>    var string: encrypted is \"\";<br/>    var string: decrypted is \"\";<br/>  begin<br/>    writeln(\"Input:     \" &lt;&amp; input);<br/>    writeln(\"key:       \" &lt;&amp; keyword);<br/>    encrypted\u00a0:= vigenereCipher(input, keyword);<br/>    writeln(\"Encrypted: \" &lt;&amp; encrypted);<br/>    decrypted\u00a0:= vigenereDecipher(encrypted, keyword);<br/>    writeln(\"Decrypted: \" &lt;&amp; decrypted);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 12, "block": "<pre class=\"ruby highlighted_source\">func s2v<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span> s.<span class=\"me1\">uc</span>.<span class=\"me1\">scan</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">[</span>A<span class=\"sy0\">-</span>Z<span class=\"br0\">]</span><span class=\"sy0\">/</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">ord</span><span class=\"br0\">}</span>\u00a0\u00bb<span class=\"sy0\">-</span>\u00bb <span class=\"nu0\">65</span> <span class=\"br0\">}</span><br/>func v2s<span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"br0\">{</span> v\u00a0\u00bb<span class=\"sy0\">%</span>\u00bb <span class=\"nu0\">26</span>\u00a0\u00bb<span class=\"sy0\">+</span>\u00bb <span class=\"nu0\">65</span> <span class=\"sy0\">-&gt;</span> map<span class=\"br0\">{</span>.<span class=\"me1\">chr</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span>   <span class=\"br0\">}</span><br/>\u00a0<br/>func blacken <span class=\"br0\">(</span>red, key<span class=\"br0\">)</span> <span class=\"br0\">{</span> v2s<span class=\"br0\">(</span>s2v<span class=\"br0\">(</span>red<span class=\"br0\">)</span>\u00a0\u00bb<span class=\"sy0\">+</span>\u00ab\u00a0s2v<span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>func redden  <span class=\"br0\">(</span>blk, key<span class=\"br0\">)</span> <span class=\"br0\">{</span> v2s<span class=\"br0\">(</span>s2v<span class=\"br0\">(</span>blk<span class=\"br0\">)</span>\u00a0\u00bb<span class=\"sy0\">-</span>\u00ab\u00a0s2v<span class=\"br0\">(</span>key<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>var red = <span class=\"st0\">\"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\"</span><br/>var key = <span class=\"st0\">\"Vigenere Cipher!!!\"</span><br/>\u00a0<br/>say red<br/>say <span class=\"br0\">(</span>var black = blacken<span class=\"br0\">(</span>red, key<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>say redden<span class=\"br0\">(</span>black, key<span class=\"br0\">)</span></pre>"}, {"lang": "Smalltalk", "loc": 5, "block": "<pre class=\"smalltalk highlighted_source\">\u00a0<br/><span class=\"re6\">prep</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>:<span class=\"re5\">s</span> | s select:<span class=\"br0\">[</span>:<span class=\"re5\">ch</span> | ch isLetter<span class=\"br0\">]</span> thenCollect:<span class=\"br0\">[</span>:<span class=\"re5\">ch</span> | ch asUppercase<span class=\"br0\">]</span><span class=\"br0\">]</span>.<br/><span class=\"re5\">encrypt</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>:<span class=\"re5\">s</span>\u00a0:<span class=\"re5\">cypher</span> | <span class=\"br0\">(</span><span class=\"re5\">prep</span> value:<span class=\"re5\">s</span><span class=\"br0\">)</span> keysAndValuesCollect:<span class=\"br0\">[</span>:<span class=\"re5\">i</span>\u00a0:<span class=\"re5\">ch</span> | ch rot:<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re5\">cypher</span> at:<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re5\">i</span>-<span class=\"re5\">1</span><span class=\"br0\">)</span>\\\\key size+<span class=\"re5\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>-$<span class=\"re0\">A</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>.<br/><span class=\"re5\">decrypt</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>:<span class=\"re5\">s</span>\u00a0:<span class=\"re5\">cypher</span> | <span class=\"br0\">(</span><span class=\"re5\">prep</span> value:<span class=\"re5\">s</span><span class=\"br0\">)</span> keysAndValuesCollect:<span class=\"br0\">[</span>:<span class=\"re5\">i</span>\u00a0:<span class=\"re5\">ch</span> | ch rot:<span class=\"re5\">26</span>-<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re5\">cypher</span> at:<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re5\">i</span>-<span class=\"re5\">1</span><span class=\"br0\">)</span>\\\\key size+<span class=\"re5\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>-$<span class=\"re0\">A</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>.<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 36, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>\u00a0<br/>oo::<span class=\"me1\">class</span> create Vigenere <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> key<br/>    constructor <span class=\"br0\">{</span>protoKey<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> c <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$protoKey</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">regexp</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>A-Za-z<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"re0\">$c</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> key <span class=\"br0\">[</span><span class=\"kw2\">scan</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> toupper <span class=\"re0\">$c</span><span class=\"br0\">]</span> <span class=\"sy0\">%</span>c<span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> encrypt <span class=\"br0\">{</span>text<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> out <span class=\"st0\">\"\"</span><br/>\t<span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">foreach</span> c <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$text</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">regexp</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>^a-zA-Z<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"re0\">$c</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t    <span class=\"kw2\">scan</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> toupper <span class=\"re0\">$c</span><span class=\"br0\">]</span> <span class=\"sy0\">%</span>c c<br/>\t    <span class=\"kw2\">append</span> out <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"sy0\">%</span>c <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$c</span>+<span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$key</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span>-<span class=\"nu0\">130</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>26+<span class=\"nu0\">65</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> j <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$j</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$key</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$out</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> decrypt <span class=\"br0\">{</span>text<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> out <span class=\"st0\">\"\"</span><br/>\t<span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">foreach</span> c <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$text</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">regexp</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>^A-Z<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"re0\">$c</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t    <span class=\"kw2\">scan</span> <span class=\"re0\">$c</span> <span class=\"sy0\">%</span>c c<br/>\t    <span class=\"kw2\">append</span> out <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"sy0\">%</span>c <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$c</span>-<span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$key</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span>+<span class=\"nu0\">26</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>26+<span class=\"nu0\">65</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> j <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$j</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$key</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$out</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TXR", "loc": 23, "block": "<pre class=\"text highlighted_source\">@(next\u00a0:args)<br/>@(do<br/>   (defun vig-op (plus-or-minus)<br/>     (op + #\\A [mod [plus-or-minus (- @1 #\\A) (- @2 #\\A)] 26]))<br/>\u00a0<br/>   (defun vig (msg key encrypt)<br/>     (mapcar (vig-op [if encrypt + -]) msg (repeat key))))<br/>@(coll)@{key /[A-Za-z]/}@(end)<br/>@(coll)@{msg /[A-Za-z]/}@(end)<br/>@(cat key \"\")<br/>@(filter\u00a0:upcase key)<br/>@(cat msg \"\")<br/>@(filter\u00a0:upcase msg)<br/>@(bind encoded @(vig msg key t))<br/>@(bind decoded @(vig msg key nil))<br/>@(bind check @(vig encoded key nil))<br/>@(output)<br/>text:  @msg<br/>key:   @key<br/>enc:   @encoded<br/>dec:   @decoded<br/>check: @check<br/>@(end)</pre>"}, {"lang": "TypeScript", "loc": 48, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw5\">class</span> Vigenere <span class=\"br0\">{</span><br/>\u00a0<br/>    key<span class=\"sy0\">:</span> string<br/>\u00a0<br/>    <span class=\"coMULTI\">/** Create new cipher based on key */</span><br/>    constructor<span class=\"br0\">(</span>key<span class=\"sy0\">:</span> string<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">key</span> <span class=\"sy0\">=</span> Vigenere.<span class=\"me1\">formatText</span><span class=\"br0\">(</span>key<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/** Enrypt a given text using key */</span><br/>    encrypt<span class=\"br0\">(</span>plainText<span class=\"sy0\">:</span> string<span class=\"br0\">)</span><span class=\"sy0\">:</span> string <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">Array</span>.<span class=\"kw1\">prototype</span>.<span class=\"me1\">map</span>.<span class=\"me1\">call</span><span class=\"br0\">(</span>Vigenere.<span class=\"me1\">formatText</span><span class=\"br0\">(</span>plainText<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>letter<span class=\"sy0\">:</span> string<span class=\"sy0\">,</span> index<span class=\"sy0\">:</span> number<span class=\"br0\">)</span><span class=\"sy0\">:</span> string <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw4\">String</span>.<span class=\"me1\">fromCharCode</span><span class=\"br0\">(</span><span class=\"br0\">(</span>letter.<span class=\"me1\">charCodeAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw1\">this</span>.<span class=\"me1\">key</span>.<span class=\"me1\">charCodeAt</span><span class=\"br0\">(</span>index <span class=\"sy0\">%</span> <span class=\"kw1\">this</span>.<span class=\"me1\">key</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">130</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span> <span class=\"sy0\">+</span> <span class=\"nu0\">65</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/** Decrypt ciphertext based on key */</span><br/>    decrypt<span class=\"br0\">(</span>cipherText<span class=\"sy0\">:</span> string<span class=\"br0\">)</span><span class=\"sy0\">:</span> string <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">Array</span>.<span class=\"kw1\">prototype</span>.<span class=\"me1\">map</span>.<span class=\"me1\">call</span><span class=\"br0\">(</span>Vigenere.<span class=\"me1\">formatText</span><span class=\"br0\">(</span>cipherText<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>letter<span class=\"sy0\">:</span> string<span class=\"sy0\">,</span> index<span class=\"sy0\">:</span> number<span class=\"br0\">)</span><span class=\"sy0\">:</span> string <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw4\">String</span>.<span class=\"me1\">fromCharCode</span><span class=\"br0\">(</span><span class=\"br0\">(</span>letter.<span class=\"me1\">charCodeAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"kw1\">this</span>.<span class=\"me1\">key</span>.<span class=\"me1\">charCodeAt</span><span class=\"br0\">(</span>index <span class=\"sy0\">%</span> <span class=\"kw1\">this</span>.<span class=\"me1\">key</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span> <span class=\"sy0\">+</span> <span class=\"nu0\">65</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/** Converts to uppercase and removes non characters */</span><br/>    private <span class=\"kw1\">static</span> formatText<span class=\"br0\">(</span>text<span class=\"sy0\">:</span> string<span class=\"br0\">)</span><span class=\"sy0\">:</span> string <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> text.<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"co2\">/[^A-Z]/g</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/** Example usage */</span><br/><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    let original<span class=\"sy0\">:</span> string <span class=\"sy0\">=</span> <span class=\"st0\">\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\"</span><br/>\u00a0<br/>    console.<span class=\"me1\">log</span><span class=\"br0\">(</span>`Original<span class=\"sy0\">:</span> $<span class=\"br0\">{</span>original<span class=\"br0\">}</span>`<span class=\"br0\">)</span><br/>\u00a0<br/>    let vig<span class=\"sy0\">:</span> Vigenere <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Vigenere<span class=\"br0\">(</span><span class=\"st0\">\"vigenere\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    let encoded<span class=\"sy0\">:</span> string <span class=\"sy0\">=</span> vig.<span class=\"me1\">encrypt</span><span class=\"br0\">(</span>original<span class=\"br0\">)</span><br/>\u00a0<br/>    console.<span class=\"me1\">log</span><span class=\"br0\">(</span>`After encryption<span class=\"sy0\">:</span> $<span class=\"br0\">{</span>encoded<span class=\"br0\">}</span>`<span class=\"br0\">)</span><br/>\u00a0<br/>    let back<span class=\"sy0\">:</span> string <span class=\"sy0\">=</span> vig.<span class=\"me1\">decrypt</span><span class=\"br0\">(</span>encoded<span class=\"br0\">)</span><br/>\u00a0<br/>    console.<span class=\"me1\">log</span><span class=\"br0\">(</span>`After decryption<span class=\"sy0\">:</span> $<span class=\"br0\">{</span>back<span class=\"br0\">}</span>`<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "VBA", "loc": 65, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> test()<br/><span class=\"kw4\">Dim</span> Encryp <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>   Encryp = Vigenere(<span class=\"st0\">\"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\"</span>, <span class=\"st0\">\"vigenerecipher\"</span>, <span class=\"kw5\">True</span>)<br/>   Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Encrypt:= \"</span><span class=\"st0\">\"\"</span> &amp; Encryp &amp; <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span><br/>   Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Decrypt:= \"</span><span class=\"st0\">\"\"</span> &amp; Vigenere(Encryp, <span class=\"st0\">\"vigenerecipher\"</span>, <span class=\"kw5\">False</span>) &amp; <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> Vigenere(sWord <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, sKey <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, Enc <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw4\">Dim</span> bw() <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>, bk() <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>, i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, c <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>Const sW <span class=\"kw4\">As</span> <span class=\"kw1\">String</span> = <span class=\"st0\">\"\u00c1\u00c2\u00c3\u00c4\u00c5\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d9\u00da\u00db\u00dc\u00dd\"</span><br/>Const sWo <span class=\"kw4\">As</span> <span class=\"kw1\">String</span> = <span class=\"st0\">\"AAAAACEEEEIIIINOOOOOUUUUY\"</span><br/>Const A <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span> = 65<br/>Const N <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span> = 26<br/>\u00a0<br/>   c = Len(sKey)<br/>   i = Len(sWord)<br/>   sKey = Left(IIf(c &lt; i, StrRept(sKey, (i / c) + 1), sKey), i)<br/>   sKey = StrConv(sKey, vbUpperCase)         <span class=\"co1\">'Upper case<br/></span>   sWord = StrConv(sWord, vbUpperCase)<br/>   sKey = StrReplace(sKey, sW, sWo)          <span class=\"co1\">'Replace accented characters<br/></span>   sWord = StrReplace(sWord, sW, sWo)<br/>   sKey = RemoveChars(sKey)                  <span class=\"co1\">'Remove characters (numerics, spaces, comas, ...)<br/></span>   sWord = RemoveChars(sWord)<br/>   bk = CharToAscii(sKey)                     <span class=\"co1\">'To work with Bytes instead of String<br/></span>   bw = CharToAscii(sWord)<br/>   <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(bw) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(bw)<br/>      Vigenere = Vigenere &amp; Chr((IIf(Enc, ((bw(i) - A) + (bk(i) - A)), ((bw(i) - A) - (bk(i) - A)) + N) <span class=\"kw4\">Mod</span> N) + A)<br/>   <span class=\"kw3\">Next</span> i<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> StrRept(s <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, N <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw4\">Dim</span> j <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, c <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>   <span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> N<br/>      c = c &amp; s<br/>   <span class=\"kw3\">Next</span><br/>   StrRept = c<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> StrReplace(s <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, What <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, By <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw4\">Dim</span> t() <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, u() <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>   t = SplitString(What)<br/>   u = SplitString(By)<br/>   StrReplace = s<br/>   <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(t) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(t)<br/>      StrReplace = Replace(StrReplace, t(i), u(i))<br/>   <span class=\"kw3\">Next</span> i<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> SplitString(s <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>()<br/>   SplitString = Split(StrConv(s, vbUnicode), Chr(0))<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> RemoveChars(str <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw4\">Dim</span> b() <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>, i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>   b = CharToAscii(str)<br/>   <span class=\"kw3\">For</span> i = <span class=\"kw4\">LBound</span>(b) <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(b)<br/>      <span class=\"kw3\">If</span> b(i) &gt;= 65 <span class=\"kw3\">And</span> b(i) &lt;= 90 <span class=\"kw3\">Then</span> RemoveChars = RemoveChars &amp; Chr(b(i))<br/>   <span class=\"kw3\">Next</span> i<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> CharToAscii(s <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Byte</span>()<br/>   CharToAscii = StrConv(s, vbFromUnicode)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "VBScript", "loc": 49, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> Encrypt(text,key)<br/>\ttext = OnlyCaps(text) <br/>\tkey = OnlyCaps(key)<br/>\tj = 1<br/>\t<span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> Len(text)<br/>\t\tms = Mid(text,i,1)<br/>\t\tm = Asc(ms) - Asc(<span class=\"st0\">\"A\"</span>)<br/>\t\tks = Mid(key,j,1)<br/>\t\tk = Asc(ks) - Asc(<span class=\"st0\">\"A\"</span>)<br/>\t\tj = (j <span class=\"kw4\">Mod</span> Len(key)) + 1<br/>\t\tc = (m + k) <span class=\"kw4\">Mod</span> 26<br/>\t\tc = Chr(Asc(<span class=\"st0\">\"A\"</span>)+c)<br/>\t\tEncrypt = Encrypt &amp; c<br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> Decrypt(text,key)<br/>\tkey = OnlyCaps(key)<br/>\tj = 1<br/>\t<span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> Len(text)<br/>\t\tms = Mid(text,i,1)<br/>\t\tm = Asc(ms) - Asc(<span class=\"st0\">\"A\"</span>)<br/>\t\tks = Mid(key,j,1)<br/>\t\tk = Asc(ks) - Asc(<span class=\"st0\">\"A\"</span>)<br/>\t\tj = (j <span class=\"kw4\">Mod</span> Len(key)) + 1<br/>\t\tc = (m - k + 26) <span class=\"kw4\">Mod</span> 26<br/>\t\tc = Chr(Asc(<span class=\"st0\">\"A\"</span>)+c)<br/>\t\tDecrypt = Decrypt &amp; c<br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> OnlyCaps(s)<br/>\t<span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> Len(s)<br/>\t\tchar = UCase(Mid(s,i,1))<br/>\t\t<span class=\"kw3\">If</span> Asc(char) &gt;= 65 <span class=\"kw3\">And</span> Asc(char) &lt;= 90 <span class=\"kw3\">Then</span><br/>\t\t\tOnlyCaps = OnlyCaps &amp; char<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'testing the functions<br/></span>orig_text = <span class=\"st0\">\"Beware the Jabberwock, my son! The jaws that bite, the claws that catch!\"</span><br/>orig_key = <span class=\"st0\">\"vigenerecipher\"</span><br/>WScript.StdOut.WriteLine <span class=\"st0\">\"Original: \"</span> &amp; orig_text<br/>WScript.StdOut.WriteLine <span class=\"st0\">\"Key: \"</span> &amp; orig_key<br/>WScript.StdOut.WriteLine <span class=\"st0\">\"Encrypted: \"</span> &amp; Encrypt(orig_text,orig_key)<br/>WScript.StdOut.WriteLine <span class=\"st0\">\"Decrypted: \"</span> &amp; Decrypt(Encrypt(orig_text,orig_key),orig_key)<br/>\u00a0</pre>"}, {"lang": "Vedit macro language", "loc": 48, "block": "<pre class=\"vedit highlighted_source\">Get_Input<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Key: \"</span><span class=\"sy0\">,</span> STATLINE<span class=\"sy0\">+</span>NOCR<span class=\"br0\">)</span>\t\t<span class=\"co1\">// @10 = key</span><br/>Reg_Copy_Block<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span> Cur_Pos<span class=\"sy0\">,</span> EOL_Pos<span class=\"br0\">)</span>\t\t<span class=\"co1\">// @11 = copy of original text</span><br/>EOL Ins_Newline<br/>Ins_Text<span class=\"br0\">(</span><span class=\"st0\">\"Key = \"</span><span class=\"br0\">)</span> Reg_Ins<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> Ins_Newline<br/>\u00a0<br/><span class=\"co1\">// Prepare the key into numeric registers #130..:</span><br/>Buf_Switch<span class=\"br0\">(</span>Buf_Free<span class=\"br0\">)</span><br/>Reg_Ins<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>Case_Upper_Block<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> Cur_Pos<span class=\"br0\">)</span><br/>BOF<br/>#<span class=\"nu0\">2</span> <span class=\"sy0\">=</span> Reg_Size<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>\t\t\t\t<span class=\"co1\">// #2 = key length</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">3</span><span class=\"sy0\">=</span><span class=\"nu0\">130</span><span class=\"sy0\">;</span> #<span class=\"nu0\">3</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">130</span><span class=\"sy0\">+</span>#<span class=\"nu0\">2</span><span class=\"sy0\">;</span> #<span class=\"nu0\">3</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    #@3 <span class=\"sy0\">=</span> Cur_Char<br/>    Char<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>Buf_Quit<span class=\"br0\">(</span>OK<span class=\"br0\">)</span><br/>\u00a0<br/>Ins_Text<span class=\"br0\">(</span><span class=\"st0\">\"Encrypted: \"</span><span class=\"br0\">)</span><br/>#<span class=\"nu0\">4</span> <span class=\"sy0\">=</span> Cur_Pos<br/>Reg_Ins<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"br0\">)</span>\t\t\t\t\t<span class=\"co1\">// copy of original text</span><br/>Replace_Block<span class=\"br0\">(</span><span class=\"st0\">\"|!|A\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> #<span class=\"nu0\">4</span><span class=\"sy0\">,</span> EOL_Pos<span class=\"sy0\">,</span> BEGIN<span class=\"sy0\">+</span>ALL<span class=\"sy0\">+</span>NOERR<span class=\"br0\">)</span> <span class=\"co1\">// remove non-alpha chars</span><br/>Case_Upper_Block<span class=\"br0\">(</span>#<span class=\"nu0\">4</span><span class=\"sy0\">,</span> EOL_Pos<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">// convert to upper case</span><br/>Goto_Pos<span class=\"br0\">(</span>#<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>#<span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> Call<span class=\"br0\">(</span><span class=\"st0\">\"ENCRYPT_DECRYPT\"</span><span class=\"br0\">)</span>\t\t\t<span class=\"co1\">// Encrypt the line</span><br/>Reg_Copy_Block<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span> #<span class=\"nu0\">4</span><span class=\"sy0\">,</span> Cur_Pos<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">// Copy encrypted text text to next line</span><br/>Ins_Newline<br/>Ins_Text<span class=\"br0\">(</span><span class=\"st0\">\"Decrypted: \"</span><span class=\"br0\">)</span><br/>Reg_Ins<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span> BEGIN<span class=\"br0\">)</span><br/>#<span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> Call<span class=\"br0\">(</span><span class=\"st0\">\"ENCRYPT_DECRYPT\"</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">// Decrypt the line</span><br/>\u00a0<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"co1\">// Encrypt or decrypt text on current line in-place, starting from cursor position.</span><br/><span class=\"co1\">//   in: #1 = direction (1=encrypt, -1=decrypt)</span><br/><span class=\"co1\">//       #2 = key length,  #130...#189 = the key</span><br/><span class=\"co1\">//</span><br/><span class=\"sy0\">:</span>ENCRYPT_DECRYPT<span class=\"sy0\">:</span><br/>    Num_Push<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>    #<span class=\"nu0\">6</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">While</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>At_EOL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       #<span class=\"nu0\">7</span> <span class=\"sy0\">=</span> #<span class=\"nu0\">6</span><span class=\"sy0\">+</span><span class=\"nu0\">130</span>\t\t\t\t<span class=\"co1\">// pointer to key array</span><br/>       #<span class=\"nu0\">8</span> <span class=\"sy0\">=</span> #@7\t\t\t\t\t<span class=\"co1\">// get key character</span><br/>       #<span class=\"nu0\">9</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Cur_Char <span class=\"sy0\">+</span> #<span class=\"nu0\">8</span><span class=\"sy0\">*</span>#<span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">26</span> <span class=\"sy0\">+</span> <span class=\"st0\">'A'</span>\t<span class=\"co1\">// decrypt/encrypt</span><br/>       Ins_Char<span class=\"br0\">(</span>#<span class=\"nu0\">9</span><span class=\"sy0\">,</span> OVERWRITE<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">// write the converted char</span><br/>       #<span class=\"nu0\">6</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>#<span class=\"nu0\">6</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> #<span class=\"nu0\">2</span><br/>    <span class=\"br0\">}</span><br/>    Num_Pop<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span> </pre>"}, {"lang": "XPL0", "loc": 21, "block": "<pre class=\"text highlighted_source\">code ChIn=7, ChOut=8;<br/>int  Neg, C, Len, I, Key;<br/>char KeyWord(80);<br/>[Neg:= false;                                   \\skip to KEYWORD<br/>repeat C:= ChIn(8);  if C=^- then Neg:= true;  until C&gt;=^A &amp; C&lt;=^Z;<br/>Len:= 0;                                        \\read in KEYWORD<br/>repeat KeyWord(Len):= C-^A;  Len:= Len+1;  C:= ChIn(8);  until C&lt;^A\u00a0! C&gt;^Z;<br/>I:= 0;                                          \\initialize cycling index<br/>repeat  C:= ChIn(1);<br/>        if C&gt;=^a &amp; C&lt;=^z then C:= C-$20;        \\capitalize<br/>        if C&gt;=^A &amp; C&lt;=^Z then                   \\discard non-alphas<br/>            [Key:= KeyWord(I);  I:= I+1;  if I&gt;=Len then I:= 0;<br/>            if Neg then Key:= -Key;             \\decrypting?<br/>            C:= C+Key;<br/>            if C&gt;^Z then C:= C-26<br/>            else if C&lt;^A then C:= C+26;<br/>            ChOut(0, C);<br/>            ];<br/>until   C=$1A;  \\EOF<br/>ChOut(0, $1A);  \\encrypted file must end with EOF otherwise the decode will hang<br/>]</pre>"}, {"lang": "zkl", "loc": 12, "block": "<pre class=\"text highlighted_source\">fcn encipher(src,key,is_encode){<br/>   upperCase:=[\"A\"..\"Z\"].pump(String);<br/>   src=src.toUpper().inCommon(upperCase);  // only uppercase<br/>   key=key.toUpper().inCommon(upperCase).pump(List,\"toAsc\");<br/>\u00a0<br/>   const A=\"A\".toAsc();<br/>   klen:=Walker.cycle(key.len());  // 0,1,2,3,..,keyLen-1,0,1,2,3, ...<br/>   src.pump(String,'wrap(c){ i:=klen.next(); c=c.toAsc();<br/>      (A + ( if(is_encode) c - A + key[i] - A;<br/>      \t     else\t   c - key[i] + 26 )\u00a0% 26).toChar()<br/>   });<br/>}</pre>"}]}