{"task": "Sum_multiples_of_3_and_5", "blocks": [{"lang": "360 Assembly", "loc": 46, "block": "<pre class=\"text highlighted_source\">*        Sum multiples of 3 and 5<br/>SUM35    CSECT<br/>         USING  SUM35,R13          base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    save previous context<br/>         ST     R13,4(R15)         link backward<br/>         ST     R15,8(R13)         link forward<br/>         LR     R13,R15            set addressability<br/>         LA     R9,1               n=1<br/>         LA     R7,7               do j=7 to 1 step -1<br/>LOOPJ    MH     R9,=H'10'            n=n*10<br/>         LR     R10,R9               n<br/>         BCTR   R10,0                n-1<br/>         ZAP    SUM,=PL8'0'          sum=0<br/>         LA     R6,3                 i=3<br/>       DO WHILE=(CR,R6,LE,R10)       do i=3 to n-1<br/>         LR     R4,R6                  i<br/>         SRDA   R4,32<br/>         D      R4,=F'3'               i/3<br/>         LTR    R4,R4                  if mod(i,3)=0<br/>         BZ     CVD<br/>         LR     R4,R6                  i<br/>         SRDA   R4,32<br/>         D      R4,=F'5'               i/5<br/>         LTR    R4,R4                  if  mod(i,5)=0<br/>         BNZ    ITERI<br/>CVD      CVD    R6,IP                  ip=p<br/>         AP     SUM,IP                 sum=sum+i<br/>ITERI    LA     R6,1(R6)               i++<br/>       ENDDO    ,                    enddo i<br/>         XDECO  R9,PG                n<br/>         MVC    PG+15(16),EM16       load mask<br/>         ED     PG+15(16),SUM        packed dec (PL8) to char (CL16)<br/>         XPRNT  PG,L'PG              print<br/>         BCT    R7,LOOPJ           enddo j<br/>         L      R13,4(0,R13)       restore previous savearea pointer<br/>         LM     R14,R12,12(R13)    restore previous context<br/>         XR     R15,R15            rc=0<br/>         BR     R14                exit<br/>SUM      DS     PL8<br/>IP       DS     PL8    \t\t <br/>EM16     DC     X'40202020202020202020202020202120'  mask CL16 15num<br/>PG       DC     CL80'123456789012\u00a0: 1234567890123456'<br/>         YREGS<br/>         END    SUM35</pre>"}, {"lang": "ALGOL 68", "loc": 26, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># returns the sum of the multiples of 3 and 5 below n #</span><br/><span class=\"kw4\">PROC</span> sum of multiples of 3 and 5 below <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> n <span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>        <span class=\"coMULTI\"># calculate the sum of the multiples of 3 below n #</span><br/>        <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> multiples of  3 <span class=\"sy1\">=</span> <span class=\"br0\">(</span> n <span class=\"sy1\">-</span> 1 <span class=\"br0\">)</span> <span class=\"kw12\">OVER</span>  3<span class=\"sy1\">;</span><br/>        <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> multiples of  5 <span class=\"sy1\">=</span> <span class=\"br0\">(</span> n <span class=\"sy1\">-</span> 1 <span class=\"br0\">)</span> <span class=\"kw12\">OVER</span>  5<span class=\"sy1\">;</span><br/>        <span class=\"kw4\">LONG</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> multiples of 15 <span class=\"sy1\">=</span> <span class=\"br0\">(</span> n <span class=\"sy1\">-</span> 1 <span class=\"br0\">)</span> <span class=\"kw12\">OVER</span> 15<span class=\"sy1\">;</span><br/>        <span class=\"br0\">(</span> <span class=\"coMULTI\"># twice the sum of multiples of  3 #</span><br/>          <span class=\"br0\">(</span>  3 <span class=\"sy1\">*</span> multiples of  3 <span class=\"sy1\">*</span> <span class=\"br0\">(</span> multiples of  3 <span class=\"sy1\">+</span> 1 <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>          <span class=\"coMULTI\"># plus twice the sum of multiples of  5 #</span><br/>        <span class=\"sy1\">+</span> <span class=\"br0\">(</span>  5 <span class=\"sy1\">*</span> multiples of  5 <span class=\"sy1\">*</span> <span class=\"br0\">(</span> multiples of  5 <span class=\"sy1\">+</span> 1 <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>          <span class=\"coMULTI\"># less twice the sum of multiples of 15 #</span><br/>        <span class=\"sy1\">-</span> <span class=\"br0\">(</span> 15 <span class=\"sy1\">*</span> multiples of 15 <span class=\"sy1\">*</span> <span class=\"br0\">(</span> multiples of 15 <span class=\"sy1\">+</span> 1 <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span> <span class=\"kw12\">OVER</span> 2<br/>    <span class=\"kw2\">END</span> <span class=\"coMULTI\"># sum of multiples of 3 and 5 below #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Sum of multiples of 3 and 5 below 1000: \"</span><br/>       <span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> sum of multiples of 3 and 5 below<span class=\"br0\">(</span> 1000 <span class=\"br0\">)</span><span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><br/>       <span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <br/>       <span class=\"br0\">)</span><br/>     <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Sum of multiples of 3 and 5 below 1e20: \"</span><br/>       <span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> sum of multiples of 3 and 5 below<span class=\"br0\">(</span> 100 000 000 000 000 000 000 <span class=\"br0\">)</span><span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><br/>       <span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <br/>       <span class=\"br0\">)</span><br/>     <span class=\"br0\">)</span></pre>"}, {"lang": "APL", "loc": 2, "block": "<pre class=\"text highlighted_source\">\u2395IO\u21900<br/>{+/((0=3|a)\u22280=5|a)/a\u2190\u2373\u2375} 1000</pre>"}, {"lang": "AppleScript", "loc": 76, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- SUM MULTIPLES OF 3 AND 5 --------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- sums of all multiples of 3 or 5 below or equal to N</span><br/><span class=\"co1\">-- for N = 10 to N = 10E8 (limit of AS integers)</span><br/>\u00a0<br/><span class=\"co1\">-- sum35Result\u00a0:: String -&gt; Int -&gt; Int -&gt; String</span><br/><span class=\"kw3\">script</span> sum35Result<br/>\u00a0<br/>    <span class=\"co1\">-- sum35\u00a0:: Int -&gt; Int</span><br/>    <span class=\"kw3\">on</span> sum35<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        sumMults<span class=\"br0\">(</span>n, <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> sumMults<span class=\"br0\">(</span>n, <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> sumMults<span class=\"br0\">(</span>n, <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> sum35<br/>\u00a0<br/>    <span class=\"co1\">-- Area under straight line between first multiple and last:</span><br/>\u00a0<br/>    <span class=\"co1\">-- sumMults\u00a0:: Int -&gt; Int -&gt; Int</span><br/>    <span class=\"kw3\">on</span> sumMults<span class=\"br0\">(</span>n, f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> n1 <span class=\"kw3\">to</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">div</span> f<br/>\u00a0<br/>        f <span class=\"sy0\">*</span> n1 <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n1 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">div</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw3\">end</span> sumMults<br/>\u00a0<br/>    <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, x, i<span class=\"br0\">)</span><br/>        a <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"10&lt;sup&gt;\"</span> <span class=\"sy0\">&amp;</span> i <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"&lt;/sup&gt; -&gt; \"</span> <span class=\"sy0\">&amp;</span> \u00ac<br/>            sum35<span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy0\">^</span> x<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"&lt;br&gt;\"</span><br/>    <span class=\"kw3\">end</span> |\u03bb|<br/><span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    foldl<span class=\"br0\">(</span>sum35Result, <span class=\"st0\">\"\"</span>, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> m &gt; n <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n <span class=\"kw1\">by</span> d<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "AutoHotkey", "loc": 35, "block": "<pre class=\"autohotkey highlighted_source\">n <span class=\"sy0\">:=</span> <span class=\"nu0\">1000</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% <span class=\"st0\">\"Sum is \"</span> <span class=\"sy0\">.</span> Sum3_5<span class=\"br0\">(</span>n<span class=\"br0\">)</span>   <span class=\"sy0\">.</span> <span class=\"st0\">\" for n = \"</span> <span class=\"sy0\">.</span> n<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% <span class=\"st0\">\"Sum is \"</span> <span class=\"sy0\">.</span> Sum3_5_b<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\" for n = \"</span> <span class=\"sy0\">.</span> n<br/>\u00a0<br/><span class=\"co1\">;Standard simple Implementation.</span><br/>Sum3_5<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tsum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a>\u00a0% n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">a_index</span></a><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> ||\u00a0!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">a_index</span></a><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\tsum<span class=\"sy0\">:=</span>sum<span class=\"sy0\">+</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_index</span></a><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> sum<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">;Translated from the C++ version.</span><br/>Sum3_5_b<span class=\"br0\">(</span> i <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tsum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> a <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span> <span class=\"nu0\">28</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> ||\u00a0!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tsum <span class=\"sy0\">+=</span> a<br/>\t\t\ts <span class=\"sy0\">:=</span> <span class=\"nu0\">30</span><br/>\t\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>s <span class=\"sy0\">&lt;</span> i<span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"sy0\">+</span>s <span class=\"sy0\">&lt;</span> i<span class=\"br0\">)</span><br/>\t\t\t\t\tsum <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>a<span class=\"sy0\">+</span>s<span class=\"br0\">)</span><br/>\t\t\t\ts<span class=\"sy0\">+=</span><span class=\"nu0\">30</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\ta<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> sum<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 9, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f</span><br/><span class=\"br0\">{</span> <br/>\tn = <span class=\"re0\">$1</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span>;<br/>\t<span class=\"kw5\">print</span> sum<span class=\"br0\">(</span>n,<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy3\">+</span>sum<span class=\"br0\">(</span>n,<span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy3\">-</span>sum<span class=\"br0\">(</span>n,<span class=\"nu0\">15</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> sum<span class=\"br0\">(</span>n,d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tm = <span class=\"kw4\">int</span><span class=\"br0\">(</span>n<span class=\"sy3\">/</span>d<span class=\"br0\">)</span>;<br/>\t<span class=\"kw6\">return</span> <span class=\"br0\">(</span>d<span class=\"sy3\">*</span>m<span class=\"sy3\">*</span><span class=\"br0\">(</span>m<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 13, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"kw1\">Declare</span> <span class=\"kw1\">function</span> mulsum35<span class=\"br0\">(</span>n <span class=\"kw1\">as</span> <span class=\"kw1\">integer</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"kw1\">integer</span><br/><span class=\"kw1\">Function</span> mulsum35<span class=\"br0\">(</span>n <span class=\"kw1\">as</span> <span class=\"kw1\">integer</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"kw1\">integer</span><br/>    <span class=\"kw1\">Dim</span> s <span class=\"kw1\">as</span> <span class=\"kw1\">integer</span><br/>    <span class=\"kw1\">For</span> i <span class=\"kw1\">as</span> <span class=\"kw1\">integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n - <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">If</span> <span class=\"br0\">(</span>i <span class=\"kw1\">mod</span> <span class=\"nu0\">3</span> = <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>i <span class=\"kw1\">mod</span> <span class=\"nu0\">5</span> = <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            s += i<br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">Next</span> i<br/>    <span class=\"kw1\">Return</span> s<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/><span class=\"kw1\">Print</span> mulsum35<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "bc", "loc": 13, "block": "<pre class=\"text highlighted_source\">define t(n, f) {<br/>    auto m<br/>\u00a0<br/>    m = (n - 1) / f<br/>    return(f * m * (m + 1) / 2)<br/>}<br/>\u00a0<br/>define s(l) {<br/>    return(t(l, 3) + t(l, 5) - t(l, 15))<br/>}<br/>\u00a0<br/>s(1000)<br/>s(10 ^ 20)</pre>"}, {"lang": "Befunge", "loc": 3, "block": "<pre class=\"text highlighted_source\">&amp;1-:!#v_:3%#v_     &gt;:&gt;#<br/>      &gt;+\\:v &gt;:5%#v_^<br/>  @.$_^#! &lt;      &gt;   ^</pre>"}, {"lang": "C", "loc": 24, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> sum35<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> limit<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> limit<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            sum <span class=\"sy0\">+=</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>argv<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> limit<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>argc <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        limit <span class=\"sy0\">=</span> strtoull<span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> NULL<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span><br/>        limit <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lld<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> sum35<span class=\"br0\">(</span>limit<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 42, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Numerics</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaCode<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            List<span class=\"sy0\">&lt;</span>BigInteger<span class=\"sy0\">&gt;</span> candidates <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>BigInteger<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BigInteger<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"nu0\">1000</span>, <span class=\"nu0\">100000</span>, <span class=\"nu0\">10000000</span>, <span class=\"nu0\">10000000000</span>, <span class=\"nu0\">1000000000000000</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            candidates<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>BigInteger<span class=\"sy0\">.</span><span class=\"me1\">Parse</span><span class=\"br0\">(</span><span class=\"st0\">\"100000000000000000000\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>BigInteger candidate <span class=\"kw1\">in</span> candidates<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                BigInteger c <span class=\"sy0\">=</span> candidate <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                BigInteger answer3 <span class=\"sy0\">=</span> GetSumOfNumbersDivisibleByN<span class=\"br0\">(</span>c, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                BigInteger answer5 <span class=\"sy0\">=</span> GetSumOfNumbersDivisibleByN<span class=\"br0\">(</span>c, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                BigInteger answer15 <span class=\"sy0\">=</span> GetSumOfNumbersDivisibleByN<span class=\"br0\">(</span>c, <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"The sum of numbers divisible by 3 or 5 between 1 and {0} is {1}\"</span>, c, answer3 <span class=\"sy0\">+</span> answer5 <span class=\"sy0\">-</span> answer15<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> BigInteger GetSumOfNumbersDivisibleByN<span class=\"br0\">(</span>BigInteger candidate, <span class=\"kw4\">uint</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            BigInteger largest <span class=\"sy0\">=</span> candidate<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>largest <span class=\"sy0\">%</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                largest<span class=\"sy0\">--;</span><br/>            BigInteger totalCount <span class=\"sy0\">=</span> <span class=\"br0\">(</span>largest <span class=\"sy0\">/</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            BigInteger pairCount <span class=\"sy0\">=</span> totalCount <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">bool</span> unpairedNumberOnFoldLine <span class=\"sy0\">=</span> <span class=\"br0\">(</span>totalCount <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            BigInteger pairSum <span class=\"sy0\">=</span> largest <span class=\"sy0\">+</span> n<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> pairCount <span class=\"sy0\">*</span> pairSum <span class=\"sy0\">+</span> <span class=\"br0\">(</span>unpairedNumberOnFoldLine <span class=\"sy0\">?</span> pairSum <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 44, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> bigInt<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> m35<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> doIt<span class=\"br0\">(</span> bigInt i <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tbigInt sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> bigInt a <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> a <span class=\"sy1\">&lt;</span> i<span class=\"sy4\">;</span> a<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> a <span class=\"sy2\">%</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> a <span class=\"sy2\">%</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> a<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Sum is \"</span> <span class=\"sy1\">&lt;&lt;</span> sum <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" for n = \"</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// this method uses less than half iterations than the first one</span><br/>    <span class=\"kw4\">void</span> doIt_b<span class=\"br0\">(</span> bigInt i <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tbigInt sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> bigInt a <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> a <span class=\"sy1\">&lt;</span> <span class=\"nu0\">28</span><span class=\"sy4\">;</span> a<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> a <span class=\"sy2\">%</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> a <span class=\"sy2\">%</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tsum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> a<span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> bigInt s <span class=\"sy1\">=</span> <span class=\"nu0\">30</span><span class=\"sy4\">;</span> s <span class=\"sy1\">&lt;</span> i<span class=\"sy4\">;</span> s <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"nu0\">30</span> <span class=\"br0\">)</span><br/>\t\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> a <span class=\"sy2\">+</span> s <span class=\"sy1\">&lt;</span> i <span class=\"br0\">)</span> sum <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span> a <span class=\"sy2\">+</span> s <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Sum is \"</span> <span class=\"sy1\">&lt;&lt;</span> sum <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" for n = \"</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    m35 m<span class=\"sy4\">;</span> m.<span class=\"me1\">doIt</span><span class=\"br0\">(</span> <span class=\"nu0\">1000</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"pause\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 6, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> sum<span class=\"sy0\">-</span>mults <span class=\"br0\">[</span>n <span class=\"sy0\">&amp;</span> mults<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>pred <span class=\"br0\">(</span><span class=\"kw1\">apply</span> some<span class=\"sy0\">-</span><span class=\"kw1\">fn</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span>mod x <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> mults<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> pred<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> <span class=\"sy0\">+</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>sum<span class=\"sy0\">-</span>mults <span class=\"nu0\">1000</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 25, "block": "<pre class=\"cobol highlighted_source\">\u00a0<br/><span class=\"kw3\">Identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">Program-id</span><span class=\"sy0\">.</span> three-five-<span class=\"kw4\">sum</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">Data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">Working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span> ws-the-<span class=\"kw3\">limit</span>  <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"nu0\">1000</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span> ws-the-<span class=\"kw3\">number</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span> ws-the-<span class=\"kw4\">sum</span>    <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span> ws-sum-out    <span class=\"kw3\">pic</span> z<span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">Procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>Main-<span class=\"kw3\">program</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">Perform</span> Do-<span class=\"kw4\">sum</span><br/>        <span class=\"kw2\">varying</span> ws-the-<span class=\"kw3\">number</span> <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span> <br/>        <span class=\"kw2\">until</span> ws-the-<span class=\"kw3\">number</span> <span class=\"sy0\">=</span> ws-the-<span class=\"kw3\">limit</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">Move</span> ws-the-<span class=\"kw4\">sum</span> <span class=\"kw2\">to</span> ws-sum-out<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">Display</span> <span class=\"st0\">\"Sum = \"</span> ws-sum-out<span class=\"sy0\">.</span><br/>    End-<span class=\"kw3\">run</span><span class=\"sy0\">.</span><br/>\u00a0<br/>Do-<span class=\"kw4\">sum</span><span class=\"sy0\">.</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw3\">function</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>ws-the-<span class=\"kw3\">number</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw3\">zero</span><br/>       <span class=\"kw3\">or</span> <span class=\"kw3\">function</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>ws-the-<span class=\"kw3\">number</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw3\">zero</span><br/>       <span class=\"kw3\">then</span> <span class=\"kw2\">add</span> ws-the-<span class=\"kw3\">number</span> <span class=\"kw2\">to</span> ws-the-<span class=\"kw4\">sum</span><span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 4, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sum-<span class=\"nu0\">3</span>-<span class=\"nu0\">5</span>-slow <span class=\"br0\">(</span>limit<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for x below limit<br/>        <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span><span class=\"kw1\">rem</span> x <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span><span class=\"kw1\">rem</span> x <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          sum x<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Component Pascal", "loc": 28, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> Sum3_5;<br/><span class=\"kw1\">IMPORT</span> StdLog<span class=\"sy0\">,</span> Strings<span class=\"sy0\">,</span> Args;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> DoSum<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">VAR</span><br/>\ti<span class=\"sy0\">,</span>sum<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tsum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>i &lt; n<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t<span class=\"kw1\">IF</span>  <span class=\"br0\">(</span>i <span class=\"kw1\">MOD</span> <span class=\"nu0\">3</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">OR</span> <span class=\"br0\">(</span>i <span class=\"kw1\">MOD</span> <span class=\"nu0\">5</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw3\">INC</span><span class=\"br0\">(</span>sum<span class=\"sy0\">,</span>i<span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">RETURN</span> sum<br/><span class=\"kw1\">END</span> DoSum;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Compute<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\tparams<span class=\"sy0\">:</span> Args.<span class=\"me1\">Params</span>;<br/>\ti<span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>res<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tArgs.<span class=\"me1\">Get</span><span class=\"br0\">(</span>params<span class=\"br0\">)</span>;<br/>\tStrings.<span class=\"me1\">StringToInt</span><span class=\"br0\">(</span>params.<span class=\"me1\">args</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>res<span class=\"br0\">)</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Sum: \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>DoSum<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>; StdLog.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> Compute;<br/>\u00a0<br/><span class=\"kw1\">END</span> Sum3_5.<br/>\u00a0</pre>"}, {"lang": "Crystal", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"kw1\">def</span> sum_3_5_muliples<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">0</span>...<span class=\"me1\">n</span><span class=\"br0\">)</span><br/>    .<span class=\"kw3\">select</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> i <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> == <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> i <span class=\"sy0\">%</span> <span class=\"nu0\">5</span> == <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>    .<span class=\"me1\">reduce</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>acc, i<span class=\"sy0\">|</span> acc <span class=\"sy0\">+</span> i <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> sum_3_5_muliples<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/><span class=\"co1\"># =&gt; 233168</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 18, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">bigint</span><span class=\"sy0\">;</span><br/>\u00a0<br/>BigInt sum35<span class=\"br0\">(</span><span class=\"kw2\">in</span> BigInt n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> BigInt sumMul<span class=\"br0\">(</span><span class=\"kw2\">in</span> BigInt n<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> f<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> n1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">==</span>n<span class=\"sy0\">?</span>n<span class=\"sy0\">:</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> f<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> f <span class=\"sy0\">*</span> n1 <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n1 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> sumMul<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> sumMul<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> sumMul<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"nu0\">1</span>.<span class=\"me1\">BigInt</span>.<span class=\"me1\">sum35</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"nu0\">3</span>.<span class=\"me1\">BigInt</span>.<span class=\"me1\">sum35</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"nu0\">5</span>.<span class=\"me1\">BigInt</span>.<span class=\"me1\">sum35</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"nu0\">1000</span>.<span class=\"me1\">BigInt</span>.<span class=\"me1\">sum35</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">10</span>.<span class=\"me1\">BigInt</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span>.<span class=\"me1\">sum35</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 7, "block": "<pre class=\"text highlighted_source\">sum-divisible n:<br/>\t0<br/>\tfor i range 1 -- n:<br/>\t\tif or = 0\u00a0% i 3 = 0\u00a0% i 5:<br/>\t\t\t+ i<br/>\u00a0<br/>!. sum-divisible 1000</pre>"}, {"lang": "Delphi", "loc": 22, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> sum35<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  sum<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> isMultipleOf<span class=\"br0\">(</span>aNumber<span class=\"sy1\">,</span> aDivisor<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> aNumber <span class=\"kw1\">mod</span> aDivisor <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  sum <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">to</span> <span class=\"nu0\">999</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">if</span> isMultipleOf<span class=\"br0\">(</span>i<span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> isMultipleOf<span class=\"br0\">(</span>i<span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      sum <span class=\"sy1\">:</span><span class=\"sy3\">=</span> sum <span class=\"sy3\">+</span> i<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>sum<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "EchoLisp", "loc": 35, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'math<span class=\"br0\">)</span> <span class=\"co1\">;; divides?</span><br/><span class=\"br0\">(</span>lib 'sequences<span class=\"br0\">)</span> <span class=\"co1\">;; sum/when</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>task n  <span class=\"br0\">(</span>k <span class=\"nu0\">3</span><span class=\"br0\">)</span>  <span class=\"br0\">(</span>p <span class=\"nu0\">5</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span>when <span class=\"br0\">(</span><span class=\"sy0\">!=</span> <span class=\"br0\">(</span><span class=\"kw1\">gcd</span> k p<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>error <span class=\"st0\">\"expected coprimes\"</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> k p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"sy0\">-</span> <br/>\t \t<span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>sum<span class=\"sy0\">/</span>mults n k<span class=\"br0\">)</span> <span class=\"br0\">(</span>sum<span class=\"sy0\">/</span>mults n p<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; add multiples of k , multiples of p</span><br/>\t \t<span class=\"br0\">(</span>sum<span class=\"sy0\">/</span>mults n <span class=\"br0\">(</span><span class=\"sy0\">*</span> k p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; remove multiples of k * p</span><br/>\u00a0<br/><span class=\"co1\">;; using sequences</span><br/><span class=\"co1\">;; sum of multiples of k &lt; n </span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>sum<span class=\"sy0\">/</span>mults n k<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>sum<span class=\"sy0\">/</span>when <span class=\"br0\">(</span>rcurry divides? k<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> .. n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>task <span class=\"nu0\">1000</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">233168</span><br/>\u00a0<br/><span class=\"co1\">;; using simple arithmetic - \ud83c\udfa9 young Gauss formula</span><br/><span class=\"co1\">;; sum of multiples of k &lt; n  = </span><br/><span class=\"co1\">;; k*m*(m+1)/2 where m = floor(n/k)</span><br/><span class=\"br0\">(</span>lib 'bigint<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>sum<span class=\"sy0\">/</span>mults n k<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> n <span class=\"br0\">(</span><span class=\"kw1\">quotient</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> n<span class=\"br0\">)</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> k n <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> n <span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>task 1e20 <span class=\"nu0\">3</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"nu0\">2333333333333333333316666666666666666668</span><br/>\u00a0<br/><span class=\"br0\">(</span>task <span class=\"nu0\">1000</span> <span class=\"nu0\">42</span> <span class=\"nu0\">666</span><span class=\"br0\">)</span><br/>    \u274c error: expected coprimes <span class=\"br0\">(</span><span class=\"nu0\">42</span> <span class=\"nu0\">666</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 30, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/>\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span><br/>\u00a0<br/>\tmake<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tio.<span class=\"me1\">put_integer</span> <span class=\"br0\">(</span>sum_multiples <span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tsum_multiples <span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\t<span class=\"co1\">-- Sum of all positive multiples of 3 or 5 below 'n'.</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tacross<br/>\t\t\t\t<span class=\"nu0\">1</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> c<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">if</span> c.<span class=\"me1\">item</span> \\\\ <span class=\"nu0\">3</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">or</span> c.<span class=\"me1\">item</span> \\\\ <span class=\"nu0\">5</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">Result</span> <span class=\"sy0\">+</span> c.<span class=\"me1\">item</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 2, "block": "<pre class=\"text highlighted_source\">iex(1)&gt; Enum.filter(0..1000-1, fn x -&gt; rem(x,3)==0 or rem(x,5)==0 end) |&gt; Enum.sum<br/>233168</pre>"}, {"lang": "Emacs Lisp", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(defun sum-3-5 (ls)<br/>  (apply '+ (mapcar<br/>\t     '(lambda (x) (if (or (= 0 (% x 3) ) (= 0 (% x 5) ))<br/>\t\t\t      x 0) )<br/>\t\t\tls) ))<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 8, "block": "<pre class=\"erlang highlighted_source\"><span class=\"re3\">sum_3_5</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"kw4\">is_number</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">sum_3_5</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">round</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">sum_3_5</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Total</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">3</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Total</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sum_3_5</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Total</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">X</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">3</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">orelse</span> <span class=\"re5\">X</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">5</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re3\">sum_3_5</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Total</span><span class=\"sy3\">+</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sum_3_5</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Total</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re3\">sum_3_5</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Total</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~B~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re3\">sum_3_5</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "F#", "loc": 14, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> sum35 n <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">init</span> n <span class=\"br0\">(</span>id<span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">reduce</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> sum i <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> i <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> || i <span class=\"sy0\">%</span> <span class=\"nu0\">5</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> sum <span class=\"sy0\">+</span> i <span class=\"kw1\">else</span> sum<span class=\"br0\">)</span><br/>\u00a0<br/>printfn <span class=\"st0\">\"%d\"</span> <span class=\"br0\">(</span>sum35 <span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>printfn <span class=\"st0\">\"----------\"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> sumUpTo <span class=\"br0\">(</span>n\u00a0: bigint<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> 1I<span class=\"br0\">)</span> <span class=\"sy0\">/</span> 2I<br/>\u00a0<br/><span class=\"kw1\">let</span> sumMultsBelow k n <span class=\"sy0\">=</span> k <span class=\"sy0\">*</span> <span class=\"br0\">(</span>sumUpTo <span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span>1I<span class=\"br0\">)</span><span class=\"sy0\">/</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> sum35fast n <span class=\"sy0\">=</span> <span class=\"br0\">(</span>sumMultsBelow 3I n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>sumMultsBelow 5I n<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>sumMultsBelow 15I n<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">30</span> <span class=\"kw1\">do</span> <span class=\"kw1\">yield</span> i<span class=\"br0\">]</span><br/><span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i <span class=\"sy0\">-&gt;</span> printfn <span class=\"st0\">\"%A\"</span> <span class=\"br0\">(</span>sum35fast <span class=\"br0\">(</span>bigint.<span class=\"me1\">Pow</span><span class=\"br0\">(</span>10I, i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 22, "block": "<pre class=\"text highlighted_source\">USING: formatting kernel math math.functions sequences<br/>tools.time\u00a0;<br/>IN: rosetta-code.sum35<br/>\u00a0<br/>: {x+y-z} ( {x,y,z} -- x+y-z ) first3 [ + ] dip -\u00a0; <br/>\u00a0<br/>: range-length ( limit multiple -- len ) [ 1 - ] dip /i\u00a0;<br/>\u00a0<br/>: triangular ( limit multiple -- sum )<br/>    [ range-length ] [ nip over 1 + ] 2bi * * 2 /\u00a0;<br/>\u00a0<br/>: sum35 ( limit -- sum )<br/>    { 3 5 15 } [ triangular ] with map {x+y-z}\u00a0;<br/>\u00a0<br/>: msg ( limit sum -- )<br/>    \"The sum of multiples of 3 or 5 below\u00a0%d is\u00a0%d.\\n\" printf\u00a0;<br/>\u00a0<br/>: output ( limit -- ) dup sum35 msg\u00a0;<br/>\u00a0<br/>: main ( -- ) [ 1000 10 20 ^ [ output ] <a class=\"__cf_email__\" data-cfemail=\"4d2f240d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> ] time\u00a0;<br/>\u00a0<br/>MAIN: main</pre>"}, {"lang": "FBSL", "loc": 15, "block": "<pre class=\"qbasic highlighted_source\">#APPTYPE CONSOLE<br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> sumOfThreeFiveMultiples<span class=\"br0\">(</span>n <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"br0\">)</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> sum <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>    <span class=\"kw1\">FOR</span> <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qcknot.shtml\"><span class=\"kw3\">NOT</span></a> <span class=\"br0\">(</span>i <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckor.shtml\"><span class=\"kw3\">OR</span></a> <span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qcknot.shtml\"><span class=\"kw3\">NOT</span></a> <span class=\"br0\">(</span>i <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>            INCR<span class=\"br0\">(</span>sum<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>    <span class=\"kw1\">NEXT</span><br/>    <span class=\"kw1\">RETURN</span> sum<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> sumOfThreeFiveMultiples<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>PAUSE<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 12, "block": "<pre class=\"text highlighted_source\">: main ( n -- )<br/>  0 swap<br/>  3 do<br/>    i 3 mod 0= if<br/>      i +<br/>    else i 5 mod 0= if<br/>      i +<br/>    then then<br/>  loop<br/>  .\u00a0;<br/>\u00a0<br/>1000 main    \\ 233168  ok</pre>"}, {"lang": "Fortran", "loc": 41, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/>      <span class=\"kw3\">INTEGER</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span> <span class=\"kw1\">FUNCTION</span> SUMI<span class=\"br0\">(</span>N<span class=\"br0\">)</span>\t<span class=\"co1\">!Sums the integers 1 to N inclusive.</span><br/><span class=\"co1\">Calculates as per the young Gauss: N*(N + 1)/2 = 1 + 2 + 3 + ... + N.</span><br/>       <span class=\"kw3\">INTEGER</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span> N\t<span class=\"co1\">!The number. Possibly large.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">MOD</span><span class=\"br0\">(</span>N,<span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!So, I'm worried about overflow with N*(N + 1)</span><br/>          SUMI <span class=\"sy0\">=</span> N<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>N <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!But since N is even, N/2 is good.</span><br/>         <span class=\"kw1\">ELSE</span>\t\t\t<span class=\"co1\">!Otherwise, if N is odd,</span><br/>          SUMI <span class=\"sy0\">=</span> <span class=\"br0\">(</span>N <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>N\t\t<span class=\"co1\">!(N + 1) must be even.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!Either way, the /2 reduces the result.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> SUMI\t\t<span class=\"co1\">!So overflow of intermediate results is avoided.</span><br/>\u00a0<br/>      <span class=\"kw3\">INTEGER</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span> <span class=\"kw1\">FUNCTION</span> SUMF<span class=\"br0\">(</span>N,F<span class=\"br0\">)</span>\t<span class=\"co1\">!Sum of numbers up to N divisible by F.</span><br/>       <span class=\"kw3\">INTEGER</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span> N,F\t\t<span class=\"co1\">!The selection.</span><br/>       <span class=\"kw3\">INTEGER</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span> L\t\t<span class=\"co1\">!The last in range. N itself is excluded.</span><br/>       <span class=\"kw3\">INTEGER</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span> SUMI\t\t<span class=\"co1\">!Known type of the function.</span><br/>        L <span class=\"sy0\">=</span> <span class=\"br0\">(</span>N <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>F\t\t<span class=\"co1\">!Truncates fractional parts.</span><br/>        SUMF <span class=\"sy0\">=</span> F<span class=\"sy0\">*</span>SUMI<span class=\"br0\">(</span>L<span class=\"br0\">)</span>\t<span class=\"co1\">!3 + 6 + 9 + ... = 3(1 + 2 + 3 + ...)</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> SUMF\t\t<span class=\"co1\">!Could just put SUMF = F*SUMI((N - 1)/F).</span><br/>\u00a0<br/>      <span class=\"kw3\">INTEGER</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span> <span class=\"kw1\">FUNCTION</span> SUMBFI<span class=\"br0\">(</span>N<span class=\"br0\">)</span>\t<span class=\"co1\">!Brute force and ignorance summation.</span><br/>       <span class=\"kw3\">INTEGER</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span> N\t<span class=\"co1\">!The number.</span><br/>       <span class=\"kw3\">INTEGER</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span> I,S\t<span class=\"co1\">!Stepper and counter.</span><br/>        S <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\">!So, here we go.</span><br/>        <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>,N <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\t<span class=\"co1\">!N itself is not a candidate.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">MOD</span><span class=\"br0\">(</span>I,<span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.0 <span class=\"kw2\">.<span class=\"me1\">OR</span>.</span> <span class=\"kw4\">MOD</span><span class=\"br0\">(</span>I,<span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"me1\">EQ</span>.0<span class=\"br0\">)</span> S <span class=\"sy0\">=</span> S <span class=\"sy0\">+</span> I\t<span class=\"co1\">!Whee!</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t<span class=\"co1\">!On to the next.</span><br/>        SUMBFI <span class=\"sy0\">=</span> S\t\t<span class=\"co1\">!The result.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> SUMBFI\t<span class=\"co1\">!Oh well, computers are fast these days.</span><br/>\u00a0<br/>      <span class=\"kw3\">INTEGER</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span> SUMF,SUMBFI\t<span class=\"co1\">!Known type of the function.</span><br/>      <span class=\"kw3\">INTEGER</span><span class=\"sy0\">*</span><span class=\"nu0\">8</span> N\t<span class=\"co1\">!The number.</span><br/>      WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Sum multiples of 3 and 5 up to N\"</span><br/>   <span class=\"nu0\">10</span> WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">11</span><span class=\"br0\">)</span>\t\t<span class=\"co1\">!Ask nicely.</span><br/>   <span class=\"nu0\">11</span> FORMAT <span class=\"br0\">(</span><span class=\"st0\">\"Specify N: \"</span>,$<span class=\"br0\">)</span>\t<span class=\"co1\">!Obviously, the $ says 'stay on this line'.</span><br/>      READ <span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> N\t\t<span class=\"co1\">!If blank input is given, further input will be requested.</span><br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>N.<span class=\"me1\">LE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">STOP</span>\t\t<span class=\"co1\">!Good enough.</span><br/>      WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"By Gauss:\"</span>,SUMF<span class=\"br0\">(</span>N,<span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> SUMF<span class=\"br0\">(</span>N,<span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> SUMF<span class=\"br0\">(</span>N,<span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>      WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"BFI sum\u00a0:\"</span>,SUMBFI<span class=\"br0\">(</span>N<span class=\"br0\">)</span>\t\t<span class=\"co1\">!This could be a bit slow.</span><br/>      <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span>\t\t\t<span class=\"co1\">!Have another go.</span><br/>      <span class=\"kw1\">END</span>\t<span class=\"co1\">!So much for that.</span><br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 15, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> sum35 <span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>  <span class=\"kw1\">If</span> n = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> i, sum = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span>i <span class=\"kw1\">Mod</span> <span class=\"nu0\">3</span> = <span class=\"nu0\">0</span><span class=\"br0\">)</span> OrElse <span class=\"br0\">(</span>i <span class=\"kw1\">Mod</span> <span class=\"nu0\">5</span> = <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span> sum += i<br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> sum <br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Sum of positive integers below 1000 divisible by 3 or 5 is\u00a0: \"</span>; sum35<span class=\"br0\">(</span><span class=\"nu0\">999</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 22, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>s35<span class=\"sy1\">(</span><span class=\"nu0\">1000</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> s35<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    n<span class=\"sy2\">--</span><br/>    threes <span class=\"sy2\">:=</span> n <span class=\"sy3\">/</span> <span class=\"nu0\">3</span><br/>    fives <span class=\"sy2\">:=</span> n <span class=\"sy3\">/</span> <span class=\"nu0\">5</span><br/>    fifteen <span class=\"sy2\">:=</span> n <span class=\"sy3\">/</span> <span class=\"nu0\">15</span><br/>\u00a0<br/>    threes <span class=\"sy2\">=</span> <span class=\"nu0\">3</span> <span class=\"sy3\">*</span> threes <span class=\"sy3\">*</span> <span class=\"sy1\">(</span>threes <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    fives <span class=\"sy2\">=</span> <span class=\"nu0\">5</span> <span class=\"sy3\">*</span> fives <span class=\"sy3\">*</span> <span class=\"sy1\">(</span>fives <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    fifteen <span class=\"sy2\">=</span> <span class=\"nu0\">15</span> <span class=\"sy3\">*</span> fifteen <span class=\"sy3\">*</span> <span class=\"sy1\">(</span>fifteen <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>\u00a0<br/>    n <span class=\"sy2\">=</span> <span class=\"sy1\">(</span>threes <span class=\"sy3\">+</span> fives <span class=\"sy3\">-</span> fifteen<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> n<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 2, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> sumMul <span class=\"sy0\">=</span> <span class=\"br0\">{</span> n, f <span class=\"sy0\">-&gt;</span> <a href=\"http://www.google.de/search?as_q=BigInteger&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigInteger</span></a> n1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> / f<span class=\"sy0\">;</span> f <span class=\"sy0\">*</span> n1 <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n1 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> / <span class=\"nu0\">2</span> <span class=\"br0\">}</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> sum35 <span class=\"sy0\">=</span> <span class=\"br0\">{</span> sumMul<span class=\"br0\">(</span>it, <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> sumMul<span class=\"br0\">(</span>it, <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> sumMul<span class=\"br0\">(</span>it, <span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 31, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>nub<span class=\"br0\">)</span><br/>\u00a0<br/>sum35 <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> a<br/>sum35 n <span class=\"sy0\">=</span> sumMul n <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> sumMul n <span class=\"nu0\">5</span> <span class=\"sy0\">-</span> sumMul n <span class=\"nu0\">15</span><br/>\u00a0<br/>sumMul <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> a<br/>sumMul n f <span class=\"sy0\">=</span> f <span class=\"sy0\">*</span> n1 <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n1 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">where</span><br/>    n1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` f<br/>\u00a0<br/><span class=\"co1\">-- Functions below are for variable length inputs</span><br/>\u00a0<br/>pairLCM <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>pairLCM <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>pairLCM <span class=\"br0\">(</span>x:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lcm\"><span class=\"kw3\">lcm</span></a> x <span class=\"sy0\">&lt;$&gt;</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">++</span> pairLCM xs<br/>\u00a0<br/>sumMulS <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> a<br/>sumMulS <span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>sumMulS n s <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"br0\">(</span>sumMul n <span class=\"sy0\">&lt;$&gt;</span> ss<span class=\"br0\">)</span> <span class=\"sy0\">-</span> sumMulS n <span class=\"br0\">(</span>pairLCM ss<span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    ss <span class=\"sy0\">=</span> nub s<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a><br/>    <span class=\"br0\">[</span> sum35 <span class=\"nu0\">1000</span><br/>    <span class=\"sy0\">,</span> sum35 <span class=\"nu0\">100000000000000000000000000000000</span><br/>    <span class=\"sy0\">,</span> sumMulS <span class=\"nu0\">1000</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>    <span class=\"sy0\">,</span> sumMulS <span class=\"nu0\">10000000</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 8, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    n <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"kw4\">integer</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span>sum<span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>sum<span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>sum<span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> sum<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>m<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> m<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy0\">/</span>m<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>n<span class=\"sy0\">/</span>m<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 5, "block": "<pre class=\"j highlighted_source\">\u00a0<br/>mp =: $:~\u00a0:<span class=\"sy0\">(</span>+/ .*<span class=\"sy0\">)</span>  <span class=\"co1\">NB. matrix product</span><br/>f =: <span class=\"sy0\">(</span>mp <span class=\"nu0\">0</span> = [: */ <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> |/ ]<span class=\"sy0\">)</span>@:i.<br/>assert <span class=\"nu0\">233168</span> -: f <span class=\"nu0\">1000</span>   <span class=\"co1\">NB.  ******************  THIS IS THE ANSWER FOR 1000</span><br/>\u00a0</pre>"}, {"lang": "JavaScript", "loc": 1, "block": "<pre class=\"javascript highlighted_source\"> <span class=\"kw4\">Number</span>.<span class=\"me1\">MAX_SAFE_INTEGER</span></pre>"}, {"lang": "Java", "loc": 12, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">class</span> SumMultiples <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">long</span> getSum<span class=\"br0\">(</span><span class=\"kw4\">long</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">long</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> i <span class=\"sy0\">%</span> <span class=\"nu0\">5</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> sum <span class=\"sy0\">+=</span> i<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>getSum<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>def sum_multiples(d):<br/> ((./d) | floor) |  (d * . * (.+1))/2\u00a0;<br/>\u00a0<br/># Sum of multiples of a or b that are less than . (the input)<br/>def task(a;b):<br/> . - 1<br/> | sum_multiples(a) + sum_multiples(b) - sum_multiples(a*b);</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">multsum(n, m, lim) = sum(0:n:lim-1) + sum(0:m:lim-1) - sum(0:lcm(n,m):lim-1)</pre>"}, {"lang": "Kotlin", "loc": 31, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">math</span>.<span class=\"me1\">BigInteger</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> big2  <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> big3  <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> big5  <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> big15 <span class=\"sy0\">=</span> big3 <span class=\"sy0\">*</span> big5<br/>\u00a0<br/>fun sum35<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> until n<span class=\"br0\">)</span>.<span class=\"me1\">filter</span> <span class=\"br0\">{</span> it <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> || it <span class=\"sy0\">%</span> <span class=\"nu0\">5</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun sum35<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> BigInteger<span class=\"br0\">)</span><span class=\"sy0\">:</span> BigInteger <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nn    <span class=\"sy0\">=</span> n - BigInteger.<span class=\"me1\">ONE</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> num3  <span class=\"sy0\">=</span> nn / big3<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> end3  <span class=\"sy0\">=</span> num3 <span class=\"sy0\">*</span> big3<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sum3  <span class=\"sy0\">=</span> <span class=\"br0\">(</span>big3 + end3<span class=\"br0\">)</span> <span class=\"sy0\">*</span> num3 / big2<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> num5  <span class=\"sy0\">=</span> nn / big5<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> end5  <span class=\"sy0\">=</span> num5 <span class=\"sy0\">*</span> big5<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sum5  <span class=\"sy0\">=</span> <span class=\"br0\">(</span>big5 + end5<span class=\"br0\">)</span> <span class=\"sy0\">*</span> num5 / big2<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> num15 <span class=\"sy0\">=</span> nn / big15<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> end15 <span class=\"sy0\">=</span> num15 <span class=\"sy0\">*</span> big15<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sum15 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>big15 + end15<span class=\"br0\">)</span> <span class=\"sy0\">*</span> num15 / big2<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> sum3 + sum5 - sum15<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The sum of multiples of 3 or 5 below 1000 is ${sum35(1000)}\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> big100k <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy0\">_</span>000L<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> e20 <span class=\"sy0\">=</span> big100k <span class=\"sy0\">*</span> big100k <span class=\"sy0\">*</span> big100k <span class=\"sy0\">*</span> big100k<br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The sum of multiples of 3 or 5 below 1e20 is ${sum35(e20)}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 9, "block": "<pre class=\"text highlighted_source\">local(limit = 1)<br/>while(#limit &lt;= 100000) =&gt; {^<br/>\tlocal(s = 0)<br/>\tloop(-from=3,-to=#limit-1) =&gt; {<br/>\t\tnot (loop_count\u00a0% 3) || not (loop_count\u00a0% 5)\u00a0? #s += loop_count<br/>\t}<br/>\t'The sum of multiples of 3 or 5 between 1 and '+(#limit-1)+' is: '+#s+'\\r'<br/>\t#limit = integer(#limit-&gt;asString + '0')<br/>^}</pre>"}, {"lang": "Limbo", "loc": 73, "block": "<pre class=\"text highlighted_source\">implement Sum3and5;<br/>\u00a0<br/>include \"sys.m\"; sys: Sys;<br/>include \"draw.m\";<br/>include \"ipints.m\"; ipints: IPints;<br/>\tIPint: import ipints;<br/>\u00a0<br/>Sum3and5: module {<br/>\tinit: fn(nil: ref Draw-&gt;Context, args: list of string);<br/>};<br/>\u00a0<br/>ints: array of ref IPint;<br/>\u00a0<br/>init(nil: ref Draw-&gt;Context, args: list of string)<br/>{<br/>\tsys = load Sys Sys-&gt;PATH;<br/>\tipints = load IPints IPints-&gt;PATH;<br/>\u00a0<br/>\t# We use 1, 2, 3, 5, and 15:<br/>\tints = array[16] of ref IPint;<br/>\tfor(i\u00a0:= 0; i &lt; len ints; i++)<br/>\t\tints[i] = IPint.inttoip(i);<br/>\u00a0<br/>\targs = tl args;<br/>\twhile(args\u00a0!= nil) {<br/>\t\th\u00a0:= hd args;<br/>\t\targs = tl args;<br/>\t\t# If it's big enough that the result might not<br/>\t\t# fit inside a big, we use the IPint version.<br/>\t\tif(len h &gt; 9) {<br/>\t\t\tsys-&gt;print(\"%s\\n\", isum3to5(IPint.strtoip(h, 10)).iptostr(10));<br/>\t\t} else {<br/>\t\t\tsys-&gt;print(\"%bd\\n\", sum3to5(big h));<br/>\t\t}<br/>\t}<br/>}<br/>\u00a0<br/>triangle(n: big): big<br/>{<br/>\treturn((n * (n + big 1)) / big 2);<br/>}<br/>\u00a0<br/>sum_multiples(n: big, limit: big): big<br/>{<br/>\treturn(n * triangle((limit - big 1) / n));<br/>}<br/>\u00a0<br/>sum3to5(limit: big): big<br/>{<br/>\treturn(<br/>\t\tsum_multiples(big 3, limit) +<br/>\t\tsum_multiples(big 5, limit) -<br/>\t\tsum_multiples(big 15, limit));<br/>}<br/>\u00a0<br/>itriangle(n: ref IPint): ref IPint<br/>{<br/>\treturn n.mul(n.add(ints[1])).div(ints[2]).t0;<br/>}<br/>\u00a0<br/>isum_multiples(n: ref IPint, limit: ref IPint): ref IPint<br/>{<br/>\treturn n.mul(itriangle(limit.sub(ints[1]).div(n).t0));<br/>}<br/>\u00a0<br/>isum3to5(limit: ref IPint): ref IPint<br/>{<br/>\treturn(<br/>\t\tisum_multiples(ints[3], limit).<br/>\t\tadd(isum_multiples(ints[5], limit)).<br/>\t\tsub(isum_multiples(ints[15], limit)));<br/>}<br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 9, "block": "<pre class=\"text highlighted_source\">on sum35 (n)<br/>  res = 0<br/>  repeat with i = 0 to (n-1)<br/>    if i mod 3=0 OR i mod 5=0 then<br/>      res = res + i<br/>    end if<br/>  end repeat<br/>  return res<br/>end</pre>"}, {"lang": "LiveCode", "loc": 10, "block": "<pre class=\"text highlighted_source\">function sumUntil n<br/>    repeat with i = 0 to (n-1)<br/>        if i mod 3 = 0 or i mod 5 = 0 then<br/>            add i to m<br/>        end if<br/>    end repeat<br/>    return m<br/>end sumUntil<br/>\u00a0<br/>put sumUntil(1000)  // 233168</pre>"}, {"lang": "Lua", "loc": 14, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> tri <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">return</span> n <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> sum35 <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\tn <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">return</span>\t<span class=\"br0\">(</span>\t<span class=\"nu0\">3</span> <span class=\"sy0\">*</span> tri<span class=\"br0\">(</span><span class=\"kw3\">math.floor</span><span class=\"br0\">(</span>n <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <br/>\t\t\t<span class=\"nu0\">5</span> <span class=\"sy0\">*</span> tri<span class=\"br0\">(</span><span class=\"kw3\">math.floor</span><span class=\"br0\">(</span>n <span class=\"sy0\">/</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <br/>\t\t\t<span class=\"nu0\">15</span> <span class=\"sy0\">*</span> tri<span class=\"br0\">(</span><span class=\"kw3\">math.floor</span><span class=\"br0\">(</span>n <span class=\"sy0\">/</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>sum35<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>sum35<span class=\"br0\">(</span><span class=\"nu0\">1e+20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>F\u00a0:= unapply(  sum(3*i,i=1..floor((n-1)/3))<br/>             + sum(5*i,i=1..floor((n-1)/5))<br/>             - sum(15*i,i=1..floor((n-1)/15)), n);<br/>\u00a0<br/>F(1000);<br/>\u00a0<br/>F(10^20);<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 5, "block": "<pre class=\"text highlighted_source\">sum35[n_]\u00a0:= <br/> Sum[k, {k, 3, n - 1, 3}] + Sum[k, {k, 5, n - 1, 5}] - <br/>  Sum[k, {k, 15, n - 1, 15}]<br/>\u00a0<br/>sum35[1000]</pre>"}, {"lang": "MATLAB / Octave", "loc": 1, "block": "<pre class=\"matlab highlighted_source\">n=<span class=\"nu0\">1</span>:<span class=\"nu0\">999</span>; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span>n<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span>n,<span class=\"nu0\">3</span><span class=\"br0\">)</span>==<span class=\"nu0\">0</span> | <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span>n,<span class=\"nu0\">5</span><span class=\"br0\">)</span>==<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maxima", "loc": 7, "block": "<pre class=\"text highlighted_source\">sumi(n, incr):= block([kmax: quotient(n, incr)],<br/>  ''(ev(sum(incr*k, k, 1, kmax), simpsum)));<br/>\u00a0<br/>sum35(n):=sumi(n, 3) + sumi(n, 5) - sumi(n, 15);<br/>\u00a0<br/>sum35(1000);<br/>sum35(10^20);</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u041f1\t0\t\u041f0\t3\t\u041f4\t\u0418\u041f4\t3\t/\t{x}\tx#0<br/>17\t\u0418\u041f4\t5\t/\t{x}\tx=0\t21\t\u0418\u041f0\t\u0418\u041f4\t+<br/>\u041f0\t\u041a\u0418\u041f4\t\u0418\u041f1\t\u0418\u041f4\t-\tx=0\t05\t\u0418\u041f0\t\u0421/\u041f</pre>"}, {"lang": "NetRexx", "loc": 78, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/><span class=\"kw1\">numeric</span> digits <span class=\"nu0\">40</span><br/>\u00a0<br/>runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method summing<span class=\"br0\">(</span>maxLimit = <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  mult = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">loop</span> mv = <span class=\"nu0\">0</span> while mv <span class=\"sy0\">&lt;</span> maxLimit<br/>    <span class=\"kw1\">if</span> mv <span class=\"sy0\">//</span> <span class=\"nu0\">3</span> = <span class=\"nu0\">0</span> <span class=\"sy0\">|</span> mv <span class=\"sy0\">//</span> <span class=\"nu0\">5</span> = <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>      mult = mult + mv<br/>    <span class=\"kw3\">end</span> mv<br/>  <span class=\"kw1\">return</span> mult<br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/><span class=\"co1\">-- translation of perl 6</span><br/>method sum_mults<span class=\"br0\">(</span>first, limit<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  last = limit - <span class=\"nu0\">1</span><br/>  last = last - last <span class=\"sy0\">//</span> first<br/>  sum = <span class=\"br0\">(</span>last <span class=\"sy0\">/</span> first<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>first + last<span class=\"br0\">)</span>\u00a0% <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">return</span> sum<br/>\u00a0<br/>method sum35<span class=\"br0\">(</span>maxLimit<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">return</span> sum_mults<span class=\"br0\">(</span><span class=\"nu0\">3</span>, maxLimit<span class=\"br0\">)</span> + sum_mults<span class=\"br0\">(</span><span class=\"nu0\">5</span>, maxLimit<span class=\"br0\">)</span> - sum_mults<span class=\"br0\">(</span><span class=\"nu0\">15</span>, maxLimit<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>\u00a0<br/>  offset = <span class=\"nu0\">30</span><br/>  incr = <span class=\"nu0\">10</span><br/>\u00a0<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'Limit'</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span>offset<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"st0\">'|'</span> <span class=\"sy0\">||</span> <span class=\"st0\">'Sum'</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'-'</span>.<span class=\"kw6\">copies</span><span class=\"br0\">(</span>offset<span class=\"br0\">)</span>    <span class=\"sy0\">||</span> <span class=\"st0\">'+'</span> <span class=\"sy0\">||</span> <span class=\"st0\">'-'</span>.<span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"nu0\">60</span><span class=\"br0\">)</span><br/>  timing = System.<span class=\"me0\">nanoTime</span><br/>  sum = summing<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  timing = System.<span class=\"me0\">nanoTime</span> - timing<br/>  <span class=\"kw1\">say</span> <span class=\"nu0\">1000</span>.<span class=\"me0\">format</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span>offset<span class=\"br0\">)</span><span class=\"st0\">'|'</span>sum<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'Elapsed time:'</span> Rexx<span class=\"br0\">(</span>timing <span class=\"sy0\">*</span> 1e-9<span class=\"br0\">)</span>.<span class=\"me0\">format</span><span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"st0\">'s'</span><br/>  <span class=\"kw1\">say</span><br/>\u00a0<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'Limit'</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span>offset<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"st0\">'|'</span> <span class=\"sy0\">||</span> <span class=\"st0\">'Sum'</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'-'</span>.<span class=\"kw6\">copies</span><span class=\"br0\">(</span>offset<span class=\"br0\">)</span>    <span class=\"sy0\">||</span> <span class=\"st0\">'+'</span> <span class=\"sy0\">||</span> <span class=\"st0\">'-'</span>.<span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"nu0\">60</span><span class=\"br0\">)</span><br/>  tmax = 1e+6<br/>  timing = System.<span class=\"me0\">nanoTime</span><br/>  mm = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">loop</span> while mm <span class=\"sy0\">&lt;</span>= tmax<br/>    <span class=\"kw1\">say</span> mm.<span class=\"kw6\">right</span><span class=\"br0\">(</span>offset<span class=\"br0\">)</span><span class=\"st0\">'|'</span>summing<span class=\"br0\">(</span>mm<span class=\"br0\">)</span><br/>    mm = mm <span class=\"sy0\">*</span> incr<br/>    <span class=\"kw3\">end</span><br/>  timing = System.<span class=\"me0\">nanoTime</span> - timing<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'Elapsed time:'</span> Rexx<span class=\"br0\">(</span>timing <span class=\"sy0\">*</span> 1e-9<span class=\"br0\">)</span>.<span class=\"me0\">format</span><span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"st0\">'s'</span><br/>  <span class=\"kw1\">say</span><br/>\u00a0<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'Limit'</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span>offset<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"st0\">'|'</span> <span class=\"sy0\">||</span> <span class=\"st0\">'Sum'</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'-'</span>.<span class=\"kw6\">copies</span><span class=\"br0\">(</span>offset<span class=\"br0\">)</span>    <span class=\"sy0\">||</span> <span class=\"st0\">'+'</span> <span class=\"sy0\">||</span> <span class=\"st0\">'-'</span>.<span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"nu0\">60</span><span class=\"br0\">)</span><br/>  timing = System.<span class=\"me0\">nanoTime</span><br/>  sum = sum35<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>  timing = System.<span class=\"me0\">nanoTime</span> - timing<br/>  <span class=\"kw1\">say</span> <span class=\"nu0\">1000</span>.<span class=\"me0\">format</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span>offset<span class=\"br0\">)</span><span class=\"st0\">'|'</span>sum<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'Elapsed time:'</span> Rexx<span class=\"br0\">(</span>timing <span class=\"sy0\">*</span> 1e-9<span class=\"br0\">)</span>.<span class=\"me0\">format</span><span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"st0\">'s'</span><br/>  <span class=\"kw1\">say</span><br/>\u00a0<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'Limit'</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span>offset<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"st0\">'|'</span> <span class=\"sy0\">||</span> <span class=\"st0\">'Sum'</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'-'</span>.<span class=\"kw6\">copies</span><span class=\"br0\">(</span>offset<span class=\"br0\">)</span>    <span class=\"sy0\">||</span> <span class=\"st0\">'+'</span> <span class=\"sy0\">||</span> <span class=\"st0\">'-'</span>.<span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"nu0\">60</span><span class=\"br0\">)</span><br/>  tmax = 1e+27<br/>  timing = System.<span class=\"me0\">nanoTime</span><br/>  mm = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">loop</span> while mm <span class=\"sy0\">&lt;</span>= tmax<br/>    <span class=\"kw1\">say</span> mm.<span class=\"kw6\">right</span><span class=\"br0\">(</span>offset<span class=\"br0\">)</span><span class=\"st0\">'|'</span>sum35<span class=\"br0\">(</span>mm<span class=\"br0\">)</span><br/>    mm = mm <span class=\"sy0\">*</span> incr<br/>    <span class=\"kw3\">end</span><br/>  timing = System.<span class=\"me0\">nanoTime</span> - timing<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'Elapsed time:'</span> Rexx<span class=\"br0\">(</span>timing <span class=\"sy0\">*</span> 1e-9<span class=\"br0\">)</span>.<span class=\"me0\">format</span><span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"st0\">'s'</span><br/>  <span class=\"kw1\">say</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 6, "block": "<pre class=\"text highlighted_source\">proc sum35(n: int): int =<br/>  for x in 0 .. &lt;n:<br/>    if x mod 3 == 0 or x mod 5 == 0:<br/>      result += x<br/>\u00a0<br/>echo sum35(1000)</pre>"}, {"lang": "Objeck", "loc": 17, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">class</span> SumMultiples <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> <span class=\"kw1\">native</span> <span class=\"sy0\">:</span> GetSum<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>    sum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">|</span> i <span class=\"sy0\">%</span> <span class=\"nu0\">5</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sum <span class=\"sy0\">+=</span> i<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> sum<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    GetSum<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 10, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> sum_mults n <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> sum <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">to</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"kw1\">mod</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>i <span class=\"kw1\">mod</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>                        sum <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>sum <span class=\"sy0\">+</span> i<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>        <span class=\"sy0\">!</span>sum<span class=\"sy0\">;;</span><br/>\u00a0<br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALstring_of_int\"><span class=\"kw3\">string_of_int</span></a> <span class=\"br0\">(</span>sum_mults <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/>\u00a0</pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">999 seq filter(#[ dup 3 mod 0 == swap 5 mod 0 == or ]) sum println</pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"parigp highlighted_source\">ct<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>k<span class=\"br0\">)</span><span class=\"sy0\">=</span>n<span class=\"sy0\">=</span>n<span class=\"sy0\">--\\</span>k<span class=\"sy0\">;</span>k<span class=\"sy0\">*</span>n<span class=\"sy0\">*</span><span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu1\">2</span><span class=\"sy0\">;</span><br/>a<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>ct<span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu1\">3</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>ct<span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu1\">5</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>ct<span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu1\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>a<span class=\"br0\">(</span><span class=\"nu1\">1000</span><span class=\"br0\">)</span><br/>a<span class=\"br0\">(</span><span class=\"nu2\">1e20</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 23, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> Sum3sAnd5s<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Multiple<span class=\"br0\">(</span>x<span class=\"sy1\">,</span> y<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/>  <span class=\"coMULTI\">{ Is X a multiple of Y? }</span><br/>   <span class=\"kw1\">begin</span><br/>      Multiple <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>X <span class=\"kw1\">mod</span> Y<span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> SumMultiples<span class=\"br0\">(</span>n<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>  <span class=\"coMULTI\">{ Return the sum of all multiples of 3 or 5. }</span><br/>   <span class=\"kw1\">var</span> i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span> sum<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">begin</span><br/>      sum <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw3\">pred</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>         <span class=\"kw1\">if</span> Multiple<span class=\"br0\">(</span>i<span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> Multiple<span class=\"br0\">(</span>i<span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>           sum <span class=\"sy1\">:</span><span class=\"sy3\">=</span> sum <span class=\"sy3\">+</span> i<span class=\"sy1\">;</span><br/>      SumMultiples <span class=\"sy1\">:</span><span class=\"sy3\">=</span> sum<br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"coMULTI\">{ Show sum of all multiples less than 1000. }</span><br/>   <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>SumMultiples<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 11, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw2\">use</span> strict <span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings <span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> sum <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> sum_3_5 <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$limit</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> sum <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span> <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <span class=\"co5\">$_</span> <span class=\"sy0\">%</span> <span class=\"nu0\">5</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">$limit</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"The sum is \"</span> <span class=\"sy0\">.</span> sum_3_5<span class=\"br0\">(</span> <span class=\"nu0\">1000</span> <span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"\u00a0!<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 3, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> sum35<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"kw3\">grep</span> <span class=\"sy0\">*</span> <span class=\"sy0\">%%</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">|</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">^</span><span class=\"re0\">$n</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> sum35 <span class=\"nu0\">1000</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 18, "block": "<pre class=\"text highlighted_source\">include bigatom.e<br/>\u00a0<br/>function s(bigatom n, integer d)<br/>    bigatom m = ba_idivide(n,d)<br/>    m = ba_multiply(m,ba_add(m,1))<br/>    return ba_divide(ba_multiply(d,m),2)<br/>end function<br/>\u00a0<br/>function sum35(bigatom n)<br/>    bigatom n1 = ba_sub(n,1)<br/>    return ba_sub(ba_add(s(n1,3),s(n1,5)),s(n1,15))<br/>end function<br/>\u00a0<br/>for i=0 to 20 do<br/>    string sp = repeat(' ',20-i)<br/>    printf(1,sp&amp;\"1\"&amp;repeat('0',i)&amp;sp)<br/>    ba_printf(1,\"\u00a0%B\\n\",sum35(ba_power(10,i)))<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 12, "block": "<pre class=\"text highlighted_source\">(de sumMul (N F)<br/>   (let N1 (/ (dec N) F)<br/>      (*/ F N1 (inc N1) 2) ) )<br/>\u00a0<br/>(for I 20<br/>   (let N (** 10 I)<br/>      (println<br/>         (-<br/>            (+ (sumMul N 3) (sumMul N 5))<br/>            (sumMul N 15) ) ) ) )<br/>\u00a0<br/>(bye)</pre>"}, {"lang": "PL/I", "loc": 13, "block": "<pre class=\"text highlighted_source\">threeor5: procedure options (main);      /* 8 June 2014 */<br/>   declare (i, n) fixed(10), sum fixed (31) static initial (0);<br/>\u00a0<br/>   get (n);<br/>   put ('The number of multiples of 3 or 5 below ' || trim(n) || ' is');<br/>\u00a0<br/>   do i = 1 to n-1;<br/>      if mod(i, 3) = 0 | mod(i, 5) = 0 then sum = sum + i;<br/>   end;<br/>\u00a0<br/>   put edit ( trim(sum) ) (A);<br/>\u00a0<br/>end threeor5;</pre>"}, {"lang": "PowerShell", "loc": 11, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> SumMultiples <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$Base</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$Upto</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"re0\">$X</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">$Upto</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span> <span class=\"re0\">$Upto</span> <span class=\"sy0\">%</span> <span class=\"re0\">$Base</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"re0\">$Base</span><br/>    <span class=\"re0\">$Sum</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">$X</span> <span class=\"sy0\">*</span> <span class=\"re0\">$X</span> <span class=\"sy0\">+</span> <span class=\"re0\">$X</span> <span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$Base</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw3\">Return</span> <span class=\"re0\">$Sum</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#  Calculate the sum of the multiples of 3 and 5 up to 1000</span><br/><span class=\"br0\">(</span> SumMultiples <span class=\"sy0\">-</span>Base <span class=\"nu0\">3</span> <span class=\"sy0\">-</span>Upto <span class=\"nu0\">1000</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span> SumMultiples <span class=\"sy0\">-</span>Base <span class=\"nu0\">5</span> <span class=\"sy0\">-</span>Upto <span class=\"nu0\">1000</span> <span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span> SumMultiples <span class=\"sy0\">-</span>Base <span class=\"nu0\">15</span> <span class=\"sy0\">-</span>Upto <span class=\"nu0\">1000</span> <span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 17, "block": "<pre class=\"prolog highlighted_source\">sum_of_multiples_of_3_and_5_slow<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> TT<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tsum_of_multiples_of_3_and_5<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> TT<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>sum_of_multiples_of_3_and_5<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> K<span class=\"sy4\">,</span> S<span class=\"sy4\">,</span> S<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"nu0\">3</span> <span class=\"sy3\">*</span> K <span class=\"sy6\">&gt;=</span> N<span class=\"sy4\">.</span><br/>\u00a0<br/>sum_of_multiples_of_3_and_5<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> K<span class=\"sy4\">,</span> C<span class=\"sy4\">,</span> S<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tT3 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">3</span> <span class=\"sy3\">*</span> K<span class=\"sy4\">,</span> T3 <span class=\"sy6\">&lt;</span> N<span class=\"sy4\">,</span><br/>\tC3 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> C <span class=\"sy3\">+</span> T3<span class=\"sy4\">,</span><br/>\tT5 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"nu0\">5</span> <span class=\"sy3\">*</span> K<span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   <span class=\"br0\">(</span>T5 <span class=\"sy6\">&lt;</span> N<span class=\"sy4\">,</span> K <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">3</span> <span class=\"sy6\">=</span>\\<span class=\"sy6\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t<span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span>  C5 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> C3 <span class=\"sy3\">+</span> T5<br/>\t<span class=\"sy4\">;</span>   C5 <span class=\"sy6\">=</span> C3<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tK1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> K<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tsum_of_multiples_of_3_and_5<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> K1<span class=\"sy4\">,</span> C5<span class=\"sy4\">,</span> S<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 22, "block": "<pre class=\"purebasic highlighted_source\">\u00a0<br/><span class=\"kw1\">EnableExplicit</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.q SumMultiples<span class=\"br0\">(</span>Limit.q<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> Limit <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span>\u00a0: Limit <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>Limit\u00a0: <span class=\"kw1\">EndIf</span><span class=\"co1\">; convert negative numbers to positive</span><br/>  <span class=\"kw1\">Protected</span>.q i, sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">To</span> Limit <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> i <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Or</span> i <span class=\"sy0\">%</span> <span class=\"nu0\">5</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      sum <span class=\"sy0\">+</span> i<br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span>  <br/>  <span class=\"kw1\">ProcedureReturn</span> sum<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Sum of numbers below 1000 which are multiples of 3 or 5 is\u00a0: \"</span> <span class=\"sy0\">+</span> SumMultiples<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Press any key to close the console\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Repeat</span>: <span class=\"kw2\">Delay</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Until</span> <span class=\"kw2\">Inkey</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 32, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> sum35a<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'Direct count'</span><br/>    <span class=\"co1\"># note: ranges go to n-1</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>x <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">if</span> x%<span class=\"nu0\">3</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span> <span class=\"kw1\">or</span> x%<span class=\"nu0\">5</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> sum35b<span class=\"br0\">(</span>n<span class=\"br0\">)</span>: <br/>    <span class=\"st0\">\"Count all the 3's; all the 5's; minus double-counted 3*5's\"</span><br/>    <span class=\"co1\"># note: ranges go to n-1</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> + <span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> - <span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> sum35c<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'Sum the arithmetic progressions: sum3 + sum5 - sum15'</span><br/>    consts <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>    <span class=\"co1\"># Note: stop at n-1</span><br/>    divs <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span> // c <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> consts<span class=\"br0\">]</span><br/>    sums <span class=\"sy0\">=</span> <span class=\"br0\">[</span>d*c*<span class=\"br0\">(</span><span class=\"nu0\">1</span>+d<span class=\"br0\">)</span>/<span class=\"nu0\">2</span> <span class=\"kw1\">for</span> d<span class=\"sy0\">,</span>c <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>divs<span class=\"sy0\">,</span> consts<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> sums<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> + sums<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> - sums<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">#test</span><br/><span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1001</span><span class=\"br0\">)</span>:<br/>    sa<span class=\"sy0\">,</span> sb<span class=\"sy0\">,</span> sc <span class=\"sy0\">=</span> sum35a<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> sum35b<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> sum35c<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">assert</span> sa <span class=\"sy0\">==</span> sb <span class=\"sy0\">==</span> sc  <span class=\"co1\"># python tests aren't like those of c.</span><br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'For n =\u00a0%7i -&gt;\u00a0%i<span class=\"es0\">\\n</span>'</span>\u00a0% <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> sc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Pretty patterns</span><br/><span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'For n =\u00a0%7i -&gt;\u00a0%i'</span>\u00a0% <span class=\"br0\">(</span><span class=\"nu0\">10</span>**p<span class=\"sy0\">,</span> sum35c<span class=\"br0\">(</span><span class=\"nu0\">10</span>**p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Scalability </span><br/>p <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>For n =\u00a0%20i -&gt;\u00a0%i'</span>\u00a0% <span class=\"br0\">(</span><span class=\"nu0\">10</span>**p<span class=\"sy0\">,</span> sum35c<span class=\"br0\">(</span><span class=\"nu0\">10</span>**p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 3, "block": "<pre class=\"rsplus highlighted_source\">m35 <span class=\"sy0\">=</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/function.html\"><span class=\"kw2\">function</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/unique.html\"><span class=\"kw2\">unique</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/c.html\"><span class=\"kw2\">c</span></a><span class=\"br0\">(</span><br/>    <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/seq.html\"><span class=\"kw2\">seq</span></a><span class=\"br0\">(</span><span class=\"nu0\">3</span>, n<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/by.html\"><span class=\"kw2\">by</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span>, <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/seq.html\"><span class=\"kw2\">seq</span></a><span class=\"br0\">(</span><span class=\"nu0\">5</span>, n<span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/by.html\"><span class=\"kw2\">by</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>m35<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span>   <span class=\"co1\"># 233168</span></pre>"}, {"lang": "Racket", "loc": 28, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math)<br/>\u00a0<br/>;;; A naive solution<br/>(define (naive k)<br/>  (for/sum ([n (expt 10 k)] <br/>            #:when (or (divides? 3 n) (divides? 5 n)))<br/>    n))<br/>\u00a0<br/>(for/list ([k 7]) (naive k))<br/>\u00a0<br/>\u00a0<br/>;;; Using the formula for an arithmetic sum<br/>(define (arithmetic-sum a1 n \u0394a)<br/> \u00a0; returns a1+a2+...+an<br/>  (define an (+ a1 (* (- n 1) \u0394a)))<br/>  (/ (* n (+ a1 an)) 2))<br/>\u00a0<br/>(define (analytical k)<br/>  (define 10^k (expt 10 k))<br/>  (define (n d) (quotient (- 10^k 1) d))<br/>  (+    (arithmetic-sum  3 (n  3)  3)<br/>        (arithmetic-sum  5 (n  5)  5)<br/>     (- (arithmetic-sum 15 (n 15) 15))))<br/>\u00a0<br/>(for/list ([k 20]) (analytical k))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 12, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* REXX ***************************************************************<br/>* 14.05.2013 Walter Pachl<br/>**********************************************************************/</span><br/><span class=\"kw1\">Say</span> mul35<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">exit</span><br/>mul35:<br/>s=<span class=\"nu0\">0</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">999</span><br/>  <span class=\"kw1\">If</span> i<span class=\"sy0\">//</span><span class=\"nu0\">3</span>=<span class=\"nu0\">0</span> <span class=\"sy0\">|</span> i<span class=\"sy0\">//</span><span class=\"nu0\">5</span>=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span><br/>    s=s+i<br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Return</span> s</pre>"}, {"lang": "Ring", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>see sum35(1000) + nl<br/>\u00a0<br/>func sum35 n<br/>     n = n - 1<br/>     return(3 * tri(floor(n / 3)) + <br/>\t    5 * tri(floor(n / 5)) - <br/>\t    15 * tri(floor(n / 15)))<br/>\u00a0<br/>func tri n<br/>     return n * (n + 1) / 2<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 4, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> sum35<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">1</span>...<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"kw3\">select</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span>i<span class=\"sy0\">%</span>3==<span class=\"nu0\">0</span> <span class=\"kw1\">or</span> i<span class=\"sy0\">%</span>5==<span class=\"nu0\">0</span><span class=\"br0\">}</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span>:<span class=\"sy0\">+</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw3\">puts</span> sum35<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span>      <span class=\"co1\">#=&gt; 233168</span></pre>"}, {"lang": "Run BASIC", "loc": 7, "block": "<pre class=\"text highlighted_source\">print multSum35(1000)<br/>end<br/>function multSum35(n)<br/>    for i = 1 to n - 1<br/>        If (i mod 3 = 0) or (i mod 5 = 0) then  multSum35 = multSum35 + i<br/>    next i<br/>end function</pre>"}, {"lang": "Scala", "loc": 21, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> sum35<span class=\"br0\">(</span> max<span class=\"sy0\">:</span>BigInt <span class=\"br0\">)</span> <span class=\"sy0\">:</span> BigInt <span class=\"sy0\">=</span> max <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"co1\">// Simplest solution but limited to Ints only</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> j <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100000</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> until j.<span class=\"me1\">toInt</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span> i <span class=\"sy0\">=&gt;</span> i <span class=\"sy0\">%</span> <span class=\"nu0\">3</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> || i <span class=\"sy0\">%</span> <span class=\"nu0\">5</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span>.<span class=\"me1\">sum</span><br/>\u00a0<br/>  <span class=\"co1\">// Using a custom iterator that takes Longs</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> j <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> j <span class=\"sy0\">&lt;</span> 10e9.<span class=\"me1\">toLong</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> stepBy<span class=\"br0\">(</span> step<span class=\"sy0\">:</span>Long <span class=\"br0\">)</span> <span class=\"sy0\">:</span> Iterator<span class=\"br0\">[</span>Long<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Iterator<span class=\"br0\">[</span>Long<span class=\"br0\">]</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> step<span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> hasNext <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> next<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> Long <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span> i <span class=\"sy0\">=</span> i + step<span class=\"sy0\">;</span> result <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>    stepBy<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>.<span class=\"me1\">takeWhile</span><span class=\"br0\">(</span> <span class=\"sy0\">_&lt;</span> j <span class=\"br0\">)</span>.<span class=\"me1\">sum</span> + stepBy<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"me1\">takeWhile</span><span class=\"br0\">(</span> <span class=\"sy0\">_&lt;</span> j <span class=\"br0\">)</span>.<span class=\"me1\">sum</span> - stepBy<span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span>.<span class=\"me1\">takeWhile</span><span class=\"br0\">(</span> <span class=\"sy0\">_&lt;</span> j <span class=\"br0\">)</span>.<span class=\"me1\">sum</span> \t<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// Using the formula for a Triangular number</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> j <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> triangle<span class=\"br0\">(</span> i<span class=\"sy0\">:</span>BigInt <span class=\"br0\">)</span> <span class=\"sy0\">=</span> i <span class=\"sy0\">*</span> <span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span> / BigInt<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> triangle<span class=\"br0\">(</span> <span class=\"br0\">(</span>j-<span class=\"nu0\">1</span><span class=\"br0\">)</span>/<span class=\"nu0\">3</span> <span class=\"br0\">)</span> + <span class=\"nu0\">5</span> <span class=\"sy0\">*</span> triangle<span class=\"br0\">(</span> <span class=\"br0\">(</span>j-<span class=\"nu0\">1</span><span class=\"br0\">)</span>/<span class=\"nu0\">5</span> <span class=\"br0\">)</span> - <span class=\"nu0\">15</span> <span class=\"sy0\">*</span> triangle<span class=\"br0\">(</span> <span class=\"br0\">(</span>j-<span class=\"nu0\">1</span><span class=\"br0\">)</span>/<span class=\"nu0\">15</span> <span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span> i <span class=\"sy0\">&lt;</span>- <span class=\"br0\">(</span><span class=\"nu0\">0</span> to <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> n <span class=\"sy0\">=</span> <span class=\"st0\">\"1\"</span>+<span class=\"st0\">\"0\"</span><span class=\"sy0\">*</span>i <span class=\"br0\">)</span> println<span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">21</span> - i<span class=\"br0\">)</span><span class=\"br0\">)</span> + n + <span class=\"st0\">\" =&gt; \"</span> + <span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">21</span> - i<span class=\"br0\">)</span><span class=\"br0\">)</span> + sum35<span class=\"br0\">(</span>BigInt<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Rust", "loc": 38, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>extern crate rug;<br/>\u00a0<br/>use rug::Integer;<br/>use rug::ops::Pow;<br/>\u00a0<br/>fn main() {<br/>    for i in [3, 20, 100, 1_000].iter() {<br/>        let ten = Integer::from(10);<br/>        let mut limit = Integer::from(Integer::from(&amp;ten.pow(*i as u32)) - 1);<br/>        let mut aux_3_1 = &amp;limit.mod_u(3u32);<br/>        let mut aux_3_2 = Integer::from(&amp;limit - aux_3_1);<br/>        let mut aux_3_3 = Integer::from(&amp;aux_3_2/3);<br/>        let mut aux_3_4 = Integer::from(3 + aux_3_2);<br/>        let mut aux_3_5 = Integer::from(&amp;aux_3_3*&amp;aux_3_4);<br/>        let mut aux_3_6 = Integer::from(&amp;aux_3_5/2);<br/>\u00a0<br/>        let mut aux_5_1 = &amp;limit.mod_u(5u32);<br/>        let mut aux_5_2 = Integer::from(&amp;limit - aux_5_1); <br/>        let mut aux_5_3 = Integer::from(&amp;aux_5_2/5);<br/>        let mut aux_5_4 = Integer::from(5 + aux_5_2); <br/>        let mut aux_5_5 = Integer::from(&amp;aux_5_3*&amp;aux_5_4);<br/>        let mut aux_5_6 = Integer::from(&amp;aux_5_5/2); <br/>\u00a0<br/>        let mut aux_15_1 = &amp;limit.mod_u(15u32);<br/>        let mut aux_15_2 = Integer::from(&amp;limit - aux_15_1); <br/>        let mut aux_15_3 = Integer::from(&amp;aux_15_2/15);<br/>        let mut aux_15_4 = Integer::from(15 + aux_15_2);<br/>        let mut aux_15_5 = Integer::from(&amp;aux_15_3*&amp;aux_15_4);<br/>        let mut aux_15_6 = Integer::from(&amp;aux_15_5/2); <br/>\u00a0<br/>        let mut result_aux_1 = Integer::from(&amp;aux_3_6 + &amp;aux_5_6); <br/>        let mut result = Integer::from(&amp;result_aux_1 - &amp;aux_15_6);<br/>\u00a0<br/>        println!(\"Sum for 10^{}\u00a0: {}\",i,result);<br/>    }<br/>}<br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 1, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span>fold <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x tot<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> tot <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span><span class=\"kw1\">remainder</span> x <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span><span class=\"kw1\">remainder</span> x <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> x <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span>iota <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 25, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"bigint.s7i\";<br/>\u00a0<br/>const func bigInteger: sum35 (in bigInteger: n) is func<br/>  result<br/>    var bigInteger: sum35 is 0_;<br/>  local<br/>    const func bigInteger: sumMul (in bigInteger: n, in bigInteger: f) is func<br/>      result<br/>        var bigInteger: sumMul is 0_;<br/>      local<br/>        var bigInteger: n1 is 0_;<br/>      begin<br/>        n1\u00a0:= pred(n) div f;<br/>        sumMul\u00a0:= f * n1 * succ(n1) div 2_;<br/>      end func;<br/>   begin<br/>     sum35\u00a0:= sumMul(n, 3_) + sumMul(n, 5_) - sumMul(n, 15_);<br/>   end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(sum35(1000_));<br/>    writeln(sum35(10_ ** 20));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 12, "block": "<pre class=\"ruby highlighted_source\">func sumMul<span class=\"br0\">(</span>n, f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var m = int<span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> f<span class=\"br0\">)</span><br/>    f <span class=\"sy0\">*</span> m <span class=\"sy0\">*</span> <span class=\"br0\">(</span>m <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func sum35<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    sumMul<span class=\"br0\">(</span>n, <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> sumMul<span class=\"br0\">(</span>n, <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> sumMul<span class=\"br0\">(</span>n, <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%2s:%22s\u00a0%s<span class=\"es0\">\\n</span>\"</span>, i, <span class=\"nu0\">10</span><span class=\"sy0\">**</span>i, sum35<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">**</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Simula", "loc": 54, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"sy1\">!</span> Find the sum of multiples of two factors below a limit <span class=\"sy1\">-</span><br/><span class=\"sy1\">!</span> Project Euler problem 1<span class=\"sy1\">:</span> multiples of 3 or 5 below 1000 <span class=\"sy1\">&amp;</span> 10<span class=\"sy1\">**</span>20<span class=\"sy1\">;</span><br/><span class=\"kw2\">BEGIN</span><br/>    INTEGER PROCEDURE GCD<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> b<span class=\"br0\">)</span><span class=\"sy1\">;</span> INTEGER a<span class=\"sy1\">,</span> b<span class=\"sy1\">;</span><br/>        GCD <span class=\"sy1\">:=</span> <span class=\"kw2\">IF</span> b <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span> a <span class=\"kw2\">ELSE</span> GCD<span class=\"br0\">(</span>b<span class=\"sy1\">,</span> <span class=\"kw12\">MOD</span><span class=\"br0\">(</span>a<span class=\"sy1\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"sy1\">!</span> sum of multiples of n up to limit<span class=\"sy1\">;</span><br/>    INTEGER PROCEDURE multiples<span class=\"br0\">(</span>n<span class=\"sy1\">,</span> limit<span class=\"br0\">)</span><span class=\"sy1\">;</span> INTEGER n<span class=\"sy1\">,</span> limit<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">BEGIN</span><br/>        INTEGER m<span class=\"sy1\">;</span><br/>        m <span class=\"sy1\">:=</span> limit <span class=\"sy1\">//</span> n<span class=\"sy1\">;</span><br/>    <span class=\"sy1\">!</span> moving <span class=\"sy1\">//</span>2 to sumMultiples<span class=\"br0\">(</span><span class=\"br0\">)</span> looked just too silly    <span class=\"sy1\">;</span><br/>        multiples <span class=\"sy1\">:=</span> n<span class=\"sy1\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>m<span class=\"sy1\">*</span><span class=\"br0\">(</span>m<span class=\"sy1\">+</span>1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">//</span> 2<span class=\"br0\">)</span> <span class=\"sy1\">!</span> and risks overflow<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">END</span><br/>    <span class=\"sy1\">!</span> sum of multiples of n or m below limit<span class=\"sy1\">;</span><br/>    INTEGER PROCEDURE sumMultiples<span class=\"br0\">(</span>n<span class=\"sy1\">,</span> m<span class=\"sy1\">,</span> limit<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        INTEGER n<span class=\"sy1\">,</span> m<span class=\"sy1\">,</span> limit<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">BEGIN</span><br/>        INTEGER LCM<span class=\"sy1\">;</span><br/>        LCM<span class=\"sy1\">:=</span> <span class=\"br0\">(</span>n <span class=\"sy1\">//</span> GCD<span class=\"br0\">(</span>n<span class=\"sy1\">,</span> m<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">*</span> m<span class=\"sy1\">;</span><br/>        limit <span class=\"sy1\">:=</span> limit<span class=\"sy1\">-</span>1<span class=\"sy1\">;</span><br/>        sumMultiples <span class=\"sy1\">:=</span> multiples<span class=\"br0\">(</span>n<span class=\"sy1\">,</span> limit<span class=\"br0\">)</span> <span class=\"sy1\">+</span> multiples<span class=\"br0\">(</span>m<span class=\"sy1\">,</span> limit<span class=\"br0\">)</span><br/>                        <span class=\"sy1\">-</span> multiples<span class=\"br0\">(</span>LCM<span class=\"sy1\">,</span> limit<span class=\"br0\">)</span><br/>    <span class=\"kw2\">END</span> sumMultiples<span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"sy1\">!</span> Extra creditable<span class=\"sy1\">:</span> math is about avoiding calculation tedium<span class=\"sy1\">;</span><br/>    TEXT PROCEDURE repeat<span class=\"br0\">(</span>c<span class=\"sy1\">,</span> n<span class=\"br0\">)</span><span class=\"sy1\">;</span> CHARACTER c<span class=\"sy1\">;</span> INTEGER n<span class=\"sy1\">;</span> <span class=\"kw2\">BEGIN</span><br/>        TEXT r<span class=\"sy1\">;</span> r <span class=\"sy1\">:-</span> BLANKS<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> n <span class=\"sy1\">:=</span> n STEP <span class=\"sy1\">-</span>1 UNTIL 1 <span class=\"kw2\">DO</span> r.PUTCHAR<span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        repeat <span class=\"sy1\">:-</span> r<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>    TEXT PROCEDURE sumOfMultiplesOf3or5below10toThePowerOf<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        INTEGER e<span class=\"sy1\">;</span><br/>    sumOfMultiplesOf3or5below10toThePowerOf <span class=\"sy1\">:-</span><br/>        <span class=\"kw2\">IF</span> e <span class=\"sy1\">&lt;</span> 1 <span class=\"kw2\">THEN</span> <span class=\"st0\">\"0\"</span> <span class=\"kw2\">ELSE</span> <span class=\"kw2\">IF</span> e <span class=\"sy1\">=</span> 1 <span class=\"kw2\">THEN</span> <span class=\"st0\">\"23\"</span><br/>        <span class=\"kw2\">ELSE</span> <span class=\"st0\">\"23\"</span> <span class=\"sy1\">&amp;</span> repeat<span class=\"br0\">(</span>'3'<span class=\"sy1\">,</span> e<span class=\"sy1\">-</span>2<span class=\"br0\">)</span><br/>            <span class=\"sy1\">&amp;</span> <span class=\"st0\">\"1\"</span> <span class=\"sy1\">&amp;</span> repeat<span class=\"br0\">(</span>'6'<span class=\"sy1\">,</span> e<span class=\"sy1\">-</span>2<span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"st0\">\"8\"</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    INTEGER factor<span class=\"sy1\">,</span> n<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> factor <span class=\"sy1\">:=</span> 5 <span class=\"sy1\">!,</span> 2<span class=\"sy1\">,</span> 6<span class=\"sy1\">;</span><br/>                    <span class=\"kw2\">DO</span> <span class=\"kw2\">BEGIN</span><br/>        OUTTEXT<span class=\"br0\">(</span><span class=\"st0\">\"sum of positive multiples of 3 and\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        OUTINT<span class=\"br0\">(</span>factor<span class=\"sy1\">,</span> 2<span class=\"br0\">)</span><span class=\"sy1\">;</span> OUTCHAR<span class=\"br0\">(</span>'<span class=\"sy1\">:</span>'<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> n <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span> 1 STEP 1 UNTIL 15<span class=\"sy1\">,</span> 100<span class=\"sy1\">,;</span><br/>                 1000 <span class=\"kw2\">DO</span> <span class=\"kw2\">BEGIN</span><br/>            OUTCHAR<span class=\"br0\">(</span>' '<span class=\"br0\">)</span><span class=\"sy1\">;</span> OUTINT<span class=\"br0\">(</span>sumMultiples<span class=\"br0\">(</span>3<span class=\"sy1\">,</span> factor<span class=\"sy1\">,</span> n<span class=\"br0\">)</span><span class=\"sy1\">,</span> 0<span class=\"br0\">)</span><br/>        <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>        OUTIMAGE<br/>    <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> n <span class=\"sy1\">:=</span> 0<span class=\"sy1\">,</span> 1<span class=\"sy1\">,</span> 3<span class=\"sy1\">,</span> 5<span class=\"sy1\">,</span> 10<span class=\"sy1\">,</span> 20<span class=\"sy1\">,</span> 40 <span class=\"kw2\">DO</span> <span class=\"kw2\">BEGIN</span><br/>        OUTTEXT<span class=\"br0\">(</span>sumOfMultiplesOf3or5below10toThePowerOf<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        OUTIMAGE<br/>    <span class=\"kw2\">END</span><br/><span class=\"kw2\">END</span></pre>"}, {"lang": "Stata", "loc": 4, "block": "<pre class=\"text highlighted_source\">clear all<br/>set obs 999<br/>gen a=_n<br/>tabstat a if mod(a,3)==0 | mod(a,5)==0, statistic(sum)</pre>"}, {"lang": "Swift", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>\u00a0<br/>var n:Int=1000<br/>\u00a0<br/>func sum(x:Int)-&gt;Int{<br/>\u00a0<br/>\tvar s:Int=0<br/>\tfor i in 0...x{<br/>\t\tif i%3==0 || i%5==0<br/>\t\t{<br/>\t\t\ts=s+i<br/>\t\t}<br/>\u00a0<br/>\t}<br/>\treturn s<br/>}<br/>\u00a0<br/>var sumofmult:Int=sum(x:n)<br/>print(sumofmult)<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 17, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># Fairly simple version; only counts by 3 and 5, skipping intermediates</span><br/><span class=\"kw1\">proc</span> mul35sum <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> total <span class=\"br0\">[</span><span class=\"kw1\">set</span> threes <span class=\"br0\">[</span><span class=\"kw1\">set</span> fives <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$threes</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$n</span>||<span class=\"re0\">$fives</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$threes</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$fives</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">incr</span> total <span class=\"re0\">$threes</span><br/>\t    <span class=\"kw2\">incr</span> threes <span class=\"nu0\">3</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$threes</span><span class=\"sy0\">&gt;</span><span class=\"re0\">$fives</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">incr</span> total <span class=\"re0\">$fives</span><br/>\t    <span class=\"kw2\">incr</span> fives <span class=\"nu0\">5</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">incr</span> total <span class=\"re0\">$threes</span><br/>\t    <span class=\"kw2\">incr</span> threes <span class=\"nu0\">3</span><br/>\t    <span class=\"kw2\">incr</span> fives <span class=\"nu0\">5</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$total</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VBA", "loc": 8, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> SumMult3and5VBScript(n <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span><br/><span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span><br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> n - 1<br/>        <span class=\"kw3\">If</span> i <span class=\"kw4\">Mod</span> 3 = 0 <span class=\"kw3\">Or</span> i <span class=\"kw4\">Mod</span> 5 = 0 <span class=\"kw3\">Then</span><br/>            SumMult3and5VBScript = SumMult3and5VBScript + i<br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "VBScript", "loc": 12, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> multsum35(n)<br/>\t<span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> n - 1<br/>\t\t<span class=\"kw3\">If</span> i <span class=\"kw4\">Mod</span> 3 = 0 <span class=\"kw3\">Or</span> i <span class=\"kw4\">Mod</span> 5 = 0 <span class=\"kw3\">Then</span><br/>\t\t\tmultsum35 = multsum35 + i<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.StdOut.Write multsum35(CLng(WScript.Arguments(0)))<br/>WScript.StdOut.WriteLine<br/>\u00a0</pre>"}, {"lang": "Wortel", "loc": 5, "block": "<pre class=\"text highlighted_source\">@let {<br/>  sum35 ^(@sum \\<a class=\"__cf_email__\" data-cfemail=\"13323e53\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(\\~%%3 || \\~%%5) @til)<br/>\u00a0<br/> \u00a0!sum35 1000\u00a0; returns 233168<br/>}</pre>"}, {"lang": "XPL0", "loc": 42, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\stdlib;<br/>\u00a0<br/>func Sum1;      \\Return sum the straightforward way<br/>int  N, S;<br/>[S:= 0;<br/>for N:= 1 to 999 do<br/>    if rem(N/3)=0 or rem(N/5)=0 then S:= S+N;<br/>return S;<br/>];<br/>\u00a0<br/>func Sum2(D);   \\Return sum of sequence using N*(N+1)/2<br/>int  D;<br/>int  Q;<br/>[Q:= (1000-1)/D;<br/>return Q*(Q+1)/2*D;<br/>];<br/>\u00a0<br/>func Sum3(D);   \\Return sum of sequence for really big number<br/>string 0;       \\don't terminate strings by setting most significant bit<br/>int  D;         \\divisor<br/>int  I;<br/>char P(40), Q(40), R(40);       \\product, quotient, result<br/>[StrNDiv(\"99999999999999999999\", D, Q, 20);     \\Q:= (1E20-1)/D<br/>for I:= 0 to 17 do R(I):= ^0;                   \\R:= D<br/>R(18):= D/10 +^0;<br/>R(19):= rem(0) +^0;<br/>StrNMul(Q, R, P, 20);                           \\P:= Q*R = Q*D<br/>StrNAdd(\"00000000000000000001\", Q, 20);         \\Q:= Q+1<br/>StrNMul(P+20, Q, R, 20);                        \\R:= P*Q = Q*D*(Q+1)<br/>StrNDiv(R, 2, Q, 40);                           \\Q:= P/2 = Q*D*(Q+1)/2<br/>return Q;                                       \\(very temporary location)<br/>];<br/>\u00a0<br/>char S(40), T;<br/>[IntOut(0, Sum1);  CrLf(0);<br/> IntOut(0, Sum2(3) + Sum2(5) - Sum2(3*5));  CrLf(0);<br/>StrNCopy(Sum3(3), S, 40);<br/>StrNAdd(Sum3(5), S, 40);<br/>T:= Sum3(3*5);<br/>StrNSub(S, T, 40);<br/>TextN(0, T, 40);  CrLf(0);<br/>]</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">[3..999,3].reduce('+,0) + [5..999,5].reduce('+,0) - [15..999,15].reduce('+,0)<br/>233168</pre>"}]}