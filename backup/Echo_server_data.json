{"task": "Echo_server", "blocks": [{"lang": "Ada", "loc": 38, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">IO_Exceptions</span>;<br/><span class=\"kw3\">with</span> GNAT.<span class=\"me1\">Sockets</span>;<br/><span class=\"kw3\">procedure</span> Echo_Server <span class=\"kw1\">is</span><br/>   Receiver  \u00a0: GNAT.<span class=\"me1\">Sockets</span>.<span class=\"me1\">Socket_Type</span>;<br/>   Connection\u00a0: GNAT.<span class=\"me1\">Sockets</span>.<span class=\"me1\">Socket_Type</span>;<br/>   Client    \u00a0: GNAT.<span class=\"me1\">Sockets</span>.<span class=\"me1\">Sock_Addr_Type</span>;<br/>   Channel   \u00a0: GNAT.<span class=\"me1\">Sockets</span>.<span class=\"me1\">Stream_Access</span>;<br/><span class=\"kw1\">begin</span><br/>   GNAT.<span class=\"me1\">Sockets</span>.<span class=\"me1\">Create_Socket</span> <span class=\"br0\">(</span>Socket =&gt; Receiver<span class=\"br0\">)</span>;<br/>   GNAT.<span class=\"me1\">Sockets</span>.<span class=\"me1\">Set_Socket_Option</span><br/>     <span class=\"br0\">(</span>Socket =&gt; Receiver,<br/>      Option =&gt; <span class=\"br0\">(</span>Name    =&gt; GNAT.<span class=\"me1\">Sockets</span>.<span class=\"me1\">Reuse_Address</span>, Enabled =&gt; True<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   GNAT.<span class=\"me1\">Sockets</span>.<span class=\"me1\">Bind_Socket</span><br/>     <span class=\"br0\">(</span>Socket  =&gt; Receiver,<br/>      Address =&gt; <span class=\"br0\">(</span>Family =&gt; GNAT.<span class=\"me1\">Sockets</span>.<span class=\"me1\">Family_Inet</span>,<br/>                  Addr   =&gt; GNAT.<span class=\"me1\">Sockets</span>.<span class=\"me1\">Inet_Addr</span> <span class=\"br0\">(</span><span class=\"st0\">\"127.0.0.1\"</span><span class=\"br0\">)</span>,<br/>                  Port   =&gt; <span class=\"nu0\">12321</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   GNAT.<span class=\"me1\">Sockets</span>.<span class=\"me1\">Listen_Socket</span> <span class=\"br0\">(</span>Socket =&gt; Receiver<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">loop</span><br/>      GNAT.<span class=\"me1\">Sockets</span>.<span class=\"me1\">Accept_Socket</span><br/>        <span class=\"br0\">(</span>Server  =&gt; Receiver,<br/>         Socket  =&gt; Connection,<br/>         Address =&gt; Client<span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><br/>        <span class=\"br0\">(</span><span class=\"st0\">\"Client connected from \"</span> &amp; GNAT.<span class=\"me1\">Sockets</span>.<span class=\"me1\">Image</span> <span class=\"br0\">(</span>Client<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      Channel\u00a0:= GNAT.<span class=\"me1\">Sockets</span>.<span class=\"me1\">Stream</span> <span class=\"br0\">(</span>Connection<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">loop</span><br/>            Character'Output <span class=\"br0\">(</span>Channel, Character'Input <span class=\"br0\">(</span>Channel<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">exception</span><br/>         <span class=\"kw3\">when</span> Ada.<span class=\"me1\">IO_Exceptions</span>.<span class=\"me1\">End_Error</span> =&gt;<br/>            <span class=\"kw3\">null</span>;<br/>      <span class=\"kw1\">end</span>;<br/>      GNAT.<span class=\"me1\">Sockets</span>.<span class=\"me1\">Close_Socket</span> <span class=\"br0\">(</span>Connection<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Echo_Server;</pre>"}, {"lang": "Aime", "loc": 51, "block": "<pre class=\"text highlighted_source\">void<br/>readc(dispatch w, file i, file o, data b)<br/>{<br/>    integer e;<br/>    data t;<br/>\u00a0<br/>    while (1) {<br/>        e = f_b_read(i, t, 1 &lt;&lt; 10);<br/>        if (e &lt; 1) {<br/>            if (e == -1) {<br/>                w_resign(w, i);<br/>            }<br/>\u00a0<br/>            break;<br/>        } else {<br/>            e = b_frame(t, '\\n');<br/>            if (e\u00a0!= -1) {<br/>                e += 1;<br/>                b_rule(b, -1, t, 0, e);<br/>                f_data(o, b);<br/>                w_register(w, o);<br/>                b_ecopy(b, t, e, ~t - e);<br/>            } else {<br/>                b_add(b, t);<br/>            }<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>void<br/>serve(dispatch w, file s)<br/>{<br/>    file i, o;<br/>    data b;<br/>\u00a0<br/>    accept(i, o, s, NONBLOCKING_INPUT | NONBLOCKING_OUTPUT);<br/>    w.watch(i, readc, w, i, o, b);<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    dispatch w;<br/>    file s;<br/>\u00a0<br/>    tcpip_listen(s, 12321, 0);<br/>    w.watch(s, serve, w, s);<br/>    w.press;<br/>\u00a0<br/>    0;<br/>}</pre>"}, {"lang": "AutoHotkey", "loc": 200, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/_SingleInstance.htm\"><span class=\"kw5\">#SingleInstance</span></a> Force<br/>Network_Port <span class=\"sy0\">=</span> <span class=\"nu0\">12321</span><br/>Network_Address <span class=\"sy0\">=</span> 127<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>0<span class=\"sy0\">.</span>1<br/>\u00a0<br/>NewData <span class=\"sy0\">:=</span> false<br/>DataReceived <span class=\"sy0\">=</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">Gosub</span></a> Connection_Init<br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"re2\">Connection_Init:<br/></span><a href=\"http://www.autohotkey.com/docs/commands/OnExit.htm\"><span class=\"kw3\">OnExit</span></a><span class=\"sy0\">,</span> ExitSub<br/>socket <span class=\"sy0\">:=</span> PrepareForIncomingConnection<span class=\"br0\">(</span>Network_Address<span class=\"sy0\">,</span> Network_Port<span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> socket <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Process.htm\"><span class=\"kw3\">Process</span></a><span class=\"sy0\">,</span> Exist<br/><a href=\"http://www.autohotkey.com/docs/commands/DetectHiddenWindows.htm\"><span class=\"kw3\">DetectHiddenWindows</span></a> On<br/>ScriptMainWindowId <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">WinExist</span></a><span class=\"br0\">(</span><span class=\"st0\">\"ahk_class AutoHotkey ahk_pid \"</span> <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#ErrorLevel\"><span class=\"kw2\">ErrorLevel</span></a><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/DetectHiddenWindows.htm\"><span class=\"kw3\">DetectHiddenWindows</span></a> Off<br/>\u00a0<br/>NotificationMsg <span class=\"sy0\">=</span> 0x5555<br/><a href=\"http://www.autohotkey.com/docs/commands/OnMessage.htm\"><span class=\"kw3\">OnMessage</span></a><span class=\"br0\">(</span>NotificationMsg<span class=\"sy0\">,</span> <span class=\"st0\">\"ReceiveData\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>ExitMsg <span class=\"sy0\">=</span> 0x6666<br/><a href=\"http://www.autohotkey.com/docs/commands/OnMessage.htm\"><span class=\"kw3\">OnMessage</span></a><span class=\"br0\">(</span>ExitMsg<span class=\"sy0\">,</span> <span class=\"st0\">\"ExitData\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>FD_READ <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>FD_CLOSE <span class=\"sy0\">=</span> <span class=\"nu0\">32</span><br/>FD_CONNECT <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\WSAAsyncSelect\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> socket<span class=\"sy0\">,</span> <br/>      <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> ScriptMainWindowId<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> ExitMsg<span class=\"sy0\">,</span> <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span> FD_CLOSE<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a><span class=\"sy0\">,</span> closed<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\WSAAsyncSelect\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> socket<span class=\"sy0\">,</span> <br/>        <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> ScriptMainWindowId<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> NotificationMsg<span class=\"sy0\">,</span> <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span><br/>        FD_READ|FD_CONNECT<span class=\"br0\">)</span> <br/><span class=\"br0\">{</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"WSAAsyncSelect() indicated Winsock error \"</span><br/>          <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\WSAGetLastError\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\WSAAsyncSelect\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> socket<span class=\"sy0\">,</span> <br/>          <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> ScriptMainWindowId<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> ExitMsg<span class=\"sy0\">,</span> <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span> FD_CLOSE<span class=\"br0\">)</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/SetTimer.htm\"><span class=\"kw3\">SetTimer</span></a><span class=\"sy0\">,</span> NewConnectionCheck<span class=\"sy0\">,</span> <span class=\"nu0\">500</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/>PrepareForIncomingConnection<span class=\"br0\">(</span>IPAddress<span class=\"sy0\">,</span> Port<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>wsaData<span class=\"sy0\">,</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span><br/>    result <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\WSAStartup\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UShort\"</span><span class=\"sy0\">,</span> 0x0002<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>wsaData<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#ErrorLevel\"><span class=\"kw2\">ErrorLevel</span></a><br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"WSAStartup() could not be called due to error\u00a0%ErrorLevel%. \"</span><br/>                <span class=\"sy0\">.</span> <span class=\"st0\">\"Winsock 2.0 or higher is required.\"</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> result<br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"WSAStartup() indicated Winsock error \"</span><br/>                <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\WSAGetLastError\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>    AF_INET <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    SOCK_STREAM <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    IPPROTO_TCP <span class=\"sy0\">=</span> <span class=\"nu0\">6</span><br/>    socket <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\socket\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span> AF_INET<span class=\"sy0\">,</span> <br/>          <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span> SOCK_STREAM<span class=\"sy0\">,</span> <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span> IPPROTO_TCP<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> socket <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"socket() indicated Winsock error \"</span><br/>                <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\WSAGetLastError\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>    SizeOfSocketAddress <span class=\"sy0\">=</span> <span class=\"nu0\">16</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>SocketAddress<span class=\"sy0\">,</span> SizeOfSocketAddress<span class=\"br0\">)</span><br/>    InsertInteger<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> SocketAddress<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> AF_INET<span class=\"br0\">)</span><br/>    InsertInteger<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\htons\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UShort\"</span><span class=\"sy0\">,</span> Port<span class=\"br0\">)</span><span class=\"sy0\">,</span> SocketAddress<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    InsertInteger<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\inet_addr\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Str\"</span><span class=\"sy0\">,</span> IPAddress<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            SocketAddress<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\bind\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> socket<span class=\"sy0\">,</span> <br/>            <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>SocketAddress<span class=\"sy0\">,</span> <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span> SizeOfSocketAddress<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"bind() indicated Winsock error \"</span><br/>                <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\WSAGetLastError\"</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"?\"</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\listen\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> socket<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"SOMAXCONN\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"LISTEN() indicated Winsock error \"</span><br/>                <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\WSAGetLastError\"</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"?\"</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> socket<br/><span class=\"br0\">}</span><br/>\u00a0<br/>ReceiveData<span class=\"br0\">(</span>wParam<span class=\"sy0\">,</span> lParam<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    global DataReceived<br/>    global NewData<br/>    global mydata<br/>    global ConnectionList<br/>    socket <span class=\"sy0\">:=</span> wParam<br/>    ReceivedDataSize <span class=\"sy0\">=</span> <span class=\"nu0\">4096</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>ReceivedData<span class=\"sy0\">,</span> ReceivedDataSize<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        ReceivedDataLength <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\recv\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <br/>              socket<span class=\"sy0\">,</span> <span class=\"st0\">\"Str\"</span><span class=\"sy0\">,</span> ReceivedData<span class=\"sy0\">,</span> <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span> ReceivedDataSize<span class=\"sy0\">,</span> <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">if</span> ReceivedDataLength <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"br0\">{</span>   <br/>            <a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> ConnectionList<span class=\"sy0\">,</span> ConnectionList<span class=\"sy0\">,</span> <span class=\"re0\">%socket%</span>`n<br/>            <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\closesocket\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> socket<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span> <br/>        <span class=\"kw1\">if</span> ReceivedDataLength <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        <span class=\"br0\">{</span><br/>            WinsockError <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\WSAGetLastError\"</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> WinsockError <span class=\"sy0\">=</span> <span class=\"nu0\">10035</span><br/>            <span class=\"br0\">{</span><br/>                DataReceived <span class=\"sy0\">=</span> <span class=\"re0\">%TempDataReceived%</span><br/>                NewData <span class=\"sy0\">:=</span> true<br/>                <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> WinsockError <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">10054</span><br/>            <span class=\"br0\">{</span><br/>                <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"recv() indicated Winsock error \"</span> <span class=\"sy0\">.</span> WinsockError<br/>                <a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> ConnectionList<span class=\"sy0\">,</span> ConnectionList<span class=\"sy0\">,</span> <span class=\"re0\">%socket%</span>`n<br/>                <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\closesocket\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> socket<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        mydata <span class=\"sy0\">:=</span> ReceivedData<br/>        <a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">gosub</span></a> myreceive<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            TempDataReceived <span class=\"sy0\">=</span><br/>                TempDataReceived <span class=\"sy0\">=</span> <span class=\"re0\">%TempDataReceived%</span><span class=\"re0\">%ReceivedData%</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>ExitData<span class=\"br0\">(</span>wParam<span class=\"sy0\">,</span> lParam<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    global ConnectionList<br/>    socket <span class=\"sy0\">:=</span> wParam<br/>    ReceivedDataSize <span class=\"sy0\">=</span> <span class=\"nu0\">16</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>ReceivedData<span class=\"sy0\">,</span> ReceivedDataSize<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    ReceivedDataLength <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\recv\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> socket<span class=\"sy0\">,</span> <br/>          <span class=\"st0\">\"Str\"</span><span class=\"sy0\">,</span> ReceivedData<span class=\"sy0\">,</span> <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span> ReceivedDataSize<span class=\"sy0\">,</span> <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringReplace.htm\"><span class=\"kw3\">StringReplace</span></a><span class=\"sy0\">,</span> ConnectionList<span class=\"sy0\">,</span> ConnectionList<span class=\"sy0\">,</span> <span class=\"re0\">%socket%</span>`n<br/>    <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\closesocket\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> socket<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>SendData<span class=\"br0\">(</span>wParam<span class=\"sy0\">,</span>SendData<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    SendDataSize <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>SendData<span class=\"br0\">)</span><br/>    SendDataSize <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> parse<span class=\"sy0\">,</span> wParam<span class=\"sy0\">,</span> `n<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">If</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"sy0\">=</span><br/>           <a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">Continue</span></a><br/>        socket <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>        sendret <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\send\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> socket<span class=\"sy0\">,</span> <br/>              <span class=\"st0\">\"Str\"</span><span class=\"sy0\">,</span> SendData<span class=\"sy0\">,</span> <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span> SendDatasize<span class=\"sy0\">,</span> <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>InsertInteger<span class=\"br0\">(</span>pInteger<span class=\"sy0\">,</span> ByRef pDest<span class=\"sy0\">,</span> pOffset <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> pSize <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"re0\">%pSize%</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"RtlFillMemory\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>pDest <span class=\"sy0\">+</span> pOffset <span class=\"sy0\">+</span> <span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <br/>                <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UChar\"</span><span class=\"sy0\">,</span> pInteger <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0xFF<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re2\">NewConnectionCheck:<br/></span>ConnectionCheck <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\accept\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> socket<span class=\"sy0\">,</span> <br/>      <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>SocketAddress<span class=\"sy0\">,</span> <span class=\"st0\">\"Int\"</span><span class=\"sy0\">,</span> SizeOfSocketAddress<span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> ConnectionCheck <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/>    ConnectionList <span class=\"sy0\">=</span> <span class=\"re0\">%ConnectionList%</span><span class=\"re0\">%ConnectionCheck%</span>`n<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"re2\">SendProcedure:<br/></span><span class=\"kw1\">If</span> ConnectionList <span class=\"sy0\">&lt;&gt;</span><br/><span class=\"br0\">{</span><br/>    SendText <span class=\"sy0\">=</span> <span class=\"re0\">%A_Hour%</span>:<span class=\"re0\">%A_Min%</span>:<span class=\"re0\">%A_Sec%</span><br/>    SendData<span class=\"br0\">(</span>ConnectionList<span class=\"sy0\">,</span>SendText<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"re2\">myreceive:<br/></span> <a href=\"http://www.autohotkey.com/docs/commands/TrayTip.htm\"><span class=\"kw3\">TrayTip</span></a><span class=\"sy0\">,</span> server<span class=\"sy0\">,</span> <span class=\"re0\">%mydata%</span><span class=\"sy0\">,</span> <span class=\"sy0\">,</span><span class=\"nu0\">16</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiClose\"><span class=\"kw7\">GuiClose</span></a>:<br/><span class=\"re2\">ExitSub:<br/></span><a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Ws2_32\\WSACleanup\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a></pre>"}, {"lang": "BBC BASIC", "loc": 54, "block": "<pre class=\"text highlighted_source\">      INSTALL @lib$+\"SOCKLIB\"<br/>      PROC_initsockets<br/>\u00a0<br/>      maxSess% = 8<br/>      DIM sock%(maxSess%-1), rcvd$(maxSess%-1), Buffer% 255<br/>\u00a0<br/>      ON ERROR PRINT REPORT$\u00a0: PROC_exitsockets\u00a0: END<br/>      ON CLOSE PROC_exitsockets\u00a0: QUIT<br/>\u00a0<br/>      crlf$ = CHR$13 + CHR$10<br/>      port$ = \"12321\"<br/>      host$ = FN_gethostname<br/>      PRINT \"Host name is \" host$<br/>\u00a0<br/>      listen% = FN_tcplisten(host$, port$)<br/>      PRINT \"Listening on port \";port$<br/>\u00a0<br/>      REPEAT<br/>        socket% = FN_check_connection(listen%)<br/>        IF socket% THEN<br/>          FOR i% = 0 TO maxSess%-1<br/>            IF sock%(i%) = 0 THEN<br/>              sock%(i%) = socket%<br/>              rcvd$(i%) = \"\"<br/>              PRINT \"Connection on socket \"; sock%(i%) \" opened\"<br/>              EXIT FOR<br/>            ENDIF<br/>          NEXT i%<br/>          listen% = FN_tcplisten(host$, port$)<br/>        ENDIF<br/>\u00a0<br/>        FOR i% = 0 TO maxSess%-1<br/>          IF sock%(i%) THEN<br/>            res% = FN_readsocket(sock%(i%), Buffer%, 256)<br/>            IF res% &gt;= 0 THEN<br/>              Buffer%?res% = 0<br/>              rcvd$(i%) += $$Buffer%<br/>              crlf% = INSTR(rcvd$(i%), crlf$)<br/>              IF crlf% THEN<br/>                echo$ = LEFT$(rcvd$(i%), crlf%-1)<br/>                res% = FN_writelinesocket(sock%(i%), echo$)<br/>                rcvd$(i%) = MID$(rcvd$(i%), crlf%+2)<br/>              ENDIF<br/>            ELSE<br/>              PROC_closesocket(sock%(i%))<br/>              PRINT \"Connection on socket \"\u00a0; sock%(i%) \" closed\"<br/>              sock%(i%) = 0<br/>            ENDIF<br/>          ENDIF<br/>        NEXT i%<br/>\u00a0<br/>        WAIT 0<br/>      UNTIL FALSE<br/>      END</pre>"}, {"lang": "C", "loc": 118, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;errno.h&gt;</span><br/><span class=\"co2\">#include &lt;sys/types.h&gt;</span><br/><span class=\"co2\">#include &lt;sys/socket.h&gt;</span><br/><span class=\"co2\">#include &lt;netdb.h&gt;</span><br/><span class=\"co2\">#include &lt;unistd.h&gt;</span><br/><span class=\"co2\">#include &lt;sys/wait.h&gt;</span><br/><span class=\"co2\">#include &lt;signal.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define MAX_ENQUEUED 20</span><br/><span class=\"co2\">#define BUF_LEN 256</span><br/><span class=\"co2\">#define PORT_STR \"12321\"</span><br/>\u00a0<br/><span class=\"coMULTI\">/* ------------------------------------------------------------ */</span><br/><span class=\"coMULTI\">/* How to clean up after dead child processes                   */</span><br/><span class=\"coMULTI\">/* ------------------------------------------------------------ */</span><br/>\u00a0<br/><span class=\"kw4\">void</span> wait_for_zombie<span class=\"br0\">(</span><span class=\"kw4\">int</span> s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>waitpid<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> NULL<span class=\"sy0\">,</span> WNOHANG<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* ------------------------------------------------------------ */</span><br/><span class=\"coMULTI\">/* Core of implementation of a child process                    */</span><br/><span class=\"coMULTI\">/* ------------------------------------------------------------ */</span><br/>\u00a0<br/><span class=\"kw4\">void</span> echo_lines<span class=\"br0\">(</span><span class=\"kw4\">int</span> csock<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span> buf<span class=\"br0\">[</span>BUF_LEN<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> r<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>r <span class=\"sy0\">=</span> read<span class=\"br0\">(</span>csock<span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> BUF_LEN<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span>write<span class=\"br0\">(</span>csock<span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_SUCCESS<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* ------------------------------------------------------------ */</span><br/><span class=\"coMULTI\">/* Core of implementation of the parent process                 */</span><br/><span class=\"coMULTI\">/* ------------------------------------------------------------ */</span><br/>\u00a0<br/><span class=\"kw4\">void</span> take_connections_forever<span class=\"br0\">(</span><span class=\"kw4\">int</span> ssock<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"sy0\">;;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">struct</span> sockaddr addr<span class=\"sy0\">;</span><br/>        socklen_t addr_size <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>addr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> csock<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/* Block until we take one connection to the server socket */</span><br/>        csock <span class=\"sy0\">=</span> accept<span class=\"br0\">(</span>ssock<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>addr<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>addr_size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/* If it was a successful connection, spawn a worker process to service it */</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> csock <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/perror.html\"><span class=\"kw3\">perror</span></a><span class=\"br0\">(</span><span class=\"st0\">\"accept\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> fork<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            close<span class=\"br0\">(</span>ssock<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            echo_lines<span class=\"br0\">(</span>csock<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            close<span class=\"br0\">(</span>csock<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* ------------------------------------------------------------ */</span><br/><span class=\"coMULTI\">/* The server process's one-off setup code                      */</span><br/><span class=\"coMULTI\">/* ------------------------------------------------------------ */</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">struct</span> addrinfo hints<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>res<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">struct</span> sigaction sa<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> sock<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Look up the address to bind to */</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>hints<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> addrinfo<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    hints.<span class=\"me1\">ai_family</span> <span class=\"sy0\">=</span> AF_UNSPEC<span class=\"sy0\">;</span><br/>    hints.<span class=\"me1\">ai_socktype</span> <span class=\"sy0\">=</span> SOCK_STREAM<span class=\"sy0\">;</span><br/>    hints.<span class=\"me1\">ai_flags</span> <span class=\"sy0\">=</span> AI_PASSIVE<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> getaddrinfo<span class=\"br0\">(</span>NULL<span class=\"sy0\">,</span> PORT_STR<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>hints<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>res<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/perror.html\"><span class=\"kw3\">perror</span></a><span class=\"br0\">(</span><span class=\"st0\">\"getaddrinfo\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Make a socket */</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>sock <span class=\"sy0\">=</span> socket<span class=\"br0\">(</span>res<span class=\"sy0\">-&gt;</span>ai_family<span class=\"sy0\">,</span> res<span class=\"sy0\">-&gt;</span>ai_socktype<span class=\"sy0\">,</span> res<span class=\"sy0\">-&gt;</span>ai_protocol<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/perror.html\"><span class=\"kw3\">perror</span></a><span class=\"br0\">(</span><span class=\"st0\">\"socket\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Arrange to clean up child processes (the workers) */</span><br/>    sa.<span class=\"me1\">sa_handler</span> <span class=\"sy0\">=</span> wait_for_zombie<span class=\"sy0\">;</span><br/>    sigemptyset<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>sa.<span class=\"me1\">sa_mask</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    sa.<span class=\"me1\">sa_flags</span> <span class=\"sy0\">=</span> SA_RESTART<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> sigaction<span class=\"br0\">(</span>SIGCHLD<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>sa<span class=\"sy0\">,</span> NULL<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/perror.html\"><span class=\"kw3\">perror</span></a><span class=\"br0\">(</span><span class=\"st0\">\"sigaction\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Associate the socket with its address */</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> bind<span class=\"br0\">(</span>sock<span class=\"sy0\">,</span> res<span class=\"sy0\">-&gt;</span>ai_addr<span class=\"sy0\">,</span> res<span class=\"sy0\">-&gt;</span>ai_addrlen<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/perror.html\"><span class=\"kw3\">perror</span></a><span class=\"br0\">(</span><span class=\"st0\">\"bind\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    freeaddrinfo<span class=\"br0\">(</span>res<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* State that we've opened a server socket and are listening for connections */</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> listen<span class=\"br0\">(</span>sock<span class=\"sy0\">,</span> MAX_ENQUEUED<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/perror.html\"><span class=\"kw3\">perror</span></a><span class=\"br0\">(</span><span class=\"st0\">\"listen\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Serve the listening socket until killed */</span><br/>    take_connections_forever<span class=\"br0\">(</span>sock<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> EXIT_SUCCESS<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 63, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System.Net.Sockets</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Threading</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> ConsoleApplication1<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> TcpListener listen<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">static</span> Thread serverthread<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            listen <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> TcpListener<span class=\"br0\">(</span><span class=\"kw5\">System.<span class=\"me1\">Net</span></span><span class=\"sy0\">.</span><span class=\"me1\">IPAddress</span><span class=\"sy0\">.</span><span class=\"me1\">Parse</span><span class=\"br0\">(</span><span class=\"st0\">\"127.0.0.1\"</span><span class=\"br0\">)</span>, <span class=\"nu0\">12321</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            serverthread <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Thread<span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ThreadStart<span class=\"br0\">(</span>DoListen<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            serverthread<span class=\"sy0\">.</span><span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> DoListen<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"co1\">// Listen</span><br/>            listen<span class=\"sy0\">.</span><span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Server: Started server\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">true</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Server: Waiting...\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                TcpClient client <span class=\"sy0\">=</span> listen<span class=\"sy0\">.</span><span class=\"me1\">AcceptTcpClient</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Server: Waited\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"co1\">// New thread with client</span><br/>                Thread clientThread <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Thread<span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ParameterizedThreadStart<span class=\"br0\">(</span>DoClient<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                clientThread<span class=\"sy0\">.</span><span class=\"me1\">Start</span><span class=\"br0\">(</span>client<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> DoClient<span class=\"br0\">(</span><span class=\"kw4\">object</span> client<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"co1\">// Read data</span><br/>            TcpClient tClient <span class=\"sy0\">=</span> <span class=\"br0\">(</span>TcpClient<span class=\"br0\">)</span>client<span class=\"sy0\">;</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Client (Thread: {0}): Connected!\"</span>, Thread<span class=\"sy0\">.</span><span class=\"me1\">CurrentThread</span><span class=\"sy0\">.</span><span class=\"me1\">ManagedThreadId</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">do</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>tClient<span class=\"sy0\">.</span><span class=\"me1\">Connected</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span> <br/>                    tClient<span class=\"sy0\">.</span><span class=\"me1\">Close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    Thread<span class=\"sy0\">.</span><span class=\"me1\">CurrentThread</span><span class=\"sy0\">.</span><span class=\"me1\">Abort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>       <span class=\"co1\">// Kill thread.</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tClient<span class=\"sy0\">.</span><span class=\"me1\">Available</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"co1\">// Resend</span><br/>                    <span class=\"kw4\">byte</span> pByte <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">byte</span><span class=\"br0\">)</span>tClient<span class=\"sy0\">.</span><span class=\"me1\">GetStream</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ReadByte</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Client (Thread: {0}): Data {1}\"</span>, Thread<span class=\"sy0\">.</span><span class=\"me1\">CurrentThread</span><span class=\"sy0\">.</span><span class=\"me1\">ManagedThreadId</span>, pByte<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    tClient<span class=\"sy0\">.</span><span class=\"me1\">GetStream</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">WriteByte</span><span class=\"br0\">(</span>pByte<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"co1\">// Pause</span><br/>                Thread<span class=\"sy0\">.</span><span class=\"me1\">Sleep</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 7, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>use '<span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>contrib<span class=\"sy0\">.</span>server-socket <span class=\"sy0\">:</span><span class=\"me1\">only</span> <span class=\"br0\">(</span>create-server<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>use '<span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>contrib<span class=\"sy0\">.</span>duck-streams <span class=\"sy0\">:</span><span class=\"me1\">only</span> <span class=\"br0\">(</span>read-lines write-lines<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn echo <span class=\"br0\">[</span>input output<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>write-lines <span class=\"br0\">(</span>java<span class=\"sy0\">.</span>io<span class=\"sy0\">.</span>PrintWriter<span class=\"sy0\">.</span> output true<span class=\"br0\">)</span> <span class=\"br0\">(</span>read-lines input<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>create-server <span class=\"nu0\">12321</span> echo<span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 19, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>net = require<span class=\"br0\">(</span><span class=\"st0\">\"net\"</span><span class=\"br0\">)</span><br/>server = net.<span class=\"me1\">createServer</span> <span class=\"br0\">(</span>conn<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  console.<span class=\"me1\">log</span> <span class=\"st0\">\"Connection from #{conn.remoteAddress} on port  #{conn.remotePort}\"</span><br/>  conn.<span class=\"me1\">setEncoding</span> <span class=\"st0\">\"utf8\"</span><br/>  buffer = <span class=\"st0\">\"\"</span><br/>  conn.<span class=\"kw4\">on</span> <span class=\"st0\">\"data\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>data<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    i = <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> i <span class=\"sy0\">&lt;</span>= data.<span class=\"me1\">length</span><br/>      char = data.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      buffer <span class=\"sy0\">+</span>= char<br/>      <span class=\"kw1\">if</span> char <span class=\"kw2\">is</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>        conn.<span class=\"me1\">write</span> buffer<br/>        buffer = <span class=\"st0\">\"\"</span><br/>      i<span class=\"sy0\">++</span><br/>\u00a0<br/>server.<span class=\"me1\">listen</span> <span class=\"nu0\">12321</span><span class=\"sy0\">,</span> <span class=\"st0\">\"localhost\"</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 25, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ql<span class=\"sy0\">:</span><span class=\"me1\">quickload</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"sy0\">:</span><span class=\"me1\">usocket</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defpackage <span class=\"sy0\">:</span><span class=\"me1\">echo</span> <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">use</span> <span class=\"sy0\">:</span><span class=\"me1\">cl</span> <span class=\"sy0\">:</span><span class=\"me1\">usocket</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>in-package <span class=\"sy0\">:</span><span class=\"me1\">echo</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> read-all <span class=\"br0\">(</span>stream<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for char <span class=\"sy0\">=</span> <span class=\"br0\">(</span>read-char-no-hang stream <span class=\"kw1\">nil</span> <span class=\"sy0\">:</span><span class=\"me1\">eof</span><span class=\"br0\">)</span><br/>     until <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span> char<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">eql</span> char <span class=\"sy0\">:</span><span class=\"me1\">eof</span><span class=\"br0\">)</span><span class=\"br0\">)</span> collect char into msg<br/>     finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span>values msg char<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> echo-server <span class=\"br0\">(</span>port <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>log-stream *standard-output*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>connections <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>socket-listen <span class=\"st0\">\"127.0.0.1\"</span> port <span class=\"sy0\">:</span><span class=\"me1\">reuse-address</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>unwind-protect<br/>\t <span class=\"br0\">(</span>loop <span class=\"br0\">(</span>loop for ready in <span class=\"br0\">(</span>wait-for-input connections <span class=\"sy0\">:</span><span class=\"me1\">ready-only</span> t<span class=\"br0\">)</span><br/>\t\t  <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>typep ready 'stream-server-usocket<span class=\"br0\">)</span><br/>\t\t\t <span class=\"br0\">(</span>push <span class=\"br0\">(</span>socket-accept ready<span class=\"br0\">)</span> connections<span class=\"br0\">)</span><br/>\t\t\t <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>stream <span class=\"br0\">(</span>socket-stream ready<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">(</span>msg <span class=\"br0\">(</span>concatenate 'string <span class=\"st0\">\"You said: \"</span> <span class=\"br0\">(</span>read-all stream<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t   <span class=\"br0\">(</span>format log-stream <span class=\"st0\">\"Got message...~%\"</span><span class=\"br0\">)</span><br/>\t\t\t   <span class=\"br0\">(</span>write-string msg stream<span class=\"br0\">)</span><br/>\t\t\t   <span class=\"br0\">(</span>socket-close ready<span class=\"br0\">)</span><br/>\t\t\t   <span class=\"br0\">(</span><span class=\"kw1\">setf</span> connections <span class=\"br0\">(</span><span class=\"kw1\">remove</span> ready connections<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>loop for c in connections <span class=\"kw1\">do</span> <span class=\"br0\">(</span>loop while <span class=\"br0\">(</span>socket-close c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>echo-server <span class=\"nu0\">12321</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 20, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span> std.<span class=\"me1\">socket</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> listener <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> TcpSocket<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>listener.<span class=\"me1\">isAlive</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    listener.<span class=\"me1\">bind</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> InternetAddress<span class=\"br0\">(</span><span class=\"nu0\">12321</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    listener.<span class=\"me1\">listen</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    Socket currSock<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">uint</span> bytesRead<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">ubyte</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> buff<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        currSock <span class=\"sy0\">=</span> listener.<span class=\"me1\">accept</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>bytesRead <span class=\"sy0\">=</span> currSock.<span class=\"me1\">receive</span><span class=\"br0\">(</span>buff<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            currSock.<span class=\"me1\">send</span><span class=\"br0\">(</span>buff<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        currSock.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        buff.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 58, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> EchoServer<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> SysUtils<span class=\"sy1\">,</span> IdContext<span class=\"sy1\">,</span> IdTCPServer<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  TEchoServer <span class=\"sy3\">=</span> <span class=\"kw1\">class</span><br/>  <span class=\"kw1\">private</span><br/>    FTCPServer<span class=\"sy1\">:</span> TIdTCPServer<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">public</span><br/>    <span class=\"kw1\">constructor</span> Create<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">destructor</span> Destroy<span class=\"sy1\">;</span> <span class=\"kw1\">override</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">procedure</span> TCPServerExecute<span class=\"br0\">(</span>AContext<span class=\"sy1\">:</span> TIdContext<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">constructor</span> TEchoServer<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  FTCPServer <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TIdTCPServer<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span><span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  FTCPServer<span class=\"sy1\">.</span><span class=\"me1\">DefaultPort</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">12321</span><span class=\"sy1\">;</span><br/>  FTCPServer<span class=\"sy1\">.</span><span class=\"me1\">OnExecute</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TCPServerExecute<span class=\"sy1\">;</span><br/>  FTCPServer<span class=\"sy1\">.</span><span class=\"me1\">Active</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">True</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">destructor</span> TEchoServer<span class=\"sy1\">.</span><span class=\"me1\">Destroy</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  FTCPServer<span class=\"sy1\">.</span><span class=\"me1\">Active</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">False</span><span class=\"sy1\">;</span><br/>  FTCPServer<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">inherited</span> Destroy<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> TEchoServer<span class=\"sy1\">.</span><span class=\"me1\">TCPServerExecute</span><span class=\"br0\">(</span>AContext<span class=\"sy1\">:</span> TIdContext<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  lCmdLine<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  lCmdLine <span class=\"sy1\">:</span><span class=\"sy3\">=</span> AContext<span class=\"sy1\">.</span><span class=\"me1\">Connection</span><span class=\"sy1\">.</span><span class=\"me1\">IOHandler</span><span class=\"sy1\">.</span><span class=\"me1\">ReadLn</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'&gt;'</span> <span class=\"sy3\">+</span> lCmdLine<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  AContext<span class=\"sy1\">.</span><span class=\"me1\">Connection</span><span class=\"sy1\">.</span><span class=\"me1\">IOHandler</span><span class=\"sy1\">.</span><span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'&gt;'</span> <span class=\"sy3\">+</span> lCmdLine<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"kw3\">SameText</span><span class=\"br0\">(</span>lCmdLine<span class=\"sy1\">,</span> <span class=\"st0\">'QUIT'</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">begin</span><br/>    AContext<span class=\"sy1\">.</span><span class=\"me1\">Connection</span><span class=\"sy1\">.</span><span class=\"me1\">IOHandler</span><span class=\"sy1\">.</span><span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Disconnecting'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    AContext<span class=\"sy1\">.</span><span class=\"me1\">Connection</span><span class=\"sy1\">.</span><span class=\"me1\">Disconnect</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  lEchoServer<span class=\"sy1\">:</span> TEchoServer<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  lEchoServer <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TEchoServer<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">try</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Delphi Echo Server'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Press Enter to quit'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    Readln<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">finally</span><br/>    lEchoServer<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Erlang", "loc": 23, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>echo<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>start<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw3\">spawn</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Sock</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/gen_tcp.html\"><span class=\"kw5\">gen_tcp</span></a>:<span class=\"re3\">listen</span><span class=\"br0\">(</span><span class=\"nu0\">12321</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">{</span>packet<span class=\"sy1\">,</span> line<span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                    <span class=\"re3\">echo_loop</span><span class=\"br0\">(</span><span class=\"re5\">Sock</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">echo_loop</span><span class=\"br0\">(</span><span class=\"re5\">Sock</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Conn</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/gen_tcp.html\"><span class=\"kw5\">gen_tcp</span></a>:<span class=\"re3\">accept</span><span class=\"br0\">(</span><span class=\"re5\">Sock</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Got connection: ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Conn</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Handler</span> <span class=\"sy3\">=</span> <span class=\"kw3\">spawn</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">handle</span><span class=\"br0\">(</span><span class=\"re5\">Conn</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/gen_tcp.html\"><span class=\"kw5\">gen_tcp</span></a>:<span class=\"re3\">controlling_process</span><span class=\"br0\">(</span><span class=\"re5\">Conn</span><span class=\"sy1\">,</span> <span class=\"re5\">Handler</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">echo_loop</span><span class=\"br0\">(</span><span class=\"re5\">Sock</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">handle</span><span class=\"br0\">(</span><span class=\"re5\">Conn</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">receive</span><br/>        <span class=\"br0\">{</span>tcp<span class=\"sy1\">,</span> <span class=\"re5\">Conn</span><span class=\"sy1\">,</span> <span class=\"re5\">Data</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>            <a href=\"http://erlang.org/doc/man/gen_tcp.html\"><span class=\"kw5\">gen_tcp</span></a>:<span class=\"re3\">send</span><span class=\"br0\">(</span><span class=\"re5\">Conn</span><span class=\"sy1\">,</span> <span class=\"re5\">Data</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>            <span class=\"re3\">handle</span><span class=\"br0\">(</span><span class=\"re5\">Conn</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"br0\">{</span>tcp_closed<span class=\"sy1\">,</span> <span class=\"re5\">Conn</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>            <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Connection closed: ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Conn</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "F#", "loc": 30, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System.<span class=\"me1\">IO</span><br/><span class=\"kw1\">open</span> System.<span class=\"me1\">Net</span><br/><span class=\"kw1\">open</span> System.<span class=\"me1\">Net</span>.<span class=\"me1\">Sockets</span><br/>\u00a0<br/><span class=\"kw1\">let</span> service <span class=\"br0\">(</span>client:TcpClient<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">use</span> stream <span class=\"sy0\">=</span> client.<span class=\"me1\">GetStream</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">use</span> out <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StreamWriter<span class=\"br0\">(</span>stream, AutoFlush <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">use</span> inp <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StreamReader<span class=\"br0\">(</span>stream<span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> inp.<span class=\"me1\">EndOfStream</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">match</span> inp.<span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">with</span><br/>        | line <span class=\"sy0\">-&gt;</span> printfn <span class=\"st0\">\"&lt;\u00a0%s\"</span> line<br/>                  out.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"closed\u00a0%A\"</span> client.<span class=\"me1\">Client</span>.<span class=\"me1\">RemoteEndPoint</span><br/>    client.<span class=\"me1\">Close</span> <span class=\"sy0\">|&gt;</span> <span class=\"kw3\">ignore</span><br/>\u00a0<br/><span class=\"kw1\">let</span> EchoService <span class=\"sy0\">=</span> <br/>    <span class=\"kw1\">let</span> socket <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> TcpListener<span class=\"br0\">(</span>IPAddress.<span class=\"me1\">Loopback</span>, <span class=\"nu0\">12321</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">do</span> socket.<span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"echo service listening on\u00a0%A\"</span> socket.<span class=\"me1\">Server</span>.<span class=\"me1\">LocalEndPoint</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw1\">true</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">let</span> client <span class=\"sy0\">=</span> socket.<span class=\"me1\">AcceptTcpClient</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        printfn <span class=\"st0\">\"connect from\u00a0%A\"</span> client.<span class=\"me1\">Client</span>.<span class=\"me1\">RemoteEndPoint</span><br/>        <span class=\"kw1\">let</span> job <span class=\"sy0\">=</span> <span class=\"kw4\">async</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">use</span> c <span class=\"sy0\">=</span> client <span class=\"kw1\">in</span> <span class=\"kw1\">try</span> service client <span class=\"kw1\">with</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        Async.<span class=\"me1\">Start</span> job<br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main _ <span class=\"sy0\">=</span><br/>    EchoService<br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Factor", "loc": 17, "block": "<pre class=\"text highlighted_source\">USING: accessors io io.encodings.utf8 io.servers io.sockets threads\u00a0;<br/>IN: rosetta.echo<br/>\u00a0<br/>CONSTANT: echo-port 12321<br/>\u00a0<br/>: handle-client ( -- )<br/>   [ print flush ] each-line\u00a0;<br/>\u00a0<br/>: &lt;echo-server&gt; ( -- threaded-server )<br/>    utf8 &lt;threaded-server&gt;<br/>        \"echo server\" &gt;&gt;name<br/>        echo-port &gt;&gt;insecure<br/>        [ handle-client ] &gt;&gt;handler\u00a0;<br/>\u00a0<br/>: start-echo-server ( -- )<br/>    &lt;echo-server&gt; [ start-server ] in-thread start-server drop\u00a0;<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 30, "block": "<pre class=\"text highlighted_source\">include unix/socket.fs<br/>\u00a0<br/>128 constant size<br/>\u00a0<br/>: (echo) ( sock buf -- sock buf )<br/>  begin<br/>    cr .\" waiting...\"<br/>    2dup 2dup size read-socket nip<br/>    dup 0&gt;<br/>  while<br/>    .\"  got: \" 2dup type<br/>    rot write-socket<br/>  repeat<br/>  drop drop drop\u00a0;<br/>\u00a0<br/>create buf size allot<br/>\u00a0<br/>: echo-server ( port -- )<br/>  cr .\" Listening on \" dup .<br/>  create-server<br/>  dup 4 listen<br/>  begin<br/>    dup accept-socket<br/>    cr .\" Connection!\"<br/>    buf ['] (echo) catch<br/>    cr .\" Disconnected (\" . .\" )\"<br/>    drop close-socket<br/>  again\u00a0;<br/>\u00a0<br/>12321 echo-server</pre>"}, {"lang": "Go", "loc": 31, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"net\"</span><br/>\t<span class=\"st0\">\"bufio\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> echo<span class=\"sy1\">(</span>s <a href=\"http://golang.org/search?q=net.Conn\"><span class=\"kw5\">net.<span class=\"me1\">Conn</span></span></a><span class=\"sy1\">,</span> <span class=\"nu2\">i</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">defer</span> s<span class=\"sy3\">.</span>Close<span class=\"sy1\">();</span><br/>\u00a0<br/>\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%d:\u00a0%v &lt;-&gt;\u00a0%v<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> s<span class=\"sy3\">.</span>LocalAddr<span class=\"sy1\">(),</span> s<span class=\"sy3\">.</span>RemoteAddr<span class=\"sy1\">())</span><br/>\tb <span class=\"sy2\">:=</span> bufio<span class=\"sy3\">.</span>NewReader<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>\t\tline<span class=\"sy1\">,</span> e <span class=\"sy2\">:=</span> b<span class=\"sy3\">.</span>ReadBytes<span class=\"sy1\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">if</span> e <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">break</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\ts<span class=\"sy3\">.</span>Write<span class=\"sy1\">(</span>line<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%d: closed<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tl<span class=\"sy1\">,</span> e <span class=\"sy2\">:=</span> net<span class=\"sy3\">.</span>Listen<span class=\"sy1\">(</span><span class=\"st0\">\"tcp\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\":12321\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> e <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">var</span> s <a href=\"http://golang.org/search?q=net.Conn\"><span class=\"kw5\">net.<span class=\"me1\">Conn</span></span></a><br/>\t\ts<span class=\"sy1\">,</span> e <span class=\"sy2\">=</span> l<span class=\"sy3\">.</span>Accept<span class=\"sy1\">()</span><br/>\t\t<span class=\"kw1\">go</span> echo<span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 25, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">module</span> Main <span class=\"kw1\">where</span><br/><span class=\"kw1\">import</span> Network <span class=\"br0\">(</span>withSocketsDo<span class=\"sy0\">,</span> accept<span class=\"sy0\">,</span> listenOn<span class=\"sy0\">,</span> sClose<span class=\"sy0\">,</span> PortID<span class=\"br0\">(</span>PortNumber<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>forever<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span>hGetLine<span class=\"sy0\">,</span> hPutStrLn<span class=\"sy0\">,</span> hFlush<span class=\"sy0\">,</span> hClose<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a><span class=\"sy0\">.</span>Error <span class=\"br0\">(</span>isEOFError<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Concurrent <span class=\"br0\">(</span>forkIO<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Exception <span class=\"br0\">(</span>bracket<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- For convenience in testing, ensure that the listen socket is closed if the main loop is aborted</span><br/>withListenOn port body <span class=\"sy0\">=</span> bracket <span class=\"br0\">(</span>listenOn port<span class=\"br0\">)</span> sClose body<br/>\u00a0<br/>echo <span class=\"br0\">(</span>handle<span class=\"sy0\">,</span> host<span class=\"sy0\">,</span> port<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:catch\"><span class=\"kw3\">catch</span></a> <span class=\"br0\">(</span>forever doOneLine<span class=\"br0\">)</span> stop <span class=\"kw1\">where</span><br/>  doOneLine <span class=\"sy0\">=</span> <span class=\"kw1\">do</span> line <span class=\"sy0\">&lt;-</span> hGetLine handle<br/>                 <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"br0\">(</span>host<span class=\"sy0\">,</span> port<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:init\"><span class=\"kw3\">init</span></a> line<span class=\"br0\">)</span><br/>                 hPutStrLn handle line<br/>                 hFlush handle<br/>  stop <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:error\"><span class=\"kw3\">error</span></a> <span class=\"sy0\">=</span> <span class=\"kw1\">do</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"Closed connection from \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>host<span class=\"sy0\">,</span> port<span class=\"br0\">)</span> <span class=\"sy0\">++</span> <span class=\"st0\">\" due to \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:error\"><span class=\"kw3\">error</span></a><br/>                  hClose handle<br/>\u00a0<br/>main <span class=\"sy0\">=</span> withSocketsDo <span class=\"sy0\">$</span><br/>  withListenOn <span class=\"br0\">(</span>PortNumber <span class=\"nu0\">12321</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> \\listener <span class=\"sy0\">-&gt;</span><br/>    forever <span class=\"sy0\">$</span> <span class=\"kw1\">do</span><br/>      acc<span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">_,</span> host<span class=\"sy0\">,</span> port<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> accept listener<br/>      <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"Accepted connection from \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>host<span class=\"sy0\">,</span> port<span class=\"br0\">)</span><br/>      forkIO <span class=\"br0\">(</span>echo acc<span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 18, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw2\">global</span> mlck<span class=\"sy0\">,</span> nCons<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    mlck <span class=\"sy0\">:=</span> mutex<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    nCons <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> f <span class=\"sy0\">:=</span> <span class=\"kw4\">open</span><span class=\"br0\">(</span><span class=\"st0\">\":12321\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"na\"</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        handle_client<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        critical mlck<span class=\"sy0\">:</span> <span class=\"kw1\">if</span> nCons <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw4\">close</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> handle_client<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    critical mlck<span class=\"sy0\">:</span> nCons <span class=\"sy0\">+:=</span> <span class=\"nu0\">1</span><br/>    thread <span class=\"br0\">{</span><br/>        <span class=\"kw4\">select</span><span class=\"br0\">(</span>f<span class=\"sy0\">,</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"kw1\">repeat</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span>f<span class=\"sy0\">,</span><span class=\"kw4\">reads</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        critical mlck<span class=\"sy0\">:</span> nCons <span class=\"sy0\">-:=</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Java", "loc": 78, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.io.BufferedReader</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.IOException</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.InputStreamReader</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.PrintWriter</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.net.ServerSocket</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.net.Socket</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> EchoServer <span class=\"br0\">{</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aserversocket+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">ServerSocket</span></a> serverSocket<span class=\"sy0\">;</span>\t<br/>\t<span class=\"kw1\">public</span> EchoServer<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\t\t<br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">void</span> start<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>\t\t<br/>\t\t<span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>\t\t\tserverSocket <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aserversocket+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">ServerSocket</span></a><span class=\"br0\">(</span><span class=\"nu0\">12321</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Athread+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Thread</span></a> clientThread <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Athread+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Thread</span></a><span class=\"br0\">(</span><span class=\"kw1\">new</span> ClientHandler<span class=\"br0\">(</span>serverSocket.<span class=\"me1\">accept</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tclientThread.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\te.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">finally</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"closing server socket\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tserverSocket.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\te.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tEchoServer es <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> EchoServer<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tes.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> ClientHandler <span class=\"kw1\">implements</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arunnable+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Runnable</span></a> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> numConnections<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw4\">int</span> connectionId <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asocket+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Socket</span></a> clientSocket<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> ClientHandler<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asocket+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Socket</span></a> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tconnectionId <span class=\"sy0\">=</span> numConnections<span class=\"sy0\">++;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"handling connection, #\"</span> <span class=\"sy0\">+</span> connectionId<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tclientSocket <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">void</span> run<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aprintwriter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">PrintWriter</span></a> out <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedReader</span></a> in <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>\t\t\tout <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aprintwriter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">PrintWriter</span></a><span class=\"br0\">(</span>clientSocket.<span class=\"me1\">getOutputStream</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tin <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedReader</span></a><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainputstreamreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InputStreamReader</span></a><span class=\"br0\">(</span>clientSocket.<span class=\"me1\">getInputStream</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> inputLine, outputLine<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span>inputLine <span class=\"sy0\">=</span> in.<span class=\"me1\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\toutputLine <span class=\"sy0\">=</span> inputLine<span class=\"sy0\">;</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"received: \"</span> <span class=\"sy0\">+</span> outputLine<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tout.<span class=\"me1\">write</span><span class=\"br0\">(</span>outputLine<span class=\"sy0\">+</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tout.<span class=\"me1\">flush</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>outputLine.<span class=\"me1\">equals</span><span class=\"br0\">(</span><span class=\"st0\">\"exit\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\te.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">finally</span> <span class=\"br0\">{</span><br/>\t\t\tout.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>\t\t\t\tin.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tclientSocket.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"closing connection, #\"</span> <span class=\"sy0\">+</span> connectionId<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\te.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 20, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> net <span class=\"sy0\">=</span> require<span class=\"br0\">(</span><span class=\"st0\">'net'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> server <span class=\"sy0\">=</span> net.<span class=\"me1\">createServer</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>conn<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"Connection from \"</span> <span class=\"sy0\">+</span> conn.<span class=\"me1\">remoteAddress</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" on port \"</span> <span class=\"sy0\">+</span> conn.<span class=\"me1\">remotePort</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  conn.<span class=\"me1\">setEncoding</span><span class=\"br0\">(</span><span class=\"st0\">\"utf8\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">var</span> buffer <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  conn.<span class=\"me1\">on</span><span class=\"br0\">(</span><span class=\"st0\">\"data\"</span><span class=\"sy0\">,</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> data.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">var</span> <span class=\"kw5\">char</span> <span class=\"sy0\">=</span> data.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      buffer <span class=\"sy0\">+=</span> <span class=\"kw5\">char</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw5\">char</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        conn.<span class=\"me1\">write</span><span class=\"br0\">(</span>buffer<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        buffer <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>server.<span class=\"me1\">listen</span><span class=\"br0\">(</span><span class=\"nu0\">12321</span><span class=\"sy0\">,</span> <span class=\"st0\">\"localhost\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Kotlin", "loc": 49, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">BufferedReader</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">InputStreamReader</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">PrintWriter</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">net</span>.<span class=\"me1\">ServerSocket</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">net</span>.<span class=\"me1\">Socket</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> ClientHandler<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> clientSocket<span class=\"sy0\">:</span> Socket<span class=\"br0\">)</span><span class=\"sy0\">:</span> Runnable <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> connectionId<span class=\"sy0\">:</span> Int<br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>        connectionId <span class=\"sy0\">=</span> ++numConnections<br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Handling connection, #$connectionId\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun run<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pw <span class=\"sy0\">=</span> PrintWriter<span class=\"br0\">(</span>clientSocket.<span class=\"me1\">outputStream</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> br <span class=\"sy0\">=</span> BufferedReader<span class=\"br0\">(</span>InputStreamReader<span class=\"br0\">(</span>clientSocket.<span class=\"me1\">inputStream</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> line <span class=\"sy0\">=</span> br.<span class=\"me1\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">?:</span> break<br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"Received: $line\"</span><span class=\"br0\">)</span><br/>            pw.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"$line<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>            pw.<span class=\"me1\">flush</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>line <span class=\"sy0\">==</span> <span class=\"st0\">\"exit\"</span><span class=\"br0\">)</span> break<br/>        <span class=\"br0\">}</span><br/>        br.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        pw.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        clientSocket.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Closing connection, #$connectionId\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> companion <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> numConnections <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> serverSocket <span class=\"sy0\">=</span> ServerSocket<span class=\"br0\">(</span><span class=\"nu0\">12321</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>           Thread<span class=\"br0\">(</span>ClientHandler<span class=\"br0\">(</span>serverSocket.<span class=\"me1\">accept</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">finally</span></a> <span class=\"br0\">{</span><br/>        serverSocket.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Closing server socket\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LFE", "loc": 20, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> start <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>spawn <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>`#<span class=\"br0\">(</span>ok <span class=\"sy0\">,</span>socket<span class=\"br0\">)</span> <span class=\"br0\">(</span>gen_tcp<span class=\"sy0\">:</span><span class=\"me1\">listen</span> <span class=\"nu0\">12321</span> `<span class=\"br0\">(</span>#<span class=\"br0\">(</span>packet line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>echo-loop socket<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> echo-loop <span class=\"br0\">(</span>socket<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>`#<span class=\"br0\">(</span>ok <span class=\"sy0\">,</span>conn<span class=\"br0\">)</span> <span class=\"br0\">(</span>gen_tcp<span class=\"sy0\">:</span><span class=\"me1\">accept</span> socket<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>handler <span class=\"br0\">(</span>spawn <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>handle conn<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>lfe_io<span class=\"sy0\">:</span><span class=\"me1\">format</span> <span class=\"st0\">\"Got connection: ~p~n\"</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> conn<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>gen_tcp<span class=\"sy0\">:</span><span class=\"me1\">controlling_process</span> conn handler<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>echo-loop socket<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> handle <span class=\"br0\">(</span>conn<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>receive<br/>    <span class=\"br0\">(</span>`#<span class=\"br0\">(</span>tcp <span class=\"sy0\">,</span>conn <span class=\"sy0\">,</span>data<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>gen_tcp<span class=\"sy0\">:</span><span class=\"me1\">send</span> conn data<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>`#<span class=\"br0\">(</span>tcp_closed <span class=\"sy0\">,</span>conn<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>lfe_io<span class=\"sy0\">:</span><span class=\"me1\">format</span> <span class=\"st0\">\"Connection closed: ~p~n\"</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> conn<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 31, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw3\">require</span><span class=\"br0\">(</span><span class=\"st0\">\"socket\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">function</span> checkOn <span class=\"br0\">(</span>client<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> line<span class=\"sy0\">,</span> err <span class=\"sy0\">=</span> client<span class=\"sy0\">:</span>receive<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> line <span class=\"kw1\">then</span><br/>        <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">tostring</span><span class=\"br0\">(</span>client<span class=\"br0\">)</span> <span class=\"sy0\">..</span> <span class=\"st0\">\" said \"</span> <span class=\"sy0\">..</span> line<span class=\"br0\">)</span><br/>        client<span class=\"sy0\">:</span>send<span class=\"br0\">(</span>line <span class=\"sy0\">..</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> err <span class=\"kw2\">and</span> err <span class=\"sy0\">~=</span> <span class=\"st0\">\"timeout\"</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">tostring</span><span class=\"br0\">(</span>client<span class=\"br0\">)</span> <span class=\"sy0\">..</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">..</span> err<span class=\"br0\">)</span><br/>        client<span class=\"sy0\">:</span>close<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> err<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">nil</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> delay<span class=\"sy0\">,</span> clients<span class=\"sy0\">,</span> newClient <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">^-</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">local</span> server <span class=\"sy0\">=</span> <span class=\"kw3\">assert</span><span class=\"br0\">(</span>socket<span class=\"sy0\">.</span>bind<span class=\"br0\">(</span><span class=\"st0\">\"*\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">12321</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>server<span class=\"sy0\">:</span>settimeout<span class=\"br0\">(</span>delay<span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Server started\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">repeat</span><br/>        newClient <span class=\"sy0\">=</span> server<span class=\"sy0\">:</span>accept<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>clients<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">if</span> checkOn<span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw3\">table.remove</span><span class=\"br0\">(</span>clients<span class=\"sy0\">,</span> k<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">until</span> newClient<br/>    newClient<span class=\"sy0\">:</span>settimeout<span class=\"br0\">(</span>delay<span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">tostring</span><span class=\"br0\">(</span>newClient<span class=\"br0\">)</span> <span class=\"sy0\">..</span> <span class=\"st0\">\" connected\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>clients<span class=\"sy0\">,</span> newClient<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Nim", "loc": 18, "block": "<pre class=\"text highlighted_source\">import asyncnet, asyncdispatch<br/>\u00a0<br/>proc processClient(client: AsyncSocket) {.async.} =<br/>  while true:<br/>    let line = await client.recvLine()<br/>    await client.send(line &amp; \"\\c\\L\")<br/>\u00a0<br/>proc serve() {.async.} =<br/>  var server = newAsyncSocket()<br/>  server.bindAddr(Port(12321))<br/>  server.listen()<br/>\u00a0<br/>  while true:<br/>    let client = await server.accept()<br/>    discard processClient(client)<br/>\u00a0<br/>discard serve()<br/>runForever()</pre>"}, {"lang": "Objeck", "loc": 38, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">use</span> Net<span class=\"sy0\">;</span><br/><span class=\"kw1\">use</span> Concurrency<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> SocketServer <span class=\"br0\">{</span><br/>    id <span class=\"sy0\">:</span> <span class=\"kw1\">static</span> <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      server <span class=\"sy0\">:=</span> TCPSocketServer<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"nu0\">12321</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>server<span class=\"sy0\">-&gt;</span><span class=\"me1\">Listen</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"kw3\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          client <span class=\"sy0\">:=</span> server<span class=\"sy0\">-&gt;</span><span class=\"me1\">Accept</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          service <span class=\"sy0\">:=</span> Service<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span>id<span class=\"sy0\">-&gt;</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          service<span class=\"sy0\">-&gt;</span><span class=\"me1\">Execute</span><span class=\"br0\">(</span>client<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          id <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>      server<span class=\"sy0\">-&gt;</span><span class=\"me1\">Close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">class</span> Service <span class=\"kw1\">from</span> Thread <span class=\"br0\">{</span><br/>    New<span class=\"br0\">(</span>name <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      Parent<span class=\"br0\">(</span>name<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> Run<span class=\"br0\">(</span>param <span class=\"sy0\">:</span> Base<span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      client <span class=\"sy0\">:=</span> param<span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span>TCPSocket<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      line <span class=\"sy0\">:=</span> client<span class=\"sy0\">-&gt;</span><span class=\"me1\">ReadString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">while</span><span class=\"br0\">(</span>line<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        line<span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        line <span class=\"sy0\">:=</span> client<span class=\"sy0\">-&gt;</span><span class=\"me1\">ReadString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 36, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  ServerSocket = <span class=\"br0\">{</span>New Open<span class=\"sy0\">.</span>socket init<span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">Echo</span> Socket<span class=\"br0\">}</span><br/>     <span class=\"kw1\">case</span> <span class=\"br0\">{</span>Socket getS<span class=\"br0\">(</span>$<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"kw1\">of</span> <span class=\"kw1\">false</span> <span class=\"kw1\">then</span> <span class=\"kw1\">skip</span><br/>     <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> Line <span class=\"kw1\">then</span><br/>        <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Received line: \"</span><span class=\"sy0\">#</span>Line<span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>Socket write<span class=\"br0\">(</span>vs:Line<span class=\"sy0\">#</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>Echo Socket<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">class</span> <span class=\"re2\">TextSocket</span> <span class=\"kw1\">from</span> Open<span class=\"sy0\">.</span>socket Open<span class=\"sy0\">.</span>text <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>ServerSocket bind<span class=\"br0\">(</span>takePort:12321<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Socket bound.\"</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"br0\">{</span>ServerSocket listen<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Started listening.\"</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"kw1\">do</span><br/>     ClientHost ClientPort<br/>     ClientSocket = <span class=\"br0\">{</span>ServerSocket accept<span class=\"br0\">(</span>accepted:$<br/>\t\t\t\t\t acceptClass:TextSocket<br/>\t\t\t\t\t host:?ClientHost<br/>\t\t\t\t\t port:?ClientPort<br/>\t\t\t\t\t<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Connection accepted from \"</span><span class=\"sy0\">#</span>ClientHost<span class=\"sy0\">#</span><span class=\"st0\">\":\"</span><span class=\"sy0\">#</span>ClientPort<span class=\"sy0\">#</span><span class=\"st0\">\".\"</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">thread</span><br/>        <span class=\"br0\">{</span>Echo ClientSocket<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Connection lost: \"</span><span class=\"sy0\">#</span>ClientHost<span class=\"sy0\">#</span><span class=\"st0\">\":\"</span><span class=\"sy0\">#</span>ClientPort<span class=\"sy0\">#</span><span class=\"st0\">\".\"</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>ClientSocket close<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span></pre>"}, {"lang": "Perl", "loc": 29, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> IO<span class=\"sy0\">::</span><span class=\"me2\">Socket</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$use_fork</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$sock</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> IO<span class=\"sy0\">::</span><span class=\"me2\">Socket</span><span class=\"sy0\">::</span><span class=\"me2\">INET</span> <span class=\"br0\">(</span><br/>                                 LocalHost <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'127.0.0.1'</span><span class=\"sy0\">,</span><br/>                                 LocalPort <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'12321'</span><span class=\"sy0\">,</span><br/>                                 Proto <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'tcp'</span><span class=\"sy0\">,</span><br/>                                 Listen <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>   <span class=\"co1\"># maximum queued connections</span><br/>                                 Reuse <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>                                <span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"socket: $!\"</span><span class=\"sy0\">;</span>\t<span class=\"co1\"># no newline, so perl appends stuff</span><br/>\u00a0<br/><span class=\"re0\">$SIG</span><span class=\"br0\">{</span>CHLD<span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'IGNORE'</span> <span class=\"kw1\">if</span> <span class=\"re0\">$use_fork</span><span class=\"sy0\">;</span>\t<span class=\"co1\"># let perl deal with zombies</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"listening...<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># declare $con 'my' so it's closed by parent every loop</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$con</span> <span class=\"sy0\">=</span> <span class=\"re0\">$sock</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/accept.html\"><span class=\"kw3\">accept</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"accept: $!\"</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/fork.html\"><span class=\"kw3\">fork</span></a> <span class=\"kw1\">and</span> <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$use_fork</span><span class=\"sy0\">;</span>\t<span class=\"co1\"># following are for child only</span><br/>\u00a0<br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"incoming..<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$con</span> <span class=\"co5\">$_</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$con</span><span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>\t<span class=\"co1\"># read each line and write back</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"done<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">last</span>\t<span class=\"kw1\">if</span> <span class=\"re0\">$use_fork</span><span class=\"sy0\">;</span>\t<span class=\"co1\"># if not forking, loop</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># child will reach here and close its copy of $sock before exit</span></pre>"}, {"lang": "Perl 6", "loc": 15, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$socket</span> <span class=\"sy0\">=</span> IO<span class=\"sy0\">::</span><span class=\"me2\">Socket</span><span class=\"sy0\">::</span><span class=\"me2\">INET</span><span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">:</span><br/>    <span class=\"sy0\">:</span>localhost<span class=\"sy0\">&lt;</span>localhost<span class=\"sy0\">&gt;,</span><br/>    <span class=\"sy0\">:</span>localport<span class=\"sy0\">&lt;</span><span class=\"nu0\">12321</span><span class=\"sy0\">&gt;,</span><br/>    <span class=\"sy0\">:</span>listen<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"re0\">$socket</span><span class=\"sy0\">.</span><span class=\"me1\">accept</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$conn</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"Accepted connection\"</span><span class=\"sy0\">;</span><br/>    start <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span> <span class=\"re0\">$conn</span><span class=\"sy0\">.</span><span class=\"me1\">recv</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$stuff</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">say</span> <span class=\"st0\">\"Echoing $stuff\"</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$conn</span><span class=\"sy0\">.</span><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"re0\">$stuff</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"re0\">$conn</span><span class=\"sy0\">.</span><span class=\"me1\">close</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PHP", "loc": 31, "block": "<pre class=\"php highlighted_source\"><span class=\"re0\">$socket</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/socket_create\"><span class=\"kw3\">socket_create</span></a><span class=\"br0\">(</span>AF_INET<span class=\"sy0\">,</span>SOCK_STREAM<span class=\"sy0\">,</span>SOL_TCP<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/socket_bind\"><span class=\"kw3\">socket_bind</span></a><span class=\"br0\">(</span><span class=\"re0\">$socket</span><span class=\"sy0\">,</span> <span class=\"st_h\">'127.0.0.1'</span><span class=\"sy0\">,</span> <span class=\"nu0\">12321</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/socket_listen\"><span class=\"kw3\">socket_listen</span></a><span class=\"br0\">(</span><span class=\"re0\">$socket</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$client_count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw4\">true</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$client</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/socket_accept\"><span class=\"kw3\">socket_accept</span></a><span class=\"br0\">(</span><span class=\"re0\">$socket</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"kw4\">false</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$client_count</span><span class=\"sy0\">++;</span><br/>\u00a0<br/>  <span class=\"re0\">$client_name</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'Unknown'</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.php.net/socket_getpeername\"><span class=\"kw3\">socket_getpeername</span></a><span class=\"br0\">(</span><span class=\"re0\">$client</span><span class=\"sy0\">,</span> <span class=\"re0\">$client_name</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">echo</span> <span class=\"st0\">\"Client <span class=\"es4\">{$client_count}</span> (<span class=\"es4\">{$client_name}</span>) connected<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$pid</span> <span class=\"sy0\">=</span> pcntl_fork<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$pid</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.php.net/die\"><span class=\"kw3\">die</span></a><span class=\"br0\">(</span><span class=\"st_h\">'Could not fork'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$pid</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    pcntl_waitpid<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$status</span><span class=\"sy0\">,</span> WNOHANG<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">//In a child process</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"kw4\">true</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$input</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/socket_read\"><span class=\"kw3\">socket_read</span></a><span class=\"br0\">(</span><span class=\"re0\">$client</span><span class=\"sy0\">,</span> <span class=\"nu0\">1024</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <a href=\"http://www.php.net/socket_write\"><span class=\"kw3\">socket_write</span></a><span class=\"br0\">(</span><span class=\"re0\">$client</span><span class=\"sy0\">,</span> <span class=\"re0\">$input</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      <a href=\"http://www.php.net/socket_shutdown\"><span class=\"kw3\">socket_shutdown</span></a><span class=\"br0\">(</span><span class=\"re0\">$client</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://www.php.net/socket_close\"><span class=\"kw3\">socket_close</span></a><span class=\"br0\">(</span><span class=\"re0\">$client</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">echo</span> <span class=\"st0\">\"Client <span class=\"es4\">{$client_count}</span> (<span class=\"es4\">{$client_name}</span>) disconnected<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>      <a href=\"http://www.php.net/exit\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 16, "block": "<pre class=\"text highlighted_source\">(setq Port (port 12321))<br/>\u00a0<br/>(loop<br/>   (setq Sock (listen Port))           # Listen<br/>   (NIL (fork) (close Port))           # Accepted<br/>   (close Sock) )                      # Parent: Close socket and continue<br/>\u00a0<br/># Child:<br/>(prinl (stamp) \" -- (Pid \" *Pid \") Client connected from \" *Adr)<br/>\u00a0<br/>(in Sock<br/>   (until (eof)                        # Echo lines<br/>      (out Sock (prinl (line))) ) )<br/>\u00a0<br/>(prinl (stamp) \" -- (Pid \" *Pid \") Client disconnected\")<br/>(bye)                                  # Terminate child</pre>"}, {"lang": "PureBasic", "loc": 31, "block": "<pre class=\"purebasic highlighted_source\">NewMap RecData.s<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw2\">OpenWindow</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">200</span>, <span class=\"nu0\">200</span>, <span class=\"nu0\">100</span>, <span class=\"st0\">\"Echo Server\"</span>, #PB_Window_SystemMenu <span class=\"sy0\">|</span> #PB_Window_MinimizeGadget <span class=\"br0\">)</span><br/><span class=\"kw2\">InitNetwork</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw2\">CreateNetworkServer</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">12321</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Repeat</span><br/>   Event <span class=\"sy0\">=</span> <span class=\"kw2\">NetworkServerEvent</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   ClientID <span class=\"sy0\">=</span> <span class=\"kw2\">EventClient</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">If</span> Event <span class=\"sy0\">=</span> #PB_NetworkEvent_Connect    <span class=\"co1\">; When a new client has been connected...</span><br/>      AddMapElement<span class=\"br0\">(</span>RecData<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"kw2\">Str</span><span class=\"br0\">(</span>ClientID<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">ElseIf</span> Event <span class=\"sy0\">=</span> #PB_NetworkEvent_Data<br/>      <span class=\"sy0\">*</span>Buffer <span class=\"sy0\">=</span> <span class=\"kw2\">AllocateMemory</span><span class=\"br0\">(</span><span class=\"nu0\">20000</span><span class=\"br0\">)</span><br/>      count <span class=\"sy0\">=</span> <span class=\"kw2\">ReceiveNetworkData</span><span class=\"br0\">(</span>ClientID, <span class=\"sy0\">*</span>Buffer, <span class=\"nu0\">20000</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> count<br/>         RecData<span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>ClientID<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Mid</span><span class=\"br0\">(</span> <span class=\"kw2\">PeekS</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>Buffer, count<span class=\"br0\">)</span>, i , <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">If</span> <span class=\"kw2\">Right</span><span class=\"br0\">(</span> RecData<span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>ClientID<span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> #CRLF$<br/>            <span class=\"kw2\">SendNetworkString</span> <span class=\"br0\">(</span>ClientID, RecData<span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>ClientID<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">Debug</span>  <span class=\"kw2\">IPString</span><span class=\"br0\">(</span><span class=\"kw2\">GetClientIP</span><span class=\"br0\">(</span>ClientID<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\":\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span><span class=\"kw2\">GetClientPort</span><span class=\"br0\">(</span>ClientID<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"  \"</span> <span class=\"sy0\">+</span> RecData<span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>ClientID<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            RecData<span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>ClientID<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span>   <br/>         <span class=\"kw1\">EndIf</span><br/>      <span class=\"kw1\">Next</span><br/>      <span class=\"kw2\">FreeMemory</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>Buffer<span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">ElseIf</span> Event <span class=\"sy0\">=</span> #PB_NetworkEvent_Disconnect  <span class=\"co1\">; When a client has closed the connection...</span><br/>      DeleteMapElement<span class=\"br0\">(</span>RecData<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"kw2\">Str</span><span class=\"br0\">(</span>ClientID<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>   Event <span class=\"sy0\">=</span> <span class=\"kw2\">WaitWindowEvent</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Until</span> Event <span class=\"sy0\">=</span> #PB_Event_CloseWindow</pre>"}, {"lang": "Python", "loc": 33, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">SocketServer</span><br/>\u00a0<br/>HOST <span class=\"sy0\">=</span> <span class=\"st0\">\"localhost\"</span><br/>PORT <span class=\"sy0\">=</span> <span class=\"nu0\">12321</span><br/>\u00a0<br/><span class=\"co1\"># this server uses ThreadingMixIn - one thread per connection</span><br/><span class=\"co1\"># replace with ForkMixIn to spawn a new process per connection</span><br/>\u00a0<br/><span class=\"kw1\">class</span> EchoServer<span class=\"br0\">(</span><span class=\"kw3\">SocketServer</span>.<span class=\"me1\">ThreadingMixIn</span><span class=\"sy0\">,</span> <span class=\"kw3\">SocketServer</span>.<span class=\"me1\">TCPServer</span><span class=\"br0\">)</span>:<br/>    <span class=\"co1\"># no need to override anything - default behavior is just fine</span><br/>    <span class=\"kw1\">pass</span><br/>\u00a0<br/><span class=\"kw1\">class</span> EchoRequestHandler<span class=\"br0\">(</span><span class=\"kw3\">SocketServer</span>.<span class=\"me1\">StreamRequestHandler</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"<br/>    Handles one connection to the client.<br/>    \"\"\"</span><br/>    <span class=\"kw1\">def</span> handle<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"connection from\u00a0%s\"</span>\u00a0% <span class=\"kw2\">self</span>.<span class=\"me1\">client_address</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>            line <span class=\"sy0\">=</span> <span class=\"kw2\">self</span>.<span class=\"me1\">rfile</span>.<span class=\"kw3\">readline</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> line: <span class=\"kw1\">break</span><br/>            <span class=\"kw1\">print</span> <span class=\"st0\">\"%s wrote:\u00a0%s\"</span>\u00a0% <span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">client_address</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> line.<span class=\"me1\">rstrip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw2\">self</span>.<span class=\"me1\">wfile</span>.<span class=\"me1\">write</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"%s disconnected\"</span>\u00a0% <span class=\"kw2\">self</span>.<span class=\"me1\">client_address</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\"># Create the server</span><br/>server <span class=\"sy0\">=</span> EchoServer<span class=\"br0\">(</span><span class=\"br0\">(</span>HOST<span class=\"sy0\">,</span> PORT<span class=\"br0\">)</span><span class=\"sy0\">,</span> EchoRequestHandler<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Activate the server; this will keep running until you</span><br/><span class=\"co1\"># interrupt the program with Ctrl-C</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"server listening on\u00a0%s:%s\"</span>\u00a0% server.<span class=\"me1\">server_address</span><br/>server.<span class=\"me1\">serve_forever</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define listener (tcp-listen 12321))<br/>(let echo-server ()<br/>  (define-values [I O] (tcp-accept listener))<br/>  (thread (\u03bb() (copy-port I O) (close-output-port O)))<br/>  (echo-server))<br/>\u00a0</pre>"}, {"lang": "REALbasic", "loc": 35, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/>Class EchoSocket<br/>Inherits TCPSocket<br/>  <span class=\"kw2\">Sub</span> DataAvailable()<br/>    <span class=\"kw3\">If</span> Instr(Me.LookAhead, EndofLine.Windows) &gt; 0 <span class=\"kw3\">Then</span><br/>      <span class=\"kw4\">Dim</span> data <span class=\"kw4\">As</span> <span class=\"kw1\">String</span> = Me.ReadAll<br/>      <span class=\"kw4\">Dim</span> lines() <span class=\"kw4\">As</span> <span class=\"kw1\">String</span> = Split(data, EndofLine.Windows)<br/>      <span class=\"kw3\">For</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span> = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">Ubound</span>(lines)<br/>        Me.Write(lines(i) + EndOfLine.Windows)<br/>        <span class=\"kw4\">Print</span>(lines(i))<br/>      <span class=\"kw3\">Next</span><br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>  <span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/><span class=\"kw3\">End</span> Class<br/>\u00a0<br/>Class EchoServer<br/>Inherits ServerSocket<br/>  <span class=\"kw2\">Function</span> AddSocket() <span class=\"kw4\">As</span> TCPSocket<br/>    Return <span class=\"kw2\">New</span> EchoSocket<br/>  <span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/><span class=\"kw3\">End</span> Class<br/>\u00a0<br/>Class App<br/>Inherits ConsoleApplication<br/>  <span class=\"kw2\">Function</span> Run(args() <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>    Listener = <span class=\"kw2\">New</span> EchoServer<br/>    Listener.Port = 12321<br/>    Listener.Listen()<br/>    <span class=\"kw3\">While</span> <span class=\"kw5\">True</span><br/>      <span class=\"kw3\">DoEvents</span>() <span class=\"co1\">'pump the event loop<br/></span>    Wend<br/>  <span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>  <span class=\"kw2\">Private</span> Listener <span class=\"kw4\">As</span> EchoServer<br/><span class=\"kw3\">End</span> Class<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 10, "block": "<pre class=\"rebol highlighted_source\">server-port: <span class=\"kw3\">open</span><span class=\"sy0\">/</span>lines tcp:<span class=\"sy0\">//</span>:<span class=\"nu0\">12321</span><br/><span class=\"kw2\">forever</span> <span class=\"br0\">[</span><br/>    connection-port: <span class=\"kw3\">first</span> server-port<br/>    <span class=\"kw2\">until</span> <span class=\"br0\">[</span><br/>        <span class=\"kw2\">wait</span> connection-port<br/>        <span class=\"kw3\">error?</span> <span class=\"kw2\">try</span> <span class=\"br0\">[</span><span class=\"kw3\">insert</span> connection-port <span class=\"kw3\">first</span> connection-port<span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><br/>    <span class=\"kw3\">close</span> connection-port<br/><span class=\"br0\">]</span><br/><span class=\"kw3\">close</span> server-port</pre>"}, {"lang": "Ruby", "loc": 20, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'socket'</span><br/>server = TCPServer.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">12321</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span>connection = server.<span class=\"me1\">accept</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">Thread</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>connection<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>conn<span class=\"sy0\">|</span><br/>    port, host = conn.<span class=\"me1\">peeraddr</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    client = <span class=\"st0\">\"#{host}:#{port}\"</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{client} is connected\"</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw3\">loop</span> <span class=\"kw1\">do</span><br/>        line = conn.<span class=\"kw3\">readline</span><br/>        <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{client} says: #{line}\"</span><br/>        conn.<span class=\"kw3\">puts</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">rescue</span> <span class=\"kw4\">EOFError</span><br/>      conn.<span class=\"me1\">close</span><br/>      <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{client} has disconnected\"</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 29, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>use std::net::{TcpListener, TcpStream};<br/>use std::io::{BufReader, BufRead, Write};<br/>use std::thread;<br/>\u00a0<br/>fn main() {<br/>    let listener = TcpListener::bind(\"127.0.0.1:12321\").unwrap();<br/>    println!(\"server is running on 127.0.0.1:12321 ...\");<br/>\u00a0<br/>    for stream in listener.incoming() {<br/>        let stream = stream.unwrap();<br/>        thread::spawn(move || handle_client(stream));<br/>    }<br/>}<br/>\u00a0<br/>fn handle_client(stream: TcpStream) {<br/>    let mut stream = BufReader::new(stream);<br/>    loop {<br/>        let mut buf = String::new();<br/>        if stream.read_line(&amp;mut buf).is_err() {<br/>            break;<br/>        }<br/>        stream<br/>            .get_ref()<br/>            .write(buf.as_bytes())<br/>            .unwrap();<br/>    }<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 30, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">PrintWriter</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">net</span>.<span class=\"br0\">{</span>ServerSocket, Socket<span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">io</span>.<span class=\"me1\">Source</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> EchoServer <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> serverSocket <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> ServerSocket<span class=\"br0\">(</span><span class=\"nu0\">23</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> numConnections <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> ClientHandler<span class=\"br0\">(</span>clientSocket<span class=\"sy0\">:</span> Socket<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Runnable <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>connectionId, closeCmd<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">{</span>numConnections +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> numConnections<span class=\"br0\">}</span>, <span class=\"st0\">\":exit\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> run<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> PrintWriter<span class=\"br0\">(</span>clientSocket.<span class=\"me1\">getOutputStream</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span>s<span class=\"st0\">\"Connection opened, close with entering '$closeCmd'.\"</span><span class=\"br0\">)</span><br/>        Source.<span class=\"me1\">fromInputStream</span><span class=\"br0\">(</span>clientSocket.<span class=\"me1\">getInputStream</span><span class=\"br0\">)</span>.<span class=\"me1\">getLines</span><br/>          .<span class=\"me1\">takeWhile</span><span class=\"br0\">(</span><span class=\"sy0\">!_</span>.<span class=\"me1\">toLowerCase</span>.<span class=\"me1\">startsWith</span><span class=\"br0\">(</span>closeCmd<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          .<span class=\"me1\">foreach</span> <span class=\"br0\">{</span> line <span class=\"sy0\">=&gt;</span><br/>            Console.<span class=\"me1\">println</span><span class=\"br0\">(</span>s<span class=\"st0\">\"Received on #$connectionId: $line\"</span><span class=\"br0\">)</span><br/>            println<span class=\"br0\">(</span>line<span class=\"br0\">)</span>  <span class=\"co1\">// Echo</span><br/>          <span class=\"br0\">}</span><br/>        Console.<span class=\"me1\">println</span><span class=\"br0\">(</span>s<span class=\"st0\">\"Gracefully closing connection, #$connectionId\"</span><span class=\"br0\">)</span><br/>        clientSocket.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span>s<span class=\"st0\">\"Handling connection, $connectionId\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Thread<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> ClientHandler<span class=\"br0\">(</span>serverSocket.<span class=\"me1\">accept</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 41, "block": "<pre class=\"scheme highlighted_source\"><span class=\"co1\">; Needed in Guile for read-line</span><br/><span class=\"br0\">(</span>use<span class=\"sy0\">-</span>modules <span class=\"br0\">(</span>ice<span class=\"sy0\">-</span><span class=\"nu0\">9</span> rdelim<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Variable used to hold child PID returned from forking</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> child #f<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Start listening on port 12321 for connections from any address</span><br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">s</span> <span class=\"br0\">(</span>socket PF_INET SOCK_STREAM <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>setsockopt <span class=\"kw1\">s</span> SOL_SOCKET SO_REUSEADDR <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>bind <span class=\"kw1\">s</span> AF_INET INADDR_ANY <span class=\"nu0\">12321</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>listen <span class=\"kw1\">s</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"co1\">; Queue size of 5</span><br/>\u00a0<br/>  <span class=\"br0\">(</span>simple<span class=\"sy0\">-</span>format #t <span class=\"st0\">\"Listening for clients in pid: ~S\"</span> <span class=\"br0\">(</span>getpid<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Wait for connections forever</span><br/>  <span class=\"br0\">(</span>while #t<br/>    <span class=\"br0\">(</span><span class=\"kw1\">let*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>client<span class=\"sy0\">-</span>connection <span class=\"br0\">(</span>accept <span class=\"kw1\">s</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>client<span class=\"sy0\">-</span>details <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> client<span class=\"sy0\">-</span>connection<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>client <span class=\"br0\">(</span><span class=\"kw1\">car</span> client<span class=\"sy0\">-</span>connection<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">; Once something connects fork</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">set!</span> child <span class=\"br0\">(</span>primitive<span class=\"sy0\">-</span>fork<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> child<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">begin</span><br/><span class=\"co1\">; Then have child fork to avoid zombie children (grandchildren aren't our responsibility)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">set!</span> child <span class=\"br0\">(</span>primitive<span class=\"sy0\">-</span>fork<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> child<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">begin</span><br/><span class=\"co1\">; Display some connection details</span><br/>          <span class=\"br0\">(</span>simple<span class=\"sy0\">-</span>format #t <span class=\"st0\">\"Got new client connection: ~S\"</span> client<span class=\"sy0\">-</span>details<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>simple<span class=\"sy0\">-</span>format #t <span class=\"st0\">\"Client address: ~S\"</span><br/>            <span class=\"br0\">(</span>gethostbyaddr <span class=\"br0\">(</span>sockaddr:addr client<span class=\"sy0\">-</span>details<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/><span class=\"co1\">; Wait for input from client and then echo the input back forever (or until client quits)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>line <span class=\"br0\">(</span>read<span class=\"sy0\">-</span>line client<span class=\"br0\">)</span><span class=\"br0\">(</span>read<span class=\"sy0\">-</span>line client<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">display</span> line client<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">newline</span> client<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">; Child exits after spawning grandchild.</span><br/>        <span class=\"br0\">(</span>primitive<span class=\"sy0\">-</span>exit<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">; Parent waits for child to finish spawning grandchild</span><br/>      <span class=\"br0\">(</span>waitpid child<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 29, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"socket.s7i\";<br/>  include \"listener.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var listener: aListener is listener.value;<br/>    var file: existingConnection is STD_NULL;<br/>    var file: newConnection is STD_NULL;<br/>  begin<br/>    aListener\u00a0:= openInetListener(12321);<br/>    listen(aListener, 10);<br/>    while TRUE do<br/>      waitForRequest(aListener, existingConnection, newConnection);<br/>      if existingConnection &lt;&gt; STD_NULL then<br/>        if eof(existingConnection) then<br/>          writeln(\"Close connection \" &lt;&amp; numericAddress(address(existingConnection)) &lt;&amp;<br/>                  \" port \" &lt;&amp; port(existingConnection));<br/>          close(existingConnection);<br/>        else<br/>          write(existingConnection, gets(existingConnection, 1024));<br/>        end if;<br/>      end if;<br/>      if newConnection &lt;&gt; STD_NULL then<br/>        writeln(\"New connection \" &lt;&amp; numericAddress(address(newConnection)) &lt;&amp;<br/>                \" port \" &lt;&amp; port(newConnection));<br/>      end if;<br/>    end while;<br/>  end func;</pre>"}, {"lang": "Tcl", "loc": 21, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># How to handle an incoming new connection</span><br/><span class=\"kw1\">proc</span> acceptEcho <span class=\"br0\">{</span>chan host port<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"opened connection from $host:$port\"</span><br/>    <span class=\"kw2\">fconfigure</span> <span class=\"re0\">$chan</span> -blocking <span class=\"nu0\">0</span> -buffering line -translation crlf<br/>    <span class=\"kw2\">fileevent</span> <span class=\"re0\">$chan</span> readable <span class=\"br0\">[</span><span class=\"kw2\">list</span> echo <span class=\"re0\">$chan</span> <span class=\"re0\">$host</span> <span class=\"re0\">$port</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># How to handle an incoming message on a connection</span><br/><span class=\"kw1\">proc</span> echo <span class=\"br0\">{</span>chan host port<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">gets</span> <span class=\"re0\">$chan</span> line<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">puts</span> <span class=\"re0\">$chan</span> <span class=\"re0\">$line</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">eof</span> <span class=\"re0\">$chan</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">close</span> <span class=\"re0\">$chan</span><br/>        <span class=\"kw2\">puts</span> <span class=\"st0\">\"closed connection from $host:$port\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># Other conditions causing a short read need no action</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Make the server socket and wait for connections</span><br/><span class=\"kw2\">socket</span> -server acceptEcho -myaddr localhost <span class=\"nu0\">12321</span><br/>vwait forever</pre>"}, {"lang": "X86 Assembly", "loc": 181, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>; x86_64 Linux NASM<br/>\u00a0<br/>global _start<br/>\u00a0<br/>%define af_inet 2<br/>%define sock_stream 1<br/>%define default_proto 0<br/>%define sol_sock 1<br/>%define reuse_addr 2<br/>%define reuse_port 15<br/>%define server_port 9001<br/>%define addr_any 0<br/>%define family_offset 0<br/>%define port_offset 2<br/>%define addr_offset 4<br/>%define unused_offset 8<br/>%define addr_len 16<br/>%define buffer_len 64<br/>%define max_connections 3<br/>\u00a0<br/>\u00a0<br/>section .text<br/>\u00a0<br/>; rdi - 16 bit value to be byte swapped<br/>; return - byte swapped value<br/>htn_swap16:<br/>\u00a0<br/>  xor rax, rax<br/>  mov rdx, 0x000000ff<br/>\u00a0<br/>  mov rsi, rdi<br/>  and rsi, rdx<br/>  shl rsi, 8<br/>  or rax, rsi<br/>  shl rdx, 8<br/>\u00a0<br/>  mov rsi, rdi<br/>  and rsi, rdx<br/>  shr rsi, 8<br/>  or rax, rsi<br/>  ret<br/>\u00a0<br/>; return - server socket<br/>create_server_socket:<br/>\u00a0<br/>  mov rax, 41<br/>  mov rdi, af_inet<br/>  mov rsi, sock_stream<br/>  mov rdx, default_proto<br/>  syscall<br/>  push rax<br/>\u00a0<br/>  mov rax, 54<br/>  mov rdi, qword [rsp]<br/>  mov rsi, sol_sock<br/>  mov rdx, reuse_addr<br/>  mov qword [rsp - 16], 1<br/>  lea r10, [rsp - 16]<br/>  mov r8, 4<br/>  syscall<br/>\u00a0<br/>  mov rax, 54<br/>  mov rdi, qword [rsp]<br/>  mov rsi, sol_sock<br/>  mov rdx, reuse_port<br/>  mov qword [rsp - 16], 1<br/>  lea r10, [rsp - 16]<br/>  mov r8, 4<br/>  syscall<br/>\u00a0<br/>\u00a0<br/>  pop rax<br/>  ret<br/>\u00a0<br/>; rdi - socket<br/>; rsi - port<br/>; rdx - connections<br/>; return - void<br/>bind_and_listen:<br/>\u00a0<br/>  push rdi<br/>  push rdx<br/>\u00a0<br/>  mov rdi, rsi<br/>  call htn_swap16<br/>\u00a0<br/>  lea rsi, [rsp - 16]<br/>  mov word [rsi + family_offset], af_inet<br/>  mov word [rsi + port_offset], ax<br/>  mov dword [rsi + addr_offset], addr_any<br/>  mov qword [rsi + unused_offset], 0<br/>\u00a0<br/>  mov rax, 49<br/>  mov rdi, qword [rsp + 8]<br/>  mov rdx, addr_len<br/>  syscall<br/>\u00a0<br/>  mov rax, 50<br/>  pop rsi<br/>  pop rdi<br/>  syscall<br/>  ret<br/>\u00a0<br/>; rdi - server socket<br/>; return - client socket<br/>accept:<br/>\u00a0<br/>  mov rax, 43<br/>  lea rsi, [rsp - 16]<br/>  lea rdx, [rsp - 24]<br/>  syscall<br/>  ret<br/>\u00a0<br/>; rdi - client socket<br/>; return - void<br/>echo:<br/>\u00a0<br/>  push rdi<br/>  mov rax, 0<br/>  lea rsi, [rsp - 104]<br/>  mov rdx, buffer_len<br/>  syscall<br/>\u00a0<br/>  pop rdi<br/>  mov rdx, rax <br/>  lea rsi, [rsp - 112]<br/>  mov rax, 1<br/>  syscall<br/>  ret<br/>\u00a0<br/>\u00a0<br/>_start:<br/>\u00a0<br/>  call create_server_socket<br/>  mov r14, rax<br/>\u00a0<br/>  mov rdi, rax<br/>  mov rsi, server_port<br/>  mov rdx, max_connections<br/>  call bind_and_listen<br/>\u00a0<br/>accept_connection:<br/>\u00a0<br/>  mov rdi, r14<br/>  call accept<br/>\u00a0<br/>  mov r15, rax<br/>  mov rax, 57<br/>  syscall<br/>\u00a0<br/>  test rax, rax<br/>  jz handle_connection<br/>\u00a0<br/> \u00a0; close client socket<br/>  mov rax, 3<br/>  mov rdi, r15<br/>  syscall<br/>  jmp accept_connection<br/>\u00a0<br/>handle_connection:<br/>\u00a0<br/>  mov rdi, r15<br/>  call echo<br/>\u00a0<br/>  close_client:<br/>    mov rax, 3<br/>    mov rdi, r15<br/>    syscall<br/>\u00a0<br/>  close_server:<br/>    mov rax, 3<br/>    mov rdi, r14<br/>    syscall<br/>\u00a0<br/>  exit:<br/>    mov rax, 60<br/>    xor rdi, rdi<br/>    syscall<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 16, "block": "<pre class=\"text highlighted_source\">const PORT=12321;<br/>pipe:=Thread.Pipe(); // how server tells thread to connect to user<br/>\u00a0<br/>fcn echo(socket){\t\t// a thread, one per connection<br/>   text:=Data();<br/>   while(t:=socket.read()){<br/>      text.append(t);<br/>      if(text.find(\"\\n\",text.cursor)){ text.readln().print(); }<br/>   }<br/>   // socket was closed<br/>}<br/>\u00a0<br/>   // Set up the server socket.<br/>server:=Network.TCPServerSocket.open(PORT);<br/>println(\"Listening on\u00a0%s:%s\".fmt(server.hostname,server.port));<br/>server.listen(echo.launch);  // Main event loop</pre>"}]}