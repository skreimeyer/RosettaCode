{"task": "Ordered_words", "blocks": [{"lang": "Ada", "loc": 34, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Indefinite_Vectors</span>; <br/><span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Ordered_Words <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">package</span> Word_Vectors <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Indefinite_Vectors</span><br/>      <span class=\"br0\">(</span>Index_Type =&gt; Positive, Element_Type =&gt; String<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">use</span> Word_Vectors;<br/>   File\u00a0: File_Type;<br/>   Ordered_Words\u00a0: Vector;<br/>   Max_Length\u00a0: Positive\u00a0:= <span class=\"nu0\">1</span>;<br/><span class=\"kw1\">begin</span><br/>   Open <span class=\"br0\">(</span>File, In_File, <span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">while</span> <span class=\"kw2\">not</span> End_Of_File <span class=\"br0\">(</span>File<span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">declare</span><br/>         Word\u00a0: String\u00a0:= Get_Line <span class=\"br0\">(</span>File<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"kw3\">all</span> i <span class=\"kw3\">in</span> Word'First..<span class=\"me1\">Word</span>'Last-<span class=\"nu0\">1</span> =&gt; Word <span class=\"br0\">(</span>i<span class=\"br0\">)</span> &lt;= Word<span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">if</span> Word'Length &gt; Max_Length <span class=\"kw1\">then</span><br/>               Max_Length\u00a0:= Word'Length;<br/>               Ordered_Words.<span class=\"me1\">Clear</span>;<br/>               Ordered_Words.<span class=\"me1\">Append</span> <span class=\"br0\">(</span>Word<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">elsif</span> Word'Length = Max_Length <span class=\"kw1\">then</span><br/>               Ordered_Words.<span class=\"me1\">Append</span> <span class=\"br0\">(</span>Word<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">for</span> Word <span class=\"kw3\">of</span> Ordered_Words <span class=\"kw1\">loop</span><br/>     Put_Line <span class=\"br0\">(</span>Word<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Close <span class=\"br0\">(</span>File<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Ordered_Words;<br/>\u00a0</pre>"}, {"lang": "Aime", "loc": 39, "block": "<pre class=\"text highlighted_source\">integer<br/>ordered(data s)<br/>{<br/>    integer a, c, p;<br/>\u00a0<br/>    a = 1;<br/>\u00a0<br/>    p = -1;<br/>    for (, c in s) {<br/>        if (c &lt; p) {<br/>            a = 0;<br/>            break;<br/>        } else {<br/>            p = c;<br/>        }<br/>    }<br/>\u00a0<br/>    a;<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    file f;<br/>    text s;<br/>    index x;<br/>\u00a0<br/>    f.affix(\"unixdict.txt\");<br/>\u00a0<br/>    while (f.line(s)\u00a0!= -1) {<br/>        if (ordered(s)) {<br/>            x.v_list(~s).append(s);<br/>        }<br/>    }<br/>\u00a0<br/>    l_ucall(x.back, o_, 0, \"\\n\");<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 83, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># find the longrst words in a list that have all letters in order    #</span><br/><span class=\"coMULTI\"># use the associative array in the Associate array/iteration task    #</span><br/><span class=\"co2\">PR read \"aArray.a68\" PR</span><br/>\u00a0<br/><span class=\"coMULTI\"># returns the length of word                                         #</span><br/><span class=\"kw4\">PROC</span> length <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> word <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> 1 <span class=\"sy1\">+</span> <span class=\"br0\">(</span> <span class=\"kw8\">UPB</span> word <span class=\"sy1\">-</span> <span class=\"kw8\">LWB</span> word <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># returns text with the characters sorted into ascending order       #</span><br/><span class=\"kw4\">PROC</span> char sort <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> text <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>         <span class=\"kw3\">STRING</span> sorted <span class=\"sy1\">:=</span> text<span class=\"sy1\">;</span><br/>         <span class=\"kw2\">FOR</span> end pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">UPB</span> sorted <span class=\"sy1\">-</span> 1 <span class=\"kw2\">BY</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> <span class=\"kw8\">LWB</span> sorted<br/>         <span class=\"kw2\">WHILE</span><br/>             <span class=\"kw3\">BOOL</span> swapped <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>             <span class=\"kw2\">FOR</span> pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> sorted <span class=\"kw2\">TO</span> end pos <span class=\"kw2\">DO</span><br/>                 <span class=\"kw2\">IF</span> sorted<span class=\"br0\">[</span> pos <span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> sorted<span class=\"br0\">[</span> pos <span class=\"sy1\">+</span> 1 <span class=\"br0\">]</span><br/>                 <span class=\"kw2\">THEN</span>              <br/>                     <span class=\"kw3\">CHAR</span>  t           <span class=\"sy1\">:=</span> sorted<span class=\"br0\">[</span> pos     <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                     sorted<span class=\"br0\">[</span> pos     <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> sorted<span class=\"br0\">[</span> pos <span class=\"sy1\">+</span> 1 <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                     sorted<span class=\"br0\">[</span> pos <span class=\"sy1\">+</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> t<span class=\"sy1\">;</span><br/>                     swapped           <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><br/>                 <span class=\"kw2\">FI</span><br/>             <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>             swapped<br/>         <span class=\"kw2\">DO</span> <span class=\"kw7\">SKIP</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>         sorted<br/>    <span class=\"kw2\">END</span> <span class=\"coMULTI\"># char sort #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># read the list of words and store the ordered ones in an associative array #</span><br/>\u00a0<br/><span class=\"kw2\">IF</span>  <span class=\"kw6\">FILE</span> input file<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">STRING</span> file name <span class=\"sy1\">=</span> <span class=\"st0\">\"unixdict.txt\"</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">open</span><span class=\"br0\">(</span> input file<span class=\"sy1\">,</span> file name<span class=\"sy1\">,</span> <span class=\"kw21\">stand in channel</span> <span class=\"br0\">)</span> <span class=\"sy1\">/=</span> 0<br/><span class=\"kw2\">THEN</span><br/>    <span class=\"coMULTI\"># failed to open the file #</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>  <span class=\"st0\">\"Unable to open \"</span><span class=\"st0\">\"\"</span> <span class=\"sy1\">+</span> file name <span class=\"sy1\">+</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">ELSE</span><br/>    <span class=\"coMULTI\"># file opened OK #</span><br/>    <span class=\"kw3\">BOOL</span> at eof <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># set the EOF handler for the file #</span><br/>    <span class=\"kw22\">on logical file end</span><span class=\"br0\">(</span> input file<span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> <span class=\"kw6\">FILE</span> f <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>                                     <span class=\"kw2\">BEGIN</span><br/>                                         <span class=\"coMULTI\"># note that we reached EOF on the #</span><br/>                                         <span class=\"coMULTI\"># latest read #</span><br/>                                         at eof <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">;</span><br/>                                         <span class=\"coMULTI\"># return TRUE so processing can continue #</span><br/>                                         <span class=\"kw7\">TRUE</span><br/>                                     <span class=\"kw2\">END</span><br/>                       <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># store the ordered words and find the longest #</span><br/>    <span class=\"kw3\">INT</span> max length   <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>    <span class=\"kw4\">REF</span> AARRAY words <span class=\"sy1\">:=</span> INIT <span class=\"kw4\">LOC</span> AARRAY<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">STRING</span> word<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">WHILE</span> <span class=\"kw8\">NOT</span> at eof<br/>    <span class=\"kw2\">DO</span><br/>        <span class=\"kw3\">STRING</span> word<span class=\"sy1\">;</span><br/>        get<span class=\"br0\">(</span> input file<span class=\"sy1\">,</span> <span class=\"br0\">(</span> word<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> char sort<span class=\"br0\">(</span> word <span class=\"br0\">)</span> <span class=\"sy1\">=</span> word<br/>        <span class=\"kw2\">THEN</span><br/>            <span class=\"coMULTI\"># have an ordered word #</span><br/>            <span class=\"kw2\">IF</span>  <span class=\"kw3\">INT</span> word length <span class=\"sy1\">:=</span> length<span class=\"br0\">(</span> word <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                word length <span class=\"sy1\">&gt;</span> max length<br/>            <span class=\"kw2\">THEN</span><br/>                max length <span class=\"sy1\">:=</span> word length<br/>            <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>            <span class=\"coMULTI\"># store the word #</span><br/>            words <span class=\"sy1\">//</span> word <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># close the file #</span><br/>    <span class=\"kw22\">close</span><span class=\"br0\">(</span> input file <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Maximum length of ordered words: \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> max length<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>4 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># show the ordered words with the maximum length #</span><br/>    <span class=\"kw4\">REF</span> AAELEMENT e <span class=\"sy1\">:=</span> FIRST words<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">WHILE</span> e <span class=\"kw7\">ISNT</span> nil element <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">IF</span>  max length <span class=\"sy1\">=</span> length<span class=\"br0\">(</span> key <span class=\"kw6\">OF</span> e <span class=\"br0\">)</span><br/>        <span class=\"kw2\">THEN</span><br/>            <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> key <span class=\"kw6\">OF</span> e<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        e <span class=\"sy1\">:=</span> NEXT words<br/>    <span class=\"kw2\">OD</span><br/><span class=\"kw2\">FI</span></pre>"}, {"lang": "AutoHotkey", "loc": 35, "block": "<pre class=\"autohotkey highlighted_source\">\u00a0<br/>MaxLen<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Read<span class=\"sy0\">,</span> UnixDict<span class=\"sy0\">.</span>txt         <span class=\"co1\">; Assigns A_LoopReadLine to each line of the file</span><br/><span class=\"br0\">{</span><br/>    thisword <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopReadLine\"><span class=\"kw2\">A_LoopReadLine</span></a>   <span class=\"co1\">; Just for readability</span><br/>    blSort <span class=\"sy0\">:=</span> isSorted<span class=\"br0\">(</span>thisWord<span class=\"br0\">)</span> <span class=\"co1\">; reduce calls to IsSorted to improve performance</span><br/>    ThisLen <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>ThisWord<span class=\"br0\">)</span>  <span class=\"co1\">; reduce calls to StrLen to improve performance</span><br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span>blSort <span class=\"sy0\">=</span> true <span class=\"kw1\">and</span> ThisLen <span class=\"sy0\">=</span> maxlen<span class=\"br0\">)</span><br/>        list <span class=\"sy0\">.=</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">.</span> thisword<br/>    <span class=\"kw1\">Else</span> <span class=\"kw1\">If</span> <span class=\"br0\">(</span>blSort <span class=\"sy0\">=</span> true <span class=\"kw1\">and</span> ThisLen <span class=\"sy0\">&gt;</span> maxlen<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        list <span class=\"sy0\">:=</span> thisword<br/>        maxlen <span class=\"sy0\">:=</span> ThisLen<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>IsSorted<span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"br0\">{</span>  <span class=\"co1\">; This function uses the ASCII value of the letter to determine its place in the alphabet.</span><br/>                           <span class=\"co1\">;        Thankfully, the dictionary is in all lowercase</span><br/>    lastchar<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> parse<span class=\"sy0\">,</span> word<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Asc</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> lastchar <span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> false<br/>        lastchar <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Asc</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_loopField</span></a><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> true<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">GUI</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Edit\"><span class=\"kw8\">Edit</span></a><span class=\"sy0\">,</span> w300 ReadOnly<span class=\"sy0\">,</span> <span class=\"re0\">%list%</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">GUI</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a><br/><span class=\"kw1\">return</span> <span class=\"co1\">; End Auto-Execute Section</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiClose\"><span class=\"kw7\">GUIClose</span></a>:<br/><a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 36, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>\tabc = <span class=\"st0\">\"abcdefghijklmnopqrstuvwxyz\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span><br/>\t<span class=\"co1\"># Check if this line is an ordered word.</span><br/>\tordered = <span class=\"nu0\">1</span>  <span class=\"co1\"># true</span><br/>\tleft = <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i = <span class=\"nu0\">1</span>; i <span class=\"sy2\">&lt;=</span> <span class=\"kw4\">length</span><span class=\"br0\">(</span><span class=\"re0\">$0</span><span class=\"br0\">)</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tright = <span class=\"kw4\">index</span><span class=\"br0\">(</span>abc, <span class=\"kw4\">substr</span><span class=\"br0\">(</span><span class=\"re0\">$0</span>, i, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>right <span class=\"sy2\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">||</span> left <span class=\"sy2\">&gt;</span> right<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tordered = <span class=\"nu0\">0</span>  <span class=\"co1\"># false</span><br/>\t\t\t<span class=\"kw1\">break</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tleft = right<br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>ordered<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tscore = <span class=\"kw4\">length</span><span class=\"br0\">(</span><span class=\"re0\">$0</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>score <span class=\"sy2\">&gt;</span> best<span class=\"br0\">[</span><span class=\"st0\">\"score\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"co1\"># Reset the list of best ordered words.</span><br/>\t\t\tbest<span class=\"br0\">[</span><span class=\"st0\">\"score\"</span><span class=\"br0\">]</span> = score<br/>\t\t\tbest<span class=\"br0\">[</span><span class=\"st0\">\"count\"</span><span class=\"br0\">]</span> = <span class=\"nu0\">1</span><br/>\t\t\tbest<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = <span class=\"re0\">$0</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>score <span class=\"sy2\">==</span> best<span class=\"br0\">[</span><span class=\"st0\">\"score\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"co1\"># Add this word to the list.</span><br/>\t\t\tbest<span class=\"br0\">[</span><span class=\"sy3\">++</span>best<span class=\"br0\">[</span><span class=\"st0\">\"count\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span> = <span class=\"re0\">$0</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">END</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># Print the list of best ordered words.</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i = <span class=\"nu0\">1</span>; i <span class=\"sy2\">&lt;=</span> best<span class=\"br0\">[</span><span class=\"st0\">\"count\"</span><span class=\"br0\">]</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw5\">print</span> best<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BaCon", "loc": 21, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">'Ordered words - improved version</span><br/><span class=\"kw1\">OPTION</span> COLLAPSE <span class=\"kw1\">TRUE</span><br/>\u00a0<br/>list$ = LOAD$<span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">FOR</span> word$ IN list$ <span class=\"kw1\">STEP</span> NL$<br/>\u00a0<br/>    term$ = EXTRACT$<span class=\"br0\">(</span>SORT$<span class=\"br0\">(</span>EXPLODE$<span class=\"br0\">(</span>word$, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">IF</span> word$ = term$ <span class=\"kw1\">THEN</span><br/>        <span class=\"kw1\">IF</span> <span class=\"kw1\">LEN</span><span class=\"br0\">(</span>term$<span class=\"br0\">)</span> &gt; MaxLen <span class=\"kw1\">THEN</span><br/>            MaxLen = <span class=\"kw1\">LEN</span><span class=\"br0\">(</span>term$<span class=\"br0\">)</span><br/>            result$ = word$<br/>        ELIF <span class=\"kw1\">LEN</span><span class=\"br0\">(</span>term$<span class=\"br0\">)</span> = MaxLen <span class=\"kw1\">THEN</span><br/>            result$ = <span class=\"kw1\">APPEND</span>$<span class=\"br0\">(</span>result$, <span class=\"nu0\">0</span>, word$, NL$<span class=\"br0\">)</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/><span class=\"kw1\">NEXT</span><br/>\u00a0<br/><span class=\"kw1\">PRINT</span> result$<br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 19, "block": "<pre class=\"text highlighted_source\">      dict% = OPENIN(\"unixdict.txt\")<br/>      IF dict%=0 ERROR 100, \"Failed to open dictionary file\"<br/>\u00a0<br/>      max% = 2<br/>      REPEAT<br/>        A$ = GET$#dict%<br/>        IF LENA$ &gt;= max% THEN<br/>          i% = 0<br/>          REPEAT i% += 1<br/>          UNTIL ASCMID$(A$,i%) &gt; ASCMID$(A$,i%+1)<br/>          IF i% = LENA$ THEN<br/>            IF i% &gt; max% max% = i%\u00a0: list$ = \"\"<br/>            list$ += A$ + CHR$13 + CHR$10<br/>          ENDIF<br/>        ENDIF<br/>      UNTIL EOF#dict%<br/>      CLOSE #dict%<br/>      PRINT list$<br/>      END</pre>"}, {"lang": "Befunge", "loc": 3, "block": "<pre class=\"text highlighted_source\">00p30p&gt;_010p120p0&gt;#v0~&gt;&gt;\\$::48*\\`\\\"~\"`+!&gt;&gt;#v_$:#v_&gt;30g:!#v_1-30p55+0&gt;:30g3+g\\1v<br/>&gt;0#v _$^#::\\p04:&lt;^+&gt;#1^#\\p01:p02*g02!`\\g01:&lt;@$ _ ,#!&gt;#:&lt;$&lt;^&lt;!:g03$&lt;_^#!`\\g00:+&lt;<br/>^&lt;o&gt;\\30g2+p40g1+^0p00p03+1*g03!-g00 &lt; &lt; &lt; &lt; &lt; &lt;:&gt;#$:#$00g#&lt;\\#&lt;`#&lt;!#&lt;2#$0g#&lt;*#&lt;_</pre>"}, {"lang": "Bracmat", "loc": 25, "block": "<pre class=\"text highlighted_source\">  ( orderedWords<br/>  =   bow result longestLength word character<br/>    .     0:?bow<br/>        &amp;\u00a0:?result<br/>        &amp; 0:?longestLength<br/>        &amp; @( get$(!arg,STR)<br/>          \u00a0:  \u00a0?<br/>               ( [!bow\u00a0%?word \\n [?bow\u00a0?<br/>               &amp; @(\u00a0!word<br/>                 \u00a0: (\u00a0?\u00a0%@?character &lt;%@!character\u00a0?<br/>                    |  \u00a0?<br/>                        (   [!longestLength<br/>                          &amp;\u00a0!word\u00a0!result:?result<br/>                        |   [&gt;!longestLength:[?longestLength<br/>                          &amp;\u00a0!word:?result<br/>                        | <br/>                        )<br/>                    )<br/>                  )<br/>               &amp; ~`<br/>               )<br/>           )<br/>      |\u00a0!result<br/>  )<br/>&amp; orderedWords$\"unixdict.txt\"</pre>"}, {"lang": "Burlesque", "loc": 1, "block": "<pre class=\"text highlighted_source\">ln{so}f[^^{L[}&gt;mL[bx(==)[+(L[)+]f[uN</pre>"}, {"lang": "C", "loc": 83, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;assert.h&gt;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co2\">#define MAXLEN 100</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">char</span> TWord<span class=\"br0\">[</span>MAXLEN<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> Node <span class=\"br0\">{</span><br/>    TWord word<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">struct</span> Node <span class=\"sy0\">*</span>next<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> Node<span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> is_ordered_word<span class=\"br0\">(</span><span class=\"kw4\">const</span> TWord word<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span>word <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> word<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>word<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> word<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> word<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>Node<span class=\"sy0\">*</span> list_prepend<span class=\"br0\">(</span>Node<span class=\"sy0\">*</span> words_list<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> TWord new_word<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span>new_word <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    Node <span class=\"sy0\">*</span>new_node <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>Node<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>new_node <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>new_node<span class=\"sy0\">-&gt;</span>word<span class=\"sy0\">,</span> new_word<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    new_node<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> words_list<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> new_node<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>Node<span class=\"sy0\">*</span> list_destroy<span class=\"br0\">(</span>Node <span class=\"sy0\">*</span>words_list<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>words_list <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Node <span class=\"sy0\">*</span>temp <span class=\"sy0\">=</span> words_list<span class=\"sy0\">;</span><br/>        words_list <span class=\"sy0\">=</span> words_list<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>temp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> words_list<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">void</span> list_print<span class=\"br0\">(</span>Node <span class=\"sy0\">*</span>words_list<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>words_list <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>%s\"</span><span class=\"sy0\">,</span> words_list<span class=\"sy0\">-&gt;</span>word<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        words_list <span class=\"sy0\">=</span> words_list<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    FILE <span class=\"sy0\">*</span>fp <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fopen.html\"><span class=\"kw3\">fopen</span></a><span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fp <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> EXIT_FAILURE<span class=\"sy0\">;</span><br/>\u00a0<br/>    Node <span class=\"sy0\">*</span>words <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>    TWord line<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> max_len <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fscanf.html\"><span class=\"kw3\">fscanf</span></a><span class=\"br0\">(</span>fp<span class=\"sy0\">,</span> <span class=\"st0\">\"%99s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> line<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> EOF<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> max_len <span class=\"sy0\">&amp;&amp;</span> is_ordered_word<span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            max_len <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            words <span class=\"sy0\">=</span> list_destroy<span class=\"br0\">(</span>words<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            words <span class=\"sy0\">=</span> list_prepend<span class=\"br0\">(</span>words<span class=\"sy0\">,</span> line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"sy0\">==</span> max_len <span class=\"sy0\">&amp;&amp;</span> is_ordered_word<span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            words <span class=\"sy0\">=</span> list_prepend<span class=\"br0\">(</span>words<span class=\"sy0\">,</span> line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fclose.html\"><span class=\"kw3\">fclose</span></a><span class=\"br0\">(</span>fp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    list_print<span class=\"br0\">(</span>words<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> EXIT_SUCCESS<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 38, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;fstream&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> ordered<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"sy3\">&amp;</span>word<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"me2\">is_sorted</span><span class=\"br0\">(</span>word.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, word.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">// C++11</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">ifstream</span> infile<span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>infile<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Can't open word file<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span> words<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> word<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span> longest <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">getline</span><span class=\"br0\">(</span>infile, word<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> length <span class=\"sy1\">=</span> word.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>length <span class=\"sy1\">&lt;</span> longest<span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy4\">;</span> <span class=\"co1\">// don't test short words</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ordered<span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>longest <span class=\"sy1\">&lt;</span> length<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                longest <span class=\"sy1\">=</span> length<span class=\"sy4\">;</span> <span class=\"co1\">// set new minimum length</span><br/>                words.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">// reset the container</span><br/>            <span class=\"br0\">}</span><br/>            words.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">copy</span><span class=\"br0\">(</span>words.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, words.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">ostream_iterator</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span>, <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 30, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Net</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        WebClient client <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> WebClient<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">string</span> text <span class=\"sy0\">=</span> client<span class=\"sy0\">.</span><span class=\"me1\">DownloadString</span><span class=\"br0\">(</span><span class=\"st0\">\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> words <span class=\"sy0\">=</span> text<span class=\"sy0\">.</span><span class=\"me1\">Split</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> <span class=\"st0\">'<span class=\"es0\">\\r</span>'</span>, <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span> <span class=\"br0\">}</span>, StringSplitOptions<span class=\"sy0\">.</span><span class=\"me1\">RemoveEmptyEntries</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> query <span class=\"sy0\">=</span> <span class=\"kw1\">from</span> w <span class=\"kw1\">in</span> words<br/>                    <span class=\"kw1\">where</span> IsOrderedWord<span class=\"br0\">(</span>w<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">group</span> w <span class=\"kw1\">by</span> w<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"kw1\">into</span> ows<br/>                    orderby ows<span class=\"sy0\">.</span><span class=\"me1\">Key</span> descending<br/>                    <span class=\"kw1\">select</span> ows<span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, query<span class=\"sy0\">.</span><span class=\"me1\">First</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> IsOrderedWord<span class=\"br0\">(</span><span class=\"kw4\">string</span> w<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> w<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>w<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> w<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 15, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> is<span class=\"sy0\">-</span>sorted? <span class=\"br0\">[</span>coll<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">not-any?</span> <span class=\"kw1\">pos?</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> compare coll <span class=\"br0\">(</span>next coll<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> take<span class=\"sy0\">-</span>while<span class=\"sy0\">-</span>eqcount <span class=\"br0\">[</span>coll<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>n <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span><span class=\"kw1\">first</span> coll<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">take-while</span> #<span class=\"br0\">(</span><span class=\"sy0\">==</span> n <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> coll<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">with-open</span> <span class=\"br0\">[</span>rdr <span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span>java<span class=\"sy0\">.</span>io<span class=\"sy0\">/</span>reader <span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> rdr<br/>       <span class=\"kw1\">line-seq</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">filter</span> is<span class=\"sy0\">-</span>sorted?<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">sort-by</span> <span class=\"kw1\">count</span> <span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><br/>       take<span class=\"sy0\">-</span>while<span class=\"sy0\">-</span>eqcount<br/>       <span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span>string<span class=\"sy0\">/</span>join <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>       println<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 23, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>ordered_word = <span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>...<span class=\"me1\">word</span>.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">unless</span> word<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span>= word<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>  <span class=\"kw4\">true</span><br/>\u00a0<br/>show_longest_ordered_words = <span class=\"br0\">(</span>candidates<span class=\"sy0\">,</span> dict_file_name<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  words = <span class=\"br0\">[</span><span class=\"st0\">''</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">for</span> word <span class=\"kw1\">in</span> candidates<br/>    <span class=\"kw1\">continue</span> <span class=\"kw1\">if</span> word.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> words<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><br/>    <span class=\"kw1\">if</span> ordered_word word<br/>      words = <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> word.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> words<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><br/>      words.<span class=\"me1\">push</span> word<br/>  <span class=\"kw1\">return</span> <span class=\"kw1\">if</span> words<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> == <span class=\"st0\">''</span> <span class=\"co1\"># we came up empty</span><br/>  console.<span class=\"me1\">log</span> <span class=\"st0\">\"Longest Ordered Words (source=#{dict_file_name}):\"</span><br/>  <span class=\"kw1\">for</span> word <span class=\"kw1\">in</span> words<br/>    console.<span class=\"me1\">log</span> word<br/>\u00a0<br/>dict_file_name = <span class=\"st0\">'unixdict.txt'</span><br/>file_content = require<span class=\"br0\">(</span><span class=\"st0\">'fs'</span><span class=\"br0\">)</span>.<span class=\"me1\">readFileSync</span> dict_file_name<br/>dict_words = file_content.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><br/>show_longest_ordered_words dict_words<span class=\"sy0\">,</span> dict_file_name<br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 27, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> orderedp <span class=\"br0\">(</span>word<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>reduce <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>prev curr<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span>char<span class=\"sy0\">&gt;</span> prev curr<span class=\"br0\">)</span> <span class=\"br0\">(</span>return-from orderedp <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            curr<span class=\"br0\">)</span><br/>          word<span class=\"br0\">)</span><br/>  t<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> longest-ordered-words <span class=\"br0\">(</span>filename<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>result <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>with-open-file <span class=\"br0\">(</span>s filename<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>loop<br/>         with greatest-<span class=\"kw1\">length</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>         for word <span class=\"sy0\">=</span> <span class=\"br0\">(</span>read-line s <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>         until <span class=\"br0\">(</span><span class=\"kw1\">null</span> word<span class=\"br0\">)</span><br/>         <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> word<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> <span class=\"kw1\">length</span> greatest-<span class=\"kw1\">length</span><span class=\"br0\">)</span><br/>                         <span class=\"br0\">(</span>orderedp word<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"kw1\">length</span> greatest-<span class=\"kw1\">length</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">setf</span> greatest-<span class=\"kw1\">length</span> <span class=\"kw1\">length</span><br/>                        result <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>push word result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>nreverse result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>CL-USER<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>longest-ordered-words <span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"st0\">\"abbott\"</span> <span class=\"st0\">\"accent\"</span> <span class=\"st0\">\"accept\"</span> <span class=\"st0\">\"access\"</span> <span class=\"st0\">\"accost\"</span> <span class=\"st0\">\"almost\"</span> <span class=\"st0\">\"bellow\"</span> <span class=\"st0\">\"billow\"</span><br/> <span class=\"st0\">\"biopsy\"</span> <span class=\"st0\">\"chilly\"</span> <span class=\"st0\">\"choosy\"</span> <span class=\"st0\">\"choppy\"</span> <span class=\"st0\">\"effort\"</span> <span class=\"st0\">\"floppy\"</span> <span class=\"st0\">\"glossy\"</span> <span class=\"st0\">\"knotty\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 20, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> result<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> maxLen<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span> word<span class=\"sy0\">;</span> <span class=\"st0\">\"unixdict.txt\"</span>.<span class=\"me1\">File</span>.<span class=\"me1\">lines</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        word <span class=\"sy0\">=</span> word.<span class=\"me1\">chomp</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> len <span class=\"sy0\">=</span> word.<span class=\"me1\">walkLength</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>len <span class=\"sy0\">&lt;</span> maxLen <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>word.<span class=\"me1\">isSorted</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>len <span class=\"sy0\">&gt;</span> maxLen<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            result <span class=\"sy0\">=</span> <span class=\"br0\">[</span>word<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            maxLen <span class=\"sy0\">=</span> len<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>            result <span class=\"sy0\">~=</span> word<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%-(%s<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> result<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 56, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> POrderedWords<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  SysUtils<span class=\"sy1\">,</span> Classes<span class=\"sy1\">,</span> IdHTTP<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> IsOrdered<span class=\"br0\">(</span><span class=\"kw1\">const</span> s<span class=\"sy1\">:</span><span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  I<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>&lt;<span class=\"nu0\">2</span><span class=\"sy1\">;</span> <span class=\"co1\">// empty or 1 char strings are ordered</span><br/>  <span class=\"kw1\">for</span> I <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"kw3\">Length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> s<span class=\"br0\">[</span>I<span class=\"br0\">]</span>&lt;s<span class=\"br0\">[</span>I<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"co1\">// can improve using case/localization to order...</span><br/>      Exit<span class=\"sy1\">;</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">True</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> ProcessDictionary<span class=\"br0\">(</span><span class=\"kw1\">const</span> AUrl<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  slInput<span class=\"sy1\">:</span> TStringList<span class=\"sy1\">;</span><br/>  I<span class=\"sy1\">,</span> WordSize<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  slInput <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStringList<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">try</span><br/>    <span class=\"kw1\">with</span> TIdHTTP<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">(</span><span class=\"kw1\">nil</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw1\">try</span><br/>      slInput<span class=\"sy1\">.</span><span class=\"me1\">Text</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Get<span class=\"br0\">(</span>AUrl<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">finally</span><br/>      Free<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"co1\">// or use slInput.LoadFromFile('yourfilename') to load from a local file</span><br/>    WordSize <span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> I <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> slInput<span class=\"sy1\">.</span><span class=\"me1\">Count</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> IsOrdered<span class=\"br0\">(</span>slInput<span class=\"br0\">[</span>I<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">Length</span><span class=\"br0\">(</span>slInput<span class=\"br0\">[</span>I<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">=</span> WordSize<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Result <span class=\"sy3\">+</span> slInput<span class=\"br0\">[</span>I<span class=\"br0\">]</span> <span class=\"sy3\">+</span> <span class=\"st0\">' '</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">Length</span><span class=\"br0\">(</span>slInput<span class=\"br0\">[</span>I<span class=\"br0\">]</span><span class=\"br0\">)</span> &gt; WordSize<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>          Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> slInput<span class=\"br0\">[</span>I<span class=\"br0\">]</span> <span class=\"sy3\">+</span> <span class=\"st0\">' '</span><span class=\"sy1\">;</span><br/>          WordSize <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Length</span><span class=\"br0\">(</span>slInput<span class=\"br0\">[</span>I<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">finally</span><br/>    slInput<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">try</span><br/>    <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>ProcessDictionary<span class=\"br0\">(</span><span class=\"st0\">'http://www.puzzlers.org/pub/wordlists/unixdict.txt'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">except</span><br/>    <span class=\"kw1\">on</span> E<span class=\"sy1\">:</span> Exception <span class=\"kw1\">do</span><br/>      <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>E<span class=\"sy1\">.</span><span class=\"me1\">ClassName</span><span class=\"sy1\">,</span> <span class=\"st0\">': '</span><span class=\"sy1\">,</span> E<span class=\"sy1\">.</span><span class=\"kw1\">Message</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "E", "loc": 7, "block": "<pre class=\"e highlighted_source\">pragma.<span class=\"me1\">enable</span><span class=\"br0\">(</span><span class=\"st0\">\"accumulator\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> words <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;</span>http<span class=\"sy0\">://</span>www.<span class=\"me1\">puzzlers</span>.<span class=\"me1\">org</span><span class=\"sy0\">/</span>pub<span class=\"sy0\">/</span>wordlists<span class=\"sy0\">/</span>unixdict.<span class=\"me1\">txt</span><span class=\"sy0\">&gt;</span>.<span class=\"me1\">getText</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> ordered <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> word <span class=\"sy0\">?</span> <span class=\"br0\">(</span>word.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=&gt;</span> word<span class=\"br0\">)</span> <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> words <span class=\"br0\">{</span> _.<span class=\"me1\">with</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> maxLen <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> <span class=\"nu0\">0</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> word <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> ordered <span class=\"br0\">{</span> _.<span class=\"me1\">max</span><span class=\"br0\">(</span>word.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> maxOrderedWords <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> word <span class=\"sy0\">?</span> <span class=\"br0\">(</span>word.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=&gt;</span> maxLen<span class=\"br0\">)</span> <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> ordered <span class=\"br0\">{</span> _.<span class=\"me1\">with</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>.<span class=\"me1\">rjoin</span><span class=\"br0\">(</span>maxOrderedWords<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "EchoLisp", "loc": 28, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>ordered? str<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>i <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">string-length</span> str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>ci<span class=\"sy0\">&lt;=</span>? <span class=\"br0\">(</span><span class=\"kw1\">string-ref</span> str <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">string-ref</span> str i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>ordre words<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> wl <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">s</span> '<span class=\"kw1\">s</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span>fold <span class=\"br0\">(</span>len <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>w words<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> wl <span class=\"br0\">(</span><span class=\"kw1\">string-length</span> w<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t#:continue <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> wl len<span class=\"br0\">)</span><br/>\t\t#:when <span class=\"br0\">(</span>ordered? w<span class=\"br0\">)</span><br/>\t\t#:continue <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> len wl<span class=\"br0\">)</span> <span class=\"br0\">(</span>push <span class=\"kw1\">s</span> w<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>push <span class=\"br0\">(</span>stack <span class=\"kw1\">s</span><span class=\"br0\">)</span> w<span class=\"br0\">)</span> <span class=\"co1\">;; start a new list of length wl</span><br/>\t\twl<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>stack<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; output</span><br/><span class=\"br0\">(</span><span class=\"kw1\">load</span> 'unixdict<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>ordre <span class=\"br0\">(</span>text<span class=\"sy0\">-</span>parse unixdict<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   \u2192 <span class=\"br0\">(</span>abbott accent accept access accost almost bellow billow biopsy chilly choosy choppy effort floppy glossy knotty<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; with the dictionaries provided with EchoLisp</span><br/><span class=\"co1\">;; french</span><br/>  \u2192 <span class=\"br0\">(</span>accentu\u00e9<span class=\"br0\">)</span> <span class=\"co1\">;; ordered, longest, and ... self-reference</span><br/><span class=\"co1\">;; english</span><br/>  \u2192 <span class=\"br0\">(</span>Adelops alloquy beefily begorry billowy egilops<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 8, "block": "<pre class=\"text highlighted_source\">File.read!(\"unixdict.txt\")<br/>|&gt; String.split<br/>|&gt; Enum.filter(fn word -&gt; String.codepoints(word) |&gt; Enum.sort |&gt; Enum.join == word end)<br/>|&gt; Enum.group_by(fn word -&gt; String.length(word) end)<br/>|&gt; Enum.max_by(fn {length,_words} -&gt; length end)<br/>|&gt; elem(1)<br/>|&gt; Enum.sort<br/>|&gt; Enum.each(fn word -&gt; IO.puts word end)</pre>"}, {"lang": "Erlang", "loc": 23, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> ordered_words <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>is_ordered<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_ordered</span><span class=\"br0\">(</span> <span class=\"re5\">Word</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sort</span><span class=\"br0\">(</span> <span class=\"re5\">Word</span> <span class=\"br0\">)</span> <span class=\"sy3\">=:=</span>  <span class=\"re5\">Word</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"me1\">ok</span> <span class=\"sy3\">=</span> find_unimplemented_tasks:<span class=\"re3\">init_http</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Ordered_words</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">words</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">is_ordered</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Sorted_longest_length_first</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span> <span class=\"re3\">sort_with_length</span><span class=\"br0\">(</span> <span class=\"re5\">Ordered_words</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">Max_length</span><span class=\"sy1\">,</span> <span class=\"re5\">_Word1</span><span class=\"br0\">}</span> | <span class=\"re5\">_T</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"re5\">Sorted_longest_length_first</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Longest_length_first</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">takewhile</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">Length</span><span class=\"sy1\">,</span> <span class=\"re5\">_Word2</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Length</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">Max_length</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">Sorted_longest_length_first</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">_Length</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Longest_length_first</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">sort_with_length</span><span class=\"br0\">(</span> <span class=\"re5\">Words</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Words_with_length_first</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Words</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sort</span><span class=\"br0\">(</span> <span class=\"re5\">Words_with_length_first</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">words</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">anagrams_deranged</span>:<span class=\"re3\">words_from_url</span><span class=\"br0\">(</span> <span class=\"st0\">\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 36, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">include</span> misc.e<br/>\u00a0<br/><span class=\"kw1\">type</span> ordered<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> s<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        <span class=\"co1\">-- assume all items in the sequence are atoms</span><br/>        <span class=\"kw1\">if</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span>&gt;s<span class=\"br0\">[</span>i<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">type</span><br/>\u00a0<br/><span class=\"kw2\">integer</span> maxlen<br/><span class=\"kw2\">sequence</span> words<br/><span class=\"kw2\">object</span> word<br/><span class=\"kw1\">constant</span> fn <span class=\"sy1\">=</span> <span class=\"kw2\">open</span><span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"sy2\">,</span><span class=\"st0\">\"r\"</span><span class=\"br0\">)</span><br/>maxlen <span class=\"sy1\">=</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    word <span class=\"sy1\">=</span> <span class=\"kw2\">gets</span><span class=\"br0\">(</span>fn<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">atom</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">exit</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    word <span class=\"sy1\">=</span> word<span class=\"br0\">[</span><span class=\"nu0\">1</span>..$<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"co1\">-- truncate new-line</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span> &gt;<span class=\"sy1\">=</span> maxlen <span class=\"kw1\">and</span> ordered<span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span> &gt; maxlen <span class=\"kw1\">then</span><br/>            maxlen <span class=\"sy1\">=</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><br/>            words <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        words <span class=\"sy1\">=</span> <span class=\"kw2\">append</span><span class=\"br0\">(</span>words<span class=\"sy2\">,</span>word<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>\u00a0<br/><span class=\"kw2\">close</span><span class=\"br0\">(</span>fn<span class=\"br0\">)</span><br/>\u00a0<br/>pretty_print<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span>words<span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "F#", "loc": 13, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/><span class=\"kw1\">open</span> System.<span class=\"me1\">IO</span><br/>\u00a0<br/><span class=\"kw1\">let</span> longestOrderedWords<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> isOrdered <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">pairwise</span> <span class=\"sy0\">&gt;&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">forall</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>a,b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">&lt;=</span> b<span class=\"br0\">)</span><br/>\u00a0<br/>    File.<span class=\"me1\">ReadLines</span><span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">filter</span> isOrdered<br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">groupBy</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> s <span class=\"sy0\">-&gt;</span> s.<span class=\"me1\">Length</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">sortBy</span> <span class=\"br0\">(</span><span class=\"kw3\">fst</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">~-</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">head</span> <span class=\"sy0\">|&gt;</span> <span class=\"kw3\">snd</span><br/>\u00a0<br/>longestOrderedWords<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span>printfn <span class=\"st0\">\"%s\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>USING: grouping http.client io io.encodings.utf8 io.files<br/>io.files.temp kernel math memoize sequences sequences.extras<br/>unicode.case urls\u00a0;<br/>IN: rosetta-code.ordered-words<br/>\u00a0<br/>MEMO: word-list ( -- seq )<br/>    \"unixdict.txt\" temp-file dup exists? [<br/>        URL\" http://puzzlers.org/pub/wordlists/unixdict.txt\"<br/>        over download-to<br/>    ] unless utf8 file-lines\u00a0;<br/>\u00a0<br/>: ordered-word? ( word --\u00a0? )<br/>    &gt;lower [ &lt;= ] monotonic?\u00a0;<br/>\u00a0<br/>: ordered-words-main ( -- )<br/>    word-list [ ordered-word? ] filter<br/>    all-longest [ print ] each\u00a0;<br/>\u00a0</pre>"}, {"lang": "Fantom", "loc": 32, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Main<br/>{<br/>  public static Bool ordered (Str word)<br/>  {<br/>    word.chars.all |Int c, Int i -&gt; Bool|<br/>    {<br/>      (i == (word.size-1) || c &lt;= word.chars[i+1])<br/>    }<br/>  }<br/>\u00a0<br/>  public static Void main ()<br/>  {<br/>    Str[] words\u00a0:= [,]<br/>    File(`unixdict.txt`).eachLine |Str word|<br/>    {<br/>      if (ordered(word))<br/>      {<br/>        if (words.isEmpty || words.first.size &lt; word.size)<br/>        { // reset the list<br/>          words = [word]<br/>        } <br/>        else if (words.size &gt;= 1 &amp;&amp; words.first.size == word.size)<br/>        { // add word to existing ones<br/>          words.add (word)<br/>        }<br/>      }<br/>    }<br/>    echo (words.join (\" \"))<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "FBSL", "loc": 34, "block": "<pre class=\"qbasic highlighted_source\">#APPTYPE CONSOLE<br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> RESTfulGET<span class=\"br0\">(</span>url<span class=\"br0\">)</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a>\u00a0%HTTP <span class=\"sy0\">=</span> CREATEOBJECT<span class=\"br0\">(</span><span class=\"st0\">\"WinHttp.WinHttpRequest.5.1\"</span><span class=\"br0\">)</span><br/>    CALLMETHOD<span class=\"br0\">(</span>HTTP<span class=\"sy0\">,</span> <span class=\"st0\">\".open\u00a0%s,\u00a0%s,\u00a0%d\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"GET\"</span><span class=\"sy0\">,</span> url<span class=\"sy0\">,</span> FALSE<span class=\"br0\">)</span><br/>    CALLMETHOD<span class=\"br0\">(</span>HTTP<span class=\"sy0\">,</span> <span class=\"st0\">\".send\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">RETURN</span> GETVALUE<span class=\"br0\">(</span><span class=\"st0\">\"%s\"</span><span class=\"sy0\">,</span> HTTP<span class=\"sy0\">,</span> <span class=\"st0\">\".ResponseText\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> $TEXT <span class=\"sy0\">=</span> RESTfulGET<span class=\"br0\">(</span><span class=\"st0\">\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> dict<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> Split<span class=\"br0\">(</span>TEXT<span class=\"sy0\">,</span> CHR<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> max <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a> <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckubound.shtml\"><span class=\"kw3\">UBOUND</span></a><span class=\"br0\">(</span>dict<span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> theword <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckstring.shtml\"><span class=\"kw3\">STRING</span></a><br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> words<span class=\"br0\">[</span><span class=\"br0\">]</span><br/><span class=\"kw1\">FOR</span> <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> max<br/>    theWord <span class=\"sy0\">=</span> dict<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw1\">IF</span> isOrdered<span class=\"br0\">(</span>theWord<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>        words<span class=\"br0\">[</span><a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>theWord<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> words<span class=\"br0\">[</span><a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>theWord<span class=\"br0\">)</span><span class=\"br0\">]</span> &amp; <span class=\"st0\">\" \"</span> &amp; theWord<br/>    <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/><span class=\"kw1\">NEXT</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> words<span class=\"br0\">[</span><a href=\"http://www.qbasicnews.com/qboho/qckubound.shtml\"><span class=\"kw3\">UBOUND</span></a><span class=\"br0\">(</span>words<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>PAUSE<br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> isOrdered<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw1\">FOR</span> <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">IF</span> s<span class=\"br0\">{</span>i<span class=\"br0\">}</span> <span class=\"sy0\">&gt;</span> s<span class=\"br0\">{</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"kw1\">THEN</span><br/>            <span class=\"kw1\">RETURN</span> FALSE<br/>        <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>    <span class=\"kw1\">NEXT</span><br/>    <span class=\"kw1\">RETURN</span> TRUE<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 45, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include lib/stmstack.4th               \\ include string stack library<br/>\u00a0<br/>: check-word                           ( a n -- a n f)<br/>  2dup bl &gt;r                           \\ start off with a space<br/>  begin<br/>    dup                                \\ when not end of word<br/>  while<br/>    over <a class=\"__cf_email__\" data-cfemail=\"4a290a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> <a class=\"__cf_email__\" data-cfemail=\"2d5f6d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &gt;=                      \\ check character<br/>  while<br/>    r&gt; drop over <a class=\"__cf_email__\" data-cfemail=\"e586a5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &gt;r chop            \\ chop character off<br/>  repeat r&gt; drop nip 0=                \\ cleanup and set flag<br/>;<br/>\u00a0<br/>: open-file                            ( -- h)<br/>  1 dup argn = abort\" Usage: ordered infile\"<br/>  args input open error? abort\" Cannot open file\"<br/>  dup use                              \\ return and use the handle<br/>;<br/>\u00a0<br/>: read-file                            ( --)<br/>  0 &gt;r                                 \\ begin with zero length<br/>  begin<br/>    refill                             \\ EOF detected?<br/>  while<br/>    0 parse dup <a class=\"__cf_email__\" data-cfemail=\"aad8ea\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &gt;=                  \\ equal or longer string length?<br/>    if                                 \\ check the word and adjust length<br/>      check-word if r&gt; drop dup &gt;r &gt;s else 2drop then<br/>    else                               \\ if it checks out, put on the stack<br/>      2drop                            \\ otherwise drop the word<br/>    then<br/>  repeat r&gt; drop                       \\ clean it up<br/>;<br/>\u00a0<br/>: read-back                            ( --)<br/>  s&gt; dup &gt;r type cr                    \\ longest string is on top of stack<br/>  begin s&gt; dup <a class=\"__cf_email__\" data-cfemail=\"ccbe8c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &gt;= while type cr repeat<br/>  2drop r&gt; drop                        \\ keep printing until shorter word <br/>;                                      \\ has been found<br/>\u00a0<br/>: ordered                              ( --)<br/>  open-file s.clear read-file read-back close<br/>;                                      \\ open file, clear the stack, read file<br/>                                       \\ read it back and close the file<br/>ordered</pre>"}, {"lang": "Fortran", "loc": 115, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">!***************************************************************************************</span><br/> <span class=\"kw1\">module</span> ordered_module<br/><span class=\"co1\">!***************************************************************************************</span><br/> <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span> <br/>\u00a0<br/>\t<span class=\"co1\">!the dictionary file:</span><br/>\t<span class=\"kw3\">integer</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">file_unit</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><br/>\t<span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">filename</span> <span class=\"sy0\">=</span> <span class=\"st0\">'unixdict.txt'</span><br/>\u00a0<br/>\t<span class=\"co1\">!maximum number of characters in a word:</span><br/>\t<span class=\"kw3\">integer</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">max_chars</span> <span class=\"sy0\">=</span> <span class=\"nu0\">50</span><br/>\u00a0<br/>\t<span class=\"kw3\">type</span> word <br/>\t  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span>max_chars<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">str</span>    <span class=\"co1\">!the word from the dictionary</span><br/>\t  <span class=\"kw3\">integer</span>\t<span class=\"sy0\">::</span> <span class=\"me2\">n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>    <span class=\"co1\">!length of this word</span><br/>\t  <span class=\"kw3\">logical</span>\t<span class=\"sy0\">::</span> <span class=\"me2\">ordered</span> <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span>    <span class=\"co1\">!if it is an ordered word</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw3\">type</span> word<br/>\u00a0<br/>\t<span class=\"co1\">!the dictionary structure:</span><br/>\t<span class=\"kw3\">type</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span>,<span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>,<span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">dict</span><br/>\u00a0<br/>\t<span class=\"kw1\">contains</span><br/><span class=\"co1\">!***************************************************************************************</span><br/>\u00a0<br/>\t<span class=\"co1\">!******************************************************************************</span><br/>\t\t<span class=\"kw1\">function</span> count_lines_in_file<span class=\"br0\">(</span>fid<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>n_lines<span class=\"br0\">)</span><br/>\t<span class=\"co1\">!******************************************************************************</span><br/>\t\t<span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>\t\t<span class=\"kw3\">integer</span>             <span class=\"sy0\">::</span> <span class=\"me2\">n_lines</span><br/>\t\t<span class=\"kw3\">integer</span>,<span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>  <span class=\"sy0\">::</span> <span class=\"me2\">fid</span>\t\t<br/>\t\t<span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>    <span class=\"sy0\">::</span> <span class=\"me2\">tmp</span><br/>\t\t<span class=\"kw3\">integer</span>             <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\t\t<span class=\"kw3\">integer</span>             <span class=\"sy0\">::</span> <span class=\"me2\">ios</span><br/>\u00a0<br/>\t\t<span class=\"co1\">!the file is assumed to be open already.</span><br/>\u00a0<br/>\t\trewind<span class=\"br0\">(</span>fid<span class=\"br0\">)</span>\t  <span class=\"co1\">!rewind to beginning of the file</span><br/>\u00a0<br/>\t\tn_lines <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw1\">do</span> <span class=\"co1\">!read each line until the end of the file.</span><br/>\t\t\tread<span class=\"br0\">(</span>fid,<span class=\"st0\">'(A1)'</span>,<span class=\"kw1\">iostat</span><span class=\"sy0\">=</span>ios<span class=\"br0\">)</span> tmp<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>ios &lt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">exit</span>      <span class=\"co1\">!End of file</span><br/>\t\t\tn_lines <span class=\"sy0\">=</span> n_lines <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>  <span class=\"co1\">!row counter</span><br/>\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>\t\trewind<span class=\"br0\">(</span>fid<span class=\"br0\">)</span>   <span class=\"co1\">!rewind to beginning of the file\t</span><br/>\u00a0<br/>\t<span class=\"co1\">!******************************************************************************</span><br/>\t\t<span class=\"kw1\">end</span> <span class=\"kw1\">function</span> count_lines_in_file<br/>\t<span class=\"co1\">!******************************************************************************</span><br/>\u00a0<br/>\t<span class=\"co1\">!******************************************************************************</span><br/>\t pure elemental <span class=\"kw1\">function</span> ordered_word<span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>yn<span class=\"br0\">)</span><br/>\t<span class=\"co1\">!******************************************************************************</span><br/>\t<span class=\"co1\">! turns true if word is an ordered word, false if it is not.</span><br/>\t<span class=\"co1\">!******************************************************************************</span><br/>\u00a0<br/>\t <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\t <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>,<span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">word</span><br/>\t <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">yn</span><br/>\u00a0<br/>\t <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>\t yn <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><br/>\t <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,<span class=\"kw4\">len_trim</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t \t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">ichar</span><span class=\"br0\">(</span>word<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>&lt;<span class=\"kw4\">ichar</span><span class=\"br0\">(</span>word<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t \t\tyn <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>\t \t\t<span class=\"kw1\">exit</span><br/>\t \t<span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>\t<span class=\"co1\">!******************************************************************************</span><br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> ordered_word<br/>\t<span class=\"co1\">!******************************************************************************</span><br/>\u00a0<br/><span class=\"co1\">!***************************************************************************************</span><br/> <span class=\"kw1\">end</span> <span class=\"kw1\">module</span> ordered_module<br/><span class=\"co1\">!***************************************************************************************</span><br/>\u00a0<br/><span class=\"co1\">!****************************************************</span><br/> <span class=\"kw1\">program</span> main<br/><span class=\"co1\">!****************************************************</span><br/> <span class=\"kw3\">use</span> ordered_module<br/> <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>\t<span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>,n,n_max<br/>\u00a0<br/>\t<span class=\"co1\">!open the dictionary and read in all the words:</span><br/>\topen<span class=\"br0\">(</span><span class=\"kw1\">unit</span><span class=\"sy0\">=</span>file_unit,<span class=\"kw1\">file</span><span class=\"sy0\">=</span>filename<span class=\"br0\">)</span>     \t\t<span class=\"co1\">!open the file</span><br/>\tn <span class=\"sy0\">=</span> count_lines_in_file<span class=\"br0\">(</span>file_unit<span class=\"br0\">)</span>      <span class=\"co1\">!count lines in the file</span><br/>\t<span class=\"kw1\">allocate</span><span class=\"br0\">(</span>dict<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>                       <span class=\"co1\">!allocate dictionary structure</span><br/>\t<span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,n                                <span class=\"co1\">!</span><br/>\t\tread<span class=\"br0\">(</span>file_unit,<span class=\"st0\">'(A)'</span><span class=\"br0\">)</span> dict<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">%</span>str   <span class=\"co1\">!each line is a word in the dictionary</span><br/>\t\tdict<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">%</span>n <span class=\"sy0\">=</span> <span class=\"kw4\">len_trim</span><span class=\"br0\">(</span>dict<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">%</span>str<span class=\"br0\">)</span>   <span class=\"co1\">!save word length</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">do</span>\t\t<br/>\tclose<span class=\"br0\">(</span>file_unit<span class=\"br0\">)</span>                        <span class=\"co1\">!close the file</span><br/>\u00a0<br/>\t<span class=\"co1\">!use elemental procedure to get ordered words:</span><br/>\tdict<span class=\"sy0\">%</span>ordered <span class=\"sy0\">=</span> ordered_word<span class=\"br0\">(</span>dict<span class=\"sy0\">%</span>str<span class=\"br0\">)</span>\t<br/>\u00a0<br/>\t<span class=\"co1\">!max length of an ordered word:</span><br/>\tn_max <span class=\"sy0\">=</span> <span class=\"kw4\">maxval</span><span class=\"br0\">(</span>dict<span class=\"sy0\">%</span>n, mask<span class=\"sy0\">=</span>dict<span class=\"sy0\">%</span>ordered<span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"co1\">!write the output:</span><br/>\t<span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,n<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>dict<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">%</span>ordered <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> dict<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">%</span>n<span class=\"sy0\">==</span>n_max<span class=\"br0\">)</span> write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(A,A)'</span>,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'NO'</span><span class=\"br0\">)</span> <span class=\"kw4\">trim</span><span class=\"br0\">(</span>dict<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">%</span>str<span class=\"br0\">)</span>,<span class=\"st0\">' '</span><br/>\t<span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\twrite<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">''</span><br/>\u00a0<br/><span class=\"co1\">!****************************************************</span><br/> <span class=\"kw1\">end</span> <span class=\"kw1\">program</span> main<br/><span class=\"co1\">!****************************************************</span><br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 42, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> isOrdered<span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">Const</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> &lt;= <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">True</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> &lt; s<span class=\"br0\">[</span>i - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>  <span class=\"kw1\">Next</span> <br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">True</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> words<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw1\">Dim</span> word <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw1\">Dim</span> maxLength <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span><br/><span class=\"kw1\">Dim</span> count <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <br/><span class=\"kw1\">Open</span> <span class=\"st0\">\"undict.txt\"</span> <span class=\"kw1\">For</span> <span class=\"kw1\">Input</span> <span class=\"kw1\">As</span> <span class=\"co2\">#1</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Not</span> <span class=\"kw1\">Eof</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Line</span> <span class=\"kw1\">Input</span> <span class=\"co2\">#1, word</span><br/>  <span class=\"kw1\">If</span> isOrdered<span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span> = maxLength <span class=\"kw1\">Then</span><br/>      <span class=\"kw1\">Redim</span> <span class=\"kw1\">Preserve</span> words<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> count<span class=\"br0\">)</span><br/>      words<span class=\"br0\">(</span>count<span class=\"br0\">)</span> = word<br/>      count += <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">ElseIf</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span> &gt; maxLength <span class=\"kw1\">Then</span><br/>      <span class=\"kw1\">Erase</span> words<br/>      maxLength = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><br/>      <span class=\"kw1\">Redim</span> words<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      words<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> = word<br/>      count = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Wend</span><br/>\u00a0<br/><span class=\"kw1\">Close</span> <span class=\"co2\">#1</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The ordered words with the longest length (\"</span>; <span class=\"kw1\">Str</span><span class=\"br0\">(</span>maxLength<span class=\"br0\">)</span>; <span class=\"st0\">\") in undict.txt are\u00a0:\"</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">UBound</span><span class=\"br0\">(</span>words<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Print</span> words<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Gambas", "loc": 30, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sDict <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/type/file\"><span class=\"kw4\">File</span></a>.<span class=\"me1\">Load</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=user+site:http://gambasdoc.org/&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw6\">User</span></a>.<span class=\"me1\">Home</span> <span class=\"sy0\">&amp;/</span> <span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span>  <span class=\"co1\">'Store the 'Dictionary'</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sOrdered <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/new\"><span class=\"kw1\">New</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span>                                  <span class=\"co1\">'To store ordered words</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sHold <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/new\"><span class=\"kw1\">New</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span>                                     <span class=\"co1\">'General store</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sTemp <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a>                                           <span class=\"co1\">'Temp variable</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siCount <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a>                                          <span class=\"co1\">'Counter</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> <a href=\"http://gambasdoc.org/help/lang/each\"><span class=\"kw1\">Each</span></a> sTemp <a href=\"http://gambasdoc.org/help/lang/in\"><span class=\"kw1\">In</span></a> <a href=\"http://gambasdoc.org/help/lang/split\"><span class=\"kw2\">Split</span></a><span class=\"br0\">(</span>sDict, gb.<span class=\"me1\">NewLine</span><span class=\"br0\">)</span>                    <span class=\"co1\">'For each word in the Dictionary</span><br/>  <a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> <a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span>sTemp<span class=\"br0\">)</span>                               <span class=\"co1\">'Loop for each letter in the word</span><br/>    sHold.<span class=\"me1\">Add</span><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/mid\"><span class=\"kw2\">Mid</span></a><span class=\"br0\">(</span>sTemp, siCount, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                         <span class=\"co1\">'Put each letter in sHold array</span><br/>  <a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>  sHold.<span class=\"me1\">Sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>                                                <span class=\"co1\">'Sort sHold (abbott = abboot, zoom = mooz)</span><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> sTemp <span class=\"sy0\">=</span> sHold.<span class=\"me1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> sOrdered.<span class=\"me1\">Add</span><span class=\"br0\">(</span>sTemp<span class=\"br0\">)</span>          <span class=\"co1\">'If they are the same (abbott(OK) mooz(not OK)) then add to sOrdered</span><br/>  sHold.<span class=\"me1\">Clear</span>                                                 <span class=\"co1\">'Empty sHold</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/>siCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>                                                   <span class=\"co1\">'Reset siCount</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> <a href=\"http://gambasdoc.org/help/lang/each\"><span class=\"kw1\">Each</span></a> sTemp <a href=\"http://gambasdoc.org/help/lang/in\"><span class=\"kw1\">In</span></a> sOrdered                                    <span class=\"co1\">'For each of the Ordered words</span><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span>sTemp<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> siCount <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> siCount <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span>sTemp<span class=\"br0\">)</span>           <span class=\"co1\">'Count the length of the word and keep a record of the longest length</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> <a href=\"http://gambasdoc.org/help/lang/each\"><span class=\"kw1\">Each</span></a> sTemp <a href=\"http://gambasdoc.org/help/lang/in\"><span class=\"kw1\">In</span></a> sOrdered                                    <span class=\"co1\">'For each of the Ordered words</span><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/len\"><span class=\"kw2\">Len</span></a><span class=\"br0\">(</span>sTemp<span class=\"br0\">)</span> <span class=\"sy0\">=</span> siCount <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> sHold.<span class=\"me1\">Add</span><span class=\"br0\">(</span>sTemp<span class=\"br0\">)</span>               <span class=\"co1\">'If it is one of the longest add it to sHold</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/>sHold.<span class=\"me1\">Sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>                                                  <span class=\"co1\">'Sort sHold</span><br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> sHold.<span class=\"me1\">Join</span><span class=\"br0\">(</span>gb.<span class=\"me1\">NewLine</span><span class=\"br0\">)</span>                                  <span class=\"co1\">'Display the result</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a> </pre>"}, {"lang": "Go", "loc": 57, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"bytes\"</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"io/ioutil\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// read into memory in one chunk</span><br/>    b<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> ioutil<span class=\"sy3\">.</span><span class=\"me1\">ReadFile</span><span class=\"sy1\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// split at line ends</span><br/>    bss <span class=\"sy2\">:=</span> bytes<span class=\"sy3\">.</span>Split<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">{</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy1\">})</span><br/>\u00a0<br/>    <span class=\"co1\">// accumulate result</span><br/>    <span class=\"kw1\">var</span> longest <span class=\"kw4\">int</span><br/>    <span class=\"kw1\">var</span> list <span class=\"sy1\">[][]</span><span class=\"kw4\">byte</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> bs <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> bss <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// don't bother with words shorter than</span><br/>        <span class=\"co1\">// our current longest ordered word</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>bs<span class=\"sy1\">)</span> &lt; longest <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// check for ordered property</span><br/>        <span class=\"kw1\">var</span> lastLetter <span class=\"kw4\">byte</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> <span class=\"sy3\">==</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>bs<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                <span class=\"co1\">// end of word.  it's an ordered word.</span><br/>                <span class=\"co1\">// save it and break from loop</span><br/>                <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>bs<span class=\"sy1\">)</span> &gt; longest <span class=\"sy1\">{</span><br/>                    longest <span class=\"sy2\">=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>bs<span class=\"sy1\">)</span><br/>                    list <span class=\"sy2\">=</span> list<span class=\"sy1\">[:</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>                <span class=\"sy1\">}</span><br/>                list <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>list<span class=\"sy1\">,</span> bs<span class=\"sy1\">)</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"co1\">// check next letter</span><br/>            b <span class=\"sy2\">:=</span> bs<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>            <span class=\"kw1\">if</span> b &lt; <span class=\"st0\">'a'</span> <span class=\"sy3\">||</span> b <span class=\"sy3\">&gt;</span> <span class=\"st0\">'z'</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">continue</span> <span class=\"co1\">// not a letter.  ignore.</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">if</span> b &lt; lastLetter <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">break</span> <span class=\"co1\">// word not ordered.</span><br/>            <span class=\"sy1\">}</span><br/>            <span class=\"co1\">// letter passes test</span><br/>            lastLetter <span class=\"sy2\">=</span> b<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// print result</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> bs <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> list <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">(</span>bs<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 9, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> isOrdered <span class=\"sy0\">=</span> <span class=\"br0\">{</span> word <span class=\"sy0\">-&gt;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> letters <span class=\"sy0\">=</span> word <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a><span class=\"sy0\">;</span> letters <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> letters<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20sort\"><span class=\"kw5\">sort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> isOrdered<span class=\"br0\">(</span><span class=\"st0\">'abbey'</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> <span class=\"sy0\">!</span>isOrdered<span class=\"br0\">(</span><span class=\"st0\">'cat'</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> dictUrl <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=URL&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">URL</span></a><span class=\"br0\">(</span><span class=\"st0\">'http://www.puzzlers.org/pub/wordlists/unixdict.txt'</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> orderedWords <span class=\"sy0\">=</span> dictUrl.<span class=\"me1\">readLines</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20findAll\"><span class=\"kw5\">findAll</span></a> <span class=\"br0\">{</span> isOrdered<span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> owMax <span class=\"sy0\">=</span> orderedWords<span class=\"sy0\">*</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20max\"><span class=\"kw5\">max</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>orderedWords.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20findAll\"><span class=\"kw5\">findAll</span></a> <span class=\"br0\">{</span> it.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> owMax <span class=\"br0\">}</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> it <span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 21, "block": "<pre class=\"haskell highlighted_source\">\u00a0<br/><span class=\"co1\">-- Words are read from the standard input.  We keep in memory only the current</span><br/><span class=\"co1\">-- set of longest, ordered words.</span><br/><span class=\"co1\">-- </span><br/><span class=\"co1\">-- Limitation: the locale's collation order is not take into consideration.</span><br/>\u00a0<br/>isOrdered wws<span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>:ws<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:and\"><span class=\"kw3\">and</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span><span class=\"br0\">)</span> wws ws<br/>\u00a0<br/>longestOrderedWords <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a> f <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> isOrdered<br/>  <span class=\"kw1\">where</span> f <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:max\"><span class=\"kw3\">max</span></a><span class=\"sy0\">,</span> acc<span class=\"br0\">)</span> w <span class=\"sy0\">=</span><br/>          <span class=\"kw1\">let</span> len <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> w <span class=\"kw1\">in</span> <br/>          <span class=\"kw1\">case</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:compare\"><span class=\"kw3\">compare</span></a> len <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:max\"><span class=\"kw3\">max</span></a> <span class=\"kw1\">of</span><br/>            LT <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:max\"><span class=\"kw3\">max</span></a><span class=\"sy0\">,</span> acc<span class=\"br0\">)</span><br/>            EQ <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:max\"><span class=\"kw3\">max</span></a><span class=\"sy0\">,</span> w:acc<span class=\"br0\">)</span><br/>            GT <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>len<span class=\"sy0\">,</span> <span class=\"br0\">[</span>w<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  str <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:getContents\"><span class=\"kw3\">getContents</span></a><br/>  <span class=\"kw1\">let</span> ws <span class=\"sy0\">=</span> longestOrderedWords <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:words\"><span class=\"kw3\">words</span></a> str<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> ws<br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 10, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">link</span> strings<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>   f <span class=\"sy0\">:=</span> <span class=\"kw4\">open</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"Give dictionary file name on command line\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> <span class=\"br0\">(</span>maxLen <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> maxLen <span class=\"sy0\">&lt;=</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span>w <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>f<span class=\"br0\">)</span><span class=\"sy0\">,</span> w <span class=\"sy0\">==</span> csort<span class=\"br0\">(</span>w<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> maxLen <span class=\"sy0\">&lt;:=</span> <span class=\"sy0\">*</span>w <span class=\"kw1\">then</span> maxList <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>  <span class=\"co1\">#discard any shorter sorted words </span><br/>      <span class=\"kw4\">put</span><span class=\"br0\">(</span>maxList<span class=\"sy0\">,</span> w<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"sy0\">!\\</span>maxList<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Io", "loc": 17, "block": "<pre class=\"io highlighted_source\"><span class=\"kw3\">file</span>\u00a0:= <span class=\"kw3\">File</span> <span class=\"kw2\">clone</span> openForReading<span class=\"br0\">(</span><span class=\"st0\">\"./unixdict.txt\"</span><span class=\"br0\">)</span><br/>words\u00a0:= <span class=\"kw3\">file</span> readLines<br/><span class=\"kw3\">file</span> close<br/>\u00a0<br/>maxLen\u00a0:= <span class=\"nu0\">0</span><br/>orderedWords\u00a0:= <span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>words <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>word,<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>word size <span class=\"sy0\">&gt;</span>= maxLen<span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"br0\">(</span>word == <span class=\"br0\">(</span>word asMutable sort<span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> word size <span class=\"sy0\">&gt;</span> maxLen,<br/>            maxLen = word size<br/>            orderedWords empty<br/>        <span class=\"br0\">)</span><br/>        orderedWords append<span class=\"br0\">(</span>word<span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/>orderedWords join<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> println</pre>"}, {"lang": "J", "loc": 5, "block": "<pre class=\"j highlighted_source\">   require<span class=\"st_h\">'web/gethttp'</span><br/>   dict=: gethttp<span class=\"st_h\">'http://www.puzzlers.org/pub/wordlists/unixdict.txt'</span><br/>   oWords=: <span class=\"sy0\">(</span>#~ ] = /:~L:<span class=\"nu0\">0</span><span class=\"sy0\">)</span> &lt;;.<span class=\"nu0\">_2</span> dict-.CR<br/>  \u00a0;:inv <span class=\"sy0\">(</span>#~ <span class=\"sy0\">(</span>= &gt;./<span class=\"sy0\">)</span>@:<span class=\"sy0\">(</span>#@&gt;<span class=\"sy0\">))</span>oWords<br/>abbott accent accept access accost almost bellow billow biopsy chilly choosy choppy effort floppy glossy knotty</pre>"}, {"lang": "Java", "loc": 43, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.io.BufferedReader</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.io.FileReader</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.io.IOException</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Collections</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Comparator</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.LinkedList</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> Ordered <span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw3\">boolean</span> isOrderedWord<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> word<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw3\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span> sortedWord = word.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">(</span>sortedWord<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw2\">return</span> word.<span class=\"me1\">equals</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">(</span>sortedWord<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw2\">throws</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/io/IOException.html\"><span class=\"kw20\">IOException</span></a><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> orderedWords = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/LinkedList.html\"><span class=\"kw46\">LinkedList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/io/BufferedReader.html\"><span class=\"kw20\">BufferedReader</span></a> in = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/io/BufferedReader.html\"><span class=\"kw20\">BufferedReader</span></a><span class=\"br0\">(</span><span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/io/FileReader.html\"><span class=\"kw20\">FileReader</span></a><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>in.<span class=\"me1\">ready</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> word = in.<span class=\"me1\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>isOrderedWord<span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"br0\">)</span> orderedWords.<span class=\"me1\">add</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tin.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Collections.html\"><span class=\"kw46\">Collections</span></a>.<span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span>sort<span class=\"br0\">(</span>orderedWords, <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Comparator.html\"><span class=\"kw46\">Comparator</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t@<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Override.html\"><span class=\"kw21\">Override</span></a><br/>\t\t\t<span class=\"kw2\">public</span> <span class=\"kw3\">int</span> compare<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> o1, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> o2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw2\">return</span> <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"br0\">(</span>o2.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>o1.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw3\">int</span> maxLen = orderedWords.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> word: orderedWords<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>word.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> == maxLen<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 11, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> fs <span class=\"sy0\">=</span> require<span class=\"br0\">(</span><span class=\"st0\">'fs'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> print <span class=\"sy0\">=</span> require<span class=\"br0\">(</span><span class=\"st0\">'sys'</span><span class=\"br0\">)</span>.<span class=\"me1\">print</span><span class=\"sy0\">;</span><br/>fs.<span class=\"me1\">readFile</span><span class=\"br0\">(</span><span class=\"st0\">'./unixdict.txt'</span><span class=\"sy0\">,</span> <span class=\"st0\">'ascii'</span><span class=\"sy0\">,</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>err<span class=\"sy0\">,</span> data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> is_ordered <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw1\">return</span> word.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> word<span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        ordered_words <span class=\"sy0\">=</span> data.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span>is_ordered<span class=\"br0\">)</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw1\">return</span> a.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> b.<span class=\"me1\">length</span><span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        longest <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> curr <span class=\"sy0\">=</span> len <span class=\"sy0\">=</span> ordered_words<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">,</span> lcv <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    while <span class=\"br0\">(</span>curr <span class=\"sy0\">===</span> len<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        longest.<span class=\"me1\">push</span><span class=\"br0\">(</span>ordered_words<span class=\"br0\">[</span>lcv<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        curr <span class=\"sy0\">=</span> ordered_words<span class=\"br0\">[</span><span class=\"sy0\">++</span>lcv<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    print<span class=\"br0\">(</span>longest.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 14, "block": "<pre class=\"text highlighted_source\">def is_sorted:<br/>  if length &lt;= 1 then true<br/>  else .[0] &lt;= .[1] and (.[1:] | is_sorted)<br/>  end;<br/>\u00a0<br/>def longest_ordered_words:<br/>  # avoid string manipulation:<br/>  def is_ordered: explode | is_sorted;<br/>  map(select(is_ordered))<br/>  | (map(length)|max) as $max<br/>  | map( select(length == $max) );<br/>\u00a0<br/>\u00a0<br/>split(\"\\n\")  | longest_ordered_words</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">issorted(\"abc\") # true</pre>"}, {"lang": "K", "loc": 17, "block": "<pre class=\"text highlighted_source\">    <a class=\"__cf_email__\" data-cfemail=\"88ffc8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&amp;d=|/d:#:'w:<a class=\"__cf_email__\" data-cfemail=\"305470\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&amp;&amp;/'{~x&lt;y}':'d:0:\"unixdict.txt\"<br/>(\"abbott\"<br/> \"accent\"<br/> \"accept\"<br/> \"access\"<br/> \"accost\"<br/> \"almost\"<br/> \"bellow\"<br/> \"billow\"<br/> \"biopsy\"<br/> \"chilly\"<br/> \"choosy\"<br/> \"choppy\"<br/> \"effort\"<br/> \"floppy\"<br/> \"glossy\"<br/> \"knotty\")</pre>"}, {"lang": "Kotlin", "loc": 21, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> file <span class=\"sy0\">=</span> File<span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    file.<span class=\"me1\">forEachLine</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>it.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">sorted</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span>separator <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> it<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            result +<span class=\"sy0\">=</span> it<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    result.<span class=\"me1\">sortByDescending</span> <span class=\"br0\">{</span> it.<span class=\"me1\">length</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> max <span class=\"sy0\">=</span> result<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>word in result<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>word.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> max<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span>word<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lang5", "loc": 37, "block": "<pre class=\"text highlighted_source\">: &gt;string-index<br/>    \"\" split<br/>    \"&amp;'0123456789abcdefghijklmnopqrstuvwxyz\" \"\" split<br/>    swap index collapse\u00a0;<br/>: chars  \"\" split length swap drop\u00a0;<br/>: cr  \"\\n\" .\u00a0;<br/>: nip  swap drop\u00a0;<br/>: ordered?<br/>    dup grade subscript\u00a0!= '+ reduce if 0 else -1 then\u00a0;<br/>\u00a0<br/>: filtering<br/>    [] '_ set<br/>    0 do read <br/>        2dup chars<br/>        &lt;=<br/>        if  dup &gt;string-index ordered?<br/>            if   2dup chars<br/>                 &lt;<br/>                 if   nip dup chars swap<br/>                      [] '_ set<br/>                 then<br/>                 _ swap append '_ set<br/>                 '. .                       # progress dot<br/>            else drop<br/>            then<br/>        else drop<br/>        then<br/>    eof if break then loop<br/>\u00a0<br/>    cr _ . cr<br/>   \u00a0;<br/>\u00a0<br/>: ordered-words<br/>    '&lt; 'unixdict.txt open 'fh set<br/>    fh fin filtering fh close\u00a0;<br/>\u00a0<br/>ordered-words</pre>"}, {"lang": "Lasso", "loc": 18, "block": "<pre class=\"text highlighted_source\">local(f = file('unixdict.txt'), words = array, ordered = array, maxleng = 0)<br/>#f-&gt;dowithclose =&gt; {<br/>\t#f-&gt;foreachLine =&gt; {<br/>\t\t#words-&gt;insert(#1)<br/>\t}<br/>}<br/>with w in #words<br/>do =&gt; {<br/>\tlocal(tosort = #w-&gt;asString-&gt;values)<br/>\t#tosort-&gt;sort<br/>\tif(#w-&gt;asString == #tosort-&gt;join('')) =&gt; {<br/>\t\t#ordered-&gt;insert(#w-&gt;asString)<br/>\t\t#w-&gt;asString-&gt;size &gt; #maxleng\u00a0? #maxleng = #w-&gt;asString-&gt;size<br/>\t}<br/>}<br/>with w in #ordered<br/>where #w-&gt;size == #maxleng<br/>do =&gt; {^ #w + '\\r' ^}</pre>"}, {"lang": "Liberty BASIC", "loc": 35, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"co1\">'Ordered wordsFrom Rosetta Code</span><br/><span class=\"kw1\">open</span> <span class=\"st0\">\"unixdict.txt\"</span> <span class=\"kw1\">for</span> <span class=\"kw1\">input</span> <span class=\"kw1\">as</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span><br/><span class=\"co1\">'this is not normal DOS/Windows file.</span><br/><span class=\"co1\">'It LF delimited, not CR LF</span><br/><span class=\"co1\">'So Line input would not work.</span><br/>\u00a0<br/>lf$<span class=\"sy0\">=</span><span class=\"kw2\">chr$</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>curLen<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>wordList$<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/><span class=\"kw1\">while</span> <span class=\"kw2\">not</span><span class=\"br0\">(</span><span class=\"kw2\">eof</span><span class=\"br0\">(</span><span class=\"sy0\">#</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    a$<span class=\"sy0\">=</span><span class=\"kw2\">inputto$</span><span class=\"br0\">(</span><span class=\"sy0\">#</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> lf$<span class=\"br0\">)</span><br/>    <span class=\"co1\">'now, check word</span><br/>    flag <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    c$ <span class=\"sy0\">=</span> <span class=\"kw2\">left$</span><span class=\"br0\">(</span>a$<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>a$<span class=\"br0\">)</span><br/>        d$ <span class=\"sy0\">=</span> <span class=\"kw2\">mid$</span><span class=\"br0\">(</span>a$<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> c$<span class=\"sy0\">&gt;</span>d$ <span class=\"kw1\">then</span> flag<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">for</span><br/>        c$<span class=\"sy0\">=</span>d$<br/>    <span class=\"kw1\">next</span><br/>    <span class=\"co1\">'ckecked, proceed if ordered word</span><br/>    <span class=\"kw1\">if</span> flag <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">if</span> curLen<span class=\"sy0\">=</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>a$<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            wordList$<span class=\"sy0\">=</span>wordList$<span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"sy0\">+</span>a$<br/>        <span class=\"kw1\">else</span><br/>            <span class=\"kw1\">if</span> curLen<span class=\"sy0\">&lt;</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>a$<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                curLen<span class=\"sy0\">=</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>a$<span class=\"br0\">)</span><br/>                wordList$<span class=\"sy0\">=</span>a$<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">wend</span><br/><span class=\"kw1\">close</span> <span class=\"sy0\">#</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">print</span> wordList$<br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 27, "block": "<pre class=\"text highlighted_source\">-- Contents of unixdict.txt passed as string<br/>on printLongestOrderedWords (words)<br/>  res = []<br/>  maxlen = 0<br/>  _player.itemDelimiter = numtochar(10)<br/>  cnt = words.item.count<br/>  repeat with i = 1 to cnt<br/>    w = words.item[i]<br/>    len = w.length<br/>    ordered = TRUE<br/>    repeat with j = 2 to len<br/>      if chartonum(w.char[j-1])&gt;chartonum(w.char[j]) then<br/>        ordered = FALSE<br/>        exit repeat<br/>      end if<br/>    end repeat<br/>    if ordered then<br/>      if len &gt; maxlen then<br/>        res = [w]<br/>        maxlen = len<br/>      else if len = maxlen then<br/>        res.add(w)<br/>      end if<br/>    end if<br/>  end repeat<br/>  put res<br/>end</pre>"}, {"lang": "Lua", "loc": 29, "block": "<pre class=\"lua highlighted_source\">fp <span class=\"sy0\">=</span> <span class=\"kw3\">io.open</span><span class=\"br0\">(</span> <span class=\"st0\">\"dictionary.txt\"</span> <span class=\"br0\">)</span><br/>\u00a0<br/>maxlen <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>list <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> w <span class=\"kw2\">in</span> fp<span class=\"sy0\">:</span>lines<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    ordered <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><br/>    <span class=\"kw1\">for</span> l <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"kw3\">string.len</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">if</span> <span class=\"kw3\">string.byte</span><span class=\"br0\">(</span> w<span class=\"sy0\">,</span> l<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"kw3\">string.byte</span><span class=\"br0\">(</span> w<span class=\"sy0\">,</span> l <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t    ordered <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><br/>  \t    <span class=\"kw1\">break</span><br/>\t<span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> ordered <span class=\"kw1\">then</span><br/>\t<span class=\"kw1\">if</span> <span class=\"kw3\">string.len</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> maxlen <span class=\"kw1\">then</span><br/>\t    list <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t    list<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> w<br/>\t    maxlen <span class=\"sy0\">=</span> <span class=\"kw3\">string.len</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">elseif</span> <span class=\"kw3\">string.len</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span> <span class=\"sy0\">==</span> maxlen <span class=\"kw1\">then</span><br/>\t    list<span class=\"br0\">[</span><span class=\"sy0\">#</span>list<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> w<br/>\t<span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> w <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span> w <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>fp<span class=\"sy0\">:</span>close<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 19, "block": "<pre class=\"text highlighted_source\">lst\u00a0:= StringTools:-Split(Import(\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"), \"\\n\"):<br/>longest\u00a0:= 0:<br/>words\u00a0:= Array():<br/>i\u00a0:= 1:<br/>for word in lst do<br/>\tif StringTools:-IsSorted(word) then<br/>\t\tlen\u00a0:= StringTools:-Length(word):<br/>\t\tif len &gt; longest then<br/>\t\t\tlongest\u00a0:= len:<br/>\t\t\twords\u00a0:= Array():<br/>\t\t\twords(1)\u00a0:= word:<br/>\t\t\ti\u00a0:= 2:<br/>\t\telif len = longest then<br/>\t\t\twords(i)\u00a0:= word:<br/>\t\t\ti++:<br/>\t\tend if;<br/>\tend if;<br/>end do;<br/>for word in words do print(word); end do;</pre>"}, {"lang": "Mathematica", "loc": 6, "block": "<pre class=\"text highlighted_source\">Module[{max, <br/>   data = Select[Import[\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\", \"List\"], <br/>     OrderedQ[Characters[#]] &amp;]},<br/>  max = Max[StringLength /@ data];<br/>  Select[data, StringLength[#] == max &amp;]]<br/>\u00a0</pre>"}, {"lang": "MATLAB / Octave", "loc": 16, "block": "<pre class=\"matlab highlighted_source\">maxlen = <span class=\"nu0\">0</span>; <br/>listlen= <span class=\"nu0\">0</span>; <br/>fid = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fopen.html\"><span class=\"kw2\">fopen</span></a><span class=\"br0\">(</span><span class=\"co2\">'unixdict.txt'</span>,<span class=\"co2\">'r'</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">while</span> ~<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/feof.html\"><span class=\"kw2\">feof</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span><br/>    str = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fgetl.html\"><span class=\"kw2\">fgetl</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/any.html\"><span class=\"kw2\">any</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/diff.html\"><span class=\"kw2\">diff</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/abs.html\"><span class=\"kw2\">abs</span></a><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span>&lt;<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span>; <span class=\"kw1\">end</span>; <br/>\u00a0<br/>    <span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>str<span class=\"br0\">)</span>&gt;maxlen, <br/>\tlist = <span class=\"br0\">{</span>str<span class=\"br0\">}</span>;<br/>\tmaxlen = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>str<span class=\"br0\">)</span>; <br/>    <span class=\"kw1\">elseif</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>str<span class=\"br0\">)</span>==maxlen, <br/>\tlist<span class=\"br0\">{</span><span class=\"kw1\">end</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span> = str;<br/>    <span class=\"kw1\">end</span>;<br/><span class=\"kw1\">end</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fclose.html\"><span class=\"kw2\">fclose</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span>;<br/>printf<span class=\"br0\">(</span><span class=\"co2\">'%s\\n'</span>,list<span class=\"br0\">{</span>:<span class=\"br0\">}</span><span class=\"br0\">)</span>; </pre>"}, {"lang": "NetRexx", "loc": 40, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref savelog symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/>unixdict = <span class=\"st0\">'unixdict.txt'</span><br/><span class=\"kw1\">do</span><br/>  wmax = Integer.<span class=\"me0\">MIN_VALUE</span><br/>  dwords = ArrayList<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  inrdr = BufferedReader<span class=\"br0\">(</span>FileReader<span class=\"br0\">(</span>File<span class=\"br0\">(</span>unixdict<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">loop</span> <span class=\"kw2\">label</span> ln while inrdr.<span class=\"me0\">ready</span><br/>    dword = Rexx<span class=\"br0\">(</span>inrdr.<span class=\"me0\">readLine</span><span class=\"br0\">)</span>.<span class=\"kw6\">strip</span><br/>    <span class=\"kw1\">if</span> isOrdered<span class=\"br0\">(</span>dword<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>      dwords.<span class=\"me0\">add</span><span class=\"br0\">(</span>dword<span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> dword.<span class=\"me0\">length</span> <span class=\"sy0\">&gt;</span> wmax <span class=\"kw3\">then</span><br/>        wmax = dword.<span class=\"me0\">length</span><br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">end</span> ln<br/>  inrdr.<span class=\"me0\">close</span><br/>\u00a0<br/>  witerator = dwords.<span class=\"me0\">listIterator</span><br/>  <span class=\"kw1\">loop</span> <span class=\"kw2\">label</span> wd while witerator.<span class=\"me0\">hasNext</span><br/>    dword = Rexx witerator.<span class=\"me0\">next</span><br/>    <span class=\"kw1\">if</span> dword.<span class=\"me0\">length</span> <span class=\"sy0\">&lt;</span> wmax <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>      witerator.<span class=\"me0\">remove</span><br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">end</span> wd<br/>  dwords.<span class=\"me0\">trimToSize</span><br/>\u00a0<br/>  <span class=\"kw1\">say</span> dwords.<span class=\"kw6\">toString</span><br/>\u00a0<br/><span class=\"kw3\">catch</span> ex = IOException<br/>  ex.<span class=\"me0\">printStackTrace</span><br/><span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/>method isOrdered<span class=\"br0\">(</span>dword = String<span class=\"br0\">)</span> <span class=\"kw2\">inheritable</span> <span class=\"kw2\">static</span> <span class=\"kw2\">binary</span> <span class=\"kw2\">returns</span> boolean<br/>  wchars = dword.<span class=\"me0\">toCharArray</span><br/>  Arrays.<span class=\"me0\">sort</span><span class=\"br0\">(</span>wchars<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> dword.<span class=\"me0\">equalsIgnoreCase</span><span class=\"br0\">(</span>String<span class=\"br0\">(</span>wchars<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 21, "block": "<pre class=\"text highlighted_source\">import httpclient, strutils<br/>\u00a0<br/>proc isSorted(s): bool =<br/>  var last = low(char)<br/>  for c in s:<br/>    if c &lt; last:<br/>      return false<br/>    last = c<br/>  return true<br/>\u00a0<br/>const url = \"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"<br/>var mx = 0<br/>var words: seq[string] = @[]<br/>\u00a0<br/>for word in getContent(url).split():<br/>  if word.len &gt;= mx and isSorted(word):<br/>    if word.len &gt; mx:<br/>      words = @[]<br/>      mx = word.len<br/>    words.add(word)<br/>echo words.join(\" \")</pre>"}, {"lang": "OCaml", "loc": 52, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> input_line_opt ic <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">try</span> Some<span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinput_line\"><span class=\"kw3\">input_line</span></a> ic<span class=\"br0\">)</span><br/>  <span class=\"kw1\">with</span> End_of_file <span class=\"sy0\">-&gt;</span> None<br/>\u00a0<br/><span class=\"co1\">(* load each line in a list *)</span><br/><span class=\"kw1\">let</span> read_lines ic <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux acc <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">match</span> input_line_opt ic <span class=\"kw1\">with</span><br/>    <span class=\"sy0\">|</span> Some line <span class=\"sy0\">-&gt;</span> aux <span class=\"br0\">(</span>line <span class=\"sy0\">::</span> acc<span class=\"br0\">)</span><br/>    <span class=\"sy0\">|</span> None <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev acc<span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  aux <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> char_list_of_string str <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> lst <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> c <span class=\"sy0\">-&gt;</span> lst <span class=\"sy0\">:=</span> c <span class=\"sy0\">::</span> <span class=\"sy0\">!</span>lst<span class=\"br0\">)</span> str<span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev <span class=\"sy0\">!</span>lst<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> is_ordered word <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>    <span class=\"sy0\">|</span> c1<span class=\"sy0\">::</span>c2<span class=\"sy0\">::</span>tl <span class=\"sy0\">-&gt;</span><br/>        <span class=\"kw1\">if</span> c1 <span class=\"sy0\">&lt;=</span> c2<br/>        <span class=\"kw1\">then</span> aux <span class=\"br0\">(</span>c2<span class=\"sy0\">::</span>tl<span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">false</span><br/>    <span class=\"sy0\">|</span> c<span class=\"sy0\">::</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">true</span><br/>    <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">true</span>  <span class=\"co1\">(* should only occur with an empty string *)</span><br/>  <span class=\"kw1\">in</span><br/>  aux <span class=\"br0\">(</span>char_list_of_string word<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> longest_words words <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> res, _ <span class=\"sy0\">=</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left<br/>      <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>lst, n<span class=\"br0\">)</span> word <span class=\"sy0\">-&gt;</span><br/>        <span class=\"kw1\">let</span> len <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length word <span class=\"kw1\">in</span><br/>        <span class=\"kw1\">let</span> comp <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> len n <span class=\"kw1\">in</span><br/>        <span class=\"kw1\">match</span> lst, comp <span class=\"kw1\">with</span><br/>        <span class=\"sy0\">|</span> lst, <span class=\"nu0\">0</span>  <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>word<span class=\"sy0\">::</span>lst<span class=\"br0\">)</span>, n<span class=\"br0\">)</span> <span class=\"co1\">(* len = n *)</span><br/>        <span class=\"sy0\">|</span> lst, <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>lst, n<span class=\"br0\">)</span>         <span class=\"co1\">(* len &lt; n *)</span><br/>        <span class=\"sy0\">|</span> _, <span class=\"nu0\">1</span>    <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>word<span class=\"br0\">]</span>, len<span class=\"br0\">)</span>    <span class=\"co1\">(* len &gt; n *)</span><br/>        <span class=\"sy0\">|</span> _ <span class=\"sy0\">-&gt;</span> assert <span class=\"kw1\">false</span><br/>      <span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"\"</span><span class=\"br0\">]</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span> words<br/>  <span class=\"kw1\">in</span><br/>  <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev res<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> ic <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALopen_in\"><span class=\"kw3\">open_in</span></a> <span class=\"st0\">\"unixdict.txt\"</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> words <span class=\"sy0\">=</span> read_lines ic <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> lower_words <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>lowercase words <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> ordered_words <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>filter is_ordered lower_words <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> longest_ordered_words <span class=\"sy0\">=</span> longest_words ordered_words <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> longest_ordered_words</pre>"}, {"lang": "Oforth", "loc": 9, "block": "<pre class=\"text highlighted_source\">: longWords<br/>| w longest l s |<br/>   0 -&gt;longest<br/>   File new(\"unixdict.txt\") forEach: w [<br/>      w size dup -&gt;s longest &lt; ifTrue: [ continue ]<br/>      w sort w == ifFalse: [ continue ]<br/>      s longest &gt; ifTrue: [ s -&gt;longest ListBuffer new -&gt;l ]<br/>      l add(w)<br/>      ] l\u00a0; </pre>"}, {"lang": "ooRexx", "loc": 27, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"coMULTI\">/*REXX list (the longest) ordered word(s) from a supplied dictionary. */</span><br/>iFID= <span class=\"st0\">'UNIXDICT.TXT'</span><br/>w<span class=\"sy0\">.</span>=<span class=\"st0\">''</span><br/>mL=<span class=\"nu0\">0</span><br/><span class=\"kw1\">Do</span> j=<span class=\"nu0\">1</span> <span class=\"kw2\">While</span> <span class=\"kw6\">lines</span><span class=\"br0\">(</span>iFID<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span><br/>  x=<span class=\"kw2\">linein</span><span class=\"br0\">(</span>iFID<span class=\"br0\">)</span><br/>  w=<span class=\"kw6\">length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> w<span class=\"sy0\">&gt;</span>=mL <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">Parse</span> <span class=\"kw2\">Upper</span> <span class=\"kw2\">Var</span> x xU <span class=\"nu0\">1</span> z <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">Do</span> k=<span class=\"nu0\">2</span> <span class=\"kw2\">To</span> w<br/>      _=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>xU, k, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>_, <span class=\"st0\">'U'</span><span class=\"br0\">)</span>  <span class=\"kw3\">Then</span> <span class=\"kw1\">Iterate</span><br/>      <span class=\"kw1\">If</span> _<span class=\"sy0\">&lt;</span>z                <span class=\"kw3\">Then</span> <span class=\"kw1\">Iterate</span> j<br/>      z=_<br/>      <span class=\"kw3\">End</span><br/>    mL=w<br/>    w<span class=\"sy0\">.</span>w=w<span class=\"sy0\">.</span>w  x<br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/>nn=<span class=\"kw6\">words</span><span class=\"br0\">(</span>w<span class=\"sy0\">.</span>mL<span class=\"br0\">)</span><br/><span class=\"kw1\">Say</span> nn <span class=\"st0\">'word'</span>s<span class=\"br0\">(</span>nn<span class=\"br0\">)</span> <span class=\"st0\">\"found (of length\"</span> mL<span class=\"st0\">')'</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">''</span><br/><span class=\"kw1\">Do</span> n=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> nn<br/>  <span class=\"kw1\">Say</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>w<span class=\"sy0\">.</span>mL, n<span class=\"br0\">)</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Exit</span><br/>s: <span class=\"kw1\">Return</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">'s'</span>,<span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span></pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"parigp highlighted_source\">ordered<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>v<span class=\"sy0\">=</span><span class=\"kw1\">Vecsmall</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">,</span>t<span class=\"sy0\">=</span><span class=\"nu1\">97</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&gt;</span><span class=\"nu1\">64</span><span class=\"sy0\">&amp;&amp;</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&lt;</span><span class=\"nu1\">91</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">+=</span><span class=\"nu1\">32</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&lt;</span><span class=\"nu1\">97</span><span class=\"sy0\">||</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&gt;</span><span class=\"nu1\">122</span><span class=\"sy0\">||</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&lt;</span>t<span class=\"sy0\">,</span><span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>t<span class=\"sy0\">=</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"nu1\">1</span><br/>v<span class=\"sy0\">=</span><span class=\"kw1\">select</span><span class=\"br0\">(</span>ordered<span class=\"sy0\">,</span>readstr<span class=\"br0\">(</span><span class=\"st0\">\"~/unixdict.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>N<span class=\"sy0\">=</span><span class=\"kw1\">vecmax</span><span class=\"br0\">(</span><span class=\"kw1\">apply</span><span class=\"br0\">(</span><span class=\"kw1\">length</span><span class=\"sy0\">,</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">select</span><span class=\"br0\">(</span>s<span class=\"sy0\">-&gt;</span>#s<span class=\"sy0\">==</span>N<span class=\"sy0\">,</span> v<span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 13, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/open.html\"><span class=\"kw3\">open</span></a><span class=\"br0\">(</span>FH<span class=\"sy0\">,</span> <span class=\"st0\">\"&lt;\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Can't open file!<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@words</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re4\">&lt;FH&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <a href=\"http://perldoc.perl.org/functions/chomp.html\"><span class=\"kw3\">chomp</span></a><span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$words</span><span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span> <span class=\"kw1\">if</span> <span class=\"co5\">$_</span> <span class=\"kw1\">eq</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a><span class=\"br0\">(</span><span class=\"sy0\">//</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><a href=\"http://perldoc.perl.org/functions/close.html\"><span class=\"kw3\">close</span></a> FH<span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"@{$words[-1]}<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">say</span> lines<span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"kw1\">le</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span><span class=\"kw3\">comb</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">classify</span><span class=\"br0\">(</span><span class=\"sy0\">*.</span><span class=\"kw3\">chars</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">max</span><span class=\"br0\">(</span><span class=\"sy0\">*.</span><span class=\"me1\">key</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">value</span></pre>"}, {"lang": "Phix", "loc": 34, "block": "<pre class=\"text highlighted_source\">type ordered(sequence s)<br/>    for i=1 to length(s)-1 do<br/>        -- assume all items in the sequence are atoms<br/>        if s[i]&gt;s[i+1] then<br/>            return 0<br/>        end if<br/>    end for<br/>    return 1<br/>end type<br/>\u00a0<br/>integer maxlen<br/>sequence words<br/>object word<br/>constant fn = open(\"demo\\\\unixdict.txt\",\"r\")<br/>maxlen = -1<br/>\u00a0<br/>while 1 do<br/>    word = gets(fn)<br/>    if atom(word) then<br/>        exit<br/>    end if<br/>    word = trim(word)<br/>    if length(word)&gt;=maxlen and ordered(lower(word)) then<br/>        if length(word)&gt;maxlen then<br/>            maxlen = length(word)<br/>            words = {}<br/>        end if<br/>        words = append(words,word)<br/>    end if<br/>end while<br/>\u00a0<br/>close(fn)<br/>\u00a0<br/>?words</pre>"}, {"lang": "PicoLisp", "loc": 6, "block": "<pre class=\"text highlighted_source\">(in \"unixdict.txt\"<br/>   (mapc prinl<br/>      (maxi '((L) (length (car L)))<br/>         (by length group<br/>            (filter '((S) (apply &lt;= S))<br/>               (make (while (line) (link @))) ) ) ) ) )</pre>"}, {"lang": "PL/I", "loc": 57, "block": "<pre class=\"pli highlighted_source\">\u00a0<br/><span class=\"kw1\">order</span><span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"kw1\">options</span> <span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>               <span class=\"coMULTI\">/* 24/11/2011 */</span><br/>   <span class=\"kw1\">declare</span> word      <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw1\">varying</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> word_list <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw1\">varying</span> <span class=\"kw1\">controlled</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> max_length <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"kw1\">input</span> <span class=\"kw1\">file</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">open</span> <span class=\"kw1\">file</span> <span class=\"br0\">(</span><span class=\"kw1\">input</span><span class=\"br0\">)</span> <span class=\"kw1\">title</span> <span class=\"br0\">(</span><span class=\"st0\">'/ORDER.DAT,TYPE(TEXT),RECSIZE(100)'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">on</span> <span class=\"kw1\">endfile</span> <span class=\"br0\">(</span><span class=\"kw1\">input</span><span class=\"br0\">)</span> <span class=\"kw1\">go</span> <span class=\"kw1\">to</span> completed_search<span class=\"sy0\">;</span><br/>\u00a0<br/>   max_length <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">do</span> forever<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">get</span> <span class=\"kw1\">file</span> <span class=\"br0\">(</span><span class=\"kw1\">input</span><span class=\"br0\">)</span> <span class=\"kw1\">edit</span> <span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> max_length <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">do</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> in_order<span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>               <span class=\"kw1\">do</span><span class=\"sy0\">;</span><br/>                  <span class=\"coMULTI\">/* Get rid of any stockpiled shorter words. */</span><br/>                  <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">allocation</span><span class=\"br0\">(</span>word_list<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                     <span class=\"kw1\">free</span> word_list<span class=\"sy0\">;</span><br/>                  <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>                  <span class=\"coMULTI\">/* Add the eligible word to the stockpile. */</span><br/>                  <span class=\"kw1\">allocate</span> word_list<span class=\"sy0\">;</span><br/>                  word_list <span class=\"sy0\">=</span> word<span class=\"sy0\">;</span><br/>                  max_length <span class=\"sy0\">=</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>               <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> max_length <span class=\"sy0\">=</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">do</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* we have an eligle word of the same (i.e., maximum) length. */</span><br/>            <span class=\"kw1\">if</span> in_order<span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>               <span class=\"kw1\">do</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* Add it to the stockpile. */</span><br/>                  <span class=\"kw1\">allocate</span> word_list<span class=\"sy0\">;</span><br/>                  word_list <span class=\"sy0\">=</span> word<span class=\"sy0\">;</span><br/>               <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>completed_search<span class=\"sy0\">:</span><br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"st0\">'There are '</span> <span class=\"sy0\">||</span> <span class=\"kw1\">trim</span><span class=\"br0\">(</span><span class=\"kw1\">allocation</span><span class=\"br0\">(</span>word_list<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>      <span class=\"st0\">' eligible words of length '</span> <span class=\"sy0\">||</span> <span class=\"kw1\">trim</span><span class=\"br0\">(</span><span class=\"kw1\">length</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"st0\">':'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">allocation</span><span class=\"br0\">(</span>word_list<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span>word_list<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">free</span> word_list<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Check that the letters of the word are in non-decreasing order of rank. */</span><br/>in_order<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"kw1\">returns</span> <span class=\"br0\">(</span><span class=\"kw1\">bit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> word <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">varying</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> i <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw1\">substr</span><span class=\"br0\">(</span>word<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"kw1\">substr</span><span class=\"br0\">(</span>word<span class=\"sy0\">,</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"st0\">'0'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"st0\">'1'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> in_order<span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">order</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 18, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$url</span> <span class=\"sy0\">=</span> <span class=\"st0\">'http://www.puzzlers.org/pub/wordlists/unixdict.txt'</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">New-Object</span> System.Net.WebClient<span class=\"br0\">)</span>.DownloadFile<span class=\"br0\">(</span><span class=\"re0\">$url</span><span class=\"sy0\">,</span> <span class=\"st0\">\"$env:TEMP\\unixdict.txt\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"re0\">$ordered</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Get-Content</span> <span class=\"kw5\">-Path</span> <span class=\"st0\">\"$env:TEMP\\unixdict.txt\"</span> <span class=\"sy0\">|</span><br/>    <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.ToCharArray<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Sort-Object</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span>join <span class=\"st0\">''</span> <span class=\"kw4\">-eq</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"sy0\">|</span><br/>    <span class=\"kw1\">Group-Object</span>  <span class=\"kw5\">-Property</span> Length <span class=\"sy0\">|</span><br/>    <span class=\"kw1\">Sort-Object</span>   <span class=\"kw5\">-Property</span> Name <span class=\"sy0\">|</span><br/>    <span class=\"kw1\">Select-Object</span> <span class=\"kw5\">-Property</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span>Name<span class=\"sy0\">=</span><span class=\"st0\">\"WordCount\"</span>\u00a0; Expression<span class=\"sy0\">=</span><span class=\"br0\">{</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.Count<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                            <span class=\"sy0\">@</span><span class=\"br0\">{</span>Name<span class=\"sy0\">=</span><span class=\"st0\">\"WordLength\"</span>; Expression<span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.Name<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                            <span class=\"sy0\">@</span><span class=\"br0\">{</span>Name<span class=\"sy0\">=</span><span class=\"st0\">\"Words\"</span>    \u00a0; Expression<span class=\"sy0\">=</span><span class=\"br0\">{</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.<span class=\"kw2\">Group</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"kw5\">-Last</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"st0\">\"There are {0} ordered words of the longest word length ({1} characters):<span class=\"es0\">`n</span><span class=\"es0\">`n</span>{2}\"</span> <span class=\"kw4\">-f</span> <span class=\"re0\">$ordered</span>.WordCount<span class=\"sy0\">,</span><br/>                                                                                     <span class=\"re0\">$ordered</span>.WordLength<span class=\"sy0\">,</span><br/>                                                                                    <span class=\"br0\">(</span><span class=\"re0\">$ordered</span>.Words <span class=\"sy0\">-</span>join <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Remove-Item</span> <span class=\"kw5\">-Path</span> <span class=\"st0\">\"$env:TEMP\\unixdict.txt\"</span> <span class=\"kw5\">-Force</span> <span class=\"kw5\">-ErrorAction</span> SilentlyContinue<br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 45, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span>library<span class=\"br0\">(</span> http<span class=\"sy3\">/</span>http_open <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>ordered_words <span class=\"sy1\">:-</span><br/>        <span class=\"co1\">% we read the URL of the words</span><br/>\thttp_open<span class=\"br0\">(</span><span class=\"st_h\">'http://www.puzzlers.org/pub/wordlists/unixdict.txt'</span><span class=\"sy4\">,</span>\tIn<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tread_file<span class=\"br0\">(</span>In<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> Out<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">close</span></a><span class=\"br0\">(</span>In<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>        <span class=\"co1\">% we get a list of pairs key-value where key = Length and value = &lt;list-of-its-codes&gt;</span><br/>        <span class=\"co1\">% this list must be sorted</span><br/>\tmsort<span class=\"br0\">(</span>Out<span class=\"sy4\">,</span> MOut<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\tgroup_pairs_by_key<span class=\"br0\">(</span>MOut<span class=\"sy4\">,</span> POut<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>       <span class=\"co1\">% we sorted this list in decreasing order of the length of values</span><br/>\tpredsort<span class=\"br0\">(</span>my_compare<span class=\"sy4\">,</span> POut<span class=\"sy4\">,</span> <span class=\"br0\">[</span>_N<span class=\"sy3\">-</span>V <span class=\"sy5\">|</span> _OutSort<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>mwritef<span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>mwritef<span class=\"br0\">(</span>V<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\twritef<span class=\"br0\">(</span><span class=\"st_h\">'%s\\n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>V<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>read_file<span class=\"br0\">(</span>In<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> L1<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tread_line_to_codes<span class=\"br0\">(</span>In<span class=\"sy4\">,</span> W<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   W <span class=\"sy6\">==</span> end_of_file <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span><br/>               <span class=\"co1\">% the file is read</span><br/>\t       L1 <span class=\"sy6\">=</span> L<br/>\t       <span class=\"sy4\">;</span><br/>               <span class=\"co1\">% we sort the list of codes of the line</span><br/>\t       <span class=\"co1\">% and keep only the \"goods word\"</span><br/>\t       <span class=\"br0\">(</span>   msort<span class=\"br0\">(</span>W<span class=\"sy4\">,</span> W<span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span><br/>\t           length<span class=\"br0\">(</span>W<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span> L2 <span class=\"sy6\">=</span> <span class=\"br0\">[</span>N<span class=\"sy3\">-</span>W <span class=\"sy5\">|</span> L<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>len <span class=\"sy6\">=</span> <span class=\"nu0\">6</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> writef<span class=\"br0\">(</span><span class=\"st_h\">'%s\\n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>W<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>\t       <span class=\"sy4\">;</span><br/>\t           L2 <span class=\"sy6\">=</span> L<br/>\t       <span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>               <span class=\"co1\">% and we have the pair Key-Value in the result list</span><br/>\t       read_file<span class=\"br0\">(</span>In<span class=\"sy4\">,</span> L2<span class=\"sy4\">,</span> L1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% predicate for sorting list of pairs Key-Values</span><br/><span class=\"co1\">% if the lentgh of values is the same</span><br/><span class=\"co1\">% we sort the keys in alhabetic order</span><br/>my_compare<span class=\"br0\">(</span>R<span class=\"sy4\">,</span> K1<span class=\"sy3\">-</span>_V1<span class=\"sy4\">,</span> K2<span class=\"sy3\">-</span>_V2<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"br0\">(</span>   K1 <span class=\"sy6\">&lt;</span> K2 <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> R <span class=\"sy6\">=</span> <span class=\"sy6\">&gt;</span><span class=\"sy4\">;</span> K1 <span class=\"sy6\">&gt;</span> K2 <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> R <span class=\"sy6\">=</span> <span class=\"sy6\">&lt;</span><span class=\"sy4\">;</span> <span class=\"sy6\">=</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 46, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span>.s sortLetters<span class=\"br0\">(</span><span class=\"sy0\">*</span>word.Character, wordLength<span class=\"br0\">)</span> <span class=\"co1\">;returns a string with the letters of a word sorted</span><br/>  <span class=\"kw1\">Protected</span> <span class=\"kw1\">Dim</span> letters.c<span class=\"br0\">(</span>wordLength<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> <span class=\"sy0\">*</span>letAdr <span class=\"sy0\">=</span> @letters<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">CopyMemoryString</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>word, @<span class=\"sy0\">*</span>letAdr<span class=\"br0\">)</span><br/>  <span class=\"kw2\">SortArray</span><span class=\"br0\">(</span>letters<span class=\"br0\">(</span><span class=\"br0\">)</span>, #PB_Sort_Ascending, <span class=\"nu0\">0</span>, wordLength <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"kw2\">PeekS</span><span class=\"br0\">(</span>@letters<span class=\"br0\">(</span><span class=\"br0\">)</span>, wordLength<span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Structure</span> orderedWord<br/>  word.s<br/>  length.i<br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">Define</span> filename.s <span class=\"sy0\">=</span> <span class=\"st0\">\"unixdict.txt\"</span>, fileNum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>,  word.s<br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">NewList</span> orderedWords.orderedWord<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">ReadFile</span><span class=\"br0\">(</span>fileNum, filename<span class=\"br0\">)</span><br/>    <span class=\"kw1\">While</span> <span class=\"kw1\">Not</span> <span class=\"kw2\">Eof</span><span class=\"br0\">(</span>fileNum<span class=\"br0\">)</span><br/>      word <span class=\"sy0\">=</span> <span class=\"kw2\">ReadString</span><span class=\"br0\">(</span>fileNum<span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> word <span class=\"sy0\">=</span> sortLetters<span class=\"br0\">(</span>@word, <span class=\"kw2\">Len</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>orderedWords<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        orderedWords<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>word <span class=\"sy0\">=</span> word<br/>        orderedWords<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>length <span class=\"sy0\">=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><br/>      <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Error\"</span>, <span class=\"st0\">\"Unable to find dictionary '\"</span> <span class=\"sy0\">+</span> filename <span class=\"sy0\">+</span> <span class=\"st0\">\"'\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">End</span><br/>  <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>  <span class=\"kw2\">SortStructuredList</span><span class=\"br0\">(</span>orderedWords<span class=\"br0\">(</span><span class=\"br0\">)</span>, #PB_Sort_Ascending, <span class=\"kw2\">OffsetOf</span><span class=\"br0\">(</span>orderedWord<span class=\"sy0\">\\</span>word<span class=\"br0\">)</span>, #PB_String<span class=\"br0\">)</span><br/>  <span class=\"kw2\">SortStructuredList</span><span class=\"br0\">(</span>orderedWords<span class=\"br0\">(</span><span class=\"br0\">)</span>, #PB_Sort_Descending, <span class=\"kw2\">OffsetOf</span><span class=\"br0\">(</span>orderedWord<span class=\"sy0\">\\</span>length<span class=\"br0\">)</span>, #PB_Integer<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> maxLength<br/>  <span class=\"kw2\">FirstElement</span><span class=\"br0\">(</span>orderedWords<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  maxLength <span class=\"sy0\">=</span> orderedWords<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>length<br/>  <span class=\"kw1\">ForEach</span> orderedWords<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> orderedWords<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>length <span class=\"sy0\">=</span> maxLength<br/>      <span class=\"kw2\">Print</span><span class=\"br0\">(</span>orderedWords<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>word <span class=\"sy0\">+</span> <span class=\"st0\">\"  \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span> <br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 8, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">urllib</span>.<span class=\"me1\">request</span><br/>\u00a0<br/>url <span class=\"sy0\">=</span> <span class=\"st0\">'http://www.puzzlers.org/pub/wordlists/unixdict.txt'</span><br/>words <span class=\"sy0\">=</span> <span class=\"kw3\">urllib</span>.<span class=\"me1\">request</span>.<span class=\"me1\">urlopen</span><span class=\"br0\">(</span>url<span class=\"br0\">)</span>.<span class=\"me1\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">decode</span><span class=\"br0\">(</span><span class=\"st0\">\"utf-8\"</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>ordered <span class=\"sy0\">=</span> <span class=\"br0\">[</span>word <span class=\"kw1\">for</span> word <span class=\"kw1\">in</span> words <span class=\"kw1\">if</span> word<span class=\"sy0\">==</span><span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw2\">sorted</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>maxlen <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw2\">max</span><span class=\"br0\">(</span>ordered<span class=\"sy0\">,</span> key<span class=\"sy0\">=</span><span class=\"kw2\">len</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>maxorderedwords <span class=\"sy0\">=</span> <span class=\"br0\">[</span>word <span class=\"kw1\">for</span> word <span class=\"kw1\">in</span> ordered <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"sy0\">==</span> maxlen<span class=\"br0\">]</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>maxorderedwords<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require net/url)<br/>\u00a0<br/>(define dict \"http://www.puzzlers.org/pub/wordlists/unixdict.txt\")<br/>\u00a0<br/>(define (ordered? str)<br/>  (define lower (string-downcase str))<br/>  (for/and ([i (in-range 1 (string-length str))])<br/>    (char&lt;=? (string-ref lower (sub1 i)) (string-ref lower i))))<br/>\u00a0<br/>(define words (port-&gt;lines (get-pure-port (string-&gt;url dict))))<br/>\u00a0<br/>(let loop ([len 0] [longs '()] [words words])<br/>  (if (null? words)<br/>    (for-each displayln (reverse longs))<br/>    (let* ([word (car words)] [words (cdr words)]<br/>           [wlen (string-length word)])<br/>      (if (or (&lt; wlen len) (not (ordered? word)))<br/>        (loop len longs words)<br/>        (loop wlen (cons word (if (&gt; wlen len) '() longs)) words)))))<br/>\u00a0</pre>"}, {"lang": "Red", "loc": 15, "block": "<pre class=\"text highlighted_source\">Red []<br/>;; code to read url and save to local file:<br/>;;data: read/binary http://www.puzzlers.org/pub/wordlists/unixdict.txt <br/>;;write\u00a0%unixdict.txt data<br/>\u00a0<br/>max: [ \"\" ]\u00a0;; init array with one empty string (length 0 ) <br/>\u00a0<br/>foreach word read/lines\u00a0%unixdict.txt [  \u00a0;; read local file<br/>  len: either  word = sort copy word [ length? word ] [  -1 ]  \u00a0;; check if ordered and get length<br/>  case [<br/>    len  &gt; length?  first max [    max:  reduce [ word ]]      \u00a0;; init new block<br/>    len = length? first max   [ append max word   ]     <br/>  ]<br/>]<br/>probe max</pre>"}, {"lang": "REXX", "loc": 24, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  lists  (the longest)  ordered word(s)  from a  supplied  dictionary.    */</span><br/>iFID= <span class=\"st0\">'UNIXDICT.TXT'</span>                             <span class=\"coMULTI\">/*the filename of the word dictionary. */</span><br/>@<span class=\"sy0\">.</span>=                                              <span class=\"coMULTI\">/*placeholder array for list of words. */</span><br/>mL=<span class=\"nu0\">0</span>                                             <span class=\"coMULTI\">/*maximum length of the ordered words. */</span><br/><span class=\"kw1\">call</span> <span class=\"kw2\">linein</span> iFID, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>                           <span class=\"coMULTI\">/*point to the first word in dictionary*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  just in case the file is open. */</span><br/>  <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> <span class=\"kw6\">lines</span><span class=\"br0\">(</span>iFID<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>;  x=<span class=\"kw2\">linein</span><span class=\"br0\">(</span>iFID<span class=\"br0\">)</span> <span class=\"coMULTI\">/*keep reading until file is exhausted.*/</span><br/>  w=<span class=\"kw6\">length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;     <span class=\"kw1\">if</span> w<span class=\"sy0\">&lt;</span>mL  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>         <span class=\"coMULTI\">/*Word not long enough? Then ignore it.*/</span><br/>  <span class=\"kw1\">parse</span> <span class=\"kw2\">upper</span> <span class=\"kw2\">var</span>  x  xU  <span class=\"nu0\">1</span>  z  <span class=\"nu0\">2</span>                <span class=\"coMULTI\">/*get uppercase version of X &amp; 1st char*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  handle words of mixed case.    */</span><br/>        <span class=\"kw1\">do</span> k=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> w;         _=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>xU, k, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*process each letter in uppercase word*/</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>_, <span class=\"st0\">'U'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>       <span class=\"coMULTI\">/*Is it not a letter?  Then ignore it. */</span><br/>        <span class=\"kw1\">if</span> _<span class=\"sy0\">&lt;</span>z                <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> j     <span class=\"coMULTI\">/*is letter &lt; than the previous letter?*/</span><br/>        z=_                                      <span class=\"coMULTI\">/*we have a newer current letter.      */</span><br/>        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                              <span class=\"coMULTI\">/* [\u2191]  logic includes  \u2265  order.      */</span><br/>  mL=w                                           <span class=\"coMULTI\">/*maybe define a new maximum length.   */</span><br/>  @<span class=\"sy0\">.</span><a class=\"__cf_email__\" data-cfemail=\"9ceba1dc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>w  x                                     <span class=\"coMULTI\">/*add the original word to a word list.*/</span><br/>  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                                    <span class=\"coMULTI\">/*the 1st DO needs an index for ITERATE*/</span><br/>              #=<span class=\"kw6\">words</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>mL<span class=\"br0\">)</span>                      <span class=\"coMULTI\">/*just a handy\u2500dandy variable to have. */</span><br/><span class=\"kw1\">say</span> # <span class=\"st0\">'word'</span>s<span class=\"br0\">(</span>#<span class=\"br0\">)</span>  <span class=\"st0\">\"found (of length\"</span> mL<span class=\"st0\">')'</span>;  <span class=\"kw1\">say</span> <span class=\"coMULTI\">/*show the number of words and length. */</span><br/>        <span class=\"kw1\">do</span> n=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #;   <span class=\"kw1\">say</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>mL, n<span class=\"br0\">)</span>;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*display all the words, one to a line.*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>s:  <span class=\"kw1\">if</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">''</span>;   <span class=\"kw1\">return</span> <span class=\"st0\">\"s\"</span>   <span class=\"coMULTI\">/*a simple pluralizer (merely adds \"S\")*/</span></pre>"}, {"lang": "Ring", "loc": 39, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fn = \"C:\\Ring\\unixdict.txt\"<br/>\u00a0<br/>fp = fopen(fn,\"r\")<br/>str = fread(fp, getFileSize(fp))<br/>str = substr(str, windowsnl(), nl)<br/>clist = str2list(str)<br/>fclose(fp)<br/>dlist = []<br/>\u00a0<br/>for m = 1 to len(clist)<br/>    flag = 1<br/>    for n = 1 to len(clist[m])-1<br/>        if ascii(clist[m][n+1]) &lt; ascii(clist[m][n]) <br/>           flag=0 exit ok <br/>    next<br/>    if flag = 1  <br/>       add(dlist, clist[m]) ok<br/>next  <br/>\u00a0<br/>nr = 0<br/>for m = 1 to len(dlist)<br/>    if len(dlist[m]) &gt; nr<br/>       nr = len(dlist[m]) ok<br/>next<br/>\u00a0<br/>for n = 1 to len(dlist)<br/>    if len(dlist[n]) = nr<br/>       see dlist[n] + nl ok<br/>next<br/>\u00a0<br/>func getFileSize fp<br/>     c_filestart = 0<br/>     c_fileend = 2<br/>     fseek(fp,0,c_fileend)<br/>     nfilesize = ftell(fp)<br/>     fseek(fp,0,c_filestart)<br/>     return nfilesize<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 8, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'open-uri'</span><br/>ordered_words = <span class=\"kw3\">open</span><span class=\"br0\">(</span><span class=\"st0\">'http://www.puzzlers.org/pub/wordlists/unixdict.txt'</span>, <span class=\"st0\">'r'</span><span class=\"br0\">)</span>.<span class=\"kw3\">select</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>word<span class=\"sy0\">|</span> <br/>  word.<span class=\"me1\">strip</span>!<br/>  word.<span class=\"me1\">chars</span>.<span class=\"me1\">sort</span>.<span class=\"me1\">join</span> == word<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>grouped = ordered_words.<span class=\"me1\">group_by</span> <span class=\"sy0\">&amp;</span>:size<br/><span class=\"kw3\">puts</span> grouped<span class=\"br0\">[</span>grouped.<span class=\"me1\">keys</span>.<span class=\"me1\">max</span><span class=\"br0\">]</span></pre>"}, {"lang": "Run BASIC", "loc": 20, "block": "<pre class=\"text highlighted_source\">a$\t= httpget$(\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\")<br/>j\t= 1<br/>i   \t= instr(a$,chr$(10),j)<br/>while i &lt;&gt; 0<br/> a1$ \t= mid$(a$,j,i-j)<br/> for k\t= 1 to len(a1$) - 1<br/>  if mid$(a1$,k,1) &gt; mid$(a1$,k+1,1) then goto [noWay]<br/> next k<br/> maxL\t= max(maxL,len(a1$))<br/>if len(a1$) &gt;= maxL then a2$ = a2$ + a1$ + \"||\"<br/>[noWay]<br/>j\t= i + 1<br/>i   \t= instr(a$,chr$(10),j)<br/>wend<br/>n\t= 1<br/>while  word$(a2$,n,\"||\") &lt;&gt; \"\"<br/> a3$ = word$(a2$,n,\"||\")<br/> if len(a3$) = maxL then print a3$<br/> n = n + 1<br/>wend</pre>"}, {"lang": "Rust", "loc": 43, "block": "<pre class=\"text highlighted_source\">const FILE: &amp;'static str = include_str!(\"./unixdict.txt\");<br/>\u00a0<br/>fn is_ordered(s: &amp;str) -&gt; bool {<br/>    let mut prev = '\\x00';<br/>    for c in s.to_lowercase().chars() {<br/>        if c &lt; prev {<br/>            return false;<br/>        }<br/>        prev = c;<br/>    }<br/>\u00a0<br/>    return true;<br/>}<br/>\u00a0<br/>fn find_longest_ordered_words(dict: Vec&lt;&amp;str&gt;) -&gt; Vec&lt;&amp;str&gt; {<br/>    let mut result = Vec::new();<br/>    let mut longest_length = 0;<br/>\u00a0<br/>    for s in dict.into_iter() {<br/>        if is_ordered(&amp;s) {<br/>            let n = s.len();<br/>            if n &gt; longest_length {<br/>                longest_length = n;<br/>                result.truncate(0);<br/>            }<br/>            if n == longest_length {<br/>                result.push(s);<br/>            }<br/>        }<br/>    }<br/>\u00a0<br/>    return result;<br/>}<br/>\u00a0<br/>fn main() {<br/>    let lines = FILE.lines().collect();<br/>\u00a0<br/>    let longest_ordered = find_longest_ordered_words(lines);<br/>\u00a0<br/>    for s in longest_ordered.iter() {<br/>        println!(\"{}\", s.to_string());<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 20, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> wordsAll <span class=\"sy0\">=</span> scala.<span class=\"me1\">io</span>.<span class=\"me1\">Source</span>.<span class=\"me1\">fromURL</span><span class=\"br0\">(</span><span class=\"st0\">\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"</span><span class=\"br0\">)</span>.<span class=\"me1\">getLines</span>.<span class=\"me1\">toSeq</span><br/>\u00a0<br/><span class=\"coMULTI\">/** <br/> * Given a sequence of words return a sub-sequence of the <br/> * words that have characters in sorted order.<br/> */</span>  <br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> orderedWords<span class=\"br0\">(</span> words<span class=\"sy0\">:</span>Seq<span class=\"br0\">[</span>String<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy0\">:</span> Seq<span class=\"br0\">[</span><span class=\"br0\">(</span>String<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isOrdered<span class=\"br0\">(</span> s<span class=\"sy0\">:</span>String <span class=\"br0\">)</span> <span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <br/>    <span class=\"br0\">(</span>s.<span class=\"me1\">foldLeft</span><span class=\"br0\">(</span> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a>,<span class=\"st0\">'@'</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">{</span> <br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a>,<span class=\"sy0\">_</span><span class=\"br0\">)</span>,<span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a>,prev<span class=\"br0\">)</span>,c<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>prev <span class=\"sy0\">&lt;=</span> c<span class=\"br0\">)</span>,c<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"sy0\">_</span>1<br/>\u00a0<br/>  wordsAll.<span class=\"me1\">filter</span><span class=\"br0\">(</span> isOrdered<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>.<span class=\"me1\">toSeq</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ww <span class=\"sy0\">=</span> orderedWords<span class=\"br0\">(</span> wordsAll <span class=\"br0\">)</span>.<span class=\"me1\">sortBy</span><span class=\"br0\">(</span> -<span class=\"sy0\">_</span>.<span class=\"me1\">length</span> <span class=\"br0\">)</span><br/>\u00a0<br/>println<span class=\"br0\">(</span> ww.<span class=\"me1\">takeWhile</span><span class=\"br0\">(</span> <span class=\"sy0\">_</span>.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> ww.<span class=\"me1\">head</span>.<span class=\"me1\">length</span> <span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 22, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> sorted<span class=\"sy0\">-</span>words<br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>port <span class=\"br0\">(</span><span class=\"kw1\">open-input-file</span> <span class=\"st0\">\"unixdict.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>char <span class=\"br0\">(</span><span class=\"kw1\">read-char</span> port<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>word '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>result '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>       <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eof-object?</span> char<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"br0\">(</span>apply <span class=\"kw1\">string</span> word<span class=\"br0\">)</span><span class=\"br0\">)</span> result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eq?</span> #\\<span class=\"kw1\">newline</span> char<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"kw1\">read-char</span> port<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>best<span class=\"sy0\">-</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>word<span class=\"sy0\">-</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> word<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>\t\t <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> word<span class=\"sy0\">-</span><span class=\"kw1\">length</span> best<span class=\"sy0\">-</span><span class=\"kw1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>apply char<span class=\"sy0\">&gt;=</span>? word<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> result<span class=\"br0\">)</span><br/>\t\t <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> word<span class=\"sy0\">-</span><span class=\"kw1\">length</span> best<span class=\"sy0\">-</span><span class=\"kw1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> word<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> word<span class=\"br0\">)</span> result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"kw1\">read-char</span> port<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> char word<span class=\"br0\">)</span> result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">begin</span><br/>\t <span class=\"br0\">(</span><span class=\"kw1\">display</span> x<span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     sorted<span class=\"sy0\">-</span>words<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 49, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func boolean: isOrdered (in string: word) is func<br/>  result<br/>    var boolean: ordered is TRUE;<br/>  local<br/>    var integer: index is 0;<br/>  begin<br/>    for index range 1 to pred(length(word)) do<br/>      if word[index] &gt; word[succ(index)] then<br/>        ordered\u00a0:= FALSE;<br/>      end if;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: write (in array string: wordList) is func<br/>  local<br/>    var string: word is \"\";<br/>  begin<br/>    for word range wordList do<br/>      writeln(word);<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var file: dictionary is STD_NULL;<br/>    var string: word is \"\";<br/>    var integer: length is 0;<br/>    var array string: wordList is 0 times \"\";<br/>  begin<br/>    dictionary\u00a0:= open(\"unixdict.txt\", \"r\");<br/>    if dictionary &lt;&gt; STD_NULL then<br/>      readln(dictionary, word);<br/>      while not eof(dictionary) do<br/>        if isOrdered(lower(word)) then<br/>          if length(word) &gt; length then<br/>            length\u00a0:= length(word);<br/>            wordList\u00a0:= [] (word);<br/>          elsif length(word) = length then<br/>            wordList &amp;:= word;<br/>          end if;<br/>        end if;<br/>        readln(dictionary, word);<br/>      end while;<br/>      close(dictionary);<br/>    end if;<br/>    write(wordList);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 14, "block": "<pre class=\"ruby highlighted_source\">var words = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>var file = <span class=\"sy0\">%</span>f<span class=\"st0\">'unixdict.txt'</span><br/>\u00a0<br/>file.<span class=\"me1\">open_r</span><span class=\"br0\">(</span>\\var fh, \\var err<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"sy0\">||</span> die <span class=\"st0\">\"Can't open file #{file}: $#{err}\"</span><br/>\u00a0<br/>fh.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>line<span class=\"sy0\">|</span><br/>    line.<span class=\"me1\">trim</span>!<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>line == line.<span class=\"me1\">sort</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        words<span class=\"br0\">[</span>line.<span class=\"me1\">length</span><span class=\"br0\">]</span>\u00a0:= <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;&lt;</span> line<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say words<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span></pre>"}, {"lang": "Simula", "loc": 55, "block": "<pre class=\"text highlighted_source\">BEGIN<br/>\u00a0<br/>   BOOLEAN PROCEDURE ISORDERED(W); TEXT W;<br/>   BEGIN<br/>       BOOLEAN B;<br/>       B\u00a0:= TRUE;<br/>       W.SETPOS(1);<br/>       IF W.MORE THEN<br/>       BEGIN<br/>           CHARACTER CURR, LAST;<br/>           CURR\u00a0:= W.GETCHAR;<br/>           WHILE W.MORE AND B DO<br/>           BEGIN<br/>               LAST\u00a0:= CURR;<br/>               CURR\u00a0:= W.GETCHAR;<br/>               B\u00a0:= LAST &lt;= CURR;<br/>           END;<br/>       END;<br/>       ISORDERED\u00a0:= B;<br/>   END;<br/>\u00a0<br/>   REF (INFILE) INF;<br/>   INTEGER LONGEST;<br/>   TEXT W;<br/>\u00a0<br/>   COMMENT FIND LONGEST LENGTH;<br/>   INF\u00a0:- NEW INFILE(\"unixdict.txt\");<br/>   INF.OPEN(BLANKS(132));<br/>   WHILE NOT INF.LASTITEM DO<br/>   BEGIN<br/>       W\u00a0:- COPY(INF.IMAGE).STRIP;<br/>       IF ISORDERED(W) THEN<br/>           IF W.LENGTH &gt; LONGEST THEN<br/>               LONGEST\u00a0:= W.LENGTH;<br/>       INF.INIMAGE;<br/>   END;<br/>   INF.CLOSE;<br/>\u00a0<br/>   COMMENT OUTPUT ORDRERED WORDS OF LONGEST LENGTH;<br/>   INF\u00a0:- NEW INFILE(\"unixdict.txt\");<br/>   INF.OPEN(BLANKS(132));<br/>   WHILE NOT INF.LASTITEM DO<br/>   BEGIN<br/>       W\u00a0:- COPY(INF.IMAGE).STRIP;<br/>       IF W.LENGTH = LONGEST AND THEN ISORDERED(W) THEN<br/>       BEGIN<br/>           OUTTEXT(W);<br/>           OUTIMAGE;<br/>       END;<br/>       INF.INIMAGE;<br/>   END;<br/>   INF.CLOSE;<br/>\u00a0<br/>END.<br/>\u00a0</pre>"}, {"lang": "Smalltalk", "loc": 17, "block": "<pre class=\"smalltalk highlighted_source\">|<span class=\"re3\">file dict r t</span>|<br/><span class=\"re6\">file</span> <span class=\"sy0\">:=</span> <span class=\"re0\">FileStream</span> open: <span class=\"st0\">'unixdict.txt'</span> mode: <span class=\"re0\">FileStream</span> read.<br/><span class=\"re5\">dict</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Set</span> new.<br/>\u00a0<br/><span class=\"coMULTI\">\"load the whole dict into the set before, 'filter' later\"</span><br/><span class=\"br0\">[</span> <span class=\"re5\">file</span> atEnd <span class=\"br0\">]</span> whileFalse: <span class=\"br0\">[</span><br/>  <span class=\"re5\">dict</span> add: <span class=\"br0\">(</span><span class=\"re5\">file</span> upTo: <span class=\"re0\">Character</span> nl<span class=\"br0\">)</span> <span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"coMULTI\">\"find those with the sorted letters, and sort them by length\"</span><br/><span class=\"re6\">r</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re5\">dict</span> <br/>       select: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">w</span> | <span class=\"br0\">(</span><span class=\"re5\">w</span> asOrderedCollection sort<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re5\">w</span> asOrderedCollection<span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>     asSortedCollection: <span class=\"br0\">[</span>:<span class=\"re5\">a</span>\u00a0:<span class=\"re5\">b</span>| <span class=\"br0\">(</span><span class=\"re5\">a</span> size<span class=\"br0\">)</span> &gt; <span class=\"br0\">(</span><span class=\"re5\">b</span> size<span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"br0\">)</span>.<br/>\u00a0<br/><span class=\"coMULTI\">\"get those that have length = to the max length, and sort alphabetically\"</span><br/><span class=\"re6\">r</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"re5\">r</span> select: <span class=\"br0\">[</span>:<span class=\"re5\">w</span>| <span class=\"br0\">(</span><span class=\"re5\">w</span> size<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re5\">r</span> at: <span class=\"re5\">1</span><span class=\"br0\">)</span> size<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> asSortedCollection.<br/>\u00a0<br/><span class=\"re5\">r</span> do: <span class=\"br0\">[</span>:<span class=\"re5\">e</span>| e displayNl<span class=\"br0\">]</span>.</pre>"}, {"lang": "SPL", "loc": 15, "block": "<pre class=\"text highlighted_source\">words = #.split(#.readtext(\"unixdict.txt\",\"ascii\"),#.lf)<br/>max = 0<br/>&gt; i, 1..#.size(words,1)<br/>  word = words[i]<br/>  wordb = #.array(word)<br/>  wordbc = #.size(wordb,1)<br/>  &gt; j, 3..wordbc,2<br/>    &lt;&lt; wordb[j]&lt;wordb[j-2]<br/>  &lt;<br/>  &gt;&gt; j!&gt;wordbc|wordbc&lt;max<br/> \u00a0? wordbc&gt;max, result = \"\"<br/> \u00a0? wordbc&gt;max, max = wordbc<br/>  result += word+#.crlf<br/>&lt;<br/>#.output(result)</pre>"}, {"lang": "Swift", "loc": 29, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>guard<br/>    let url =  NSURL(string: \"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"),<br/>    let input = try? NSString(contentsOfURL: url,encoding: NSUTF8StringEncoding) as String<br/>    else { exit(EXIT_FAILURE) }<br/>\u00a0<br/>let words = input.componentsSeparatedByCharactersInSet(NSCharacterSet.newlineCharacterSet())<br/>let group: ([Int: [String]], String) -&gt; [Int: [String]] = {<br/>    var d = $0; let g = d[$1.characters.count]\u00a0?? []<br/>    d[$1.characters.count] = g + [$1]<br/>    return d<br/>}<br/>let ordered: ([String], String) -&gt; [String] = {<br/>    guard String($1.characters.sort()) == $1 else { return $0 }<br/>    return $0 + [$1]<br/>}<br/>\u00a0<br/>let groups = words<br/>    .reduce([String](), combine: ordered)<br/>    .reduce([Int: [String]](), combine: group)<br/>\u00a0<br/>guard<br/>    let maxLength = groups.keys.maxElement(),<br/>    let maxLengthGroup = groups[maxLength]<br/>    else { exit(EXIT_FAILURE) }<br/>\u00a0<br/>maxLengthGroup.forEach { print($0) }<br/>\u00a0</pre>"}, {"lang": "Tcl", "loc": 25, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require <span class=\"kw2\">http</span><br/>\u00a0<br/><span class=\"co1\"># Pick the ordered words (of maximal length) from a list</span><br/><span class=\"kw1\">proc</span> chooseOrderedWords <span class=\"kw2\">list</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> len <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">foreach</span> word <span class=\"re0\">$list</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># Condition to determine whether a word is ordered; are its characters</span><br/>\t<span class=\"co1\"># in sorted order?</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$word</span> eq <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$word</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$word</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$len</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">set</span> len <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$word</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">set</span> orderedOfMaxLen <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$word</span><span class=\"br0\">]</span> == <span class=\"re0\">$len</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> orderedOfMaxLen <span class=\"re0\">$word</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$orderedOfMaxLen</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Get the dictionary and print the ordered words from it</span><br/><span class=\"kw1\">set</span> t <span class=\"br0\">[</span><span class=\"kw2\">http</span>::<span class=\"me1\">geturl</span> <span class=\"st0\">\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\"</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>chooseOrderedWords <span class=\"br0\">[</span><span class=\"kw2\">http</span>::<span class=\"me1\">data</span> <span class=\"re0\">$t</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"kw2\">http</span>::<span class=\"me1\">cleanup</span> <span class=\"re0\">$t</span></pre>"}, {"lang": "TUSCRIPT", "loc": 29, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>SET data = REQUEST (\"http://www.puzzlers.org/pub/wordlists/unixdict.txt\")<br/>DICT orderdwords CREATE 99999<br/>COMPILE<br/>LOOP word=data<br/> - \"&lt;%\" = any token<br/> SET letters=STRINGS (word,\":&lt;%:\")<br/> SET wordsignatur= ALPHA_SORT (letters)<br/> IF (wordsignatur==letters) THEN<br/>  SET wordlength=LENGTH (word)<br/>  DICT orderdwords ADD/COUNT word,num,cnt,wordlength<br/> ENDIF<br/>ENDLOOP<br/>\u00a0<br/>DICT orderdwords UNLOAD words,num,cnt,wordlength<br/>SET maxlength=MAX_LENGTH (words)<br/>SET rtable=QUOTES (maxlength)<br/>BUILD R_TABLE maxlength = rtable<br/>SET index=FILTER_INDEX (wordlength,maxlength,-)<br/>SET longestwords=SELECT (words,#index)<br/>PRINT num,\" ordered words - max length is \",maxlength,\":\"<br/>\u00a0<br/>LOOP n,w=longestwords<br/>SET n=CONCAT (n,\".\"), n=CENTER(n,4)<br/>PRINT n,w<br/>ENDLOOP<br/>ENDCOMPILE<br/>\u00a0</pre>"}, {"lang": "Ursala", "loc": 5, "block": "<pre class=\"text highlighted_source\">#import std<br/>\u00a0<br/>#show+<br/>\u00a0<br/>main = <a class=\"__cf_email__\" data-cfemail=\"412d24302d012329\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>$^ eql|= (ordered lleq)*~ unixdict_dot_txt</pre>"}, {"lang": "VBA", "loc": 78, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Public Sub orderedwords(fname As String)<br/> ' find ordered words in dict file that have the longest word length<br/> ' fname is the name of the input file<br/> ' the words are printed in the immediate window<br/> ' this subroutine uses boolean function IsOrdered<br/>\u00a0<br/>Dim word As String          'word to be tested<br/>Dim l As Integer            'length of word<br/>Dim wordlength As Integer   'current longest word length<br/>Dim orderedword() As String 'dynamic array holding the ordered words with the current longest word length<br/>Dim wordsfound As Integer   'length of the array orderedword()<br/>\u00a0<br/>On Error GoTo NotFound      'catch incorrect/missing file name<br/>Open fname For Input As #1<br/>On Error GoTo 0<br/>\u00a0<br/>'initialize<br/>wordsfound = 0<br/>wordlength = 0<br/>\u00a0<br/>'process file line per line<br/>While Not EOF(1)<br/>  Line Input #1, word<br/>  If IsOrdered(word) Then    'found one, is it equal to or longer than current word length?<br/>    l = Len(word)<br/>    If l &gt;= wordlength Then  'yes, so add to list or start a new list<br/>      If l &gt; wordlength Then 'it's longer, we must start a new list<br/>        wordsfound = 1<br/>        wordlength = l<br/>      Else                   'equal length, increase the list size<br/>        wordsfound = wordsfound + 1<br/>      End If<br/>      'add the word to the list<br/>      ReDim Preserve orderedword(wordsfound)<br/>      orderedword(wordsfound) = word<br/>    End If<br/>  End If<br/>Wend<br/>Close #1<br/>\u00a0<br/>'print the list<br/>Debug.Print \"Found\"; wordsfound; \"ordered words of length\"; wordlength<br/>For i = 1 To wordsfound<br/>  Debug.Print orderedword(i)<br/>Next<br/>Exit Sub<br/>\u00a0<br/>NotFound:<br/>  debug.print \"Error: Cannot find or open file \"\"\" &amp; fname &amp; \"\"\"!\"<br/>End Sub<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>Public Function IsOrdered(someWord As String) As Boolean<br/>'true if letters in word are in ascending (ascii) sequence<br/>\u00a0<br/>Dim l As Integer         'length of someWord<br/>Dim wordLcase As String  'the word in lower case<br/>Dim ascStart As Integer  'ascii code of first char<br/>Dim asc2 As Integer      'ascii code of next char<br/>\u00a0<br/>wordLcase = LCase(someWord)  'convert to lower case<br/>l = Len(someWord)<br/>IsOrdered = True<br/>If l &gt; 0 Then            'this skips empty string - it is considered ordered...<br/>  ascStart = Asc(Left$(wordLcase, 1))<br/>  For i = 2 To l<br/>    asc2 = Asc(Mid$(wordLcase, i, 1))<br/>    If asc2 &lt; ascStart Then 'failure!<br/>      IsOrdered = False<br/>      Exit Function<br/>    End If<br/>    ascStart = asc2<br/>  Next i<br/>End If<br/>End Function<br/>\u00a0</pre>"}, {"lang": "Vedit macro language", "loc": 26, "block": "<pre class=\"vedit highlighted_source\">File_Open<span class=\"br0\">(</span><span class=\"st0\">\"unixdict.txt\"</span><span class=\"sy0\">,</span> BROWSE<span class=\"br0\">)</span><br/>#<span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>                                  <span class=\"co1\">// length of longest word found</span><br/><span class=\"kw1\">Repeat</span> <span class=\"br0\">(</span>ALL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    #<span class=\"nu0\">2</span> <span class=\"sy0\">=</span> EOL_Pos<span class=\"sy0\">-</span>Cur_Pos                <span class=\"co1\">// length of this word</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>#<span class=\"nu0\">2</span> <span class=\"sy0\">&gt;=</span> #<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        #<span class=\"nu0\">3</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>                          <span class=\"co1\">// flag: is ordered word</span><br/>        Char<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">While</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>At_EOL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Cur_Char <span class=\"sy0\">&lt;</span> Cur_Char<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                #<span class=\"nu0\">3</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>                  <span class=\"co1\">// not an ordered word</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"br0\">}</span><br/>            Char<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>#<span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>                       <span class=\"co1\">// ordered word found</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>#<span class=\"nu0\">2</span> <span class=\"sy0\">&gt;</span> #<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>              <span class=\"co1\">// new longer word found</span><br/>                #<span class=\"nu0\">1</span> <span class=\"sy0\">=</span> #<span class=\"nu0\">2</span><br/>                Reg_Empty<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>           <span class=\"co1\">// clear list</span><br/>            <span class=\"br0\">}</span><br/>            BOL Reg_Copy<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>APPEND<span class=\"br0\">)</span>   <span class=\"co1\">// add word to list</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    Line<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>ERRBREAK<span class=\"br0\">)</span>                    <span class=\"co1\">// next word</span><br/><span class=\"br0\">}</span><br/>Buf_Quit<span class=\"br0\">(</span>OK<span class=\"br0\">)</span>                            <span class=\"co1\">// close file</span><br/>Reg_Type<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>                            <span class=\"co1\">// display results </span></pre>"}, {"lang": "VBScript", "loc": 34, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw4\">Set</span> objFSO = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"Scripting.FileSystemObject\"</span>)<br/><span class=\"kw4\">Set</span> infile = objFSO.OpenTextFile(objFSO.GetParentFolderName(WScript.ScriptFullName) &amp; <span class=\"st0\">\"\\\"</span> &amp;_<br/>\t\t\t<span class=\"st0\">\"unixdict.txt\"</span>,1)<br/>list = <span class=\"st0\">\"\"</span><br/>length = 0<br/>\u00a0<br/><span class=\"kw3\">Do</span> <span class=\"kw3\">Until</span> inFile.AtEndOfStream<br/>\t<span class=\"kw4\">line</span> = infile.ReadLine<br/>\t<span class=\"kw3\">If</span> IsOrdered(<span class=\"kw4\">line</span>) <span class=\"kw3\">Then</span><br/>\t\t<span class=\"kw3\">If</span> Len(<span class=\"kw4\">line</span>) &gt; length <span class=\"kw3\">Then</span><br/>\t\t\tlength = Len(<span class=\"kw4\">line</span>)<br/>\t\t\tlist = <span class=\"kw4\">line</span> &amp; vbCrLf<br/>\t\t<span class=\"kw3\">ElseIf</span> Len(<span class=\"kw4\">line</span>) = length <span class=\"kw3\">Then</span><br/>\t\t\tlist = list &amp; <span class=\"kw4\">line</span> &amp; vbCrLf<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">Loop</span><br/>\u00a0<br/>WScript.StdOut.Write list<br/>\u00a0<br/><span class=\"kw2\">Function</span> IsOrdered(word)<br/>\tIsOrdered = <span class=\"kw5\">True</span><br/>\tprev_val = 0<br/>\t<span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> Len(word)<br/>\t\t<span class=\"kw3\">If</span> i = 1 <span class=\"kw3\">Then</span><br/>\t\t\tprev_val = Asc(Mid(word,i,1))<br/>\t\t<span class=\"kw3\">ElseIf</span> Asc(Mid(word,i,1)) &gt;= prev_val <span class=\"kw3\">Then</span><br/>\t\t\tprev_val = Asc(Mid(word,i,1))<br/>\t\t<span class=\"kw3\">Else</span><br/>\t\t\tIsOrdered = <span class=\"kw5\">False</span><br/>\t\t\t<span class=\"kw2\">Exit</span> <span class=\"kw3\">For</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "zkl", "loc": 11, "block": "<pre class=\"text highlighted_source\">var words=L(), sz=0;  // some state<br/>fcn isLex(word){ word.reduce(fcn(p,c){ (p&lt;=c) and c or T(Void.Stop,False) }) }<br/>File(\"dict.txt\").pump(Void,fcn(w){<br/>   w=w.strip();   // get rid of newline<br/>   if(isLex(w)){ n:=w.len(); <br/>      if(n&gt;sz){ words.clear(w); sz=n } <br/>      else if(n==sz) words.append(w)<br/>   }<br/>})<br/>println(\"Num words:\u00a0%d, all size\u00a0%d\\n\".fmt(words.len(),sz));<br/>words.pump(Console.println);</pre>"}]}