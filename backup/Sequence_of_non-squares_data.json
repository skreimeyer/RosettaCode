{"task": "Sequence_of_non-squares", "blocks": [{"lang": "Ada", "loc": 24, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Long_Elementary_Functions</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Sequence_Of_Non_Squares_Test <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Long_Elementary_Functions</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Non_Square <span class=\"br0\">(</span>N\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Positive <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> N + Positive <span class=\"br0\">(</span>Long_Float'Rounding <span class=\"br0\">(</span>Sqrt <span class=\"br0\">(</span>Long_Float <span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Non_Square;<br/>\u00a0<br/>   I\u00a0: Positive;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> N <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">22</span> <span class=\"kw1\">loop</span> <span class=\"co1\">-- First 22 non-squares</span><br/>      Put <span class=\"br0\">(</span>Natural'Image <span class=\"br0\">(</span>Non_Square <span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   New_Line;<br/>   <span class=\"kw1\">for</span> N <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">1</span>_000_000 <span class=\"kw1\">loop</span> <span class=\"co1\">-- Check first million of</span><br/>      I\u00a0:= Non_Square <span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">if</span> I = Positive <span class=\"br0\">(</span>Sqrt <span class=\"br0\">(</span>Long_Float <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>**<span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>         Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Found a square:\"</span> &amp; Positive'Image <span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Sequence_Of_Non_Squares_Test;</pre>"}, {"lang": "ALGOL 68", "loc": 19, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> non square <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> n <span class=\"sy1\">+</span> <span class=\"kw8\">ENTIER</span><span class=\"br0\">(</span><span class=\"re1\">0.5</span> <span class=\"sy1\">+</span> <span class=\"kw24\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># first 22 values (as a list) has no squares: #</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> 22 <span class=\"kw2\">DO</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw22\">whole</span><span class=\"br0\">(</span>non square<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">,-</span>3<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"kw22\">space</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># The following check shows no squares up to one million:  #</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> 1 000 000 <span class=\"kw2\">DO</span><br/>        <span class=\"kw3\">REAL</span> j <span class=\"sy1\">=</span> <span class=\"kw24\">sqrt</span><span class=\"br0\">(</span>non square<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> j <span class=\"sy1\">=</span> <span class=\"kw8\">ENTIER</span> j <span class=\"kw2\">THEN</span><br/>            put<span class=\"br0\">(</span>stand out<span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"st0\">\"Error: number is a square:\"</span><span class=\"sy1\">,</span> j<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            stop<br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 30, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% check values of the function: f(n) = n + floor(1/2 + sqrt(n))   \u00a0%<br/>   \u00a0% are not squares                                                 \u00a0%<br/>\u00a0<br/>    integer procedure f ( integer value n )\u00a0;<br/>        begin<br/>            n + entier( 0.5 + sqrt( n ) )<br/>        end f\u00a0;<br/>\u00a0<br/>    logical noSquares;<br/>\u00a0<br/>   \u00a0% first 22 values of f                                            \u00a0%<br/>    for n\u00a0:= 1 until 22 do writeon( i_w\u00a0:= 1, f( n ) );<br/>\u00a0<br/>   \u00a0% check f(n) does not produce a square for n in 1..1 000 000      \u00a0%<br/>    noSquares\u00a0:= true;<br/>    for n\u00a0:= 1 until 1000000 do begin<br/>        integer fn, rn;<br/>        fn\u00a0:= f( n );<br/>        rn\u00a0:= round( sqrt( fn ) );<br/>        if ( rn * rn ) = fn then begin<br/>            write( \"Found square at: \", n );<br/>            noSquares\u00a0:= false<br/>        end if_fn_is_a_square <br/>    end for_n\u00a0;<br/>\u00a0<br/>    if noSquares then write( \"f(n) did not produce a square in 1 .. 1 000 000\" )<br/>                 else write( \"f(n) produced a square\" )<br/>\u00a0<br/>end.</pre>"}, {"lang": "APL", "loc": 3, "block": "<pre class=\"text highlighted_source\">      NONSQUARE\u2190{(\u2373\u2375)+\u230a0.5+(\u2373\u2375)*0.5}<br/>      NONSQUARE 22<br/>2 3 5 6 7 8 10 11 12 13 14 15 17 18 19 20 21 22 23 24 26 27</pre>"}, {"lang": "AutoHotkey", "loc": 8, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">22</span><br/>   t <span class=\"sy0\">.=</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">floor</span></a><span class=\"br0\">(</span><span class=\"nu0\">0.5</span> <span class=\"sy0\">+</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">sqrt</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"  \"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> <span class=\"re0\">%t%</span><br/>\u00a0<br/>s <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"nu0\">1000000</span><br/>   x <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">floor</span></a><span class=\"br0\">(</span><span class=\"nu0\">0.5</span> <span class=\"sy0\">+</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">sqrt</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> s <span class=\"sy0\">+=</span> x <span class=\"sy0\">=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">round</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">sqrt</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">Msgbox</span></a> Number of bad squares <span class=\"sy0\">=</span> <span class=\"re0\">%s%</span> <span class=\"co1\">; 0</span></pre>"}, {"lang": "AWK", "loc": 26, "block": "<pre class=\"awk highlighted_source\">$ awk 'func f<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw6\">return</span><span class=\"br0\">(</span>n<span class=\"sy3\">+</span><span class=\"kw4\">int</span><span class=\"br0\">(</span>.5<span class=\"sy3\">+</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"kw2\">BEGIN</span><span class=\"br0\">{</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>;i<span class=\"sy2\">&lt;=</span><span class=\"nu0\">22</span>;i<span class=\"sy3\">++</span><span class=\"br0\">)</span><span class=\"kw5\">print</span> i,f<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">}</span>'<br/><span class=\"nu0\">1</span> <span class=\"nu0\">2</span><br/><span class=\"nu0\">2</span> <span class=\"nu0\">3</span><br/><span class=\"nu0\">3</span> <span class=\"nu0\">5</span><br/><span class=\"nu0\">4</span> <span class=\"nu0\">6</span><br/><span class=\"nu0\">5</span> <span class=\"nu0\">7</span><br/><span class=\"nu0\">6</span> <span class=\"nu0\">8</span><br/><span class=\"nu0\">7</span> <span class=\"nu0\">10</span><br/><span class=\"nu0\">8</span> <span class=\"nu0\">11</span><br/><span class=\"nu0\">9</span> <span class=\"nu0\">12</span><br/><span class=\"nu0\">10</span> <span class=\"nu0\">13</span><br/><span class=\"nu0\">11</span> <span class=\"nu0\">14</span><br/><span class=\"nu0\">12</span> <span class=\"nu0\">15</span><br/><span class=\"nu0\">13</span> <span class=\"nu0\">17</span><br/><span class=\"nu0\">14</span> <span class=\"nu0\">18</span><br/><span class=\"nu0\">15</span> <span class=\"nu0\">19</span><br/><span class=\"nu0\">16</span> <span class=\"nu0\">20</span><br/><span class=\"nu0\">17</span> <span class=\"nu0\">21</span><br/><span class=\"nu0\">18</span> <span class=\"nu0\">22</span><br/><span class=\"nu0\">19</span> <span class=\"nu0\">23</span><br/><span class=\"nu0\">20</span> <span class=\"nu0\">24</span><br/><span class=\"nu0\">21</span> <span class=\"nu0\">26</span><br/><span class=\"nu0\">22</span> <span class=\"nu0\">27</span><br/>\u00a0<br/>$ awk 'func f<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw6\">return</span><span class=\"br0\">(</span>n<span class=\"sy3\">+</span><span class=\"kw4\">int</span><span class=\"br0\">(</span>.5<span class=\"sy3\">+</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"kw2\">BEGIN</span><span class=\"br0\">{</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>;i<span class=\"sy2\">&lt;</span><span class=\"nu0\">100000</span>;i<span class=\"sy3\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span>n=f<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;r=<span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>;<span class=\"kw1\">if</span><span class=\"br0\">(</span>r<span class=\"sy3\">*</span>r<span class=\"sy2\">==</span>n<span class=\"br0\">)</span><span class=\"kw5\">print</span> n<span class=\"st0\">\"is square\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span>'<br/>$</pre>"}, {"lang": "BASIC", "loc": 25, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"kw1\">DIM</span> i      <span class=\"kw1\">AS</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw1\">DIM</span> j      <span class=\"kw1\">AS</span> <span class=\"kw1\">Double</span><br/><span class=\"kw1\">DIM</span> found  <span class=\"kw1\">AS</span> <span class=\"kw1\">Integer</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> nonsqr <span class=\"br0\">(</span>n <span class=\"kw1\">AS</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">AS</span> <span class=\"kw1\">Integer</span><br/>    nonsqr = n + <span class=\"kw1\">INT</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span> + <span class=\"kw1\">SQR</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"co1\">' Display first 22 values</span><br/><span class=\"kw1\">FOR</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">22</span><br/>    <span class=\"kw1\">PRINT</span> nonsqr<span class=\"br0\">(</span>i<span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>;<br/><span class=\"kw1\">NEXT</span> i<br/><span class=\"kw1\">PRINT</span><br/>\u00a0<br/><span class=\"co1\">' Check for squares up to one million</span><br/>found = <span class=\"nu0\">0</span><br/><span class=\"kw1\">FOR</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1000000</span><br/>     j = <span class=\"kw1\">SQR</span><span class=\"br0\">(</span>nonsqr<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">IF</span> j = <span class=\"kw1\">INT</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <br/>\t found = <span class=\"nu0\">1</span><br/>         <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Found square: \"</span>; i<br/>         <span class=\"kw1\">EXIT</span> <span class=\"kw1\">FOR</span><br/>     <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/><span class=\"kw1\">NEXT</span> i<br/><span class=\"kw1\">IF</span> found=<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"No squares found\"</span></pre>"}, {"lang": "BBC BASIC", "loc": 12, "block": "<pre class=\"text highlighted_source\">      FOR N% = 1 TO 22<br/>        S% = N% + SQR(N%) + 0.5<br/>        PRINT S%<br/>      NEXT<br/>\u00a0<br/>      PRINT '\"Checking....\"<br/>      FOR N% = 1 TO 999999<br/>        S% = N% + SQR(N%) + 0.5<br/>        R% = SQR(S%)<br/>        IF S%/R% = R% STOP<br/>      NEXT<br/>      PRINT \"No squares occur for n &lt; 1000000\"</pre>"}, {"lang": "Bc", "loc": 46, "block": "<pre class=\"text highlighted_source\">#! /usr/bin/bc<br/>\u00a0<br/>scale = 20<br/>\u00a0<br/>define ceil(x) {<br/>    auto intx<br/>    intx=int(x)<br/>    if (intx&lt;x) intx+=1<br/>    return intx<br/>}<br/>\u00a0<br/>define floor(x) {<br/>    return -ceil(-x)<br/>}<br/>\u00a0<br/>define int(x) {<br/>    auto old_scale, ret<br/>    old_scale=scale<br/>    scale=0<br/>    ret=x/1<br/>    scale=old_scale<br/>    return ret<br/>}<br/>\u00a0<br/>define round(x) {<br/>    if (x&lt;0) x-=.5 else x+=.5<br/>    return int(x)<br/>}<br/>\u00a0<br/>\u00a0<br/>define nonsqr(n) {<br/>  return n + round(sqrt(n))<br/>}<br/>\u00a0<br/>for(i=1; i &lt; 23; i++) {<br/>   print nonsqr(i), \"\\n\"<br/>}<br/>\u00a0<br/>for(i=1; i &lt; 1000000; i++) {<br/>  j = sqrt(nonsqr(i))<br/>  if ( j == floor(j) ) {<br/>    print i, \" square in the seq\\n\"<br/>  }<br/>}<br/>\u00a0<br/>quit</pre>"}, {"lang": "Burlesque", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>1 <a class=\"__cf_email__\" data-cfemail=\"bd8f8fcffd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{?s0.5?+av?+}[m<br/>\u00a0</pre>"}, {"lang": "C", "loc": 24, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;math.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;assert.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> nonsqr<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> n <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu16\">0.5</span> <span class=\"sy0\">+</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"coMULTI\">/* return n + (int)round(sqrt(n)); in C99 */</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* first 22 values (as a list) has no squares: */</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">23</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span> nonsqr<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* The following check shows no squares up to one million: */</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> j <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span>nonsqr<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span>j <span class=\"sy0\">!=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/floor.html\"><span class=\"kw3\">floor</span></a><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 25, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Diagnostics</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> sons<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">23</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span>            <br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>nonsqr<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>            <br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw4\">double</span> j <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>nonsqr<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Debug<span class=\"sy0\">.</span><span class=\"me1\">Assert</span><span class=\"br0\">(</span>j <span class=\"sy0\">!=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Floor</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span>,<span class=\"st0\">\"Square\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span>            <br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> nonsqr<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Floor</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span> <span class=\"sy0\">+</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 34, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;cmath&gt;</span><br/><span class=\"co2\">#include &lt;boost/bind.hpp&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> nextNumber<span class=\"br0\">(</span> <span class=\"kw4\">double</span> number <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">return</span> number <span class=\"sy2\">+</span> <span class=\"kw3\">floor</span><span class=\"br0\">(</span> <span class=\"nu16\">0.5</span> <span class=\"sy2\">+</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span> number <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> non_squares <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">typedef</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> SVI <span class=\"sy4\">;</span><br/>   non_squares.<span class=\"me1\">reserve</span><span class=\"br0\">(</span> <span class=\"nu0\">1000000</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span>   <br/>   <span class=\"co1\">//create a vector with a million sequence numbers</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">double</span> i <span class=\"sy1\">=</span> <span class=\"nu16\">1.0</span> <span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu16\">100001.0</span> <span class=\"sy4\">;</span> i <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>      non_squares.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> nextNumber<span class=\"br0\">(</span> i <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span>  <br/>   <span class=\"co1\">//copy the first numbers to standard out</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">copy</span><span class=\"br0\">(</span> non_squares.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , non_squares.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">22</span> ,<br/>\t std<span class=\"sy4\">::</span><span class=\"me2\">ostream_iterator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span>, <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span>     <br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span> <span class=\"sy4\">;</span><br/>   <span class=\"co1\">//find if floor of square root equals square root( i. e. it's a square number )</span><br/>   SVI found <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">find_if</span> <span class=\"br0\">(</span> non_squares.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , non_squares.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> ,<br/>\t boost<span class=\"sy4\">::</span><span class=\"me2\">bind</span><span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span><span class=\"kw3\">floor</span>, boost<span class=\"sy4\">::</span><span class=\"me2\">bind</span><span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span><span class=\"kw3\">sqrt</span>, _1 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy1\">==</span> boost<span class=\"sy4\">::</span><span class=\"me2\">bind</span><span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span><span class=\"kw3\">sqrt</span>, _1 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span> found <span class=\"sy3\">!</span><span class=\"sy1\">=</span> non_squares.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Found a square number in the sequence!<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"It is \"</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>found <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"\u00a0!<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Up to 1000000, found no square number in the sequence!<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 13, "block": "<pre class=\"clojure highlighted_source\"><span class=\"co1\">;; provides floor and sqrt, but we use Java's sqrt as it's faster</span><br/><span class=\"co1\">;; (Clojure's is more exact)</span><br/><span class=\"br0\">(</span>use 'clojure<span class=\"sy0\">.</span>contrib<span class=\"sy0\">.</span>math<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> nonsqr <span class=\"br0\">[</span>#<span class=\"sy0\">^</span>Integer n<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> n <span class=\"br0\">(</span><span class=\"kw1\">floor</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">0.5</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>sqrt n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> square? <span class=\"br0\">[</span>#<span class=\"sy0\">^</span>Double n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>r <span class=\"br0\">(</span><span class=\"kw1\">floor</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>sqrt n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> r r<span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>n <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">1</span> <span class=\"nu0\">23</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>printf <span class=\"st0\">\"%s -&gt;\u00a0%s<span class=\"es0\">\\n</span>\"</span> n <span class=\"br0\">(</span>nonsqr n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> verify <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">not-any?</span> square? <span class=\"br0\">(</span><span class=\"kw1\">map</span> nonsqr <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 21, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>non_square = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> n <span class=\"sy0\">+</span> Math.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>is_square = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  r = Math.<span class=\"me1\">floor</span><span class=\"br0\">(</span>Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  r <span class=\"sy0\">*</span> r <span class=\"kw2\">is</span> n<br/>\u00a0<br/>do <span class=\"sy0\">-&gt;</span><br/>  first_22_non_squares = <span class=\"br0\">(</span>non_square i <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">22</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  console.<span class=\"me1\">log</span> first_22_non_squares<br/>\u00a0<br/>  <span class=\"co1\"># test is_square has no false negatives:</span><br/>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">10000</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">throw</span> Error<span class=\"br0\">(</span><span class=\"st0\">\"is_square broken\"</span><span class=\"br0\">)</span> <span class=\"kw1\">unless</span> is_square i<span class=\"sy0\">*</span>i<br/>\u00a0<br/>  <span class=\"co1\"># test non_square is valid for first million values of n</span><br/>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"nu0\">1000000</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">throw</span> Error<span class=\"br0\">(</span><span class=\"st0\">\"non_square broken\"</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> is_square non_square<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\u00a0<br/>  console.<span class=\"me1\">log</span> <span class=\"st0\">\"success\"</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 16, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> non-square-sequence <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>flet <span class=\"br0\">(</span><span class=\"br0\">(</span>non-square <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t   <span class=\"st0\">\"Compute the N-th number of the non-square sequence\"</span><br/>\t   <span class=\"br0\">(</span>+ n <span class=\"br0\">(</span>floor <span class=\"br0\">(</span>+ <span class=\"nu0\">1</span>/<span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span>squarep <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t   <span class=\"st0\">\"Tests, whether N is a square\"</span><br/>\t   <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>r <span class=\"br0\">(</span>floor <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t     <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>* r r<span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop<br/>       <span class=\"sy0\">:</span><span class=\"me1\">for</span> n <span class=\"sy0\">:</span><span class=\"me1\">upfrom</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span><span class=\"me1\">to</span> <span class=\"nu0\">22</span><br/>       <span class=\"sy0\">:</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"~2D -&gt; ~D~%\"</span> n <span class=\"br0\">(</span>non-square n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop<br/>       <span class=\"sy0\">:</span><span class=\"me1\">for</span> n <span class=\"sy0\">:</span><span class=\"me1\">upfrom</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span><span class=\"me1\">to</span> <span class=\"nu0\">1000000</span><br/>       <span class=\"sy0\">:</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span>squarep <span class=\"br0\">(</span>non-square n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"sy0\">:</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"Found a square: ~D -&gt; ~D~%\"</span> <br/>\t\t   n <span class=\"br0\">(</span>non-square n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 14, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> nonSquare<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> n <span class=\"sy0\">+</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu16\">0.5</span> <span class=\"sy0\">+</span> <span class=\"kw4\">real</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">23</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>nonSquare.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">1</span>_000_000<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> ns <span class=\"sy0\">=</span> i.<span class=\"me1\">nonSquare</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">assert</span><span class=\"br0\">(</span>ns <span class=\"sy0\">!=</span> <span class=\"br0\">(</span><span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"kw4\">real</span><span class=\"br0\">(</span>ns<span class=\"br0\">)</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">)</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 11, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'sequences<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>a n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> n <span class=\"br0\">(</span><span class=\"kw1\">floor</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">0.5</span> <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> A000037 <span class=\"br0\">(</span>iterator<span class=\"sy0\">/</span>n a <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>take A000037 <span class=\"nu0\">22</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">10</span> <span class=\"nu0\">11</span> <span class=\"nu0\">12</span> <span class=\"nu0\">13</span> <span class=\"nu0\">14</span> <span class=\"nu0\">15</span> <span class=\"nu0\">17</span> <span class=\"nu0\">18</span> <span class=\"nu0\">19</span> <span class=\"nu0\">20</span> <span class=\"nu0\">21</span> <span class=\"nu0\">22</span> <span class=\"nu0\">23</span> <span class=\"nu0\">24</span> <span class=\"nu0\">26</span> <span class=\"nu0\">27</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>filter square? <span class=\"br0\">(</span>take A000037 <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 null<br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 46, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>\u00a0<br/>\tmake<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tsequence_of_non_squares <span class=\"br0\">(</span><span class=\"nu0\">22</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\tsequence_of_non_squares <span class=\"br0\">(</span><span class=\"nu0\">1000000</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tsequence_of_non_squares <span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><br/>                        <span class=\"co1\">-- Sequence of non-squares up to the n'th member.</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tn_positive<span class=\"sy0\">:</span> n <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tnon_sq, part<span class=\"sy0\">:</span> REAL_64<br/>\t\t\tmath<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+double_math&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">DOUBLE_MATH</span></a><br/>\t\t\tsquare<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> math<br/>\t\t\tacross<br/>\t\t\t\t<span class=\"nu0\">1</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw2\">as</span> c<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\tpart <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">0.5</span> <span class=\"sy0\">+</span> math.<span class=\"me1\">sqrt</span> <span class=\"br0\">(</span>c.<span class=\"me1\">item</span>.<span class=\"me1\">to_double</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\tnon_sq <span class=\"sy0\">:=</span> c.<span class=\"me1\">item</span> <span class=\"sy0\">+</span> part.<span class=\"me1\">floor</span><br/>\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>non_sq.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">if</span> math.<span class=\"me1\">sqrt</span> <span class=\"br0\">(</span>non_sq<span class=\"br0\">)</span> <span class=\"sy0\">-</span> math.<span class=\"me1\">sqrt</span> <span class=\"br0\">(</span>non_sq<span class=\"br0\">)</span>.<span class=\"me1\">floor</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\tsquare <span class=\"sy0\">:=</span> <span class=\"kw3\">True</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">if</span> square <span class=\"sy0\">=</span> <span class=\"kw3\">True</span> <span class=\"kw2\">then</span><br/>\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"There are squares for n equal to \"</span> <span class=\"sy0\">+</span> n.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"There are no squares for n equal to \"</span> <span class=\"sy0\">+</span> n.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 12, "block": "<pre class=\"text highlighted_source\">f = fn n -&gt; n + trunc(0.5 +\u00a0:math.sqrt(n)) end<br/>\u00a0<br/>IO.inspect for n &lt;- 1..22, do: f.(n)<br/>\u00a0<br/>n = 1_000_000<br/>non_squares = for i &lt;- 1..n, do: f.(i)<br/>m =\u00a0:math.sqrt(f.(n)) |&gt; Float.ceil |&gt; trunc<br/>squares = for  i &lt;- 1..m, do: i*i<br/>case Enum.find_value(squares, fn i -&gt; i in non_squares end) do<br/>  nil -&gt; IO.puts \"No squares found below #{n}\"<br/>  val -&gt; IO.puts \"Error: number is a square: #{val}\"<br/>end</pre>"}, {"lang": "Erlang", "loc": 10, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">% Implemented by Arjun Sunel</span><br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>non_squares<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>main<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t\t<a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foreach</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~p~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re3\">non_square</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">22</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>  <span class=\"co1\">% First 22 non-squares.</span><br/>\t\t<a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foreach</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~p~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re3\">non_square</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">1000000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span> <span class=\"co1\">% First 1 million non-squares.</span><br/><span class=\"re3\">non_square</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">N</span><span class=\"sy3\">+</span><span class=\"kw3\">trunc</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy3\">+</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">sqrt</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 24, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> nonsqr<span class=\"br0\">(</span> <span class=\"kw2\">atom</span> n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> n <span class=\"sy1\">+</span> <span class=\"kw2\">floor</span><span class=\"br0\">(</span> <span class=\"nu0\">0.5</span> <span class=\"sy1\">+</span> <span class=\"kw2\">sqrt</span><span class=\"br0\">(</span> n <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"  n  r(n)<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"---  ---<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">22</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"%3d \u00a0%3d<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span> i<span class=\"sy2\">,</span> nonsqr<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\u00a0<br/><span class=\"kw2\">atom</span> j<br/><span class=\"kw2\">atom</span> found<br/>found <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1000000</span> <span class=\"kw1\">do</span><br/>    j <span class=\"sy1\">=</span> <span class=\"kw2\">sqrt</span><span class=\"br0\">(</span>nonsqr<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">integer</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        found <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw2\">printf</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"Found square:\u00a0%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> i <span class=\"br0\">)</span><br/>        <span class=\"kw1\">exit</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/><span class=\"kw1\">if</span> found <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <br/>    <span class=\"kw2\">puts</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"No squares found<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">)</span> <br/><span class=\"kw1\">end</span> <span class=\"kw1\">if</span></pre>"}, {"lang": "F#", "loc": 10, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"kw1\">let</span> SequenceOfNonSquares <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> nonsqr n <span class=\"sy0\">=</span> n<span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span><span class=\"sy0\">+</span>Math.<span class=\"me1\">Sqrt</span><span class=\"br0\">(</span><span class=\"kw4\">float</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> isqrt n <span class=\"sy0\">=</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span>Math.<span class=\"me1\">Sqrt</span><span class=\"br0\">(</span><span class=\"kw4\">float</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> IsSquare n <span class=\"sy0\">=</span> n <span class=\"sy0\">=</span> <span class=\"br0\">(</span>isqrt n<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>isqrt n<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">999999</span><span class=\"br0\">}</span><br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> f <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>f, nonsqr f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> f <span class=\"sy0\">-&gt;</span> IsSquare<span class=\"br0\">(</span><span class=\"kw3\">snd</span> f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "Factor", "loc": 12, "block": "<pre class=\"text highlighted_source\">USING: kernel math math.functions math.ranges prettyprint<br/>sequences\u00a0;<br/>\u00a0<br/>: non-sq ( n -- m ) dup sqrt 1/2 + floor + &gt;integer\u00a0;<br/>\u00a0<br/>: print-first22 ( -- ) 22 [1,b] [ non-sq ] map .\u00a0;<br/>\u00a0<br/>: check-for-sq ( -- ) 1,000,000 [1,b)<br/>    [ non-sq sqrt dup floor = [ \"Square found.\" throw ] when ]<br/>    each\u00a0;<br/>\u00a0<br/>print-first22 check-for-sq</pre>"}, {"lang": "Fantom", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Main<br/>{<br/>  static Float fn (Int n)<br/>  {<br/>    n + (0.5f + (n * 1.0f).sqrt).floor<br/>  }<br/>\u00a0<br/>  static Bool isSquare (Float n)<br/>  {<br/>    n.sqrt.floor == n.sqrt<br/>  }<br/>\u00a0<br/>  public static Void main ()<br/>  {<br/>    (1..22).each |n|<br/>    {<br/>      echo (\"$n is ${fn(n)}\")<br/>    }<br/>    echo ((1..1000000).toList.any |n| { isSquare (fn(n)) } )<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 10, "block": "<pre class=\"text highlighted_source\">: u&gt;f  0 d&gt;f\u00a0;<br/>: f&gt;u  f&gt;d drop\u00a0;<br/>\u00a0<br/>: fn ( n -- n ) dup u&gt;f fsqrt fround f&gt;u +\u00a0;<br/>: test ( n -- ) 1 do i fn . loop\u00a0;<br/>23 test    \\ 2 3 5 6 7 8 10 11 12 13 14 15 17 18 19 20 21 22 23 24 26 27  ok<br/>\u00a0<br/>: square? ( n --\u00a0? ) u&gt;f fsqrt  fdup fround f-  f0=\u00a0;<br/>: test ( n -- ) 1 do i fn square? if cr i . .\" fn was square\" then loop\u00a0;<br/>1000000 test    \\ ok</pre>"}, {"lang": "Fortran", "loc": 20, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">PROGRAM</span> NONSQUARES<br/>\u00a0<br/>  <span class=\"kw3\">IMPLICIT</span> <span class=\"kw3\">NONE</span><br/>\u00a0<br/>  <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">m</span>, n, nonsqr<br/>\u00a0<br/>  <span class=\"kw1\">DO</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">22</span><br/>    nonsqr <span class=\"sy0\">=</span>  n <span class=\"sy0\">+</span> <span class=\"kw4\">FLOOR</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span> <span class=\"sy0\">+</span> <span class=\"kw4\">SQRT</span><span class=\"br0\">(</span><span class=\"kw3\">REAL</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">! or could use NINT(SQRT(REAL(n)))</span><br/>    WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> nonsqr<br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>\u00a0<br/>  <span class=\"kw1\">DO</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">1000000</span><br/>    nonsqr <span class=\"sy0\">=</span>  n <span class=\"sy0\">+</span> <span class=\"kw4\">FLOOR</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span> <span class=\"sy0\">+</span> <span class=\"kw4\">SQRT</span><span class=\"br0\">(</span><span class=\"kw3\">REAL</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    m <span class=\"sy0\">=</span> <span class=\"kw4\">INT</span><span class=\"br0\">(</span><span class=\"kw4\">SQRT</span><span class=\"br0\">(</span><span class=\"kw3\">REAL</span><span class=\"br0\">(</span>nonsqr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>m<span class=\"sy0\">*</span>m <span class=\"sy0\">==</span> nonsqr<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>      WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Square found, n=\"</span>, n<br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>  <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">PROGRAM</span> NONSQUARES</pre>"}, {"lang": "FreeBASIC", "loc": 33, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> nonSquare <span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">CUInt</span><span class=\"br0\">(</span>n + <span class=\"kw1\">Int</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span> + <span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> isSquare <span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> r = <span class=\"kw1\">CUInt</span><span class=\"br0\">(</span><span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Return</span> n = r * r<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The first 22 numbers generated by the sequence are\u00a0:\"</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">22</span><br/>  <span class=\"kw1\">Print</span> nonSquare<span class=\"br0\">(</span>i<span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>;<br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"co1\">' Test numbers generated for n less than a million to see if they're squares</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">999999</span><br/>  <span class=\"kw1\">If</span> isSquare<span class=\"br0\">(</span>nonSquare<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"The number generated by the sequence for n =\"</span>; i; <span class=\"st0\">\" is square!\"</span><br/>    <span class=\"kw1\">Goto</span> finish<br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"None of the numbers generated by the sequence for n &lt; 1000000 are square\"</span><br/>\u00a0<br/>finish:<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "GAP", "loc": 45, "block": "<pre class=\"text highlighted_source\"># Here we use generators\u00a0: the given formula doesn't need one, but the alternate<br/># non-squares function is better done with a generator.<br/>\u00a0<br/># The formula is implemented with exact floor(sqrt(n)), so we use<br/># a trick: multiply by 100 to get the first decimal digit of the<br/># square root of n, then add 5 (that's 1/2 multiplied by 10).<br/># Then just divide by 10 to get floor(1/2 + sqrt(n)) exactly.<br/># It looks weird, but unlike floating point, it will do the job<br/># for any n.<br/>NonSquaresGen\u00a0:= function()<br/>\tlocal ns, n;<br/>\tn\u00a0:= 0;<br/>\tns\u00a0:= function()<br/>\t\tn\u00a0:= n + 1;<br/>\t\treturn n + QuoInt(5 + RootInt(100*n), 10);<br/>\tend;<br/>\treturn ns;<br/>end;<br/>\u00a0<br/>NonSquaresAlt\u00a0:= function()<br/>\tlocal ns, n, q, k;<br/>\tn\u00a0:= 1;<br/>\tq\u00a0:= 4;<br/>\tk\u00a0:= 3;<br/>\tns\u00a0:= function()<br/>\t\tn\u00a0:= n + 1;<br/>\t\tif n = q then<br/>\t\t\tn\u00a0:= n + 1;<br/>\t\t\tk\u00a0:= k + 2;<br/>\t\t\tq\u00a0:= q + k;<br/>\t\tfi;<br/>\t\treturn n;<br/>\tend;<br/>\treturn ns;<br/>end;<br/>\u00a0<br/>gen\u00a0:= NonSquaresGen();<br/>List([1 .. 22] i -&gt; gen());<br/># [ 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27 ]<br/>\u00a0<br/>a\u00a0:= NonSquaresGen();<br/>b\u00a0:= NonSquaresAlt();<br/>\u00a0<br/>ForAll([1 .. 1000000], i -&gt; a() = b());<br/># true</pre>"}, {"lang": "Go", "loc": 37, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> remarkable<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> n <span class=\"sy3\">+</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span><span class=\"sy3\">.</span><span class=\"nu0\">5</span><span class=\"sy3\">+</span>math<span class=\"sy3\">.</span>Sqrt<span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span>n<span class=\"sy1\">)))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// task 1</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"  n  r(n)\"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"---  ---\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> n &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">22</span><span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%3d \u00a0%3d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> remarkable<span class=\"sy1\">(</span>n<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// task 2</span><br/>    <span class=\"kw1\">const</span> limit <span class=\"sy2\">=</span> <span class=\"nu1\">1e6</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Checking for squares for n &lt;\"</span><span class=\"sy1\">,</span> limit<span class=\"sy1\">)</span><br/>    next <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><br/>    nextSq <span class=\"sy2\">:=</span> <span class=\"nu0\">4</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> n &lt; limit<span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        r <span class=\"sy2\">:=</span> remarkable<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">case</span> r <span class=\"sy3\">==</span> nextSq<span class=\"sy1\">:</span><br/>            <span class=\"kw3\">panic</span><span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">case</span> r &gt; nextSq<span class=\"sy1\">:</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>nextSq<span class=\"sy1\">,</span> <span class=\"st0\">\"didn't occur\"</span><span class=\"sy1\">)</span><br/>            next<span class=\"sy2\">++</span><br/>            nextSq <span class=\"sy2\">=</span> next <span class=\"sy3\">*</span> next<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"No squares occur for n &lt;\"</span><span class=\"sy1\">,</span> limit<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> nonSquare <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20long\"><span class=\"kw4\">long</span></a> n <span class=\"sy0\">-&gt;</span> n <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>/<span class=\"nu0\">2</span> <span class=\"sy0\">+</span> n<span class=\"sy0\">**</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20long\"><span class=\"kw4\">long</span></a><span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 2, "block": "<pre class=\"haskell highlighted_source\">nonsqr <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> a<br/>nonsqr n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:round\"><span class=\"kw3\">round</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> n<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "HicEst", "loc": 13, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">REAL</span> <span class=\"sy1\">::</span> n<span class=\"sy1\">=</span><span class=\"nu0\">22</span><span class=\"sy1\">,</span> nonSqr<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>nonSqr <span class=\"sy1\">=</span> <span class=\"sy2\">$</span> <span class=\"sy1\">+</span> <span class=\"kw1\">FLOOR</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span> <span class=\"sy1\">+</span> <span class=\"sy2\">$</span><span class=\"sy1\">^</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/><span class=\"kw1\">WRITE</span><span class=\"br0\">(</span><span class=\"br0\">)</span> nonSqr<br/>\u00a0<br/>squares_found <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> 1E6<br/>   non2 <span class=\"sy1\">=</span> i <span class=\"sy1\">+</span> <span class=\"kw1\">FLOOR</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span> <span class=\"sy1\">+</span> i<span class=\"sy1\">^</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/>   root <span class=\"sy1\">=</span> <span class=\"kw1\">FLOOR</span><span class=\"br0\">(</span> non2<span class=\"sy1\">^</span><span class=\"nu0\">0.5</span> <span class=\"br0\">)</span><br/>   squares_found <span class=\"sy1\">=</span>  squares_found <span class=\"sy1\">+</span> <span class=\"br0\">(</span>non2 <span class=\"sy1\">==</span> root<span class=\"sy1\">*</span>root<span class=\"br0\">)</span><br/><span class=\"kw1\">ENDDO</span><br/><span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Name<span class=\"br0\">)</span> squares_found<br/><span class=\"kw1\">END</span></pre>"}, {"lang": "Icon and Unicon", "loc": 15, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> numbers<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">every</span> n <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">22</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"nsq(\"</span><span class=\"sy1\">,</span>n<span class=\"sy1\">,</span><span class=\"st0\">\")\u00a0:= \"</span><span class=\"sy1\">,</span>nsq<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">every</span> x <span class=\"sy1\">:=</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>nsq<span class=\"br0\">(</span>n <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">if</span> x  <span class=\"sy1\">=</span> floor<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy1\">^</span><span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"nsq(\"</span><span class=\"sy1\">,</span>n<span class=\"sy1\">,</span><span class=\"st0\">\") = \"</span><span class=\"sy1\">,</span>x<span class=\"sy1\">,</span><span class=\"st0\">\" is a square.\"</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"finished.\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> nsq<span class=\"br0\">(</span>n<span class=\"br0\">)</span>   <span class=\"co1\"># return non-squares</span><br/><span class=\"kw1\">return</span> n <span class=\"sy1\">+</span> floor<span class=\"br0\">(</span><span class=\"nu0\">0.5</span> <span class=\"sy1\">+</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "IDL", "loc": 4, "block": "<pre class=\"idl highlighted_source\">n <span class=\"sy0\">=</span> lindgen<span class=\"br0\">(</span><span class=\"nu0\">1000000</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span>               <span class=\"sy0\">;</span> Take a million numbers<br/>f <span class=\"sy0\">=</span> n<span class=\"sy0\">+</span>floor<span class=\"br0\">(</span>.5<span class=\"sy0\">+</span>sqrt<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>              <span class=\"sy0\">;</span> Apply formula<br/>print,f<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">21</span><span class=\"br0\">]</span>                        <span class=\"sy0\">;</span> Output first <span class=\"nu0\">22</span><br/>print,where<span class=\"br0\">(</span>sqrt<span class=\"br0\">(</span>f<span class=\"br0\">)</span> eq fix<span class=\"br0\">(</span>sqrt<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span> Test for squares</pre>"}, {"lang": "J", "loc": 7, "block": "<pre class=\"j highlighted_source\">   rf=: + <span class=\"nu0\">0.5</span> &lt;<a class=\"__cf_email__\" data-cfemail=\"e8c6a8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+\u00a0%:       <span class=\"co1\">NB.  Remarkable formula</span><br/>\u00a0<br/>   rf <span class=\"nu0\">1</span>+i.<span class=\"nu0\">22</span>               <span class=\"co1\">NB.  Results from 1 to 22</span><br/><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">10</span> <span class=\"nu0\">11</span> <span class=\"nu0\">12</span> <span class=\"nu0\">13</span> <span class=\"nu0\">14</span> <span class=\"nu0\">15</span> <span class=\"nu0\">17</span> <span class=\"nu0\">18</span> <span class=\"nu0\">19</span> <span class=\"nu0\">20</span> <span class=\"nu0\">21</span> <span class=\"nu0\">22</span> <span class=\"nu0\">23</span> <span class=\"nu0\">24</span> <span class=\"nu0\">26</span> <span class=\"nu0\">27</span><br/>\u00a0<br/>   +/ <span class=\"sy0\">(</span>rf e. *:<span class=\"sy0\">)</span> <span class=\"nu0\">1</span>+i.<span class=\"nu0\">1e6</span>   <span class=\"co1\">NB.  Number of square RFs &lt;= 1e6</span><br/><span class=\"nu0\">0</span></pre>"}, {"lang": "Java", "loc": 18, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> SeqNonSquares <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> nonsqr<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> n <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">round</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// first 22 values (as a list) has no squares:</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">23</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>nonsqr<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// The following check shows no squares up to one million:</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> j <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>nonsqr<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">assert</span> j <span class=\"sy0\">!=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 7, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> a <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">23</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">Number</span>.<span class=\"me1\">isInteger</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"kw2\">false</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"st0\">\"The \"</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"st0\">\"th element of the sequence is a square\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 8, "block": "<pre class=\"text highlighted_source\">def A000037: . + (0.5 + sqrt | floor);<br/>\u00a0<br/>def is_square: sqrt | . == floor;<br/>\u00a0<br/>\"For n up to and including 22:\",<br/> (range(1;23) | A000037),<br/>\"Check for squares for n up to 1e6:\",<br/> (range(1;1e6+1) | A000037 | select( is_square ))</pre>"}, {"lang": "Julia", "loc": 2, "block": "<pre class=\"text highlighted_source\">nonsquare(n::Real) = n + floor(typeof(n), 0.5 + sqrt(n))<br/>@show nonsquare.(1:1_000_000) \u2229 collect(1:1000) .^ 2</pre>"}, {"lang": "K", "loc": 2, "block": "<pre class=\"text highlighted_source\">   nonsquare:{x+_.5+%x}<br/>   nonsquare[1_!23]</pre>"}, {"lang": "Kotlin", "loc": 17, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1</span><br/>\u00a0<br/>fun f<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n + Math.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"nu0\">0.5</span> + Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>n.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\" n   f\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> squares <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n in <span class=\"nu0\">1</span> until <span class=\"nu0\">1000000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> v1 <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> v2 <span class=\"sy0\">=</span> Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>v1.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>v1 <span class=\"sy0\">==</span> v2 <span class=\"sy0\">*</span> v2<span class=\"br0\">)</span> squares.<span class=\"me1\">add</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">23</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"${\"</span><span class=\"sy0\">%</span>2d<span class=\"st0\">\".format(n)}\u00a0: $v1\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>squares.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"There are no squares for n less than one million\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> println<span class=\"br0\">(</span><span class=\"st0\">\"Squares are generated for the following values of n: $squares\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 23, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">22</span><br/>    <span class=\"kw1\">print</span> nonsqr<span class=\"br0\">(</span> i<span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>;<br/><span class=\"kw1\">next</span> i<br/><span class=\"kw1\">print</span><br/>\u00a0<br/>found <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1000000</span><br/>     j <span class=\"sy0\">=</span> <span class=\"br0\">(</span> nonsqr<span class=\"br0\">(</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span>^<span class=\"nu0\">0.5</span><br/>     <span class=\"kw1\">if</span> j <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span> j<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        found <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"Found square: \"</span>; i<br/>        <span class=\"kw1\">exit</span> <span class=\"kw1\">for</span><br/>     <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">next</span> i<br/><span class=\"kw1\">if</span> found <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">print</span> <span class=\"st0\">\"No squares found\"</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> nonsqr<span class=\"br0\">(</span> n<span class=\"br0\">)</span><br/>    nonsqr <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> <span class=\"nu0\">0.5</span> <span class=\"sy0\">+</span>n^<span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Logo", "loc": 1, "block": "<pre class=\"text highlighted_source\">repeat 22 [print sum # round sqrt #]</pre>"}, {"lang": "Lua", "loc": 17, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> nonSquare <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> n <span class=\"sy0\">+</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"kw3\">math.sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">22</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">io.write</span><span class=\"br0\">(</span>nonSquare<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">..</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">local</span> sr<br/><span class=\"kw1\">for</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">^</span><span class=\"nu0\">6</span> <span class=\"kw1\">do</span><br/>    sr <span class=\"sy0\">=</span> <span class=\"kw3\">math.sqrt</span><span class=\"br0\">(</span>nonSquare<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> sr <span class=\"sy0\">==</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span>sr<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Result for n = \"</span> <span class=\"sy0\">..</span> n <span class=\"sy0\">..</span> <span class=\"st0\">\" is square!\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">os.exit</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"No squares found\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica", "loc": 5, "block": "<pre class=\"text highlighted_source\">nonsq = (# + Floor[0.5 + Sqrt[#]]) &amp;;<br/><a class=\"__cf_email__\" data-cfemail=\"335d5c5d40427361525d5456\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[22]<br/>If[! Or @@ (IntegerQ /@ Sqrt /@ <a class=\"__cf_email__\" data-cfemail=\"3c5253524f4d7c6e5d525b59\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[10^6]), <br/> Print[\"No squares for n &lt;= \", 10^6]<br/> ]</pre>"}, {"lang": "MATLAB", "loc": 19, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> nonSquares<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> n = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">)</span><br/>\u00a0<br/>        generatedNumber = n + <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/floor.html\"><span class=\"kw2\">floor</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>/<span class=\"nu0\">2</span> + <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sqrt.html\"><span class=\"kw2\">sqrt</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>        <span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sqrt.html\"><span class=\"kw2\">sqrt</span></a><span class=\"br0\">(</span>generatedNumber<span class=\"br0\">)</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>==<span class=\"nu0\">0</span> <span class=\"co1\">%Check to see if the sqrt of the generated number is an integer</span><br/>            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'\\n%d generates a square number:\u00a0%d\\n'</span>, <span class=\"br0\">[</span>n,generatedNumber<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">return</span><br/>        <span class=\"kw1\">else</span> <span class=\"co1\">%If it isn't then the generated number is a square number</span><br/>            <span class=\"kw1\">if</span> n&lt;=<span class=\"nu0\">22</span><br/>                <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'%d '</span>,generatedNumber<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'\\nNo square numbers were generated for n &lt;=\u00a0%d\\n'</span>,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maxima", "loc": 10, "block": "<pre class=\"text highlighted_source\">nonsquare(n)\u00a0:= n + quotient(isqrt(100 * n) + 5, 10);<br/>makelist(nonsquare(n), n, 1, 20);<br/>[2,3,5,6,7,8,10,11,12,13,14,15,17,18,19,20,21,22,23,24]<br/>\u00a0<br/>not_square(n)\u00a0:= isqrt(n)^2 # n$<br/>\u00a0<br/>m: 10^6$<br/>u: makelist(i, i, 1, m)$<br/>is(sublist(u, not_square) = sublist(map(nonsquare, u), lambda([x], x &lt;= m)));<br/>true</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 2, "block": "<pre class=\"text highlighted_source\">1\t\u041f4\t\u0418\u041f4\t0\t,\t5\t\u0418\u041f4\t\u041a\u0432\u041a\u043e\u0440\t+\t[x]<br/>+\t\u0421/\u041f\t\u041a\u0418\u041f4\t\u0411\u041f\t02</pre>"}, {"lang": "MMIX", "loc": 87, "block": "<pre class=\"mmix highlighted_source\">\t<span class=\"kw2\">LOC</span>\tData_Segment<br/>\t<span class=\"kw2\">GREG</span>\t@<br/>buf\t<span class=\"kw2\">OCTA</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><br/>\u00a0<br/>\t<span class=\"kw2\">GREG</span>\t@<br/>NL\t<span class=\"kw2\">BYTE</span>\t<span class=\"nu2\">#a</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><br/>errh\t<span class=\"kw2\">BYTE</span>\t<span class=\"st0\">\"Sorry, number \"</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><br/>errt\t<span class=\"kw2\">BYTE</span>\t<span class=\"st0\">\"is a quare.\"</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><br/>prtOk\t<span class=\"kw2\">BYTE</span>\t<span class=\"st0\">\"No squares found below 1000000.\"</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><br/>\u00a0<br/>i\t<span class=\"kw2\">IS</span>\t<span class=\"nu3\">$1</span>\t\t<span class=\"co2\">% loop var.</span><br/>x\t<span class=\"kw2\">IS</span>\t<span class=\"nu3\">$2</span>\t\t<span class=\"co2\">% computations</span><br/>y\t<span class=\"kw2\">IS</span>\t<span class=\"nu3\">$3</span>\t\t<span class=\"co2\">%   ..</span><br/>z\t<span class=\"kw2\">IS</span>\t<span class=\"nu3\">$4</span>\t\t<span class=\"co2\">%   ..</span><br/>t\t<span class=\"kw2\">IS</span>\t<span class=\"nu3\">$5</span>\t\t<span class=\"co2\">% temp</span><br/>Ja\t<span class=\"kw2\">IS</span>\t<span class=\"nu3\">$127</span>\t\t<span class=\"co2\">% return address</span><br/>\u00a0<br/>\t<span class=\"kw2\">LOC</span>\t<span class=\"nu2\">#100</span>\t\t<span class=\"co2\">% locate program</span><br/>\t<span class=\"kw2\">GREG</span>\t@<br/><span class=\"co3\"><br/>// print integer of max. 7 digits to StdOut</span><br/><span class=\"co3\">// primarily used to show the first 22 non squares</span><br/><span class=\"co3\">// in advance the end of the buffer is filled with ' 0 '</span><br/><span class=\"co3\">// reg x contains int to be printed</span><br/>bp\t<span class=\"kw2\">IS</span>\t<span class=\"nu3\">$71</span><br/>0H\t<span class=\"kw2\">GREG</span>\t<span class=\"nu2\">#0000000000203020</span> <br/>prtInt\t<span class=\"kw1\">STO</span>\t<span class=\"nu1\">0B</span><span class=\"sy0\">,</span>buf\t\t<span class=\"co2\">% initialize buffer</span><br/>\t<span class=\"kw1\">LDA</span>\tbp<span class=\"sy0\">,</span>buf<span class=\"sy0\">+</span><span class=\"nu1\">7</span>\t<span class=\"co2\">% points after LSD </span><br/><span class=\"co3\">\t\t\t\t% REPEAT</span><br/>1H\t<span class=\"kw1\">SUB</span>\tbp<span class=\"sy0\">,</span>bp<span class=\"sy0\">,</span><span class=\"nu1\">1</span>\t\t<span class=\"co2\">%  move buffer pointer</span><br/>\t<span class=\"kw1\">DIV</span>\tx<span class=\"sy0\">,</span>x<span class=\"sy0\">,</span><span class=\"nu1\">10</span>\t\t<span class=\"co2\">%  divmod (x,10)</span><br/>\t<span class=\"kw1\">GET</span>\tt<span class=\"sy0\">,</span><span class=\"kw3\">rR</span>\t\t<span class=\"co2\">%  get remainder</span><br/>\t<span class=\"kw1\">INCL</span>\tt<span class=\"sy0\">,</span><span class=\"st0\">'0'</span>\t\t<span class=\"co2\">%  make char digit</span><br/>\t<span class=\"kw1\">STB</span>\tt<span class=\"sy0\">,</span>bp\t\t<span class=\"co2\">%  store digit</span><br/>\t<span class=\"kw1\">PBNZ</span>\tx<span class=\"sy0\">,</span><span class=\"nu1\">1B</span>\t\t<span class=\"co2\">% UNTIL no more digits</span><br/>\t<span class=\"kw1\">LDA</span>\t<span class=\"nu3\">$255</span><span class=\"sy0\">,</span>bp<br/>\t<span class=\"kw1\">TRAP</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span>Fputs<span class=\"sy0\">,</span>StdOut\t<span class=\"co2\">% print integer</span><br/>\t<span class=\"kw1\">GO</span>\tJa<span class=\"sy0\">,</span>Ja<span class=\"sy0\">,</span><span class=\"nu1\">0</span>\t\t<span class=\"co2\">% 'return'</span><br/><span class=\"co3\"><br/>// function calculates non square</span><br/><span class=\"co3\">// x = RF ( i )</span><br/>RF\t<span class=\"kw1\">FLOT</span>\tx<span class=\"sy0\">,</span>i\t\t<span class=\"co2\">% convert i to float</span><br/>\t<span class=\"kw1\">FSQRT</span>\tx<span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>x\t\t<span class=\"co2\">% x = floor ( 0.5 + sqrt i )</span><br/>\t<span class=\"kw1\">FIX</span>\tx<span class=\"sy0\">,</span>x\t\t<span class=\"co2\">% convert float to int</span><br/>\t<span class=\"kw1\">ADD</span>\tx<span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>i\t\t<span class=\"co2\">% x = i + floor ( 0.5 + sqrt i )</span><br/>\t<span class=\"kw1\">GO</span>\tJa<span class=\"sy0\">,</span>Ja<span class=\"sy0\">,</span><span class=\"nu1\">0</span>\t\t<span class=\"co2\">% 'return'</span><br/><span class=\"co3\"><br/>\t\t\t\t% main (argc, argv) {</span><br/><span class=\"co3\">// generate the first 22 non squares </span><br/>Main\t<span class=\"kw2\">SET</span>\ti<span class=\"sy0\">,</span><span class=\"nu1\">1</span>\t\t<span class=\"co2\">%  for ( i=1; i&lt;=22; i++){</span><br/>1H\t<span class=\"kw1\">GO</span>\tJa<span class=\"sy0\">,</span>RF\t\t<span class=\"co2\">%   x =  RF (i)</span><br/>\t<span class=\"kw1\">GO</span>\tJa<span class=\"sy0\">,</span>prtInt\t<span class=\"co2\">%   print non square</span><br/>\t<span class=\"kw1\">INCL</span>\ti<span class=\"sy0\">,</span><span class=\"nu1\">1</span>\t\t<span class=\"co2\">%   i++</span><br/>\t<span class=\"kw1\">CMP</span>\tt<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu1\">22</span>\t\t<span class=\"co2\">%   i&lt;=22\u00a0?</span><br/>\t<span class=\"kw1\">PBNP</span>\tt<span class=\"sy0\">,</span><span class=\"nu1\">1B</span>\t\t<span class=\"co2\">%  }</span><br/>\t<span class=\"kw1\">LDA</span>\t<span class=\"nu3\">$255</span><span class=\"sy0\">,</span>NL<br/>\t<span class=\"kw1\">TRAP</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span>Fputs<span class=\"sy0\">,</span>StdOut<br/><span class=\"co3\"><br/>// check if RF (i) is a square for 0 &lt; i &lt; 1000000</span><br/>\t<span class=\"kw2\">SET</span>\ti<span class=\"sy0\">,</span><span class=\"nu1\">1000</span><br/>\t<span class=\"kw1\">MUL</span>\ti<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>i<br/>\t<span class=\"kw1\">SUB</span>\ti<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu1\">1</span>\t\t<span class=\"co2\">% for ( i = 999999; i&gt;0; i--)</span><br/>3H\t<span class=\"kw1\">GO</span>\tJa<span class=\"sy0\">,</span>RF\t\t<span class=\"co2\">%  x = RF ( i )</span><br/><span class=\"co3\">// square test</span><br/>\t<span class=\"kw1\">FLOT</span>\ty<span class=\"sy0\">,</span>x\t\t<span class=\"co2\">%  convert int x to float</span><br/>\t<span class=\"kw1\">FSQRT</span>\tz<span class=\"sy0\">,</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span>y\t\t<span class=\"co2\">%  z = floor ( sqrt ( int (x) ) ) </span><br/>\t<span class=\"kw1\">FIX</span>\tz<span class=\"sy0\">,</span>z\t\t<span class=\"co2\">%  z = cint z</span><br/>\t<span class=\"kw1\">MUL</span>\tz<span class=\"sy0\">,</span>z<span class=\"sy0\">,</span>z\t\t<span class=\"co2\">%  z = z^2</span><br/>\t<span class=\"kw1\">CMP</span>\tt<span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>z\t\t<span class=\"co2\">%  x\u00a0!= (int sqrt x)^2\u00a0?</span><br/>\t<span class=\"kw1\">PBNZ</span>\tt<span class=\"sy0\">,</span><span class=\"nu1\">2F</span>\t\t<span class=\"co2\">%  if yes then continue </span><br/><span class=\"co3\">// it should not happen, but if a square is found</span><br/>\t<span class=\"kw1\">LDA</span>\t<span class=\"nu3\">$255</span><span class=\"sy0\">,</span>errh\t<span class=\"co2\">%  else print err-message</span><br/>\t<span class=\"kw1\">TRAP</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span>Fputs<span class=\"sy0\">,</span>StdOut<br/>\t<span class=\"kw1\">GO</span>\tJa<span class=\"sy0\">,</span>prtInt\t<span class=\"co2\">%  show trespasser</span><br/>\t<span class=\"kw1\">LDA</span>\t<span class=\"nu3\">$255</span><span class=\"sy0\">,</span>errt<br/>\t<span class=\"kw1\">TRAP</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span>Fputs<span class=\"sy0\">,</span>StdOut<br/>\t<span class=\"kw1\">LDA</span>\t<span class=\"nu3\">$255</span><span class=\"sy0\">,</span>NL<br/>\t<span class=\"kw1\">TRAP</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span>Fputs<span class=\"sy0\">,</span>StdOut<br/>\t<span class=\"kw1\">TRAP</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span>Halt<span class=\"sy0\">,</span><span class=\"nu1\">0</span><br/>\u00a0<br/>2H\t<span class=\"kw1\">SUB</span>\ti<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu1\">1</span>\t\t<span class=\"co2\">%  i--</span><br/>\t<span class=\"kw1\">PBNZ</span>\ti<span class=\"sy0\">,</span><span class=\"nu1\">3B</span>\t\t<span class=\"co2\">%  i&gt;0? }</span><br/>\t<span class=\"kw1\">LDA</span>\t<span class=\"nu3\">$255</span><span class=\"sy0\">,</span>prtOk\t<span class=\"co2\">% </span><br/>\t<span class=\"kw1\">TRAP</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span>Fputs<span class=\"sy0\">,</span>StdOut<br/>\t<span class=\"kw1\">LDA</span>\t<span class=\"nu3\">$255</span><span class=\"sy0\">,</span>NL<br/>\t<span class=\"kw1\">TRAP</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span>Fputs<span class=\"sy0\">,</span>StdOut<br/>\t<span class=\"kw1\">TRAP</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span>Halt<span class=\"sy0\">,</span><span class=\"nu1\">0</span>\t<span class=\"co2\">% }</span></pre>"}, {"lang": "Modula-3", "loc": 23, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> NonSquare <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO<span class=\"sy0\">,</span> Fmt<span class=\"sy0\">,</span> Math;<br/>\u00a0<br/><span class=\"kw1\">VAR</span> i<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> NonSquare<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">RETURN</span> n <span class=\"sy0\">+</span> <span class=\"kw3\">FLOOR</span><span class=\"br0\">(</span>0.5D0 <span class=\"sy0\">+</span> Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"kw4\">LONGREAL</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span> NonSquare;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">FOR</span> n <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">22</span> <span class=\"kw1\">DO</span><br/>    IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Fmt.<span class=\"me1\">Int</span><span class=\"br0\">(</span>NonSquare<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\" \"</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span>;<br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">FOR</span> n <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1000000</span> <span class=\"kw1\">DO</span><br/>    i <span class=\"sy0\">:=</span> NonSquare<span class=\"br0\">(</span>n<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">IF</span> i <span class=\"sy0\">=</span> <span class=\"kw3\">FLOOR</span><span class=\"br0\">(</span>Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"kw3\">FLOAT</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"kw4\">LONGREAL</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>      IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"Found square: \"</span> &amp; Fmt.<span class=\"me1\">Int</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> &amp; <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">END</span>;<br/><span class=\"kw1\">END</span> NonSquare.</pre>"}, {"lang": "Nim", "loc": 15, "block": "<pre class=\"text highlighted_source\">import math<br/>\u00a0<br/>proc nosqr(n: int): seq[int] =<br/>  result = newSeq[int] n<br/>  for i in 1..n:<br/>    result[i - 1] = i + i.float.sqrt.round.int<br/>\u00a0<br/>proc issqr(n: int): bool =<br/>  let sqr = sqrt(float(n))<br/>  let err = abs(sqr - float(round(sqr)))<br/>  err &lt; 1e-7<br/>\u00a0<br/>echo nosqr(22)<br/>for i in nosqr(1_000_000):<br/>  assert(not issqr(i))</pre>"}, {"lang": "OCaml", "loc": 15, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> nonsqr n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALtruncate\"><span class=\"kw3\">truncate</span></a> <span class=\"br0\">(</span><span class=\"nu0\">0.5</span> <span class=\"sy0\">+.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> nonsqr <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>fun<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">#</span> <span class=\"co1\">(* first 22 values (as a list) has no squares: *)</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">22</span> <span class=\"kw1\">do</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%d \"</span> <span class=\"br0\">(</span>nonsqr i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">10</span> <span class=\"nu0\">11</span> <span class=\"nu0\">12</span> <span class=\"nu0\">13</span> <span class=\"nu0\">14</span> <span class=\"nu0\">15</span> <span class=\"nu0\">17</span> <span class=\"nu0\">18</span> <span class=\"nu0\">19</span> <span class=\"nu0\">20</span> <span class=\"nu0\">21</span> <span class=\"nu0\">22</span> <span class=\"nu0\">23</span> <span class=\"nu0\">24</span> <span class=\"nu0\">26</span> <span class=\"nu0\">27</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEunit\"><span class=\"kw4\">unit</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"sy0\">#</span> <span class=\"co1\">(* The following check shows no squares up to one million: *)</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1</span>_000_000 <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> j <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"br0\">(</span>nonsqr i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>      assert <span class=\"br0\">(</span>j <span class=\"sy0\">&lt;&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloor\"><span class=\"kw3\">floor</span></a> j<span class=\"br0\">)</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;;</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEunit\"><span class=\"kw4\">unit</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 3, "block": "<pre class=\"text highlighted_source\">22 seq map(#[ dup sqrt 0.5 + floor + ]) println<br/>\u00a0<br/>1000000 seq map(#[ dup sqrt 0.5 + floor + ]) conform(#[ sqrt dup floor &lt;&gt;]) println</pre>"}, {"lang": "Oz", "loc": 17, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">NonSqr</span> N<span class=\"br0\">}</span><br/>     N <span class=\"sy0\">+</span> <span class=\"br0\">{</span>Float<span class=\"sy0\">.</span>toInt <span class=\"br0\">{</span>Floor 0<span class=\"sy0\">.</span>5 <span class=\"sy0\">+</span> <span class=\"br0\">{</span>Sqrt <span class=\"br0\">{</span>Int<span class=\"sy0\">.</span>toFloat N<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">SqrtInt</span> N<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Float<span class=\"sy0\">.</span>toInt <span class=\"br0\">{</span>Sqrt <span class=\"br0\">{</span>Int<span class=\"sy0\">.</span>toFloat N<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">IsSquare</span> N<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Pow <span class=\"br0\">{</span>SqrtInt N<span class=\"br0\">}</span> 2<span class=\"br0\">}</span> <span class=\"sy0\">==</span> N<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  Ns = <span class=\"br0\">{</span>Map <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>number 1 999999 1<span class=\"br0\">}</span> NonSqr<span class=\"br0\">}</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>take Ns 22<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>Some Ns IsSquare<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"br0\">[</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">22</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>n <span class=\"sy0\">+</span> <span class=\"kw1\">floor</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"sy0\">/</span><span class=\"nu1\">2</span> <span class=\"sy0\">+</span> <span class=\"kw1\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">sum</span><span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu2\">1e6</span><span class=\"sy0\">,</span><span class=\"kw1\">issquare</span><span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"kw1\">floor</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"sy0\">/</span><span class=\"nu1\">2</span> <span class=\"sy0\">+</span> <span class=\"kw1\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span></pre>"}, {"lang": "Pascal", "loc": 24, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> SequenceOfNonSquares<span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  Math<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  m<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> test<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">22</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    test <span class=\"sy1\">:</span><span class=\"sy3\">=</span>  n <span class=\"sy3\">+</span> floor<span class=\"br0\">(</span><span class=\"nu0\">0.5</span> <span class=\"sy3\">+</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span>test<span class=\"sy1\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1000000</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    test <span class=\"sy1\">:</span><span class=\"sy3\">=</span>  n <span class=\"sy3\">+</span> floor<span class=\"br0\">(</span><span class=\"nu0\">0.5</span> <span class=\"sy3\">+</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    m <span class=\"sy1\">:</span><span class=\"sy3\">=</span> round<span class=\"br0\">(</span><span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>test<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>m<span class=\"sy3\">*</span>m <span class=\"sy3\">=</span> test<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'square found for n = '</span><span class=\"sy1\">,</span> n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span> <br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 8, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> nonsqr <span class=\"br0\">{</span> <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span>  <span class=\"re0\">$n</span> <span class=\"sy0\">+</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><span class=\"nu0\">0.5</span> <span class=\"sy0\">+</span> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> nonsqr<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">22</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">1</span>_000_000<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$root</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a> nonsqr<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Oops, nonsqr($i) is a square!\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$root</span> <span class=\"sy0\">==</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a> <span class=\"re0\">$root</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 9, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> nth<span class=\"sy0\">-</span>term <span class=\"br0\">(</span>Int <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$n</span> <span class=\"sy0\">+</span> <span class=\"kw3\">round</span> <span class=\"kw3\">sqrt</span> <span class=\"re0\">$n</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Print the first 22 values of the sequence</span><br/><span class=\"kw3\">say</span> <span class=\"br0\">(</span>nth<span class=\"sy0\">-</span>term <span class=\"re0\">$_</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">22</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Check that the first million values of the sequence are indeed non-square</span><br/><span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">1</span>_000_000 <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$i</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"Oops, nth-term($i) is square!\"</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">sqrt</span> nth<span class=\"sy0\">-</span>term <span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"sy0\">%%</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 19, "block": "<pre class=\"text highlighted_source\">sequence s = repeat(0,22)<br/>for n=1 to length(s) do<br/>    s[n] = n + floor(1/2 + sqrt(n))<br/>end for<br/>?s<br/>integer nxt = 2, snxt = nxt*nxt, k<br/>for n=1 to 1000000 do<br/>    k = n + floor(1/2 + sqrt(n))<br/>    if k&gt;snxt then<br/>--      printf(1,\"%d didn't occur\\n\",snxt)<br/>        nxt += 1<br/>        snxt = nxt*nxt<br/>    end if<br/>    if k=snxt then<br/>        puts(1,\"error!!\\n\")<br/>    end if<br/>end for<br/>puts(1,\"none found \")<br/>?{nxt,snxt}</pre>"}, {"lang": "PHP", "loc": 21, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/>\t<span class=\"co1\">//First Task</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;=</span><span class=\"nu0\">22</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">echo</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">+</span> <a href=\"http://www.php.net/floor\"><span class=\"kw3\">floor</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <a href=\"http://www.php.net/sqrt\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">//Second Task</span><br/>\t<span class=\"re0\">$found_square</span><span class=\"sy0\">=</span><span class=\"kw4\">False</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;=</span><span class=\"nu0\">1000000</span><span class=\"sy0\">;</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$non_square</span><span class=\"sy0\">=</span><span class=\"re0\">$i</span> <span class=\"sy0\">+</span> <a href=\"http://www.php.net/floor\"><span class=\"kw3\">floor</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <a href=\"http://www.php.net/sqrt\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><a href=\"http://www.php.net/sqrt\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$non_square</span><span class=\"br0\">)</span><span class=\"sy0\">==</span><a href=\"http://www.php.net/intval\"><span class=\"kw3\">intval</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/sqrt\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$non_square</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"re0\">$found_square</span><span class=\"sy0\">=</span><span class=\"kw4\">True</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">echo</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$found_square</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">echo</span><span class=\"br0\">(</span><span class=\"st0\">\"Found a square number, so the formula does not always work.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">echo</span><span class=\"br0\">(</span><span class=\"st0\">\"Up to 1000000, found no square number in the sequence!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 10, "block": "<pre class=\"text highlighted_source\">(de sqfun (N)<br/>   (+ N (sqrt N T)) )  # 'sqrt' rounds when called with 'T'<br/>\u00a0<br/>(for I 22<br/>   (println I (sqfun I)) )<br/>\u00a0<br/>(for I 1000000<br/>   (let (N (sqfun I)  R (sqrt N))<br/>      (when (= N (* R R))<br/>         (prinl N \" is square\") ) ) )</pre>"}, {"lang": "PL/I", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>   put skip edit ((n, n + floor(sqrt(n) + 0.5) do n = 1 to n))<br/>      (skip, 2 f(5));<br/>\u00a0</pre>"}, {"lang": "PostScript", "loc": 11, "block": "<pre class=\"text highlighted_source\">/nonsquare { dup sqrt .5 add floor add } def<br/>/issquare { dup sqrt floor dup mul eq } def<br/>\u00a0<br/>1 1 22 { nonsquare = } for<br/>\u00a0<br/>1 1 1000 { <br/>        dup nonsquare issquare { <br/>                (produced a square!) = = exit<br/>        } if pop<br/>} for <br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 3, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">filter</span> Get<span class=\"sy0\">-</span>NonSquare <span class=\"br0\">{</span><br/>    <span class=\"kw3\">return</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"sy0\">+</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Floor<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Sqrt<span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PureBasic", "loc": 27, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">22</span><br/>  <span class=\"co1\">; Integer, so no floor needed</span><br/>  tmp <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Sqr</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>a <span class=\"sy0\">+</span> tmp<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Starting check till one million\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1000000</span><br/>  value.d <span class=\"sy0\">=</span> a <span class=\"sy0\">+</span> <span class=\"kw2\">Round</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Sqr</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span>, #PB_Round_Down<span class=\"br0\">)</span><br/>  root    <span class=\"sy0\">=</span> <span class=\"kw2\">Sqr</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> value <span class=\"sy0\">-</span> root<span class=\"sy0\">*</span>root <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    found <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> found <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span><br/>      <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Found a square! \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">ElseIf</span> found <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><br/>      <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"And more\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">If</span> found<br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>found<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" Squares found, see above\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Else</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"No squares, all ok\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span><br/><span class=\"co1\">; Wait for enter</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 14, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> sqrt<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"co1\"># (Using the fact that round(X) is equivalent to floor(0.5+X) for our range of X)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> nonsqr<span class=\"br0\">(</span>n<span class=\"br0\">)</span>: <span class=\"kw1\">return</span> n + <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw2\">round</span><span class=\"br0\">(</span>sqrt<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"co1\"># first 22 values (as a list) has no squares:</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"br0\">[</span>nonsqr<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">23</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"nu0\">19</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">21</span><span class=\"sy0\">,</span> <span class=\"nu0\">22</span><span class=\"sy0\">,</span> <span class=\"nu0\">23</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">26</span><span class=\"sy0\">,</span> <span class=\"nu0\">27</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"co1\"># The following check shows no squares up to one million:</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1000000</span><span class=\"br0\">)</span>:<br/>\tj <span class=\"sy0\">=</span> sqrt<span class=\"br0\">(</span>nonsqr<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">assert</span> j <span class=\"sy0\">!=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Found a square in the sequence:\u00a0%i\"</span>\u00a0% i<br/>\u00a0<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span></pre>"}, {"lang": "R", "loc": 2, "block": "<pre class=\"text highlighted_source\">nonsqr &lt;- function(n) n + floor(1/2 + sqrt(n))<br/>nonsqr(1:22)</pre>"}, {"lang": "Racket", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define (non-square n)<br/>  (+ n (exact-floor (+ 1/2 (sqrt n)))))<br/>\u00a0<br/>(map non-square (range 1 23))<br/>\u00a0<br/>(define (square? n) (integer? (sqrt n)))<br/>\u00a0<br/>(for/or ([n (in-range 1 1000001)])<br/>  (square? (non-square n)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 31, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm displays some non\u2500square numbers, &amp; also displays a validation check up to 1M*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N M <span class=\"sy0\">.</span>                                  <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> N==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> N==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> N=      <span class=\"nu0\">22</span>               <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> M==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> M==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> M= <span class=\"nu0\">1000000</span>               <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'The first '</span>    N    <span class=\"st0\">\" non\u2500square numbers:\"</span>  <span class=\"coMULTI\">/*display a header of what's to come.  */</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/* [\u2191]  default for  M  is one million.*/</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'index'</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span>        <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">\"non\u2500square numbers\"</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">''</span>     , <span class=\"nu0\">20</span>, <span class=\"st0\">\"\u2550\"</span><span class=\"br0\">)</span>   <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">''</span>                  , <span class=\"nu0\">20</span>, <span class=\"st0\">\"\u2550\"</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> N<br/>          <span class=\"kw1\">say</span>  <span class=\"kw6\">center</span><span class=\"br0\">(</span>j, <span class=\"nu0\">20</span><span class=\"br0\">)</span>   <span class=\"kw6\">center</span><span class=\"br0\">(</span>j +floor<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> +sqrt<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>#=<span class=\"nu0\">0</span><br/>          <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> M                          <span class=\"coMULTI\">/*have it step through a million of 'em*/</span><br/>          $= k + floor<span class=\"br0\">(</span> sqrt<span class=\"br0\">(</span>k<span class=\"br0\">)</span> + <span class=\"sy0\">.</span>5 <span class=\"br0\">)</span>           <span class=\"coMULTI\">/*use the specified formula (algorithm)*/</span><br/>          iRoot=iSqrt<span class=\"br0\">(</span>$<span class=\"br0\">)</span>                         <span class=\"coMULTI\">/*\u00b7\u00b7\u00b7 and also use the  ISQRT function.*/</span><br/>          <span class=\"kw1\">if</span> iRoot<span class=\"sy0\">*</span>iRoot==$  <span class=\"kw3\">then</span> #=# + <span class=\"nu0\">1</span>        <span class=\"coMULTI\">/*have we found a mistook?  (sic)      */</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/><span class=\"kw1\">say</span>;                     <span class=\"kw1\">if</span> #==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> #= <span class=\"st0\">'no'</span>   <span class=\"coMULTI\">/*use gooder English for display below.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'Using the formula:  floor[ 1/2 +  sqrt(n) ], '</span>    #    <span class=\"st0\">\" squares found up to \"</span>   M<span class=\"st0\">'.'</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  display (possible) error count.*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>floor: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> floor_;         <span class=\"kw1\">return</span> <span class=\"kw6\">trunc</span><span class=\"br0\">(</span> floor_ - <span class=\"br0\">(</span>floor_ <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>iSqrt: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;  #=<span class=\"nu0\">1</span>;   r=<span class=\"nu0\">0</span>;         <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> # <span class=\"sy0\">&lt;</span>= x; #=#<span class=\"sy0\">*</span><span class=\"nu0\">4</span>; <span class=\"kw3\">end</span><br/>       <span class=\"kw1\">do</span> <span class=\"kw2\">while</span> #<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>; #=#%4; _=x-r-#; r=r%2; <span class=\"kw1\">if</span> _<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>; x=_; r=r+#; <span class=\"kw3\">end</span>; <span class=\"kw1\">return</span> r<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sqrt:  <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x; <span class=\"kw1\">if</span> x=<span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>; d=<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>; m<span class=\"sy0\">.</span>=<span class=\"nu0\">9</span>; <span class=\"kw1\">numeric</span> <span class=\"kw2\">form</span>; h=d+<span class=\"nu0\">6</span><br/>       <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span>;  <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>x,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span>,,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">'E0'</span>  <span class=\"kw2\">with</span>  g <span class=\"st0\">'E'</span> _ <span class=\"sy0\">.</span>; g=g <span class=\"sy0\">*.</span>5<span class=\"st0\">'e'</span>_\u00a0%2<br/>         <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">while</span> h<span class=\"sy0\">&gt;</span><span class=\"nu0\">9</span>;      m<span class=\"sy0\">.</span>j=h;               h=h\u00a0% <span class=\"nu0\">2</span>  + <span class=\"nu0\">1</span>;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*j*/</span><br/>         <span class=\"kw1\">do</span> k=j+<span class=\"nu0\">5</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">0</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> m<span class=\"sy0\">.</span>k;  g=<span class=\"br0\">(</span>g+x<span class=\"sy0\">/</span>g<span class=\"br0\">)</span><span class=\"sy0\">*.</span>5;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*k*/</span>;   <span class=\"kw1\">return</span> g</pre>"}, {"lang": "Ring", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>for n=1 to 22<br/>    x = n + floor(1/2 + sqrt(n))  <br/>    see \"\" + x + \" \"<br/>next<br/>see nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 11, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> f<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  n <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">0.5</span> <span class=\"sy0\">+</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">floor</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">22</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{n} #{f(n)}\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/>non_squares = <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">1</span>_000_000<span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> f<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>squares = <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">1001</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> n<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"br0\">}</span> <span class=\"co1\"># Note: 1001*1001 = 1_002_001 &gt; 1_001_000 = f(1_000_000)</span><br/><span class=\"br0\">(</span>squares <span class=\"sy0\">&amp;</span> non_squares<span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"Oops, found a square f(#{non_squares.index(n)}) = #{n}\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fn f(n: i64) -&gt; i64 {<br/>    n + (0.5 + (n as f64).sqrt()) as i64<br/>}<br/>\u00a0<br/>fn is_sqr(n: i64) -&gt; bool {<br/>    let a = (n as f64).sqrt() as i64;<br/>    n == a * a || n == (a+1) * (a+1) || n == (a-1) * (a-1) <br/>}<br/>\u00a0<br/>fn main() {<br/>    println!( \"{:?}\", (1..23).map(|n| f(n)).collect::&lt;Vec&lt;i64&gt;&gt;() );<br/>    let count = (1..1_000_000).map(|n| f(n)).filter(|&amp;n| is_sqr(n)).count();<br/>    println!(\"{} unexpected squares found\", count);<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 9, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> nonsqr<span class=\"br0\">(</span>n<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">=</span>n+math.<span class=\"me1\">round</span><span class=\"br0\">(</span>math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">&lt;</span>-<span class=\"nu0\">1</span> to <span class=\"nu0\">22</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span>n + <span class=\"st0\">\"  \"</span>+ nonsqr<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> test<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> to <span class=\"nu0\">1000000</span><span class=\"br0\">)</span>.<span class=\"me1\">exists</span><span class=\"br0\">{</span>n <span class=\"sy0\">=&gt;</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> j<span class=\"sy0\">=</span>math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>nonsqr<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   j<span class=\"sy0\">==</span>math.<span class=\"me1\">floor</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>println<span class=\"br0\">(</span><span class=\"st0\">\"squares up to one million=\"</span>+test<span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 31, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> non<span class=\"sy0\">-</span>squares<br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>index<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">+</span> index <span class=\"br0\">(</span>inexact<span class=\"sy0\">-&gt;</span>exact <span class=\"br0\">(</span><span class=\"kw1\">floor</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> index<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">sequence</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>function<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>start<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>stop<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> start stop<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>function start<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">sequence</span> function<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> start <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> stop<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> square?<br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>root<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> root root<span class=\"br0\">)</span> number<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">floor</span> <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> number<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> any?<br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>predicate?<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> <span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>predicate? <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"br0\">(</span>any? predicate?<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">sequence</span> non<span class=\"sy0\">-</span>squares<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">22</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>any? square?<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">sequence</span> non<span class=\"sy0\">-</span>squares<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">999999</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 26, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>  include \"math.s7i\";<br/>\u00a0<br/>const func integer: nonsqr (in integer: n) is<br/>  return n + trunc(0.5 + sqrt(flt(n)));<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: i is 0;<br/>    var float: j is 0.0;<br/>  begin<br/>    # First 22 values (as a list) has no squares:<br/>    for i range 1 to 22 do<br/>      write(nonsqr(i) &lt;&amp; \" \");<br/>    end for;<br/>    writeln;<br/>\u00a0<br/>    # The following check shows no squares up to one million:<br/>    for i range 1 to 1000000 do<br/>      j\u00a0:= sqrt(flt(nonsqr(i)));<br/>      if j = floor(j) then<br/>        writeln(\"Found square for nonsqr(\" &lt;&amp; i &lt;&amp; \")\");<br/>      end if;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 8, "block": "<pre class=\"ruby highlighted_source\">func nonsqr<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">0.5</span> <span class=\"sy0\">+</span> n.<span class=\"me1\">sqrt</span> <span class=\"sy0\">-&gt;</span> floor <span class=\"sy0\">+</span> n <span class=\"br0\">}</span><br/><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> nonsqr<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">22</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span>.<span class=\"me1\">say</span><br/>\u00a0<br/><span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nonsqr<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">is_sqr</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>     die <span class=\"st0\">\"Found a square in the sequence: #{i}\"</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span>..1e6</pre>"}, {"lang": "Smalltalk", "loc": 19, "block": "<pre class=\"smalltalk highlighted_source\">|<span class=\"re3\"> nonSquare isSquare squaresFound </span>|<br/><span class=\"re6\">nonSquare</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>:<span class=\"re5\">n</span> |<br/>    n + <span class=\"br0\">(</span><span class=\"re5\">n</span> sqrt<span class=\"br0\">)</span> rounded<br/><span class=\"br0\">]</span>.<br/><span class=\"re5\">isSquare</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>:<span class=\"re5\">n</span> |<br/>    n <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re5\">n</span> sqrt<span class=\"br0\">)</span> asInteger<span class=\"br0\">)</span> raisedTo: <span class=\"re5\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">]</span>.<br/><span class=\"re0\">Transcript</span> show: <span class=\"st0\">'The first few non-squares:'</span>; cr.<br/><span class=\"re5\">1</span> to: <span class=\"re5\">22</span> do: <span class=\"br0\">[</span>:<span class=\"re5\">n</span> |<br/>    <span class=\"re0\">Transcript</span> show: <span class=\"br0\">(</span><span class=\"re5\">nonSquare</span> value: <span class=\"re5\">n</span><span class=\"br0\">)</span> asString; cr<br/><span class=\"br0\">]</span>.<br/><span class=\"re5\">squaresFound</span> <span class=\"sy0\">:=</span> <span class=\"re5\">0</span>.<br/><span class=\"re5\">1</span> to: <span class=\"re5\">1000000</span> do: <span class=\"br0\">[</span>:<span class=\"re5\">n</span> |<br/>    <span class=\"br0\">(</span><span class=\"re5\">isSquare</span> value: <span class=\"br0\">(</span><span class=\"re5\">nonSquare</span> value: <span class=\"re5\">n</span><span class=\"br0\">)</span><span class=\"br0\">)</span> ifTrue: <span class=\"br0\">[</span><br/>        <span class=\"re5\">squaresFound</span> <span class=\"sy0\">:=</span> <span class=\"re5\">squaresFound</span> + <span class=\"re5\">1</span><br/>    <span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.<br/><span class=\"re0\">Transcript</span> show: <span class=\"st0\">'Squares found for values up to 1,000,000: '</span>;<br/>show: <span class=\"re5\">squaresFound</span> asString; cr</pre>"}, {"lang": "Standard ML", "loc": 12, "block": "<pre class=\"text highlighted_source\">- fun nonsqr n = n + round (Math.sqrt (real n));<br/>val nonsqr = fn\u00a0: int -&gt; int<br/>- List.tabulate (23, nonsqr);<br/>val it = [0,2,3,5,6,7,8,10,11,12,13,14,...]\u00a0: int list<br/>- let fun loop i = if i = 1000000 then true<br/>                                  else let val j = Math.sqrt (real (nonsqr i)) in<br/>                                         Real.!= (j, Real.realFloor j) andalso<br/>                                           loop (i+1)<br/>                                       end in<br/>    loop 1<br/>  end;<br/>val it = true\u00a0: bool</pre>"}, {"lang": "Tcl", "loc": 17, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"kw1\">set</span> f <span class=\"br0\">{</span>n <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> + floor<span class=\"br0\">(</span><span class=\"nu0\">0.5</span> + sqrt<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> x <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">22</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%d<span class=\"es0\">\\t</span>%s\"</span> <span class=\"re0\">$x</span> <span class=\"br0\">[</span>apply <span class=\"re0\">$f</span> <span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"looking for a square...\"</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> x <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1000000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> y <span class=\"br0\">[</span>apply <span class=\"re0\">$f</span> <span class=\"re0\">$x</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> s <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>sqrt<span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$s</span> == int<span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">error</span> <span class=\"st0\">\"found a square in the sequence: $x -&gt; $y\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"done\"</span></pre>"}, {"lang": "TI-89 BASIC", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u25a0 n+floor(1/2+\u221a(n)) \u2192 f(n)<br/>    Done<br/>\u25a0 seq(f(n),n,1,22)<br/>    {2,3,5,6,7,8,10,11,12,13,14,15,17,18,19,20,21,22,23,24,26,27}</pre>"}, {"lang": "Ursala", "loc": 10, "block": "<pre class=\"text highlighted_source\">#import nat<br/>#import flo<br/>\u00a0<br/>nth_non_square = float; plus^/~&amp; math..trunc+ plus/0.5+ sqrt<br/>is_square      = sqrt; ^E/~&amp; math..trunc<br/>\u00a0<br/>#show+<br/>\u00a0<br/>examples =\u00a0%neALP ^(~&amp;,nth_non_square)*t iota23<br/>check    = (is_square*~+nth_non_square*t; ~&amp;i&amp;&amp;\u00a0%eLP)||-[no squares found]-! iota 1000000</pre>"}, {"lang": "VBA", "loc": 20, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Sub</span> Main()<br/><span class=\"kw4\">Dim</span> i&amp;, c&amp;, j#, s$<br/>Const N&amp; = 1000000<br/>   s = <span class=\"st0\">\"values for n in the range 1 to 22\u00a0: \"</span><br/>   <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> 22<br/>      s = s &amp; ns(i) &amp; <span class=\"st0\">\", \"</span><br/>   <span class=\"kw3\">Next</span><br/>   <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> N<br/>      j = Sqr(ns(i))<br/>      <span class=\"kw3\">If</span> j = CInt(j) <span class=\"kw3\">Then</span> c = c + 1<br/>   <span class=\"kw3\">Next</span><br/>\u00a0<br/>   Debug.<span class=\"kw4\">Print</span> s<br/>   Debug.<span class=\"kw4\">Print</span> c &amp; <span class=\"st0\">\" squares less than \"</span> &amp; N<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> ns(l <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>   ns = l + Int(1 / 2 + Sqr(l))<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "XLISP", "loc": 21, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> non-square <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>+ n <span class=\"br0\">(</span>floor <span class=\"br0\">(</span>+ <span class=\"nu0\">0.5</span> <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> range <span class=\"br0\">(</span>x y<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> x y<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">cons</span> x <span class=\"br0\">(</span>range <span class=\"br0\">(</span>+ x <span class=\"nu0\">1</span><span class=\"br0\">)</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> squarep <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"br0\">(</span>floor <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> count-squares <span class=\"br0\">(</span>x y<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>define squares <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>squarep <span class=\"br0\">(</span>non-square x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>define squares <span class=\"br0\">(</span>+ squares <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> x y<span class=\"br0\">)</span><br/>        squares<br/>        <span class=\"br0\">(</span>count-squares <span class=\"br0\">(</span>+ x <span class=\"nu0\">1</span><span class=\"br0\">)</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> non-square <span class=\"br0\">(</span>range <span class=\"nu0\">1</span> <span class=\"nu0\">23</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> `<span class=\"br0\">(</span>number of squares for values less than <span class=\"nu0\">1000000</span> <span class=\"sy0\">=</span> <span class=\"sy0\">,</span><span class=\"br0\">(</span>count-squares <span class=\"nu0\">1</span> <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "XPL0", "loc": 23, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>\u00a0<br/>func real Floor(X);             \\Truncate X toward - infinity<br/>real X;<br/>return float(fix(X-0.5));<br/>\u00a0<br/>func PerfectSq(N);              \\Return 'true' if N is a perfect square<br/>int N;<br/>return sqrt(N)*sqrt(N) = N;<br/>\u00a0<br/>int N, M, M0;<br/>[for N:= 1 to 22 do<br/>        [IntOut(0, fix(float(N) + Floor(0.5 + sqrt(float(N)))));  ChOut(0,^ )];<br/>CrLf(0);<br/>M0:= 1;<br/>for N:= 1 to 999_999 do<br/>        [M:= fix(float(N) + Floor(0.5 + sqrt(float(N))));<br/>        if PerfectSq(M) then [IntOut(0, M);  Crlf(0)];  \\error: have square<br/>        if M#M0+1 and not PerfectSq(M0+1) then          \\error: not sequential<br/>                [IntOut(0, M);  Crlf(0)];<br/>        M0:= M;<br/>        ];<br/>]</pre>"}, {"lang": "zkl", "loc": 7, "block": "<pre class=\"text highlighted_source\">fcn seq(n){n + (0.5+n.toFloat().sqrt()).floor()}<br/>[1..22].apply(seq).toString(*).println();<br/>\u00a0<br/>fcn isSquare(n){n.toFloat().sqrt().modf()[1]==0.0}<br/>isSquare(25)  //--&gt;True<br/>isSquare(26)  //--&gt;False<br/>[2..0d1_000_000].filter(fcn(n){isSquare(seq(n))}).println();</pre>"}]}