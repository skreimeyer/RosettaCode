{"task": "Stair-climbing_puzzle", "blocks": [{"lang": "ActionScript", "loc": 7, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">function</span> stepUp<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw2\">var</span> i:<span class=\"kw3\">int</span> = <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>step<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>i++;<br/>\t\t<span class=\"kw1\">else</span> i--;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 6, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">procedure</span> Step_Up <span class=\"kw1\">is</span><br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">while</span> <span class=\"kw2\">not</span> Step <span class=\"kw1\">loop</span><br/>      Step_Up;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Step_Up;</pre>"}, {"lang": "Aime", "loc": 6, "block": "<pre class=\"text highlighted_source\">void step_up(void)<br/>{<br/>    while (!step()) {<br/>        step_up();<br/>    }<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 6, "block": "<pre class=\"algol68 highlighted_source\">   <span class=\"kw4\">PROC</span> step up <span class=\"sy1\">=</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"kw2\">WHILE</span> <span class=\"kw8\">NOT</span> step <span class=\"kw2\">DO</span><br/>         step up<br/>      <span class=\"kw2\">OD</span><br/>   <span class=\"kw2\">END</span> <span class=\"coMULTI\"># step up #</span><span class=\"sy1\">;</span></pre>"}, {"lang": "AutoHotkey", "loc": 5, "block": "<pre class=\"autohotkey highlighted_source\">step_up<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">While</span>\u00a0!step<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>       step_up<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 5, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"kw6\">function</span> step_up<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>step<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> step_up<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 3, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"kw1\">SUB</span> stepup<br/>    <span class=\"kw1\">IF</span> <a href=\"http://www.qbasicnews.com/qboho/qcknot.shtml\"><span class=\"kw3\">NOT</span></a> step1 <span class=\"kw1\">THEN</span> stepup: stepup<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">SUB</span></pre>"}, {"lang": "BBC BASIC", "loc": 3, "block": "<pre class=\"text highlighted_source\">      DEF PROCstepup<br/>      IF NOT FNstep PROCstepup\u00a0: PROCstepup<br/>      ENDPROC</pre>"}, {"lang": "C", "loc": 6, "block": "<pre class=\"c highlighted_source\"><span class=\"kw4\">void</span> step_up<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>step<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        step_up<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 4, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw4\">void</span> step_up<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span>step<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> step_up<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 3, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw4\">void</span> step_up<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>step<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> step_up<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 12, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">;; the initial level</span><br/><span class=\"br0\">(</span>def level <span class=\"br0\">(</span><span class=\"kw1\">atom</span> <span class=\"nu0\">41</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; the probability of success</span><br/><span class=\"br0\">(</span>def prob <span class=\"nu0\">0.5001</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span>defn step<br/>  <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>success <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>rand<span class=\"br0\">)</span> prob<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>swap<span class=\"sy0\">!</span> level <span class=\"br0\">(</span><span class=\"kw1\">if</span> success inc dec<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    success<span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> step-up <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>unless <span class=\"br0\">(</span>step<span class=\"br0\">)</span> <span class=\"br0\">(</span>step-up<span class=\"br0\">)</span> <span class=\"br0\">(</span>step-up<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 5, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> step_up<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>step<span class=\"br0\">)</span><br/>        step_up<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 8, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> level <span class=\"sy0\">:=</span> <span class=\"nu0\">41</span><br/><a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> prob <span class=\"sy0\">:=</span> <span class=\"nu0\">0.5001</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> step<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> success <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/entropy\"><span class=\"kw7\">entropy</span></a>.<span class=\"me1\">nextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> prob<br/>    level <span class=\"sy0\">+=</span> success.<span class=\"me1\">pick</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    return success<br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 23, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>step<span class=\"sy0\">-</span>up<span class=\"br0\">)</span> <span class=\"br0\">(</span>while <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>step<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>step<span class=\"sy0\">-</span>up<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; checking this is tail-recusive\u00a0:</span><br/>step<span class=\"sy0\">-</span>up<br/>   \u2192 <span class=\"br0\">(</span>#\u03bb null <span class=\"br0\">(</span>#while <span class=\"br0\">(</span>#not <span class=\"br0\">(</span>step<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>#lambda<span class=\"sy0\">-</span>tail<span class=\"sy0\">-</span>call<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Experimentation (not part of the task)</span><br/><span class=\"co1\">;; How much step calls to climb  1000 stairs\u00a0?</span><br/><span class=\"co1\">;; success is the robot success probability</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>step<span class=\"br0\">)</span> <br/> <span class=\"br0\">(</span><span class=\"kw1\">set!</span> STEPS <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> STEPS<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; count</span><br/> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>random<span class=\"br0\">)</span> SUCCESS<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; -&gt;#t or #f</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>climb stairs<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>when <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> stairs <span class=\"nu0\">0</span><span class=\"br0\">)</span>  <span class=\"br0\">(</span>step<span class=\"sy0\">-</span>up<span class=\"br0\">)</span> <span class=\"br0\">(</span>climb <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> stairs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>task  <span class=\"br0\">(</span>stairs <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>success <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"sy0\">/</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> SUCCESS success<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> STEPS <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>climb stairs<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>writeln 'stairs stairs 'probability success 'steps STEPS<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 13, "block": "<pre class=\"text highlighted_source\">defmodule Stair_climbing do<br/>  defp step, do: 1 ==\u00a0:rand.uniform(2)<br/>\u00a0<br/>  defp step_up(true), do:\u00a0:ok<br/>  defp step_up(false) do<br/>    step_up(step)<br/>    step_up(step)<br/>  end<br/>\u00a0<br/>  def step_up, do: step_up(step)<br/>end<br/>\u00a0<br/>IO.inspect Stair_climbing.step_up</pre>"}, {"lang": "Erlang", "loc": 16, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>stair<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">compile</span><span class=\"br0\">(</span>export_all<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">step</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"nu0\">1</span> <span class=\"sy3\">==</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">step_up</span><span class=\"br0\">(</span>true<span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"me1\">ok</span><span class=\"sy1\">;</span><br/><span class=\"re3\">step_up</span><span class=\"br0\">(</span>false<span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span>   <br/>    <span class=\"re3\">step_up</span><span class=\"br0\">(</span><span class=\"re3\">step</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">step_up</span><span class=\"br0\">(</span><span class=\"re3\">step</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">step_up</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">step_up</span><span class=\"br0\">(</span><span class=\"re3\">step</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 6, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">procedure</span> step_up<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> step<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        step_up<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        step_up<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">procedure</span></pre>"}, {"lang": "Forth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: step-up   begin step 0= while recurse repeat\u00a0;</pre>"}, {"lang": "Fortran", "loc": 28, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> StairRobot<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"kw3\">logical</span> <span class=\"kw1\">function</span> step<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">! try to climb up and return true or false</span><br/>    step <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span>     <span class=\"co1\">! to avoid compiler warning</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> step<br/>\u00a0<br/>  <span class=\"kw1\">recursive</span> <span class=\"kw1\">subroutine</span> step_up_rec<br/>    <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span> <span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> step<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>       <span class=\"kw1\">call</span> step_up_rec<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> step_up_rec<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> step_up_iter<br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span> i &lt; <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>       <span class=\"kw1\">if</span> <span class=\"br0\">(</span> step<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>       <span class=\"kw1\">else</span><br/>          i <span class=\"sy0\">=</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> step_up_iter<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> StairRobot</pre>"}, {"lang": "Go", "loc": 1, "block": "<pre class=\"go highlighted_source\"><span class=\"kw4\">func</span> step_up<span class=\"sy1\">(){</span><span class=\"kw1\">for</span> <span class=\"sy3\">!</span>step<span class=\"sy1\">(){</span>step_up<span class=\"sy1\">()}}</span></pre>"}, {"lang": "Groovy", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Stair_climbing{<br/>static void main(String[] args){<br/>}<br/>static def step_up(){<br/>    while not step(){<br/>            step_up();<br/>            }<br/>}<br/>\u00a0<br/>}<br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 7, "block": "<pre class=\"haskell highlighted_source\">stepUp <span class=\"sy0\">::</span> Robot <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>stepUp <span class=\"sy0\">=</span> untilM step stepUp<br/>\u00a0<br/>untilM <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> m <span class=\"sy0\">=&gt;</span> m <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a> <span class=\"sy0\">-&gt;</span> m <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> m <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>untilM test action <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    result <span class=\"sy0\">&lt;-</span> test<br/>    <span class=\"kw1\">if</span> result <span class=\"kw1\">then</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> action <span class=\"sy0\">&gt;&gt;</span> untilM test action</pre>"}, {"lang": "Icon and Unicon", "loc": 3, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> step_up<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> step<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>step_up<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>step_up<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 5, "block": "<pre class=\"j highlighted_source\">step         =: <span class=\"nu0\">0.6</span> &gt;\u00a0<a class=\"__cf_email__\" data-cfemail=\"3c037c0c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:<br/>attemptClimb =: [: &lt;:`&gt;:@.step 0:<br/>isNotUpOne   =: <a class=\"__cf_email__\" data-cfemail=\"93bebdd3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>+/@]<span class=\"sy0\">)</span><br/>\u00a0<br/>step_up=: <span class=\"sy0\">(</span>] , attemptClimb<span class=\"sy0\">)</span>^:isNotUpOne^:<span class=\"nu0\">_</span></pre>"}, {"lang": "Java", "loc": 3, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw4\">void</span> stepUp<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>step<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> stepUp<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">def tick: .+1;</pre>"}, {"lang": "Julia", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>step_up() = while\u00a0!step() step_up() end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 23, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.0</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rand <span class=\"sy0\">=</span> Random<span class=\"br0\">(</span>6321L<span class=\"br0\">)</span> <span class=\"co1\">// generates short repeatable sequence</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> position <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>fun step<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> rand.<span class=\"me1\">nextBoolean</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Climbed up to ${++position}\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Fell down to ${--position}\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> r<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun stepUp<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>step<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> stepUp<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    stepUp<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 21, "block": "<pre class=\"lb highlighted_source\"><span class=\"co1\">'This demo will try to get the robot to step up</span><br/><span class=\"co1\">'Run it several times to see the differences; sometimes the robot falls</span><br/><span class=\"co1\">'quite a ways before making it to the next step up, but sometimes he makes it</span><br/><span class=\"co1\">'on the first try</span><br/>\u00a0<br/>result <span class=\"sy0\">=</span> Stepp.Up<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> Stepp.Up<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">While</span> <span class=\"kw2\">Not</span><span class=\"br0\">(</span>Stepp<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        result <span class=\"sy0\">=</span> Stepp.Up<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> Stepp<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    Stepp <span class=\"sy0\">=</span> <span class=\"kw2\">Int</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">Rnd</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> Stepp <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">Print</span> <span class=\"st0\">\"Robot stepped up\"</span><br/>    <span class=\"kw1\">Else</span><br/>        <span class=\"kw1\">Print</span> <span class=\"st0\">\"Robot fell down\"</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span></pre>"}, {"lang": "Logo", "loc": 3, "block": "<pre class=\"text highlighted_source\">to step.up<br/>  if not step [step.up step.up]<br/>end</pre>"}, {"lang": "Lua", "loc": 5, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> step_up<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">not</span> step<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> step_up<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">StepUp[]\u00a0:= If[!Step[], StepUp[]; StepUp[]]</pre>"}, {"lang": "MATLAB", "loc": 4, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> step_up<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> ~step<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        step_up<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">end</span></pre>"}, {"lang": "Nim", "loc": 11, "block": "<pre class=\"text highlighted_source\">proc stepUp1 =<br/>  var deficit = 1<br/>  while deficit &gt; 0:<br/>    if step():<br/>      dec deficit<br/>    else:<br/>      inc deficit<br/>\u00a0<br/>proc stepUp2 =<br/>  while not step():<br/>    stepUp2()</pre>"}, {"lang": "OCaml", "loc": 5, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> step_up<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">while</span> <span class=\"kw1\">not</span><span class=\"br0\">(</span>step<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    step_up<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">done</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "Oz", "loc": 6, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">StepUp</span><span class=\"br0\">}</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">{</span>Not <span class=\"br0\">{</span>Step<span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"kw1\">then</span><br/>      <span class=\"br0\">{</span>StepUp<span class=\"br0\">}</span>  <span class=\"co1\">%% make up for the fall</span><br/>      <span class=\"br0\">{</span>StepUp<span class=\"br0\">}</span>  <span class=\"co1\">%% repeat original attempt</span><br/>   <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">step_up<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>step<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>step_up<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 5, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">procedure</span> stepUp<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> step <span class=\"kw1\">do</span><br/>    stepUp<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Perl", "loc": 1, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> step_up <span class=\"br0\">{</span> step_up <span class=\"kw1\">until</span> step<span class=\"sy0\">;</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> step_up <span class=\"br0\">{</span> step_up <span class=\"kw1\">until</span> step<span class=\"sy0\">;</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 3, "block": "<pre class=\"text highlighted_source\">procedure step_up()<br/>    while not step() do step_up() end while<br/>end procedure</pre>"}, {"lang": "PicoLisp", "loc": 3, "block": "<pre class=\"text highlighted_source\">(de stepUp ()<br/>   (until (step1)  # ('step1', because 'step' is a system function)<br/>      (stepUp) ) )</pre>"}, {"lang": "PowerShell", "loc": 28, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> StepUp<br/>    <span class=\"br0\">{</span><br/>    <span class=\"kw3\">If</span> <span class=\"br0\">(</span> <span class=\"kw4\">-not</span> <span class=\"br0\">(</span> Step <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>        StepUp<br/>        StepUp<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#  Step simulator for testing</span><br/><span class=\"kw3\">function</span> Step<br/>    <span class=\"br0\">{</span><br/>    <span class=\"kw3\">If</span> <span class=\"br0\">(</span> Get<span class=\"sy0\">-</span>Random <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>        <span class=\"re0\">$Success</span> <span class=\"sy0\">=</span> <span class=\"re0\">$True</span><br/>        <span class=\"kw1\">Write-Verbose</span> <span class=\"st0\">\"Up one step\"</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw3\">Else</span><br/>        <span class=\"br0\">{</span><br/>        <span class=\"re0\">$Success</span> <span class=\"sy0\">=</span> <span class=\"re0\">$False</span><br/>        <span class=\"kw1\">Write-Verbose</span> <span class=\"st0\">\"Fell one step\"</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw3\">return</span> <span class=\"re0\">$Success</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#  Test</span><br/><a href=\"about:blank\"><span class=\"kw6\">$VerbosePreference</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">'Continue'</span><br/>StepUp</pre>"}, {"lang": "PureBasic", "loc": 4, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> step_up<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i<br/>  <span class=\"kw1\">Repeat</span>: <span class=\"kw1\">If</span> _step<span class=\"br0\">(</span><span class=\"br0\">)</span>: i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>: <span class=\"kw1\">Else</span>: i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>: <span class=\"kw1\">EndIf</span>: <span class=\"kw1\">Until</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 9, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> step_up1<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Straightforward implementation: keep track of how many level we<br/>   need to ascend, and stop when this count is zero.\"</span><br/>  deficit <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">while</span> deficit <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span>:<br/>    <span class=\"kw1\">if</span> step<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>      deficit -<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">else</span>:<br/>      deficit +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span></pre>"}, {"lang": "R", "loc": 6, "block": "<pre class=\"text highlighted_source\">step &lt;- function() {<br/>    success &lt;- runif(1) &gt; p<br/>    ## Requires that the \"robot\" is a variable named \"level\"<br/>    level &lt;&lt;- level - 1 + (2 * success)<br/>    success<br/>}</pre>"}, {"lang": "Racket", "loc": 11, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(define p 0.5001)<br/>(define (step)<br/>  (&gt; p (random)))<br/>\u00a0<br/>(define (step-up n)<br/>  (cond ((zero? n) 'done)<br/>        ((step) (step-up (sub1 n)))<br/>        (else (step-up (add1 n)))))<br/>\u00a0<br/>(step-up 1)</pre>"}, {"lang": "REBOL", "loc": 39, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol [<br/>    Title: \"Stair Climber\"<br/>    URL: http://rosettacode.org/wiki/Stair_Climbing<br/>]</span><br/>\u00a0<br/><span class=\"kw3\">random</span><span class=\"sy0\">/</span>seed <span class=\"kw3\">now</span><br/>\u00a0<br/>step: <span class=\"kw2\">does</span> <span class=\"br0\">[</span><span class=\"kw3\">random</span><span class=\"sy0\">/</span>only <span class=\"kw2\">reduce</span> <span class=\"br0\">[</span>yes no<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; Iterative solution with symbol stack. No numbers, draws a nifty</span><br/><span class=\"co1\">; diagram of number of steps to go. This is intended more to</span><br/><span class=\"co1\">; demonstrate a correct solution:</span><br/>\u00a0<br/>step_up: <span class=\"kw2\">func</span> <span class=\"br0\">[</span><span class=\"sy0\">/</span>steps s<span class=\"br0\">]</span> <span class=\"br0\">[</span><br/>\t<span class=\"kw2\">either</span> <span class=\"kw3\">not</span> steps <span class=\"br0\">[</span><br/>\t\t<span class=\"kw3\">print</span> <span class=\"st0\">\"Starting up...\"</span><br/>\t\tstep_up<span class=\"sy0\">/</span>steps <span class=\"kw3\">copy</span> <span class=\"br0\">[</span><span class=\"sy0\">|</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">]</span><span class=\"br0\">[</span><br/>\t\t<span class=\"kw2\">while</span> <span class=\"br0\">[</span><span class=\"kw3\">not</span> <span class=\"kw3\">empty?</span> s<span class=\"br0\">]</span><span class=\"br0\">[</span><br/>\t\t\t<span class=\"kw3\">print</span> <span class=\"br0\">[</span><span class=\"st0\">\"    Steps left:\"</span> s<span class=\"br0\">]</span><br/>\t\t\t<span class=\"kw2\">either</span> step <span class=\"br0\">[</span><span class=\"kw3\">remove</span> s<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw3\">append</span> s '<span class=\"sy0\">|</span><span class=\"br0\">]</span><br/>\t\t<span class=\"br0\">]</span><br/>\t<span class=\"br0\">]</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/>step_up  <span class=\"kw3\">print</span> <span class=\"br0\">[</span><span class=\"st0\">\"Success!\"</span> crlf<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; Recursive solution. No numbers, no variables. \"R\" means a recover</span><br/><span class=\"co1\">; step, \"+\" means a step up.</span><br/>\u00a0<br/>step_upr: <span class=\"kw2\">does</span> <span class=\"br0\">[</span><span class=\"kw2\">if</span> <span class=\"kw3\">not</span> step <span class=\"br0\">[</span><span class=\"kw3\">prin</span> <span class=\"st0\">\"R \"</span> step_upr  <span class=\"kw3\">prin</span> <span class=\"st0\">\"+ \"</span> step_upr<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>step_upr  <span class=\"kw3\">print</span> <span class=\"br0\">[</span><span class=\"st0\">\"Success!\"</span> crlf<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; Small recursive solution, no monitoring:</span><br/>\u00a0<br/>step_upt: <span class=\"kw2\">does</span> <span class=\"br0\">[</span><span class=\"kw2\">if</span> <span class=\"kw3\">not</span> step <span class=\"br0\">[</span>step_upt step_upt<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>step_upt  <span class=\"kw3\">print</span> <span class=\"st0\">\"Success!\"</span></pre>"}, {"lang": "REXX", "loc": 3, "block": "<pre class=\"rexx highlighted_source\">step_up:           <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span> <span class=\"sy0\">\\</span>step<span class=\"br0\">(</span><span class=\"br0\">)</span>;   <span class=\"kw1\">call</span> step_up<br/>                   <span class=\"kw3\">end</span><br/>          <span class=\"kw1\">return</span></pre>"}, {"lang": "Ring", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>stepup()<br/>\u00a0<br/>func stepup<br/>     n = 0<br/>     while n &lt; 1<br/>           if stp() n=n+1 else n= n-1 ok<br/>           see n + nl<br/>     end<br/>\u00a0<br/>func stp<br/>     return 0<br/>\u00a0</pre>"}, {"lang": "Run BASIC", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>result = stepUp()<br/>\u00a0<br/>Function stepUp()<br/>    While Not(stepp())<br/>        result = stepUp()<br/>    Wend<br/>End Function<br/>\u00a0<br/>Function stepp()<br/>\tstepp = int((Rnd(1) * 2))<br/>\tprint \"Robot stepped \"+word$(\"up down\",stepp+1)<br/>End Function<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 22, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> step_up<br/>  start_position = <span class=\"re0\">$position</span><br/>  step <span class=\"kw1\">until</span> <span class=\"br0\">(</span>$position == start_position <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># assumptions about the step function:</span><br/><span class=\"co1\"># - it maintains the current position of the robot \"as a side effect\"</span><br/><span class=\"co1\"># - the robot is equally likely to step back as to step up</span><br/><span class=\"kw1\">def</span> step<br/>  <span class=\"kw1\">if</span> <span class=\"kw3\">rand</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0.5</span><br/>    <span class=\"re0\">$position</span> <span class=\"sy0\">-</span>= <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">p</span> <span class=\"st0\">\"fall (#$position)\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$DEBUG</span><br/>    <span class=\"kw2\">return</span> <span class=\"kw2\">false</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"re0\">$position</span> <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">p</span> <span class=\"st0\">\"rise (#$position)\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$DEBUG</span><br/>    <span class=\"kw2\">return</span> <span class=\"kw2\">true</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"re0\">$position</span> = <span class=\"nu0\">0</span><br/>step_up</pre>"}, {"lang": "SAS", "loc": 18, "block": "<pre class=\"sas highlighted_source\">\u00a0<br/><span class=\"kw2\">%macro</span> step<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw2\">%sysfunc</span><span class=\"br0\">(</span><span class=\"kw3\">round</span><span class=\"br0\">(</span><span class=\"kw2\">%sysfunc</span><span class=\"br0\">(</span><span class=\"kw3\">ranuni</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw2\">%mend</span> step;<br/>\u00a0<br/><span class=\"kw2\">%macro</span> step_up<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>\t<span class=\"kw2\">%if</span> <span class=\"kw4\">not</span>\u00a0%step <span class=\"kw2\">%then</span> <span class=\"kw2\">%do</span>;<br/>\t\t<span class=\"kw2\">%put</span> Step Down;<br/>\t\t%step_up;<br/>\t\t%step_up;<br/>\t\t<span class=\"kw2\">%end</span>;<br/>\t<span class=\"kw2\">%else</span> <span class=\"kw2\">%put</span> Step Up;<br/>\u00a0<br/>\t<span class=\"kw2\">%mend</span> step_up;<br/>\u00a0<br/>%step_up;<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 1, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> stepUp <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span> step<span class=\"br0\">)</span> stepUp <span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 4, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>step<span class=\"sy0\">-</span>up n<span class=\"sy0\">-</span>steps<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">zero?</span> n<span class=\"sy0\">-</span>steps<span class=\"br0\">)</span> 'done<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span>step<span class=\"br0\">)</span> <span class=\"br0\">(</span>step<span class=\"sy0\">-</span>up <span class=\"br0\">(</span><span class=\"sy0\">-</span> n<span class=\"sy0\">-</span>steps <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span>step<span class=\"sy0\">-</span>up <span class=\"br0\">(</span><span class=\"sy0\">+</span> n<span class=\"sy0\">-</span>steps <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 6, "block": "<pre class=\"text highlighted_source\">const proc: step_up is func<br/>  begin<br/>    while not doStep do<br/>      step_up;<br/>    end while;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 5, "block": "<pre class=\"ruby highlighted_source\">func step_up<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>!step<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        step_up<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Smalltalk", "loc": 2, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Smalltalk</span> at: <span class=\"re1\">#stepUp</span> put: <span class=\"re5\">0</span>.<br/><span class=\"re5\">stepUp</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span> <span class=\"re5\">step</span> value <span class=\"br0\">]</span> whileFalse: <span class=\"br0\">[</span> <span class=\"re5\">stepUp</span> value <span class=\"br0\">]</span> <span class=\"br0\">]</span>.</pre>"}, {"lang": "Standard ML", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(*<br/> * val step\u00a0: unit -&gt; bool<br/> * This is a stub for a function which returns true if successfully climb a step or false otherwise.<br/> *) <br/>fun step() = true<br/>\u00a0<br/>(*<br/> * val step_up\u00a0: unit -&gt; bool<br/> *)<br/>fun step_up() = step() orelse (step_up() andalso step_up())<br/>\u00a0</pre>"}, {"lang": "Swift", "loc": 5, "block": "<pre class=\"text highlighted_source\">func step_up() {<br/>  while\u00a0!step() {<br/>    step_up()<br/>  }<br/>}</pre>"}, {"lang": "Tcl", "loc": 13, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> level <span class=\"nu0\">41</span><br/><span class=\"kw1\">set</span> prob <span class=\"nu0\">0.5001</span><br/><span class=\"kw1\">proc</span> step <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> level prob steps<br/>    <span class=\"kw2\">incr</span> steps<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$prob</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">incr</span> level <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">incr</span> level -<span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">If rand&gt;.5:Then<br/>0\u2192C<br/>Disp \"FALL\"<br/>If A=1:Then<br/>D-1\u2192D<br/>Disp D<br/>End<br/>Else<br/>1\u2192C<br/>Disp \"CLIMB\"<br/>If A=1:Then<br/>D+1\u2192D<br/>Disp D<br/>End<br/>End<br/>If B=1<br/>Pause</pre>"}, {"lang": "XPL0", "loc": 10, "block": "<pre class=\"text highlighted_source\">proc Step_up;           \\Iterative version<br/>int I;<br/>[I:= 0;<br/>while I&lt;1 do<br/>        if Step then I:= I+1<br/>        else I:= I-1;<br/>];<br/>\u00a0<br/>proc Step_up;           \\Recursive version<br/>while not Step do Step_up;</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">fcn step{  } // add code to return Bool<br/>fcn stepUp{ while(not step()){ self.fcn() } }</pre>"}]}