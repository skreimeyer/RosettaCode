{"task": "Extend_your_language", "blocks": [{"lang": "ABAP", "loc": 5, "block": "<pre class=\"abap highlighted_source\"><a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">DATA</span></a><span class=\"br0\">(</span><span class=\"kw4\">result</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> COND #<span class=\"br0\">(</span> <a href=\"http://help.sap.com/abapdocu/en/ABAPWHEN.htm\"><span class=\"kw1\">WHEN</span></a> condition1istrue <span class=\"sy1\">=</span> abap_true <span class=\"kw4\">AND</span> condition2istrue <span class=\"sy1\">=</span> abap_true <span class=\"kw4\">THEN</span> bothconditionsaretrue<br/>                          <a href=\"http://help.sap.com/abapdocu/en/ABAPWHEN.htm\"><span class=\"kw1\">WHEN</span></a> condition1istrue <span class=\"sy1\">=</span> abap_true <span class=\"kw4\">THEN</span> firstconditionistrue<br/>                          <a href=\"http://help.sap.com/abapdocu/en/ABAPWHEN.htm\"><span class=\"kw1\">WHEN</span></a> condition2istrue <span class=\"sy1\">=</span> abap_true <span class=\"kw4\">THEN</span> secondconditionistrue<br/>                          <a href=\"http://help.sap.com/abapdocu/en/ABAPELSE.htm\"><span class=\"kw1\">ELSE</span></a> noconditionistrue <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "Ada", "loc": 20, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Test_If_2 <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Two_Bool <span class=\"kw1\">is</span> <span class=\"kw3\">range</span> <span class=\"nu0\">0</span> .. <span class=\"nu0\">3</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> If_2<span class=\"br0\">(</span>Cond_1, Cond_2: Boolean<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Two_Bool <span class=\"kw1\">is</span><br/>      <span class=\"br0\">(</span>Two_Bool<span class=\"br0\">(</span><span class=\"nu0\">2</span>*Boolean'Pos<span class=\"br0\">(</span>Cond_1<span class=\"br0\">)</span><span class=\"br0\">)</span> + Two_Bool<span class=\"br0\">(</span>Boolean'Pos<span class=\"br0\">(</span>Cond_2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> N <span class=\"kw3\">in</span> <span class=\"nu0\">10</span> .. <span class=\"nu0\">20</span> <span class=\"kw1\">loop</span><br/>      Put<span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>N<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" is \"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">case</span> If_2<span class=\"br0\">(</span>N <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span> = <span class=\"nu0\">0</span>, N <span class=\"kw2\">mod</span> <span class=\"nu0\">3</span> = <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>\t <span class=\"kw3\">when</span> <span class=\"nu0\">2</span>#<span class=\"nu0\">11</span># =&gt; Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"divisible by both two and three.\"</span><span class=\"br0\">)</span>;<br/>\t <span class=\"kw3\">when</span> <span class=\"nu0\">2</span>#<span class=\"nu0\">10</span># =&gt; Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"divisible by two, but not by three.\"</span><span class=\"br0\">)</span>;<br/>\t <span class=\"kw3\">when</span> <span class=\"nu0\">2</span>#01# =&gt; Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"divisible by three, but not by two.\"</span><span class=\"br0\">)</span>;<br/>\t <span class=\"kw3\">when</span> <span class=\"nu0\">2</span>#00# =&gt; Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"neither divisible by two, nor by three.\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">case</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Test_If_2;</pre>"}, {"lang": "Agda", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>data Bool\u00a0: Set where<br/>  true\u00a0: Bool<br/>  false\u00a0: Bool<br/>\u00a0<br/>if_then_else\u00a0: \u2200 {l} {A\u00a0: Set l} -&gt; Bool -&gt; A -&gt; A -&gt; A<br/>if true then t else e = t<br/>if false then t else e = e<br/>\u00a0<br/>if2_,_then_else1_else2_else_\u00a0: \u2200 {l} {A\u00a0: Set l} -&gt; (b1 b2\u00a0: Bool) -&gt; (t e1 e2 e\u00a0: A) -&gt; A<br/>if2 true , true then t else1 e1 else2 e2 else e = t<br/>if2 true , false then t else1 e1 else2 e2 else e = e1<br/>if2 false , true then t else1 e1 else2 e2 else e = e2<br/>if2 false , false then t else1 e1 else2 e2 else e = e<br/>\u00a0<br/>example\u00a0: Bool<br/>example = if2 true , false then true else1 false else2 true else false<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 13, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># operator to turn two boolean values into an integer - name inspired by the COBOL sample #</span><br/><span class=\"kw4\">PRIO</span> ALSO <span class=\"sy1\">=</span> 1<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   ALSO <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">BOOL</span> a<span class=\"sy1\">,</span> b <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"kw2\">IF</span> a <span class=\"kw16\">AND</span> b <span class=\"kw2\">THEN</span> 1 <span class=\"kw2\">ELIF</span> a <span class=\"kw2\">THEN</span> 2 <span class=\"kw2\">ELIF</span> b <span class=\"kw2\">THEN</span> 3 <span class=\"kw2\">ELSE</span> 4 <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># using the above operator, we can use the standard CASE construct to provide the #</span><br/><span class=\"coMULTI\"># required construct, e.g.:                                                       #</span><br/><span class=\"kw3\">BOOL</span> a <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> b <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">CASE</span> a ALSO b<br/>  <span class=\"kw2\">IN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"both:    a and b are TRUE\"</span><span class=\"sy1\">,</span>  <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>   <span class=\"sy1\">,</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"first:   only a is TRUE\"</span><span class=\"sy1\">,</span>    <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>   <span class=\"sy1\">,</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"second:  only b is TRUE\"</span><span class=\"sy1\">,</span>    <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>   <span class=\"sy1\">,</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"neither: a and b are FALSE\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">ESAC</span></pre>"}, {"lang": "C", "loc": 17, "block": "<pre class=\"c highlighted_source\"><span class=\"coMULTI\">/* Four-way branch.<br/> *<br/> * if2 (firsttest, secondtest<br/> *\t\t\t, bothtrue<br/> *\t\t\t, firstrue<br/> *\t\t\t, secondtrue<br/> *\t\t\t, bothfalse<br/> *\t)<br/> */</span><br/><span class=\"co2\">#define if2(firsttest,secondtest,bothtrue,firsttrue,secondtrue,bothfalse)\\<br/>\tswitch(((firsttest)?0:2)+((secondtest)?0:1)) {\\<br/>\t\tcase 0: bothtrue; break;\\<br/>\t\tcase 1: firsttrue; break;\\<br/>\t\tcase 2: secondtrue; break;\\<br/>\t\tcase 3: bothfalse; break;\\<br/>\t}</span><br/>\u00a0</pre>"}, {"lang": "Clay", "loc": 16, "block": "<pre class=\"text highlighted_source\">alias if2(cond1:Bool,<br/>          cond2:Bool,<br/>          both,<br/>          first,<br/>          second,<br/>          neither)<br/>{<br/>  var res1 = cond1;<br/>  var res2 = cond2;<br/>\u00a0<br/>  if (res1 and res2) return both;<br/>  if (res1) return first;<br/>  if (res2) return second;<br/>  return neither;<br/>}<br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 7, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> if2 <span class=\"br0\">[</span><span class=\"br0\">[</span>cond1 cond2<span class=\"br0\">]</span> bothTrue firstTrue secondTrue else<span class=\"br0\">]</span><br/>  `<span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>cond1# ~cond1<br/>         cond2# ~cond2<span class=\"br0\">]</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">if</span> cond1# <span class=\"br0\">(</span><span class=\"kw1\">if</span> cond2# ~bothTrue   ~firstTrue<span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">if</span> cond2# ~secondTrue ~else<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "COBOL", "loc": 12, "block": "<pre class=\"cobol highlighted_source\">\u00a0<br/><span class=\"kw2\">EVALUATE</span> EXPRESSION-<span class=\"nu0\">1</span> <span class=\"kw3\">ALSO</span> EXPRESSION-<span class=\"nu0\">2</span><br/>   <span class=\"kw3\">WHEN</span> <span class=\"kw3\">TRUE</span> <span class=\"kw3\">ALSO</span> <span class=\"kw3\">TRUE</span><br/>      <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">'Both are true.'</span><br/>   <span class=\"kw3\">WHEN</span> <span class=\"kw3\">TRUE</span> <span class=\"kw3\">ALSO</span> <span class=\"kw3\">FALSE</span><br/>      <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">'Expression 1 is true.'</span><br/>   <span class=\"kw3\">WHEN</span> <span class=\"kw3\">FALSE</span> <span class=\"kw3\">ALSO</span> <span class=\"kw3\">TRUE</span><br/>      <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">'Expression 2 is true.'</span><br/>   <span class=\"kw3\">WHEN</span> <span class=\"kw3\">OTHER</span><br/>      <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">'Neither is true.'</span><br/>END-<span class=\"kw2\">EVALUATE</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 9, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> if2 <span class=\"br0\">(</span>cond1 cond2 both first second <span class=\"sy0\">&amp;</span>rest neither<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>res1 <span class=\"br0\">(</span><span class=\"kw1\">gensym</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>res2 <span class=\"br0\">(</span><span class=\"kw1\">gensym</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    `<span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">,</span>res1 <span class=\"sy0\">,</span>cond1<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"sy0\">,</span>res2 <span class=\"sy0\">,</span>cond2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"sy0\">,</span>res1 <span class=\"sy0\">,</span>res2<span class=\"br0\">)</span> <span class=\"sy0\">,</span>both<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"sy0\">,</span>res1             <span class=\"sy0\">,</span>first<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"sy0\">,</span>res2             <span class=\"sy0\">,</span>second<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>t                 <span class=\"sy0\">,</span>@neither<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "C#", "loc": 130, "block": "<pre class=\"c highlighted_source\">\u00a0<br/>\u00a0<br/>using System<span class=\"sy0\">;</span><br/>using System.<span class=\"me1\">Reflection</span><span class=\"sy0\">;</span><br/>\u00a0<br/>namespace Extend_your_language<br/><span class=\"br0\">{</span><br/>\u00a0<br/>\u00a0<br/>\tclass Program<br/>\t<span class=\"br0\">{</span><br/>\u00a0<br/>\t\tpublic <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span>string<span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello World!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>x<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>x<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span>x<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>y<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>y<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span>y<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">{</span><br/>\u00a0<br/>\t\t\t\t\tCONDITIONS<span class=\"br0\">(</span> <span class=\"br0\">(</span>x<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">,</span> <span class=\"br0\">(</span>y<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>.<br/>\t\t\t\t\t\t<span class=\"me1\">IF2</span>  <span class=\"br0\">(</span><span class=\"st0\">\"METHOD1\"</span><span class=\"br0\">)</span>.<br/>\t\t\t\t\t\t<span class=\"me1\">ELSE1</span><span class=\"br0\">(</span><span class=\"st0\">\"METHOD2\"</span><span class=\"br0\">)</span>.<br/>\t\t\t\t\t\t<span class=\"me1\">ELSE2</span><span class=\"br0\">(</span><span class=\"st0\">\"METHOD3\"</span><span class=\"br0\">)</span>.<br/>\t\t\t\t\t\t<span class=\"me1\">ELSE</span> <span class=\"br0\">(</span><span class=\"st0\">\"METHOD4\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"Press any key to continue . . . \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole.<span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>\t\tpublic <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> METHOD1<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"METHOD 1 executed - both are true\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tpublic <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> METHOD2<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"METHOD 2 executed - first is true\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tpublic <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> METHOD3<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"METHOD 3 executed - second is true\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tpublic <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> METHOD4<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tConsole.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"METHOD 4 executed - both are false\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>\t\t<span class=\"kw4\">static</span> <span class=\"kw4\">int</span> CONDITIONS<span class=\"br0\">(</span>bool condition1<span class=\"sy0\">,</span> bool condition2<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>condition1 <span class=\"sy0\">&amp;&amp;</span> condition2<span class=\"br0\">)</span><br/>\t\t\t\tc <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>condition1<span class=\"br0\">)</span><br/>\t\t\t\tc <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>condition2<span class=\"br0\">)</span><br/>\t\t\t\tc <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\tc <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">return</span> c<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>\tpublic <span class=\"kw4\">static</span> class ExtensionMethods<br/>\t<span class=\"br0\">{</span><br/>\u00a0<br/>\t\tpublic <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> IF2<span class=\"br0\">(</span>this <span class=\"kw4\">int</span> value<span class=\"sy0\">,</span> string method<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>value <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\tMethodInfo m <span class=\"sy0\">=</span> typeof<span class=\"br0\">(</span>Program<span class=\"br0\">)</span>.<span class=\"me1\">GetMethod</span><span class=\"br0\">(</span>method<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tm.<span class=\"me1\">Invoke</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"sy0\">,</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">return</span> value<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tpublic <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> ELSE1<span class=\"br0\">(</span>this <span class=\"kw4\">int</span> value<span class=\"sy0\">,</span> string method<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>value <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\tMethodInfo m <span class=\"sy0\">=</span> typeof<span class=\"br0\">(</span>Program<span class=\"br0\">)</span>.<span class=\"me1\">GetMethod</span><span class=\"br0\">(</span>method<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tm.<span class=\"me1\">Invoke</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"sy0\">,</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">return</span> value<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tpublic <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> ELSE2<span class=\"br0\">(</span>this <span class=\"kw4\">int</span> value<span class=\"sy0\">,</span> string method<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>value <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\tMethodInfo m <span class=\"sy0\">=</span> typeof<span class=\"br0\">(</span>Program<span class=\"br0\">)</span>.<span class=\"me1\">GetMethod</span><span class=\"br0\">(</span>method<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tm.<span class=\"me1\">Invoke</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"sy0\">,</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">return</span> value<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tpublic <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> ELSE<span class=\"br0\">(</span>this <span class=\"kw4\">int</span> value<span class=\"sy0\">,</span> string method<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>value <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\tMethodInfo m <span class=\"sy0\">=</span> typeof<span class=\"br0\">(</span>Program<span class=\"br0\">)</span>.<span class=\"me1\">GetMethod</span><span class=\"br0\">(</span>method<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tm.<span class=\"me1\">Invoke</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"sy0\">,</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "D", "loc": 32, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> if2<span class=\"br0\">(</span>T1<span class=\"sy0\">,</span> T2<span class=\"sy0\">,</span> T3<span class=\"sy0\">,</span> T4<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">bool</span> c1<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">bool</span> c2<span class=\"sy0\">,</span><br/>                         <span class=\"kw2\">lazy</span> T1 first<span class=\"sy0\">,</span><br/>                         <span class=\"kw2\">lazy</span> T2 both<span class=\"sy0\">,</span><br/>                         <span class=\"kw2\">lazy</span> T3 second<span class=\"sy0\">,</span><br/>                         <span class=\"kw2\">lazy</span> T4 none<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c2<span class=\"br0\">)</span><br/>            both<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            first<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c2<span class=\"br0\">)</span><br/>            second<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span><br/>            none<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> test<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">bool</span> a<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">bool</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>    if2<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> writeln<span class=\"br0\">(</span><span class=\"st0\">\"first\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>              writeln<span class=\"br0\">(</span><span class=\"st0\">\"both\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>              writeln<span class=\"br0\">(</span><span class=\"st0\">\"second\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>              writeln<span class=\"br0\">(</span><span class=\"st0\">\"none\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    test<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    test<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    test<span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    test<span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 16, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/><span class=\"kw1\">procedure</span> Check<span class=\"br0\">(</span>Condition1<span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span> Condition2<span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"br0\">)</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">if</span> Condition1 <span class=\"sy3\">=</span> <span class=\"kw2\">True</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">if</span> Condition2 <span class=\"sy3\">=</span> <span class=\"kw2\">True</span> <span class=\"kw1\">then</span><br/>      BothConditionsAreTrue<br/>    <span class=\"kw1\">else</span><br/>      FirstConditionIsTrue<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">if</span> Condition2 <span class=\"sy3\">=</span> <span class=\"kw2\">True</span> <span class=\"kw1\">then</span><br/>      SecondConditionIsTrue<br/>    <span class=\"kw1\">else</span><br/>      NoConditionIsTrue<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "DUP", "loc": 5, "block": "<pre class=\"text highlighted_source\">{two-conditional if operator implementation}<br/>{    [    top cond. = true         ][      top cond. = false      ]}<br/>{     [ 2nd = true ][2nd = false ]   [ 2nd = true ][ 2nd = false]  }<br/>[(((([[)))!)))%%%%%][)))))!)%%%%%]?][[))))!))%%%%%][))))))!%%%%%]?]?]\u21d2\u00bf<br/>\u00a0</pre>"}, {"lang": "E", "loc": 44, "block": "<pre class=\"e highlighted_source\">pragma.<span class=\"me1\">enable</span><span class=\"br0\">(</span><span class=\"st0\">\"lambda-args\"</span><span class=\"br0\">)</span> <span class=\"co1\"># The feature is still experimental syntax</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeIf2Control<span class=\"br0\">(</span>evalFn<span class=\"sy0\">,</span> tf<span class=\"sy0\">,</span> ft<span class=\"sy0\">,</span> ff<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  return <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> if2Control <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> only1__control_0<span class=\"br0\">(</span>tf<span class=\"br0\">)</span> <span class=\"br0\">{</span> return makeIf2Control<span class=\"br0\">(</span>evalFn<span class=\"sy0\">,</span> tf<span class=\"sy0\">,</span> ft<span class=\"sy0\">,</span> ff<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> only2__control_0<span class=\"br0\">(</span>ft<span class=\"br0\">)</span> <span class=\"br0\">{</span> return makeIf2Control<span class=\"br0\">(</span>evalFn<span class=\"sy0\">,</span> tf<span class=\"sy0\">,</span> ft<span class=\"sy0\">,</span> ff<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> else__control_0 <span class=\"br0\">(</span>ff<span class=\"br0\">)</span> <span class=\"br0\">{</span> return makeIf2Control<span class=\"br0\">(</span>evalFn<span class=\"sy0\">,</span> tf<span class=\"sy0\">,</span> ft<span class=\"sy0\">,</span> ff<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> run__control<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> <span class=\"br0\">[</span><span class=\"br0\">[</span>a <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/boolean\"><span class=\"kw6\">boolean</span></a><span class=\"sy0\">,</span> b <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/boolean\"><span class=\"kw6\">boolean</span></a><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"co1\"># Main parameters evaluated</span><br/>           tt                        <span class=\"co1\"># First block (\"then\" case)</span><br/>          <span class=\"br0\">]</span> <span class=\"sy0\">:=</span> evalFn<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      return <span class=\"br0\">(</span><br/>        <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"br0\">{</span>tt<span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/else\"><span class=\"kw2\">else</span></a> <span class=\"br0\">{</span>tf<span class=\"br0\">}</span> <span class=\"br0\">}</span> \\<br/>          <a href=\"http://wiki.erights.org/wiki/else\"><span class=\"kw2\">else</span></a> <span class=\"br0\">{</span> <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"br0\">{</span>ft<span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/else\"><span class=\"kw2\">else</span></a> <span class=\"br0\">{</span>ff<span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>      <span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> if2 <span class=\"br0\">{</span><br/>    <span class=\"co1\"># The verb here is composed from the keyword before the brace, the number of</span><br/>    <span class=\"co1\"># parameters in the parentheses, and the number of parameters after the</span><br/>    <span class=\"co1\"># keyword.</span><br/>    <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> then__control_2_0<span class=\"br0\">(</span>evalFn<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\"># evalFn, when called, evaluates the expressions in parentheses, then</span><br/>        <span class=\"co1\"># returns a pair of those expressions and the first { block } as a</span><br/>        <span class=\"co1\"># closure.</span><br/>        return makeIf2Control<span class=\"br0\">(</span>evalFn<span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> a <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"br0\">[</span><a href=\"http://wiki.erights.org/wiki/false\"><span class=\"kw6\">false</span></a><span class=\"sy0\">,</span><a href=\"http://wiki.erights.org/wiki/true\"><span class=\"kw6\">true</span></a><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> b <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"br0\">[</span><a href=\"http://wiki.erights.org/wiki/false\"><span class=\"kw6\">false</span></a><span class=\"sy0\">,</span><a href=\"http://wiki.erights.org/wiki/true\"><span class=\"kw6\">true</span></a><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        if2 <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> then <span class=\"br0\">{</span><br/>            <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">\"both\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span> only1 <span class=\"br0\">{</span><br/>            <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">\"a true\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span> only2 <span class=\"br0\">{</span><br/>            <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">\"b true\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/else\"><span class=\"kw2\">else</span></a> <span class=\"br0\">{</span><br/>            <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">\"neither\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 26, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>syntax<span class=\"sy0\">-</span>rule <br/>\t<span class=\"br0\">(</span>if2 cond1 cond2 both cond1<span class=\"sy0\">-</span>only cond2<span class=\"sy0\">-</span>only none<span class=\"br0\">)</span> <span class=\"co1\">;; new syntax</span><br/><span class=\"co1\">;; will expand to\u00a0:</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> cond1 <br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> cond2 both cond1<span class=\"sy0\">-</span>only<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> cond2 cond2<span class=\"sy0\">-</span>only none<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   \u2192 #syntax:if2<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>num<span class=\"sy0\">-</span>test n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>if2 <span class=\"br0\">(</span><span class=\"kw1\">positive?</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">exact?</span> n<span class=\"br0\">)</span><br/>\t  <span class=\"st0\">\"positive and exact\"</span><br/>\t  <span class=\"st0\">\"positive and inexact\"</span><br/>\t  <span class=\"st0\">\"negative and exact\"</span><br/>\t  <span class=\"st0\">\"negative and inexact\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>num<span class=\"sy0\">-</span>test <span class=\"nu0\">3</span><span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>   \u2192 <span class=\"st0\">\"positive and exact\"</span><br/><span class=\"br0\">(</span>num<span class=\"sy0\">-</span>test <span class=\"sy0\">-</span><span class=\"nu0\">666</span><span class=\"br0\">)</span><br/>   \u2192 <span class=\"st0\">\"negative and exact\"</span><br/><span class=\"br0\">(</span>num<span class=\"sy0\">-</span>test <span class=\"sy0\">-</span><span class=\"nu0\">666.42</span><span class=\"br0\">)</span><br/>   \u2192 <span class=\"st0\">\"negative and inexact\"</span><br/><span class=\"br0\">(</span>num<span class=\"sy0\">-</span>test PI<span class=\"br0\">)</span><br/>   \u2192 <span class=\"st0\">\"positive and inexact\"</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 4, "block": "<pre class=\"text highlighted_source\">( scratchpad )\u00a0: 2ifte ( ..a\u00a0?0\u00a0?1 quot0: ( ..a -- ..b ) quot1: ( ..a -- ..b ) quot2: ( ..a -- ..b ) quot3: ( ..a -- ..b ) -- ..b )<br/>[ [ if ] curry curry ] <a class=\"__cf_email__\" data-cfemail=\"1d2f7f745d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> if\u00a0; inline<br/>( scratchpad ) 3 [ 0 &gt; ] [ even? ] bi [ 0 ] [ 1 ] [ 2 ] [ 3 ] 2ifte .<br/>2</pre>"}, {"lang": "Forth", "loc": 15, "block": "<pre class=\"text highlighted_source\">\\ in this construct, either of the ELSE clauses may be omitted, just like IF-THEN.<br/>\u00a0<br/>: BOTH    postpone IF   postpone IF\u00a0; immediate<br/>: ORELSE  postpone THEN postpone ELSE postpone IF\u00a0; immediate<br/>: NEITHER postpone THEN postpone THEN\u00a0; immediate<br/>\u00a0<br/>: fb ( n -- )<br/>  dup 5 mod 0=  over 3 mod 0=<br/>  BOTH   .\" FizzBuzz \"<br/>  ELSE   .\" Fizz \"<br/>  ORELSE .\" Buzz \"<br/>  ELSE   dup .<br/>  NEITHER drop\u00a0;<br/>: fizzbuzz ( n -- ) 0 do i 1+ fb loop\u00a0;<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 51, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw3\">LOGICAL</span> A,B\t\t<span class=\"co1\">!These are allocated the same storage</span><br/>      <span class=\"kw3\">INTEGER</span> IA,IB\t\t<span class=\"co1\">!As the default integer size.</span><br/>      <span class=\"kw3\">EQUIVALENCE</span> <span class=\"br0\">(</span>IA,A<span class=\"br0\">)</span>,<span class=\"br0\">(</span>IB,B<span class=\"br0\">)</span>\t<span class=\"co1\">!So, this will cause no overlaps.</span><br/>\u00a0<br/>      WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Boolean tests via integers...\"</span><br/>      <span class=\"kw1\">DO</span> <span class=\"nu0\">199</span> IA <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>\t<span class=\"co1\">!Two states for A.</span><br/>        <span class=\"kw1\">DO</span> <span class=\"nu0\">199</span> IB <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Two states for B.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>IA<span class=\"br0\">)</span> <span class=\"nu0\">666</span>,<span class=\"nu0\">99</span>,<span class=\"nu0\">109</span>\t\t<span class=\"co1\">!Not four ways, just three.</span><br/>   <span class=\"nu0\">99</span>     <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>IB<span class=\"br0\">)</span> <span class=\"nu0\">666</span>,<span class=\"nu0\">100</span>,<span class=\"nu0\">101</span>\t\t<span class=\"co1\">!Negative values are surely wrong.</span><br/>  <span class=\"nu0\">100</span>     WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"FF\"</span>,IA,IB<br/>          <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">199</span><br/>  <span class=\"nu0\">101</span>     WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"FT\"</span>,IA,IB<br/>          <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">199</span><br/>  <span class=\"nu0\">109</span>     <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>IB<span class=\"br0\">)</span> <span class=\"nu0\">666</span>,<span class=\"nu0\">110</span>,<span class=\"nu0\">111</span>\t\t<span class=\"co1\">!A second test.</span><br/>  <span class=\"nu0\">110</span>     WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"TF\"</span>,IA,IB<br/>          <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">199</span><br/>  <span class=\"nu0\">111</span>     WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"TT\"</span>,IA,IB<br/>  <span class=\"nu0\">199</span> <span class=\"kw1\">CONTINUE</span>\t\t<span class=\"co1\">!Both loops finish here.</span><br/>\u00a0<br/>      WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Boolean tests via integers and computed GO TO...\"</span><br/>      <span class=\"kw1\">DO</span> <span class=\"nu0\">299</span> IA <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>\t<span class=\"co1\">!Two states for A.</span><br/>        <span class=\"kw1\">DO</span> <span class=\"nu0\">299</span> IB <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Two states for B.</span><br/>          <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"br0\">(</span><span class=\"nu0\">200</span>,<span class=\"nu0\">201</span>,<span class=\"nu0\">210</span>,<span class=\"nu0\">211</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> IA<span class=\"sy0\">*</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> IB\t<span class=\"co1\">!Counting starts with one.</span><br/>  <span class=\"nu0\">200</span>     WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"FF\"</span>,IA,IB<br/>          <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">299</span><br/>  <span class=\"nu0\">201</span>     WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"FT\"</span>,IA,IB<br/>          <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">299</span><br/>  <span class=\"nu0\">210</span>     WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"TF\"</span>,IA,IB<br/>          <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">299</span><br/>  <span class=\"nu0\">211</span>     WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"TT\"</span>,IA,IB<br/>  <span class=\"nu0\">299</span> <span class=\"kw1\">CONTINUE</span>\t\t<span class=\"co1\">!Both loops finish here.</span><br/>\u00a0<br/>  <span class=\"nu0\">300</span> WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">301</span><span class=\"br0\">)</span><br/>  <span class=\"nu0\">301</span> FORMAT <span class=\"br0\">(</span><span class=\"sy0\">/</span>,<span class=\"st0\">\"Boolean tests via LOGICAL variables...\"</span>,<span class=\"sy0\">/</span><br/>     <span class=\"nu0\">1</span> <span class=\"st0\">\" AB    IA    IB (IA*2 + IB)\"</span><span class=\"br0\">)</span><br/>      A <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span>\t<span class=\"co1\">!Syncopation.</span><br/>      B <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span>\t<span class=\"co1\">!Via the .NOT., the first pair will be FF.</span><br/>      <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>\t<span class=\"co1\">!Step through two states.</span><br/>        A <span class=\"sy0\">=</span> .<span class=\"kw4\">NOT</span>.<span class=\"me1\">A</span>\t\t<span class=\"co1\">!Thus generate F then T.</span><br/>        <span class=\"kw1\">DO</span> J <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>\t\t<span class=\"co1\">!Step through the second two states.</span><br/>          B <span class=\"sy0\">=</span> .<span class=\"kw4\">NOT</span>.<span class=\"me1\">B</span>\t\t\t<span class=\"co1\">!Thus generate FF, FT, TF, TT.</span><br/>          WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">302</span><span class=\"br0\">)</span> A,B,IA,IB,IA<span class=\"sy0\">*</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> IB\t<span class=\"co1\">!But with strange values.</span><br/>  <span class=\"nu0\">302</span>     FORMAT <span class=\"br0\">(</span>1X,2L1,2I6,I8<span class=\"br0\">)</span>\t\t<span class=\"co1\">!Show both types.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t\t<span class=\"co1\">!Next value for B.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t<span class=\"co1\">!Next value for A.</span><br/>      <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">999</span><br/>\u00a0<br/>  <span class=\"nu0\">666</span> WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Huh?\"</span><br/>\u00a0<br/>  <span class=\"nu0\">999</span> <span class=\"kw1\">CONTINUE</span><br/>      <span class=\"kw1\">END</span></pre>"}, {"lang": "FreeBASIC", "loc": 32, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co2\">#Macro If2(condition1, condition2)</span><br/><span class=\"co2\">#Define Else1 ElseIf CBool(condition1) Then</span><br/><span class=\"co2\">#Define Else2 ElseIf CBool(condition2) Then</span><br/><span class=\"kw1\">If</span> CBool<span class=\"br0\">(</span>condition1<span class=\"br0\">)</span> AndAlso CBool<span class=\"br0\">(</span>condition2<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/><span class=\"co2\">#Endmacro</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> test<span class=\"br0\">(</span>a <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, b <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><br/>  If2<span class=\"br0\">(</span>a &gt; <span class=\"nu0\">0</span>, b &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"both positive\"</span><br/>  Else1<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"first positive\"</span><br/>  Else2<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"second positive\"</span><br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"neither positive\"</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> a, b<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"a = 1, b = 1 =&gt; \"</span>; <br/>test<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"a = 1, b = 0 =&gt; \"</span>; <br/>test<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"a = 0, b = 1 =&gt; \"</span>; <br/>test<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"a = 0, b = 0 =&gt; \"</span>; <br/>test<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 58, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">type</span> F <span class=\"kw4\">func</span><span class=\"sy1\">()</span><br/>\u00a0<br/><span class=\"kw1\">type</span> If2 <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span>cond1<span class=\"sy1\">,</span> cond2 <span class=\"kw4\">bool</span><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span><span class=\"nu2\">i</span> If2<span class=\"sy1\">)</span> else1<span class=\"sy1\">(</span>f F<span class=\"sy1\">)</span> If2 <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"nu2\">i</span><span class=\"sy3\">.</span>cond1 &amp;&amp; <span class=\"sy3\">!</span><span class=\"nu2\">i</span><span class=\"sy3\">.</span>cond2 <span class=\"sy1\">{</span><br/>        f<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu2\">i</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span><span class=\"nu2\">i</span> If2<span class=\"sy1\">)</span> else2<span class=\"sy1\">(</span>f F<span class=\"sy1\">)</span> If2 <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"nu2\">i</span><span class=\"sy3\">.</span>cond2 &amp;&amp; <span class=\"sy3\">!</span><span class=\"nu2\">i</span><span class=\"sy3\">.</span>cond1 <span class=\"sy1\">{</span><br/>        f<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu2\">i</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span><span class=\"nu2\">i</span> If2<span class=\"sy1\">)</span> else0<span class=\"sy1\">(</span>f F<span class=\"sy1\">)</span> If2 <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy3\">!</span><span class=\"nu2\">i</span><span class=\"sy3\">.</span>cond1 &amp;&amp; <span class=\"sy3\">!</span><span class=\"nu2\">i</span><span class=\"sy3\">.</span>cond2 <span class=\"sy1\">{</span><br/>        f<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu2\">i</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> if2<span class=\"sy1\">(</span>cond1<span class=\"sy1\">,</span> cond2 <span class=\"kw4\">bool</span><span class=\"sy1\">,</span> f F<span class=\"sy1\">)</span> If2 <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> cond1 &amp;&amp; cond2 <span class=\"sy1\">{</span><br/>        f<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> If2<span class=\"sy1\">{</span>cond1<span class=\"sy1\">,</span> cond2<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    a<span class=\"sy1\">,</span> b <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><br/>    if2 <span class=\"sy1\">(</span>a <span class=\"sy3\">==</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> b <span class=\"sy3\">==</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"a = 1 and b = 3\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">})</span><span class=\"sy3\">.</span>else1 <span class=\"sy1\">(</span><span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"a = 1 and b &lt;&gt; 3\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">})</span><span class=\"sy3\">.</span>else2 <span class=\"sy1\">(</span><span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"a &lt;&gt; 1 and b = 3\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">})</span><span class=\"sy3\">.</span>else0 <span class=\"sy1\">(</span><span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"a &lt;&gt; 1 and b &lt;&gt; 3\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">})</span><br/>\u00a0<br/>    <span class=\"co1\">// It's also possible to omit any (or all) of the 'else' clauses or to call them out of order</span><br/>    a<span class=\"sy1\">,</span> b <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>    if2 <span class=\"sy1\">(</span>a <span class=\"sy3\">==</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> b <span class=\"sy3\">==</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"a = 1 and b = 3\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">})</span><span class=\"sy3\">.</span>else0 <span class=\"sy1\">(</span><span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"a &lt;&gt; 1 and b &lt;&gt; 3\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">})</span><span class=\"sy3\">.</span>else1 <span class=\"sy1\">(</span><span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"a = 1 and b &lt;&gt; 3\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">})</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 8, "block": "<pre class=\"haskell highlighted_source\">if2 <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> a<br/>if2 p1 p2 e12 e1 e2 e <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> p1 <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">if</span> p2 <span class=\"kw1\">then</span> e12 <span class=\"kw1\">else</span> e1<br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> p2 <span class=\"kw1\">then</span> e2 <span class=\"kw1\">else</span> e<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> if2 True False <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:error\"><span class=\"kw3\">error</span></a> <span class=\"st0\">\"TT\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"TF\"</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:error\"><span class=\"kw3\">error</span></a> <span class=\"st0\">\"FT\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:error\"><span class=\"kw3\">error</span></a> <span class=\"st0\">\"FF\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 20, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    if2 <span class=\"br0\">{</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> A<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> A<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>   <span class=\"co1\"># Use PDCO with all three else clauses</span><br/>          <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"1: both true\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"1: only first true\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"1: only second true\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"1: neither true\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    if2 <span class=\"br0\">{</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> A<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> A<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>    <span class=\"co1\"># Use same PDCO with only one else clause</span><br/>          <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"2: both true\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>          <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"2: only first true\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> if2<span class=\"br0\">(</span>A<span class=\"br0\">)</span>\t\t<span class=\"co1\"># The double-conditional PDCO</span><br/>    <span class=\"kw1\">suspend</span> <span class=\"kw1\">if</span> <span class=\"sy0\">@</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span> <br/>        <span class=\"kw1\">if</span> <span class=\"sy0\">@</span>A<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"sy0\">|@</span>A<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>    <span class=\"co1\"># Run-err if missing 'then' clause</span><br/>        <span class=\"kw1\">else</span> <span class=\"sy0\">@\\</span>A<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>\t        <span class=\"co1\"># (all else clauses are optional)</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"sy0\">@</span>A<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"sy0\">|@\\</span>A<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">else</span> <span class=\"sy0\">|@\\</span>A<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Idris", "loc": 5, "block": "<pre class=\"text highlighted_source\">if2\u00a0: Bool -&gt; Bool -&gt; Lazy a -&gt; Lazy a -&gt; Lazy a -&gt; Lazy a -&gt; a<br/>if2 True True  v _ _ _ = v<br/>if2 True False _ v _ _ = v<br/>if2 False True _ _ v _ = v<br/>if2 _     _    _ _ _ v = v</pre>"}, {"lang": "Inform 7", "loc": 4, "block": "<pre class=\"text highlighted_source\">To if2 (c1 - condition) and-or (c2 - condition) begin -- end: (- switch (({c1})*2 + ({c2})) { 3: do -).<br/>To else1 -- in if2: (- } until (1); 2: do { -).<br/>To else2 -- in if2: (- } until (1); 1: do { -).<br/>To else0 -- in if2: (- } until (1); 0: -).</pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">if2=: <span class=\"nu0\">2</span>\u00a0:<span class=\"nu0\">0</span><br/>  <span class=\"st_h\">'`b1 b2'</span>=. <span class=\"kw2\">n</span><br/>  <span class=\"kw2\">m</span>@.<span class=\"sy0\">(</span>b1 + <span class=\"nu0\">2</span> * b2<span class=\"sy0\">)</span> f.<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Kotlin", "loc": 53, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>data <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> IfBoth<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cond1<span class=\"sy0\">:</span> Boolean, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cond2<span class=\"sy0\">:</span> Boolean<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    fun elseFirst<span class=\"br0\">(</span>func<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Unit<span class=\"br0\">)</span><span class=\"sy0\">:</span> IfBoth <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>cond1 <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>cond2<span class=\"br0\">)</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun elseSecond<span class=\"br0\">(</span>func<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Unit<span class=\"br0\">)</span><span class=\"sy0\">:</span> IfBoth <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>cond2 <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>cond1<span class=\"br0\">)</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    fun elseNeither<span class=\"br0\">(</span>func<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Unit<span class=\"br0\">)</span><span class=\"sy0\">:</span> IfBoth <span class=\"br0\">{</span>  <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>cond1 <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>cond2<span class=\"br0\">)</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>  <span class=\"co1\">// in case it's called out of order</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun ifBoth<span class=\"br0\">(</span>cond1<span class=\"sy0\">:</span> Boolean, cond2<span class=\"sy0\">:</span> Boolean, func<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Unit<span class=\"br0\">)</span><span class=\"sy0\">:</span> IfBoth <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>cond1 <span class=\"sy0\">&amp;&amp;</span> cond2<span class=\"br0\">)</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> IfBoth<span class=\"br0\">(</span>cond1, cond2<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> a <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> b <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    ifBoth <span class=\"br0\">(</span>a <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>, b <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"a = 1 and b = 3\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    .<span class=\"me1\">elseFirst</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"a = 1 and b &lt;&gt; 3\"</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">}</span><br/>    .<span class=\"me1\">elseSecond</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"a &lt;&gt; 1 and b = 3\"</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">}</span><br/>    .<span class=\"me1\">elseNeither</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"a &lt;&gt; 1 and b &lt;&gt; 3\"</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// It's also possible to omit any (or all) of the 'else' clauses or to call them out of order</span><br/>    a <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    b <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    ifBoth <span class=\"br0\">(</span>a <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>, b <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"a = 1 and b = 3\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    .<span class=\"me1\">elseNeither</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"a &lt;&gt; 1 and b &lt;&gt; 3\"</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">}</span><br/>    .<span class=\"me1\">elseFirst</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"a = 1 and b &lt;&gt; 3\"</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 23, "block": "<pre class=\"text highlighted_source\">// Create a type to handle the captures<br/>\u00a0<br/>define if2 =&gt; type {<br/>    data private a, private b<br/>    public oncreate(a,b) =&gt; {<br/>        .a = #a<br/>        .b = #b<br/>        thread_var_push(.type,self)<br/>        handle =&gt; { thread_var_pop(.type)}<br/>        return givenblock()<br/>    }<br/>    public ifboth =&gt; .a &amp;&amp; .b\u00a0? givenblock()<br/>    public else1  =&gt; .a &amp;&amp;\u00a0!.b\u00a0? givenblock()<br/>    public else2  =&gt;\u00a0!.a &amp;&amp; .b\u00a0? givenblock()<br/>    public else =&gt;\u00a0!.a &amp;&amp;\u00a0!.b\u00a0? givenblock()<br/>}<br/>\u00a0<br/>// Define methods to consider givenblocks<br/>\u00a0<br/>define ifboth =&gt; thread_var_get(::if2)-&gt;ifboth =&gt; givenblock<br/>define else1 =&gt; thread_var_get(::if2)-&gt;else1 =&gt; givenblock<br/>define else2 =&gt; thread_var_get(::if2)-&gt;else2 =&gt; givenblock<br/>define else =&gt; thread_var_get(::if2)-&gt;else =&gt; givenblock</pre>"}, {"lang": "M2000 Interpreter", "loc": 42, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>module if2 {<br/>             over 3\u00a0: read &amp;c<br/>             c=not (stackitem() and stackitem(2))<br/>}<br/>module ifelse1 {<br/>             over 3\u00a0: read &amp;c<br/>             c=not (stackitem() and not stackitem(2))<br/>}<br/>module ifelse2 {<br/>             over 3\u00a0: read &amp;c<br/>             c=not (stackitem(2) and not stackitem())<br/>}<br/>module ifelse {<br/>             over 3\u00a0: read &amp;c<br/>             c=stackitem() or stackitem(2)<br/>}<br/>module endif2 {<br/>             if not empty then drop 3<br/>}<br/>ctrl=true<br/>for a=1 to 2<br/>      for b=1 to 2<br/>            Print \"a=\";a, \"b=\";b<br/>            if2 a=1, b=2, &amp;ctrl\u00a0: Part {<br/>                  print \"both\", a, b<br/>            } as ctrl<br/>            ifelse1\u00a0: Part { <br/>                  print \"first\", a<br/>            } as ctrl<br/>            ifelse2 \u00a0: Part {<br/>                  print \"second\", b<br/>            } as ctrl<br/>            ifelse \u00a0: part {<br/>                  print \"no one\"<br/>            } as ctrl<br/>            endif2<br/>      next b<br/>next a<br/>Print \"ok\"<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>If2[test1_, test2_, condBoth_, cond1_, cond2_, condNone_]\u00a0:= With[<br/>   {result1 = test1,<br/>    result2 = test2},<br/>   Which[<br/>    result1 &amp;&amp; result2, condBoth,<br/>    result1, cond1,<br/>    result2, cond2,<br/>    True, condNone]];<br/>SetAttributes[If2, HoldAll];<br/>\u00a0</pre>"}, {"lang": "Morfa", "loc": 79, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import morfa.base;<br/>\u00a0<br/>// introduce 4 new operators to handle the if2 syntax<br/>operator then   { kind = infix,   precedence = mul,   associativity = right}<br/>operator else1  { kind = infix,   precedence = not,   associativity = left }<br/>operator else2  { kind = infix,   precedence = not,   associativity = left }<br/>operator none   { kind = infix,   precedence = not,   associativity = left }<br/>\u00a0<br/>// function which bounds the condition expression to the if2 \"actions\"<br/>public func then(condition: IF2.Condition, actionHolder: IF2): void<br/>{<br/>    actionHolder.actions[condition]();<br/>}<br/>\u00a0<br/>// functions (bound to operators) used to \"build\" the if2 \"statement\"<br/>public func else1(bothAction: func(): void, else1Action: func(): void): IF2<br/>{<br/>    return IF2([IF2.Condition.both -&gt; bothAction,<br/>                IF2.Condition.else1 -&gt; else1Action]);<br/>\u00a0<br/>}<br/>public func else2(actionHolder: IF2, action: func(): void): IF2<br/>{<br/>    return checkAndAdd(actionHolder, action, IF2.Condition.else2);<br/>}<br/>public func none(actionHolder: IF2, action: func(): void): IF2<br/>{<br/>    return checkAndAdd(actionHolder, action, IF2.Condition.none);<br/>}<br/>\u00a0<br/>// finally, function which combines two conditions into a \"trigger\" for the if2 \"statement\"<br/>public func if2(condition1: bool, condition2: bool): IF2.Condition<br/>{<br/>    if (condition1 and condition2)<br/>        return IF2.Condition.both;<br/>    else if (condition1)<br/>        return IF2.Condition.else1;<br/>    else if (condition2)<br/>        return IF2.Condition.else2;<br/>    else<br/>        return IF2.Condition.none;<br/>}<br/>\u00a0<br/>// private helper function to build the IF2 structure<br/>func checkAndAdd(actionHolder: IF2, action: func(): void, actionName: IF2.Condition): IF2<br/>{<br/>    if (actionHolder.actions.contains(actionName))<br/>        throw new Exception(\"action defined twice for one condition in if2\");<br/>    else<br/>        actionHolder.actions[actionName] = action;<br/>    return actionHolder;<br/>}<br/>\u00a0<br/>// helper structure to process the if2 \"statement\"<br/>struct IF2<br/>{<br/>    public enum Condition { both, else1, else2, none };<br/>    public var actions: Dict&lt;Condition, func(): void&gt;;<br/>}<br/>\u00a0<br/>// usage<br/>if2 (true, false) then func() <br/>{ <br/>    println(\"both true\"); <br/>}<br/>else1 func() <br/>{<br/>    println(\"first true\"); <br/>}<br/>else2 func() <br/>{<br/>    println(\"second true\"); <br/>}<br/>none func() <br/>{<br/>    println(\"none true\"); <br/>};<br/>\u00a0</pre>"}, {"lang": "Nemerle", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>// point of interest: the when keyword and &amp;&amp; operator inside the macro definition are macros themselves<br/>\u00a0<br/>macro if2 (cond1, cond2, bodyTT, bodyTF, bodyFT, bodyFF)<br/>syntax (\"if2\", \"(\", cond1, \")\", \"(\", cond2, \")\", bodyTT, \"elseTF\", bodyTF, \"elseFT\", bodyFT, \"else\", bodyFF)<br/>{<br/>    &lt;[ <br/>        when($cond1 &amp;&amp; $cond2) {$bodyTT};<br/>        when($cond1 &amp;&amp;\u00a0!($cond2)) {$bodyTF};<br/>        when(!($cond1) &amp;&amp; $cond2) {$bodyFT};<br/>        when(!($cond1) &amp;&amp;\u00a0!($cond2)) {$bodyFF};<br/>    ]&gt;<br/>}</pre>"}, {"lang": "NewLISP", "loc": 24, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#context\"><span class=\"kw1\">context</span></a> <span class=\"re5\">'if2</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define-macro\"><span class=\"kw1\">define-macro</span></a> <span class=\"br0\">(</span>if2<span class=\"sy1\">:</span><span class=\"me0\">if2</span> cond1 cond2 both<span class=\"sy1\">-</span>true first<span class=\"sy1\">-</span>true second<span class=\"sy1\">-</span>true neither<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#cond\"><span class=\"kw1\">cond</span></a> <br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#eval\"><span class=\"kw1\">eval</span></a> cond1<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#eval\"><span class=\"kw1\">eval</span></a> cond2<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#eval\"><span class=\"kw1\">eval</span></a> both<span class=\"sy1\">-</span>true<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#eval\"><span class=\"kw1\">eval</span></a> first<span class=\"sy1\">-</span>true<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#eval\"><span class=\"kw1\">eval</span></a> cond2<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#eval\"><span class=\"kw1\">eval</span></a> second<span class=\"sy1\">-</span>true<span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/>    <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#true\"><span class=\"kw1\">true</span></a><br/>      <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#eval\"><span class=\"kw1\">eval</span></a> neither<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#context\"><span class=\"kw1\">context</span></a> MAIN<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span>if2 <a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#true\"><span class=\"kw1\">true</span></a> <a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#true\"><span class=\"kw1\">true</span></a> <span class=\"re5\">'bothTrue</span> <span class=\"re5\">'firstTrue</span> <span class=\"re5\">'secondTrue</span> <span class=\"re5\">'else</span><span class=\"br0\">)</span><br/>bothTrue<br/><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span>if2 <a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#true\"><span class=\"kw1\">true</span></a> false <span class=\"re5\">'bothTrue</span> <span class=\"re5\">'firstTrue</span> <span class=\"re5\">'secondTrue</span> <span class=\"re5\">'else</span><span class=\"br0\">)</span><br/>firstTrue<br/><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span>if2 false <a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#true\"><span class=\"kw1\">true</span></a> <span class=\"re5\">'bothTrue</span> <span class=\"re5\">'firstTrue</span> <span class=\"re5\">'secondTrue</span> <span class=\"re5\">'else</span><span class=\"br0\">)</span><br/>secondTrue<br/><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span>if2 false false <span class=\"re5\">'bothTrue</span> <span class=\"re5\">'firstTrue</span> <span class=\"re5\">'secondTrue</span> <span class=\"re5\">'else</span><span class=\"br0\">)</span><br/>else<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 62, "block": "<pre class=\"text highlighted_source\">import macros<br/>\u00a0<br/>proc newIfElse(c, t, e): PNimNode {.compiletime.} =<br/>  result = newIfStmt((c, t))<br/>  result.add(newNimNode(nnkElse).add(e))<br/>\u00a0<br/>macro if2(x, y: expr; z: stmt): stmt {.immediate.} =<br/>  var parts: array[4, PNimNode]<br/>  for i in parts.low .. parts.high:<br/>    parts[i] = newNimNode(nnkDiscardStmt).add(nil)<br/>\u00a0<br/>  assert z.kind == nnkStmtList<br/>  assert z.len &lt;= 4<br/>\u00a0<br/>  for i in 0 .. &lt;z.len:<br/>    assert z[i].kind == nnkCall<br/>    assert z[i].len == 2<br/>\u00a0<br/>    var j = 0<br/>\u00a0<br/>    case $z[i][0].ident<br/>    of \"then\":  j = 0<br/>    of \"else1\": j = 1<br/>    of \"else2\": j = 2<br/>    of \"else3\": j = 3<br/>    else: assert false<br/>\u00a0<br/>    parts[j] = z[i][1].last<br/>\u00a0<br/>  result = newIfElse(x,<br/>    newIfElse(y, parts[0], parts[1]),<br/>    newIfElse(y, parts[2], parts[3]))<br/>\u00a0<br/>if2 2 &gt; 1, 3 &lt; 2:<br/>  then:<br/>    echo \"1\"<br/>  else1:<br/>    echo \"2\"<br/>  else2:<br/>    echo \"3\"<br/>  else3:<br/>    echo \"4\"<br/>\u00a0<br/># Missing cases are supported:<br/>if2 2 &gt; 1, 3 &lt; 2:<br/>  then:<br/>    echo \"1\"<br/>  else2:<br/>    echo \"3\"<br/>  else3:<br/>    echo \"4\"<br/>\u00a0<br/># Order can be swapped:<br/>if2 2 &gt; 1, 3 &lt; 2:<br/>  then:<br/>    echo \"1\"<br/>  else2:<br/>    echo \"3\"<br/>  else1:<br/>    echo \"2\"<br/>  else3:<br/>    echo \"4\"</pre>"}, {"lang": "PARI/GP", "loc": 7, "block": "<pre class=\"parigp highlighted_source\">if2<span class=\"br0\">(</span>c1<span class=\"sy0\">,</span>c2<span class=\"sy0\">,</span>tt<span class=\"sy0\">,</span>tf<span class=\"sy0\">,</span>ft<span class=\"sy0\">,</span>ff<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>c1<span class=\"sy0\">,</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>c2<span class=\"sy0\">,</span>tt<span class=\"sy0\">,</span>tf<span class=\"br0\">)</span><br/>  <span class=\"sy0\">,</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>c2<span class=\"sy0\">,</span>ft<span class=\"sy0\">,</span>ff<span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 136, "block": "<pre class=\"perl highlighted_source\">\u00a0<br/><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> v5<span class=\"sy0\">.</span>10<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">=for starters<br/>\u00a0<br/>Syntax:<br/>\u00a0<br/>    if2 condition1, condition2, then2 {<br/>        # both conditions are true<br/>    }<br/>    else1 {<br/>        # only condition1 is true<br/>    }<br/>    else2 {<br/>        # only condition2 is true<br/>    }<br/>    orelse {<br/>        # neither condition is true<br/>    };<br/>\u00a0<br/>Any (but not all) of the `then' and `else' clauses can be omitted, and else1<br/>and else2 can be specified in either order.<br/>\u00a0<br/>This extension is imperfect in several ways:<br/>* A normal if-statement uses round brackets, but this syntax forbids them.<br/>* Perl doesn't have a `then' keyword; if it did, it probably wouldn't be<br/>  preceded by a comma.<br/>* Unless it's the last thing in a block, the whole structure must be followed<br/>  by a semicolon.<br/>* Error messages appear at runtime, not compile time, and they don't show the<br/>  line where the user's syntax error occurred.<br/>\u00a0<br/>We could solve most of these problems with a source filter, but those are<br/>dangerous.  Can anyone else do better?  Feel free to improve or replace.<br/>\u00a0<br/>=cut</span><br/>\u00a0<br/><span class=\"co1\"># All the new `keywords' are in fact functions.  Most of them return lists</span><br/><span class=\"co1\"># of four closures, one of which is then executed by if2.  Here are indexes into</span><br/><span class=\"co1\"># these lists:</span><br/>\u00a0<br/><span class=\"kw2\">use</span> constant <span class=\"br0\">{</span><br/>    IdxThen     <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>    IdxElse1    <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>    IdxElse2    <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span><br/>    IdxOrElse   <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Most of the magic is in the (&amp;) prototype, which lets a function accept a</span><br/><span class=\"co1\"># closure marked by nothing except braces.</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> orelse<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$clause</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a><span class=\"sy0\">,</span> <span class=\"re0\">$clause</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> else2<span class=\"br0\">(</span><span class=\"sy0\">&amp;@</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$clause</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Can't have two `else2' clauses\"</span><br/>        <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"co5\">$_</span><span class=\"br0\">[</span>IdxElse2<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span>IdxElse1<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$clause</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span>IdxOrElse<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> else1<span class=\"br0\">(</span><span class=\"sy0\">&amp;@</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$clause</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Can't have two `else1' clauses\"</span><br/>        <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"co5\">$_</span><span class=\"br0\">[</span>IdxElse1<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a><span class=\"sy0\">,</span> <span class=\"re0\">$clause</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span>IdxElse2<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span>IdxOrElse<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> then2<span class=\"br0\">(</span><span class=\"sy0\">&amp;@</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Can't have two `then2' clauses\"</span><br/>        <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>IdxThen<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/splice.html\"><span class=\"kw3\">splice</span></a> <span class=\"co5\">@_</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">+</span>IdxThen<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Here, we collect the two conditions and four closures (some of which will be</span><br/><span class=\"co1\"># undefined if some clauses are missing).  We work out which of the four</span><br/><span class=\"co1\"># clauses (closures) to call, and call it if it exists.</span><br/>\u00a0<br/><span class=\"kw2\">use</span> constant <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Defining True and False is almost always bad practice, but here we</span><br/>    <span class=\"co1\"># have a valid reason.</span><br/>    True  <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    False <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> if2<span class=\"br0\">(</span><span class=\"co5\">$$</span><span class=\"sy0\">@</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$cond1</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!!</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span>    <span class=\"co1\"># Convert to Boolean to guarantee matching</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$cond2</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!!</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span>    <span class=\"co1\"># against either True or False</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"if2 must be followed by then2, else1, else2, &amp;/or orelse\"</span><br/>        <span class=\"kw1\">if</span> <span class=\"co5\">@_</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">4</span><br/>        <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"kw1\">and</span> <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a> <span class=\"co5\">$_</span> <span class=\"kw1\">ne</span> <span class=\"st_h\">'CODE'</span><span class=\"br0\">}</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$index</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"re0\">$cond1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"re0\">$cond2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$index</span> <span class=\"sy0\">=</span> IdxOrElse<span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"re0\">$cond1</span> <span class=\"sy0\">&amp;&amp;</span>  <span class=\"re0\">$cond2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$index</span> <span class=\"sy0\">=</span> IdxElse2 <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"re0\">$cond1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"re0\">$cond2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$index</span> <span class=\"sy0\">=</span> IdxElse1 <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"re0\">$cond1</span> <span class=\"sy0\">&amp;&amp;</span>  <span class=\"re0\">$cond2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$index</span> <span class=\"sy0\">=</span> IdxThen  <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$closure</span> <span class=\"sy0\">=</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"re0\">$index</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">&amp;$closure</span>   <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$closure</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># This is test code.  You can play with it by deleting up to three of the</span><br/><span class=\"co1\"># four clauses.</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> test_bits<span class=\"br0\">(</span><span class=\"co5\">$)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Testing $n: \"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    if2 <span class=\"re0\">$n</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> then2 <span class=\"br0\">{</span><br/>        say <span class=\"st0\">\"Both bits 0 and 1 are set\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    else1 <span class=\"br0\">{</span><br/>        say <span class=\"st0\">\"Only bit 0 is set\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    else2 <span class=\"br0\">{</span><br/>        say <span class=\"st0\">\"Only bit 1 is set\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    orelse <span class=\"br0\">{</span><br/>        say <span class=\"st0\">\"Neither bit is set\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>test_bits <span class=\"co5\">$_</span>   <span class=\"kw1\">for</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 21, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">&amp;if2</span>  <span class=\"sy0\">=</span> <span class=\"sy0\">-&gt;</span> \\a<span class=\"sy0\">,</span> \\b<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span><span class=\"kw1\">x</span> <span class=\"br0\">{</span> <span class=\"kw1\">my</span> <span class=\"re0\">@*IF2</span> <span class=\"sy0\">=</span> <span class=\"sy0\">?</span>a<span class=\"sy0\">,?</span>b<span class=\"sy0\">;</span> <span class=\"kw1\">x</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">&amp;if</span><span class=\"sy0\">-</span>both    <span class=\"sy0\">=</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">&amp;</span><span class=\"kw1\">x</span> <span class=\"br0\">{</span> <span class=\"kw1\">x</span> <span class=\"kw1\">if</span> <span class=\"re0\">@*IF2</span> <span class=\"kw1\">eq</span> <span class=\"br0\">(</span><span class=\"kw1\">True</span><span class=\"sy0\">,</span><span class=\"kw1\">True</span><span class=\"br0\">)</span>  <span class=\"br0\">}</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">&amp;if</span><span class=\"sy0\">-</span><span class=\"kw3\">first</span>   <span class=\"sy0\">=</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">&amp;</span><span class=\"kw1\">x</span> <span class=\"br0\">{</span> <span class=\"kw1\">x</span> <span class=\"kw1\">if</span> <span class=\"re0\">@*IF2</span> <span class=\"kw1\">eq</span> <span class=\"br0\">(</span><span class=\"kw1\">True</span><span class=\"sy0\">,</span><span class=\"kw1\">False</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">&amp;if</span><span class=\"sy0\">-</span>second  <span class=\"sy0\">=</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">&amp;</span><span class=\"kw1\">x</span> <span class=\"br0\">{</span> <span class=\"kw1\">x</span> <span class=\"kw1\">if</span> <span class=\"re0\">@*IF2</span> <span class=\"kw1\">eq</span> <span class=\"br0\">(</span><span class=\"kw1\">False</span><span class=\"sy0\">,</span><span class=\"kw1\">True</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">&amp;if</span><span class=\"sy0\">-</span>neither <span class=\"sy0\">=</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">&amp;</span><span class=\"kw1\">x</span> <span class=\"br0\">{</span> <span class=\"kw1\">x</span> <span class=\"kw1\">if</span> <span class=\"re0\">@*IF2</span> <span class=\"kw1\">eq</span> <span class=\"br0\">(</span><span class=\"kw1\">False</span><span class=\"sy0\">,</span><span class=\"kw1\">False</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> test <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span><span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$_</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"G\"</span><span class=\"sy0\">;</span>          <span class=\"co1\"># Demo correct scoping of topic.</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$got</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"o\"</span><span class=\"sy0\">;</span>     <span class=\"co1\"># Demo correct scoping of lexicals.</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$*got</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"t\"</span><span class=\"sy0\">;</span>    <span class=\"co1\"># Demo correct scoping of dynamics.</span><br/>\u00a0<br/>    if2 <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>        if<span class=\"sy0\">-</span>both <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"$_$got$*got both\"</span> <span class=\"br0\">}</span><br/>        if<span class=\"sy0\">-</span><span class=\"kw3\">first</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"$_$got$*got first\"</span> <span class=\"br0\">}</span><br/>        if<span class=\"sy0\">-</span>second <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"$_$got$*got second\"</span> <span class=\"br0\">}</span><br/>        if<span class=\"sy0\">-</span>neither <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"$_$got$*got neither\"</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> test <span class=\"sy0\">|</span><span class=\"re0\">$_</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span> <span class=\"kw1\">X</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 6, "block": "<pre class=\"text highlighted_source\">switch {condition1,condition2} do<br/>    case {true,true}:<br/>    case {true,false}:<br/>    case {false,true}:<br/>    case {false,false}:<br/>end switch</pre>"}, {"lang": "PHL", "loc": 53, "block": "<pre class=\"text highlighted_source\">module stmts;<br/>\u00a0<br/>import phl::lang::io;<br/>\u00a0<br/>/* LinkedList --&gt; Each element contains a condition */<br/>struct @ConditionalChain {<br/>\tfield @Boolean cond;<br/>\tfield @ConditionalChain next;<br/>\u00a0<br/>\t@ConditionalChain init(@Boolean cond, @ConditionalChain next) [<br/>\t\tthis::cond = cond;<br/>\t\tthis::next = next;<br/>\u00a0<br/>\t\treturn this;<br/>\t]<br/>\u00a0<br/>\t/*<br/>\t *\tIf the condition is true executes the closure and returns a false element, otherwise returns the next condition<br/>\t *\t<br/>\t *\tExecution starts from the first element, and iterates until the right element is found.<br/>\t */<br/>\t@ConditionalChain then(@Closure&lt;@Void&gt; closure) [<br/>\t\tif (isNull(next())) return new @ConditionalChain.init(false, null);<br/>\t\tif (cond()) {<br/>\t\t\tclosure();<br/>\t\t\treturn new @ConditionalChain.init(false, null);<br/>\t\t}<br/>\t\telse return next();<br/>\t]<br/>\u00a0<br/>\t/* Operators create a cool look */\t<br/>\t@ConditionalChain operator then(@Closure&lt;@Void&gt; closure) alias @ConditionalChain.then;<br/>\t@ConditionalChain operator else1(@Closure&lt;@Void&gt; closure) alias @ConditionalChain.then;<br/>\t@ConditionalChain operator else2(@Closure&lt;@Void&gt; closure) alias @ConditionalChain.then;<br/>\t@ConditionalChain operator orElse(@Closure&lt;@Void&gt; closure) alias @ConditionalChain.then;<br/>};<br/>\u00a0<br/>/* Returns linked list [a &amp;&amp; b, a, b, true] */<br/>@ConditionalChain if2(@Boolean a, @Boolean b) [<br/>\treturn new @ConditionalChain.init(a &amp;&amp; b, new @ConditionalChain.init(a, new @ConditionalChain.init(b, new @ConditionalChain.init(true, null))));<br/>]<br/>\u00a0<br/>@Void main [<br/>\tif2(false, true) then [<br/>\t\tprintln(\"Not this!\");<br/>\t] else1 [<br/>\t\tprintln(\"Not this!\");<br/>\t] else2 [<br/>\t\tprintln(\"This!\");<br/>\t] orElse [<br/>\t\tprintln(\"Not this!\");<br/>\t];<br/>]</pre>"}, {"lang": "PicoLisp", "loc": 8, "block": "<pre class=\"text highlighted_source\">(undef 'if2)  # Undefine the built-in 'if2'<br/>\u00a0<br/>(de if2 \"P\"<br/>   (if (eval (pop '\"P\"))<br/>      (eval ((if (eval (car \"P\")) cadr caddr) \"P\"))<br/>      (if (eval (car \"P\"))<br/>         (eval (cadddr \"P\"))<br/>         (run (cddddr \"P\")) ) ) )</pre>"}, {"lang": "PowerShell", "loc": 49, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> When<span class=\"sy0\">-</span>Condition<br/><span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>CmdletBinding<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">Param</span><br/>    <span class=\"br0\">(</span><br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span> Position<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">bool</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Test1</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span> Position<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">bool</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Test2</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span> Position<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">scriptblock</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Both</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span> Position<span class=\"sy0\">=</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">scriptblock</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$First</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span> Position<span class=\"sy0\">=</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">scriptblock</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Second</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>Parameter<span class=\"br0\">(</span>Mandatory<span class=\"sy0\">=</span><span class=\"re0\">$true</span><span class=\"sy0\">,</span> Position<span class=\"sy0\">=</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"re3\">scriptblock</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$Neither</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$Test1</span> <span class=\"kw4\">-and</span> <span class=\"re0\">$Test2</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">return</span> <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$Both</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">elseif</span> <span class=\"br0\">(</span><span class=\"re0\">$Test1</span> <span class=\"kw4\">-and</span> <span class=\"kw4\">-not</span> <span class=\"re0\">$Test2</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">return</span> <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$First</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">elseif</span> <span class=\"br0\">(</span><span class=\"kw4\">-not</span> <span class=\"re0\">$Test1</span> <span class=\"kw4\">-and</span> <span class=\"re0\">$Test2</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">return</span> <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$Second</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">return</span> <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"re0\">$Neither</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>if2 &lt;- function(condition1, condition2, both_true, first_true, second_true, both_false)<br/>{<br/>  expr &lt;- if(condition1)<br/>  {<br/>    if(condition2) both_true else first_true<br/>  } else if(condition2) second_true else both_false<br/>  eval(expr)<br/>}<br/>\u00a0</pre>"}, {"lang": "R", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>if2 &lt;- function(condition1, condition2, both_true, first_true, second_true, both_false)<br/>{<br/>  expr &lt;- if(condition1)<br/>  {<br/>    if(condition2) both_true else first_true<br/>  } else if(condition2) second_true else both_false<br/>  eval(expr)<br/>}<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>;; define a new syntax<br/>(define-syntax-rule<br/> \u00a0;; this is the new syntax we want, in sexpr syntax:<br/>  (if2 condition1isTrue condition2isTrue<br/>       bothConditionsAreTrue<br/>       firstConditionIsTrue<br/>       secondConditionIsTrue<br/>       noConditionIsTrue)<br/> \u00a0;; and this is the syntax that implements it:<br/>  (if condition1isTrue<br/>    (if condition2isTrue<br/>      bothConditionsAreTrue<br/>      firstConditionIsTrue)<br/>    (if condition2isTrue<br/>      secondConditionIsTrue<br/>      noConditionIsTrue)))<br/>;; ... and that's all you need -- it now works:<br/>(define (try x y)<br/>  (displayln (if2 (&lt; x 10) (&lt; y 10)<br/>                  \"Both small\"<br/>                  \"First is small\"<br/>                  \"Second is small\"<br/>                  \"Neither is small\")))<br/>(try 1 1)  \u00a0; Both small<br/>(try 1 10) \u00a0; First is small<br/>(try 10 1) \u00a0; Second is small<br/>(try 10 10)\u00a0; Neither is small<br/>\u00a0</pre>"}, {"lang": "Retro", "loc": 7, "block": "<pre class=\"text highlighted_source\">: 4wayIf ( flag flag both neither first second )<br/>  heap [ cons &amp;cons dip [ [ cons ] dip ] dip rot ] preserve<br/>  [ do [ -1 = ] <a class=\"__cf_email__\" data-cfemail=\"15777c55\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  and ] [ 2drop do drop do ] when<br/>  [ do [  0 = ] <a class=\"__cf_email__\" data-cfemail=\"22404b62\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  and ] [ 2drop do nip do  ] when<br/>  [ do 0 = swap -1 = and ] [ drop nip  do drop do ] when<br/>  [ do -1 = swap 0 = and ] [ drop nip  do nip do  ] when<br/>  drop 2drop\u00a0;</pre>"}, {"lang": "REXX", "loc": 16, "block": "<pre class=\"rexx highlighted_source\">if2<span class=\"br0\">(</span>  some-expression-that-results-in-a-boolean-<span class=\"kw2\">value</span>,   some-other-expression-that-results-in-a-boolean-<span class=\"kw2\">value</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>                <span class=\"coMULTI\">/*this part is a REXX comment*/</span>         <span class=\"coMULTI\">/*could be a DO structure.*/</span><br/>    <span class=\"kw1\">select</span>      <span class=\"coMULTI\">/*\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193*/</span>         <span class=\"coMULTI\">/*\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193*/</span><br/>\u00a0<br/>    <span class=\"kw3\">when</span> <span class=\"kw1\">if</span><span class=\"sy0\">.</span>11  <span class=\"coMULTI\">/*{condition 1 &amp; 2  are true}*/</span>   <span class=\"kw3\">then</span>    perform-a-REXX-statement<br/>    <span class=\"kw3\">when</span> <span class=\"kw1\">if</span><span class=\"sy0\">.</span>10  <span class=\"coMULTI\">/*{condition 1       is true}*/</span>   <span class=\"kw3\">then</span>       <span class=\"st0\">\"    \"</span>   <span class=\"st0\">\"      \"</span><br/>    <span class=\"kw3\">when</span> <span class=\"kw1\">if</span><span class=\"sy0\">.</span>01  <span class=\"coMULTI\">/*{condition 2       is true}*/</span>   <span class=\"kw3\">then</span>       <span class=\"st0\">\"    \"</span>   <span class=\"st0\">\"      \"</span><br/>    <span class=\"kw3\">when</span> <span class=\"kw1\">if</span><span class=\"sy0\">.</span>00  <span class=\"coMULTI\">/*{no condition      is true}*/</span>   <span class=\"kw3\">then</span>       <span class=\"st0\">\"    \"</span>   <span class=\"st0\">\"      \"</span><br/>\u00a0<br/>    <span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"coMULTI\">/*an example of a  DO  structure for the first clause: */</span><br/>\u00a0<br/>    <span class=\"kw3\">when</span> <span class=\"kw1\">if</span><span class=\"sy0\">.</span>11  <span class=\"coMULTI\">/*{condition 1 &amp; 2  are true}*/</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  x=<span class=\"nu0\">12</span>;  y=<span class=\"kw6\">length</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span>;  <span class=\"kw3\">end</span></pre>"}, {"lang": "Ring", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Extend your language<br/>\u00a0<br/>see \"a = 1, b = 1 =&gt; \" <br/>test(1, 1)<br/>see \"a = 1, b = 0 =&gt; \" <br/>test(1, 0)<br/>see \"a = 0, b = 1 =&gt; \" <br/>test(0, 1)<br/>see \"a = 0, b = 0 =&gt; \" <br/>test(0, 0)<br/>see nl<br/>\u00a0<br/>func test(a,b)<br/>       if a &gt; 0 and b &gt; 0<br/>          see \"both positive\"<br/>       but a &gt; 0<br/>           see \"first positive\"<br/>       but b &gt; 0<br/>           see \"second positive\"<br/>       but a &lt; 1 and b &lt; 1<br/>           see \"neither positive\"<br/>       ok<br/>       see nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 23, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># Define a class which always returns itself for everything</span><br/><span class=\"kw1\">class</span> HopelesslyEgocentric<br/>  <span class=\"kw1\">def</span> method_missing<span class=\"br0\">(</span>what, <span class=\"sy0\">*</span>args<span class=\"br0\">)</span> <span class=\"kw2\">self</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> if2<span class=\"br0\">(</span>cond1, cond2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> cond1 <span class=\"kw1\">and</span> cond2<br/>    <span class=\"kw1\">yield</span><br/>    HopelesslyEgocentric.<span class=\"me1\">new</span><br/>  <span class=\"kw1\">elsif</span> cond1<br/>    <span class=\"kw1\">Class</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>HopelesslyEgocentric<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">def</span> else1; <span class=\"kw1\">yield</span>; HopelesslyEgocentric.<span class=\"me1\">new</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span>.<span class=\"me1\">new</span><br/>  <span class=\"kw1\">elsif</span> cond2<br/>    <span class=\"kw1\">Class</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>HopelesslyEgocentric<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">def</span> else2; <span class=\"kw1\">yield</span>; HopelesslyEgocentric.<span class=\"me1\">new</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span>.<span class=\"me1\">new</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">Class</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>HopelesslyEgocentric<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">def</span> neither; <span class=\"kw1\">yield</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span>.<span class=\"me1\">new</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 31, "block": "<pre class=\"text highlighted_source\">#![allow(unused_variables)]<br/>macro_rules! if2 {<br/>    ($cond1: expr, $cond2: expr <br/>        =&gt; $both:expr <br/>        =&gt; $first: expr <br/>        =&gt; $second:expr <br/>        =&gt; $none:expr) <br/>    =&gt; {<br/>        match ($cond1, $cond2) {<br/>            (true, true) =&gt; $both,<br/>            (true, _   ) =&gt; $first,<br/>            (_   , true) =&gt; $second,<br/>            _            =&gt; $none<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    let i = 1;<br/>    let j = 2;<br/>    if2!(i &gt; j, i + j &gt;= 3<br/>        =&gt; {<br/>            // code blocks and statements can go here also<br/>            let k = i + j;<br/>            println!(\"both were true\")<br/>        }<br/>        =&gt; println!(\"the first was true\")<br/>        =&gt; println!(\"the second was true\")<br/>        =&gt; println!(\"neither were true\")<br/>    )<br/>}</pre>"}, {"lang": "Scala", "loc": 17, "block": "<pre class=\"scala highlighted_source\">scala<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> if2<span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">(</span>x<span class=\"sy0\">:</span> <span class=\"sy0\">=&gt;</span> Boolean<span class=\"br0\">)</span><span class=\"br0\">(</span>y<span class=\"sy0\">:</span> <span class=\"sy0\">=&gt;</span> Boolean<span class=\"br0\">)</span><span class=\"br0\">(</span>xyt<span class=\"sy0\">:</span> <span class=\"sy0\">=&gt;</span> A<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> <span class=\"br0\">{</span><br/>     |   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> else1<span class=\"br0\">(</span>xt<span class=\"sy0\">:</span> <span class=\"sy0\">=&gt;</span> A<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> <span class=\"br0\">{</span><br/>     |     <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> else2<span class=\"br0\">(</span>yt<span class=\"sy0\">:</span> <span class=\"sy0\">=&gt;</span> A<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> <span class=\"br0\">{</span><br/>     |       <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> orElse<span class=\"br0\">(</span>nt<span class=\"sy0\">:</span> <span class=\"sy0\">=&gt;</span> A<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>     |         <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>     |           <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>y<span class=\"br0\">)</span> xyt <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> xt<br/>     |         <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>     |           yt<br/>     |         <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>     |           nt<br/>     |         <span class=\"br0\">}</span><br/>     |       <span class=\"br0\">}</span><br/>     |     <span class=\"br0\">}</span><br/>     |   <span class=\"br0\">}</span><br/>     | <span class=\"br0\">}</span><br/>if2<span class=\"sy0\">:</span> <span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"br0\">(</span>x<span class=\"sy0\">:</span> <span class=\"sy0\">=&gt;</span> Boolean<span class=\"br0\">)</span><span class=\"br0\">(</span>y<span class=\"sy0\">:</span> <span class=\"sy0\">=&gt;</span> Boolean<span class=\"br0\">)</span><span class=\"br0\">(</span>xyt<span class=\"sy0\">:</span> <span class=\"sy0\">=&gt;</span> A<span class=\"br0\">)</span>java.<span class=\"me1\">lang</span>.<span class=\"me1\">Object</span><span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> else1<span class=\"br0\">(</span>xt<span class=\"sy0\">:</span> <span class=\"sy0\">=&gt;</span> A<span class=\"br0\">)</span><span class=\"sy0\">:</span> java.<span class=\"me1\">lang</span>.<span class=\"me1\">Object</span><span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> else2<span class=\"br0\">(</span>yt<span class=\"sy0\">:</span> <span class=\"sy0\">=&gt;</span><br/> A<span class=\"br0\">)</span><span class=\"sy0\">:</span> java.<span class=\"me1\">lang</span>.<span class=\"me1\">Object</span><span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> orElse<span class=\"br0\">(</span>nt<span class=\"sy0\">:</span> <span class=\"sy0\">=&gt;</span> A<span class=\"br0\">)</span><span class=\"sy0\">:</span> A<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 9, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define-syntax</span> if2<br/>  <span class=\"br0\">(</span><span class=\"kw1\">syntax-rules</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>if2 cond1 cond2 both<span class=\"sy0\">-</span>true first<span class=\"sy0\">-</span>true second<span class=\"sy0\">-</span>true none<span class=\"sy0\">-</span>true<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>c2 cond2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">if</span> cond1<br/>           <span class=\"br0\">(</span><span class=\"kw1\">if</span> c2 both<span class=\"sy0\">-</span>true first<span class=\"sy0\">-</span>true<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">if</span> c2 second<span class=\"sy0\">-</span>true none<span class=\"sy0\">-</span>true<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 39, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>$ syntax expr: .if.().().then.().else1.().else2.().else3.().end.if is -&gt; 25;<br/>\u00a0<br/>const proc: if (in boolean: cond1) (in boolean: cond2) then<br/>              (in proc: statements1)<br/>            else1<br/>              (in proc: statements2)<br/>            else2<br/>              (in proc: statements3)<br/>            else3<br/>              (in proc: statements4)<br/>            end if                     is func<br/>  begin<br/>    if cond1 then<br/>      if cond2 then<br/>        statements1;<br/>      else<br/>        statements2;<br/>      end if;<br/>    elsif cond2 then<br/>      statements3;<br/>    else<br/>      statements4;<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    if TRUE FALSE then<br/>      writeln(\"error TRUE TRUE\");<br/>    else1<br/>      writeln(\"TRUE FALSE\");<br/>    else2<br/>      writeln(\"error FALSE TRUE\");<br/>    else3<br/>      writeln(\"error FALSE FALSE\");<br/>    end if;<br/>  end func;</pre>"}, {"lang": "Shen", "loc": 5, "block": "<pre class=\"text highlighted_source\">(defmacro branch-if-macro<br/>  [branch-if Cond1 Cond2 Both Fst Snd None] -&gt;<br/>    [if Cond1<br/>        [if Cond2 Both Fst]<br/>        [if Cond2 Snd None]])</pre>"}, {"lang": "Sidef", "loc": 36, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> if2<span class=\"br0\">(</span>cond1, cond2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    method <span class=\"kw1\">then</span><span class=\"br0\">(</span>block<span class=\"br0\">)</span> <span class=\"br0\">{</span>    <span class=\"co1\"># both true</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cond1 <span class=\"sy0\">&amp;&amp;</span> cond2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            block.<span class=\"me1\">run</span>;<br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">return</span> <span class=\"kw2\">self</span>;<br/>    <span class=\"br0\">}</span><br/>    method else1<span class=\"br0\">(</span>block<span class=\"br0\">)</span> <span class=\"br0\">{</span>   <span class=\"co1\"># first true</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cond1 <span class=\"sy0\">&amp;&amp;</span>\u00a0!cond2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            block.<span class=\"me1\">run</span>;<br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">return</span> <span class=\"kw2\">self</span>;<br/>    <span class=\"br0\">}</span><br/>    method else2<span class=\"br0\">(</span>block<span class=\"br0\">)</span> <span class=\"br0\">{</span>   <span class=\"co1\"># second true</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cond2 <span class=\"sy0\">&amp;&amp;</span>\u00a0!cond1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            block.<span class=\"me1\">run</span>;<br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">return</span> <span class=\"kw2\">self</span>;<br/>    <span class=\"br0\">}</span><br/>    method <span class=\"kw1\">else</span><span class=\"br0\">(</span>block<span class=\"br0\">)</span> <span class=\"br0\">{</span>    <span class=\"co1\"># none true</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>!cond1 <span class=\"sy0\">&amp;&amp;</span>\u00a0!cond2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            block.<span class=\"me1\">run</span>;<br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">return</span> <span class=\"kw2\">self</span>;<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>if2<span class=\"br0\">(</span><span class=\"kw2\">false</span>, <span class=\"kw2\">true</span><span class=\"br0\">)</span>.<span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>    say <span class=\"st0\">\"if2\"</span>;<br/><span class=\"br0\">}</span>.<span class=\"me1\">else1</span> <span class=\"br0\">{</span><br/>    say <span class=\"st0\">\"else1\"</span>;<br/><span class=\"br0\">}</span>.<span class=\"me1\">else2</span> <span class=\"br0\">{</span><br/>    say <span class=\"st0\">\"else2\"</span>;        <span class=\"co1\"># &lt;- this gets printed</span><br/><span class=\"br0\">}</span>.<span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    say <span class=\"st0\">\"else\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 15, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> if2 <span class=\"br0\">{</span>cond1 cond2 bothTrueBody firstTrueBody secondTrueBody bothFalseBody<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Must evaluate both conditions, and should do so in order</span><br/>    <span class=\"kw1\">set</span> c1 <span class=\"br0\">[</span><span class=\"kw1\">uplevel</span> <span class=\"nu0\">1</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"kw1\">expr</span> <span class=\"re0\">$cond1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> c2 <span class=\"br0\">[</span><span class=\"kw1\">uplevel</span> <span class=\"nu0\">1</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"kw1\">expr</span> <span class=\"re0\">$cond2</span><span class=\"br0\">]</span><br/>    <span class=\"co1\"># Now use that to decide what to do</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$c1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$c2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">uplevel</span> <span class=\"nu0\">1</span> <span class=\"re0\">$bothTrueBody</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$c1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"re0\">$c2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">uplevel</span> <span class=\"nu0\">1</span> <span class=\"re0\">$firstTrueBody</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$c2</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"re0\">$c1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">uplevel</span> <span class=\"nu0\">1</span> <span class=\"re0\">$secondTrueBody</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">uplevel</span> <span class=\"nu0\">1</span> <span class=\"re0\">$bothFalseBody</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TXR", "loc": 9, "block": "<pre class=\"text highlighted_source\">(defmacro if2 (cond1 cond2 both first second . neither)<br/>  (let ((res1 (gensym))<br/>        (res2 (gensym)))<br/>    ^(let ((,res1 ,cond1)<br/>           (,res2 ,cond2))<br/>       (cond ((and ,res1 ,res2) ,both)<br/>             (,res1             ,first)<br/>             (,res2             ,second)<br/>             (t                 ,*neither)))))</pre>"}, {"lang": "UNIX Shell", "loc": 7, "block": "<pre class=\"bash highlighted_source\">if2<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"kw3\">eval</span> <span class=\"st0\">\"$1\"</span>; <span class=\"kw1\">then</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"kw3\">eval</span> <span class=\"st0\">\"$2\"</span>; <span class=\"kw1\">then</span> <span class=\"kw3\">eval</span> <span class=\"st0\">\"$3\"</span>; <span class=\"kw1\">else</span> <span class=\"kw3\">eval</span> <span class=\"st0\">\"$4\"</span>; <span class=\"kw1\">fi</span><br/>\t<span class=\"kw1\">else</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"kw3\">eval</span> <span class=\"st0\">\"$2\"</span>; <span class=\"kw1\">then</span> <span class=\"kw3\">eval</span> <span class=\"st0\">\"$5\"</span>; <span class=\"kw1\">else</span> <span class=\"kw3\">eval</span> <span class=\"st0\">\"$6\"</span>; <span class=\"kw1\">fi</span><br/>\t<span class=\"kw1\">fi</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ursala", "loc": 5, "block": "<pre class=\"text highlighted_source\">iftwo(\"p\",\"q\") &lt;\"both\",\"justp\",\"justq\",\"neither\"&gt; = <br/>\u00a0<br/>\"p\"?(<br/>   \"q\"?(\"both\",\"justp\"),<br/>   \"q\"?(\"justq\",\"neither\"))</pre>"}]}