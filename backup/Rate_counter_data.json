{"task": "Rate_counter", "blocks": [{"lang": "Ada", "loc": 71, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> System;                     <span class=\"kw3\">use</span> System;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;                <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Calendar</span>;               <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Calendar</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Unchecked_Deallocation</span>; <span class=\"kw3\">use</span> Ada;<br/><span class=\"kw3\">with</span> Interfaces;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Rate_Counter <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">pragma</span> Priority <span class=\"br0\">(</span>Max_Priority<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">package</span> Duration_IO <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Fixed_IO <span class=\"br0\">(</span>Duration<span class=\"br0\">)</span>;<br/>\u00a0<br/>   Job_Nbr\u00a0: <span class=\"kw3\">constant</span>\u00a0:= <span class=\"nu0\">6</span>; <span class=\"co1\">-- adjust to your need</span><br/>   <span class=\"kw3\">subtype</span> Job_Index <span class=\"kw1\">is</span> Natural <span class=\"kw3\">range</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Job_Nbr</span>;<br/>\u00a0<br/>   <span class=\"kw3\">task</span> <span class=\"kw3\">type</span> Job <span class=\"br0\">(</span>ID\u00a0: Job_Index<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">pragma</span> Priority <span class=\"br0\">(</span>Default_Priority<span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">entry</span> Start;<br/>   <span class=\"kw1\">end</span> Job;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Job_Ptr <span class=\"kw1\">is</span> <span class=\"kw3\">access</span> Job;<br/>   <span class=\"kw3\">procedure</span> Free <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Unchecked_Deallocation <span class=\"br0\">(</span>Job, Job_Ptr<span class=\"br0\">)</span>;<br/>\u00a0<br/>   Jobs\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Job_Index<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Job_Ptr;<br/>\u00a0<br/>   Done     \u00a0: Natural                     \u00a0:= <span class=\"nu0\">0</span>;<br/>   Completed\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Job_Index<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Boolean\u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; False<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Timings <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Job_Index<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Calendar.<span class=\"me1\">Time</span>;<br/>   Start_T, Stop_T\u00a0: Timings;<br/>\u00a0<br/>   <span class=\"kw3\">task</span> <span class=\"kw3\">body</span> Job <span class=\"kw1\">is</span><br/>      Anchor\u00a0: Interfaces.<span class=\"me1\">Integer_32</span>;<br/>      <span class=\"kw3\">pragma</span> Volatile <span class=\"br0\">(</span>Anchor<span class=\"br0\">)</span>; <span class=\"co1\">-- necessary to avoid compiler optimization.</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw3\">accept</span> Start;<br/>\u00a0<br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Interfaces.<span class=\"me1\">Integer_32</span>'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span>      <span class=\"co1\">-- the job to do</span><br/>         Anchor\u00a0:= I;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Job;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> Job_Index'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      Jobs <span class=\"br0\">(</span>J<span class=\"br0\">)</span>\u00a0:= <span class=\"kw3\">new</span> Job <span class=\"br0\">(</span>ID =&gt; J<span class=\"br0\">)</span>; <span class=\"co1\">-- create the jobs first, sync later</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> Job_Index'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span> <span class=\"co1\">-- launch the jobs in parallel</span><br/>      Start_T <span class=\"br0\">(</span>J<span class=\"br0\">)</span>\u00a0:= Calendar.<span class=\"me1\">Clock</span>; <span class=\"co1\">-- get the start time</span><br/>      Jobs <span class=\"br0\">(</span>J<span class=\"br0\">)</span>.<span class=\"me1\">Start</span>; <span class=\"co1\">-- priority settings necessary to regain control.</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"co1\">-- Polling for the results / also possible to use a protected type.</span><br/>   <span class=\"kw1\">while</span> <span class=\"kw2\">not</span> <span class=\"br0\">(</span>Done = Job_Nbr<span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> Job_Index'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> Completed <span class=\"br0\">(</span>J<span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"kw1\">then</span> Jobs <span class=\"br0\">(</span>J<span class=\"br0\">)</span>'Terminated <span class=\"kw1\">then</span><br/>            Stop_T <span class=\"br0\">(</span>J<span class=\"br0\">)</span>\u00a0:= Calendar.<span class=\"me1\">Clock</span>; <span class=\"co1\">-- get the end time</span><br/>            Put <span class=\"br0\">(</span><span class=\"st0\">\"Job #\"</span> &amp; Job_Index'Image <span class=\"br0\">(</span>J<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" is finished. It took \"</span><span class=\"br0\">)</span>;<br/>            Duration_IO.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>Stop_T <span class=\"br0\">(</span>J<span class=\"br0\">)</span> - Start_T <span class=\"br0\">(</span>J<span class=\"br0\">)</span>, Fore =&gt; <span class=\"nu0\">3</span>, Aft =&gt; <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>            Put_Line <span class=\"br0\">(</span><span class=\"st0\">\" seconds.\"</span><span class=\"br0\">)</span>;<br/>            Completed <span class=\"br0\">(</span>J<span class=\"br0\">)</span>\u00a0:= True;<br/>            Done         \u00a0:= Done + <span class=\"nu0\">1</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw3\">delay</span> System.<span class=\"me1\">Tick</span>; <span class=\"co1\">-- according to the precision of the system clock</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Duration_IO.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>System.<span class=\"me1\">Tick</span>, Fore =&gt; <span class=\"nu0\">1</span>, Aft =&gt; <span class=\"nu0\">6</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\" seconds is the precision of System clock.\"</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> Job_Index'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      Free <span class=\"br0\">(</span>Jobs <span class=\"br0\">(</span>J<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">-- no GC in Ada, clean-up is explicit</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\u00a0<br/><span class=\"kw1\">end</span> Rate_Counter;</pre>"}, {"lang": "AutoHotkey", "loc": 15, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/SetBatchLines.htm\"><span class=\"kw3\">SetBatchLines</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>Tick <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_TickCount\"><span class=\"kw2\">A_TickCount</span></a>    <span class=\"co1\">; store tickcount</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">1000000</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000000</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000000</span><br/>    gcd<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>t <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_TickCount\"><span class=\"kw2\">A_TickCount</span></a> <span class=\"sy0\">-</span> Tick    <span class=\"co1\">; store ticks elapsed</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% t <span class=\"sy0\">/</span> <span class=\"nu0\">1000</span> <span class=\"st0\">\" Seconds elapsed.`n\"</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Round</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>t <span class=\"sy0\">/</span> <span class=\"nu0\">1000000000</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">\" Loop iterations per second.\"</span><br/>\u00a0<br/>gcd<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span>    <span class=\"co1\">; Euclidean GCD</span><br/>    <span class=\"kw1\">while</span> b<br/>        t <span class=\"sy0\">:=</span> b<span class=\"sy0\">,</span> b <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">,</span> a <span class=\"sy0\">:=</span> t<br/>    <span class=\"kw1\">return</span><span class=\"sy0\">,</span> a<br/><span class=\"br0\">}</span></pre>"}, {"lang": "BaCon", "loc": 18, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' Rate counter</span><br/><span class=\"kw1\">FOR</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">3</span><br/>    <span class=\"kw1\">GOSUB</span> timeit<br/><span class=\"kw1\">NEXT</span><br/>\u00a0<br/>i = <span class=\"nu0\">2000</span><br/><span class=\"kw1\">GOSUB</span> timeit<br/><span class=\"kw1\">END</span><br/>\u00a0<br/>LABEL timeit<br/>    iter = <span class=\"nu0\">0</span><br/>    starter = <span class=\"kw1\">TIMER</span><br/>    <span class=\"kw1\">WHILE</span> <span class=\"kw1\">TRUE</span> <span class=\"kw1\">DO</span><br/>        INCR iter<br/>        <span class=\"kw1\">IF</span> <span class=\"kw1\">TIMER</span> &gt;= starter + i <span class=\"kw1\">THEN</span> BREAK<br/>    <span class=\"kw1\">WEND</span><br/>    <span class=\"kw1\">PRINT</span> iter, <span class=\"st0\">\" iterations in \"</span>, i, <span class=\"st0\">\" millisecond\"</span>, <span class=\"kw1\">IIF</span>$<span class=\"br0\">(</span>i &gt; <span class=\"nu0\">1</span>, <span class=\"st0\">\"s\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <br/>    <span class=\"kw1\">RETURN</span></pre>"}, {"lang": "BBC BASIC", "loc": 26, "block": "<pre class=\"text highlighted_source\">      PRINT \"Method 1: Calculate reciprocal of elapsed time:\"<br/>      FOR trial% = 1 TO 3<br/>        start% = TIME<br/>        PROCtasktomeasure<br/>        finish% = TIME<br/>        PRINT \"Rate = \"; 100 / (finish%-start%) \" per second\"<br/>      NEXT trial%<br/>\u00a0<br/>      PRINT '\"Method 2: Count completed tasks in one second:\"<br/>      FOR trial% = 1 TO 3<br/>        runs% = 0<br/>        finish% = TIME + 100<br/>        REPEAT<br/>          PROCtasktomeasure<br/>          IF TIME &lt; finish% runs% += 1<br/>        UNTIL TIME &gt;= finish%<br/>        PRINT \"Rate = \"; runs% \" per second\"<br/>      NEXT trial%<br/>      END<br/>\u00a0<br/>      REM This is an example, replace with the task you want to measure<br/>      DEF PROCtasktomeasure<br/>      LOCAL i%<br/>      FOR i% = 1 TO 1000000<br/>      NEXT<br/>      ENDPROC</pre>"}, {"lang": "C", "loc": 74, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;time.h&gt;</span><br/>\u00a0<br/><span class=\"co1\">// We only get one-second precision on most systems, as</span><br/><span class=\"co1\">// time_t only holds seconds.</span><br/><span class=\"kw4\">struct</span> rate_state_s<br/><span class=\"br0\">{</span><br/>    time_t lastFlush<span class=\"sy0\">;</span><br/>    time_t period<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> tickCount<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> tic_rate<span class=\"br0\">(</span><span class=\"kw4\">struct</span> rate_state_s<span class=\"sy0\">*</span> pRate<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    pRate<span class=\"sy0\">-&gt;</span>tickCount <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    time_t now <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/time.html\"><span class=\"kw3\">time</span></a><span class=\"br0\">(</span>NULL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>now <span class=\"sy0\">-</span> pRate<span class=\"sy0\">-&gt;</span>lastFlush<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> pRate<span class=\"sy0\">-&gt;</span>period<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">//TPS Report</span><br/>        <span class=\"kw4\">size_t</span> tps <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>pRate<span class=\"sy0\">-&gt;</span>tickCount <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            tps <span class=\"sy0\">=</span> pRate<span class=\"sy0\">-&gt;</span>tickCount <span class=\"sy0\">/</span> <span class=\"br0\">(</span>now <span class=\"sy0\">-</span> pRate<span class=\"sy0\">-&gt;</span>lastFlush<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%u tics per second.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> tps<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">//Reset</span><br/>        pRate<span class=\"sy0\">-&gt;</span>tickCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        pRate<span class=\"sy0\">-&gt;</span>lastFlush <span class=\"sy0\">=</span> now<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// A stub function that simply represents whatever it is</span><br/><span class=\"co1\">// that we want to multiple times.</span><br/><span class=\"kw4\">void</span> something_we_do<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"co1\">// We use volatile here, as many compilers will optimize away</span><br/>    <span class=\"co1\">// the for() loop otherwise, even without optimizations</span><br/>    <span class=\"co1\">// explicitly enabled.</span><br/>    <span class=\"co1\">//</span><br/>    <span class=\"co1\">// volatile tells the compiler not to make any assumptions</span><br/>    <span class=\"co1\">// about the variable, implying that the programmer knows more</span><br/>    <span class=\"co1\">// about that variable than the compiler, in this case.</span><br/>    <span class=\"kw4\">volatile</span> <span class=\"kw4\">size_t</span> anchor <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu12\">0xffff</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>x<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        anchor <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    time_t start <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/time.html\"><span class=\"kw3\">time</span></a><span class=\"br0\">(</span>NULL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">struct</span> rate_state_s rateWatch<span class=\"sy0\">;</span><br/>    rateWatch.<span class=\"me1\">lastFlush</span> <span class=\"sy0\">=</span> start<span class=\"sy0\">;</span><br/>    rateWatch.<span class=\"me1\">tickCount</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    rateWatch.<span class=\"me1\">period</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"co1\">// Report every five seconds.</span><br/>\u00a0<br/>    time_t latest <span class=\"sy0\">=</span> start<span class=\"sy0\">;</span><br/>    <span class=\"co1\">// Loop for twenty seconds</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>latest <span class=\"sy0\">=</span> start<span class=\"sy0\">;</span> <span class=\"br0\">(</span>latest <span class=\"sy0\">-</span> start<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span> latest <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/time.html\"><span class=\"kw3\">time</span></a><span class=\"br0\">(</span>NULL<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">// Do something.</span><br/>        something_we_do<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Note that we did something.</span><br/>        tic_rate<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>rateWatch<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 78, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;ctime&gt;</span><br/>\u00a0<br/><span class=\"co1\">// We only get one-second precision on most systems, as</span><br/><span class=\"co1\">// time_t only holds seconds.</span><br/><span class=\"kw2\">class</span> CRateState<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">protected</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">time_t</span> m_lastFlush<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">time_t</span> m_period<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">size_t</span> m_tickCount<span class=\"sy4\">;</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    CRateState<span class=\"br0\">(</span><span class=\"kw4\">time_t</span> period<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">void</span> Tick<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>CRateState<span class=\"sy4\">::</span><span class=\"me2\">CRateState</span><span class=\"br0\">(</span><span class=\"kw4\">time_t</span> period<span class=\"br0\">)</span> <span class=\"sy4\">:</span> m_lastFlush<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"kw2\">NULL</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>                                        m_period<span class=\"br0\">(</span>period<span class=\"br0\">)</span>,<br/>                                        m_tickCount<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> CRateState<span class=\"sy4\">::</span><span class=\"me2\">Tick</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    m_tickCount<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">time_t</span> now <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"kw2\">NULL</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>now <span class=\"sy2\">-</span> m_lastFlush<span class=\"br0\">)</span> <span class=\"sy1\">&gt;=</span> m_period<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">//TPS Report</span><br/>        <span class=\"kw4\">size_t</span> tps <span class=\"sy1\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>m_tickCount <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            tps <span class=\"sy1\">=</span> m_tickCount <span class=\"sy2\">/</span> <span class=\"br0\">(</span>now <span class=\"sy2\">-</span> m_lastFlush<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> tps <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" tics per second\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"co1\">//Reset</span><br/>        m_tickCount <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>        m_lastFlush <span class=\"sy1\">=</span> now<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// A stub function that simply represents whatever it is</span><br/><span class=\"co1\">// that we want to multiple times.</span><br/><span class=\"kw4\">void</span> something_we_do<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"co1\">// We use volatile here, as many compilers will optimize away</span><br/>    <span class=\"co1\">// the for() loop otherwise, even without optimizations</span><br/>    <span class=\"co1\">// explicitly enabled.</span><br/>    <span class=\"co1\">//</span><br/>    <span class=\"co1\">// volatile tells the compiler not to make any assumptions</span><br/>    <span class=\"co1\">// about the variable, implying that the programmer knows more</span><br/>    <span class=\"co1\">// about that variable than the compiler, in this case.</span><br/>    <span class=\"kw4\">volatile</span> <span class=\"kw4\">size_t</span> anchor <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu12\">0xffff</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>x<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        anchor <span class=\"sy1\">=</span> x<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">time_t</span> start <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"kw2\">NULL</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    CRateState rateWatch<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Loop for twenty seconds</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">time_t</span> latest <span class=\"sy1\">=</span> start<span class=\"sy4\">;</span> <span class=\"br0\">(</span>latest <span class=\"sy2\">-</span> start<span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"nu0\">20</span><span class=\"sy4\">;</span> latest <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"kw2\">NULL</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">// Do something.</span><br/>        something_we_do<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Note that we did something.</span><br/>        rateWatch.<span class=\"me1\">Tick</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>time <span class=\"br0\">(</span><span class=\"kw1\">do</span> some stuff<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 23, "block": "<pre class=\"d highlighted_source\">\u00a0<br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">datetime</span>.<span class=\"me1\">stopwatch</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> a<span class=\"sy0\">;</span><br/><span class=\"kw4\">void</span> f0<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw4\">void</span> f1<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw4\">auto</span> b <span class=\"sy0\">=</span> a<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw4\">void</span> f2<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw4\">auto</span> b <span class=\"sy0\">=</span> to<span class=\"sy0\">!</span><span class=\"kw4\">string</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">auto</span> r <span class=\"sy0\">=</span> benchmark<span class=\"sy0\">!</span><span class=\"br0\">(</span>f0<span class=\"sy0\">,</span> f1<span class=\"sy0\">,</span> f2<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>_000<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  writeln<span class=\"br0\">(</span><span class=\"st0\">\"Time fx took to run 10,000 times:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  writeln<span class=\"br0\">(</span><span class=\"st0\">\"f0: \"</span><span class=\"sy0\">,</span> r<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  writeln<span class=\"br0\">(</span><span class=\"st0\">\"f1: \"</span><span class=\"sy0\">,</span> r<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  writeln<span class=\"br0\">(</span><span class=\"st0\">\"f2: \"</span><span class=\"sy0\">,</span> r<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "E", "loc": 24, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeLamportSlot <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;</span>import<span class=\"sy0\">:</span>org.<span class=\"me1\">erights</span>.<span class=\"me1\">e</span>.<span class=\"me1\">elib</span>.<span class=\"me1\">slot</span>.<span class=\"me1\">makeLamportSlot</span><span class=\"sy0\">&gt;</span><br/>\u00a0<br/>The rate counter<span class=\"sy0\">:</span><br/>\u00a0<br/><span class=\"coMULTI\">/** Returns a function to call to report the event being counted, and an<br/>    EverReporter slot containing the current rate, as a float64 in units of<br/>    events per millisecond. */</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeRateCounter<span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/timer\"><span class=\"kw7\">timer</span></a><span class=\"sy0\">,</span> reportPeriod<span class=\"br0\">)</span> <span class=\"br0\">{</span>  <br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> count <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> start <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/timer\"><span class=\"kw7\">timer</span></a>.<span class=\"me1\">now</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> <span class=\"sy0\">&amp;</span>rate <span class=\"sy0\">:=</span> makeLamportSlot<span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/nullOk\"><span class=\"kw6\">nullOk</span></a><span class=\"br0\">[</span><a href=\"http://wiki.erights.org/wiki/float64\"><span class=\"kw6\">float64</span></a><span class=\"br0\">]</span><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> signal<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> time <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/timer\"><span class=\"kw7\">timer</span></a>.<span class=\"me1\">now</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        count <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>        <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>time <span class=\"sy0\">&gt;=</span> start <span class=\"sy0\">+</span> reportPeriod<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            rate <span class=\"sy0\">:=</span> count <span class=\"sy0\">/</span> <span class=\"br0\">(</span>time <span class=\"sy0\">-</span> start<span class=\"br0\">)</span><br/>            start <span class=\"sy0\">:=</span> time<br/>            count <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    return <span class=\"br0\">[</span>signal<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>rate<span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Erlang", "loc": 35, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> rate_counter <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>fun_during_seconds<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">fun_during_seconds</span><span class=\"br0\">(</span> <span class=\"re5\">Fun</span><span class=\"sy1\">,</span> <span class=\"re5\">Seconds</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">My_pid</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Ref</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">make_ref</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <span class=\"re5\">Pid</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">spawn</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">fun_during_seconds_loop</span><span class=\"br0\">(</span> <span class=\"re5\">My_pid</span><span class=\"sy1\">,</span> <span class=\"re5\">Fun</span> <span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <span class=\"kw3\">time</span>r:<span class=\"re3\">send_after</span><span class=\"br0\">(</span> <span class=\"re5\">Seconds</span> <span class=\"sy3\">*</span> <span class=\"nu0\">1000</span><span class=\"sy1\">,</span> <span class=\"re5\">My_pid</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span>stop<span class=\"sy1\">,</span> <span class=\"re5\">Ref</span><span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">N</span> <span class=\"sy3\">=</span> <span class=\"re3\">fun_during_seconds_receive_loop</span><span class=\"br0\">(</span> <span class=\"re5\">Ref</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">exit</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> kill <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">N</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Results</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"kw3\">time</span>r:<span class=\"re3\">tc</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello, world!~n\"</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">_X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Times</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">_Returned</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Results</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Times ~p, average ~p microseconds.~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Times</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sum</span><span class=\"br0\">(</span><span class=\"re5\">Times</span><span class=\"br0\">)</span> <span class=\"sy3\">/</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">Times</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">N</span> <span class=\"sy3\">=</span>\t<span class=\"re3\">fun_during_seconds</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">123</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Square root of 123, during 2\tseconds, was done ~p times.~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">N</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">fun_during_seconds_loop</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">Fun</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">F</span><span class=\"re3\">un</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>one_time<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">fun_during_seconds_loop</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">Fun</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">fun_during_seconds_receive_loop</span><span class=\"br0\">(</span> <span class=\"re5\">Ref</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"kw1\">receive</span><br/>\t<span class=\"br0\">{</span>stop<span class=\"sy1\">,</span> <span class=\"re5\">Ref</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">N</span><span class=\"sy1\">;</span><br/>        <span class=\"br0\">{</span>one_time<span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">fun_during_seconds_receive_loop</span><span class=\"br0\">(</span> <span class=\"re5\">Ref</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 37, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM RATE_COUNTER<br/>\u00a0<br/>!<br/>! for rosettacode.org<br/>!<br/>\u00a0<br/>!<br/>! This is an example, replace with the task you want to  measure<br/>!<br/>PROCEDURE TASK_TO_MEASURE<br/>  LOCAL I<br/>    FOR I=1 TO 1000000 DO<br/>    END FOR<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>    PRINT(\"Method 1: Calculate reciprocal of elapsed time:\")<br/>    FOR TRIAL%=1 TO 3 DO<br/>      START=TIMER<br/>      TASK_TO_MEASURE<br/>      FINISH=TIMER<br/>      PRINT(\"Rate =\";100/(FINISH-START);\"per second\")<br/>    END FOR<br/>\u00a0<br/>    PRINT(\"Method 2: Count completed tasks in one minute:\")<br/>    FOR TRIAL%=1 TO 3 DO<br/>      RUNS%=0<br/>      FINISH=TIMER+60<br/>      REPEAT<br/>        TASK_TO_MEASURE<br/>        IF TIMER&lt;FINISH THEN RUNS%+=1 END IF<br/>      UNTIL TIMER&gt;=FINISH<br/>      PRINT(\"Rate =\";RUNS%;\"per minute\")<br/>    END FOR<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 4, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">DO</span> I <span class=\"sy0\">=</span> FIRST,LAST<br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>PROGRESSNOTE<span class=\"br0\">(</span><span class=\"br0\">(</span>I <span class=\"sy0\">-</span> FIRST<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>LAST <span class=\"sy0\">-</span> FIRST <span class=\"sy0\">+</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Reached \"</span>,I,<span class=\"st0\">\", towards \"</span>,LAST<br/>        ...<span class=\"me1\">much</span> computation...<br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span></pre>"}, {"lang": "Go", "loc": 52, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// representation of time.Time is nanosecond, actual resolution system specific</span><br/><span class=\"kw1\">type</span> rateStateS <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    lastFlush <a href=\"http://golang.org/search?q=time.Time\"><span class=\"kw5\">time.<span class=\"me1\">Time</span></span></a><br/>    period    time<span class=\"sy3\">.</span>Duration<br/>    tickCount <span class=\"kw4\">int</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> ticRate<span class=\"sy1\">(</span>pRate <span class=\"sy3\">*</span>rateStateS<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    pRate<span class=\"sy3\">.</span>tickCount<span class=\"sy2\">++</span><br/>    now <span class=\"sy2\">:=</span> time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><br/>    <span class=\"kw1\">if</span> now<span class=\"sy3\">.</span>Sub<span class=\"sy1\">(</span>pRate<span class=\"sy3\">.</span>lastFlush<span class=\"sy1\">)</span> &gt;<span class=\"sy2\">=</span> pRate<span class=\"sy3\">.</span>period <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// TPS Report</span><br/>        tps <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy3\">.</span><br/>        <span class=\"kw1\">if</span> pRate<span class=\"sy3\">.</span>tickCount &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            tps <span class=\"sy2\">=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>pRate<span class=\"sy3\">.</span>tickCount<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> now<span class=\"sy3\">.</span>Sub<span class=\"sy1\">(</span>pRate<span class=\"sy3\">.</span>lastFlush<span class=\"sy1\">)</span><span class=\"sy3\">.</span>Seconds<span class=\"sy1\">()</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>tps<span class=\"sy1\">,</span> <span class=\"st0\">\"tics per second.\"</span><span class=\"sy1\">)</span><br/>\u00a0<br/>        <span class=\"co1\">// Reset</span><br/>        pRate<span class=\"sy3\">.</span>tickCount <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>        pRate<span class=\"sy3\">.</span>lastFlush <span class=\"sy2\">=</span> now<br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> somethingWeDo<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    time<span class=\"sy3\">.</span>Sleep<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Duration<span class=\"sy1\">(</span><span class=\"nu1\">9e7</span> <span class=\"sy3\">+</span> rand<span class=\"sy3\">.</span>Int63n<span class=\"sy1\">(</span><span class=\"nu1\">2e7</span><span class=\"sy1\">)))</span> <span class=\"co1\">// sleep about .1 second.</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    start <span class=\"sy2\">:=</span> time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><br/>\u00a0<br/>    rateWatch <span class=\"sy2\">:=</span> rateStateS<span class=\"sy1\">{</span><br/>        lastFlush<span class=\"sy1\">:</span> start<span class=\"sy1\">,</span><br/>        period<span class=\"sy1\">:</span>    <span class=\"nu0\">5</span> <span class=\"sy3\">*</span> time<span class=\"sy3\">.</span>Second<span class=\"sy1\">,</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Loop for twenty seconds</span><br/>    latest <span class=\"sy2\">:=</span> start<br/>    <span class=\"kw1\">for</span> latest<span class=\"sy3\">.</span>Sub<span class=\"sy1\">(</span>start<span class=\"sy1\">)</span> &lt; <span class=\"nu0\">20</span><span class=\"sy3\">*</span>time<span class=\"sy3\">.</span>Second <span class=\"sy1\">{</span><br/>        somethingWeDo<span class=\"sy1\">()</span><br/>        ticRate<span class=\"sy1\">(</span>&amp;rateWatch<span class=\"sy1\">)</span><br/>        latest <span class=\"sy2\">=</span> time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 24, "block": "<pre class=\"haskell highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Concurrent<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Time<br/>\u00a0<br/>getTime <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> DiffTime<br/>getTime <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> utctDayTime getCurrentTime<br/>\u00a0<br/>addSample <span class=\"sy0\">::</span> MVar <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>addSample q v <span class=\"sy0\">=</span> modifyMVar<span class=\"sy0\">_</span> q <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">.</span> <span class=\"br0\">(</span>v:<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>timeit <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">[</span>DiffTime<span class=\"br0\">]</span><br/>timeit n task <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    samples <span class=\"sy0\">&lt;-</span> newMVar <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    forM<span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span>n<span class=\"br0\">]</span> <span class=\"sy0\">$</span> \\n <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>        t1 <span class=\"sy0\">&lt;-</span> getTime<br/>        task<br/>        t2 <span class=\"sy0\">&lt;-</span> getTime<br/>        addSample samples <span class=\"br0\">(</span>t2 <span class=\"sy0\">-</span> t1<span class=\"br0\">)</span><br/>\u00a0<br/>    readMVar samples<br/>\u00a0<br/>main <span class=\"sy0\">=</span> timeit <span class=\"nu0\">10</span> <span class=\"br0\">(</span>threadDelay <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "HicEst", "loc": 20, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">CHARACTER</span> prompt<span class=\"sy1\">=</span><span class=\"st0\">'Count \"Hits++\" for 5 sec, get current rate'</span><br/>\u00a0<br/><span class=\"kw1\">DLG</span><span class=\"br0\">(</span>Button<span class=\"sy1\">=</span><span class=\"st0\">\"1:&amp;Hits++\"</span><span class=\"sy1\">,</span> <span class=\"kw1\">CALL</span><span class=\"sy1\">=</span><span class=\"st0\">\"cb\"</span><span class=\"sy1\">,</span> B<span class=\"sy1\">=</span><span class=\"st0\">\"2:&amp;Count 5sec\"</span><span class=\"sy1\">,</span> B<span class=\"sy1\">=</span><span class=\"st0\">\"3:&amp;Rate\"</span><span class=\"sy1\">,</span> RC<span class=\"sy1\">=</span>retcod<span class=\"sy1\">,</span> TItle<span class=\"sy1\">=</span>prompt<span class=\"sy1\">,</span> WIN<span class=\"sy1\">=</span>hdl<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">SUBROUTINE</span> cb              <span class=\"co1\">! callback after dialog buttons</span><br/>  <span class=\"kw1\">IF</span><span class=\"br0\">(</span>retcod <span class=\"sy1\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>     <span class=\"co1\">! \"Hits++\" button</span><br/>    Hits <span class=\"sy1\">=</span> Hits <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">ELSEIF</span><span class=\"br0\">(</span>retcod <span class=\"sy1\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"co1\">! \"Count 5 sec\" button</span><br/>    Hits <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">ALARM</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span>            <span class=\"co1\">! call F5 in 5 seconds</span><br/>    t_start <span class=\"sy1\">=</span> <span class=\"kw1\">TIME</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ELSE</span>                     <span class=\"co1\">! \"Rate\" button</span><br/>    sec <span class=\"sy1\">=</span> <span class=\"kw1\">TIME</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-</span> t_start<br/>    <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>StatusBar<span class=\"br0\">)</span> <span class=\"st0\">'Average rate since last \"5 sec\" button = '</span><span class=\"sy1\">,</span> hits<span class=\"sy1\">/</span>sec<span class=\"sy1\">,</span> <span class=\"st0\">\" Hz\"</span><br/>  <span class=\"kw1\">ENDIF</span><br/><span class=\"kw1\">END</span><br/>\u00a0<br/><span class=\"kw1\">SUBROUTINE</span> F5 <span class=\"co1\">! called 5 sec after button \"5 sec\"</span><br/>  <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>StatusBar<span class=\"br0\">)</span> Hits<span class=\"sy1\">,</span> <span class=\"st0\">\"hits last 5 sec\"</span><br/><span class=\"kw1\">END</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">   <span class=\"kw2\">x</span> <span class=\"sy0\">(</span><span class=\"nu0\">6</span>!:<span class=\"nu0\">2</span><span class=\"sy0\">)</span> <span class=\"kw2\">y</span></pre>"}, {"lang": "Java", "loc": 19, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.function.Consumer</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> RateCounter <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span> d <span class=\"sy0\">:</span> benchmark<span class=\"br0\">(</span><span class=\"nu0\">10</span>, x <span class=\"sy0\">-&gt;</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> benchmark<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, Consumer<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> f, <span class=\"kw4\">int</span> arg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> timings <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">long</span> time <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">nanoTime</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">accept</span><span class=\"br0\">(</span>arg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            timings<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">nanoTime</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> time<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> timings<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 14, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> millis<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Gets current time in milliseconds.</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw4\">Date</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">getTime</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Executes function 'func' n times, returns array of execution times. */</span><br/><span class=\"kw1\">function</span> benchmark<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> func<span class=\"sy0\">,</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> times <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> m <span class=\"sy0\">=</span> millis<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    func.<span class=\"me1\">apply</span><span class=\"br0\">(</span>func<span class=\"sy0\">,</span> args<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    times.<span class=\"me1\">push</span><span class=\"br0\">(</span>millis<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> m<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> times<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 20, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/>typealias Func<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>T<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> T<br/>\u00a0<br/>fun cube<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n <span class=\"sy0\">*</span> n<br/>\u00a0<br/>fun <span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> benchmark<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, func<span class=\"sy0\">:</span> Func<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span>, arg<span class=\"sy0\">:</span> T<span class=\"br0\">)</span><span class=\"sy0\">:</span> LongArray <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> times <span class=\"sy0\">=</span> LongArray<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> System.<span class=\"me1\">nanoTime</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>         func<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/>         times<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> System.<span class=\"me1\">nanoTime</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - m<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> times<br/><span class=\"br0\">}</span> <br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Timings (nanoseconds)\u00a0: \"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>time in benchmark<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"sy0\">::</span>cube, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span>time<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 58, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Rate counter\"</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Precision: system clock, ms \"</span>;<br/>t0<span class=\"sy0\">=</span><span class=\"kw2\">time$</span><span class=\"br0\">(</span><span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">while</span> <span class=\"kw2\">time$</span><span class=\"br0\">(</span><span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>t0    <span class=\"co1\">'busy loop till click ticks</span><br/><span class=\"kw1\">wend</span><br/><span class=\"kw1\">print</span> <span class=\"kw2\">time$</span><span class=\"br0\">(</span><span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>t0<br/><span class=\"kw1\">print</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Run jobs N times, report every time\"</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"After that, report average time\"</span><br/>N<span class=\"sy0\">=</span><span class=\"nu0\">10</span><br/>t00<span class=\"sy0\">=</span><span class=\"kw2\">time$</span><span class=\"br0\">(</span><span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">scan</span><br/>    t0<span class=\"sy0\">=</span><span class=\"kw2\">time$</span><span class=\"br0\">(</span><span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">'any code we want to measure goes here</span><br/>    res <span class=\"sy0\">=</span> testFunc<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">'end of measured code</span><br/>    t1<span class=\"sy0\">=</span><span class=\"kw2\">time$</span><span class=\"br0\">(</span><span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span><br/>    ElapsedTime <span class=\"sy0\">=</span> t1<span class=\"sy0\">-</span>t0<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Job #\"</span>;i;<span class=\"st0\">\" Elapsed time, ms \"</span>;ElapsedTime<span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"sy0\">/</span>ElapsedTime; <span class=\"st0\">\" ticks per second\"</span><br/><span class=\"kw1\">next</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"---------------------------------\"</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Average time, ms, is \"</span>;<span class=\"br0\">(</span>t1<span class=\"sy0\">-</span>t00<span class=\"br0\">)</span><span class=\"sy0\">/</span>N<span class=\"sy0\">,</span>  <span class=\"nu0\">1000</span><span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"br0\">(</span>t1<span class=\"sy0\">-</span>t00<span class=\"br0\">)</span><span class=\"sy0\">/</span>N<span class=\"br0\">)</span>; <span class=\"st0\">\" ticks per second\"</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">print</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Run jobs for not less then N seconds (if time up, it'll finish last job)\"</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"After that, report average time\"</span><br/>\u00a0<br/>NSec<span class=\"sy0\">=</span><span class=\"nu0\">5</span><br/>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>t00<span class=\"sy0\">=</span><span class=\"kw2\">time$</span><span class=\"br0\">(</span><span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">while</span> <span class=\"kw2\">time$</span><span class=\"br0\">(</span><span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>t00<span class=\"sy0\">+</span>NSec<span class=\"sy0\">*</span><span class=\"nu0\">1000</span><br/>    <span class=\"kw1\">scan</span><br/>    i <span class=\"sy0\">=</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    t0<span class=\"sy0\">=</span><span class=\"kw2\">time$</span><span class=\"br0\">(</span><span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">'any code we want to measure goes here</span><br/>    res <span class=\"sy0\">=</span> testFunc<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">'end of measured code</span><br/>    t1<span class=\"sy0\">=</span><span class=\"kw2\">time$</span><span class=\"br0\">(</span><span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span><br/>    ElapsedTime <span class=\"sy0\">=</span> t1<span class=\"sy0\">-</span>t0<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Job #\"</span>;i;<span class=\"st0\">\" Elapsed time, ms \"</span>;ElapsedTime<span class=\"sy0\">,</span>  <span class=\"nu0\">1000</span><span class=\"sy0\">/</span>ElapsedTime; <span class=\"st0\">\" ticks per second\"</span><br/><span class=\"kw1\">wend</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"---------------------------------\"</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Average time, ms, is \"</span>;<span class=\"br0\">(</span>t1<span class=\"sy0\">-</span>t00<span class=\"br0\">)</span><span class=\"sy0\">/</span>i<span class=\"sy0\">,</span>  <span class=\"nu0\">1000</span><span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"br0\">(</span>t1<span class=\"sy0\">-</span>t00<span class=\"br0\">)</span><span class=\"sy0\">/</span>i<span class=\"br0\">)</span>; <span class=\"st0\">\" ticks per second\"</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> testFunc<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    s<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">30000</span><br/>        s<span class=\"sy0\">=</span>s<span class=\"sy0\">+</span><span class=\"kw2\">sin</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">30000</span><br/>    <span class=\"kw1\">next</span><br/>    testFunc <span class=\"sy0\">=</span> s<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span> <br/>\u00a0</pre>"}, {"lang": "OxygenBasic", "loc": 120, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>'========<br/>'TIME API<br/>'========<br/>\u00a0<br/>'http://msdn.microsoft.com/en-us/library/windows/desktop/ms724950(v=vs.85).aspx<br/>\u00a0<br/>extern lib \"kernel32.dll\"<br/>\u00a0<br/>type SYSTEMTIME<br/>  WORD wYear<br/>  WORD wMonth<br/>  WORD wDayOfWeek<br/>  WORD wDay<br/>  WORD wHour<br/>  WORD wMinute<br/>  WORD wSecond<br/>  WORD wMilliseconds<br/>end type<br/>\u00a0<br/>void GetSystemTime(SYSTEMTIME*t)<br/>void GetLocalTime(SYSTEMTIME*t)<br/>void QueryPerformanceCounter(quad*c)<br/>void QueryPerformanceFrequency(quad*freq)<br/>void Sleep(sys millisecods)<br/>\u00a0<br/>end extern<br/>\u00a0<br/>String WeekDay[7]={\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",<br/>\"Thursday\",\"Friday\",\"Saturday\"}<br/>\u00a0<br/>String MonthName[12]={\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",<br/>\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"}<br/>\u00a0<br/>\u00a0<br/>'==============<br/>Class Jobrecord<br/>'==============<br/>\u00a0<br/>  has SYSTEMTIME stt<br/>  has SYSTEMTIME fin<br/>  quad countA<br/>  quad CountB<br/>  quad freq<br/>  sys  serial<br/>\u00a0<br/>  method pad(string s) as string<br/>    method=s<br/>    if len(method)&lt;2 then method=\"0\"+method<br/>  end method<br/>\u00a0<br/>\u00a0<br/>  method ShowDateTime(sys a,f) as string<br/>\u00a0<br/>  SYSTEMTIME *t<br/>\u00a0<br/>  if a then<br/>    @<a class=\"__cf_email__\" data-cfemail=\"f084cdb096999e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>  else<br/>    @<a class=\"__cf_email__\" data-cfemail=\"74004934070000\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>  end if<br/>  '<br/>  String month=pad(str t.wMonth)<br/>  String day=pad(str t.wDay)<br/>  if f=0 then <br/>    return \"\" t.wYear \"-\" month \"-\" day \"    \"+<br/>    pad(t.wHour) \":\" pad(t.wMinute) \":\" pad(t.wSecond) \":\" t.wMilliSeconds<br/>  elseif f=1<br/>    return WeekDay[t.wDayOfWeek+1 and 7 ] \" \" +<br/>    MonthName[t.wMonth and 31] \" \" day \" \" t.wYear<br/>  end if<br/>  end method<br/>\u00a0<br/>  method Start()<br/>  QueryPerformanceCounter countA<br/>  QueryPerformanceFrequency freq<br/>  serial++<br/>  GetLocalTime stt<br/>  end method<br/>\u00a0<br/>  method Finish()<br/>  GetLocalTime fin<br/>  QueryPerformanceCounter countB<br/>  end method<br/>\u00a0<br/>\u00a0<br/>  method ShowDuration() as string<br/>  return str((countB-countA)/freq,6) 'seconds with microsecond resolution<br/>  end method<br/>\u00a0<br/>  method report() as string<br/>  string tab=chr(9), cr=chr(13)+chr(10)<br/>  method=\"Job:\" tab serial cr +<br/>  \"Duration:\"   tab ShowDuration() cr +<br/>  \"Start: \"     tab ShowDateTime(0,0) cr +<br/>  \"Finish:\"     tab ShowDateTime(1,0) cr +<br/>  ShowDateTime(1,1) cr<br/>  end method<br/>\u00a0<br/>end class<br/>\u00a0<br/>'#recordof JobRecord<br/>\u00a0<br/>'====<br/>'TEST<br/>'====<br/>\u00a0<br/>JobRecord JR<br/>JR.start<br/>sleep 100 'JOB!<br/>JR.finish<br/>print JR.Report<br/>'putfile \"s.txt\",JR.Report<br/>'<br/>'Job:\t1<br/>'Duration:\t0.099026<br/>'Start: \t2012-07-01    00:52:36:874<br/>'Finish:\t2012-07-01    00:52:36:974<br/>'Sunday July 01 2012<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 5, "block": "<pre class=\"text highlighted_source\">jobRateCounted[fn_,Y_Integer]:=First[AbsoluteTiming[Do[fn,{Y}]]/Y;<br/>SetAttributes[jobRateCounted,HoldFirst]<br/>\u00a0<br/>jobRatePeriod[fn_,time_]:=Block[{n=0},TimeConstrained[While[True,fn;n++]];n/time];<br/>SetAttributes[jobRatePeriod,HoldFirst]</pre>"}, {"lang": "PARI/GP", "loc": 10, "block": "<pre class=\"parigp highlighted_source\">a<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">;</span><br/>b<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">20000000</span><span class=\"sy0\">,</span><br/>  a<span class=\"sy0\">=</span>a<span class=\"sy0\">+</span><span class=\"kw1\">gettime</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>a<span class=\"sy0\">&gt;</span><span class=\"nu1\">60000</span><span class=\"sy0\">,</span><span class=\"kw1\">print</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span>a<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">;</span>b<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">''</span><span class=\"re1\">'code</span> to test<span class=\"sy0\">'''</span><br/>  b<span class=\"sy0\">=</span>b<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><br/>  a<span class=\"sy0\">=</span>a<span class=\"sy0\">+</span><span class=\"kw1\">gettime</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>a<span class=\"sy0\">&gt;</span><span class=\"nu1\">60000</span><span class=\"sy0\">,</span><span class=\"kw1\">print</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span>a<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">;</span>b<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 12, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Benchmark<span class=\"sy0\">;</span><br/>\u00a0<br/>timethese COUNT<span class=\"sy0\">,</span><span class=\"br0\">{</span> <span class=\"st_h\">'Job1'</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">&amp;job1</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Job2'</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">&amp;job2</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> job1<br/><span class=\"br0\">{</span><br/>\t<span class=\"sy0\">...</span>job1 code<span class=\"sy0\">...</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> job2<br/><span class=\"br0\">{</span><br/>\t<span class=\"sy0\">...</span>job2 code<span class=\"sy0\">...</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 20, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> runrate<span class=\"br0\">(</span><span class=\"re0\">$N</span> <span class=\"kw1\">where</span> <span class=\"re0\">$N</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">&amp;todo</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$N</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$start</span> <span class=\"sy0\">=</span> now<span class=\"sy0\">;</span><br/>    todo<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">while</span> <span class=\"sy0\">--</span><span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$end</span> <span class=\"sy0\">=</span> now<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"Start time: \"</span><span class=\"sy0\">,</span> DateTime<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"re0\">$start</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Str</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"End time: \"</span><span class=\"sy0\">,</span> DateTime<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"re0\">$end</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Str</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$elapsed</span> <span class=\"sy0\">=</span> <span class=\"re0\">$end</span> <span class=\"sy0\">-</span> <span class=\"re0\">$start</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"Elapsed time: $elapsed seconds\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"Rate: { ($N / $elapsed).fmt('%.2f') } per second<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> factorial<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"kw1\">state</span> <span class=\"sy0\">@</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"sy0\">//=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">??</span> <span class=\"nu0\">1</span> <span class=\"sy0\">!!</span> <span class=\"re0\">$n</span> <span class=\"sy0\">*</span> factorial<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>runrate <span class=\"nu0\">10000</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"kw1\">state</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> factorial<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>runrate <span class=\"nu0\">10000</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"kw1\">state</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> factorial<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 8, "block": "<pre class=\"text highlighted_source\">(prin \"Hit a key ... \")<br/>(key)<br/>(prinl)<br/>(let Usec (usec)<br/>   (prin \"Hit another key ... \")<br/>   (key)<br/>   (prinl)<br/>   (prinl \"This took \" (format (- (usec) Usec) 6) \" seconds\") )</pre>"}, {"lang": "PowerShell", "loc": 22, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"br0\">[</span>datetime<span class=\"br0\">]</span><span class=\"re0\">$start</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Get-Date</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"br0\">[</span>timespan<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"re0\">$times</span> <span class=\"sy0\">=</span> <span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$count</span>; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span> <br/>    <span class=\"kw1\">Measure-Command</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span>..<span class=\"nu0\">999999</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Out-Null</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">[</span>datetime<span class=\"br0\">]</span><span class=\"re0\">$end</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Get-Date</span><br/>\u00a0<br/><span class=\"re0\">$rate</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>PSCustomObject<span class=\"br0\">]</span><span class=\"sy0\">@</span><span class=\"br0\">{</span><br/>    StartTime      <span class=\"sy0\">=</span> <span class=\"re0\">$start</span><br/>    EndTime        <span class=\"sy0\">=</span> <span class=\"re0\">$end</span><br/>    Duration       <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$end</span> <span class=\"sy0\">-</span> <span class=\"re0\">$start</span><span class=\"br0\">)</span>.TotalSeconds<br/>    TimesRun       <span class=\"sy0\">=</span> <span class=\"re0\">$count</span><br/>    AverageRunTime <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$times</span>.TotalSeconds <span class=\"sy0\">|</span> <span class=\"kw1\">Measure-Object</span> <span class=\"kw5\">-Average</span><span class=\"br0\">)</span>.Average<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$rate</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Format-List</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 35, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span>.d TimesPSec<span class=\"br0\">(</span>Reset<span class=\"sy0\">=</span>#False<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Static</span> starttime, cnt<br/>  <span class=\"kw1\">Protected</span> Result.d, dt<br/>  <span class=\"kw1\">If</span> Reset<br/>    starttime<span class=\"sy0\">=</span><span class=\"kw2\">ElapsedMilliseconds</span><span class=\"br0\">(</span><span class=\"br0\">)</span>: cnt<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Else</span><br/>    cnt<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    dt<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"kw2\">ElapsedMilliseconds</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>starttime<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> dt<br/>      Result<span class=\"sy0\">=</span>cnt<span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"kw2\">ElapsedMilliseconds</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>starttime<span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> Result<span class=\"sy0\">*</span><span class=\"nu0\">1000</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenWindow</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,#PB_Ignore,#PB_Ignore,<span class=\"nu0\">220</span>,<span class=\"nu0\">110</span>,<span class=\"st0\">\"\"</span>,#PB_Window_SystemMenu<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> Event, r.d, GadgetNumber<br/>  <span class=\"kw2\">ButtonGadget</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">10</span>, <span class=\"nu0\">5</span>,<span class=\"nu0\">200</span>,<span class=\"nu0\">35</span>,<span class=\"st0\">\"Click me!\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">ButtonGadget</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">10</span>,<span class=\"nu0\">70</span>,<span class=\"nu0\">100</span>,<span class=\"nu0\">35</span>,<span class=\"st0\">\"Reset\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">TextGadget</span>  <span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">10</span>,<span class=\"nu0\">45</span>,<span class=\"nu0\">200</span>,<span class=\"nu0\">25</span>,<span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  TimesPSec<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Repeat</span><br/>    Event<span class=\"sy0\">=</span><span class=\"kw2\">WaitWindowEvent</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> Event<span class=\"sy0\">=</span>#PB_Event_Gadget <br/>      GadgetNumber <span class=\"sy0\">=</span><span class=\"kw2\">EventGadget</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> GadgetNumber<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>        r<span class=\"sy0\">=</span>TimesPSec<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">SetGadgetText</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"st0\">\"You are clicking at \"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>r,<span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" Hz.\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">ElseIf</span> GadgetNumber<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>        TimesPSec<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">SetGadgetText</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"st0\">\"Counter zeroed.\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Until</span> Event<span class=\"sy0\">=</span>#PB_Event_CloseWindow<br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 58, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">subprocess</span><br/><span class=\"kw1\">import</span> <span class=\"kw3\">time</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Tlogger<span class=\"br0\">(</span><span class=\"kw2\">object</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">counts</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">tottime</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">laststart</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">lastreport</span> <span class=\"sy0\">=</span> <span class=\"kw3\">time</span>.<span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> logstart<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">laststart</span> <span class=\"sy0\">=</span> <span class=\"kw3\">time</span>.<span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> logend<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">counts</span> +<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">tottime</span> +<span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">time</span>.<span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span>-<span class=\"kw2\">self</span>.<span class=\"me1\">laststart</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw3\">time</span>.<span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span>-<span class=\"kw2\">self</span>.<span class=\"me1\">lastreport</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">5.0</span>:   <span class=\"co1\"># report once every 5 seconds</span><br/>           <span class=\"kw2\">self</span>.<span class=\"me1\">report</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> report<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw2\">self</span>.<span class=\"me1\">counts</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">4</span>*<span class=\"kw2\">self</span>.<span class=\"me1\">tottime</span><span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">print</span> <span class=\"st0\">\"Subtask execution rate:\u00a0%f times/second\"</span>% <span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">counts</span>/<span class=\"kw2\">self</span>.<span class=\"me1\">tottime</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span>:<br/>            <span class=\"kw1\">print</span> <span class=\"st0\">\"Average execution time:\u00a0%f seconds\"</span>%<span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">tottime</span>/<span class=\"kw2\">self</span>.<span class=\"me1\">counts</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">lastreport</span> <span class=\"sy0\">=</span> <span class=\"kw3\">time</span>.<span class=\"kw3\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> taskTimer<span class=\"br0\">(</span> n<span class=\"sy0\">,</span> subproc_args <span class=\"br0\">)</span>:<br/>    logger <span class=\"sy0\">=</span> Tlogger<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>        logger.<span class=\"me1\">logstart</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        p <span class=\"sy0\">=</span> <span class=\"kw3\">subprocess</span>.<span class=\"me1\">Popen</span><span class=\"br0\">(</span>subproc_args<span class=\"br0\">)</span><br/>        p.<span class=\"me1\">wait</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        logger.<span class=\"me1\">logend</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    logger.<span class=\"me1\">report</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw3\">timeit</span><br/><span class=\"kw1\">import</span> <span class=\"kw3\">sys</span><br/>\u00a0<br/><span class=\"kw1\">def</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span>:<br/>\u00a0<br/>    <span class=\"co1\"># for accurate timing of code segments </span><br/>    s <span class=\"sy0\">=</span> <span class=\"st0\">\"\"\"j = [4*n for n in range(50)]\"\"\"</span><br/>    timer <span class=\"sy0\">=</span> <span class=\"kw3\">timeit</span>.<span class=\"me1\">Timer</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    rzlts <span class=\"sy0\">=</span> timer.<span class=\"me1\">repeat</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">5000</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> t <span class=\"kw1\">in</span> rzlts:<br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"Time for 5000 executions of statement = \"</span><span class=\"sy0\">,</span>t<br/>\u00a0<br/>    <span class=\"co1\"># subprocess execution timing</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"#times:\"</span><span class=\"sy0\">,</span><span class=\"kw3\">sys</span>.<span class=\"me1\">argv</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Command:\"</span><span class=\"sy0\">,</span><span class=\"kw3\">sys</span>.<span class=\"me1\">argv</span><span class=\"br0\">[</span><span class=\"nu0\">2</span>:<span class=\"br0\">]</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">for</span> k <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>:<br/>       taskTimer<span class=\"br0\">(</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw3\">sys</span>.<span class=\"me1\">argv</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw3\">sys</span>.<span class=\"me1\">argv</span><span class=\"br0\">[</span><span class=\"nu0\">2</span>:<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; Racket has a useful `time*' macro that does just what's requested:<br/>;; run some expression N times, and produce timing results<br/>(require unstable/time)<br/>\u00a0<br/>;; Sample use:<br/>(define (fib n) (if (&lt;= n 1) n (+ (fib (- n 1)) (fib (- n 2)))))<br/>(time* 10 (fib 38))<br/>\u00a0<br/>;; But of course, can be used to measure external processes too:<br/>(time* 10 (system \"sleep 1\"))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 35, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program reports on the amount of elapsed time 4 different tasks use (wall clock).*/</span><br/><span class=\"kw6\">time</span><span class=\"sy0\">.</span>=                                           <span class=\"coMULTI\">/*nullify times for all the tasks below*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"kw1\">call</span> <span class=\"kw6\">time</span> <span class=\"st0\">'Reset'</span>                                <span class=\"coMULTI\">/*reset the REXX (elapsed) clock timer.*/</span><br/>                                                 <span class=\"coMULTI\">/*show pi in hex to  2,000 dec. digits.*/</span><br/>                  task<span class=\"sy0\">.</span>1= <span class=\"st0\">'base(pi,16) \u00a0;;;  lowercase   digits 2k   echoOptions'</span><br/>                  <span class=\"kw1\">call</span> <span class=\"st0\">'$CALC'</span> task<span class=\"sy0\">.</span>1            <span class=\"coMULTI\">/*perform task number one  (via $CALC).*/</span><br/><span class=\"kw6\">time</span><span class=\"sy0\">.</span>1=<span class=\"kw6\">time</span><span class=\"br0\">(</span><span class=\"st0\">'E'</span><span class=\"br0\">)</span>                                 <span class=\"coMULTI\">/*get and save the time used by task 1.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"kw1\">call</span> <span class=\"kw6\">time</span> <span class=\"st0\">'Reset'</span>                                <span class=\"coMULTI\">/*reset the REXX (elapsed) clock timer.*/</span><br/>                                                 <span class=\"coMULTI\">/*get primes  40000 \u2500\u2500\u25ba 40800 and      */</span><br/>                                                 <span class=\"coMULTI\">/*show their differences.              */</span><br/>                  task<span class=\"sy0\">.</span>2= <span class=\"st0\">'diffs[ prime(40k, 40.8k) ] \u00a0;;;  GRoup 20'</span><br/>                  <span class=\"kw1\">call</span> <span class=\"st0\">'$CALC'</span> task<span class=\"sy0\">.</span>2            <span class=\"coMULTI\">/*perform task number two  (via $CALC).*/</span><br/><span class=\"kw6\">time</span><span class=\"sy0\">.</span>2=<span class=\"kw6\">time</span><span class=\"br0\">(</span><span class=\"st0\">'E'</span><span class=\"br0\">)</span>                                 <span class=\"coMULTI\">/*get and save the time used by task 2.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"kw1\">call</span> <span class=\"kw6\">time</span> <span class=\"st0\">'Reset'</span>                                <span class=\"coMULTI\">/*reset the REXX (elapsed) clock timer.*/</span><br/>                                                 <span class=\"coMULTI\">/*show the  Collatz sequence  for a    */</span><br/>                                                 <span class=\"coMULTI\">/*stupidly gihugeic number.            */</span><br/>                  task<span class=\"sy0\">.</span>3= <span class=\"st0\">'Collatz(38**8) \u00a0;;;  Horizontal'</span><br/>                  <span class=\"kw1\">call</span> <span class=\"st0\">'$CALC'</span> task<span class=\"sy0\">.</span>3            <span class=\"coMULTI\">/*perform task number three (via $CALC)*/</span><br/><span class=\"kw6\">time</span><span class=\"sy0\">.</span>3=<span class=\"kw6\">time</span><span class=\"br0\">(</span><span class=\"st0\">'E'</span><span class=\"br0\">)</span>                                 <span class=\"coMULTI\">/*get and save the time used by task 3.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"kw1\">call</span> <span class=\"kw6\">time</span> <span class=\"st0\">'Reset'</span>                                <span class=\"coMULTI\">/*reset the REXX (elapsed) clock timer.*/</span><br/>                                                 <span class=\"coMULTI\">/*plot  SINE  in  \u00bd  degree increments.*/</span><br/>                                                 <span class=\"coMULTI\">/*using five decimal digits  (\u00ac 60).   */</span><br/>                  task<span class=\"sy0\">.</span>4= <span class=\"st0\">'sinD(-180, +180, 0.5) \u00a0;;;  Plot  DIGits 5   echoOptions'</span><br/>                  <span class=\"kw1\">call</span> <span class=\"st0\">'$CALC'</span> task<span class=\"sy0\">.</span>4            <span class=\"coMULTI\">/*perform task number four (via $CALC).*/</span><br/><span class=\"kw6\">time</span><span class=\"sy0\">.</span>4=<span class=\"kw6\">time</span><span class=\"br0\">(</span><span class=\"st0\">'E'</span><span class=\"br0\">)</span>                                 <span class=\"coMULTI\">/*get and save the time used by task 4.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"kw1\">say</span><br/>    <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span>  <span class=\"kw6\">time</span><span class=\"sy0\">.</span>j<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'time used for task'</span>     j     <span class=\"st0\">\"was\"</span>     <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">format</span><span class=\"br0\">(</span><span class=\"kw6\">time</span><span class=\"sy0\">.</span>j,,<span class=\"nu0\">0</span><span class=\"br0\">)</span>,<span class=\"nu0\">4</span><span class=\"br0\">)</span>     <span class=\"st0\">'seconds.'</span><br/>    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>                                                 <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 28, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Rate counter<br/>\u00a0<br/>see \"method 1: calculate reciprocal of elapsed time:\" + nl<br/>for trial = 1 to 3<br/>    start = clock()<br/>    tasktomeasure()<br/>    finish = clock()<br/>    see \"rate = \" + 100 / (finish-start) + \" per second\" + nl<br/>next <br/>\u00a0<br/>see \"method 2: count completed tasks in one second:\" + nl<br/>for trial = 1 to 3<br/>    runs = 0<br/>    finish = clock() + 100<br/>    while clock()  &lt; finish<br/>          tasktomeasure()<br/>          if clock() &lt; finish<br/>             runs = runs + 1<br/>          ok<br/>    end<br/>    see \"rate = \" + runs + \" per second\" + nl<br/>next<br/>\u00a0<br/>func tasktomeasure<br/>     for i = 1 to 100000<br/>     next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 16, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'benchmark'</span><br/>Document = <span class=\"kw4\">Struct</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"re3\">:id</span>,:a,:b,:c<span class=\"br0\">)</span><br/>documents_a = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>documents_h = <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"nu0\">1</span>.<span class=\"me1\">upto</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>_000<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>  d = Document.<span class=\"me1\">new</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  documents_a <span class=\"sy0\">&lt;&lt;</span> d<br/>  documents_h<span class=\"br0\">[</span>d.<span class=\"me1\">id</span><span class=\"br0\">]</span> = d<br/><span class=\"kw1\">end</span><br/>searchlist = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>_000<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">Benchmark</span>.<span class=\"me1\">bm</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>x<span class=\"sy0\">|</span><br/>  x.<span class=\"me1\">report</span><span class=\"br0\">(</span><span class=\"st0\">'array'</span><span class=\"br0\">)</span><span class=\"br0\">{</span>searchlist.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>el<span class=\"sy0\">|</span> documents_a.<span class=\"me1\">any</span>?<span class=\"br0\">{</span><span class=\"sy0\">|</span>d<span class=\"sy0\">|</span> d.<span class=\"me1\">id</span> == el<span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>  x.<span class=\"me1\">report</span><span class=\"br0\">(</span><span class=\"st0\">'hash'</span><span class=\"br0\">)</span><span class=\"br0\">{</span>searchlist.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>el<span class=\"sy0\">|</span> documents_h.<span class=\"me1\">has_key</span>?<span class=\"br0\">(</span>el<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Run BASIC", "loc": 45, "block": "<pre class=\"text highlighted_source\">html \"&lt;table bgcolor=wheat border=1&gt;&lt;tr&gt;&lt;td align=center colspan=2&gt;Rate Counter&lt;/td&gt;&lt;/tr&gt;<br/>    &lt;tr&gt;&lt;td&gt;Run Job Times&lt;/td&gt;&lt;td&gt;\"<br/>    textbox #runTimes,\"10\",3<br/>\u00a0<br/>html \"&lt;/tr&gt;&lt;tr&gt;&lt;td align=center colspan=2&gt;\"<br/>     button #r,\"Run\", [runIt]<br/>html \"        \"<br/>     button #a, \"Average\", [ave]<br/>html \"&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\"<br/>wait<br/>\u00a0<br/>[runIt]<br/>runTimes = min(10,val(#runTimes contents$()))<br/>count = count + 1<br/>print \"-------- Run Number \";count;\" ----------------\"<br/>print \"Run jobs\";runTimes;\" times, reporting each\"<br/>\u00a0<br/>for i = 1 to runTimes<br/>    ' -----------------------------------------------------------------<br/>    ' Normally we use a RUN() command to run another program<br/>    ' but for test pruporse we have a routine that simply loops a bunch<br/>    ' -----------------------------------------------------------------<br/>    begTime  = time$(\"ms\")<br/>    theRun   = bogusProg()<br/>\u00a0<br/>    endTime  = time$(\"ms\")<br/>    lapsTime = endTime - begTime<br/>    print \"Job #\";i;\" Elapsed time, ms \";lapsTime;\" \";1000/lapsTime; \" ticks per second\"<br/>next<br/>aveTime    = (endTime-startTime)/runTimes<br/>totAveTime = totAveTime + aveTime<br/>print \"Average time, ms, is \";aveTime;\" \"; 1000/((endTime-startTime)/runTimes); \" ticks per second\"<br/>wait<br/>\u00a0<br/>[ave]<br/>print \"---------------------------------\"<br/>print \"Total average time:\";aveTime/count<br/>\u00a0<br/>function bogusProg()<br/>    for i = 1 to 10000<br/>        sini = sini + sin(i)<br/>        tani = tani + tan(i)<br/>        cpsi = cosi + cos(i)<br/>    next<br/>end function </pre>"}, {"lang": "Scala", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> task<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Thread.<span class=\"me1\">sleep</span><span class=\"br0\">(</span>n <span class=\"sy0\">*</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> rate<span class=\"br0\">(</span>fs<span class=\"sy0\">:</span> List<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Unit<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> jobs <span class=\"sy0\">=</span> fs map <span class=\"br0\">(</span>f <span class=\"sy0\">=&gt;</span> scala.<span class=\"me1\">actors</span>.<span class=\"me1\">Futures</span>.<span class=\"me1\">future</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cnt1 <span class=\"sy0\">=</span> scala.<span class=\"me1\">actors</span>.<span class=\"me1\">Futures</span>.<span class=\"me1\">awaitAll</span><span class=\"br0\">(</span><span class=\"nu0\">5000</span>, jobs<span class=\"sy0\">:</span> <span class=\"sy0\">_*</span><span class=\"br0\">)</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> <span class=\"sy0\">!=</span> None<span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cnt2 <span class=\"sy0\">=</span> scala.<span class=\"me1\">actors</span>.<span class=\"me1\">Futures</span>.<span class=\"me1\">awaitAll</span><span class=\"br0\">(</span><span class=\"nu0\">5000</span>, jobs<span class=\"sy0\">:</span> <span class=\"sy0\">_*</span><span class=\"br0\">)</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> <span class=\"sy0\">!=</span> None<span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cnt3 <span class=\"sy0\">=</span> scala.<span class=\"me1\">actors</span>.<span class=\"me1\">Futures</span>.<span class=\"me1\">awaitAll</span><span class=\"br0\">(</span><span class=\"nu0\">5000</span>, jobs<span class=\"sy0\">:</span> <span class=\"sy0\">_*</span><span class=\"br0\">)</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> <span class=\"sy0\">!=</span> None<span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"%d jobs in 5 seconds\"</span> format cnt1<span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"%d jobs in 10 seconds\"</span> format cnt2<span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"%d jobs in 15 seconds\"</span> format cnt3<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>rate<span class=\"br0\">(</span>List.<span class=\"me1\">fill</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> task<span class=\"br0\">(</span>scala.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span>.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 11, "block": "<pre class=\"ruby highlighted_source\">var benchmark = frequire<span class=\"br0\">(</span><span class=\"st0\">'Benchmark'</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>func job1 <span class=\"br0\">{</span><br/>    <span class=\"co1\">#...job1 code...</span><br/><span class=\"br0\">}</span><br/>func job2 <span class=\"br0\">{</span><br/>    <span class=\"co1\">#...job2 code...</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>const COUNT = <span class=\"sy0\">-</span><span class=\"nu0\">1</span>;   <span class=\"co1\"># run for one CPU second</span><br/>benchmark.<span class=\"me1\">timethese</span><span class=\"br0\">(</span>COUNT, <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"st0\">'Job1'</span> <span class=\"sy0\">=&gt;</span> job1, <span class=\"st0\">'Job2'</span> <span class=\"sy0\">=&gt;</span> job2<span class=\"br0\">)</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Smalltalk", "loc": 5, "block": "<pre class=\"smalltalk highlighted_source\">|<span class=\"re3\">times</span>|<br/><span class=\"re6\">times</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Bag</span> new.<br/><span class=\"re5\">1</span> to: <span class=\"re5\">10</span> do: <span class=\"br0\">[</span>:<span class=\"re5\">n</span>| times add:<br/>   <span class=\"br0\">(</span><span class=\"re0\">Time</span> millisecondsToRun: <span class=\"br0\">[</span><span class=\"re5\">3000</span> factorial<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span>.<br/><span class=\"re0\">Transcript</span> show: <span class=\"re5\">times</span> average asInteger.</pre>"}, {"lang": "Tcl", "loc": 16, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> iters <span class=\"nu0\">10</span><br/>\u00a0<br/><span class=\"co1\"># A silly example task</span><br/><span class=\"kw1\">proc</span> theTask <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> a <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> a<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span><span class=\"sy0\">**</span><span class=\"nu0\">3</span>+<span class=\"re0\">$a</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span>+<span class=\"re0\">$a</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Measure the time taken $iters times</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$iters</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> t <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"br0\">[</span><span class=\"kw2\">time</span> <span class=\"br0\">{</span><br/>        theTask<br/>    <span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"task took $t microseconds on iteration $i\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "UNIX Shell", "loc": 5, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\">#!/bin/bash</span><br/>\u00a0<br/><span class=\"kw1\">while</span>\u00a0:\u00a0; <span class=\"kw1\">do</span><br/>task <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">echo</span> <span class=\"sy0\">&gt;&gt;</span> .fc<br/><span class=\"kw1\">done</span></pre>"}, {"lang": "XPL0", "loc": 13, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;               \\intrinsic 'code' declarations<br/>int N, I, T0, Time;<br/>[for N:= 1, 3 do<br/>    [T0:= GetTime;<br/>    for I:= 1 to 100 do<br/>        [while port($3DA) &amp; $08 do [];  \\wait for vertical retrace to go away<br/>        repeat until port($3DA) &amp; $08;  \\wait for vertical retrace signal<br/>        ];<br/>    Time:= GetTime - T0;<br/>    IntOut(0, Time);  Text(0, \" microseconds for 100 samples = \");  <br/>    RlOut(0, 100.0e6/float(Time));  Text(0, \"Hz\");  CrLf(0);<br/>    ];<br/>]</pre>"}, {"lang": "zkl", "loc": 18, "block": "<pre class=\"text highlighted_source\">fcn rateCounter(f,timeNRuns,secsToRun=Void){<br/>   now:=Time.Clock.time; <br/>   if(secsToRun){<br/>      then:=now + secsToRun;<br/>      N:=0; do{ f(); N+=1; }while(Time.Clock.time&lt;then);<br/>      t:=Time.Clock.time - now;<br/>      println(\"%d runs in\u00a0%s seconds =\u00a0%.3f sec/run\"<br/>              .fmt(N,Time.Date.toHMSString(0,0,t),t.toFloat()/N));<br/>   }<br/>   else{<br/>      do(timeNRuns){ f() }<br/>      t:=Time.Clock.time - now;<br/>      println(\"%s seconds to run\u00a0%d times =\u00a0%.3f sec/run\"<br/>              .fmt(Time.Date.toHMSString(0,0,t),timeNRuns,<br/>\t           t.toFloat()/timeNRuns));<br/>      t<br/>   }<br/>}</pre>"}]}