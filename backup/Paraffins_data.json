{"task": "Paraffins", "blocks": [{"lang": "C", "loc": 115, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define MAX_N 33\t/* max number of tree nodes */</span><br/><span class=\"co2\">#define BRANCH 4\t/* max number of edges a single node can have */</span><br/>\u00a0<br/><span class=\"coMULTI\">/* The basic idea: a paraffin molecule can be thought as a simple tree<br/>   with each node being a carbon atom.  Counting molecules is thus the<br/>   problem of counting free (unrooted) trees of given number of nodes.<br/>\u00a0<br/>   An unrooted tree needs to be uniquely represented, so we need a way<br/>   to cannonicalize equivalent free trees.  For that, we need to first<br/>   define the cannonical form of rooted trees.  Since rooted trees can<br/>   be constructed by a root node and up to BRANCH rooted subtrees that<br/>   are arranged in some definite order, we can define it thusly:<br/>     * Given the root of a tree, the weight of each of its branches is<br/>       the number of nodes contained in that branch;<br/>     * A cannonical rooted tree would have its direct subtrees ordered<br/>       in descending order by weight;<br/>     * In case multiple subtrees are the same weight, they are ordered<br/>       by some unstated, but definite, order (this code doesn't really<br/>       care what the ordering is; it only counts the number of choices<br/>       in such a case, not enumerating individual trees.)<br/>\u00a0<br/>   A rooted tree of N nodes can then be constructed by adding smaller,<br/>   cannonical rooted trees to a root node, such that:<br/>     * Each subtree has fewer than BRANCH branches (since it must have<br/>       an empty slot for an edge to connect to the new root);<br/>     * Weight of those subtrees added later are no higher than earlier<br/>       ones;<br/>     * Their weight total N-1.<br/>   A rooted tree so constructed would be itself cannonical.<br/>\u00a0<br/>   For an unrooted tree, we can define the radius of any of its nodes:<br/>   it's the maximum weight of any of the subtrees if this node is used<br/>   as the root.  A node is the center of a tree if it has the smallest<br/>   radius among all the nodes.  A tree can have either one or two such<br/>   centers; if two, they must be adjacent (cf. Knuth, tAoCP 2.3.4.4).<br/>\u00a0<br/>   An important fact is that, a node in a tree is its sole center, IFF<br/>   its radius times 2 is no greater than the sum of the weights of all<br/>   branches (ibid).  While we are making rooted trees, we can add such<br/>   trees encountered to the count of cannonical unrooted trees.<br/>\u00a0<br/>   A bi-centered unrooted tree with N nodes can be made by joining two<br/>   trees, each with N/2 nodes and fewer than BRANCH subtrees, at root.<br/>   The pair must be ordered in aforementioned implicit way so that the<br/>   product is cannonical. */</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> xint<span class=\"sy0\">;</span><br/><span class=\"co2\">#define FMT \"llu\"</span><br/>\u00a0<br/>xint rooted<span class=\"br0\">[</span>MAX_N<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>xint unrooted<span class=\"br0\">[</span>MAX_N<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* choose k out of m possible values; chosen values may repeat, but the<br/>   ordering of them does not matter.  It's binomial(m + k - 1, k) */</span><br/>xint choose<span class=\"br0\">(</span>xint m<span class=\"sy0\">,</span> xint k<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\txint i<span class=\"sy0\">,</span> r<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> m<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>r <span class=\"sy0\">=</span> m<span class=\"sy0\">,</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> k<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tr <span class=\"sy0\">=</span> r <span class=\"sy0\">*</span> <span class=\"br0\">(</span>m <span class=\"sy0\">+</span> i<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* constructing rooted trees of BR branches at root, with at most<br/>   N radius, and SUM nodes in the partial tree already built. It's<br/>   recursive, and CNT and L carry down the number of combinations<br/>   and the tree radius already encountered. */</span><br/><span class=\"kw4\">void</span> tree<span class=\"br0\">(</span>xint br<span class=\"sy0\">,</span> xint n<span class=\"sy0\">,</span> xint cnt<span class=\"sy0\">,</span> xint sum<span class=\"sy0\">,</span> xint l<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\txint b<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> s<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>b <span class=\"sy0\">=</span> br <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> b <span class=\"sy0\">&lt;=</span> BRANCH<span class=\"sy0\">;</span> b<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ts <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> br<span class=\"br0\">)</span> <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>s <span class=\"sy0\">&gt;=</span> MAX_N<span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* First B of BR branches are all of weight n; the<br/>\t\t   rest are at most of weight N-1 */</span><br/>\t\tc <span class=\"sy0\">=</span> choose<span class=\"br0\">(</span>rooted<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">,</span> b <span class=\"sy0\">-</span> br<span class=\"br0\">)</span> <span class=\"sy0\">*</span> cnt<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* This partial tree is singly centered as is */</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>l <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;</span> s<span class=\"br0\">)</span> unrooted<span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> c<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* Trees saturate at root can't be used as building<br/>\t\t   blocks for larger trees, so forget them */</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">==</span> BRANCH<span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t\trooted<span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> c<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* Build the rest of the branches */</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>m <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span> <span class=\"sy0\">--</span>m<span class=\"sy0\">;</span> <span class=\"br0\">)</span> tree<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> l<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> bicenter<span class=\"br0\">(</span><span class=\"kw4\">int</span> s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>s <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* Pick two of the half-size building blocks, allowing<br/>\t   repetition. */</span><br/>\tunrooted<span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> rooted<span class=\"br0\">[</span>s<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>rooted<span class=\"br0\">[</span>s<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\txint n<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span> MAX_N<span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ttree<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tbicenter<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%\"</span>FMT<span class=\"st0\">\":\u00a0%\"</span>FMT<span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> unrooted<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 44, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">bigint</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> <span class=\"kw4\">uint</span> nMax <span class=\"sy0\">=</span> <span class=\"nu0\">250</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">enum</span> <span class=\"kw4\">uint</span> nBranches <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">__gshared</span> BigInt<span class=\"br0\">[</span>nMax <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> rooted <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>.<span class=\"me1\">BigInt</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span>.<span class=\"me1\">BigInt</span> <span class=\"coMULTI\">/*...*/</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                           unrooted <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>.<span class=\"me1\">BigInt</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span>.<span class=\"me1\">BigInt</span> <span class=\"coMULTI\">/*...*/</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> tree<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> br<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> n<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> l<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> inSum<span class=\"sy0\">,</span><br/>          <span class=\"kw2\">in</span> BigInt cnt<span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">__gshared</span> <span class=\"kw4\">static</span> BigInt<span class=\"br0\">[</span>nBranches<span class=\"br0\">]</span> c<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">uint</span> sum <span class=\"sy0\">=</span> inSum<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> b<span class=\"sy0\">;</span> br <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">nBranches</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sum <span class=\"sy0\">+=</span> n<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sum <span class=\"sy0\">&gt;</span> nMax <span class=\"sy0\">||</span> <span class=\"br0\">(</span>l <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&gt;=</span> sum <span class=\"sy0\">&amp;&amp;</span> b <span class=\"sy0\">&gt;=</span> nBranches<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">==</span> br <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            c<span class=\"br0\">[</span>br<span class=\"br0\">]</span> <span class=\"sy0\">=</span> rooted<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">*</span> cnt<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            c<span class=\"br0\">[</span>br<span class=\"br0\">]</span> <span class=\"sy0\">*=</span> rooted<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">+</span> b <span class=\"sy0\">-</span> br <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            c<span class=\"br0\">[</span>br<span class=\"br0\">]</span> <span class=\"sy0\">/=</span> b <span class=\"sy0\">-</span> br<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>l <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;</span> sum<span class=\"br0\">)</span><br/>            unrooted<span class=\"br0\">[</span>sum<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> c<span class=\"br0\">[</span>br<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&lt;</span> nBranches<span class=\"br0\">)</span><br/>            rooted<span class=\"br0\">[</span>sum<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> c<span class=\"br0\">[</span>br<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach_reverse</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> m<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span><span class=\"br0\">)</span><br/>            tree<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> l<span class=\"sy0\">,</span> sum<span class=\"sy0\">,</span> c<span class=\"br0\">[</span>br<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> bicenter<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> s<span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        unrooted<span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> rooted<span class=\"br0\">[</span>s <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>rooted<span class=\"br0\">[</span>s <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> n<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">nMax</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        tree<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span>.<span class=\"me1\">BigInt</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        n.<span class=\"me1\">bicenter</span><span class=\"sy0\">;</span><br/>        writeln<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"st0\">\": \"</span><span class=\"sy0\">,</span> unrooted<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "FreeBASIC", "loc": 100, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 31-12-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/><span class=\"co1\">' uses gmp, translation from pascal</span><br/>\u00a0<br/><span class=\"co2\">#Include Once \"gmp.bi\"</span><br/>\u00a0<br/><span class=\"kw1\">Const</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> max_n = <span class=\"nu0\">500</span>, branch = <span class=\"nu0\">4</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">Shared</span> <span class=\"kw1\">As</span> mpz_ptr rooted<span class=\"br0\">(</span><span class=\"br0\">)</span>, unrooted<span class=\"br0\">(</span><span class=\"br0\">)</span>, c<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">Shared</span> <span class=\"kw1\">As</span> mpz_ptr cnt, tmp<br/>\u00a0<br/><span class=\"kw1\">Sub</span> tree<span class=\"br0\">(</span>br <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span>, n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span>, l <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span>, sum <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span>, cnt <span class=\"kw1\">As</span> mpz_ptr<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> b, m<br/>\u00a0<br/>  <span class=\"kw1\">For</span> b = br +<span class=\"nu0\">1</span> <span class=\"kw1\">To</span> branch<br/>    sum = sum + n<br/>    <span class=\"kw1\">If</span> sum &gt; max_n <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span><br/>\u00a0<br/>    <span class=\"co1\">' prevent unneeded long math</span><br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span>l * <span class=\"nu0\">2</span> &gt;= sum<span class=\"br0\">)</span> And <span class=\"br0\">(</span>b &gt;= branch<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> b = <span class=\"br0\">(</span>br +<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>      mpz_mul<span class=\"br0\">(</span>c<span class=\"br0\">(</span>br<span class=\"br0\">)</span>, rooted<span class=\"br0\">(</span>n<span class=\"br0\">)</span>, cnt<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Else</span><br/>      mpz_add_ui<span class=\"br0\">(</span>tmp, rooted<span class=\"br0\">(</span>n<span class=\"br0\">)</span>, b - br -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      mpz_mul<span class=\"br0\">(</span>c<span class=\"br0\">(</span>br<span class=\"br0\">)</span>, c<span class=\"br0\">(</span>br<span class=\"br0\">)</span>, tmp<span class=\"br0\">)</span><br/>      mpz_divexact_ui<span class=\"br0\">(</span>c<span class=\"br0\">(</span>br<span class=\"br0\">)</span>, c<span class=\"br0\">(</span>br<span class=\"br0\">)</span>, b - br<span class=\"br0\">)</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> l * <span class=\"nu0\">2</span> &lt; sum <span class=\"kw1\">Then</span><br/>      mpz_add<span class=\"br0\">(</span>unrooted<span class=\"br0\">(</span>sum<span class=\"br0\">)</span>, unrooted<span class=\"br0\">(</span>sum<span class=\"br0\">)</span>, c<span class=\"br0\">(</span>br<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">If</span> b &lt; branch <span class=\"kw1\">Then</span><br/>      mpz_add<span class=\"br0\">(</span>rooted<span class=\"br0\">(</span>sum<span class=\"br0\">)</span>, rooted<span class=\"br0\">(</span>sum<span class=\"br0\">)</span>, c<span class=\"br0\">(</span>br<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">For</span> m = n -<span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Step</span> -<span class=\"nu0\">1</span><br/>        tree<span class=\"br0\">(</span>b, m, l, sum, c<span class=\"br0\">(</span>br<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> bicenter<span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"br0\">(</span>s And <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span><br/>  mpz_add_ui<span class=\"br0\">(</span>tmp, rooted<span class=\"br0\">(</span>s \\ <span class=\"nu0\">2</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  mpz_mul<span class=\"br0\">(</span>tmp, rooted<span class=\"br0\">(</span>s \\ <span class=\"nu0\">2</span><span class=\"br0\">)</span>, tmp<span class=\"br0\">)</span><br/>  mpz_tdiv_q_2exp<span class=\"br0\">(</span>tmp, tmp, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  mpz_add<span class=\"br0\">(</span>unrooted<span class=\"br0\">(</span>s<span class=\"br0\">)</span>, unrooted<span class=\"br0\">(</span>s<span class=\"br0\">)</span>, tmp<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> n, sum<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ZString</span> <span class=\"kw1\">Ptr</span> ans<br/>\u00a0<br/><span class=\"kw1\">ReDim</span> rooted<span class=\"br0\">(</span>max_n<span class=\"br0\">)</span>, unrooted<span class=\"br0\">(</span>max_n<span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> n = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> max_n<br/>    rooted<span class=\"br0\">(</span>n<span class=\"br0\">)</span> = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init<span class=\"br0\">(</span>  rooted<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  unrooted<span class=\"br0\">(</span>n<span class=\"br0\">)</span> = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init<span class=\"br0\">(</span>unrooted<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">For</span> n = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1</span><br/>  mpz_set_ui<span class=\"br0\">(</span>  rooted<span class=\"br0\">(</span>n<span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  mpz_set_ui<span class=\"br0\">(</span>unrooted<span class=\"br0\">(</span>n<span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">ReDim</span> c<span class=\"br0\">(</span>branch -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> n = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> branch -<span class=\"nu0\">1</span><br/>  c<span class=\"br0\">(</span>n<span class=\"br0\">)</span> = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init<span class=\"br0\">(</span>c<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/>cnt = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init_set_ui<span class=\"br0\">(</span>cnt, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>tmp = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init<span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><br/>\u00a0<br/>sum = <span class=\"nu0\">1</span><br/><span class=\"kw1\">For</span> n = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> max_n<br/>  tree<span class=\"br0\">(</span><span class=\"nu0\">0</span>, n, n, sum, cnt<span class=\"br0\">)</span><br/>  bicenter<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"co1\">'gmp_printf(\"%d:\u00a0%Zd\"+Chr(13)+Chr(10), n, unrooted(n))</span><br/>  ans = Mpz_get_str <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">10</span>, unrooted<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"###: \"</span>; n;\u00a0: <span class=\"kw1\">Print</span> *ans<br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">For</span> n = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> max_n<br/>  mpz_Clear<span class=\"br0\">(</span>  rooted<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  mpz_Clear<span class=\"br0\">(</span>unrooted<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">For</span> n = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> branch -<span class=\"nu0\">1</span><br/>  mpz_clear<span class=\"br0\">(</span>c<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/>mpz_clear<span class=\"br0\">(</span>cnt<span class=\"br0\">)</span><br/>mpz_clear<span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 61, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/big\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> branches <span class=\"sy2\">=</span> <span class=\"nu0\">4</span><br/><span class=\"kw1\">const</span> nMax <span class=\"sy2\">=</span> <span class=\"nu0\">500</span><br/>\u00a0<br/><span class=\"kw1\">var</span> rooted<span class=\"sy1\">,</span> unrooted <span class=\"sy1\">[</span>nMax <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">]</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><br/><span class=\"kw1\">var</span> c <span class=\"sy1\">[</span>branches<span class=\"sy1\">]</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><br/><span class=\"kw1\">var</span> tmp <span class=\"sy2\">=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><br/><span class=\"kw1\">var</span> one <span class=\"sy2\">=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> tree<span class=\"sy1\">(</span>br<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> l<span class=\"sy1\">,</span> sum <span class=\"kw4\">int</span><span class=\"sy1\">,</span> cnt <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> b <span class=\"sy2\">:=</span> br <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> b &lt;<span class=\"sy2\">=</span> branches<span class=\"sy1\">;</span> b<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        sum <span class=\"sy2\">+=</span> n<br/>        <span class=\"kw1\">if</span> sum &gt; nMax <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> l<span class=\"sy3\">*</span><span class=\"nu0\">2</span> &gt;<span class=\"sy2\">=</span> sum &amp;&amp; b &gt;<span class=\"sy2\">=</span> branches <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> b <span class=\"sy3\">==</span> br<span class=\"sy3\">+</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            c<span class=\"sy1\">[</span>br<span class=\"sy1\">]</span><span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>&amp;rooted<span class=\"sy1\">[</span>n<span class=\"sy1\">],</span> cnt<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            tmp<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>&amp;rooted<span class=\"sy1\">[</span>n<span class=\"sy1\">],</span> tmp<span class=\"sy3\">.</span>SetInt64<span class=\"sy1\">(</span><span class=\"kw4\">int64</span><span class=\"sy1\">(</span>b<span class=\"sy3\">-</span>br<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)))</span><br/>            c<span class=\"sy1\">[</span>br<span class=\"sy1\">]</span><span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>&amp;c<span class=\"sy1\">[</span>br<span class=\"sy1\">],</span> tmp<span class=\"sy1\">)</span><br/>            c<span class=\"sy1\">[</span>br<span class=\"sy1\">]</span><span class=\"sy3\">.</span>Div<span class=\"sy1\">(</span>&amp;c<span class=\"sy1\">[</span>br<span class=\"sy1\">],</span> tmp<span class=\"sy3\">.</span>SetInt64<span class=\"sy1\">(</span><span class=\"kw4\">int64</span><span class=\"sy1\">(</span>b<span class=\"sy3\">-</span>br<span class=\"sy1\">)))</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> l<span class=\"sy3\">*</span><span class=\"nu0\">2</span> &lt; sum <span class=\"sy1\">{</span><br/>            unrooted<span class=\"sy1\">[</span>sum<span class=\"sy1\">]</span><span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>&amp;unrooted<span class=\"sy1\">[</span>sum<span class=\"sy1\">],</span> &amp;c<span class=\"sy1\">[</span>br<span class=\"sy1\">])</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> b &lt; branches <span class=\"sy1\">{</span><br/>            rooted<span class=\"sy1\">[</span>sum<span class=\"sy1\">]</span><span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>&amp;rooted<span class=\"sy1\">[</span>sum<span class=\"sy1\">],</span> &amp;c<span class=\"sy1\">[</span>br<span class=\"sy1\">])</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> m <span class=\"sy2\">:=</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> m &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> m<span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>            tree<span class=\"sy1\">(</span>b<span class=\"sy1\">,</span> m<span class=\"sy1\">,</span> l<span class=\"sy1\">,</span> sum<span class=\"sy1\">,</span> &amp;c<span class=\"sy1\">[</span>br<span class=\"sy1\">])</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> bicenter<span class=\"sy1\">(</span>s <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> s&amp;<span class=\"nu0\">1</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        tmp<span class=\"sy3\">.</span>Rsh<span class=\"sy1\">(</span>tmp<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>&amp;rooted<span class=\"sy1\">[</span>s<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">],</span> tmp<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>&amp;rooted<span class=\"sy1\">[</span>s<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">],</span> one<span class=\"sy1\">)),</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>        unrooted<span class=\"sy1\">[</span>s<span class=\"sy1\">]</span><span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>&amp;unrooted<span class=\"sy1\">[</span>s<span class=\"sy1\">],</span> tmp<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    rooted<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>SetInt64<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    rooted<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>SetInt64<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    unrooted<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>SetInt64<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    unrooted<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>SetInt64<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> n &lt;<span class=\"sy2\">=</span> nMax<span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        tree<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">))</span><br/>        bicenter<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%d:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> <span class=\"sy3\">&amp;</span>unrooted<span class=\"sy1\">[</span>n<span class=\"sy1\">])</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 44, "block": "<pre class=\"haskell highlighted_source\"><span class=\"co1\">-- polynomial utils</span><br/>a `nmul` n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span>n<span class=\"br0\">)</span> a<br/>a `ndiv` n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>`<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` n<span class=\"br0\">)</span> a<br/>\u00a0<br/><span class=\"kw1\">instance</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"kw1\">where</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:negate\"><span class=\"kw3\">negate</span></a> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:negate\"><span class=\"kw3\">negate</span></a><br/>  a <span class=\"sy0\">*</span> b <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr\"><span class=\"kw3\">foldr</span></a> f <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:undefined\"><span class=\"kw3\">undefined</span></a> b <span class=\"kw1\">where</span><br/>    f x z <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a `nmul` x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>\u00a0: z<span class=\"br0\">)</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:abs\"><span class=\"kw3\">abs</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:undefined\"><span class=\"kw3\">undefined</span></a><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:signum\"><span class=\"kw3\">signum</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:undefined\"><span class=\"kw3\">undefined</span></a><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromInteger\"><span class=\"kw3\">fromInteger</span></a> n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromInteger\"><span class=\"kw3\">fromInteger</span></a> n\u00a0: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:repeat\"><span class=\"kw3\">repeat</span></a> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\">-- replace x in polynomial with x^n</span><br/>repl a n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> <span class=\"br0\">(</span>: replicate <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> a<br/>\u00a0<br/><span class=\"co1\">-- S2: (a^2 + b)/2</span><br/>cycleIndexS2 a b <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a<span class=\"sy0\">*</span>a <span class=\"sy0\">+</span> b<span class=\"br0\">)</span>`ndiv` <span class=\"nu0\">2</span><br/>\u00a0<br/><span class=\"co1\">-- S4: (a^4 + 6 a^2 b + 8 a c + 3 b^2 + 6 d) / 24</span><br/>cycleIndexS4 a b c d <span class=\"sy0\">=</span>\t<span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy0\">^</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>\t\t\t <span class=\"br0\">(</span>a <span class=\"sy0\">^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> b<span class=\"br0\">)</span> `nmul` <span class=\"nu0\">6</span> <span class=\"sy0\">+</span><br/>\t\t\t <span class=\"br0\">(</span>a <span class=\"sy0\">*</span> c<span class=\"br0\">)</span> `nmul` <span class=\"nu0\">8</span> <span class=\"sy0\">+</span><br/>\t\t\t <span class=\"br0\">(</span>b <span class=\"sy0\">^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> `nmul` <span class=\"nu0\">3</span> <span class=\"sy0\">+</span><br/>\t\t\t d `nmul` <span class=\"nu0\">6</span><span class=\"br0\">)</span> `ndiv` <span class=\"nu0\">24</span><br/>\u00a0<br/>\u00a0<br/>a598 <span class=\"sy0\">=</span> x1<br/><span class=\"co1\">-- A000598: A(x) = 1 + (1/6)*x*(A(x)^3 + 3*A(x)*A(x^2) + 2*A(x^3))</span><br/>x1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\u00a0: <span class=\"br0\">(</span><span class=\"br0\">(</span>x1<span class=\"sy0\">^</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x2<span class=\"sy0\">*</span>x1<span class=\"br0\">)</span>`nmul` <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>x3`nmul`<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> `ndiv` <span class=\"nu0\">6</span><br/>x2 <span class=\"sy0\">=</span> x1`repl`<span class=\"nu0\">2</span><br/>x3 <span class=\"sy0\">=</span> x1`repl`<span class=\"nu0\">3</span><br/>x4 <span class=\"sy0\">=</span> x1`repl`<span class=\"nu0\">4</span><br/>\u00a0<br/><span class=\"co1\">-- A000678 = x CycleIndex(S4, A000598(x))</span><br/>a678 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>\u00a0: cycleIndexS4 x1 x2 x3 x4<br/>\u00a0<br/><span class=\"co1\">-- A000599 = CycleIndex(S2, A000598(x) - 1)</span><br/>a599 <span class=\"sy0\">=</span> cycleIndexS2 <span class=\"br0\">(</span><span class=\"nu0\">0</span>\u00a0: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a> x1<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>\u00a0: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a> x2<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- A000602 = A000678(x) - A000599(x) + A000599(x^2)</span><br/>a602 <span class=\"sy0\">=</span> a678 <span class=\"sy0\">-</span> a599 <span class=\"sy0\">+</span> x2<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">200</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span> a602</pre>"}, {"lang": "J", "loc": 32, "block": "<pre class=\"j highlighted_source\">part3=:\u00a0;@<span class=\"sy0\">((</span>&lt;@<span class=\"sy0\">(</span>[<span class=\"sy0\">(</span>],.<span class=\"sy0\">(</span>-+/\"<span class=\"nu0\">1</span><span class=\"sy0\">))</span>],.]<a class=\"__cf_email__\" data-cfemail=\"517a387f11\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>]-~<span class=\"nu0\">1</span>+&lt;<a class=\"__cf_email__\" data-cfemail=\"f0deb0dd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:@-<span class=\"sy0\">))</span>\"<span class=\"nu0\">0</span> <a class=\"__cf_email__\" data-cfemail=\"87eea9c7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;:@&lt;<a class=\"__cf_email__\" data-cfemail=\"6d432d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>%&amp;<span class=\"nu0\">3</span><span class=\"sy0\">))</span><br/>\u00a0<br/>part4=: <span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>ij=.; <span class=\"sy0\">(</span>,.]<a class=\"__cf_email__\" data-cfemail=\"7d5614533d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:<span class=\"sy0\">(</span>]-~<span class=\"nu0\">1</span>+[:&lt;.<span class=\"nu0\">3</span>%~<span class=\"kw2\">y</span>-]<span class=\"sy0\">))</span>&amp;.&gt; i.<span class=\"nu0\">1</span>+&lt;.<span class=\"kw2\">y</span>%<span class=\"nu0\">4</span><br/><span class=\"sy0\">(</span>,.<span class=\"kw2\">y</span> - +/\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span>\u00a0; <span class=\"sy0\">(</span>&lt;@<span class=\"sy0\">(</span>],\"<span class=\"nu0\">1</span> <span class=\"nu0\">0</span> &lt;<a class=\"__cf_email__\" data-cfemail=\"fad4bad7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:@<span class=\"sy0\">(</span><span class=\"kw2\">y</span>-[<span class=\"sy0\">)</span> <span class=\"sy0\">(</span>] + <a class=\"__cf_email__\" data-cfemail=\"40296e00\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;:@-<span class=\"sy0\">)</span> {:@] &gt;. <span class=\"sy0\">(</span>&gt;.-:<span class=\"kw2\">y</span><span class=\"sy0\">)</span>-[<span class=\"sy0\">)</span>~+/<span class=\"sy0\">)</span>\"<span class=\"nu0\">1</span> ij <br/><span class=\"sy0\">)</span><br/>\u00a0<br/>c0=: */@:{<br/>c1=: <span class=\"nu0\">13</span>\u00a0:<span class=\"st_h\">'(*-:@(*&gt;:))/y{~}:x'</span><br/>c2=: <span class=\"nu0\">13</span>\u00a0:<span class=\"st_h\">'(*-:@(*&gt;:))~/y{~}.x'</span><br/>c3=: <span class=\"nu0\">13</span>\u00a0:<span class=\"st_h\">'3!2+y{~{.x'</span><br/>\u00a0<br/>radGenN=: [:;[:<span class=\"sy0\">(</span>],[:+/c0`c1`c2`<a class=\"__cf_email__\" data-cfemail=\"93f0a0d3bd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>#<a class=\"__cf_email__\" data-cfemail=\"4a640a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>}.=}:<span class=\"sy0\">)</span>@[<span class=\"sy0\">)</span>\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span>&amp;.&gt;/<span class=\"sy0\">(</span>&lt;<span class=\"nu0\">1x</span><span class=\"sy0\">)</span>,~part3&amp;.&gt;@ <a class=\"__cf_email__\" data-cfemail=\"7d14533d50\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>\u00a0<br/>bcpGenN=: [: , <span class=\"nu0\">0</span> ,.~ -:@<span class=\"sy0\">(</span>*&gt;:<span class=\"sy0\">)</span>@<span class=\"sy0\">(</span>{~i.<span class=\"sy0\">)</span><br/>\u00a0<br/>c11=: <span class=\"nu0\">13</span>\u00a0:<span class=\"st_h\">'*/(y{~0 1{x), -:(*&gt;:)y{~{:x'</span><br/>c12=: <span class=\"nu0\">13</span>\u00a0:<span class=\"st_h\">'*/(y{~0 3{x), -:(*&gt;:)y{~2{x'</span><br/>c13=: <span class=\"nu0\">13</span>\u00a0:<span class=\"st_h\">'*/(y{~{.x) , 3!2+ y{~{: x'</span><br/>c14=: <span class=\"nu0\">13</span>\u00a0:<span class=\"st_h\">'*/(y{~_2{.x), -:(*&gt;:)y{~{.x'</span><br/>c15=: <span class=\"nu0\">13</span>\u00a0:<span class=\"st_h\">'*/ -:(*&gt;:) y{~0 3{x'</span><br/>c16=: <span class=\"nu0\">13</span>\u00a0:<span class=\"st_h\">'*/(y{~{:x) , 3!2+ y{~{. x'</span><br/>c17=: <span class=\"nu0\">13</span>\u00a0:<span class=\"st_h\">'4!3+y{~{.x'</span><br/>\u00a0<br/>cassl=: c0`c11`c12`c13`c14`c15`c16`c17<br/>\u00a0<br/>ccpGenN=: <span class=\"nu0\">4</span>\u00a0:<span class=\"nu0\">0</span><br/><span class=\"kw1\">if.</span> <span class=\"nu0\">0</span>=<span class=\"kw2\">y</span> <span class=\"kw1\">do.</span> i.<span class=\"nu0\">0</span> <span class=\"kw1\">return.</span> <span class=\"kw1\">end.</span><br/><span class=\"kw2\">y</span>{.<span class=\"nu0\">2</span><span class=\"sy0\">(</span>{.,<span class=\"nu0\">0</span>,}.<span class=\"sy0\">)</span> <span class=\"nu0\">0</span>,+/@:<span class=\"sy0\">(</span><span class=\"kw2\">x</span> <a class=\"__cf_email__\" data-cfemail=\"d4b7b5a7a7b894fa\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>#<a class=\"__cf_email__\" data-cfemail=\"183658\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>}.=}:<span class=\"sy0\">)</span>@[<span class=\"sy0\">)</span>\"<span class=\"nu0\">1</span>~[<span class=\"sy0\">)</span>@:part4\"<span class=\"nu0\">0</span> [<span class=\"nu0\">1</span>-.~i.<span class=\"kw2\">y</span>-<span class=\"nu0\">1</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>NofParaff=: {. radGenN <span class=\"sy0\">((</span>ccpGenN +:<span class=\"sy0\">)</span> + bcpGenN <span class=\"sy0\">)</span> <span class=\"nu0\">2</span>&amp;|+&lt;<a class=\"__cf_email__\" data-cfemail=\"1b355b36\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:</pre>"}, {"lang": "Java", "loc": 59, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.math.BigInteger</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Test <span class=\"br0\">{</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> nMax <span class=\"sy0\">=</span> <span class=\"nu0\">250</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> nBranches <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> rooted <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a><span class=\"br0\">[</span>nMax <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> unrooted <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a><span class=\"br0\">[</span>nMax <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> c <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a><span class=\"br0\">[</span>nBranches<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> tree<span class=\"br0\">(</span><span class=\"kw4\">int</span> br, <span class=\"kw4\">int</span> n, <span class=\"kw4\">int</span> l, <span class=\"kw4\">int</span> inSum, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> cnt<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> sum <span class=\"sy0\">=</span> inSum<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> b <span class=\"sy0\">=</span> br <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> b <span class=\"sy0\">&lt;=</span> nBranches<span class=\"sy0\">;</span> b<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            sum <span class=\"sy0\">+=</span> n<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sum <span class=\"sy0\">&gt;</span> nMax <span class=\"sy0\">||</span> <span class=\"br0\">(</span>l <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&gt;=</span> sum <span class=\"sy0\">&amp;&amp;</span> b <span class=\"sy0\">&gt;=</span> nBranches<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> tmp <span class=\"sy0\">=</span> rooted<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">==</span> br <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                c<span class=\"br0\">[</span>br<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>cnt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                c<span class=\"br0\">[</span>br<span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<span class=\"br0\">[</span>br<span class=\"br0\">]</span>.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>tmp.<span class=\"me1\">add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>b <span class=\"sy0\">-</span> br <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                c<span class=\"br0\">[</span>br<span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<span class=\"br0\">[</span>br<span class=\"br0\">]</span>.<span class=\"me1\">divide</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>b <span class=\"sy0\">-</span> br<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>l <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;</span> sum<span class=\"br0\">)</span><br/>                unrooted<span class=\"br0\">[</span>sum<span class=\"br0\">]</span> <span class=\"sy0\">=</span> unrooted<span class=\"br0\">[</span>sum<span class=\"br0\">]</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span>c<span class=\"br0\">[</span>br<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&lt;</span> nBranches<span class=\"br0\">)</span><br/>                rooted<span class=\"br0\">[</span>sum<span class=\"br0\">]</span> <span class=\"sy0\">=</span> rooted<span class=\"br0\">[</span>sum<span class=\"br0\">]</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span>c<span class=\"br0\">[</span>br<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> m <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> m <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> m<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>                tree<span class=\"br0\">(</span>b, m, l, sum, c<span class=\"br0\">[</span>br<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> bicenter<span class=\"br0\">(</span><span class=\"kw4\">int</span> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> tmp <span class=\"sy0\">=</span> rooted<span class=\"br0\">[</span>s <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            tmp <span class=\"sy0\">=</span> tmp.<span class=\"me1\">add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"br0\">)</span>.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>rooted<span class=\"br0\">[</span>s <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            unrooted<span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"sy0\">=</span> unrooted<span class=\"br0\">[</span>s<span class=\"br0\">]</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span>tmp.<span class=\"me1\">shiftRight</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">fill</span><span class=\"br0\">(</span>rooted, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ZERO</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">fill</span><span class=\"br0\">(</span>unrooted, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ZERO</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        rooted<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> rooted<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"sy0\">;</span><br/>        unrooted<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> unrooted<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;=</span> nMax<span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            tree<span class=\"br0\">(</span><span class=\"nu0\">0</span>, n, n, <span class=\"nu0\">1</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            bicenter<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d:\u00a0%s%n\"</span>, n, unrooted<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 65, "block": "<pre class=\"text highlighted_source\">def MAX_N: 500;  # imprecision begins at 46<br/>def BRANCH: 4;<br/>\u00a0<br/># state: [unrooted, ra]<br/># tree(br; n; l; sum; cnt) where initially: l=n, sum=1 and cnt=1<br/>def tree(br; n; l; sum; cnt):<br/>\u00a0<br/>  # The inner function is used to implement the range(b+1; BRANCH) loop<br/>  # as there are early exits.<br/>  # On completion, _tree returns [unrooted, ra]<br/>  def _tree: # state [ (b, c, sum),  (unrooted, ra)]<br/>    if length\u00a0!= 5 then error(\"_tree input has length \\(length)\") else . end<br/>    | .[0] as $b | .[1] as $c | .[2] as $sum | .[3] as $unrooted | .[4] as $ra<br/>    | if $b &gt; BRANCH then [$unrooted, $ra]<br/>      else<br/>        ($sum + n) as $sum<br/>        | if $sum &gt;= MAX_N or<br/>             # prevent unneeded long math<br/>             ( l * 2 &gt;= $sum and $b &gt;= BRANCH) then [$unrooted, $ra]                      # return<br/>          else (if $b == br + 1 then $ra[n] * cnt <br/>                else ($c * ($ra[n] + (($b - br - 1)))) / ($b - br) | floor<br/>                end) as $c<br/>          | (if l * 2 &lt; $sum then ($unrooted | .[$sum] += $c)<br/>             else $unrooted end) as $unrooted<br/>          | if $b &gt;= BRANCH then [$b+1, $c, $sum, $unrooted, $ra] | _tree                 # next<br/>            else  [$unrooted, ($ra | .[$sum] += $c) ]<br/>            | reduce range(1; n) as $m (.;  tree($b; $m; l; $sum; $c)) <br/>            | ([$b + 1, $c, $sum] + .) | _tree <br/>            end<br/>          end<br/>      end<br/> \u00a0;<br/>\u00a0<br/>  # start by incrementing b, and prepending values for (b,c,sum)<br/>  ([br+1, cnt, sum] + .)  | _tree<br/>;<br/>\u00a0<br/># input and output: [unrooted, ra]<br/>def bicenter(s):<br/>  if s\u00a0% 2 == 1 then .<br/>  else<br/>     .[1][s / 2] as $aux<br/>     | .[0][s] += ($aux * ($aux + 1)) / 2 # 2 divides odd*even<br/>  end<br/>;<br/>\u00a0<br/>def array(n;init): [][n-1] = init | map(init);<br/>\u00a0<br/>def ra: array( MAX_N; 0) | .[0] = 1 | .[1] = 1;<br/>\u00a0<br/>def unrooted: ra;<br/>\u00a0<br/># See below for a simpler implementation using \"foreach\"<br/>def paraffins:<br/>  # range(1; MAX_N)<br/>  def _paraffins(n):<br/>    if n &gt;= MAX_N then empty<br/>    else tree(0; n; n; 1; 1) | bicenter(n)<br/>    | [n, .[0][n]],  # output<br/>      _paraffins(n+1)<br/>    end;<br/>  [unrooted, ra] | _paraffins(1)<br/>;<br/>\u00a0<br/>paraffins</pre>"}, {"lang": "Kotlin", "loc": 48, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.4-3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">math</span>.<span class=\"me1\">BigInteger</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> MAX<span class=\"sy0\">_</span>N <span class=\"sy0\">=</span> <span class=\"nu0\">250</span><br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> BRANCHES <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rooted   <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>MAX<span class=\"sy0\">_</span>N + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>it <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> BigInteger.<span class=\"me1\">ONE</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> BigInteger.<span class=\"me1\">ZERO</span> <span class=\"br0\">}</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> unrooted <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>MAX<span class=\"sy0\">_</span>N + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>it <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> BigInteger.<span class=\"me1\">ONE</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> BigInteger.<span class=\"me1\">ZERO</span> <span class=\"br0\">}</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>BRANCHES<span class=\"br0\">)</span> <span class=\"br0\">{</span> BigInteger.<span class=\"me1\">ZERO</span> <span class=\"br0\">}</span><br/>\u00a0<br/>fun tree<span class=\"br0\">(</span>br<span class=\"sy0\">:</span> Int, n<span class=\"sy0\">:</span> Int, l<span class=\"sy0\">:</span> Int, s<span class=\"sy0\">:</span> Int, cnt<span class=\"sy0\">:</span> BigInteger<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> s<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>b in <span class=\"br0\">(</span>br + <span class=\"nu0\">1</span><span class=\"br0\">)</span>..<span class=\"me1\">BRANCHES</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sum +<span class=\"sy0\">=</span> n<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>sum <span class=\"sy0\">&gt;</span> MAX<span class=\"sy0\">_</span>N || <span class=\"br0\">(</span>l <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&gt;=</span> sum <span class=\"sy0\">&amp;&amp;</span> b <span class=\"sy0\">&gt;=</span> BRANCHES<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> tmp <span class=\"sy0\">=</span> rooted<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b <span class=\"sy0\">==</span> br + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            c<span class=\"br0\">[</span>br<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp <span class=\"sy0\">*</span> cnt<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> diff <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b - br<span class=\"br0\">)</span>.<span class=\"me1\">toLong</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            c<span class=\"br0\">[</span>br<span class=\"br0\">]</span> <span class=\"sy0\">*=</span> tmp + BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>diff - 1L<span class=\"br0\">)</span><br/>            c<span class=\"br0\">[</span>br<span class=\"br0\">]</span> /<span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>diff<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>l <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;</span> sum<span class=\"br0\">)</span> unrooted<span class=\"br0\">[</span>sum<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> c<span class=\"br0\">[</span>br<span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b <span class=\"sy0\">&lt;</span> BRANCHES<span class=\"br0\">)</span> rooted<span class=\"br0\">[</span>sum<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> c<span class=\"br0\">[</span>br<span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>m in n - <span class=\"nu0\">1</span> downTo <span class=\"nu0\">1</span><span class=\"br0\">)</span> tree<span class=\"br0\">(</span>b, m, l, sum, c<span class=\"br0\">[</span>br<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun bicenter<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>s and <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> tmp <span class=\"sy0\">=</span> rooted<span class=\"br0\">[</span>s / <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>        tmp <span class=\"sy0\">*=</span> tmp + BigInteger.<span class=\"me1\">ONE</span><br/>        unrooted<span class=\"br0\">[</span>s<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> tmp.<span class=\"me1\">shiftRight</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n in <span class=\"nu0\">1</span>..<span class=\"me1\">MAX_N</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        tree<span class=\"br0\">(</span><span class=\"nu0\">0</span>, n, n, <span class=\"nu0\">1</span>, BigInteger.<span class=\"me1\">ONE</span><span class=\"br0\">)</span><br/>        bicenter<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"$n: ${unrooted[n]}\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 14, "block": "<pre class=\"text highlighted_source\">G000602[n_]\u00a0:= <br/>  Block[{x}, <br/>   x*CycleIndexPolynomial[SymmetricGroup[4], <br/>        Table[ComposeSeries[#, x^i + O[x]^(n + 1)], {i, 4}]] - <br/>      CycleIndexPolynomial[SymmetricGroup[2], <br/>       Table[ComposeSeries[# - 1, x^i + O[x]^(n + 1)], {i, 2}]] + <br/>      ComposeSeries[#, x^2 + O[x]^(n + 1)] &amp;@<br/>    Fold[Series[<br/>       1 + x/6 (#1^3 + 3 #1 ComposeSeries[#1, x^2 + O[x]^#2] + <br/>           2 ComposeSeries[#1, x^3 + O[x]^#2]), {x, 0, #2}] &amp;, <br/>     1 + O[x], Range[n + 1]]];<br/>A000602[n_]\u00a0:= SeriesCoefficient[G000602[n], n];<br/>A000602List[n_]\u00a0:= CoefficientList[G000602[n], x];<br/><a class=\"__cf_email__\" data-cfemail=\"7235001b16322600131c01021d0117\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@{Range[0, 200], <a class=\"__cf_email__\" data-cfemail=\"f3b2c3c3c3c5c3c1bf9a8087b3c1c3c3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>}</pre>"}, {"lang": "Nim", "loc": 41, "block": "<pre class=\"text highlighted_source\">import bigints<br/>\u00a0<br/>const<br/>  nMax: int32 = 250<br/>  nBranches = 4<br/>\u00a0<br/>var rooted, unrooted: array[nMax + 1, BigInt]<br/>rooted[0..1] = [1.initBigInt, 1.initBigInt]<br/>unrooted[0..1] = [1.initBigInt, 1.initBigInt]<br/>for i in 2 .. nMax:<br/>  rooted[i] = 0.initBigInt<br/>  unrooted[i] = 0.initBigInt<br/>\u00a0<br/>proc choose(m, k): BigInt =<br/>  result = m<br/>  if k == 1: return<br/>  for i in 1 .. &lt; k:<br/>    result = result * (m + i) div (i + 1)<br/>\u00a0<br/>proc tree(br, n, l, sum: int32, cnt: BigInt) =<br/>  var s: int32 = 0<br/>  for b in br + 1 .. nBranches:<br/>    s = sum + (b - br) * n<br/>    if s &gt; nMax: return<br/>\u00a0<br/>    let c = choose(rooted[n], b - br) * cnt<br/>\u00a0<br/>    if l * 2 &lt; s: unrooted[s] += c<br/>    if b == nBranches: return<br/>    rooted[s] += c<br/>    for m in countdown(n-1, 1):<br/>      tree b, m, l, s, c<br/>\u00a0<br/>proc bicenter(s) =<br/>  if (s and 1) == 0:<br/>    unrooted[s] += rooted[s div 2] * (rooted[s div 2] + 1) div 2<br/>\u00a0<br/>for n in 1 .. nMax:<br/>  tree 0, n, n, 1, 1.initBigInt<br/>  n.bicenter<br/>  echo n, \": \", unrooted[n]</pre>"}, {"lang": "PARI/GP", "loc": 15, "block": "<pre class=\"parigp highlighted_source\">paraffin<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/><span class=\"br0\">{</span><br/>  local <span class=\"br0\">(</span>P <span class=\"sy0\">=</span> p<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> R<span class=\"sy0\">,</span> U <span class=\"sy0\">=</span> R <span class=\"sy0\">=</span> <span class=\"kw1\">Vec</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> P<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu1\">1</span><span class=\"sy0\">,</span> p<span class=\"sy0\">,</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>B<span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>C<span class=\"sy0\">,</span>S<span class=\"sy0\">,</span>l<span class=\"sy0\">=</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> my<span class=\"br0\">(</span>b<span class=\"sy0\">,</span>c<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>b <span class=\"sy0\">=</span> <span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"nu1\">4</span><span class=\"sy0\">-</span>B<span class=\"sy0\">,</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"sy0\">=</span> S <span class=\"sy0\">+</span> b <span class=\"sy0\">*</span> n<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> P<span class=\"sy0\">,</span><br/>          c <span class=\"sy0\">=</span> R<span class=\"br0\">[</span>n<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> C <span class=\"sy0\">*</span> <span class=\"kw1\">prod</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu1\">1</span><span class=\"sy0\">,</span> b<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>R<span class=\"br0\">[</span>n<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>i<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>l<span class=\"sy0\">+</span>l <span class=\"sy0\">&lt;</span> s<span class=\"sy0\">,</span> U<span class=\"br0\">[</span>s<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>B<span class=\"sy0\">+</span>b <span class=\"sy0\">&lt;</span> <span class=\"nu1\">4</span><span class=\"sy0\">,</span> R<span class=\"br0\">[</span>s<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> c<span class=\"sy0\">;</span> i <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>i<span class=\"sy0\">--,</span> self<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span>B<span class=\"sy0\">+</span>b<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> l<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu1\">2</span><span class=\"sy0\">,,</span> U<span class=\"br0\">[</span>n<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> R<span class=\"br0\">[</span>n<span class=\"sy0\">/</span><span class=\"nu1\">2</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>R<span class=\"br0\">[</span>n<span class=\"sy0\">/</span><span class=\"nu1\">2</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"br0\">[</span>n<span class=\"sy0\">,</span> U<span class=\"br0\">[</span>n<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Pascal", "loc": 88, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> Paraffins<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  gmp<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  max_n <span class=\"sy3\">=</span> <span class=\"nu0\">500</span><span class=\"sy1\">;</span><br/>  branch <span class=\"sy3\">=</span> <span class=\"nu0\">4</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  rooted<span class=\"sy1\">,</span> unrooted<span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy1\">..</span> <span class=\"me1\">max_n</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> mpz_t<span class=\"sy1\">;</span><br/>  c<span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy1\">..</span> <span class=\"me1\">branch</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> mpz_t<span class=\"sy1\">;</span><br/>  cnt<span class=\"sy1\">,</span> tmp<span class=\"sy1\">:</span> mpz_t<span class=\"sy1\">;</span><br/>  n<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  fmt<span class=\"sy1\">:</span> pchar<span class=\"sy1\">;</span><br/>  sum<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> tree<span class=\"br0\">(</span>br<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> l<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span> sum<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span> cnt<span class=\"sy1\">:</span> mpz_t<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    b<span class=\"sy1\">,</span> m<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> b <span class=\"sy1\">:</span><span class=\"sy3\">=</span> br <span class=\"sy3\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> branch <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      sum <span class=\"sy1\">:</span><span class=\"sy3\">=</span> sum <span class=\"sy3\">+</span> n<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> sum &gt;<span class=\"sy3\">=</span> max_n <span class=\"kw1\">then</span><br/>\texit<span class=\"sy1\">;</span><br/>\u00a0<br/>      <span class=\"coMULTI\">(* prevent unneeded long math *)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>l <span class=\"sy3\">*</span> <span class=\"nu0\">2</span> &gt;<span class=\"sy3\">=</span> sum<span class=\"br0\">)</span> <span class=\"kw3\">and</span> <span class=\"br0\">(</span>b &gt;<span class=\"sy3\">=</span> branch<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <br/>\texit<span class=\"sy1\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span> b <span class=\"sy3\">=</span> <span class=\"br0\">(</span>br <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\tmpz_mul<span class=\"br0\">(</span>c<span class=\"br0\">[</span>br<span class=\"br0\">]</span><span class=\"sy1\">,</span> rooted<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy1\">,</span> cnt<span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">begin</span><br/>\tmpz_add_ui<span class=\"br0\">(</span>tmp<span class=\"sy1\">,</span> rooted<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy1\">,</span> b <span class=\"sy3\">-</span> br <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\tmpz_mul<span class=\"br0\">(</span>c<span class=\"br0\">[</span>br<span class=\"br0\">]</span><span class=\"sy1\">,</span> c<span class=\"br0\">[</span>br<span class=\"br0\">]</span><span class=\"sy1\">,</span> tmp<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\tmpz_divexact_ui<span class=\"br0\">(</span>c<span class=\"br0\">[</span>br<span class=\"br0\">]</span><span class=\"sy1\">,</span> c<span class=\"br0\">[</span>br<span class=\"br0\">]</span><span class=\"sy1\">,</span> b <span class=\"sy3\">-</span> br<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span> l <span class=\"sy3\">*</span> <span class=\"nu0\">2</span> &lt; sum <span class=\"kw1\">then</span><br/>\tmpz_add<span class=\"br0\">(</span>unrooted<span class=\"br0\">[</span>sum<span class=\"br0\">]</span><span class=\"sy1\">,</span> unrooted<span class=\"br0\">[</span>sum<span class=\"br0\">]</span><span class=\"sy1\">,</span> c<span class=\"br0\">[</span>br<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span> b &lt; branch <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">begin</span><br/>\tmpz_add<span class=\"br0\">(</span>rooted<span class=\"br0\">[</span>sum<span class=\"br0\">]</span><span class=\"sy1\">,</span> rooted<span class=\"br0\">[</span>sum<span class=\"br0\">]</span><span class=\"sy1\">,</span> c<span class=\"br0\">[</span>br<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\t<span class=\"kw1\">for</span> m <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>\t  tree<span class=\"br0\">(</span>b<span class=\"sy1\">,</span> m<span class=\"sy1\">,</span> l<span class=\"sy1\">,</span> sum<span class=\"sy1\">,</span> c<span class=\"br0\">[</span>br<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> bicenter<span class=\"br0\">(</span>s<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw3\">odd</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    exit<span class=\"sy1\">;</span><br/>  mpz_add_ui<span class=\"br0\">(</span>tmp<span class=\"sy1\">,</span> rooted<span class=\"br0\">[</span>s <span class=\"kw1\">div</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  mpz_mul<span class=\"br0\">(</span>tmp<span class=\"sy1\">,</span> rooted<span class=\"br0\">[</span>s <span class=\"kw1\">div</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> tmp<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  mpz_tdiv_q_2exp<span class=\"br0\">(</span>tmp<span class=\"sy1\">,</span> tmp<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  mpz_add<span class=\"br0\">(</span>unrooted<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"sy1\">,</span> unrooted<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"sy1\">,</span> tmp<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    mpz_init_set_ui<span class=\"br0\">(</span>rooted<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    mpz_init_set_ui<span class=\"br0\">(</span>unrooted<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> max_n<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    mpz_init_set_ui<span class=\"br0\">(</span>rooted<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    mpz_init_set_ui<span class=\"br0\">(</span>unrooted<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> BRANCH<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    mpz_init<span class=\"br0\">(</span>c<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  mpz_init<span class=\"br0\">(</span>tmp<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  mpz_init_set_ui<span class=\"br0\">(</span>cnt<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  sum <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> MAX_N <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    tree<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> sum<span class=\"sy1\">,</span> cnt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    bicenter<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    mp_printf<span class=\"br0\">(</span><span class=\"st0\">'%d:\u00a0%Zd'</span><span class=\"sy3\">+</span><span class=\"kw3\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"kw3\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> <span class=\"sy2\">@</span>unrooted<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 40, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">GMPz</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$nmax</span> <span class=\"sy0\">=</span> <span class=\"nu0\">250</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$nbranches</span> <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@rooted</span>   <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> Math<span class=\"sy0\">::</span><span class=\"me2\">GMPz</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> x <span class=\"re0\">$nmax</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@unrooted</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> Math<span class=\"sy0\">::</span><span class=\"me2\">GMPz</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> x <span class=\"re0\">$nmax</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@c</span>        <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> Math<span class=\"sy0\">::</span><span class=\"me2\">GMPz</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$nbranches</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> tree <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$br</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$l</span><span class=\"sy0\">,</span> <span class=\"re0\">$sum</span><span class=\"sy0\">,</span> <span class=\"re0\">$cnt</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$b</span> <span class=\"br0\">(</span><span class=\"re0\">$br</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$nbranches</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$sum</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw1\">if</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$nmax</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"re0\">$l</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">$sum</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$b</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">$nbranches</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span> <span class=\"sy0\">==</span> <span class=\"re0\">$br</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"re0\">$c</span><span class=\"br0\">[</span><span class=\"re0\">$br</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$rooted</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$cnt</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      <span class=\"re0\">$c</span><span class=\"br0\">[</span><span class=\"re0\">$br</span><span class=\"br0\">]</span> <span class=\"sy0\">*=</span> <span class=\"re0\">$rooted</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$b</span> <span class=\"sy0\">-</span> <span class=\"re0\">$br</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$c</span><span class=\"br0\">[</span><span class=\"re0\">$br</span><span class=\"br0\">]</span> <span class=\"sy0\">/=</span> <span class=\"re0\">$b</span> <span class=\"sy0\">-</span> <span class=\"re0\">$br</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$unrooted</span><span class=\"br0\">[</span><span class=\"re0\">$sum</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$c</span><span class=\"br0\">[</span><span class=\"re0\">$br</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"re0\">$l</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$sum</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw1\">if</span> <span class=\"re0\">$b</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">$nbranches</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$rooted</span><span class=\"br0\">[</span><span class=\"re0\">$sum</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$c</span><span class=\"br0\">[</span><span class=\"re0\">$br</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$m</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$sum</span><span class=\"sy0\">+</span><span class=\"re0\">$m</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$nmax</span><span class=\"sy0\">;</span><br/>      tree<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$m</span><span class=\"sy0\">,</span> <span class=\"re0\">$l</span><span class=\"sy0\">,</span> <span class=\"re0\">$sum</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"br0\">[</span><span class=\"re0\">$br</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> bicenter <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$unrooted</span><span class=\"br0\">[</span><span class=\"re0\">$s</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$rooted</span><span class=\"br0\">[</span><span class=\"re0\">$s</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$rooted</span><span class=\"br0\">[</span><span class=\"re0\">$s</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>  <span class=\"kw1\">unless</span> <span class=\"re0\">$s</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$nmax</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  tree<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> Math<span class=\"sy0\">::</span><span class=\"me2\">GMPz</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  bicenter<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$n: $unrooted[$n]<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 45, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> count<span class=\"sy0\">-</span>unrooted<span class=\"sy0\">-</span>trees<span class=\"br0\">(</span>Int <span class=\"re0\">$max</span><span class=\"sy0\">-</span>branches<span class=\"sy0\">,</span> Int <span class=\"re0\">$max</span><span class=\"sy0\">-</span>weight<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@rooted</span>   <span class=\"sy0\">=</span> flat <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$max</span><span class=\"sy0\">-</span>weight <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@unrooted</span> <span class=\"sy0\">=</span> flat <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$max</span><span class=\"sy0\">-</span>weight <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> count<span class=\"sy0\">-</span>trees<span class=\"sy0\">-</span>with<span class=\"sy0\">-</span>centroid<span class=\"br0\">(</span>Int <span class=\"re0\">$radius</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">sub</span> add<span class=\"sy0\">-</span>branches<span class=\"br0\">(</span><br/>            Int <span class=\"re0\">$branches</span><span class=\"sy0\">,</span>        <span class=\"co1\"># number of branches to add</span><br/>            Int <span class=\"re0\">$w</span><span class=\"sy0\">,</span>               <span class=\"co1\"># weight of heaviest branch to add</span><br/>            Int <span class=\"re0\">$weight</span>  <span class=\"kw1\">is</span> copy<span class=\"sy0\">,</span> <span class=\"co1\"># accumulated weight of tree</span><br/>            Int <span class=\"re0\">$choices</span> <span class=\"kw1\">is</span> copy<span class=\"sy0\">,</span> <span class=\"co1\"># number of choices so far</span><br/>        <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$choices</span> <span class=\"sy0\">*=</span> <span class=\"re0\">@rooted</span><span class=\"br0\">[</span><span class=\"re0\">$w</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$branches</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$b</span> <span class=\"br0\">{</span><br/>                <span class=\"br0\">(</span><span class=\"re0\">$weight</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$w</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$max</span><span class=\"sy0\">-</span>weight <span class=\"kw1\">or</span> <span class=\"kw1\">last</span><span class=\"sy0\">;</span><br/>                <span class=\"re0\">@unrooted</span><span class=\"br0\">[</span><span class=\"re0\">$weight</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$choices</span> <span class=\"kw1\">if</span> <span class=\"re0\">$weight</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"re0\">$radius</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"re0\">$b</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$branches</span> <span class=\"br0\">{</span><br/>                    <span class=\"re0\">@rooted</span><span class=\"br0\">[</span><span class=\"re0\">$weight</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$choices</span><span class=\"sy0\">;</span><br/>                    add<span class=\"sy0\">-</span>branches<span class=\"br0\">(</span><span class=\"re0\">$branches</span> <span class=\"sy0\">-</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span><span class=\"sy0\">,</span> <span class=\"re0\">$weight</span><span class=\"sy0\">,</span> <span class=\"re0\">$choices</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..^</span> <span class=\"re0\">$w</span><span class=\"sy0\">;</span><br/>                    <span class=\"re0\">$choices</span> <span class=\"sy0\">=</span> <span class=\"re0\">$choices</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">@rooted</span><span class=\"br0\">[</span><span class=\"re0\">$w</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"kw1\">div</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        add<span class=\"sy0\">-</span>branches<span class=\"br0\">(</span><span class=\"re0\">$max</span><span class=\"sy0\">-</span>branches<span class=\"sy0\">,</span> <span class=\"re0\">$radius</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> count<span class=\"sy0\">-</span>trees<span class=\"sy0\">-</span>with<span class=\"sy0\">-</span>bicentroid<span class=\"br0\">(</span>Int <span class=\"re0\">$weight</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"re0\">$weight</span> <span class=\"sy0\">%%</span> <span class=\"nu0\">2</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> \\halfs <span class=\"sy0\">=</span> <span class=\"re0\">@rooted</span><span class=\"br0\">[</span><span class=\"re0\">$weight</span> <span class=\"kw1\">div</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">@unrooted</span><span class=\"br0\">[</span><span class=\"re0\">$weight</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>halfs <span class=\"sy0\">*</span> <span class=\"br0\">(</span>halfs <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">div</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    gather <span class=\"br0\">{</span><br/>        take <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$max</span><span class=\"sy0\">-</span>weight <span class=\"br0\">{</span><br/>            count<span class=\"sy0\">-</span>trees<span class=\"sy0\">-</span>with<span class=\"sy0\">-</span>centroid<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            count<span class=\"sy0\">-</span>trees<span class=\"sy0\">-</span>with<span class=\"sy0\">-</span>bicentroid<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            take <span class=\"re0\">@unrooted</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"kw1\">constant</span> N <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@paraffins</span> <span class=\"sy0\">=</span> count<span class=\"sy0\">-</span>unrooted<span class=\"sy0\">-</span>trees<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> N<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st_h\">'%3d'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st_h\">': '</span><span class=\"sy0\">,</span> <span class=\"re0\">@paraffins</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> flat <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">30</span><span class=\"sy0\">,</span> N<span class=\"sy0\">;</span></pre>"}, {"lang": "Pike", "loc": 63, "block": "<pre class=\"pike highlighted_source\">int MAX_N <span class=\"sy0\">=</span> <span class=\"nu0\">300</span><span class=\"sy0\">;</span><br/>int BRANCH <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>\u00a0<br/>array ra <span class=\"sy0\">=</span> allocate<span class=\"br0\">(</span>MAX_N<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>array unrooted <span class=\"sy0\">=</span> allocate<span class=\"br0\">(</span>MAX_N<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>void tree<span class=\"br0\">(</span>int br, int n, int l, int sum, int cnt<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    int c<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>int b <span class=\"sy0\">=</span> br <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> b &lt; BRANCH <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> b<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        sum <span class=\"sy0\">+=</span> n<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sum &gt;<span class=\"sy0\">=</span> MAX_N<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// prevent unneeded long math</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>l <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> &gt;<span class=\"sy0\">=</span> sum <span class=\"sy0\">&amp;&amp;</span> b &gt;<span class=\"sy0\">=</span> BRANCH<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">==</span> br <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            c <span class=\"sy0\">=</span> ra<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">*</span> cnt<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span><br/>        <span class=\"br0\">{</span><br/>            c <span class=\"sy0\">=</span> c <span class=\"sy0\">*</span> <span class=\"br0\">(</span>ra<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> br <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> br<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>l <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> &lt; sum<span class=\"br0\">)</span><br/>            unrooted<span class=\"br0\">[</span>sum<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> c<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b &lt; BRANCH<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            ra<span class=\"br0\">[</span>sum<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> c<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>int m<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> m &lt; n<span class=\"sy0\">;</span> m<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                tree<span class=\"br0\">(</span>b, m, l, sum, c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>void bicenter<span class=\"br0\">(</span>int s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>s <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        int aux <span class=\"sy0\">=</span> ra<span class=\"br0\">[</span>s <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        unrooted<span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> aux <span class=\"sy0\">*</span> <span class=\"br0\">(</span>aux <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>void main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    ra<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> ra<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> unrooted<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> unrooted<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>int n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> n &lt; MAX_N<span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        tree<span class=\"br0\">(</span><span class=\"nu0\">0</span>, n, n, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        bicenter<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        write<span class=\"br0\">(</span><span class=\"st0\">\"%d:\u00a0%d<span class=\"es0\">\\n</span>\"</span>, n, unrooted<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Python", "loc": 53, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">try</span>:<br/>    <span class=\"kw1\">import</span> psyco<br/>    psyco.<span class=\"me1\">full</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">except</span> <span class=\"kw2\">ImportError</span>:<br/>    <span class=\"kw1\">pass</span><br/>\u00a0<br/>MAX_N <span class=\"sy0\">=</span> <span class=\"nu0\">300</span><br/>BRANCH <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>\u00a0<br/>ra <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> * MAX_N<br/>unrooted <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> * MAX_N<br/>\u00a0<br/><span class=\"kw1\">def</span> tree<span class=\"br0\">(</span>br<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> l<span class=\"sy0\">,</span> <span class=\"kw2\">sum</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> cnt <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">global</span> ra<span class=\"sy0\">,</span> unrooted<span class=\"sy0\">,</span> MAX_N<span class=\"sy0\">,</span> BRANCH<br/>    <span class=\"kw1\">for</span> b <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>br + <span class=\"nu0\">1</span><span class=\"sy0\">,</span> BRANCH + <span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw2\">sum</span> +<span class=\"sy0\">=</span> n<br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">sum</span> <span class=\"sy0\">&gt;=</span> MAX_N:<br/>            <span class=\"kw1\">return</span><br/>\u00a0<br/>        <span class=\"co1\"># prevent unneeded long math</span><br/>        <span class=\"kw1\">if</span> l * <span class=\"nu0\">2</span> <span class=\"sy0\">&gt;=</span> <span class=\"kw2\">sum</span> <span class=\"kw1\">and</span> b <span class=\"sy0\">&gt;=</span> BRANCH:<br/>            <span class=\"kw1\">return</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> b <span class=\"sy0\">==</span> br + <span class=\"nu0\">1</span>:<br/>            c <span class=\"sy0\">=</span> ra<span class=\"br0\">[</span>n<span class=\"br0\">]</span> * cnt<br/>        <span class=\"kw1\">else</span>:<br/>            c <span class=\"sy0\">=</span> c * <span class=\"br0\">(</span>ra<span class=\"br0\">[</span>n<span class=\"br0\">]</span> + <span class=\"br0\">(</span>b - br - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> / <span class=\"br0\">(</span>b - br<span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> l * <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;</span> <span class=\"kw2\">sum</span>:<br/>            unrooted<span class=\"br0\">[</span><span class=\"kw2\">sum</span><span class=\"br0\">]</span> +<span class=\"sy0\">=</span> c<br/>\u00a0<br/>        <span class=\"kw1\">if</span> b <span class=\"sy0\">&lt;</span> BRANCH:<br/>            ra<span class=\"br0\">[</span><span class=\"kw2\">sum</span><span class=\"br0\">]</span> +<span class=\"sy0\">=</span> c<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> m <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span>:<br/>                tree<span class=\"br0\">(</span>b<span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> l<span class=\"sy0\">,</span> <span class=\"kw2\">sum</span><span class=\"sy0\">,</span> c<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> bicenter<span class=\"br0\">(</span>s<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">global</span> ra<span class=\"sy0\">,</span> unrooted<br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span>s &amp; <span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>        aux <span class=\"sy0\">=</span> ra<span class=\"br0\">[</span>s / <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>        unrooted<span class=\"br0\">[</span>s<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> aux * <span class=\"br0\">(</span>aux + <span class=\"nu0\">1</span><span class=\"br0\">)</span> / <span class=\"nu0\">2</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">global</span> ra<span class=\"sy0\">,</span> unrooted<span class=\"sy0\">,</span> MAX_N<br/>    ra<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> ra<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> unrooted<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> unrooted<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> MAX_N<span class=\"br0\">)</span>:<br/>        tree<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>        bicenter<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"%d:\u00a0%d\"</span>\u00a0% <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> unrooted<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 38, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define MAX_N 33)<br/>(define BRANCH 4)<br/>\u00a0<br/>(define rooted   (make-vector MAX_N 0))<br/>(define unrooted (make-vector MAX_N 0))<br/>(for ([i 2]) (vector-set! rooted i 1) (vector-set! unrooted i 1))<br/>\u00a0<br/>(define (vector-inc! v i d) (vector-set! v i (+ d (vector-ref v i))))<br/>\u00a0<br/>(define (choose m k)<br/>  (if (= k 1) m<br/>      (for/fold ([r m]) ([i (in-range 1 k)]) (/ (* r (+ m i)) (add1 i)))))<br/>\u00a0<br/>(define (tree br n cnt sum l)<br/>  (let/ec return<br/>    (for ([b (in-range (add1 br) (add1 BRANCH))])<br/>      (define s (+ sum (* (- b br) n)))<br/>      (when (&gt;= s MAX_N) (return))<br/>      (define c (* (choose (vector-ref rooted n) (- b br)) cnt))<br/>      (when (&lt; (* l 2) s) (vector-inc! unrooted s c))<br/>      (when (= b BRANCH) (return))<br/>      (vector-inc! rooted s c)<br/>      (for ([m (in-range (sub1 n) 0 -1)]) (tree b m c s l)))))<br/>\u00a0<br/>(define (bicenter s)<br/>  (when (even? s)<br/>    (vector-inc! unrooted s (* (vector-ref rooted (/ s 2))<br/>                               (add1 (vector-ref rooted (/ s 2)))<br/>                               1/2))))<br/>\u00a0<br/>(for ([n (in-range 1 MAX_N)])<br/>  (tree 0 n 1 1 n)<br/>  (bicenter n)<br/>  (printf \"~a: ~a\\n\" n (vector-ref unrooted n)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 27, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program enumerates (without repetition) the # of paraffins with N atoms of carbon*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> nodes <span class=\"sy0\">.</span>                                <span class=\"coMULTI\">/*obtain optional argument from the CL.*/</span><br/><span class=\"kw1\">if</span> nodes==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> nodes==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> nodes=<span class=\"nu0\">100</span>        <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>  rooted<span class=\"sy0\">.</span> =  <span class=\"nu0\">0</span>;      rooted<span class=\"sy0\">.</span>0=<span class=\"nu0\">1</span>;     rooted<span class=\"sy0\">.</span>1=<span class=\"nu0\">1</span>  <span class=\"coMULTI\">/*define the  base     rooted  numbers.*/</span><br/>unrooted<span class=\"sy0\">.</span> =  <span class=\"nu0\">0</span>;    unrooted<span class=\"sy0\">.</span>0=<span class=\"nu0\">1</span>;   unrooted<span class=\"sy0\">.</span>1=<span class=\"nu0\">1</span>  <span class=\"coMULTI\">/*  \"     \"     \"    unrooted     \"    */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">9</span>,nodes%2<span class=\"br0\">)</span>                    <span class=\"coMULTI\">/*this program may use gihugeic numbers*/</span><br/>w=<span class=\"kw6\">length</span><span class=\"br0\">(</span>nodes<span class=\"br0\">)</span>                                  <span class=\"coMULTI\">/*W: used for aligning formatted nodes.*/</span><br/><span class=\"kw1\">say</span>  <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,w<span class=\"br0\">)</span>  unrooted<span class=\"sy0\">.</span>0                      <span class=\"coMULTI\">/*show enumerations of  0  carbon atoms*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  process all nodes (up to NODES)*/</span><br/>          <span class=\"kw1\">do</span> C=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> nodes;         h=C%2       <span class=\"coMULTI\">/*C:   is the number of carbon atoms.  */</span><br/>          <span class=\"kw1\">call</span>  tree  <span class=\"nu0\">0</span>, C, C, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>              <span class=\"coMULTI\">/* [\u2193]  if # of carbon atoms is even\u00b7\u00b7\u00b7*/</span><br/>          <span class=\"kw1\">if</span> C<span class=\"sy0\">//</span><span class=\"nu0\">2</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> unrooted<span class=\"sy0\">.</span>C=unrooted<span class=\"sy0\">.</span>C   +   rooted<span class=\"sy0\">.</span>h <span class=\"sy0\">*</span> <span class=\"br0\">(</span>rooted<span class=\"sy0\">.</span>h + <span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0% <span class=\"nu0\">2</span><br/>          <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>C,w<span class=\"br0\">)</span>  unrooted<span class=\"sy0\">.</span>C             <span class=\"coMULTI\">/*display an aligned formatted number. */</span><br/>          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*C*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>tree: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> rooted<span class=\"sy0\">.</span> unrooted<span class=\"sy0\">.</span> nodes #<span class=\"sy0\">.</span>          <span class=\"coMULTI\">/*this function is recursive.*/</span><br/>      <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> br,n,L,sum,cnt;  nm=n-<span class=\"nu0\">1</span>;     LL=L+L;       brp=br+<span class=\"nu0\">1</span><br/>               <span class=\"kw1\">do</span> b=brp  <span class=\"kw2\">to</span> <span class=\"nu0\">4</span>;   sum=sum+n;  <span class=\"kw1\">if</span> sum<span class=\"sy0\">&gt;</span>nodes  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span><br/>               <span class=\"kw1\">if</span> b==<span class=\"nu0\">4</span>      <span class=\"kw3\">then</span>             <span class=\"kw1\">if</span> LL<span class=\"sy0\">&gt;</span>=sum    <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span><br/>               <span class=\"kw1\">if</span> b==brp    <span class=\"kw3\">then</span> #<span class=\"sy0\">.</span>br=rooted<span class=\"sy0\">.</span>n <span class=\"sy0\">*</span> cnt<br/>                            <span class=\"kw3\">else</span> #<span class=\"sy0\">.</span>br=#<span class=\"sy0\">.</span>br <span class=\"sy0\">*</span> <span class=\"br0\">(</span>rooted<span class=\"sy0\">.</span>n + b - brp<span class=\"br0\">)</span>\u00a0% <span class=\"br0\">(</span>b - br<span class=\"br0\">)</span><br/>               <span class=\"kw1\">if</span> LL<span class=\"sy0\">&lt;</span>sum    <span class=\"kw3\">then</span> unrooted<span class=\"sy0\">.</span>sum=unrooted<span class=\"sy0\">.</span>sum + #<span class=\"sy0\">.</span>br<br/>               <span class=\"kw1\">if</span> b==<span class=\"nu0\">4</span>      <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span><br/>               rooted<span class=\"sy0\">.</span>sum = rooted<span class=\"sy0\">.</span>sum + #<span class=\"sy0\">.</span>br<br/>                  <span class=\"kw1\">do</span> m=nm  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> nm;   <span class=\"kw1\">call</span> tree b, m, L, sum, #<span class=\"sy0\">.</span>br;   <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*m*/</span><br/>               <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*b*/</span>               <span class=\"coMULTI\">/* \u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191    recursive invocation of  TREE. */</span></pre>"}, {"lang": "Ruby", "loc": 36, "block": "<pre class=\"ruby highlighted_source\">MAX_N = <span class=\"nu0\">500</span><br/>BRANCH = <span class=\"nu0\">4</span><br/>\u00a0<br/><span class=\"kw1\">def</span> tree<span class=\"br0\">(</span>br, n, l=n, sum=<span class=\"nu0\">1</span>, cnt=<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> b <span class=\"kw1\">in</span> br<span class=\"sy0\">+</span><span class=\"nu0\">1</span> .. <span class=\"me1\">BRANCH</span><br/>    sum <span class=\"sy0\">+</span>= n<br/>    <span class=\"kw2\">return</span> <span class=\"kw1\">if</span> sum <span class=\"sy0\">&gt;</span>= MAX_N<br/>    <span class=\"co1\"># prevent unneeded long math</span><br/>    <span class=\"kw2\">return</span> <span class=\"kw1\">if</span> l <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&gt;</span>= sum <span class=\"kw1\">and</span> b <span class=\"sy0\">&gt;</span>= BRANCH<br/>    <span class=\"kw1\">if</span> b == br <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>      c = <span class=\"re0\">$ra</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">*</span> cnt<br/>    <span class=\"kw1\">else</span><br/>      c = c <span class=\"sy0\">*</span> <span class=\"br0\">(</span>$ra<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> br <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> br<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"re0\">$unrooted</span><span class=\"br0\">[</span>sum<span class=\"br0\">]</span> <span class=\"sy0\">+</span>= c <span class=\"kw1\">if</span> l <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;</span> sum<br/>    <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> b <span class=\"sy0\">&gt;</span>= BRANCH<br/>    <span class=\"re0\">$ra</span><span class=\"br0\">[</span>sum<span class=\"br0\">]</span> <span class=\"sy0\">+</span>= c<br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span>...<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>m<span class=\"sy0\">|</span> tree<span class=\"br0\">(</span>b, m, l, sum, c<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> bicenter<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  <span class=\"kw2\">return</span> <span class=\"kw1\">if</span> s.<span class=\"me1\">odd</span>?<br/>  aux = <span class=\"re0\">$ra</span><span class=\"br0\">[</span>s <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>  <span class=\"re0\">$unrooted</span><span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"sy0\">+</span>= aux <span class=\"sy0\">*</span> <span class=\"br0\">(</span>aux <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"re0\">$ra</span>       = <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> MAX_N<br/><span class=\"re0\">$unrooted</span> = <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> MAX_N<br/>\u00a0<br/><span class=\"re0\">$ra</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = <span class=\"re0\">$ra</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = <span class=\"re0\">$unrooted</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = <span class=\"re0\">$unrooted</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = <span class=\"nu0\">1</span><br/><span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"nu0\">1</span>...<span class=\"me1\">MAX_N</span><br/>  tree<span class=\"br0\">(</span><span class=\"nu0\">0</span>, n<span class=\"br0\">)</span><br/>  bicenter<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"%d:\u00a0%d\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>n, <span class=\"re0\">$unrooted</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 34, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Paraffins <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>nMax, nBranches<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">250</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rooted, unrooted <span class=\"sy0\">=</span> Array.<span class=\"me1\">tabulate</span><span class=\"br0\">(</span>nMax + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> BigInt<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> BigInt<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>unrooted, c<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>rooted.<span class=\"me1\">clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Array<span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span><span class=\"br0\">(</span>nBranches<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> to nMax<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> tree<span class=\"br0\">(</span>br<span class=\"sy0\">:</span> Int, n<span class=\"sy0\">:</span> Int, l<span class=\"sy0\">:</span> Int, inSum<span class=\"sy0\">:</span> Int, cnt<span class=\"sy0\">:</span> BigInt<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> sum <span class=\"sy0\">=</span> inSum<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>b <span class=\"sy0\">&lt;</span>- br + <span class=\"nu0\">1</span> to nBranches<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sum +<span class=\"sy0\">=</span> n<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>sum <span class=\"sy0\">&gt;</span> nMax || <span class=\"br0\">(</span>l <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&gt;=</span> sum <span class=\"sy0\">&amp;&amp;</span> b <span class=\"sy0\">&gt;=</span> nBranches<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b <span class=\"sy0\">==</span> br + <span class=\"nu0\">1</span><span class=\"br0\">)</span> c<span class=\"br0\">(</span>br<span class=\"br0\">)</span> <span class=\"sy0\">=</span> rooted<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">*</span> cnt<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>          c<span class=\"br0\">(</span>br<span class=\"br0\">)</span> <span class=\"sy0\">=</span> c<span class=\"br0\">(</span>br<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>rooted<span class=\"br0\">(</span>n<span class=\"br0\">)</span> + BigInt<span class=\"br0\">(</span>b - br - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          c<span class=\"br0\">(</span>br<span class=\"br0\">)</span> <span class=\"sy0\">=</span> c<span class=\"br0\">(</span>br<span class=\"br0\">)</span> / BigInt<span class=\"br0\">(</span>b - br<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>l <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&lt;</span> sum<span class=\"br0\">)</span> unrooted<span class=\"br0\">(</span>sum<span class=\"br0\">)</span> <span class=\"sy0\">=</span> unrooted<span class=\"br0\">(</span>sum<span class=\"br0\">)</span> + c<span class=\"br0\">(</span>br<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b <span class=\"sy0\">&lt;</span> nBranches<span class=\"br0\">)</span> rooted<span class=\"br0\">(</span>sum<span class=\"br0\">)</span> <span class=\"sy0\">=</span> rooted<span class=\"br0\">(</span>sum<span class=\"br0\">)</span> + c<span class=\"br0\">(</span>br<span class=\"br0\">)</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>m <span class=\"sy0\">&lt;</span>- n - <span class=\"nu0\">1</span> to <span class=\"nu0\">1</span> by -<span class=\"nu0\">1</span><span class=\"br0\">)</span> tree<span class=\"br0\">(</span>b, m, l, sum, c<span class=\"br0\">(</span>br<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> bicenter<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> halves <span class=\"sy0\">=</span> rooted<span class=\"br0\">(</span>s / <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      unrooted<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">=</span> unrooted<span class=\"br0\">(</span>s<span class=\"br0\">)</span> + <span class=\"br0\">(</span><span class=\"br0\">(</span>halves + BigInt<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> halves <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    tree<span class=\"br0\">(</span><span class=\"nu0\">0</span>, n, n, <span class=\"nu0\">1</span>, BigInt<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    bicenter<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>f<span class=\"st0\">\"$n%3d:  ${unrooted(n)}%s\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 62, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"bigint.s7i\";<br/>\u00a0<br/>const integer: max_n is 500;<br/>const integer: branch is 4;<br/>\u00a0<br/>var array bigInteger: rooted is max_n times 0_;<br/>var array bigInteger: unrooted is max_n times 0_;<br/>\u00a0<br/>const proc: tree (in integer: br, in integer: n, in integer: l, in var integer: sum, in bigInteger: cnt) is func<br/>  local<br/>    var integer: b is 0;<br/>    var integer: m is 0;<br/>    var bigInteger: c is 0_;<br/>    var bigInteger: diff is 0_;<br/>  begin<br/>    for b range br + 1 to branch do<br/>      sum +:= n;<br/>      if sum &gt; max_n or l * 2 &gt;= sum and b &gt;= branch then<br/>        # Prevent unneeded long math.<br/>        b\u00a0:= branch;<br/>      else<br/>        if b = (br + 1) then<br/>          c\u00a0:= rooted[n] * cnt;<br/>        else<br/>          diff\u00a0:= bigInteger conv (b - br);<br/>          c\u00a0:= c * (rooted[n] + pred(diff)) div diff;<br/>        end if;<br/>        if l * 2 &lt; sum then<br/>          unrooted[sum] +:= c;<br/>        end if;<br/>        if b &lt; branch then<br/>          rooted[sum] +:= c;<br/>          for m range n-1 downto 1 do<br/>            tree(b, m, l, sum, c);<br/>          end for;<br/>        end if;<br/>      end if;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: bicenter (in integer: s) is func<br/>  begin<br/>    if not odd(s) then<br/>      unrooted[s] +:= (rooted[s div 2] * succ(rooted[s div 2])) &gt;&gt; 1;<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var bigInteger: cnt is 1_;<br/>    var integer: n is 0;<br/>    var integer: sum is 1;<br/>  begin<br/>    rooted[1]\u00a0:= 1_;<br/>    unrooted[1]\u00a0:= 1_;<br/>    for n range 1 to max_n do<br/>      tree(0, n, n, sum, cnt);<br/>      bicenter(n);<br/>      writeln(n &lt;&amp; \": \" &lt;&amp; unrooted[n]);<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Tcl", "loc": 46, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"kw1\">set</span> maxN <span class=\"nu0\">200</span><br/><span class=\"kw1\">set</span> rooted <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$maxN</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/><span class=\"kw2\">lset</span> rooted <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw2\">lset</span> rooted <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">set</span> unrooted <span class=\"re0\">$rooted</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> choose <span class=\"br0\">{</span>m k<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$k</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$m</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> r <span class=\"re0\">$m</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$k</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> r <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$r</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$m</span>+<span class=\"re0\">$i</span><span class=\"br0\">)</span> / <span class=\"br0\">(</span><span class=\"re0\">$i</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$r</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> tree <span class=\"br0\">{</span>br n cnt sum l<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> maxN rooted unrooted<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> b <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$br</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$b</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">4</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> s <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$sum</span> + <span class=\"br0\">(</span><span class=\"re0\">$b</span>-<span class=\"re0\">$br</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$s</span> <span class=\"sy0\">&gt;</span>= <span class=\"re0\">$maxN</span><span class=\"br0\">}</span> <span class=\"kw1\">return</span><br/>\t<span class=\"kw1\">set</span> c <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>choose <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$rooted</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$b</span>-<span class=\"re0\">$br</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$cnt</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$l</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$s</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lset</span> unrooted <span class=\"re0\">$s</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$unrooted</span> <span class=\"re0\">$s</span><span class=\"br0\">]</span> + <span class=\"re0\">$c</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$b</span> == <span class=\"nu0\">4</span><span class=\"br0\">}</span> <span class=\"kw1\">return</span><br/>\t<span class=\"kw2\">lset</span> rooted <span class=\"re0\">$s</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$rooted</span> <span class=\"re0\">$s</span><span class=\"br0\">]</span> + <span class=\"re0\">$c</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> m <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> m -<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    tree <span class=\"re0\">$b</span> <span class=\"re0\">$m</span> <span class=\"re0\">$c</span> <span class=\"re0\">$s</span> <span class=\"re0\">$l</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> bicenter <span class=\"br0\">{</span>s<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$s</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">global</span> unrooted rooted<br/>    <span class=\"kw1\">set</span> r <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$rooted</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$s</span>/<span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">lset</span> unrooted <span class=\"re0\">$s</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$unrooted</span> <span class=\"re0\">$s</span><span class=\"br0\">]</span> + <span class=\"re0\">$r</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$r</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span>/<span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> n <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$maxN</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    tree <span class=\"nu0\">0</span> <span class=\"re0\">$n</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"re0\">$n</span><br/>    bicenter <span class=\"re0\">$n</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"${n}: [lindex $unrooted $n]\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 35, "block": "<pre class=\"text highlighted_source\">var BN=Import(\"zklBigNum\");<br/>\u00a0<br/>const nMax=100, nBranches=4;<br/>\u00a0<br/>var rooted  =(nMax+1).pump(List.createLong(nMax+1).write,BN.fp(0)),<br/>    unrooted=(nMax+1).pump(List.createLong(nMax+1).write,BN.fp(0));<br/>rooted[0]=BN(1); rooted[1]=BN(1); unrooted[0]=BN(1); unrooted[1]=BN(1);<br/>\u00a0<br/>fcn tree(br,n,l,inSum,cnt){<br/>   var c=(nBranches).pump(List().write,0);  // happens only once<br/>\u00a0<br/>   sum\u00a0:= inSum;<br/>   foreach b in ([br + 1 .. nBranches]){<br/>      sum += n;<br/>      if (sum &gt; nMax or (l * 2 &gt;= sum and b &gt;= nBranches)) return();<br/>      if (b == br + 1) c[br] = rooted[n] * cnt; // --&gt;BigInt<br/>      else{<br/>\t c[br].mul(rooted[n] + b - br - 1);<br/>\t c[br].div(b - br);<br/>      }<br/>      if (l * 2 &lt; sum) unrooted[sum].add(c[br]);<br/>      if (b &lt; nBranches) rooted[sum].add(c[br]);<br/>      foreach m in ([n-1 .. 1,-1]) { tree(b, m, l, sum, c[br]); }<br/>   }<br/>}<br/>\u00a0<br/>fcn bicenter(s){<br/>   if (s.isEven) unrooted[s].add(rooted[s / 2] * (rooted[s / 2] + 1) / 2);<br/>}<br/>\u00a0<br/>foreach n in ([1 .. nMax]){<br/>   tree(0, n, n, 1, BN(1));<br/>   bicenter(n);<br/>   println(n, \": \", unrooted[n]);<br/>}</pre>"}]}