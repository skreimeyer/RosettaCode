{"task": "Numerical_integration", "blocks": [{"lang": "ActionScript", "loc": 51, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">function</span> leftRect<span class=\"br0\">(</span>f:<span class=\"kw2\">Function</span>, a:<span class=\"kw3\">Number</span>, b:<span class=\"kw3\">Number</span>, n:uint<span class=\"br0\">)</span>:<span class=\"kw3\">Number</span> <br/><span class=\"br0\">{</span><br/>\t<span class=\"kw2\">var</span> sum:<span class=\"kw3\">Number</span> = <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw2\">var</span> dx:<span class=\"kw3\">Number</span> = <span class=\"br0\">(</span>b-a<span class=\"br0\">)</span><span class=\"sy0\">/</span>n;<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw2\">var</span> x:<span class=\"kw3\">Number</span> = a; n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span>; n--, x += dx<span class=\"br0\">)</span><br/>\t\tsum += f<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">return</span> sum <span class=\"sy0\">*</span> dx;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> rightRect<span class=\"br0\">(</span>f:<span class=\"kw2\">Function</span>, a:<span class=\"kw3\">Number</span>, b:<span class=\"kw3\">Number</span>, n:uint<span class=\"br0\">)</span>:<span class=\"kw3\">Number</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw2\">var</span> sum:<span class=\"kw3\">Number</span> = <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw2\">var</span> dx:<span class=\"kw3\">Number</span> = <span class=\"br0\">(</span>b-a<span class=\"br0\">)</span><span class=\"sy0\">/</span>n;<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw2\">var</span> x:<span class=\"kw3\">Number</span> = a + dx; n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span>; n--, x += dx<span class=\"br0\">)</span><br/>\t\tsum += f<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">return</span> sum <span class=\"sy0\">*</span> dx;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> midRect<span class=\"br0\">(</span>f:<span class=\"kw2\">Function</span>, a:<span class=\"kw3\">Number</span>, b:<span class=\"kw3\">Number</span>, n:uint<span class=\"br0\">)</span>:<span class=\"kw3\">Number</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw2\">var</span> sum:<span class=\"kw3\">Number</span> = <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw2\">var</span> dx:<span class=\"kw3\">Number</span> = <span class=\"br0\">(</span>b-a<span class=\"br0\">)</span><span class=\"sy0\">/</span>n;<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw2\">var</span> x:<span class=\"kw3\">Number</span> = a + <span class=\"br0\">(</span>dx <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>; n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span>; n--, x += dx<span class=\"br0\">)</span><br/>\t\tsum += f<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">return</span> sum <span class=\"sy0\">*</span> dx;<br/><span class=\"br0\">}</span><br/><span class=\"kw2\">function</span> trapezium<span class=\"br0\">(</span>f:<span class=\"kw2\">Function</span>, a:<span class=\"kw3\">Number</span>, b:<span class=\"kw3\">Number</span>, n:uint<span class=\"br0\">)</span>:<span class=\"kw3\">Number</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw2\">var</span> dx:<span class=\"kw3\">Number</span> = <span class=\"br0\">(</span>b-a<span class=\"br0\">)</span><span class=\"sy0\">/</span>n;<br/>\t<span class=\"kw2\">var</span> x:<span class=\"kw3\">Number</span> = a;<br/>\t<span class=\"kw2\">var</span> sum:<span class=\"kw3\">Number</span> = f<span class=\"br0\">(</span>a<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw2\">var</span> i:uint = <span class=\"nu0\">1</span>; i <span class=\"sy0\">&lt;</span> n; i++<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\ta += dx;<br/>\t\tsum += f<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span>;<br/>\t<span class=\"br0\">}</span><br/>\tsum += f<span class=\"br0\">(</span>b<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0.5</span> <span class=\"sy0\">*</span> dx <span class=\"sy0\">*</span> sum;<br/><span class=\"br0\">}</span><br/><span class=\"kw2\">function</span> simpson<span class=\"br0\">(</span>f:<span class=\"kw2\">Function</span>, a:<span class=\"kw3\">Number</span>, b:<span class=\"kw3\">Number</span>, n:uint<span class=\"br0\">)</span>:<span class=\"kw3\">Number</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw2\">var</span> dx:<span class=\"kw3\">Number</span> = <span class=\"br0\">(</span>b-a<span class=\"br0\">)</span><span class=\"sy0\">/</span>n;<br/>\t<span class=\"kw2\">var</span> sum1:<span class=\"kw3\">Number</span> = f<span class=\"br0\">(</span>a + dx<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw2\">var</span> sum2:<span class=\"kw3\">Number</span> = <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw2\">var</span> i:uint = <span class=\"nu0\">1</span>; i <span class=\"sy0\">&lt;</span> n; i++<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tsum1 += f<span class=\"br0\">(</span>a + dx<span class=\"sy0\">*</span>i + dx<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>\t\tsum2 += f<span class=\"br0\">(</span>a + dx<span class=\"sy0\">*</span>i<span class=\"br0\">)</span>;<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span>dx<span class=\"sy0\">/</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>a<span class=\"br0\">)</span> + f<span class=\"br0\">(</span>b<span class=\"br0\">)</span> + <span class=\"nu0\">4</span><span class=\"sy0\">*</span>sum1 + <span class=\"nu0\">2</span><span class=\"sy0\">*</span>sum2<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 10, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">generic</span><br/>   <span class=\"kw3\">type</span> Scalar <span class=\"kw1\">is</span> <span class=\"kw3\">digits</span> &lt;&gt;;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> F <span class=\"br0\">(</span>X\u00a0: Scalar<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Scalar;<br/><span class=\"kw3\">package</span> Integrate <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">function</span> Left_Rectangular     <span class=\"br0\">(</span>A, B\u00a0: Scalar; N\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Scalar;<br/>   <span class=\"kw3\">function</span> Right_Rectangular    <span class=\"br0\">(</span>A, B\u00a0: Scalar; N\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Scalar;<br/>   <span class=\"kw3\">function</span> Midpoint_Rectangular <span class=\"br0\">(</span>A, B\u00a0: Scalar; N\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Scalar;<br/>   <span class=\"kw3\">function</span> Trapezium            <span class=\"br0\">(</span>A, B\u00a0: Scalar; N\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Scalar;<br/>   <span class=\"kw3\">function</span> Simpsons             <span class=\"br0\">(</span>A, B\u00a0: Scalar; N\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Scalar;<br/><span class=\"kw1\">end</span> Integrate;</pre>"}, {"lang": "ALGOL 68", "loc": 118, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> F <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span><span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">#<br/>#</span><span class=\"coMULTI\"># left rect #</span><span class=\"coMULTI\">#<br/>#</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> left rect <span class=\"sy1\">=</span> <span class=\"br0\">(</span>F f<span class=\"sy1\">,</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> a<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> n<span class=\"br0\">)</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>   <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> h<span class=\"sy1\">=</span> <span class=\"br0\">(</span>b <span class=\"sy1\">-</span> a<span class=\"br0\">)</span> <span class=\"sy1\">/</span> n<span class=\"sy1\">;</span><br/>   <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> sum<span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>   <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> x<span class=\"sy1\">:=</span> a<span class=\"sy1\">;</span><br/>   <span class=\"kw2\">WHILE</span> x <span class=\"sy1\">&lt;=</span> b <span class=\"sy1\">-</span> h <span class=\"kw2\">DO</span><br/>      sum <span class=\"sy1\">:=</span> sum <span class=\"sy1\">+</span> <span class=\"br0\">(</span>h <span class=\"sy1\">*</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      x <span class=\"sy1\">+:=</span> h<br/>   <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>   sum<br/><span class=\"kw2\">END</span> <span class=\"coMULTI\"># left rect #</span><span class=\"sy1\">;</span> <br/>\u00a0<br/><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">#<br/>#</span><span class=\"coMULTI\"># right rect  #</span><span class=\"coMULTI\">#<br/>#</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> right rect <span class=\"sy1\">=</span> <span class=\"br0\">(</span>F f<span class=\"sy1\">,</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> a<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> n<span class=\"br0\">)</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>   <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> h<span class=\"sy1\">=</span> <span class=\"br0\">(</span>b <span class=\"sy1\">-</span> a<span class=\"br0\">)</span> <span class=\"sy1\">/</span> n<span class=\"sy1\">;</span><br/>   <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> sum<span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>   <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> x<span class=\"sy1\">:=</span> a <span class=\"sy1\">+</span> h<span class=\"sy1\">;</span><br/>   <span class=\"kw2\">WHILE</span> x <span class=\"sy1\">&lt;=</span> b <span class=\"kw2\">DO</span><br/>      sum <span class=\"sy1\">:=</span> sum <span class=\"sy1\">+</span> <span class=\"br0\">(</span>h <span class=\"sy1\">*</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      x <span class=\"sy1\">+:=</span> h<br/>   <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>   sum<br/><span class=\"kw2\">END</span> <span class=\"coMULTI\"># right rect #</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">#<br/>#</span><span class=\"coMULTI\"># mid rect  #</span><span class=\"coMULTI\">#<br/>#</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> mid rect <span class=\"sy1\">=</span> <span class=\"br0\">(</span>F f<span class=\"sy1\">,</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> a<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> n<span class=\"br0\">)</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>   <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> h<span class=\"sy1\">=</span> <span class=\"br0\">(</span>b <span class=\"sy1\">-</span> a<span class=\"br0\">)</span> <span class=\"sy1\">/</span> n<span class=\"sy1\">;</span><br/>   <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> sum<span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>   <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> x<span class=\"sy1\">:=</span> a<span class=\"sy1\">;</span><br/>   <span class=\"kw2\">WHILE</span> x <span class=\"sy1\">&lt;=</span> b <span class=\"sy1\">-</span> h <span class=\"kw2\">DO</span><br/>      sum <span class=\"sy1\">:=</span> sum <span class=\"sy1\">+</span> h <span class=\"sy1\">*</span> f<span class=\"br0\">(</span>x <span class=\"sy1\">+</span> h <span class=\"sy1\">/</span> 2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      x <span class=\"sy1\">+:=</span> h<br/>   <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>   sum<br/><span class=\"kw2\">END</span> <span class=\"coMULTI\"># mid rect #</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">#<br/>#</span><span class=\"coMULTI\"># trapezium #</span><span class=\"coMULTI\">#<br/>#</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span> <br/>\u00a0<br/><span class=\"kw4\">PROC</span> trapezium <span class=\"sy1\">=</span> <span class=\"br0\">(</span>F f<span class=\"sy1\">,</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> a<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> n<span class=\"br0\">)</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>   <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> h<span class=\"sy1\">=</span> <span class=\"br0\">(</span>b <span class=\"sy1\">-</span> a<span class=\"br0\">)</span> <span class=\"sy1\">/</span> n<span class=\"sy1\">;</span><br/>   <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> sum<span class=\"sy1\">:=</span> f<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy1\">+</span> f<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> x<span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>   <span class=\"kw2\">WHILE</span> x <span class=\"sy1\">&lt;=</span> n <span class=\"sy1\">-</span> 1 <span class=\"kw2\">DO</span><br/>      sum <span class=\"sy1\">:=</span> sum <span class=\"sy1\">+</span> 2 <span class=\"sy1\">*</span> f<span class=\"br0\">(</span>a <span class=\"sy1\">+</span> x <span class=\"sy1\">*</span> h <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      x <span class=\"sy1\">+:=</span> 1<br/>   <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>   <span class=\"br0\">(</span>b <span class=\"sy1\">-</span> a<span class=\"br0\">)</span> <span class=\"sy1\">/</span> <span class=\"br0\">(</span>2 <span class=\"sy1\">*</span> n<span class=\"br0\">)</span> <span class=\"sy1\">*</span> sum<br/><span class=\"kw2\">END</span> <span class=\"coMULTI\"># trapezium #</span><span class=\"sy1\">;</span> <br/>\u00a0<br/><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">#<br/>#</span><span class=\"coMULTI\"># simpson #</span><span class=\"coMULTI\">#<br/>#</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span><span class=\"coMULTI\">##</span> <br/>\u00a0<br/><span class=\"kw4\">PROC</span> simpson <span class=\"sy1\">=</span> <span class=\"br0\">(</span>F f<span class=\"sy1\">,</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> a<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> n<span class=\"br0\">)</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>   <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> h<span class=\"sy1\">=</span> <span class=\"br0\">(</span>b <span class=\"sy1\">-</span> a<span class=\"br0\">)</span> <span class=\"sy1\">/</span> n<span class=\"sy1\">;</span><br/>   <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> sum1<span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>   <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> sum2<span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>   <span class=\"kw3\">INT</span> limit<span class=\"sy1\">:=</span> n <span class=\"sy1\">-</span> 1<span class=\"sy1\">;</span><br/>   <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">TO</span> limit <span class=\"kw2\">DO</span><br/>      sum1 <span class=\"sy1\">:=</span> sum1 <span class=\"sy1\">+</span> f<span class=\"br0\">(</span>a <span class=\"sy1\">+</span> h <span class=\"sy1\">*</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy1\">+</span> h <span class=\"sy1\">/</span> 2<span class=\"br0\">)</span><br/>   <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>   <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 1 <span class=\"kw2\">TO</span> limit <span class=\"kw2\">DO</span><br/>      sum2 <span class=\"sy1\">+:=</span> f<span class=\"br0\">(</span>a <span class=\"sy1\">+</span> h <span class=\"sy1\">*</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>   h <span class=\"sy1\">/</span> 6 <span class=\"sy1\">*</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy1\">+</span> f<span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"sy1\">+</span> 4 <span class=\"sy1\">*</span> sum1 <span class=\"sy1\">+</span> 2 <span class=\"sy1\">*</span> sum2<span class=\"br0\">)</span><br/><span class=\"kw2\">END</span> <span class=\"coMULTI\"># simpson #</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># test the above procedures #</span><br/><span class=\"kw4\">PROC</span> test integrators <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span>     legend<br/>                        <span class=\"sy1\">,</span> F          function<br/>                        <span class=\"sy1\">,</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span>  lower limit<br/>                        <span class=\"sy1\">,</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span>  upper limit<br/>                        <span class=\"sy1\">,</span> <span class=\"kw3\">INT</span>        iterations<br/>                        <span class=\"br0\">)</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> legend<br/>           <span class=\"sy1\">,</span> <span class=\"kw22\">fixed</span><span class=\"br0\">(</span>  left rect<span class=\"br0\">(</span> function<span class=\"sy1\">,</span> lower limit<span class=\"sy1\">,</span> upper limit<span class=\"sy1\">,</span> iterations <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span>20<span class=\"sy1\">,</span> 6 <span class=\"br0\">)</span><br/>           <span class=\"sy1\">,</span> <span class=\"kw22\">fixed</span><span class=\"br0\">(</span> right rect<span class=\"br0\">(</span> function<span class=\"sy1\">,</span> lower limit<span class=\"sy1\">,</span> upper limit<span class=\"sy1\">,</span> iterations <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span>20<span class=\"sy1\">,</span> 6 <span class=\"br0\">)</span><br/>           <span class=\"sy1\">,</span> <span class=\"kw22\">fixed</span><span class=\"br0\">(</span>   mid rect<span class=\"br0\">(</span> function<span class=\"sy1\">,</span> lower limit<span class=\"sy1\">,</span> upper limit<span class=\"sy1\">,</span> iterations <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span>20<span class=\"sy1\">,</span> 6 <span class=\"br0\">)</span><br/>           <span class=\"sy1\">,</span> <span class=\"kw22\">fixed</span><span class=\"br0\">(</span>  trapezium<span class=\"br0\">(</span> function<span class=\"sy1\">,</span> lower limit<span class=\"sy1\">,</span> upper limit<span class=\"sy1\">,</span> iterations <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span>20<span class=\"sy1\">,</span> 6 <span class=\"br0\">)</span><br/>           <span class=\"sy1\">,</span> <span class=\"kw22\">fixed</span><span class=\"br0\">(</span>    simpson<span class=\"br0\">(</span> function<span class=\"sy1\">,</span> lower limit<span class=\"sy1\">,</span> upper limit<span class=\"sy1\">,</span> iterations <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span>20<span class=\"sy1\">,</span> 6 <span class=\"br0\">)</span><br/>           <span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><br/>           <span class=\"br0\">)</span><br/>         <span class=\"br0\">)</span><br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># test integrators #</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"   \"</span><br/>       <span class=\"sy1\">,</span> <span class=\"st0\">\"           left rect\"</span><br/>       <span class=\"sy1\">,</span> <span class=\"st0\">\"          right rect\"</span><br/>       <span class=\"sy1\">,</span> <span class=\"st0\">\"            mid rect\"</span><br/>       <span class=\"sy1\">,</span> <span class=\"st0\">\"           trapezium\"</span><br/>       <span class=\"sy1\">,</span> <span class=\"st0\">\"             simpson\"</span><br/>       <span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><br/>       <span class=\"br0\">)</span><br/>     <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>test integrators<span class=\"br0\">(</span> <span class=\"st0\">\"x^3\"</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> x <span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> x <span class=\"sy1\">*</span> x <span class=\"sy1\">*</span> x<span class=\"sy1\">,</span> 0<span class=\"sy1\">,</span>     1<span class=\"sy1\">,</span>       100 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>test integrators<span class=\"br0\">(</span> <span class=\"st0\">\"1/x\"</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> x <span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> 1 <span class=\"sy1\">/</span> x<span class=\"sy1\">,</span>     1<span class=\"sy1\">,</span>   100<span class=\"sy1\">,</span>     1 000 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>test integrators<span class=\"br0\">(</span> <span class=\"st0\">\"x  \"</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> x <span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> x<span class=\"sy1\">,</span>         0<span class=\"sy1\">,</span> 5 000<span class=\"sy1\">,</span> 5 000 000 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>test integrators<span class=\"br0\">(</span> <span class=\"st0\">\"x  \"</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> x <span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">:</span> x<span class=\"sy1\">,</span>         0<span class=\"sy1\">,</span> 6 000<span class=\"sy1\">,</span> 6 000 000 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw7\">SKIP</span></pre>"}, {"lang": "AutoHotkey", "loc": 35, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% Rect<span class=\"br0\">(</span><span class=\"st0\">\"fun\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">; 0.45 left</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% Rect<span class=\"br0\">(</span><span class=\"st0\">\"fun\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>    <span class=\"co1\">; 0.50 mid</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% Rect<span class=\"br0\">(</span><span class=\"st0\">\"fun\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">; 0.55 right</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% Trapez<span class=\"br0\">(</span><span class=\"st0\">\"fun\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>  <span class=\"co1\">; 0.50</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% Simpson<span class=\"br0\">(</span><span class=\"st0\">\"fun\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"co1\">; 0.50</span><br/>\u00a0<br/>Rect<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>side<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; side: -1=left, 0=midpoint, 1=right</span><br/>   h <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<br/>   sum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> a <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>side<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>h<span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"re0\">%n%</span><br/>      sum <span class=\"sy0\">+=</span> <span class=\"re0\">%f%</span><span class=\"br0\">(</span>a <span class=\"sy0\">+</span> h<span class=\"sy0\">*</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><br/>   <span class=\"kw1\">Return</span> h<span class=\"sy0\">*</span>sum<br/><span class=\"br0\">}</span><br/>\u00a0<br/>Trapez<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   h <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<br/>   sum <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      sum <span class=\"sy0\">+=</span> <span class=\"re0\">%f%</span><span class=\"br0\">(</span>a <span class=\"sy0\">+</span> h<span class=\"sy0\">*</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><br/>   <span class=\"kw1\">Return</span> h<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">%f%</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"re0\">%f%</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>sum<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Simpson<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   h <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<br/>   sum1 <span class=\"sy0\">:=</span> sum2 <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> ah <span class=\"sy0\">:=</span> a <span class=\"sy0\">-</span> h<span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <span class=\"re0\">%n%</span><br/>      sum1 <span class=\"sy0\">+=</span> <span class=\"re0\">%f%</span><span class=\"br0\">(</span>ah <span class=\"sy0\">+</span> h<span class=\"sy0\">*</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      sum2 <span class=\"sy0\">+=</span> <span class=\"re0\">%f%</span><span class=\"br0\">(</span>a <span class=\"sy0\">+</span> h<span class=\"sy0\">*</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><br/>   <span class=\"kw1\">Return</span> h<span class=\"sy0\">/</span><span class=\"nu0\">6</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">%f%</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"re0\">%f%</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">4</span><span class=\"sy0\">*</span>sum1 <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>sum2<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; linear test function</span><br/>   <span class=\"kw1\">Return</span> x<br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 51, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"kw1\">FUNCTION</span> leftRect<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>     h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<br/>     sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>     <span class=\"kw1\">FOR</span> x <span class=\"sy0\">=</span> a <span class=\"kw1\">TO</span> b <span class=\"sy0\">-</span> h <span class=\"kw1\">STEP</span> h<br/>        sum <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> h <span class=\"sy0\">*</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">NEXT</span> x<br/>     leftRect <span class=\"sy0\">=</span> sum<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> rightRect<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>     h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<br/>     sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>     <span class=\"kw1\">FOR</span> x <span class=\"sy0\">=</span> a <span class=\"sy0\">+</span> h <span class=\"kw1\">TO</span> b <span class=\"kw1\">STEP</span> h<br/>        sum <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> h <span class=\"sy0\">*</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">NEXT</span> x<br/>     rightRect <span class=\"sy0\">=</span> sum<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> midRect<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>     h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<br/>     sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>     <span class=\"kw1\">FOR</span> x <span class=\"sy0\">=</span> a <span class=\"sy0\">+</span> h <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> b <span class=\"sy0\">-</span> h <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"kw1\">STEP</span> h<br/>        sum <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> h <span class=\"sy0\">*</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">NEXT</span> x<br/>     midRect <span class=\"sy0\">=</span> sum<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> trap<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>     h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<br/>     sum <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>     <span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        sum <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> f<span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy0\">+</span> i <span class=\"sy0\">*</span> h<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">NEXT</span> i<br/>     trap <span class=\"sy0\">=</span> h <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> sum<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> simpson<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>     h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<br/>     sum1 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>     sum2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>     <span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        sum1 <span class=\"sy0\">=</span> sum1 <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>a <span class=\"sy0\">+</span> h <span class=\"sy0\">*</span> i <span class=\"sy0\">+</span> h <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">NEXT</span> i<br/>\u00a0<br/>     <span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        sum2 <span class=\"sy0\">=</span> sum2 <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>a <span class=\"sy0\">+</span> h <span class=\"sy0\">*</span> i<span class=\"br0\">)</span><br/>     <span class=\"kw1\">NEXT</span> i<br/>\u00a0<br/>     simpson <span class=\"sy0\">=</span> h <span class=\"sy0\">/</span> <span class=\"nu0\">6</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> sum1 <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> sum2<span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span></pre>"}, {"lang": "BBC BASIC", "loc": 71, "block": "<pre class=\"text highlighted_source\">      *FLOAT64<br/>      @% = 12\u00a0: REM Column width<br/>\u00a0<br/>      PRINT \"Function     Range          L-Rect      R-Rect      M-Rect      Trapeze     Simpson\"<br/>      FOR func% = 1 TO 4<br/>        READ x$, l, h, s%<br/>        PRINT x$,\u00a0; l \" - \"\u00a0; h, FNlrect(x$, l, h, s%) FNrrect(x$, l, h, s%)\u00a0;<br/>        PRINT FNmrect(x$, l, h, s%) FNtrapeze(x$, l, h, s%) FNsimpson(x$, l, h, s%)<br/>      NEXT<br/>      END<br/>\u00a0<br/>      DATA \"x^3\", 0,    1,     100<br/>      DATA \"1/x\", 1,  100,    1000<br/>      DATA \"x\",   0, 5000, 5000000<br/>      DATA \"x\",   0, 6000, 6000000<br/>\u00a0<br/>      DEF FNlrect(x$, a, b, n%)<br/>      LOCAL i%, d, s, x<br/>      d = (b - a) / n%<br/>      x = a<br/>      FOR i% = 1 TO n%<br/>        s += d * EVAL(x$)<br/>        x += d<br/>      NEXT<br/>      = s<br/>\u00a0<br/>      DEF FNrrect(x$, a, b, n%)<br/>      LOCAL i%, d, s, x<br/>      d = (b - a) / n%<br/>      x = a<br/>      FOR i% = 1 TO n%<br/>        x += d<br/>        s += d * EVAL(x$)<br/>      NEXT<br/>      = s<br/>\u00a0<br/>      DEF FNmrect(x$, a, b, n%)<br/>      LOCAL i%, d, s, x<br/>      d = (b - a) / n%<br/>      x = a<br/>      FOR i% = 1 TO n%<br/>        x += d/2<br/>        s += d * EVAL(x$)<br/>        x += d/2<br/>      NEXT<br/>      = s<br/>\u00a0<br/>      DEF FNtrapeze(x$, a, b, n%)<br/>      LOCAL i%, d, f, s, x<br/>      d = (b - a) / n%<br/>      x = b\u00a0: f = EVAL(x$)<br/>      x = a\u00a0: s = d * (f + EVAL(x$)) / 2<br/>      FOR i% = 1 TO n%-1<br/>        x += d<br/>        s += d * EVAL(x$)<br/>      NEXT<br/>      = s<br/>\u00a0<br/>      DEF FNsimpson(x$, a, b, n%)<br/>      LOCAL i%, d, f, s1, s2, x<br/>      d = (b - a) / n%<br/>      x = b\u00a0: f = EVAL(x$)<br/>      x = a + d/2\u00a0: s1 = EVAL(x$)<br/>      FOR i% = 1 TO n%-1<br/>        x += d/2<br/>        s2 += EVAL(x$)<br/>        x += d/2<br/>        s1 += EVAL(x$)<br/>      NEXT<br/>      x = a<br/>      = (d / 6) * (f + EVAL(x$) + 4 * s1 + 2 * s2)</pre>"}, {"lang": "C", "loc": 58, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> int_leftrect<span class=\"br0\">(</span><span class=\"kw4\">double</span> from<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> to<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>func<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw4\">double</span> h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>to<span class=\"sy0\">-</span>from<span class=\"br0\">)</span><span class=\"sy0\">/</span>n<span class=\"sy0\">;</span><br/>   <span class=\"kw4\">double</span> sum <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> x<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span><span class=\"br0\">(</span>x<span class=\"sy0\">=</span>from<span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>to<span class=\"sy0\">-</span>h<span class=\"br0\">)</span><span class=\"sy0\">;</span> x <span class=\"sy0\">+=</span> h<span class=\"br0\">)</span><br/>      sum <span class=\"sy0\">+=</span> func<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> h<span class=\"sy0\">*</span>sum<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> int_rightrect<span class=\"br0\">(</span><span class=\"kw4\">double</span> from<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> to<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>func<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw4\">double</span> h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>to<span class=\"sy0\">-</span>from<span class=\"br0\">)</span><span class=\"sy0\">/</span>n<span class=\"sy0\">;</span><br/>   <span class=\"kw4\">double</span> sum <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> x<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span><span class=\"br0\">(</span>x<span class=\"sy0\">=</span>from<span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>to<span class=\"sy0\">-</span>h<span class=\"br0\">)</span><span class=\"sy0\">;</span> x <span class=\"sy0\">+=</span> h<span class=\"br0\">)</span><br/>     sum <span class=\"sy0\">+=</span> func<span class=\"br0\">(</span>x<span class=\"sy0\">+</span>h<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> h<span class=\"sy0\">*</span>sum<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> int_midrect<span class=\"br0\">(</span><span class=\"kw4\">double</span> from<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> to<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>func<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw4\">double</span> h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>to<span class=\"sy0\">-</span>from<span class=\"br0\">)</span><span class=\"sy0\">/</span>n<span class=\"sy0\">;</span><br/>   <span class=\"kw4\">double</span> sum <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> x<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span><span class=\"br0\">(</span>x<span class=\"sy0\">=</span>from<span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>to<span class=\"sy0\">-</span>h<span class=\"br0\">)</span><span class=\"sy0\">;</span> x <span class=\"sy0\">+=</span> h<span class=\"br0\">)</span><br/>     sum <span class=\"sy0\">+=</span> func<span class=\"br0\">(</span>x<span class=\"sy0\">+</span>h<span class=\"sy0\">/</span><span class=\"nu16\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> h<span class=\"sy0\">*</span>sum<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> int_trapezium<span class=\"br0\">(</span><span class=\"kw4\">double</span> from<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> to<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>func<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw4\">double</span> h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>to <span class=\"sy0\">-</span> from<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<span class=\"sy0\">;</span><br/>   <span class=\"kw4\">double</span> sum <span class=\"sy0\">=</span> func<span class=\"br0\">(</span>from<span class=\"br0\">)</span> <span class=\"sy0\">+</span> func<span class=\"br0\">(</span>to<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>       sum <span class=\"sy0\">+=</span> <span class=\"nu16\">2.0</span><span class=\"sy0\">*</span>func<span class=\"br0\">(</span>from <span class=\"sy0\">+</span> i <span class=\"sy0\">*</span> h<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span>  h <span class=\"sy0\">*</span> sum <span class=\"sy0\">/</span> <span class=\"nu16\">2.0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> int_simpson<span class=\"br0\">(</span><span class=\"kw4\">double</span> from<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> to<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>func<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw4\">double</span> h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>to <span class=\"sy0\">-</span> from<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<span class=\"sy0\">;</span><br/>   <span class=\"kw4\">double</span> sum1 <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>   <span class=\"kw4\">double</span> sum2 <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>   <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw4\">double</span> x<span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>      sum1 <span class=\"sy0\">+=</span> func<span class=\"br0\">(</span>from <span class=\"sy0\">+</span> h <span class=\"sy0\">*</span> i <span class=\"sy0\">+</span> h <span class=\"sy0\">/</span> <span class=\"nu16\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>      sum2 <span class=\"sy0\">+=</span> func<span class=\"br0\">(</span>from <span class=\"sy0\">+</span> h <span class=\"sy0\">*</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">return</span> h <span class=\"sy0\">/</span> <span class=\"nu16\">6.0</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>func<span class=\"br0\">(</span>from<span class=\"br0\">)</span> <span class=\"sy0\">+</span> func<span class=\"br0\">(</span>to<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu16\">4.0</span> <span class=\"sy0\">*</span> sum1 <span class=\"sy0\">+</span> <span class=\"nu16\">2.0</span> <span class=\"sy0\">*</span> sum2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 119, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Interval<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> Interval<span class=\"br0\">(</span><span class=\"kw4\">double</span> leftEndpoint, <span class=\"kw4\">double</span> size<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        LeftEndpoint <span class=\"sy0\">=</span> leftEndpoint<span class=\"sy0\">;</span><br/>        RightEndpoint <span class=\"sy0\">=</span> leftEndpoint <span class=\"sy0\">+</span> size<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">double</span> LeftEndpoint<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">get</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">set</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">double</span> RightEndpoint<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">get</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">set</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">double</span> Size<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">get</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> RightEndpoint <span class=\"sy0\">-</span> LeftEndpoint<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">double</span> Center<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">get</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>LeftEndpoint <span class=\"sy0\">+</span> RightEndpoint<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> IEnumerable<span class=\"sy0\">&lt;</span>Interval<span class=\"sy0\">&gt;</span> Subdivide<span class=\"br0\">(</span><span class=\"kw4\">int</span> subintervalCount<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> subintervalSize <span class=\"sy0\">=</span> Size <span class=\"sy0\">/</span> subintervalCount<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, subintervalCount<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>index <span class=\"sy0\">=&gt;</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Interval<span class=\"br0\">(</span>LeftEndpoint <span class=\"sy0\">+</span> index <span class=\"sy0\">*</span> subintervalSize, subintervalSize<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> DefiniteIntegral<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> DefiniteIntegral<span class=\"br0\">(</span>Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span>, <span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span> integrand, Interval domain<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Integrand <span class=\"sy0\">=</span> integrand<span class=\"sy0\">;</span><br/>        Domain <span class=\"sy0\">=</span> domain<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span>, <span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span> Integrand<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">get</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">set</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Interval Domain<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">get</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">set</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">double</span> SampleIntegrand<span class=\"br0\">(</span>ApproximationMethod approximationMethod, Interval subdomain<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>approximationMethod<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> ApproximationMethod<span class=\"sy0\">.</span><span class=\"me1\">RectangleLeft</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">return</span> Integrand<span class=\"br0\">(</span>subdomain<span class=\"sy0\">.</span><span class=\"me1\">LeftEndpoint</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> ApproximationMethod<span class=\"sy0\">.</span><span class=\"me1\">RectangleMidpoint</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">return</span> Integrand<span class=\"br0\">(</span>subdomain<span class=\"sy0\">.</span><span class=\"me1\">Center</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> ApproximationMethod<span class=\"sy0\">.</span><span class=\"me1\">RectangleRight</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">return</span> Integrand<span class=\"br0\">(</span>subdomain<span class=\"sy0\">.</span><span class=\"me1\">RightEndpoint</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> ApproximationMethod<span class=\"sy0\">.</span><span class=\"me1\">Trapezium</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">return</span> <span class=\"br0\">(</span>Integrand<span class=\"br0\">(</span>subdomain<span class=\"sy0\">.</span><span class=\"me1\">LeftEndpoint</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> Integrand<span class=\"br0\">(</span>subdomain<span class=\"sy0\">.</span><span class=\"me1\">RightEndpoint</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> ApproximationMethod<span class=\"sy0\">.</span><span class=\"me1\">Simpson</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">return</span> <span class=\"br0\">(</span>Integrand<span class=\"br0\">(</span>subdomain<span class=\"sy0\">.</span><span class=\"me1\">LeftEndpoint</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> Integrand<span class=\"br0\">(</span>subdomain<span class=\"sy0\">.</span><span class=\"me1\">Center</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> Integrand<span class=\"br0\">(</span>subdomain<span class=\"sy0\">.</span><span class=\"me1\">RightEndpoint</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> NotImplementedException<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">double</span> Approximate<span class=\"br0\">(</span>ApproximationMethod approximationMethod, <span class=\"kw4\">int</span> subdomainCount<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> Domain<span class=\"sy0\">.</span><span class=\"me1\">Size</span> <span class=\"sy0\">*</span> Domain<span class=\"sy0\">.</span><span class=\"me1\">Subdivide</span><span class=\"br0\">(</span>subdomainCount<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Sum</span><span class=\"br0\">(</span>subdomain <span class=\"sy0\">=&gt;</span> SampleIntegrand<span class=\"br0\">(</span>approximationMethod, subdomain<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> subdomainCount<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">enum</span> ApproximationMethod<br/>    <span class=\"br0\">{</span><br/>        RectangleLeft,<br/>        RectangleMidpoint,<br/>        RectangleRight,<br/>        Trapezium,<br/>        Simpson<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> TestApproximationMethods<span class=\"br0\">(</span>DefiniteIntegral integral, <span class=\"kw4\">int</span> subdomainCount<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>DefiniteIntegral<span class=\"sy0\">.</span><span class=\"me1\">ApproximationMethod</span> approximationMethod <span class=\"kw1\">in</span> <span class=\"kw4\">Enum</span><span class=\"sy0\">.</span><span class=\"me1\">GetValues</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=typeof+msdn.microsoft.com\"><span class=\"kw3\">typeof</span></a><span class=\"br0\">(</span>DefiniteIntegral<span class=\"sy0\">.</span><span class=\"me1\">ApproximationMethod</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>integral<span class=\"sy0\">.</span><span class=\"me1\">Approximate</span><span class=\"br0\">(</span>approximationMethod, subdomainCount<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        TestApproximationMethods<span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> DefiniteIntegral<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">*</span> x <span class=\"sy0\">*</span> x, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Interval<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        TestApproximationMethods<span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> DefiniteIntegral<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> x, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Interval<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">99</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        TestApproximationMethods<span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> DefiniteIntegral<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Interval<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">5000</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"nu0\">500000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        TestApproximationMethods<span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> DefiniteIntegral<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> x, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Interval<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">6000</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"nu0\">6000000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 63, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co1\">// the integration routine</span><br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> Method, <span class=\"kw2\">typename</span> F, <span class=\"kw2\">typename</span> Float<span class=\"sy1\">&gt;</span><br/> <span class=\"kw4\">double</span> integrate<span class=\"br0\">(</span>F f, Float a, Float b, <span class=\"kw4\">int</span> steps, Method m<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">double</span> s <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>  <span class=\"kw4\">double</span> h <span class=\"sy1\">=</span> <span class=\"br0\">(</span>b<span class=\"sy2\">-</span>a<span class=\"br0\">)</span><span class=\"sy2\">/</span>steps<span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> steps<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>    s <span class=\"sy2\">+</span><span class=\"sy1\">=</span> m<span class=\"br0\">(</span>f, a <span class=\"sy2\">+</span> h<span class=\"sy2\">*</span>i, h<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> h<span class=\"sy2\">*</span>s<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// methods</span><br/><span class=\"kw2\">class</span> rectangular<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  <span class=\"kw2\">enum</span> position_type <span class=\"br0\">{</span> left, middle, right <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>  rectangular<span class=\"br0\">(</span>position_type pos<span class=\"br0\">)</span><span class=\"sy4\">:</span> position<span class=\"br0\">(</span>pos<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> F, <span class=\"kw2\">typename</span> Float<span class=\"sy1\">&gt;</span><br/>   <span class=\"kw4\">double</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span>F f, Float x, Float h<span class=\"br0\">)</span> <span class=\"kw4\">const</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">switch</span><span class=\"br0\">(</span>position<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"kw1\">case</span> left<span class=\"sy4\">:</span><br/>      <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">case</span> middle<span class=\"sy4\">:</span><br/>      <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>x<span class=\"sy2\">+</span>h<span class=\"sy2\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">case</span> right<span class=\"sy4\">:</span><br/>      <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>x<span class=\"sy2\">+</span>h<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>  <span class=\"kw4\">const</span> position_type position<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> trapezium<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> F, <span class=\"kw2\">typename</span> Float<span class=\"sy1\">&gt;</span><br/>   <span class=\"kw4\">double</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span>F f, Float x, Float h<span class=\"br0\">)</span> <span class=\"kw4\">const</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy2\">+</span> f<span class=\"br0\">(</span>x<span class=\"sy2\">+</span>h<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy2\">/</span><span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> simpson<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> F, <span class=\"kw2\">typename</span> Float<span class=\"sy1\">&gt;</span><br/>   <span class=\"kw4\">double</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span>F f, Float x, Float h<span class=\"br0\">)</span> <span class=\"kw4\">const</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">4</span><span class=\"sy2\">*</span>f<span class=\"br0\">(</span>x<span class=\"sy2\">+</span>h<span class=\"sy2\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> f<span class=\"br0\">(</span>x<span class=\"sy2\">+</span>h<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy2\">/</span><span class=\"nu0\">6</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">// sample usage</span><br/><span class=\"kw4\">double</span> f<span class=\"br0\">(</span><span class=\"kw4\">double</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> x<span class=\"sy2\">*</span>x<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// inside a function somewhere:</span><br/><span class=\"kw4\">double</span> rl <span class=\"sy1\">=</span> integrate<span class=\"br0\">(</span>f, <span class=\"nu16\">0.0</span>, <span class=\"nu16\">1.0</span>, <span class=\"nu0\">10</span>, rectangular<span class=\"br0\">(</span>rectangular<span class=\"sy4\">::</span><span class=\"me2\">left</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">double</span> rm <span class=\"sy1\">=</span> integrate<span class=\"br0\">(</span>f, <span class=\"nu16\">0.0</span>, <span class=\"nu16\">1.0</span>, <span class=\"nu0\">10</span>, rectangular<span class=\"br0\">(</span>rectangular<span class=\"sy4\">::</span><span class=\"me2\">middle</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">double</span> rr <span class=\"sy1\">=</span> integrate<span class=\"br0\">(</span>f, <span class=\"nu16\">0.0</span>, <span class=\"nu16\">1.0</span>, <span class=\"nu0\">10</span>, rectangular<span class=\"br0\">(</span>rectangular<span class=\"sy4\">::</span><span class=\"me2\">right</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">double</span> t  <span class=\"sy1\">=</span> integrate<span class=\"br0\">(</span>f, <span class=\"nu16\">0.0</span>, <span class=\"nu16\">1.0</span>, <span class=\"nu0\">10</span>, trapezium<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">double</span> s  <span class=\"sy1\">=</span> integrate<span class=\"br0\">(</span>f, <span class=\"nu16\">0.0</span>, <span class=\"nu16\">1.0</span>, <span class=\"nu0\">10</span>, simpson<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre>"}, {"lang": "Chapel", "loc": 131, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>proc f1(x:real):real {<br/>  return x**3;<br/>}<br/>\u00a0<br/>proc f2(x:real):real {<br/>  return 1/x;<br/>}<br/>\u00a0<br/>proc f3(x:real):real {<br/>  return x;<br/>}<br/>\u00a0<br/>proc leftRectangleIntegration(a: real, b: real, N: int, f): real{<br/>  var h: real = (b - a)/N;<br/>  var sum: real = 0.0;<br/>  var x_n: real;<br/>  for n in 0..N-1 {<br/>    x_n = a + n * h;<br/>    sum = sum + f(x_n);<br/>  }<br/>  return h * sum;<br/>}<br/>\u00a0<br/>proc rightRectangleIntegration(a: real, b: real, N: int, f): real{<br/>  var h: real = (b - a)/N;<br/>  var sum: real = 0.0;<br/>  var x_n: real;<br/>  for n in 0..N-1 {<br/>    x_n = a + (n + 1) * h;<br/>    sum = sum + f(x_n);<br/>  }<br/>  return h * sum;<br/>}<br/>\u00a0<br/>proc midpointRectangleIntegration(a: real, b: real, N: int, f): real{<br/>  var h: real = (b - a)/N;<br/>  var sum: real = 0.0;<br/>  var x_n: real;<br/>  for n in 0..N-1 {<br/>    x_n = a + (n + 0.5) * h;<br/>    sum = sum + f(x_n);<br/>  }<br/>  return h * sum;<br/>}<br/>\u00a0<br/>proc trapezoidIntegration(a: real(64), b: real(64), N: int(64), f): real{<br/>  var h: real(64) = (b - a)/N;<br/>  var sum: real(64) = f(a) + f(b);<br/>  var x_n: real(64);<br/>  for n in 1..N-1 {<br/>    x_n = a + n * h;<br/>    sum = sum + 2.0 * f(x_n);<br/>  }<br/>  return (h/2.0) * sum;<br/>}<br/>\u00a0<br/>proc simpsonsIntegration(a: real(64), b: real(64), N: int(64), f): real{<br/>  var h: real(64) = (b - a)/N;<br/>  var sum: real(64) = f(a) + f(b);<br/>  var x_n: real(64);<br/>  for n in 1..N-1 by 2 {<br/>    x_n = a + n * h;<br/>    sum = sum + 4.0 * f(x_n);<br/>  }<br/>  for n in 2..N-2 by 2 {<br/>    x_n = a + n * h;<br/>    sum = sum + 2.0 * f(x_n);<br/>  }<br/>  return (h/3.0) * sum;<br/>}<br/>\u00a0<br/>var exact:real;<br/>var calculated:real;<br/>\u00a0<br/>writeln(\"f(x) = x**3 with 100 steps from 0 to 1\");<br/>exact = 0.25;<br/>calculated = leftRectangleIntegration(a = 0.0, b = 1.0, N = 100, f = f1);<br/>writeln(\"leftRectangleIntegration: calculated = \", calculated, \"; exact = \", exact, \"; difference = \", abs(calculated - exact));<br/>calculated = rightRectangleIntegration(a = 0.0, b = 1.0, N = 100, f = f1);<br/>writeln(\"rightRectangleIntegration: calculated = \", calculated, \"; exact = \", exact, \"; difference = \", abs(calculated - exact));<br/>calculated = midpointRectangleIntegration(a = 0.0, b = 1.0, N = 100, f = f1);<br/>writeln(\"midpointRectangleIntegration: calculated = \", calculated, \"; exact = \", exact, \"; difference = \", abs(calculated - exact));<br/>calculated = trapezoidIntegration(a = 0.0, b = 1.0, N = 100, f = f1);<br/>writeln(\"trapezoidIntegration: calculated = \", calculated, \"; exact = \", exact, \"; difference = \", abs(calculated - exact));<br/>calculated = simpsonsIntegration(a = 0.0, b = 1.0, N = 100, f = f1);<br/>writeln(\"simpsonsIntegration: calculated = \", calculated, \"; exact = \", exact, \"; difference = \", abs(calculated - exact));<br/>writeln();<br/>\u00a0<br/>writeln(\"f(x) = 1/x with 1000 steps from 1 to 100\");<br/>exact = 4.605170;<br/>calculated = leftRectangleIntegration(a = 1.0, b = 100.0, N = 1000, f = f2);<br/>writeln(\"leftRectangleIntegration: calculated = \", calculated, \"; exact = \", exact, \"; difference = \", abs(calculated - exact));<br/>calculated = rightRectangleIntegration(a = 1.0, b = 100.0, N = 1000, f = f2);<br/>writeln(\"rightRectangleIntegration: calculated = \", calculated, \"; exact = \", exact, \"; difference = \", abs(calculated - exact));<br/>calculated = midpointRectangleIntegration(a = 1.0, b = 100.0, N = 1000, f = f2);<br/>writeln(\"midpointRectangleIntegration: calculated = \", calculated, \"; exact = \", exact, \"; difference = \", abs(calculated - exact));<br/>calculated = trapezoidIntegration(a = 1.0, b = 100.0, N = 1000, f = f2);<br/>writeln(\"trapezoidIntegration: calculated = \", calculated, \"; exact = \", exact, \"; difference = \", abs(calculated - exact));<br/>calculated = simpsonsIntegration(a = 1.0, b = 100.0, N = 1000, f = f2);<br/>writeln(\"simpsonsIntegration: calculated = \", calculated, \"; exact = \", exact, \"; difference = \", abs(calculated - exact));<br/>writeln();<br/>\u00a0<br/>writeln(\"f(x) = x with 5000000 steps from 0 to 5000\");<br/>exact = 12500000;<br/>calculated = leftRectangleIntegration(a = 0.0, b = 5000.0, N = 5000000, f = f3);<br/>writeln(\"leftRectangleIntegration: calculated = \", calculated, \"; exact = \", exact, \"; difference = \", abs(calculated - exact));<br/>calculated = rightRectangleIntegration(a = 0.0, b = 5000.0, N = 5000000, f = f3);<br/>writeln(\"rightRectangleIntegration: calculated = \", calculated, \"; exact = \", exact, \"; difference = \", abs(calculated - exact));<br/>calculated = midpointRectangleIntegration(a = 0.0, b = 5000.0, N = 5000000, f = f3);<br/>writeln(\"midpointRectangleIntegration: calculated = \", calculated, \"; exact = \", exact, \"; difference = \", abs(calculated - exact));<br/>calculated = trapezoidIntegration(a = 0.0, b = 5000.0, N = 5000000, f = f3);<br/>writeln(\"trapezoidIntegration: calculated = \", calculated, \"; exact = \", exact, \"; difference = \", abs(calculated - exact));<br/>calculated = simpsonsIntegration(a = 0.0, b = 5000.0, N = 5000000, f = f3);<br/>writeln(\"simpsonsIntegration: calculated = \", calculated, \"; exact = \", exact, \"; difference = \", abs(calculated - exact));<br/>writeln();<br/>\u00a0<br/>writeln(\"f(x) = x with 6000000 steps from 0 to 6000\");<br/>exact = 18000000;<br/>calculated = leftRectangleIntegration(a = 0.0, b = 6000.0, N = 6000000, f = f3);<br/>writeln(\"leftRectangleIntegration: calculated = \", calculated, \"; exact = \", exact, \"; difference = \", abs(calculated - exact));<br/>calculated = rightRectangleIntegration(a = 0.0, b = 6000.0, N = 6000000, f = f3);<br/>writeln(\"rightRectangleIntegration: calculated = \", calculated, \"; exact = \", exact, \"; difference = \", abs(calculated - exact));<br/>calculated = midpointRectangleIntegration(a = 0.0, b = 6000.0, N = 6000000, f = f3);<br/>writeln(\"midpointRectangleIntegration: calculated = \", calculated, \"; exact = \", exact, \"; difference = \", abs(calculated - exact));<br/>calculated = trapezoidIntegration(a = 0.0, b = 6000.0, N = 6000000, f = f3);<br/>writeln(\"trapezoidIntegration: calculated = \", calculated, \"; exact = \", exact, \"; difference = \", abs(calculated - exact));<br/>calculated = simpsonsIntegration(a = 0.0, b = 6000.0, N = 6000000, f = f3);<br/>writeln(\"simpsonsIntegration: calculated = \", calculated, \"; exact = \", exact, \"; difference = \", abs(calculated - exact));<br/>writeln();<br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 35, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>rules =<br/>  left_rect<span class=\"sy0\">:</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> h<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  mid_rect<span class=\"sy0\">:</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> h<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> f<span class=\"br0\">(</span>x<span class=\"sy0\">+</span>h<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  right_rect<span class=\"sy0\">:</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> h<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> f<span class=\"br0\">(</span>x<span class=\"sy0\">+</span>h<span class=\"br0\">)</span><br/>  trapezium<span class=\"sy0\">:</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> h<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>x<span class=\"sy0\">+</span>h<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>  simpson<span class=\"sy0\">:</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> h<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> f<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> h<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>x<span class=\"sy0\">+</span>h<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">6</span><br/>\u00a0<br/>functions =<br/>  cube<span class=\"sy0\">:</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> x<span class=\"sy0\">*</span>x<span class=\"sy0\">*</span>x<br/>  reciprocal<span class=\"sy0\">:</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span>x<br/>  identity<span class=\"sy0\">:</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> x<br/>\u00a0<br/>sum = <span class=\"br0\">(</span>list<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> list.<span class=\"me1\">reduce</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a<span class=\"sy0\">+</span>b<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>integrate = <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> steps<span class=\"sy0\">,</span> meth<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>   h = <span class=\"br0\">(</span>b<span class=\"sy0\">-</span>a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> steps<br/>   h <span class=\"sy0\">*</span> sum<span class=\"br0\">(</span>meth<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a<span class=\"sy0\">+</span>i<span class=\"sy0\">*</span>h<span class=\"sy0\">,</span> h<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>...<span class=\"me1\">steps</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Tests</span><br/>tests = <span class=\"br0\">[</span><br/>  <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"st0\">'cube'</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"sy0\">,</span> <span class=\"st0\">'reciprocal'</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5000</span><span class=\"sy0\">,</span> <span class=\"nu0\">5000000</span><span class=\"sy0\">,</span> <span class=\"st0\">'identity'</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">6000</span><span class=\"sy0\">,</span> <span class=\"nu0\">6000000</span><span class=\"sy0\">,</span> <span class=\"st0\">'identity'</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">for</span> test <span class=\"kw1\">in</span> tests<br/>  <span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> steps<span class=\"sy0\">,</span> func_name<span class=\"br0\">]</span> = test<br/>  func = functions<span class=\"br0\">[</span>func_name<span class=\"br0\">]</span><br/>  console.<span class=\"me1\">log</span> <span class=\"st0\">\"-- tests for #{func_name} with #{steps} steps from #{a} to #{b}\"</span><br/>  <span class=\"kw1\">for</span> rule_name<span class=\"sy0\">,</span> rule <span class=\"kw1\">of</span> rules<br/>    result = integrate func<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> steps<span class=\"sy0\">,</span> rule<br/>    console.<span class=\"me1\">log</span> rule_name<span class=\"sy0\">,</span> result<br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 27, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> left-rectangle <span class=\"br0\">(</span>f a b n <span class=\"sy0\">&amp;</span>aux <span class=\"br0\">(</span>d <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>- b a<span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>* d <span class=\"br0\">(</span>loop for x from a below b by d summing <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> right-rectangle <span class=\"br0\">(</span>f a b n <span class=\"sy0\">&amp;</span>aux <span class=\"br0\">(</span>d <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>- b a<span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>* d <span class=\"br0\">(</span>loop for x from b above a by d summing <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> midpoint-rectangle <span class=\"br0\">(</span>f a b n <span class=\"sy0\">&amp;</span>aux <span class=\"br0\">(</span>d <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>- b a<span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>* d <span class=\"br0\">(</span>loop for x from <span class=\"br0\">(</span>+ a <span class=\"br0\">(</span>/ d <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> below b by d summing <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> trapezium <span class=\"br0\">(</span>f a b n <span class=\"sy0\">&amp;</span>aux <span class=\"br0\">(</span>d <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>- b a<span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>* <span class=\"br0\">(</span>/ d <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f a<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> <span class=\"br0\">(</span>loop for x from <span class=\"br0\">(</span>+ a d<span class=\"br0\">)</span> below b by d summing <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> simpson <span class=\"br0\">(</span>f a b n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop with h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>- b a<span class=\"br0\">)</span> n<span class=\"br0\">)</span><br/>        with sum1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f <span class=\"br0\">(</span>+ a <span class=\"br0\">(</span>/ h <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        with sum2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        for i from <span class=\"nu0\">1</span> below n<br/>        <span class=\"kw1\">do</span> <span class=\"br0\">(</span>incf sum1 <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f <span class=\"br0\">(</span>+ a <span class=\"br0\">(</span>* h i<span class=\"br0\">)</span> <span class=\"br0\">(</span>/ h <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">(</span>incf sum2 <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f <span class=\"br0\">(</span>+ a <span class=\"br0\">(</span>* h i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span>* <span class=\"br0\">(</span>/ h <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>                           <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f a<span class=\"br0\">)</span><br/>                              <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f b<span class=\"br0\">)</span><br/>                              <span class=\"br0\">(</span>* <span class=\"nu0\">4</span> sum1<span class=\"br0\">)</span><br/>                              <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> sum2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 63, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typetuple</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">template</span> integrate<span class=\"br0\">(</span><span class=\"kw2\">alias</span> method<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">double</span> integrate<span class=\"br0\">(</span>F<span class=\"sy0\">,</span> Float<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> F f<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Float a<span class=\"sy0\">,</span><br/>                               <span class=\"kw2\">in</span> Float b<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> steps<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> s <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> <span class=\"kw4\">double</span> h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> steps<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">steps</span><span class=\"br0\">)</span><br/>            s <span class=\"sy0\">+=</span> method<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a <span class=\"sy0\">+</span> h <span class=\"sy0\">*</span> i<span class=\"sy0\">,</span> h<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> h <span class=\"sy0\">*</span> s<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> rectangularLeft<span class=\"br0\">(</span>F<span class=\"sy0\">,</span> Float<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> F f<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Float x<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Float h<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> rectangularMiddle<span class=\"br0\">(</span>F<span class=\"sy0\">,</span> Float<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> F f<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Float x<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Float h<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> h <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> rectangularRight<span class=\"br0\">(</span>F<span class=\"sy0\">,</span> Float<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> F f<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Float x<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Float h<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> h<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> trapezium<span class=\"br0\">(</span>F<span class=\"sy0\">,</span> Float<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> F f<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Float x<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Float h<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> h<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> simpson<span class=\"br0\">(</span>F<span class=\"sy0\">,</span> Float<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> F f<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Float x<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Float h<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> f<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> h <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> h<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> args <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>        tuple<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">^^</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        tuple<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> x<span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">100.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        tuple<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x<span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span>_000.0<span class=\"sy0\">,</span> <span class=\"nu0\">5</span>_000_000<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        tuple<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x<span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span>_000.0<span class=\"sy0\">,</span> <span class=\"nu0\">6</span>_000_000<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">alias</span> TypeTuple<span class=\"sy0\">!</span><span class=\"br0\">(</span>integrate<span class=\"sy0\">!</span>rectangularLeft<span class=\"sy0\">,</span><br/>                     integrate<span class=\"sy0\">!</span>rectangularMiddle<span class=\"sy0\">,</span><br/>                     integrate<span class=\"sy0\">!</span>rectangularRight<span class=\"sy0\">,</span><br/>                     integrate<span class=\"sy0\">!</span>trapezium<span class=\"sy0\">,</span><br/>                     integrate<span class=\"sy0\">!</span>simpson<span class=\"br0\">)</span> ints<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">alias</span> TypeTuple<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"st0\">\"rectangular left:   \"</span><span class=\"sy0\">,</span><br/>                     <span class=\"st0\">\"rectangular middle: \"</span><span class=\"sy0\">,</span><br/>                     <span class=\"st0\">\"rectangular right:  \"</span><span class=\"sy0\">,</span><br/>                     <span class=\"st0\">\"trapezium:          \"</span><span class=\"sy0\">,</span><br/>                     <span class=\"st0\">\"simpson:            \"</span><span class=\"br0\">)</span> names<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>a<span class=\"sy0\">;</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> n<span class=\"sy0\">;</span> names<span class=\"br0\">)</span><br/>            writefln<span class=\"br0\">(</span><span class=\"st0\">\"%s\u00a0%f\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> ints<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">(</span>a.<span class=\"me1\">tupleof</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        writeln<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 26, "block": "<pre class=\"e highlighted_source\">pragma.<span class=\"me1\">enable</span><span class=\"br0\">(</span><span class=\"st0\">\"accumulator\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> leftRect<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> h<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  return f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> midRect<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> h<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  return f<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> h<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> rightRect<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> h<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  return f<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> h<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> trapezium<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> h<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  return <span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>x<span class=\"sy0\">+</span>h<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> simpson<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> h<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  return <span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> f<span class=\"br0\">(</span>x <span class=\"sy0\">+</span> h <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>x<span class=\"sy0\">+</span>h<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">6</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> integrate<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> steps<span class=\"sy0\">,</span> meth<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> h <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>b<span class=\"sy0\">-</span>a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> steps<br/>   return h <span class=\"sy0\">*</span> <a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> <span class=\"nu0\">0</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> i <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">0</span>..<span class=\"sy0\">!</span>steps <span class=\"br0\">{</span> _ <span class=\"sy0\">+</span> meth<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a<span class=\"sy0\">+</span>i<span class=\"sy0\">*</span>h<span class=\"sy0\">,</span> h<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 36, "block": "<pre class=\"text highlighted_source\">defmodule Numerical do<br/>  @funs  ~w(leftrect midrect rightrect trapezium simpson)a<br/>\u00a0<br/>  def  leftrect(f, left,_right), do: f.(left)<br/>  def   midrect(f, left, right), do: f.((left+right)/2)<br/>  def rightrect(f,_left, right), do: f.(right)<br/>  def trapezium(f, left, right), do: (f.(left)+f.(right))/2<br/>  def   simpson(f, left, right), do: (f.(left) + 4*f.((left+right)/2.0) + f.(right)) / 6.0<br/>\u00a0<br/>  def integrate(f, a, b, steps) when is_integer(steps) do<br/>    delta = (b - a) / steps<br/>    Enum.each(@funs, fn fun -&gt;<br/>      total = Enum.reduce(0..steps-1, 0, fn i, acc -&gt;<br/>        left = a + delta * i<br/>        acc + apply(Numerical, fun, [f, left, left+delta])<br/>      end)<br/>     \u00a0:io.format \"~10s\u00a0: ~.6f~n\", [fun, total * delta]<br/>    end)<br/>  end<br/>end<br/>\u00a0<br/>f1 = fn x -&gt; x * x * x end<br/>IO.puts \"f(x) = x^3, where x is [0,1], with 100 approximations.\"<br/>Numerical.integrate(f1, 0, 1, 100)<br/>\u00a0<br/>f2 = fn x -&gt; 1 / x end<br/>IO.puts \"\\nf(x) = 1/x, where x is [1,100], with 1,000 approximations. \"<br/>Numerical.integrate(f2, 1, 100, 1000)<br/>\u00a0<br/>f3 = fn x -&gt; x end<br/>IO.puts \"\\nf(x) = x, where x is [0,5000], with 5,000,000 approximations.\"<br/>Numerical.integrate(f3, 0, 5000, 5_000_000)<br/>\u00a0<br/>f4 = fn x -&gt; x end<br/>IO.puts \"\\nf(x) = x, where x is [0,6000], with 6,000,000 approximations.\"<br/>Numerical.integrate(f4, 0, 6000, 6_000_000)</pre>"}, {"lang": "Euphoria", "loc": 79, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> int_leftrect<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> bounds<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> n<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> func_id<span class=\"br0\">)</span><br/>    <span class=\"kw2\">atom</span> h<span class=\"sy2\">,</span> sum<br/>    h <span class=\"sy1\">=</span> <span class=\"br0\">(</span>bounds<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">-</span>bounds<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">/</span>n<br/>    sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> x <span class=\"sy1\">=</span> bounds<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">to</span> bounds<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">-</span>h <span class=\"kw1\">by</span> h <span class=\"kw1\">do</span><br/>        sum <span class=\"sy1\">+=</span> <span class=\"kw2\">call_func</span><span class=\"br0\">(</span>func_id<span class=\"sy2\">,</span> <span class=\"br0\">{</span>x<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> h<span class=\"sy1\">*</span>sum<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> int_rightrect<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> bounds<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> n<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> func_id<span class=\"br0\">)</span><br/>    <span class=\"kw2\">atom</span> h<span class=\"sy2\">,</span> sum<br/>    h <span class=\"sy1\">=</span> <span class=\"br0\">(</span>bounds<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">-</span>bounds<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">/</span>n<br/>    sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> x <span class=\"sy1\">=</span> bounds<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">to</span> bounds<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">-</span>h <span class=\"kw1\">by</span> h <span class=\"kw1\">do</span><br/>        sum <span class=\"sy1\">+=</span> <span class=\"kw2\">call_func</span><span class=\"br0\">(</span>func_id<span class=\"sy2\">,</span> <span class=\"br0\">{</span>x<span class=\"sy1\">+</span>h<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> h<span class=\"sy1\">*</span>sum<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> int_midrect<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> bounds<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> n<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> func_id<span class=\"br0\">)</span><br/>    <span class=\"kw2\">atom</span> h<span class=\"sy2\">,</span> sum<br/>    h <span class=\"sy1\">=</span> <span class=\"br0\">(</span>bounds<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">-</span>bounds<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">/</span>n<br/>    sum <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> x <span class=\"sy1\">=</span> bounds<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">to</span> bounds<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">-</span>h <span class=\"kw1\">by</span> h <span class=\"kw1\">do</span><br/>        sum <span class=\"sy1\">+=</span> <span class=\"kw2\">call_func</span><span class=\"br0\">(</span>func_id<span class=\"sy2\">,</span> <span class=\"br0\">{</span>x<span class=\"sy1\">+</span>h<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> h<span class=\"sy1\">*</span>sum<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> int_trapezium<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> bounds<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> n<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> func_id<span class=\"br0\">)</span><br/>    <span class=\"kw2\">atom</span> h<span class=\"sy2\">,</span> sum<br/>    h <span class=\"sy1\">=</span> <span class=\"br0\">(</span>bounds<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">-</span>bounds<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">/</span>n<br/>    sum <span class=\"sy1\">=</span> <span class=\"kw2\">call_func</span><span class=\"br0\">(</span>func_id<span class=\"sy2\">,</span> <span class=\"br0\">{</span>bounds<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"kw2\">call_func</span><span class=\"br0\">(</span>func_id<span class=\"sy2\">,</span> <span class=\"br0\">{</span>bounds<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> x <span class=\"sy1\">=</span> bounds<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">to</span> bounds<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">-</span>h <span class=\"kw1\">by</span> h <span class=\"kw1\">do</span><br/>        sum <span class=\"sy1\">+=</span> <span class=\"nu0\">2</span><span class=\"sy1\">*</span><span class=\"kw2\">call_func</span><span class=\"br0\">(</span>func_id<span class=\"sy2\">,</span> <span class=\"br0\">{</span>x<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> h <span class=\"sy1\">*</span> sum <span class=\"sy1\">/</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> int_simpson<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> bounds<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> n<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> func_id<span class=\"br0\">)</span><br/>    <span class=\"kw2\">atom</span> h<span class=\"sy2\">,</span> sum1<span class=\"sy2\">,</span> sum2<br/>    h <span class=\"sy1\">=</span> <span class=\"br0\">(</span>bounds<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">-</span>bounds<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">/</span>n<br/>    sum1 <span class=\"sy1\">=</span> <span class=\"kw2\">call_func</span><span class=\"br0\">(</span>func_id<span class=\"sy2\">,</span> <span class=\"br0\">{</span>bounds<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">+</span> h<span class=\"sy1\">/</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    sum2 <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n<span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        sum1 <span class=\"sy1\">+=</span> <span class=\"kw2\">call_func</span><span class=\"br0\">(</span>func_id<span class=\"sy2\">,</span> <span class=\"br0\">{</span>bounds<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">+</span> h <span class=\"sy1\">*</span> i <span class=\"sy1\">+</span> h <span class=\"sy1\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        sum2 <span class=\"sy1\">+=</span> <span class=\"kw2\">call_func</span><span class=\"br0\">(</span>func_id<span class=\"sy2\">,</span> <span class=\"br0\">{</span>bounds<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">+</span> h <span class=\"sy1\">*</span> i<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> h<span class=\"sy1\">/</span><span class=\"nu0\">6</span> <span class=\"sy1\">*</span> <span class=\"br0\">(</span><span class=\"kw2\">call_func</span><span class=\"br0\">(</span>func_id<span class=\"sy2\">,</span> <span class=\"br0\">{</span>bounds<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span><br/>                  <span class=\"kw2\">call_func</span><span class=\"br0\">(</span>func_id<span class=\"sy2\">,</span> <span class=\"br0\">{</span>bounds<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"nu0\">4</span><span class=\"sy1\">*</span>sum1 <span class=\"sy1\">+</span> <span class=\"nu0\">2</span><span class=\"sy1\">*</span>sum2<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> xp2d2<span class=\"br0\">(</span><span class=\"kw2\">atom</span> x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> x<span class=\"sy1\">*</span>x<span class=\"sy1\">/</span><span class=\"nu0\">2</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> logx<span class=\"br0\">(</span><span class=\"kw2\">atom</span> x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">log</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> x<span class=\"br0\">(</span><span class=\"kw2\">atom</span> x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> x<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"sy2\">?</span> int_leftrect<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><span class=\"nu0\">1000</span><span class=\"sy2\">,</span><span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"xp2d2\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy2\">?</span> int_rightrect<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><span class=\"nu0\">1000</span><span class=\"sy2\">,</span><span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"xp2d2\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy2\">?</span> int_midrect<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><span class=\"nu0\">1000</span><span class=\"sy2\">,</span><span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"xp2d2\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy2\">?</span> int_simpson<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><span class=\"nu0\">1000</span><span class=\"sy2\">,</span><span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"xp2d2\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><br/><span class=\"sy2\">?</span> int_leftrect<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><span class=\"nu0\">1000</span><span class=\"sy2\">,</span><span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"logx\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy2\">?</span> int_rightrect<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><span class=\"nu0\">1000</span><span class=\"sy2\">,</span><span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"logx\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy2\">?</span> int_midrect<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><span class=\"nu0\">1000</span><span class=\"sy2\">,</span><span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"logx\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy2\">?</span> int_simpson<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><span class=\"nu0\">1000</span><span class=\"sy2\">,</span><span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"logx\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><br/><span class=\"sy2\">?</span> int_leftrect<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy2\">,</span><span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><span class=\"nu0\">1000</span><span class=\"sy2\">,</span><span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"x\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy2\">?</span> int_rightrect<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy2\">,</span><span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><span class=\"nu0\">1000</span><span class=\"sy2\">,</span><span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"x\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy2\">?</span> int_midrect<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy2\">,</span><span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><span class=\"nu0\">1000</span><span class=\"sy2\">,</span><span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"x\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy2\">?</span> int_simpson<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy2\">,</span><span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><span class=\"nu0\">1000</span><span class=\"sy2\">,</span><span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"x\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>USE: math.functions<br/>IN: scratchpad 0 1 [ 3 ^ ] integrate-simpson .<br/>1/4<br/>IN: scratchpad 1000 num-steps set-global<br/>IN: scratchpad 1.0 100 [ -1 ^ ] integrate-simpson .<br/>4.605173316272971<br/>IN: scratchpad 5000000 num-steps set-global<br/>IN: scratchpad 0 5000 [ ] integrate-simpson .<br/>12500000<br/>IN: scratchpad 6000000 num-steps set-global<br/>IN: scratchpad 0 6000 [ ] integrate-simpson .<br/>18000000</pre>"}, {"lang": "Forth", "loc": 40, "block": "<pre class=\"text highlighted_source\">fvariable step<br/>\u00a0<br/>defer method ( fn F: x -- fn[x] )<br/>\u00a0<br/>: left                    execute\u00a0;<br/>: right  step <a class=\"__cf_email__\" data-cfemail=\"99ffd9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>       f+ execute\u00a0;<br/>: mid    step <a class=\"__cf_email__\" data-cfemail=\"bbddfb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 2e f/ f+ execute\u00a0;<br/>: trap<br/>  dup fdup  left<br/>      fswap right f+  2e f/\u00a0;<br/>: simpson<br/>  dup fdup  left<br/>  dup fover mid 4e f* f+<br/>      fswap right f+  6e f/\u00a0;<br/>\u00a0<br/>: set-step ( n F: a b -- n F: a )<br/>  fover f- dup 0 d&gt;f f/ step f!\u00a0;<br/>\u00a0<br/>: integrate ( xt n F: a b -- F: sigma )<br/>  set-step<br/>  0e<br/>  0 do<br/>    dup fover method f+<br/>    fswap step <a class=\"__cf_email__\" data-cfemail=\"5c3a1c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> f+ fswap<br/>  loop<br/>  drop fnip<br/>  step <a class=\"__cf_email__\" data-cfemail=\"d8be98\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> f*\u00a0;<br/> \\ testing similar to the D example<br/>: test<br/>  ' is method  ' 4 -1e 2e integrate f.\u00a0;<br/>\u00a0<br/>: fn1  fsincos f+\u00a0;<br/>: fn2  fdup f* 4e f* 1e f+ 2e fswap f/\u00a0;<br/>\u00a0<br/>7 set-precision<br/>test left    fn2  \\ 2.456897<br/>test right   fn2  \\ 2.245132<br/>test mid     fn2  \\ 2.496091<br/>test trap    fn2  \\ 2.351014<br/>test simpson fn2  \\ 2.447732</pre>"}, {"lang": "Fortran", "loc": 4, "block": "<pre class=\"fortran highlighted_source\">elemental <span class=\"kw1\">function</span> elemf<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>   <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">elemf</span>, x<br/>   elemf <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span> elemf</pre>"}, {"lang": "FreeBASIC", "loc": 125, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 17-09-2015</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"co2\">#Define screen_width 1024</span><br/><span class=\"co2\">#Define screen_height 256</span><br/><span class=\"kw1\">ScreenRes</span> screen_width, screen_height, <span class=\"nu0\">8</span><br/><span class=\"kw1\">Width</span> screen_width\\<span class=\"nu0\">8</span>, screen_height\\<span class=\"nu0\">16</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> f1<span class=\"br0\">(</span>x <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>    <span class=\"kw1\">Return</span> x^<span class=\"nu0\">3</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> f2<span class=\"br0\">(</span>x <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>    <span class=\"kw1\">Return</span> <span class=\"nu0\">1</span>/x<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> f3<span class=\"br0\">(</span>x <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>    <span class=\"kw1\">Return</span> x<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> leftrect<span class=\"br0\">(</span>a <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, b <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, n <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, _<br/><span class=\"kw1\">ByVal</span> f <span class=\"kw1\">As</span> <span class=\"kw1\">Function</span> <span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> sum, x = a, h = <span class=\"br0\">(</span>b - a<span class=\"br0\">)</span> / n<br/>\u00a0<br/>    <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>        sum = sum + h * f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>        x = x + h<br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    leftrect = sum<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> rightrect<span class=\"br0\">(</span>a <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, b <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, n <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, _<br/><span class=\"kw1\">ByVal</span> f <span class=\"kw1\">As</span> <span class=\"kw1\">Function</span> <span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> sum, x = a, h = <span class=\"br0\">(</span>b - a<span class=\"br0\">)</span> / n<br/>\u00a0<br/>    <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>        x = x + h<br/>        sum = sum + h * f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    rightrect = sum<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> midrect<span class=\"br0\">(</span>a <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, b <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, n <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, _<br/><span class=\"kw1\">ByVal</span> f <span class=\"kw1\">As</span> <span class=\"kw1\">Function</span> <span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> sum, h = <span class=\"br0\">(</span>b - a<span class=\"br0\">)</span> / n, x = a + h / <span class=\"nu0\">2</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>        sum = sum + h * f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>        x = x + h<br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    midrect = sum<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> trap<span class=\"br0\">(</span>a <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, b <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, n <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, _<br/><span class=\"kw1\">ByVal</span> f <span class=\"kw1\">As</span> <span class=\"kw1\">Function</span> <span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> x = a, h = <span class=\"br0\">(</span>b - a<span class=\"br0\">)</span> / n<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> sum = h * <span class=\"br0\">(</span>f<span class=\"br0\">(</span>a<span class=\"br0\">)</span> + f<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span> / <span class=\"nu0\">2</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n -<span class=\"nu0\">1</span><br/>        x = x + h<br/>        sum = sum + h * f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    trap = sum<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> simpson<span class=\"br0\">(</span>a <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, b <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, n <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, _<br/><span class=\"kw1\">ByVal</span> f <span class=\"kw1\">As</span> <span class=\"kw1\">Function</span> <span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> i<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> sum1, sum2<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> h = <span class=\"br0\">(</span>b - a<span class=\"br0\">)</span> / n<br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> n -<span class=\"nu0\">1</span><br/>        sum1 = sum1 + f<span class=\"br0\">(</span>a + h * i + h / <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span> i<br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n -<span class=\"nu0\">1</span><br/>        sum2 = sum2 + f<span class=\"br0\">(</span>a + h * i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span> i<br/>\u00a0<br/>    simpson = h / <span class=\"nu0\">6</span> * <span class=\"br0\">(</span>f<span class=\"br0\">(</span>a<span class=\"br0\">)</span> + f<span class=\"br0\">(</span>b<span class=\"br0\">)</span> + <span class=\"nu0\">4</span> * sum1 + <span class=\"nu0\">2</span> * sum2<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; main &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> y<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> frmt = <span class=\"st0\">\" ##.##########\"</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"function     range       steps  leftrect      midrect       \"</span> + _<br/>                              <span class=\"st0\">\"rightrect     trap          simpson \"</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"f(x) = x^3   0 - 1         100\"</span>;<br/><span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> frmt; leftrect<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">100</span>, @f1<span class=\"br0\">)</span>; midrect<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">100</span>, @f1<span class=\"br0\">)</span>; _<br/>rightrect<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">100</span>, @f1<span class=\"br0\">)</span>; trap<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">100</span>, @f1<span class=\"br0\">)</span>; simpson<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">100</span>, @f1<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"f(x) = 1/x   1 - 100      1000\"</span>;<br/><span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> frmt; leftrect<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">1000</span>, @f2<span class=\"br0\">)</span>; midrect<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">1000</span>, @f2<span class=\"br0\">)</span>; _<br/>                    rightrect<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">1000</span>, @f2<span class=\"br0\">)</span>; trap<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">1000</span>, @f2<span class=\"br0\">)</span>; _<br/>                    simpson<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">1000</span>, @f2<span class=\"br0\">)</span><br/>\u00a0<br/>frmt = <span class=\"st0\">\" #########.###\"</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"f(x) = x     0 - 5000  5000000\"</span>;<br/><span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> frmt; leftrect<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">5000</span>, <span class=\"nu0\">5000000</span>, @f3<span class=\"br0\">)</span>; midrect<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">5000</span>, <span class=\"nu0\">5000000</span>, @f3<span class=\"br0\">)</span>; _<br/>                    rightrect<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">5000</span>, <span class=\"nu0\">5000000</span>, @f3<span class=\"br0\">)</span>; trap<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">5000</span>, <span class=\"nu0\">5000000</span>, @f3<span class=\"br0\">)</span>; _<br/>                    simpson<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">5000</span>, <span class=\"nu0\">5000000</span>, @f3<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"f(x) = x     0 - 6000  6000000\"</span>;<br/><span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> frmt; leftrect<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">6000</span>, <span class=\"nu0\">6000000</span>, @f3<span class=\"br0\">)</span>; midrect<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">6000</span>, <span class=\"nu0\">6000000</span>, @f3<span class=\"br0\">)</span>; _<br/>                    rightrect<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">6000</span>, <span class=\"nu0\">6000000</span>, @f3<span class=\"br0\">)</span>; trap<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">6000</span>, <span class=\"nu0\">6000000</span>, @f3<span class=\"br0\">)</span>; _<br/>                    simpson<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">6000</span>, <span class=\"nu0\">6000000</span>, @f3<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">InKey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 164, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// specification for an integration</span><br/><span class=\"kw1\">type</span> spec <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    lower<span class=\"sy1\">,</span> upper <span class=\"kw4\">float64</span>               <span class=\"co1\">// bounds for integration</span><br/>    n            <span class=\"kw4\">int</span>                   <span class=\"co1\">// number of parts</span><br/>    exact        <span class=\"kw4\">float64</span>               <span class=\"co1\">// expected answer</span><br/>    fs           <span class=\"kw4\">string</span>                <span class=\"co1\">// mathematical description of function</span><br/>    f            <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"co1\">// function to integrate</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// test cases per task description</span><br/><span class=\"kw1\">var</span> data <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span>spec<span class=\"sy1\">{</span><br/>    spec<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"sy3\">.</span><span class=\"nu0\">25</span><span class=\"sy1\">,</span> <span class=\"st0\">\"x^3\"</span><span class=\"sy1\">,</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> x <span class=\"sy3\">*</span> x <span class=\"sy3\">*</span> x <span class=\"sy1\">}},</span><br/>    spec<span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"nu0\">1000</span><span class=\"sy1\">,</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Log<span class=\"sy1\">(</span><span class=\"nu0\">100</span><span class=\"sy1\">)),</span> <span class=\"st0\">\"1/x\"</span><span class=\"sy1\">,</span><br/>        <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"sy3\">/</span> x <span class=\"sy1\">}},</span><br/>    spec<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">5000</span><span class=\"sy1\">,</span> <span class=\"nu1\">5e5</span><span class=\"sy1\">,</span> <span class=\"nu0\">12</span><span class=\"sy3\">.</span><span class=\"nu1\">5e6</span><span class=\"sy1\">,</span> <span class=\"st0\">\"x\"</span><span class=\"sy1\">,</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> x <span class=\"sy1\">}},</span><br/>    spec<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">6000</span><span class=\"sy1\">,</span> <span class=\"nu1\">6e6</span><span class=\"sy1\">,</span> <span class=\"nu1\">18e6</span><span class=\"sy1\">,</span> <span class=\"st0\">\"x\"</span><span class=\"sy1\">,</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> x <span class=\"sy1\">}},</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// object for associating a printable function name with an integration method</span><br/><span class=\"kw1\">type</span> method <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    name      <span class=\"kw4\">string</span><br/>    integrate <span class=\"kw4\">func</span><span class=\"sy1\">(</span>spec<span class=\"sy1\">)</span> <span class=\"kw4\">float64</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// integration methods implemented per task description</span><br/><span class=\"kw1\">var</span> methods <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span>method<span class=\"sy1\">{</span><br/>    method<span class=\"sy1\">{</span><span class=\"st0\">\"Rectangular (left)    \"</span><span class=\"sy1\">,</span> rectLeft<span class=\"sy1\">},</span><br/>    method<span class=\"sy1\">{</span><span class=\"st0\">\"Rectangular (right)   \"</span><span class=\"sy1\">,</span> rectRight<span class=\"sy1\">},</span><br/>    method<span class=\"sy1\">{</span><span class=\"st0\">\"Rectangular (midpoint)\"</span><span class=\"sy1\">,</span> rectMid<span class=\"sy1\">},</span><br/>    method<span class=\"sy1\">{</span><span class=\"st0\">\"Trapezium             \"</span><span class=\"sy1\">,</span> trap<span class=\"sy1\">},</span><br/>    method<span class=\"sy1\">{</span><span class=\"st0\">\"Simpson's             \"</span><span class=\"sy1\">,</span> simpson<span class=\"sy1\">},</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> rectLeft<span class=\"sy1\">(</span>t spec<span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> a adder<br/>    r <span class=\"sy2\">:=</span> t<span class=\"sy3\">.</span>upper <span class=\"sy3\">-</span> t<span class=\"sy3\">.</span>lower<br/>    nf <span class=\"sy2\">:=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>n<span class=\"sy1\">)</span><br/>    x0 <span class=\"sy2\">:=</span> t<span class=\"sy3\">.</span>lower<br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; t<span class=\"sy3\">.</span>n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        x1 <span class=\"sy2\">:=</span> t<span class=\"sy3\">.</span>lower <span class=\"sy3\">+</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">*</span>r<span class=\"sy3\">/</span>nf<br/>        <span class=\"co1\">// x1-x0 better than r/nf.</span><br/>        <span class=\"co1\">// (with r/nf, the represenation error accumulates)</span><br/>        a<span class=\"sy3\">.</span>add<span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>f<span class=\"sy1\">(</span>x0<span class=\"sy1\">)</span> <span class=\"sy3\">*</span> <span class=\"sy1\">(</span>x1 <span class=\"sy3\">-</span> x0<span class=\"sy1\">))</span><br/>        x0 <span class=\"sy2\">=</span> x1<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy3\">.</span>total<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> rectRight<span class=\"sy1\">(</span>t spec<span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> a adder<br/>    r <span class=\"sy2\">:=</span> t<span class=\"sy3\">.</span>upper <span class=\"sy3\">-</span> t<span class=\"sy3\">.</span>lower<br/>    nf <span class=\"sy2\">:=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>n<span class=\"sy1\">)</span><br/>    x0 <span class=\"sy2\">:=</span> t<span class=\"sy3\">.</span>lower<br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; t<span class=\"sy3\">.</span>n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        x1 <span class=\"sy2\">:=</span> t<span class=\"sy3\">.</span>lower <span class=\"sy3\">+</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">*</span>r<span class=\"sy3\">/</span>nf<br/>        a<span class=\"sy3\">.</span>add<span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>f<span class=\"sy1\">(</span>x1<span class=\"sy1\">)</span> <span class=\"sy3\">*</span> <span class=\"sy1\">(</span>x1 <span class=\"sy3\">-</span> x0<span class=\"sy1\">))</span><br/>        x0 <span class=\"sy2\">=</span> x1<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy3\">.</span>total<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> rectMid<span class=\"sy1\">(</span>t spec<span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> a adder<br/>    r <span class=\"sy2\">:=</span> t<span class=\"sy3\">.</span>upper <span class=\"sy3\">-</span> t<span class=\"sy3\">.</span>lower<br/>    nf <span class=\"sy2\">:=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>n<span class=\"sy1\">)</span><br/>    <span class=\"co1\">// there's a tiny gloss in the x1-x0 trick here.  the correct way</span><br/>    <span class=\"co1\">// would be to compute x's at division boundaries, but we don't need</span><br/>    <span class=\"co1\">// those x's for anything else.  (the function is evaluated on x's</span><br/>    <span class=\"co1\">// at division midpoints rather than division boundaries.)  so, we</span><br/>    <span class=\"co1\">// reuse the midpoint x's, knowing that they will average out just</span><br/>    <span class=\"co1\">// as well.  we just need one extra point, so we use lower-.5.</span><br/>    x0 <span class=\"sy2\">:=</span> t<span class=\"sy3\">.</span>lower <span class=\"sy3\">-</span> <span class=\"sy3\">.</span><span class=\"nu0\">5</span><span class=\"sy3\">*</span>r<span class=\"sy3\">/</span>nf<br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; t<span class=\"sy3\">.</span>n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        x1 <span class=\"sy2\">:=</span> t<span class=\"sy3\">.</span>lower <span class=\"sy3\">+</span> <span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><span class=\"sy3\">+.</span><span class=\"nu0\">5</span><span class=\"sy1\">)</span><span class=\"sy3\">*</span>r<span class=\"sy3\">/</span>nf<br/>        a<span class=\"sy3\">.</span>add<span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>f<span class=\"sy1\">(</span>x1<span class=\"sy1\">)</span> <span class=\"sy3\">*</span> <span class=\"sy1\">(</span>x1 <span class=\"sy3\">-</span> x0<span class=\"sy1\">))</span><br/>        x0 <span class=\"sy2\">=</span> x1<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy3\">.</span>total<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> trap<span class=\"sy1\">(</span>t spec<span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> a adder<br/>    r <span class=\"sy2\">:=</span> t<span class=\"sy3\">.</span>upper <span class=\"sy3\">-</span> t<span class=\"sy3\">.</span>lower<br/>    nf <span class=\"sy2\">:=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>n<span class=\"sy1\">)</span><br/>    x0 <span class=\"sy2\">:=</span> t<span class=\"sy3\">.</span>lower<br/>    f0 <span class=\"sy2\">:=</span> t<span class=\"sy3\">.</span>f<span class=\"sy1\">(</span>x0<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; t<span class=\"sy3\">.</span>n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        x1 <span class=\"sy2\">:=</span> t<span class=\"sy3\">.</span>lower <span class=\"sy3\">+</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">*</span>r<span class=\"sy3\">/</span>nf<br/>        f1 <span class=\"sy2\">:=</span> t<span class=\"sy3\">.</span>f<span class=\"sy1\">(</span>x1<span class=\"sy1\">)</span><br/>        a<span class=\"sy3\">.</span>add<span class=\"sy1\">((</span>f0 <span class=\"sy3\">+</span> f1<span class=\"sy1\">)</span> <span class=\"sy3\">*</span> <span class=\"sy3\">.</span><span class=\"nu0\">5</span> <span class=\"sy3\">*</span> <span class=\"sy1\">(</span>x1 <span class=\"sy3\">-</span> x0<span class=\"sy1\">))</span><br/>        x0<span class=\"sy1\">,</span> f0 <span class=\"sy2\">=</span> x1<span class=\"sy1\">,</span> f1<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy3\">.</span>total<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> simpson<span class=\"sy1\">(</span>t spec<span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> a adder<br/>    r <span class=\"sy2\">:=</span> t<span class=\"sy3\">.</span>upper <span class=\"sy3\">-</span> t<span class=\"sy3\">.</span>lower<br/>    nf <span class=\"sy2\">:=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>n<span class=\"sy1\">)</span><br/>    <span class=\"co1\">// similar to the rectangle midpoint logic explained above,</span><br/>    <span class=\"co1\">// we play a little loose with the values used for dx and dx0.</span><br/>    dx0 <span class=\"sy2\">:=</span> r <span class=\"sy3\">/</span> nf<br/>    a<span class=\"sy3\">.</span>add<span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>f<span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>lower<span class=\"sy1\">)</span> <span class=\"sy3\">*</span> dx0<span class=\"sy1\">)</span><br/>    a<span class=\"sy3\">.</span>add<span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>f<span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>lower<span class=\"sy3\">+</span>dx0<span class=\"sy3\">*.</span><span class=\"nu0\">5</span><span class=\"sy1\">)</span> <span class=\"sy3\">*</span> dx0 <span class=\"sy3\">*</span> <span class=\"nu0\">4</span><span class=\"sy1\">)</span><br/>    x0 <span class=\"sy2\">:=</span> t<span class=\"sy3\">.</span>lower <span class=\"sy3\">+</span> dx0<br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; t<span class=\"sy3\">.</span>n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        x1 <span class=\"sy2\">:=</span> t<span class=\"sy3\">.</span>lower <span class=\"sy3\">+</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">*</span>r<span class=\"sy3\">/</span>nf<br/>        xmid <span class=\"sy2\">:=</span> <span class=\"sy1\">(</span>x0 <span class=\"sy3\">+</span> x1<span class=\"sy1\">)</span> <span class=\"sy3\">*</span> <span class=\"sy3\">.</span><span class=\"nu0\">5</span><br/>        dx <span class=\"sy2\">:=</span> x1 <span class=\"sy3\">-</span> x0<br/>        a<span class=\"sy3\">.</span>add<span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>f<span class=\"sy1\">(</span>x0<span class=\"sy1\">)</span> <span class=\"sy3\">*</span> dx <span class=\"sy3\">*</span> <span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>        a<span class=\"sy3\">.</span>add<span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>f<span class=\"sy1\">(</span>xmid<span class=\"sy1\">)</span> <span class=\"sy3\">*</span> dx <span class=\"sy3\">*</span> <span class=\"nu0\">4</span><span class=\"sy1\">)</span><br/>        x0 <span class=\"sy2\">=</span> x1<br/>    <span class=\"sy1\">}</span><br/>    a<span class=\"sy3\">.</span>add<span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>f<span class=\"sy1\">(</span>t<span class=\"sy3\">.</span>upper<span class=\"sy1\">)</span> <span class=\"sy3\">*</span> dx0<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy3\">.</span>total<span class=\"sy1\">()</span> <span class=\"sy3\">/</span> <span class=\"nu0\">6</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> sum<span class=\"sy1\">(</span>v <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> a adder<br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> v <span class=\"sy1\">{</span><br/>        a<span class=\"sy3\">.</span>add<span class=\"sy1\">(</span>e<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy3\">.</span>total<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> adder <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    sum<span class=\"sy1\">,</span> e <span class=\"kw4\">float64</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>a <span class=\"sy3\">*</span>adder<span class=\"sy1\">)</span> total<span class=\"sy1\">()</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> a<span class=\"sy3\">.</span>sum <span class=\"sy3\">+</span> a<span class=\"sy3\">.</span>e<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>a <span class=\"sy3\">*</span>adder<span class=\"sy1\">)</span> add<span class=\"sy1\">(</span>x <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    sum <span class=\"sy2\">:=</span> a<span class=\"sy3\">.</span>sum <span class=\"sy3\">+</span> x<br/>    e <span class=\"sy2\">:=</span> sum <span class=\"sy3\">-</span> a<span class=\"sy3\">.</span>sum<br/>    a<span class=\"sy3\">.</span>e <span class=\"sy2\">+=</span> a<span class=\"sy3\">.</span>sum <span class=\"sy3\">-</span> <span class=\"sy1\">(</span>sum <span class=\"sy3\">-</span> e<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> <span class=\"sy1\">(</span>x <span class=\"sy3\">-</span> e<span class=\"sy1\">)</span><br/>    a<span class=\"sy3\">.</span>sum <span class=\"sy2\">=</span> sum<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> t <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> data <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Test case: f(x) =\"</span><span class=\"sy1\">,</span> t<span class=\"sy3\">.</span><span class=\"me1\">fs</span><span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"Integration from\"</span><span class=\"sy1\">,</span> t<span class=\"sy3\">.</span><span class=\"me1\">lower</span><span class=\"sy1\">,</span> <span class=\"st0\">\"to\"</span><span class=\"sy1\">,</span> t<span class=\"sy3\">.</span><span class=\"me1\">upper</span><span class=\"sy1\">,</span><br/>            <span class=\"st0\">\"in\"</span><span class=\"sy1\">,</span> t<span class=\"sy3\">.</span><span class=\"me1\">n</span><span class=\"sy1\">,</span> <span class=\"st0\">\"parts\"</span><span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"Exact result           \u00a0%.7e     Error<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> t<span class=\"sy3\">.</span>exact<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> m <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> methods <span class=\"sy1\">{</span><br/>            a <span class=\"sy2\">:=</span> m<span class=\"sy3\">.</span>integrate<span class=\"sy1\">(</span>t<span class=\"sy1\">)</span><br/>            e <span class=\"sy2\">:=</span> a <span class=\"sy3\">-</span> t<span class=\"sy3\">.</span>exact<br/>            <span class=\"kw1\">if</span> e &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                e <span class=\"sy2\">=</span> <span class=\"sy3\">-</span>e<br/>            <span class=\"sy1\">}</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%s \u00a0%.7e \u00a0%.7e<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> m<span class=\"sy3\">.</span><span class=\"me1\">name</span><span class=\"sy1\">,</span> a<span class=\"sy1\">,</span> e<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 44, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> assertBounds <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> bounds, <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> nRect <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> <span class=\"br0\">(</span>bounds.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>bounds<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20instanceof\"><span class=\"kw2\">instanceof</span></a> <a href=\"http://www.google.de/search?as_q=Double&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Double</span></a><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>bounds<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20instanceof\"><span class=\"kw2\">instanceof</span></a> <a href=\"http://www.google.de/search?as_q=Double&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Double</span></a><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>nRect <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> integral <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> bounds, <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> nRectangles, Closure f, <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> pointGuide, Closure integralCalculator<span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20double\"><span class=\"kw4\">double</span></a> a <span class=\"sy0\">=</span> bounds<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, b <span class=\"sy0\">=</span> bounds<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span>/nRectangles<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> xPoints <span class=\"sy0\">=</span> pointGuide.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20double\"><span class=\"kw4\">double</span></a> it <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">+</span> it<span class=\"sy0\">*</span>h <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> fPoints <span class=\"sy0\">=</span> xPoints.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> x <span class=\"sy0\">-&gt;</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    integralCalculator<span class=\"br0\">(</span>h, fPoints<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> leftRectIntegral <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> bounds, <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> nRect, Closure f <span class=\"sy0\">-&gt;</span><br/>    assertBounds<span class=\"br0\">(</span>bounds, nRect<span class=\"br0\">)</span><br/>    integral<span class=\"br0\">(</span>bounds, nRect, f, <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>nRect<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> h, fPoints <span class=\"sy0\">-&gt;</span> h<span class=\"sy0\">*</span>fPoints.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> rightRectIntegral <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> bounds, <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> nRect, Closure f <span class=\"sy0\">-&gt;</span><br/>    assertBounds<span class=\"br0\">(</span>bounds, nRect<span class=\"br0\">)</span><br/>    integral<span class=\"br0\">(</span>bounds, nRect, f, <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">nRect</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> h, fPoints <span class=\"sy0\">-&gt;</span> h<span class=\"sy0\">*</span>fPoints.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> midRectIntegral <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> bounds, <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> nRect, Closure f <span class=\"sy0\">-&gt;</span><br/>    assertBounds<span class=\"br0\">(</span>bounds, nRect<span class=\"br0\">)</span><br/>    integral<span class=\"br0\">(</span>bounds, nRect, f, <span class=\"br0\">(</span><span class=\"br0\">(</span>0.5d<span class=\"br0\">)</span>..<span class=\"me1\">nRect</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> h, fPoints <span class=\"sy0\">-&gt;</span> h<span class=\"sy0\">*</span>fPoints.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> trapezoidIntegral <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> bounds, <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> nRect, Closure f <span class=\"sy0\">-&gt;</span><br/>    assertBounds<span class=\"br0\">(</span>bounds, nRect<span class=\"br0\">)</span><br/>    integral<span class=\"br0\">(</span>bounds, nRect, f, <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"me1\">nRect</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> h, fPoints <span class=\"sy0\">-&gt;</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> fLeft  <span class=\"sy0\">=</span> fPoints<span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>nRect<span class=\"br0\">]</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> fRight <span class=\"sy0\">=</span> fPoints<span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"me1\">nRect</span><span class=\"br0\">]</span><br/>        h/<span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>fLeft <span class=\"sy0\">+</span> fRight<span class=\"br0\">)</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> simpsonsIntegral <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> bounds, <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> nSimpRect, Closure f <span class=\"sy0\">-&gt;</span><br/>    assertBounds<span class=\"br0\">(</span>bounds, nSimpRect<span class=\"br0\">)</span><br/>    integral<span class=\"br0\">(</span>bounds, nSimpRect<span class=\"sy0\">*</span><span class=\"nu0\">2</span>, f, <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"br0\">(</span>nSimpRect<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> h, fPoints <span class=\"sy0\">-&gt;</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> fLeft  <span class=\"sy0\">=</span> fPoints<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>nSimpRect<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20step\"><span class=\"kw8\">step</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> fMid   <span class=\"sy0\">=</span> fPoints<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"sy0\">&lt;</span>nSimpRect<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20step\"><span class=\"kw8\">step</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> fRight <span class=\"sy0\">=</span> fPoints<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>..<span class=\"me1\">nSimpRect</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20step\"><span class=\"kw8\">step</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        h/<span class=\"nu0\">3</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>fLeft <span class=\"sy0\">+</span> fRight<span class=\"br0\">)</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">4</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>fMid.<span class=\"me1\">sum</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 1, "block": "<pre class=\"haskell highlighted_source\">approx f xs ws <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"br0\">[</span>w <span class=\"sy0\">*</span> f x <span class=\"sy0\">|</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span>w<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> xs ws<span class=\"br0\">]</span></pre>"}, {"lang": "J", "loc": 11, "block": "<pre class=\"j highlighted_source\">integrate=: adverb define<br/>  <span class=\"st_h\">'a b steps'</span>=. <span class=\"nu0\">3</span>{.<span class=\"kw2\">y</span>,<span class=\"nu0\">128</span><br/>  size=. <span class=\"sy0\">(</span>b - a<span class=\"sy0\">)</span>%steps<br/>  size * +/ <span class=\"kw2\">u</span> |: <span class=\"nu0\">2</span> ]\\ a + size * i.&gt;:steps<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>rectangle=: adverb def <span class=\"st_h\">'u -: +/ y'</span><br/>\u00a0<br/>trapezium=: adverb def <span class=\"st_h\">'-: +/ u y'</span><br/>\u00a0<br/>simpson  =: adverb def <span class=\"st_h\">'6\u00a0%~ +/ 1 1 4 * u y, -:+/y'</span></pre>"}, {"lang": "Java", "loc": 124, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">class</span> NumericalIntegration<br/><span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"kw2\">interface</span> FPFunction<br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw3\">double</span> eval<span class=\"br0\">(</span><span class=\"kw3\">double</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">double</span> rectangularLeft<span class=\"br0\">(</span><span class=\"kw3\">double</span> a, <span class=\"kw3\">double</span> b, <span class=\"kw3\">int</span> n, FPFunction f<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw2\">return</span> rectangular<span class=\"br0\">(</span>a, b, n, f, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">double</span> rectangularMidpoint<span class=\"br0\">(</span><span class=\"kw3\">double</span> a, <span class=\"kw3\">double</span> b, <span class=\"kw3\">int</span> n, FPFunction f<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw2\">return</span> rectangular<span class=\"br0\">(</span>a, b, n, f, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">double</span> rectangularRight<span class=\"br0\">(</span><span class=\"kw3\">double</span> a, <span class=\"kw3\">double</span> b, <span class=\"kw3\">int</span> n, FPFunction f<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw2\">return</span> rectangular<span class=\"br0\">(</span>a, b, n, f, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">double</span> trapezium<span class=\"br0\">(</span><span class=\"kw3\">double</span> a, <span class=\"kw3\">double</span> b, <span class=\"kw3\">int</span> n, FPFunction f<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw3\">double</span> range = checkParamsGetRange<span class=\"br0\">(</span>a, b, n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">double</span> nFloat = <span class=\"br0\">(</span><span class=\"kw3\">double</span><span class=\"br0\">)</span>n<span class=\"sy0\">;</span><br/>    <span class=\"kw3\">double</span> sum = <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i++<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw3\">double</span> x = a + range <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw3\">double</span><span class=\"br0\">)</span>i / nFloat<span class=\"sy0\">;</span><br/>      sum += f.<span class=\"me1\">eval</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    sum += <span class=\"br0\">(</span>f.<span class=\"me1\">eval</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> + f.<span class=\"me1\">eval</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span> / <span class=\"nu0\">2.0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">return</span> sum <span class=\"sy0\">*</span> range / nFloat<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">double</span> simpsons<span class=\"br0\">(</span><span class=\"kw3\">double</span> a, <span class=\"kw3\">double</span> b, <span class=\"kw3\">int</span> n, FPFunction f<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw3\">double</span> range = checkParamsGetRange<span class=\"br0\">(</span>a, b, n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">double</span> nFloat = <span class=\"br0\">(</span><span class=\"kw3\">double</span><span class=\"br0\">)</span>n<span class=\"sy0\">;</span><br/>    <span class=\"kw3\">double</span> sum1 = f.<span class=\"me1\">eval</span><span class=\"br0\">(</span>a + range / <span class=\"br0\">(</span>nFloat <span class=\"sy0\">*</span> <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">double</span> sum2 = <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i++<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw3\">double</span> x1 = a + range <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">double</span><span class=\"br0\">)</span>i + <span class=\"nu0\">0.5</span><span class=\"br0\">)</span> / nFloat<span class=\"sy0\">;</span><br/>      sum1 += f.<span class=\"me1\">eval</span><span class=\"br0\">(</span>x1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw3\">double</span> x2 = a + range <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw3\">double</span><span class=\"br0\">)</span>i / nFloat<span class=\"sy0\">;</span><br/>      sum2 += f.<span class=\"me1\">eval</span><span class=\"br0\">(</span>x2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span> <span class=\"br0\">(</span>f.<span class=\"me1\">eval</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> + f.<span class=\"me1\">eval</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> + sum1 <span class=\"sy0\">*</span> <span class=\"nu0\">4.0</span> + sum2 <span class=\"sy0\">*</span> <span class=\"nu0\">2.0</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> range / <span class=\"br0\">(</span>nFloat <span class=\"sy0\">*</span> <span class=\"nu0\">6.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw3\">double</span> rectangular<span class=\"br0\">(</span><span class=\"kw3\">double</span> a, <span class=\"kw3\">double</span> b, <span class=\"kw3\">int</span> n, FPFunction f, <span class=\"kw3\">int</span> mode<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw3\">double</span> range = checkParamsGetRange<span class=\"br0\">(</span>a, b, n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">double</span> modeOffset = <span class=\"br0\">(</span><span class=\"kw3\">double</span><span class=\"br0\">)</span>mode / <span class=\"nu0\">2.0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">double</span> nFloat = <span class=\"br0\">(</span><span class=\"kw3\">double</span><span class=\"br0\">)</span>n<span class=\"sy0\">;</span><br/>    <span class=\"kw3\">double</span> sum = <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i++<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw3\">double</span> x = a + range <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw3\">double</span><span class=\"br0\">)</span>i + modeOffset<span class=\"br0\">)</span> / nFloat<span class=\"sy0\">;</span><br/>      sum += f.<span class=\"me1\">eval</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span> sum <span class=\"sy0\">*</span> range / nFloat<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw3\">double</span> checkParamsGetRange<span class=\"br0\">(</span><span class=\"kw3\">double</span> a, <span class=\"kw3\">double</span> b, <span class=\"kw3\">int</span> n<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/IllegalArgumentException.html\"><span class=\"kw21\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Invalid value of n\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">double</span> range = b - a<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>range <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/IllegalArgumentException.html\"><span class=\"kw21\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Invalid range\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">return</span> range<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>  <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> testFunction<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> fname, <span class=\"kw3\">double</span> a, <span class=\"kw3\">double</span> b, <span class=\"kw3\">int</span> n, FPFunction f<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Testing function <span class=\"es0\">\\\"</span>\"</span> + fname + <span class=\"st0\">\"<span class=\"es0\">\\\"</span>, a=\"</span> + a + <span class=\"st0\">\", b=\"</span> + b + <span class=\"st0\">\", n=\"</span> + n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"rectangularLeft: \"</span> + rectangularLeft<span class=\"br0\">(</span>a, b, n, f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"rectangularMidpoint: \"</span> + rectangularMidpoint<span class=\"br0\">(</span>a, b, n, f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"rectangularRight: \"</span> + rectangularRight<span class=\"br0\">(</span>a, b, n, f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"trapezium: \"</span> + trapezium<span class=\"br0\">(</span>a, b, n, f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"simpsons: \"</span> + simpsons<span class=\"br0\">(</span>a, b, n, f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">return</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    testFunction<span class=\"br0\">(</span><span class=\"st0\">\"x^3\"</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">100</span>, <span class=\"kw2\">new</span> FPFunction<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">public</span> <span class=\"kw3\">double</span> eval<span class=\"br0\">(</span><span class=\"kw3\">double</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw2\">return</span> n <span class=\"sy0\">*</span> n <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    testFunction<span class=\"br0\">(</span><span class=\"st0\">\"1/x\"</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">100.0</span>, <span class=\"nu0\">1000</span>, <span class=\"kw2\">new</span> FPFunction<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">public</span> <span class=\"kw3\">double</span> eval<span class=\"br0\">(</span><span class=\"kw3\">double</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw2\">return</span> <span class=\"nu0\">1.0</span> / n<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    testFunction<span class=\"br0\">(</span><span class=\"st0\">\"x\"</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">5000.0</span>, <span class=\"nu0\">5000000</span>, <span class=\"kw2\">new</span> FPFunction<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">public</span> <span class=\"kw3\">double</span> eval<span class=\"br0\">(</span><span class=\"kw3\">double</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw2\">return</span> n<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    testFunction<span class=\"br0\">(</span><span class=\"st0\">\"x\"</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">6000.0</span>, <span class=\"nu0\">6000000</span>, <span class=\"kw2\">new</span> FPFunction<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">public</span> <span class=\"kw3\">double</span> eval<span class=\"br0\">(</span><span class=\"kw3\">double</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw2\">return</span> n<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">return</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 16, "block": "<pre class=\"text highlighted_source\">function simpson(f::Function, a::Number, b::Number, n::Integer)<br/>    h = (b - a) / n<br/>    s = f(a + h / 2)<br/>    for i in 1:(n-1)<br/>        s += f(a + h * i + h / 2) + f(a + h * i) / 2<br/>    end<br/>    return h/6 * (f(a) + f(b) + 4*s)<br/>end<br/>\u00a0<br/>rst =<br/>    simpson(x -&gt; x ^ 3, 0, 1, 100),<br/>    simpson(x -&gt; 1 / x, 1, 100, 1000),<br/>    simpson(x -&gt; x, 0, 5000, 5_000_000),<br/>    simpson(x -&gt; x, 0, 6000, 6_000_000)<br/>\u00a0<br/>@show rst</pre>"}, {"lang": "Kotlin", "loc": 26, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>typealias Func <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Double<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Double<br/>\u00a0<br/>fun integrate<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> Double, b<span class=\"sy0\">:</span> Double, n<span class=\"sy0\">:</span> Int, f<span class=\"sy0\">:</span> Func<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b - a<span class=\"br0\">)</span> / n<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sum <span class=\"sy0\">=</span> DoubleArray<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x <span class=\"sy0\">=</span> a + i <span class=\"sy0\">*</span> h<br/>        sum<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> +<span class=\"sy0\">=</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>        sum<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> +<span class=\"sy0\">=</span> f<span class=\"br0\">(</span>x + h / <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><br/>        sum<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> +<span class=\"sy0\">=</span> f<span class=\"br0\">(</span>x + h<span class=\"br0\">)</span><br/>        sum<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> + f<span class=\"br0\">(</span>x + h<span class=\"br0\">)</span><span class=\"br0\">)</span> / <span class=\"nu0\">2.0</span><br/>        sum<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> + <span class=\"nu0\">4.0</span> <span class=\"sy0\">*</span> f<span class=\"br0\">(</span>x + h / <span class=\"nu0\">2.0</span><span class=\"br0\">)</span> + f<span class=\"br0\">(</span>x + h<span class=\"br0\">)</span><span class=\"br0\">)</span> / <span class=\"nu0\">6.0</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> methods <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">\"LeftRect \"</span>, <span class=\"st0\">\"MidRect  \"</span>, <span class=\"st0\">\"RightRect\"</span>, <span class=\"st0\">\"Trapezium\"</span>, <span class=\"st0\">\"Simpson  \"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">4</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"${methods[i]} = ${\"</span><span class=\"sy0\">%</span>f<span class=\"st0\">\".format(sum[i] * h)}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    integrate<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> it <span class=\"sy0\">*</span> it <span class=\"sy0\">*</span> it <span class=\"br0\">}</span><br/>    integrate<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">100.0</span>, <span class=\"nu0\">1</span><span class=\"sy0\">_</span>000<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">1.0</span> / it <span class=\"br0\">}</span><br/>    integrate<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">5000.0</span>, <span class=\"nu0\">5</span><span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"br0\">)</span> <span class=\"br0\">{</span> it <span class=\"br0\">}</span><br/>    integrate<span class=\"br0\">(</span><span class=\"nu0\">0.0</span>, <span class=\"nu0\">6000.0</span>, <span class=\"nu0\">6</span><span class=\"sy0\">_</span>000<span class=\"sy0\">_</span>000<span class=\"br0\">)</span> <span class=\"br0\">{</span> it <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 119, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">while</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">read</span> x$<br/>    <span class=\"kw1\">if</span> x$ <span class=\"sy0\">=</span><span class=\"st0\">\"end\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">print</span> <span class=\"st0\">\"**Over**\"</span><span class=\"sy0\">:</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">read</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> N<span class=\"sy0\">,</span> knownValue<br/>\u00a0<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\" Function y =\"</span>; x$; <span class=\"st0\">\" from \"</span>; a; <span class=\"st0\">\" to \"</span>; b; <span class=\"st0\">\" in \"</span>; N; <span class=\"st0\">\" steps\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\" Known exact value =\"</span>; knownValue<br/>\u00a0<br/>    areaLR <span class=\"sy0\">=</span> IntegralByLeftRectangle<span class=\"br0\">(</span>   x$<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> N<span class=\"br0\">)</span><br/>    areaRR <span class=\"sy0\">=</span> IntegralByRightRectangle<span class=\"br0\">(</span>  x$<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> N<span class=\"br0\">)</span><br/>    areaMR <span class=\"sy0\">=</span> IntegralByMiddleRectangle<span class=\"br0\">(</span> x$<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> N<span class=\"br0\">)</span><br/>    areaTr <span class=\"sy0\">=</span> IntegralByTrapezium<span class=\"br0\">(</span>       x$<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> N<span class=\"br0\">)</span><br/>    areaSi <span class=\"sy0\">=</span> IntegralBySimpsonRule<span class=\"br0\">(</span>     x$<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> N<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Left rectangle method   \"</span>; <span class=\"kw2\">using</span><span class=\"br0\">(</span> <span class=\"st0\">\"##########.##########\"</span><span class=\"sy0\">,</span> areaLR<span class=\"br0\">)</span>; <span class=\"st0\">\" diff \"</span>; knownValue<span class=\"sy0\">-</span>areaLR; <span class=\"kw2\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">70</span><span class=\"br0\">)</span>; <span class=\"br0\">(</span>knownValue<span class=\"sy0\">-</span>areaLR<span class=\"br0\">)</span><span class=\"sy0\">/</span>knownValue<span class=\"sy0\">*</span><span class=\"nu0\">100</span>;<span class=\"st0\">\"\u00a0%\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Right rectangle method  \"</span>; <span class=\"kw2\">using</span><span class=\"br0\">(</span> <span class=\"st0\">\"##########.##########\"</span><span class=\"sy0\">,</span> areaRR<span class=\"br0\">)</span>; <span class=\"st0\">\" diff \"</span>; knownValue<span class=\"sy0\">-</span>areaRR; <span class=\"kw2\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">70</span><span class=\"br0\">)</span>; <span class=\"br0\">(</span>knownValue<span class=\"sy0\">-</span>areaRR<span class=\"br0\">)</span><span class=\"sy0\">/</span>knownValue<span class=\"sy0\">*</span><span class=\"nu0\">100</span>;<span class=\"st0\">\"\u00a0%\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Middle rectangle method \"</span>; <span class=\"kw2\">using</span><span class=\"br0\">(</span> <span class=\"st0\">\"##########.##########\"</span><span class=\"sy0\">,</span> areaMR<span class=\"br0\">)</span>; <span class=\"st0\">\" diff \"</span>; knownValue<span class=\"sy0\">-</span>areaMR; <span class=\"kw2\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">70</span><span class=\"br0\">)</span>; <span class=\"br0\">(</span>knownValue<span class=\"sy0\">-</span>areaMR<span class=\"br0\">)</span><span class=\"sy0\">/</span>knownValue<span class=\"sy0\">*</span><span class=\"nu0\">100</span>;<span class=\"st0\">\"\u00a0%\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Trapezium  method       \"</span>; <span class=\"kw2\">using</span><span class=\"br0\">(</span> <span class=\"st0\">\"##########.##########\"</span><span class=\"sy0\">,</span> areaTr<span class=\"br0\">)</span>; <span class=\"st0\">\" diff \"</span>; knownValue<span class=\"sy0\">-</span>areaTr; <span class=\"kw2\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">70</span><span class=\"br0\">)</span>; <span class=\"br0\">(</span>knownValue<span class=\"sy0\">-</span>areaTr<span class=\"br0\">)</span><span class=\"sy0\">/</span>knownValue<span class=\"sy0\">*</span><span class=\"nu0\">100</span>;<span class=\"st0\">\"\u00a0%\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Simpson's Rule          \"</span>; <span class=\"kw2\">using</span><span class=\"br0\">(</span> <span class=\"st0\">\"##########.##########\"</span><span class=\"sy0\">,</span> areaSi<span class=\"br0\">)</span>; <span class=\"st0\">\" diff \"</span>; knownValue<span class=\"sy0\">-</span>areaSi; <span class=\"kw2\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">70</span><span class=\"br0\">)</span>; <span class=\"br0\">(</span>knownValue<span class=\"sy0\">-</span>areaSi<span class=\"br0\">)</span><span class=\"sy0\">/</span>knownValue<span class=\"sy0\">*</span><span class=\"nu0\">100</span>;<span class=\"st0\">\"\u00a0%\"</span><br/>\u00a0<br/>    <span class=\"kw1\">print</span><br/>\u00a0<br/><span class=\"kw1\">wend</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">'------------------------------------------------------</span><br/>    <span class=\"co1\">'we have N sizes, that gives us N+1 points</span><br/>    <span class=\"co1\">'point 0 is a</span><br/>    <span class=\"co1\">'point N is b</span><br/>    <span class=\"co1\">'point i is xi =a +i *h</span><br/>    <span class=\"co1\">'Often, precision is (sharper?) then single step area</span><br/>    <span class=\"co1\">'So there should be EXACT number of steps, hence loop by integer i.</span><br/>\u00a0<br/><span class=\"kw1\">function</span> IntegralByLeftRectangle<span class=\"br0\">(</span> x$<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> N<span class=\"br0\">)</span><br/>    h <span class=\"sy0\">=</span> <span class=\"br0\">(</span> b <span class=\"sy0\">-</span>a<span class=\"br0\">)</span> <span class=\"sy0\">/</span>N<br/>    s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> N <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        x <span class=\"sy0\">=</span> a <span class=\"sy0\">+</span>i <span class=\"sy0\">*</span>h<br/>        s <span class=\"sy0\">=</span> s <span class=\"sy0\">+</span> h <span class=\"sy0\">*</span><span class=\"kw2\">eval</span><span class=\"br0\">(</span> x$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span><br/>    IntegralByLeftRectangle <span class=\"sy0\">=</span> s<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> IntegralByRightRectangle<span class=\"br0\">(</span> x$<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> N<span class=\"br0\">)</span><br/>    h <span class=\"sy0\">=</span><span class=\"br0\">(</span> b <span class=\"sy0\">-</span>a<span class=\"br0\">)</span> <span class=\"sy0\">/</span>N<br/>    s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> N<br/>        x <span class=\"sy0\">=</span> a <span class=\"sy0\">+</span>i <span class=\"sy0\">*</span>h<br/>        s <span class=\"sy0\">=</span> s <span class=\"sy0\">+</span> h <span class=\"sy0\">*</span><span class=\"kw2\">eval</span><span class=\"br0\">(</span> x$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span><br/>    IntegralByRightRectangle <span class=\"sy0\">=</span> s<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> IntegralByMiddleRectangle<span class=\"br0\">(</span> x$<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> N<span class=\"br0\">)</span><br/>    h <span class=\"sy0\">=</span><span class=\"br0\">(</span> b <span class=\"sy0\">-</span>a<span class=\"br0\">)</span> <span class=\"sy0\">/</span>N<br/>    s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> N <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        x <span class=\"sy0\">=</span> a <span class=\"sy0\">+</span>i <span class=\"sy0\">*</span>h <span class=\"sy0\">+</span>h <span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>        s <span class=\"sy0\">=</span> s <span class=\"sy0\">+</span> h <span class=\"sy0\">*</span><span class=\"kw2\">eval</span><span class=\"br0\">(</span> x$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span><br/>    IntegralByMiddleRectangle <span class=\"sy0\">=</span> s<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> IntegralByTrapezium<span class=\"br0\">(</span> x$<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> N<span class=\"br0\">)</span><br/><span class=\"co1\">'Formula is h*((f(a)+f(b))/2 + sum_{i=1}^{N-1} (f(x_i)))</span><br/>    h  <span class=\"sy0\">=</span><span class=\"br0\">(</span> b <span class=\"sy0\">-</span>a<span class=\"br0\">)</span> <span class=\"sy0\">/</span>N<br/>    x  <span class=\"sy0\">=</span> a<br/>    fa <span class=\"sy0\">=</span><span class=\"kw2\">eval</span><span class=\"br0\">(</span> x$<span class=\"br0\">)</span><br/>    x  <span class=\"sy0\">=</span>b<br/>    fb <span class=\"sy0\">=</span><span class=\"kw2\">eval</span><span class=\"br0\">(</span> x$<span class=\"br0\">)</span><br/>    s <span class=\"sy0\">=</span> h <span class=\"sy0\">*</span><span class=\"br0\">(</span> fa <span class=\"sy0\">+</span>fb<span class=\"br0\">)</span> <span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> N <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        x <span class=\"sy0\">=</span> a <span class=\"sy0\">+</span>i <span class=\"sy0\">*</span>h<br/>        s <span class=\"sy0\">=</span> s <span class=\"sy0\">+</span> h <span class=\"sy0\">*</span><span class=\"kw2\">eval</span><span class=\"br0\">(</span> x$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span><br/>    IntegralByTrapezium <span class=\"sy0\">=</span> s<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> IntegralBySimpsonRule<span class=\"br0\">(</span> x$<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> N<span class=\"br0\">)</span><br/>    <span class=\"co1\">'Simpson</span><br/>    <span class=\"co1\">'N should be even.</span><br/>    <span class=\"kw1\">if</span> N <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> N <span class=\"sy0\">=</span>N <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"co1\">'It really doesn't look right to double number of points from N to 2N -</span><br/>    <span class=\"co1\">' - this method is most accurate of all presented!</span><br/>    <span class=\"co1\">'So we use NN as N/2, and N will be 2NN</span><br/>    <span class=\"co1\">'Formula is h/6*( f(a)+f(b) + 4*(f(x_1)+f(x_3)+...+f(x_{2NN-1})+ 2*(f(x_2)+f(x_4)+...+f(x_{2NN-2})) )</span><br/>    <span class=\"co1\">'Somehow I messed up h/6, h/3 and what is h, regarding \"n=number of double intervals of size 2h\"</span><br/>    NN <span class=\"sy0\">=</span>N <span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>\u00a0<br/>    h  <span class=\"sy0\">=</span><span class=\"br0\">(</span> b <span class=\"sy0\">-</span>a<span class=\"br0\">)</span> <span class=\"sy0\">/</span>N<br/>    x  <span class=\"sy0\">=</span>a<br/>    fa <span class=\"sy0\">=</span><span class=\"kw2\">eval</span> <span class=\"br0\">(</span>x$<span class=\"br0\">)</span><br/>    x  <span class=\"sy0\">=</span>b<br/>    fb <span class=\"sy0\">=</span><span class=\"kw2\">eval</span><span class=\"br0\">(</span> x$<span class=\"br0\">)</span><br/>    s <span class=\"sy0\">=</span> h <span class=\"sy0\">/</span><span class=\"nu0\">3</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span> fa <span class=\"sy0\">+</span>fb<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span>NN <span class=\"sy0\">-</span><span class=\"nu0\">1</span> step <span class=\"nu0\">2</span><br/>        x <span class=\"sy0\">=</span> a <span class=\"sy0\">+</span>i <span class=\"sy0\">*</span>h<br/>        s <span class=\"sy0\">=</span> s <span class=\"sy0\">+</span> h <span class=\"sy0\">/</span><span class=\"nu0\">3</span> <span class=\"sy0\">*</span><span class=\"nu0\">4</span> <span class=\"sy0\">*</span><span class=\"kw2\">eval</span><span class=\"br0\">(</span> x$<span class=\"br0\">)</span>  <span class=\"co1\">'odd points</span><br/>    <span class=\"kw1\">next</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span>NN <span class=\"sy0\">-</span><span class=\"nu0\">2</span> step <span class=\"nu0\">2</span><br/>        x <span class=\"sy0\">=</span> a <span class=\"sy0\">+</span>i <span class=\"sy0\">*</span>h<br/>        s <span class=\"sy0\">=</span> s <span class=\"sy0\">+</span> h <span class=\"sy0\">/</span><span class=\"nu0\">3</span> <span class=\"sy0\">*</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span><span class=\"kw2\">eval</span><span class=\"br0\">(</span> x$<span class=\"br0\">)</span>  <span class=\"co1\">'even points</span><br/>    <span class=\"kw1\">next</span><br/>\u00a0<br/>    IntegralBySimpsonRule <span class=\"sy0\">=</span> s<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"co1\">'=======================================================</span><br/><span class=\"kw1\">data</span> <span class=\"st0\">\"x^3\"</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>    <span class=\"nu0\">1</span><span class=\"sy0\">,</span>     <span class=\"nu0\">100</span><span class=\"sy0\">,</span>          <span class=\"nu0\">0.25</span><br/><span class=\"kw1\">data</span> <span class=\"st0\">\"x^-1\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">100</span><span class=\"sy0\">,</span>    <span class=\"nu0\">1000</span><span class=\"sy0\">,</span>          <span class=\"nu0\">4.605170</span><br/><span class=\"kw1\">data</span> <span class=\"st0\">\"x\"</span><span class=\"sy0\">,</span>    <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5000</span><span class=\"sy0\">,</span>    <span class=\"nu0\">1000</span><span class=\"sy0\">,</span>   <span class=\"nu0\">12500000.0</span>   <span class=\"co1\">'   should use 5 000 000 steps</span><br/><span class=\"kw1\">data</span> <span class=\"st0\">\"x\"</span><span class=\"sy0\">,</span>    <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">6000</span><span class=\"sy0\">,</span>    <span class=\"nu0\">1000</span><span class=\"sy0\">,</span>   <span class=\"nu0\">18000000.0</span>   <span class=\"co1\">'   should use 6 000 000 steps</span><br/><span class=\"kw1\">data</span> <span class=\"st0\">\"end\"</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Logo", "loc": 36, "block": "<pre class=\"text highlighted_source\">to i.left\u00a0:fn\u00a0:x\u00a0:step<br/>  output invoke\u00a0:fn\u00a0:x<br/>end<br/>to i.right\u00a0:fn\u00a0:x\u00a0:step<br/>  output invoke\u00a0:fn\u00a0:x +\u00a0:step<br/>end<br/>to i.mid\u00a0:fn\u00a0:x\u00a0:step<br/>  output invoke\u00a0:fn\u00a0:x +\u00a0:step/2<br/>end<br/>to i.trapezium\u00a0:fn\u00a0:x\u00a0:step<br/>  output ((i.left\u00a0:fn\u00a0:x\u00a0:step) + (i.right\u00a0:fn\u00a0:x\u00a0:step)) / 2<br/>end<br/>to i.simpsons\u00a0:fn\u00a0:x\u00a0:step<br/>  output ( (i.left\u00a0:fn\u00a0:x\u00a0:step)<br/>         + (i.mid\u00a0:fn\u00a0:x\u00a0:step) * 4<br/>         + (i.right\u00a0:fn\u00a0:x\u00a0:step) ) / 6<br/>end<br/>\u00a0<br/>to integrate\u00a0:method\u00a0:fn\u00a0:steps\u00a0:a\u00a0:b<br/>  localmake \"step (:b -\u00a0:a) /\u00a0:steps<br/>  localmake \"sigma 0<br/> \u00a0; for [x\u00a0:a\u00a0:b-:step\u00a0:step] [make \"sigma\u00a0:sigma + apply\u00a0:method (list\u00a0:fn\u00a0:x\u00a0:step)]<br/>  repeat\u00a0:steps [<br/>    make \"sigma\u00a0:sigma + (invoke\u00a0:method\u00a0:fn\u00a0:a\u00a0:step)<br/>    make \"a\u00a0:a +\u00a0:step ]<br/>  output\u00a0:sigma *\u00a0:step<br/>end<br/>\u00a0<br/>to fn2\u00a0:x<br/>  output 2 / (1 + 4 *\u00a0:x *\u00a0:x)<br/>end<br/>print integrate \"i.left      \"fn2 4 -1 2 \u00a0; 2.456897<br/>print integrate \"i.right     \"fn2 4 -1 2 \u00a0; 2.245132<br/>print integrate \"i.mid       \"fn2 4 -1 2 \u00a0; 2.496091<br/>print integrate \"i.trapezium \"fn2 4 -1 2 \u00a0; 2.351014<br/>print integrate \"i.simpsons  \"fn2 4 -1 2 \u00a0; 2.447732</pre>"}, {"lang": "Lua", "loc": 73, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> leftRect<span class=\"br0\">(</span> f<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> n <span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<br/>    <span class=\"kw1\">local</span> x <span class=\"sy0\">=</span> a<br/>    <span class=\"kw1\">local</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span> <span class=\"kw1\">do</span><br/>        sum <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> a <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>        x <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> h<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> sum <span class=\"sy0\">*</span> h<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> rightRect<span class=\"br0\">(</span> f<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> n <span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<br/>    <span class=\"kw1\">local</span> x <span class=\"sy0\">=</span> b<br/>    <span class=\"kw1\">local</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span> <span class=\"kw1\">do</span><br/>        sum <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> a <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>        x <span class=\"sy0\">=</span> x <span class=\"sy0\">-</span> h<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> sum <span class=\"sy0\">*</span> h<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> midRect<span class=\"br0\">(</span> f<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> n <span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<br/>    <span class=\"kw1\">local</span> x <span class=\"sy0\">=</span> a <span class=\"sy0\">+</span> h<span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>    <span class=\"kw1\">local</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span> <span class=\"kw1\">do</span><br/>        sum <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> a <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>        x <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> h<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> sum <span class=\"sy0\">*</span> h<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> trapezium<span class=\"br0\">(</span> f<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> n <span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<br/>    <span class=\"kw1\">local</span> x <span class=\"sy0\">=</span> a<br/>    <span class=\"kw1\">local</span> sum <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span> <span class=\"kw1\">do</span><br/>        sum <span class=\"sy0\">=</span> sum <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><br/>        x <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> h<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">*</span> sum <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> simpson<span class=\"br0\">(</span> f<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> n <span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<br/>    <span class=\"kw1\">local</span> sum1 <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>a <span class=\"sy0\">+</span> h<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> sum2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        sum1 <span class=\"sy0\">=</span> sum1 <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>a <span class=\"sy0\">+</span> h <span class=\"sy0\">*</span> i <span class=\"sy0\">+</span> h<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        sum2 <span class=\"sy0\">=</span> sum2 <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>a <span class=\"sy0\">+</span> h <span class=\"sy0\">*</span> i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span>    <br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>h<span class=\"sy0\">/</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">4</span><span class=\"sy0\">*</span>sum1 <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>sum2<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>\u00a0<br/>int_methods <span class=\"sy0\">=</span> <span class=\"br0\">{</span> leftRect<span class=\"sy0\">,</span> rightRect<span class=\"sy0\">,</span> midRect<span class=\"sy0\">,</span> trapezium<span class=\"sy0\">,</span> simpson <span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span> int_methods<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">(</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">return</span> x<span class=\"sy0\">^</span><span class=\"nu0\">3</span> <span class=\"kw1\">end</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span> int_methods<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">(</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span>x <span class=\"kw1\">end</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span> int_methods<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">(</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">return</span> x <span class=\"kw1\">end</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5000</span><span class=\"sy0\">,</span> <span class=\"nu0\">5000000</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span> int_methods<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">(</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">return</span> x <span class=\"kw1\">end</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">6000</span><span class=\"sy0\">,</span> <span class=\"nu0\">6000000</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica", "loc": 26, "block": "<pre class=\"text highlighted_source\">leftRect[f_, a_Real, b_Real, N_Integer]\u00a0:= <br/> Module[{sum = 0, dx = (b - a)/N, x = a, n = N} ,<br/>  For[n = N, n &gt; 0, n--, x += dx; sum += f[x];];<br/>  Return [ sum*dx ]]<br/>\u00a0<br/>rightRect[f_, a_Real, b_Real, N_Integer]\u00a0:= <br/> Module[{sum = 0, dx = (b - a)/N, x = a + (b - a)/N, n = N} ,<br/>  For[n = N, n &gt; 0, n--, x += dx; sum += f[x];];<br/>  Return [ sum*dx ]]<br/>\u00a0<br/>midRect[f_, a_Real, b_Real, N_Integer]\u00a0:= <br/> Module[{sum = 0, dx = (b - a)/N, x = a + (b - a)/(2 N), n = N} ,<br/>  For[n = N, n &gt; 0, n--, x += dx; sum += f[x];];<br/>  Return [ sum*dx ]]<br/>\u00a0<br/>trapezium[f_, a_Real, b_Real, N_Integer]\u00a0:= <br/> Module[{sum = f[a], dx = (b - a)/N, x = a, n = N} ,<br/>  For[n = 1, n &lt; N, n++, x += dx; sum += 2 f[x];];<br/>  sum += f[b];<br/>  Return [ 0.5*sum*dx ]]<br/>\u00a0<br/>simpson[f_, a_Real, b_Real, N_Integer]\u00a0:= <br/> Module[{sum1 = f[a + (b - a)/(2 N)], sum2 = 0, dx = (b - a)/N, x = a, n = N} ,<br/>  For[n = 1, n &lt; N, n++, sum1 += f[a + dx*n + dx/2]; <br/>   sum2 += f[a + dx*n];];<br/>  Return [(dx/6)*(f[a] + f[b] + 4*sum1 + 2*sum2)]]</pre>"}, {"lang": "MATLAB / Octave", "loc": 8, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> integral = leftRectIntegration<span class=\"br0\">(</span>f,a,b,n<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/format.html\"><span class=\"kw2\">format</span></a> long;<br/>    width = <span class=\"br0\">(</span>b-a<span class=\"br0\">)</span>/n; <span class=\"co1\">%calculate the width of each devision</span><br/>    x = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/linspace.html\"><span class=\"kw2\">linspace</span></a><span class=\"br0\">(</span>a,b,n<span class=\"br0\">)</span>; <span class=\"co1\">%define x-axis</span><br/>    integral = width * <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html\"><span class=\"kw2\">sum</span></a><span class=\"br0\">(</span> f<span class=\"br0\">(</span>x<span class=\"br0\">(</span><span class=\"nu0\">1</span>:n-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maxima", "loc": 27, "block": "<pre class=\"text highlighted_source\">right_rect(e, x, a, b, n)\u00a0:= block([h: (b - a) / n, s: 0],<br/>   for i from 1 thru n do s: s + subst(x = a + i * h, e),<br/>   s * h)$<br/>\u00a0<br/>left_rect(e, x, a, b, n)\u00a0:= block([h: (b - a) / n, s: 0],<br/>   for i from 1 thru n do s: s + subst(x = a + (i - 1) * h, e),<br/>   s * h)$<br/>\u00a0<br/>mid_rect(e, x, a, b, n)\u00a0:= block([h: (b - a) / n, s: 0],<br/>   for i from 1 thru n do s: s + subst(x = a + (i - 1/2) * h, e),<br/>   s * h)$<br/>\u00a0<br/>trapezium(e, x, a, b, n)\u00a0:= block([h: (b - a) / n, s: 0],<br/>   for i from 1 thru n - 1 do s: s + subst(x = a + i * h, e),<br/>   ((subst(x = a, e) + subst(x = b, e)) / 2 + s) * h)$<br/>\u00a0<br/>simpson(e, x, a, b, n)\u00a0:= block([h: (b - a) / n, s: 0],<br/>   for i from 1 thru n do<br/>      s: s + subst(x = a + i * h, e) + 2 * subst(x = a + (i - 1/2) * h, e),<br/>   (subst(x = a, e) - subst(x = b, e) + 2 * s) * h / 6)$<br/>\u00a0<br/>/* some tests */<br/>\u00a0<br/>simpson(log(x), x, 1, 2, 20), bfloat;<br/>2 * log(2) - 1 -\u00a0%, bfloat;<br/>\u00a0<br/>trapezium(1/x, x, 1, 100, 10000) - log(100), bfloat;</pre>"}, {"lang": "Nim", "loc": 45, "block": "<pre class=\"text highlighted_source\">type Function = proc(x: float): float<br/>type Rule = proc(f: Function; x, h: float): float<br/>\u00a0<br/>proc leftRect(f: Function; x, h: float): float =<br/>  f(x)<br/>\u00a0<br/>proc midRect(f: Function; x, h: float): float =<br/>  f(x + h/2.0)<br/>\u00a0<br/>proc rightRect(f: Function; x, h: float): float =<br/>  f(x + h)<br/>\u00a0<br/>proc trapezium(f: Function; x, h: float): float =<br/>  (f(x) + f(x+h)) / 2.0<br/>\u00a0<br/>proc simpson(f: Function, x, h: float): float =<br/>  (f(x) + 4.0*f(x+h/2.0) + f(x+h)) / 6.0<br/>\u00a0<br/>proc cube(x: float): float =<br/>  x * x *x<br/>\u00a0<br/>proc reciprocal(x: float): float =<br/>  1.0 / x<br/>\u00a0<br/>proc identity(x: float): float =<br/>  x<br/>\u00a0<br/>proc integrate(f: Function; a, b: float; steps: int; meth: Rule): float =<br/>  let h = (b-a) / float(steps)<br/>  for i in 0 .. &lt;steps:<br/>    result += meth(f, a+float(i)*h, h)<br/>  result = h * result<br/>\u00a0<br/>for fName, a, b, steps, fun in items(<br/>   [(\"cube\", 0, 1, 100, cube),<br/>    (\"reciprocal\", 1, 100, 1000, reciprocal),<br/>    (\"identity\", 0, 5000, 5_000_000, identity),<br/>    (\"identity\", 0, 6000, 6_000_000, identity)]):<br/>\u00a0<br/>  for rName, rule in items({\"leftRect\": leftRect, \"midRect\": midRect,<br/>      \"rightRect\": rightRect, \"trapezium\": trapezium, \"simpson\": simpson}):<br/>\u00a0<br/>    echo fName, \" integrated using \", rName<br/>    echo \"  from \", a, \" to \", b, \" (\", steps, \" steps) = \",<br/>      integrate(fun, float(a), float(b), steps, rule)</pre>"}, {"lang": "OCaml", "loc": 7, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> integrate f a b steps meth <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-.</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat_of_int\"><span class=\"kw3\">float_of_int</span></a> steps <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> helper i s <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> i <span class=\"sy0\">&gt;=</span> steps <span class=\"kw1\">then</span> s<br/>    <span class=\"kw1\">else</span> helper <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> i<span class=\"br0\">)</span> <span class=\"br0\">(</span>s <span class=\"sy0\">+.</span> meth f <span class=\"br0\">(</span>a <span class=\"sy0\">+.</span> h <span class=\"sy0\">*.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat_of_int\"><span class=\"kw3\">float_of_int</span></a> i<span class=\"br0\">)</span> h<span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  h <span class=\"sy0\">*.</span> helper <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span></pre>"}, {"lang": "PARI/GP", "loc": 29, "block": "<pre class=\"parigp highlighted_source\">rectLeft<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">sum</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>f<span class=\"br0\">(</span>a<span class=\"sy0\">+</span><span class=\"br0\">(</span>b<span class=\"sy0\">-</span>a<span class=\"br0\">)</span><span class=\"sy0\">*</span>i<span class=\"sy0\">/</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu1\">0</span>.<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>b<span class=\"sy0\">-</span>a<span class=\"br0\">)</span><span class=\"sy0\">/</span>n<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>rectMid<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">sum</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>f<span class=\"br0\">(</span>a<span class=\"sy0\">+</span><span class=\"br0\">(</span>b<span class=\"sy0\">-</span>a<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu2\">.5</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu1\">0</span>.<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>b<span class=\"sy0\">-</span>a<span class=\"br0\">)</span><span class=\"sy0\">/</span>n<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>rectRight<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">sum</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>f<span class=\"br0\">(</span>a<span class=\"sy0\">+</span><span class=\"br0\">(</span>b<span class=\"sy0\">-</span>a<span class=\"br0\">)</span><span class=\"sy0\">*</span>i<span class=\"sy0\">/</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu1\">0</span>.<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>b<span class=\"sy0\">-</span>a<span class=\"br0\">)</span><span class=\"sy0\">/</span>n<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>trapezoidal<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">sum</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>f<span class=\"br0\">(</span>a<span class=\"sy0\">+</span><span class=\"br0\">(</span>b<span class=\"sy0\">-</span>a<span class=\"br0\">)</span><span class=\"sy0\">*</span>i<span class=\"sy0\">/</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> f<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu1\">2</span><span class=\"sy0\">+</span>f<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu1\">2</span>.<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>b<span class=\"sy0\">-</span>a<span class=\"br0\">)</span><span class=\"sy0\">/</span>n<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>Simpson<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>h<span class=\"sy0\">=</span><span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span><span class=\"sy0\">/</span>n<span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  s <span class=\"sy0\">=</span> <span class=\"nu1\">2</span><span class=\"sy0\">*</span><span class=\"kw1\">sum</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><br/>    <span class=\"nu1\">2</span><span class=\"sy0\">*</span>f<span class=\"br0\">(</span>a <span class=\"sy0\">+</span> h <span class=\"sy0\">*</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">/</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>a <span class=\"sy0\">+</span> h <span class=\"sy0\">*</span> i<span class=\"br0\">)</span><br/>  <span class=\"sy0\">,</span> <span class=\"nu1\">0</span>.<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu1\">4</span><span class=\"sy0\">*</span>f<span class=\"br0\">(</span>a <span class=\"sy0\">+</span> h<span class=\"sy0\">/</span><span class=\"nu1\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  s <span class=\"sy0\">*</span> h <span class=\"sy0\">/</span> <span class=\"nu1\">6</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>test<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>v<span class=\"sy0\">=</span><span class=\"br0\">[</span>rectLeft<span class=\"sy0\">,</span> rectMid<span class=\"sy0\">,</span> rectRight<span class=\"sy0\">,</span> trapezoidal<span class=\"sy0\">,</span> Simpson<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Testing function \"</span>f<span class=\"st0\">\" on \"</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\" with \"</span>n<span class=\"st0\">\" intervals:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span> <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/># <span class=\"co1\">\\\\ Turn on timer</span><br/>test<span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span>x<span class=\"sy0\">^</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span> <span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"nu1\">100</span><span class=\"br0\">)</span><br/>test<span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span><span class=\"nu1\">1</span><span class=\"sy0\">/</span>x<span class=\"sy0\">,</span> <span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"nu1\">100</span><span class=\"sy0\">,</span> <span class=\"nu1\">1000</span><span class=\"br0\">)</span><br/>test<span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span>x<span class=\"sy0\">,</span> <span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"nu1\">5000</span><span class=\"sy0\">,</span> <span class=\"nu1\">5000000</span><span class=\"br0\">)</span><br/>test<span class=\"br0\">(</span>x<span class=\"sy0\">-&gt;</span>x<span class=\"sy0\">,</span> <span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"nu1\">6000</span><span class=\"sy0\">,</span> <span class=\"nu1\">6000000</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 41, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">function</span> RectLeft<span class=\"br0\">(</span><span class=\"kw1\">function</span> f<span class=\"br0\">(</span>x<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span> xl<span class=\"sy1\">,</span> xr<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">begin</span><br/>  RectLeft <span class=\"sy1\">:</span><span class=\"sy3\">=</span> f<span class=\"br0\">(</span>xl<span class=\"br0\">)</span><br/> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> RectMid<span class=\"br0\">(</span><span class=\"kw1\">function</span> f<span class=\"br0\">(</span>x<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span> xl<span class=\"sy1\">,</span> xr<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">begin</span><br/>  RectMid <span class=\"sy1\">:</span><span class=\"sy3\">=</span> f<span class=\"br0\">(</span><span class=\"br0\">(</span>xl<span class=\"sy3\">+</span>xr<span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> RectRight<span class=\"br0\">(</span><span class=\"kw1\">function</span> f<span class=\"br0\">(</span>x<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span> xl<span class=\"sy1\">,</span> xr<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">begin</span><br/>  RectRight <span class=\"sy1\">:</span><span class=\"sy3\">=</span> f<span class=\"br0\">(</span>xr<span class=\"br0\">)</span><br/> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Trapezium<span class=\"br0\">(</span><span class=\"kw1\">function</span> f<span class=\"br0\">(</span>x<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span> xl<span class=\"sy1\">,</span> xr<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">begin</span><br/>  Trapezium <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>xl<span class=\"br0\">)</span> <span class=\"sy3\">+</span> f<span class=\"br0\">(</span>xr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><br/> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Simpson<span class=\"br0\">(</span><span class=\"kw1\">function</span> f<span class=\"br0\">(</span>x<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span> xl<span class=\"sy1\">,</span> xr<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">begin</span><br/>  Simpson <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>xl<span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">4</span><span class=\"sy3\">*</span>f<span class=\"br0\">(</span><span class=\"br0\">(</span>xl<span class=\"sy3\">+</span>xr<span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> f<span class=\"br0\">(</span>xr<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"nu0\">6</span><br/> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> integrate<span class=\"br0\">(</span><span class=\"kw1\">function</span> method<span class=\"br0\">(</span><span class=\"kw1\">function</span> f<span class=\"br0\">(</span>x<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span> xl<span class=\"sy1\">,</span> xr<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/>                   <span class=\"kw1\">function</span> f<span class=\"br0\">(</span>x<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/>                   a<span class=\"sy1\">,</span> b<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/>                   n<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">var</span><br/>  integral<span class=\"sy1\">,</span> h<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/>  k<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">begin</span><br/>  integral <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  h <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>b<span class=\"sy3\">-</span>a<span class=\"br0\">)</span><span class=\"sy3\">/</span>n<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> n<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>   <span class=\"kw1\">begin</span><br/>    integral <span class=\"sy1\">:</span><span class=\"sy3\">=</span> integral <span class=\"sy3\">+</span> method<span class=\"br0\">(</span>f<span class=\"sy1\">,</span> a <span class=\"sy3\">+</span> k<span class=\"sy3\">*</span>h<span class=\"sy1\">,</span> a <span class=\"sy3\">+</span> <span class=\"br0\">(</span>k<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy3\">*</span>h<span class=\"br0\">)</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  integrate <span class=\"sy1\">:</span><span class=\"sy3\">=</span> integral<br/> <span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Perl 6", "loc": 54, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> MONKEY<span class=\"sy0\">-</span>SEE<span class=\"sy0\">-</span>NO<span class=\"sy0\">-</span>EVAL<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> leftrect<span class=\"br0\">(</span><span class=\"re0\">&amp;f</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$h</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span> <span class=\"sy0\">-</span> <span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$h</span> <span class=\"sy0\">*</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span> f<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"sy0\">+</span><span class=\"re0\">$h</span> <span class=\"sy0\">...</span> <span class=\"re0\">$b</span><span class=\"sy0\">-</span><span class=\"re0\">$h</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> rightrect<span class=\"br0\">(</span><span class=\"re0\">&amp;f</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$h</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span> <span class=\"sy0\">-</span> <span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$h</span> <span class=\"sy0\">*</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span> f<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"re0\">$a</span><span class=\"sy0\">+</span><span class=\"re0\">$h</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"sy0\">+</span><span class=\"re0\">$h</span><span class=\"sy0\">+</span><span class=\"re0\">$h</span> <span class=\"sy0\">...</span> <span class=\"re0\">$b</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> midrect<span class=\"br0\">(</span><span class=\"re0\">&amp;f</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$h</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span> <span class=\"sy0\">-</span> <span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$h</span> <span class=\"sy0\">*</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span> f<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"re0\">$a</span><span class=\"sy0\">+</span><span class=\"re0\">$h</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"sy0\">+</span><span class=\"re0\">$h</span><span class=\"sy0\">+</span><span class=\"re0\">$h</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">...</span> <span class=\"re0\">$b</span><span class=\"sy0\">-</span><span class=\"re0\">$h</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> trapez<span class=\"br0\">(</span><span class=\"re0\">&amp;f</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$h</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span> <span class=\"sy0\">-</span> <span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$partial</span><span class=\"sy0\">-</span>sum <span class=\"sy0\">+=</span> f<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"kw1\">for</span> <span class=\"re0\">$a</span><span class=\"sy0\">+</span><span class=\"re0\">$h</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"sy0\">+</span><span class=\"re0\">$h</span><span class=\"sy0\">+</span><span class=\"re0\">$h</span> <span class=\"sy0\">...</span> <span class=\"re0\">$b</span><span class=\"sy0\">-</span><span class=\"re0\">$h</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$h</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> f<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> f<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$partial</span><span class=\"sy0\">-</span>sum<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> simpsons<span class=\"br0\">(</span><span class=\"re0\">&amp;f</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$h</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span> <span class=\"sy0\">-</span> <span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$h2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$h</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$sum1</span> <span class=\"sy0\">=</span> f<span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">+</span> <span class=\"re0\">$h2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$sum2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"re0\">$a</span><span class=\"sy0\">+</span><span class=\"re0\">$h</span><span class=\"sy0\">,</span> <span class=\"sy0\">*+</span><span class=\"re0\">$h</span> <span class=\"sy0\">...</span> <span class=\"re0\">$b</span><span class=\"sy0\">-</span><span class=\"re0\">$h</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$sum1</span> <span class=\"sy0\">+=</span> f<span class=\"br0\">(</span><span class=\"re0\">$_</span> <span class=\"sy0\">+</span> <span class=\"re0\">$h2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$sum2</span> <span class=\"sy0\">+=</span> f<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"br0\">(</span><span class=\"re0\">$h</span> <span class=\"sy0\">/</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">4</span><span class=\"sy0\">*</span><span class=\"re0\">$sum1</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"re0\">$sum2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> tryem<span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"sy0\">,</span> <span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$exact</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>$f<span class=\"es0\">\\n</span>   in [$a..$b] / $n\"</span><span class=\"sy0\">;</span><br/>    EVAL <span class=\"st0\">\"my &amp;f = $f;<br/>    say '              exact result: ', $exact;<br/>    say '     rectangle method left: ', leftrect  &amp;f, $a, $b, $n;<br/>    say '    rectangle method right: ', rightrect &amp;f, $a, $b, $n;<br/>    say '      rectangle method mid: ', midrect   &amp;f, $a, $b, $n;<br/>    say 'composite trapezoidal rule: ', trapez    &amp;f, $a, $b, $n;<br/>    say '   quadratic simpsons rule: ', simpsons  &amp;f, $a, $b, $n;\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>tryem <span class=\"st_h\">'{ $_ ** 3 }'</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.25</span><span class=\"sy0\">;</span><br/>\u00a0<br/>tryem <span class=\"st_h\">'1 / *'</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"sy0\">,</span> <span class=\"kw3\">log</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>tryem <span class=\"st_h\">'*.self'</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span>_000<span class=\"sy0\">,</span> <span class=\"nu0\">5</span>_000_000<span class=\"sy0\">,</span> <span class=\"nu0\">12</span>_500_000<span class=\"sy0\">;</span><br/>\u00a0<br/>tryem <span class=\"st_h\">'*.self'</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span>_000<span class=\"sy0\">,</span> <span class=\"nu0\">6</span>_000_000<span class=\"sy0\">,</span> <span class=\"nu0\">18</span>_000_000<span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 74, "block": "<pre class=\"text highlighted_source\">function rect_left(integer rid, atom x, atom h)<br/>    if atom(h) then end if  -- suppress warning<br/>    return call_func(rid,{x})<br/>end function<br/>\u00a0<br/>function rect_mid(integer rid, atom x, atom h)<br/>    return call_func(rid,{x+h/2})<br/>end function<br/>\u00a0<br/>function rect_right(integer rid, atom x, atom h)<br/>    return call_func(rid,{x+h})<br/>end function<br/>\u00a0<br/>function trapezium(integer rid, atom x, atom h)<br/>    return (call_func(rid,{x})+call_func(rid,{x+h}))/2<br/>end function<br/>\u00a0<br/>function simpson(integer rid, atom x, atom h)<br/>    return (call_func(rid,{x})+4*call_func(rid,{x+h/2})+call_func(rid,{x+h}))/6<br/>end function<br/>\u00a0<br/>function cubed(atom x)<br/>    return power(x,3)<br/>end function<br/>\u00a0<br/>function recip(atom x)<br/>    return 1/x<br/>end function<br/>\u00a0<br/>function ident(atom x)<br/>    return x<br/>end function<br/>\u00a0<br/>function integrate(integer m_id, integer f_id, atom a, atom b, integer steps)<br/>atom accum = 0,<br/>     h = (b-a)/steps <br/>    for i=0 to steps-1 do<br/>        accum += call_func(m_id,{f_id,a+h*i,h})<br/>    end for<br/>    return h*accum<br/>end function<br/>\u00a0<br/>function smartp(atom N)<br/>string res<br/>    if N=floor(N) then return sprintf(\"%d\",N) end if<br/>    res = sprintf(\"%12f\",round(N,1000000))<br/>    if find('.',res) then<br/>        res = trim_tail(res,\"0\")<br/>        res = trim_tail(res,\".\")<br/>    end if<br/>    return res<br/>end function<br/>\u00a0<br/>procedure test(sequence tests)<br/>string name<br/>atom a, b, steps, rid<br/>    printf(1,\"Function     Range     Iterations       L-Rect       M-Rect       R-Rect      Trapeze      Simpson\\n\")<br/>    for i=1 to length(tests) do<br/>        {name,a,b,steps,rid} = tests[i]<br/>        printf(1,\" \u00a0%-5s\u00a0%6d -\u00a0%-5d\u00a0%10d \u00a0%12s\u00a0%12s\u00a0%12s\u00a0%12s\u00a0%12s\\n\",{name,a,b,steps,<br/>                            smartp(integrate(routine_id(\"rect_left\"),   rid,a,b,steps)),<br/>                            smartp(integrate(routine_id(\"rect_mid\"),    rid,a,b,steps)),<br/>                            smartp(integrate(routine_id(\"rect_right\"),  rid,a,b,steps)),<br/>                            smartp(integrate(routine_id(\"trapezium\"),   rid,a,b,steps)),<br/>                            smartp(integrate(routine_id(\"simpson\"),     rid,a,b,steps))})<br/>    end for<br/>end procedure<br/>\u00a0<br/>constant tests = {{\"x^3\", 0,    1,     100, routine_id(\"cubed\")},<br/>                  {\"1/x\", 1,  100,    1000, routine_id(\"recip\")},<br/>                  {\"x\",   0, 5000, 5000000, routine_id(\"ident\")},<br/>                  {\"x\",   0, 6000, 6000000, routine_id(\"ident\")}}<br/>\u00a0<br/>test(tests)</pre>"}, {"lang": "PL/I", "loc": 45, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>integrals: procedure options (main);<br/>\u00a0<br/>/* The function to be integrated */<br/>f: procedure (x) returns (float);<br/>   declare x float;<br/>   return (3*x**2 + 2*x);<br/>end f;<br/>\u00a0<br/>   declare (a, b) float;<br/>   declare (rect_area, trap_area, Simpson) float;<br/>   declare (d, dx) fixed decimal (10,2);<br/>   declare (l, r) float;<br/>   declare (S1, S2) float;<br/>\u00a0<br/>   l = 0; r = 5;<br/>   a = 0; b = 5; /* bounds of integration */<br/>   dx = 0.05;<br/>\u00a0<br/>   /* Rectangle method */<br/>   rect_area = 0;<br/>   do d = a to b by dx;<br/>      rect_area = rect_area + dx*f(d);<br/>   end;<br/>   put skip data (rect_area);<br/>\u00a0<br/>   /* trapezoid method */<br/>   trap_area = 0;<br/>   do d = a to b by dx;<br/>      trap_area = trap_area + dx*(f(d) + f(d+dx))/2;<br/>   end;<br/>   put skip data (trap_area);<br/>\u00a0<br/>   /* Simpson's */<br/>   S1 = f(a+dx/2);<br/>   S2 = 0;<br/>   do d = a to b by dx;<br/>      S1 = S1 + f(d+dx+dx/2);<br/>      S2 = S2 + f(d+dx);<br/>   end;<br/>   Simpson = dx * (f(a) + f(b) + 4*S1 + 2*S2) / 6;<br/>   put skip data (Simpson);<br/>\u00a0<br/>end integrals;<br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 32, "block": "<pre class=\"text highlighted_source\">(scl 6)<br/>\u00a0<br/>(de leftRect (Fun X)<br/>   (Fun X) )<br/>\u00a0<br/>(de rightRect (Fun X H)<br/>   (Fun (+ X H)) )<br/>\u00a0<br/>(de midRect (Fun X H)<br/>   (Fun (+ X (/ H 2))) )<br/>\u00a0<br/>(de trapezium (Fun X H)<br/>   (/ (+ (Fun X) (Fun (+ X H))) 2) )<br/>\u00a0<br/>(de simpson (Fun X H)<br/>   (*/<br/>      (+<br/>         (Fun X)<br/>         (* 4 (Fun (+ X (/ H 2))))<br/>         (Fun (+ X H)) )<br/>      6 ) )<br/>\u00a0<br/>(de square (X)<br/>   (*/ X X 1.0) )<br/>\u00a0<br/>(de integrate (Fun From To Steps Meth)<br/>   (let (H (/ (- To From) Steps)  Sum 0)<br/>      (for (X From  (&gt;= (- To H) X)  (+ X H))<br/>         (inc 'Sum (Meth Fun X H)) )<br/>      (*/ H Sum 1.0) ) )<br/>\u00a0<br/>(prinl (round (integrate square 3.0 7.0 30 simpson)))</pre>"}, {"lang": "PureBasic", "loc": 102, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Prototype</span>.d TestFunction<span class=\"br0\">(</span>Arg.d<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.d LeftIntegral<span class=\"br0\">(</span>Start, Stop, Steps, <span class=\"sy0\">*</span>func.TestFunction<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span>.d n<span class=\"sy0\">=</span><span class=\"br0\">(</span>Stop<span class=\"sy0\">-</span>Start<span class=\"br0\">)</span><span class=\"sy0\">/</span>Steps, sum, x<span class=\"sy0\">=</span>Start<br/>  <span class=\"kw1\">While</span> x <span class=\"sy0\">&lt;=</span> Stop<span class=\"sy0\">-</span>n<br/>    sum <span class=\"sy0\">+</span> n <span class=\"sy0\">*</span> <span class=\"sy0\">*</span>func<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    x <span class=\"sy0\">+</span> n<br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">ProcedureReturn</span> sum<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.d MidIntegral<span class=\"br0\">(</span>Start, Stop, Steps, <span class=\"sy0\">*</span>func.TestFunction<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span>.d n<span class=\"sy0\">=</span><span class=\"br0\">(</span>Stop<span class=\"sy0\">-</span>Start<span class=\"br0\">)</span><span class=\"sy0\">/</span>Steps, sum, x<span class=\"sy0\">=</span>Start<br/>  <span class=\"kw1\">While</span> x <span class=\"sy0\">&lt;=</span> Stop<span class=\"sy0\">-</span>n<br/>    sum <span class=\"sy0\">+</span> n <span class=\"sy0\">*</span> <span class=\"sy0\">*</span>func<span class=\"br0\">(</span>x<span class=\"sy0\">+</span>n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    x <span class=\"sy0\">+</span> n<br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">ProcedureReturn</span> sum<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.d RightIntegral<span class=\"br0\">(</span>Start, Stop, Steps, <span class=\"sy0\">*</span>func.TestFunction<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span>.d n<span class=\"sy0\">=</span><span class=\"br0\">(</span>Stop<span class=\"sy0\">-</span>Start<span class=\"br0\">)</span><span class=\"sy0\">/</span>Steps, sum, x<span class=\"sy0\">=</span>Start<br/>  <span class=\"kw1\">While</span> x <span class=\"sy0\">&lt;</span> Stop<br/>    x <span class=\"sy0\">+</span> n<br/>    sum <span class=\"sy0\">+</span> n <span class=\"sy0\">*</span> <span class=\"sy0\">*</span>func<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">ProcedureReturn</span> sum<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.d Trapezium<span class=\"br0\">(</span>Start, Stop, Steps, <span class=\"sy0\">*</span>func.TestFunction<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span>.d n<span class=\"sy0\">=</span><span class=\"br0\">(</span>Stop<span class=\"sy0\">-</span>Start<span class=\"br0\">)</span><span class=\"sy0\">/</span>Steps, sum, x<span class=\"sy0\">=</span>Start<br/>  <span class=\"kw1\">While</span> x<span class=\"sy0\">&lt;=</span>Stop<br/>    sum <span class=\"sy0\">+</span> n <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>func<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"sy0\">*</span>func<span class=\"br0\">(</span>x<span class=\"sy0\">+</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>    x<span class=\"sy0\">+</span>n<br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">ProcedureReturn</span> sum<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.d Simpson<span class=\"br0\">(</span>Start, Stop, Steps, <span class=\"sy0\">*</span>func.TestFunction<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span>.d n<span class=\"sy0\">=</span><span class=\"br0\">(</span>Stop<span class=\"sy0\">-</span>Start<span class=\"br0\">)</span><span class=\"sy0\">/</span>Steps, sum1, sum2, x<span class=\"sy0\">=</span>Start<br/>  <span class=\"kw1\">Protected</span> i<br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> steps<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    sum1<span class=\"sy0\">+</span> <span class=\"sy0\">*</span>func<span class=\"br0\">(</span>Start<span class=\"sy0\">+</span>n<span class=\"sy0\">*</span>i<span class=\"sy0\">+</span>n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> Steps<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    sum2<span class=\"sy0\">+</span> <span class=\"sy0\">*</span>func<span class=\"br0\">(</span>Start<span class=\"sy0\">+</span>n<span class=\"sy0\">*</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">ProcedureReturn</span> n <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>func<span class=\"br0\">(</span>Start<span class=\"br0\">)</span><span class=\"sy0\">+</span> <span class=\"sy0\">*</span>func<span class=\"br0\">(</span>Stop<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">4</span><span class=\"sy0\">*</span>sum1<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>sum2<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">6</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">;- Set up functions to integrate</span><br/><span class=\"kw1\">Procedure</span>.d Test1<span class=\"br0\">(</span>n.d<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> n<span class=\"sy0\">*</span>n<span class=\"sy0\">*</span>n  <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.d Test2<span class=\"br0\">(</span>n.d<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span>n  <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">; This function should be integrated as a integer function, but for </span><br/><span class=\"co1\">; comparably this will stay as a float.</span><br/><span class=\"kw1\">Procedure</span>.d Test3<span class=\"br0\">(</span>n.d<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> n<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">;- Test the code &amp; present the results</span><br/><span class=\"kw1\">CompilerIf</span> #PB_Compiler_Debugger<br/>  <span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Notice!\"</span>,<span class=\"st0\">\"Running this program in Debug-mode will be slow\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">CompilerEndIf</span><br/>\u00a0<br/><span class=\"co1\">; = 0.25</span><br/><span class=\"kw1\">Define</span> Answer$<br/>Answer$<span class=\"sy0\">=</span><span class=\"st0\">\"Left     =\"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>LeftIntegral <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">100</span>,@Test1<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<br/>Answer$<span class=\"sy0\">+</span><span class=\"st0\">\"Mid      =\"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>MidIntegral  <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">100</span>,@Test1<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<br/>Answer$<span class=\"sy0\">+</span><span class=\"st0\">\"Right    =\"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>RightIntegral<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">100</span>,@Test1<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<br/>Answer$<span class=\"sy0\">+</span><span class=\"st0\">\"Trapezium=\"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>Trapezium    <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">100</span>,@Test1<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<br/>Answer$<span class=\"sy0\">+</span><span class=\"st0\">\"Simpson  =\"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>Simpson      <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">100</span>,@Test1<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Answer should be 1/4\"</span>,Answer$<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; = Ln(100) e.g. ~4.60517019...</span><br/>Answer$<span class=\"sy0\">=</span><span class=\"st0\">\"Left     =\"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>LeftIntegral  <span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">100</span>,<span class=\"nu0\">1000</span>,@Test2<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<br/>Answer$<span class=\"sy0\">+</span><span class=\"st0\">\"Mid      =\"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>MidIntegral   <span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">100</span>,<span class=\"nu0\">1000</span>,@Test2<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<br/>Answer$<span class=\"sy0\">+</span><span class=\"st0\">\"Right    =\"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>RightIntegral <span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">100</span>,<span class=\"nu0\">1000</span>,@Test2<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<br/>Answer$<span class=\"sy0\">+</span><span class=\"st0\">\"Trapezium=\"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>Trapezium     <span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">100</span>,<span class=\"nu0\">1000</span>,@Test2<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<br/>Answer$<span class=\"sy0\">+</span><span class=\"st0\">\"Simpson  =\"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>Simpson       <span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">100</span>,<span class=\"nu0\">1000</span>,@Test2<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Answer should be Ln(100), e.g. ~4.60517019\"</span>,Answer$<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; 12,500,000</span><br/>Answer$<span class=\"sy0\">=</span><span class=\"st0\">\"Left     =\"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>LeftIntegral  <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">5000</span>,<span class=\"nu0\">5000000</span>,@Test3<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<br/>Answer$<span class=\"sy0\">+</span><span class=\"st0\">\"Mid      =\"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>MidIntegral   <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">5000</span>,<span class=\"nu0\">5000000</span>,@Test3<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<br/>Answer$<span class=\"sy0\">+</span><span class=\"st0\">\"Right    =\"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>RightIntegral <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">5000</span>,<span class=\"nu0\">5000000</span>,@Test3<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<br/>Answer$<span class=\"sy0\">+</span><span class=\"st0\">\"Trapezium=\"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>Trapezium     <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">5000</span>,<span class=\"nu0\">5000000</span>,@Test3<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<br/>Answer$<span class=\"sy0\">+</span><span class=\"st0\">\"Simpson  =\"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>Simpson       <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">5000</span>,<span class=\"nu0\">5000000</span>,@Test3<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Answer should be 12,500,000\"</span>,Answer$<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; 18,000,000</span><br/>Answer$<span class=\"sy0\">=</span><span class=\"st0\">\"Left     =\"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>LeftIntegral  <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">6000</span>,<span class=\"nu0\">6000000</span>,@Test3<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<br/>Answer$<span class=\"sy0\">+</span><span class=\"st0\">\"Mid      =\"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>MidIntegral   <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">6000</span>,<span class=\"nu0\">6000000</span>,@Test3<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<br/>Answer$<span class=\"sy0\">+</span><span class=\"st0\">\"Right    =\"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>RightIntegral <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">6000</span>,<span class=\"nu0\">6000000</span>,@Test3<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<br/>Answer$<span class=\"sy0\">+</span><span class=\"st0\">\"Trapezium=\"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>Trapezium     <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">6000</span>,<span class=\"nu0\">6000000</span>,@Test3<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>#CRLF$<br/>Answer$<span class=\"sy0\">+</span><span class=\"st0\">\"Simpson  =\"</span><span class=\"sy0\">+</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>Simpson       <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">6000</span>,<span class=\"nu0\">6000000</span>,@Test3<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Answer should be 18,000,000\"</span>,Answer$<span class=\"br0\">)</span> </pre>"}, {"lang": "Python", "loc": 55, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> fractions <span class=\"kw1\">import</span> Fraction<br/>\u00a0<br/><span class=\"kw1\">def</span> left_rect<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>h<span class=\"br0\">)</span>:<br/>  <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> mid_rect<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>h<span class=\"br0\">)</span>:<br/>  <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>x + h/<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> right_rect<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>h<span class=\"br0\">)</span>:<br/>  <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>x+h<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> trapezium<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>h<span class=\"br0\">)</span>:<br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> + f<span class=\"br0\">(</span>x+h<span class=\"br0\">)</span><span class=\"br0\">)</span>/<span class=\"nu0\">2.0</span><br/>\u00a0<br/><span class=\"kw1\">def</span> simpson<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>x<span class=\"sy0\">,</span>h<span class=\"br0\">)</span>:<br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> + <span class=\"nu0\">4</span>*f<span class=\"br0\">(</span>x + h/<span class=\"nu0\">2</span><span class=\"br0\">)</span> + f<span class=\"br0\">(</span>x+h<span class=\"br0\">)</span><span class=\"br0\">)</span>/<span class=\"nu0\">6.0</span><br/>\u00a0<br/><span class=\"kw1\">def</span> cube<span class=\"br0\">(</span>x<span class=\"br0\">)</span>:<br/>  <span class=\"kw1\">return</span> x*x*x<br/>\u00a0<br/><span class=\"kw1\">def</span> reciprocal<span class=\"br0\">(</span>x<span class=\"br0\">)</span>:<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>/x<br/>\u00a0<br/><span class=\"kw1\">def</span> identity<span class=\"br0\">(</span>x<span class=\"br0\">)</span>:<br/>  <span class=\"kw1\">return</span> x<br/>\u00a0<br/><span class=\"kw1\">def</span> integrate<span class=\"br0\">(</span> f<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> steps<span class=\"sy0\">,</span> meth<span class=\"br0\">)</span>:<br/>   h <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b-a<span class=\"br0\">)</span>/steps<br/>   ival <span class=\"sy0\">=</span> h * <span class=\"kw2\">sum</span><span class=\"br0\">(</span>meth<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> a+i*h<span class=\"sy0\">,</span> h<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>steps<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">return</span> ival  <br/>\u00a0<br/><span class=\"co1\"># Tests</span><br/><span class=\"kw1\">for</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> steps<span class=\"sy0\">,</span> func <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>.<span class=\"sy0\">,</span> <span class=\"nu0\">1</span>.<span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> cube<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>.<span class=\"sy0\">,</span> <span class=\"nu0\">100</span>.<span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"sy0\">,</span> reciprocal<span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> rule <span class=\"kw1\">in</span> <span class=\"br0\">(</span>left_rect<span class=\"sy0\">,</span> mid_rect<span class=\"sy0\">,</span> right_rect<span class=\"sy0\">,</span> trapezium<span class=\"sy0\">,</span> simpson<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%s integrated using\u00a0%s<span class=\"es0\">\\n</span>  from\u00a0%r to\u00a0%r (%i steps) =\u00a0%r'</span>\u00a0%<br/>              <span class=\"br0\">(</span>func.__name__<span class=\"sy0\">,</span> rule.__name__<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> steps<span class=\"sy0\">,</span><br/>               integrate<span class=\"br0\">(</span> func<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> steps<span class=\"sy0\">,</span> rule<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    a<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> Fraction.<span class=\"me1\">from_float</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">,</span> Fraction.<span class=\"me1\">from_float</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> rule <span class=\"kw1\">in</span> <span class=\"br0\">(</span>left_rect<span class=\"sy0\">,</span> mid_rect<span class=\"sy0\">,</span> right_rect<span class=\"sy0\">,</span> trapezium<span class=\"sy0\">,</span> simpson<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%s integrated using\u00a0%s<span class=\"es0\">\\n</span>  from\u00a0%r to\u00a0%r (%i steps and fractions) =\u00a0%r'</span>\u00a0%<br/>              <span class=\"br0\">(</span>func.__name__<span class=\"sy0\">,</span> rule.__name__<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> steps<span class=\"sy0\">,</span><br/>               <span class=\"kw2\">float</span><span class=\"br0\">(</span>integrate<span class=\"br0\">(</span> func<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> steps<span class=\"sy0\">,</span> rule<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Extra tests (compute intensive)</span><br/><span class=\"kw1\">for</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> steps<span class=\"sy0\">,</span> func <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>.<span class=\"sy0\">,</span> <span class=\"nu0\">5000</span>.<span class=\"sy0\">,</span> <span class=\"nu0\">5000000</span><span class=\"sy0\">,</span> identity<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                          <span class=\"br0\">(</span><span class=\"nu0\">0</span>.<span class=\"sy0\">,</span> <span class=\"nu0\">6000</span>.<span class=\"sy0\">,</span> <span class=\"nu0\">6000000</span><span class=\"sy0\">,</span> identity<span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> rule <span class=\"kw1\">in</span> <span class=\"br0\">(</span>left_rect<span class=\"sy0\">,</span> mid_rect<span class=\"sy0\">,</span> right_rect<span class=\"sy0\">,</span> trapezium<span class=\"sy0\">,</span> simpson<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%s integrated using\u00a0%s<span class=\"es0\">\\n</span>  from\u00a0%r to\u00a0%r (%i steps) =\u00a0%r'</span>\u00a0%<br/>              <span class=\"br0\">(</span>func.__name__<span class=\"sy0\">,</span> rule.__name__<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> steps<span class=\"sy0\">,</span><br/>               integrate<span class=\"br0\">(</span> func<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> steps<span class=\"sy0\">,</span> rule<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    a<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> Fraction.<span class=\"me1\">from_float</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">,</span> Fraction.<span class=\"me1\">from_float</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> rule <span class=\"kw1\">in</span> <span class=\"br0\">(</span>left_rect<span class=\"sy0\">,</span> mid_rect<span class=\"sy0\">,</span> right_rect<span class=\"sy0\">,</span> trapezium<span class=\"sy0\">,</span> simpson<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%s integrated using\u00a0%s<span class=\"es0\">\\n</span>  from\u00a0%r to\u00a0%r (%i steps and fractions) =\u00a0%r'</span>\u00a0%<br/>              <span class=\"br0\">(</span>func.__name__<span class=\"sy0\">,</span> rule.__name__<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> steps<span class=\"sy0\">,</span><br/>               <span class=\"kw2\">float</span><span class=\"br0\">(</span>integrate<span class=\"br0\">(</span> func<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> steps<span class=\"sy0\">,</span> rule<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 36, "block": "<pre class=\"text highlighted_source\">integrate.rect &lt;- function(f, a, b, n, k=0) {<br/>  #k = 0 for left, 1 for right, 0.5 for midpoint<br/>  h &lt;- (b-a)/n<br/>  x &lt;- seq(a, b, len=n+1)<br/>  sum(f(x[-1]-h*(1-k)))*h<br/>}<br/>\u00a0<br/>integrate.trapezoid &lt;- function(f, a, b, n) {<br/>  h &lt;- (b-a)/n<br/>  x &lt;- seq(a, b, len=n+1)<br/>  fx &lt;- f(x)<br/>  sum(fx[-1] + fx[-length(x)])*h/2<br/>}<br/>\u00a0<br/>integrate.simpsons &lt;- function(f, a, b, n) {<br/>  h &lt;- (b-a)/n <br/>  x &lt;- seq(a, b, len=n+1)<br/>  fx &lt;- f(x)<br/>  sum(fx[-length(x)] + 4*f(x[-1]-h/2) + fx[-1]) * h/6<br/>}<br/>\u00a0<br/>f1 &lt;- (function(x) {x^3})<br/>f2 &lt;- (function(x) {1/x})<br/>f3 &lt;- (function(x) {x})<br/>f4 &lt;- (function(x) {x})<br/>\u00a0<br/>integrate.simpsons(f1,0,1,100) #0.25<br/>integrate.simpsons(f2,1,100,1000) # 4.60517<br/>integrate.simpsons(f3,0,5000,5000000) # 12500000<br/>integrate.simpsons(f4,0,6000,6000000) # 1.8e+07<br/>\u00a0<br/>integrate.rect(f1,0,1,100,0) #TopLeft 0.245025<br/>integrate.rect(f1,0,1,100,0.5) #Mid 0.2499875<br/>integrate.rect(f1,0,1,100,1) #TopRight 0.255025<br/>\u00a0<br/>integrate.trapezoid(f1,0,1,100) # 0.250025</pre>"}, {"lang": "Racket", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (integrate f a b steps meth)<br/>  (define h (/ (- b a) steps))<br/>  (* h (for/sum ([i steps])<br/>         (meth f (+ a (* h i)) h))))<br/>\u00a0<br/>(define (left-rect f x h) (f x))<br/>(define (mid-rect f x h)  (f (+ x (/ h 2))))<br/>(define (right-rect f x h)(f (+ x h)))<br/>(define (trapezium f x h) (/ (+ (f x) (f (+ x h))) 2))<br/>(define (simpson f x h)   (/ (+ (f x) (* 4 (f (+ x (/ h 2)))) (f (+ x h))) 6))<br/>\u00a0<br/>(define (test f a b s n)<br/>  (displayln n)<br/>  (for ([meth (list left-rect mid-rect right-rect trapezium simpson)]<br/>        [name '(    left-rect mid-rect right-rect trapezium simpson)])<br/>    (displayln (~a name \":\\t\" (integrate f a b s meth))))<br/>  (newline))<br/>\u00a0<br/>(test (\u03bb(x) (* x x x)) 0.    1.     100 \"CUBED\")<br/>(test (\u03bb(x) (/ x))     1.  100.    1000 \"RECIPROCAL\")<br/>(test (\u03bb(x) x)         0. 5000. 5000000 \"IDENTITY\")<br/>(test (\u03bb(x) x)         0. 6000. 6000000 \"IDENTITY\")<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 47, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm performs numerical integration using 5 different algorithms and show results.*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">20</span>                                <span class=\"coMULTI\">/*use twenty decimal digits precision. */</span><br/>\u00a0<br/>     <span class=\"kw1\">do</span> test=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">4</span>                            <span class=\"coMULTI\">/*perform the 4 different test suites. */</span><br/>     <span class=\"kw1\">if</span> test==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  L=<span class=\"nu0\">0</span>;   H=   <span class=\"nu0\">1</span>;   i=    <span class=\"nu0\">100</span>;   <span class=\"kw3\">end</span><br/>     <span class=\"kw1\">if</span> test==<span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  L=<span class=\"nu0\">1</span>;   H= <span class=\"nu0\">100</span>;   i=   <span class=\"nu0\">1000</span>;   <span class=\"kw3\">end</span><br/>     <span class=\"kw1\">if</span> test==<span class=\"nu0\">3</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  L=<span class=\"nu0\">0</span>;   H=<span class=\"nu0\">5000</span>;   i=<span class=\"nu0\">5000000</span>;   <span class=\"kw3\">end</span><br/>     <span class=\"kw1\">if</span> test==<span class=\"nu0\">4</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  L=<span class=\"nu0\">0</span>;   H=<span class=\"nu0\">6000</span>;   i=<span class=\"nu0\">5000000</span>;   <span class=\"kw3\">end</span><br/>     <span class=\"kw1\">say</span><br/>     <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'test'</span> test,<span class=\"nu0\">65</span>,<span class=\"st0\">'\u2500'</span><span class=\"br0\">)</span>              <span class=\"coMULTI\">/*display a header for the test suite. */</span><br/>     <span class=\"kw1\">say</span> <span class=\"st0\">'      left rectangular('</span>L<span class=\"st0\">\", \"</span>H<span class=\"st0\">', '</span>i<span class=\"st0\">\")  \u2500\u2500\u25ba \"</span>        left_rect<span class=\"br0\">(</span>L, H, i<span class=\"br0\">)</span><br/>     <span class=\"kw1\">say</span> <span class=\"st0\">'  midpoint rectangular('</span>L<span class=\"st0\">\", \"</span>H<span class=\"st0\">', '</span>i<span class=\"st0\">\")  \u2500\u2500\u25ba \"</span>    midpoint_rect<span class=\"br0\">(</span>L, H, i<span class=\"br0\">)</span><br/>     <span class=\"kw1\">say</span> <span class=\"st0\">'     right rectangular('</span>L<span class=\"st0\">\", \"</span>H<span class=\"st0\">', '</span>i<span class=\"st0\">\")  \u2500\u2500\u25ba \"</span>       right_rect<span class=\"br0\">(</span>L, H, i<span class=\"br0\">)</span><br/>     <span class=\"kw1\">say</span> <span class=\"st0\">'               Simpson('</span>L<span class=\"st0\">\", \"</span>H<span class=\"st0\">', '</span>i<span class=\"st0\">\")  \u2500\u2500\u25ba \"</span>          Simpson<span class=\"br0\">(</span>L, H, i<span class=\"br0\">)</span><br/>     <span class=\"kw1\">say</span> <span class=\"st0\">'             trapezium('</span>L<span class=\"st0\">\", \"</span>H<span class=\"st0\">', '</span>i<span class=\"st0\">\")  \u2500\u2500\u25ba \"</span>        trapezium<span class=\"br0\">(</span>L, H, i<span class=\"br0\">)</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*test*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>f:   <span class=\"kw1\">if</span> test==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">3</span>           <span class=\"coMULTI\">/*choose the    cube     function.     */</span><br/>     <span class=\"kw1\">if</span> test==<span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>            <span class=\"coMULTI\">/*   \"    \"  reciprocal     \"          */</span><br/>                      <span class=\"kw1\">return</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>              <span class=\"coMULTI\">/*   \"    \"    \"as-is\"      \"          */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>left_rect:     <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> test;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> a,b,n;              h=<span class=\"br0\">(</span>b-a<span class=\"br0\">)</span><span class=\"sy0\">/</span>n<br/>               $=<span class=\"nu0\">0</span><br/>                               <span class=\"kw1\">do</span> x=a  <span class=\"kw2\">by</span> h  <span class=\"kw2\">for</span> n;      $=$+f<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;   <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*x*/</span><br/>               <span class=\"kw1\">return</span> $<span class=\"sy0\">*</span>h<span class=\"sy0\">/</span><span class=\"nu0\">1</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>midpoint_rect: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> test;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> a,b,n;              h=<span class=\"br0\">(</span>b-a<span class=\"br0\">)</span><span class=\"sy0\">/</span>n<br/>               $=<span class=\"nu0\">0</span><br/>                               <span class=\"kw1\">do</span> x=a+h<span class=\"sy0\">/</span><span class=\"nu0\">2</span>  <span class=\"kw2\">by</span> h  <span class=\"kw2\">for</span> n;  $=$+f<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;   <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*x*/</span><br/>               <span class=\"kw1\">return</span> $<span class=\"sy0\">*</span>h<span class=\"sy0\">/</span><span class=\"nu0\">1</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>right_rect:    <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> test;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> a,b,n;              h=<span class=\"br0\">(</span>b-a<span class=\"br0\">)</span><span class=\"sy0\">/</span>n<br/>               $=<span class=\"nu0\">0</span><br/>                               <span class=\"kw1\">do</span> x=a+h    <span class=\"kw2\">by</span> h  <span class=\"kw2\">for</span> n;  $=$+f<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;   <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*x*/</span><br/>               <span class=\"kw1\">return</span> $<span class=\"sy0\">*</span>h<span class=\"sy0\">/</span><span class=\"nu0\">1</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>Simpson:       <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> test;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> a,b,n;              h=<span class=\"br0\">(</span>b-a<span class=\"br0\">)</span><span class=\"sy0\">/</span>n<br/>               $=f<span class=\"br0\">(</span>a+h<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>               @=<span class=\"nu0\">0</span>;            <span class=\"kw1\">do</span> x=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n-<span class=\"nu0\">1</span>; $=$+f<span class=\"br0\">(</span>a+h<span class=\"sy0\">*</span>x+h<span class=\"sy0\">*.</span>5<span class=\"br0\">)</span>; @<a class=\"__cf_email__\" data-cfemail=\"c9f489\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+f<span class=\"br0\">(</span>a+x<span class=\"sy0\">*</span>h<span class=\"br0\">)</span>; <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*x*/</span><br/>\u00a0<br/>               <span class=\"kw1\">return</span> h<span class=\"sy0\">*</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span>a<span class=\"br0\">)</span> + f<span class=\"br0\">(</span>b<span class=\"br0\">)</span> + <span class=\"nu0\">4</span><span class=\"sy0\">*</span>$ + <span class=\"nu0\">2</span><span class=\"sy0\">*</span>@<span class=\"br0\">)</span>  <span class=\"sy0\">/</span>  <span class=\"nu0\">6</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>trapezium:     <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> test;   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> a,b,n;              h=<span class=\"br0\">(</span>b-a<span class=\"br0\">)</span><span class=\"sy0\">/</span>n<br/>               $=<span class=\"nu0\">0</span><br/>                               <span class=\"kw1\">do</span> x=a  <span class=\"kw2\">by</span> h  <span class=\"kw2\">for</span> n;      $=$+<span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span>+f<span class=\"br0\">(</span>x+h<span class=\"br0\">)</span><span class=\"br0\">)</span>;  <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*x*/</span><br/>               <span class=\"kw1\">return</span> $<span class=\"sy0\">*</span>h<span class=\"sy0\">/</span><span class=\"nu0\">2</span></pre>"}, {"lang": "Ring", "loc": 87, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Numerical integration<br/>\u00a0<br/>decimals(8)<br/>data = [[\"pow(x,3)\",0,1,100], [\"1/x\",1, 100,1000], [\"x\",0,5000,5000000], [\"x\",0,6000,6000000]]<br/>see \"Function   Range   L-Rect   R-Rect   M-Rect   Trapeze   Simpson\" + nl<br/>for p = 1 to 4<br/>     d1 = data[p][1]<br/>     d2 = data[p][2]<br/>     d3 = data[p][3]<br/>     d4 = data[p][4]<br/>     see \"\" + d1 + \"   \" + d2  + \" - \" + d3  + \"   \" + lrect(d1, d2, d3, d4) + \"   \" + rrect(d1, d2, d3, d4) <br/>     see \"  \" + mrect(d1, d2, d3, d4) + \"   \" + trapeze(d1, d2, d3, d4) + \"   \" + simpson(d1, d2, d3, d4) + nl<br/>next<br/>\u00a0<br/>func lrect(x2, a, b, n)<br/>       s = 0<br/>       d = (b - a) / n<br/>       x = a<br/>       for i = 1 to n<br/>       eval(\"result = \" + x2)       <br/>            s = s + d * result<br/>            x = x + d<br/>       next<br/>       return s<br/>\u00a0<br/>func rrect(x2, a, b, n)<br/>       s = 0<br/>       d = (b - a) / n<br/>       x = a<br/>       for i = 1 to n<br/>            x = x + d<br/>            eval(\"result = \" + x2)  <br/>            s = s + d *result<br/>       next<br/>       return s<br/>\u00a0<br/>func mrect(x2, a, b, n)<br/>       s = 0<br/>       d = (b - a) / n<br/>       x = a<br/>       for i = 1 to n<br/>            x = x + d/2<br/>            eval(\"result = \" + x2)  <br/>            s = s + d * result<br/>            x =  x +d/2<br/>       next<br/>       return s<br/>\u00a0<br/>func trapeze(x2, a, b, n)<br/>       s = 0<br/>       d = (b - a) / n<br/>       x = b<br/>       eval(\"result = \" + x2)  <br/>       f = result<br/>       x = a<br/>       eval(\"result = \" + x2)<br/>       s = d * (f + result) / 2<br/>       for i = 1 to n-1<br/>            x = x + d<br/>           eval(\"result = \" + x2)<br/>            s = s + d * result<br/>       next<br/>       return s<br/>\u00a0<br/>func simpson(x2, a, b, n)<br/>        s1 = 0<br/>        s = 0<br/>        d = (b - a) / n<br/>        x = b <br/>        eval(\"result = \" + x2)  <br/>        f = result<br/>        x = a + d/2 <br/>       eval(\"result = \" + x2)<br/>        s1 = result<br/>        for i = 1 to n-1<br/>            x = x + d/2<br/>            eval(\"result = \" + x2)<br/>            s = s + result<br/>            x = x + d/2<br/>            eval(\"result = \" + x2)<br/>            s1 = s1 + result<br/>        next<br/>        x = a<br/>        eval(\"result = \" + x2)<br/>        return (d / 6) * (f + result + 4 * s1 + 2 * s)<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 58, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> leftrect<span class=\"br0\">(</span>f, left, right<span class=\"br0\">)</span><br/>  f.<span class=\"me1\">call</span><span class=\"br0\">(</span>left<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> midrect<span class=\"br0\">(</span>f, left, right<span class=\"br0\">)</span><br/>  f.<span class=\"me1\">call</span><span class=\"br0\">(</span><span class=\"br0\">(</span>left<span class=\"sy0\">+</span>right<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> rightrect<span class=\"br0\">(</span>f, left, right<span class=\"br0\">)</span><br/>  f.<span class=\"me1\">call</span><span class=\"br0\">(</span>right<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> trapezium<span class=\"br0\">(</span>f, left, right<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>f.<span class=\"me1\">call</span><span class=\"br0\">(</span>left<span class=\"br0\">)</span> <span class=\"sy0\">+</span> f.<span class=\"me1\">call</span><span class=\"br0\">(</span>right<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2.0</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> simpson<span class=\"br0\">(</span>f, left, right<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>f.<span class=\"me1\">call</span><span class=\"br0\">(</span>left<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">4</span><span class=\"sy0\">*</span>f.<span class=\"me1\">call</span><span class=\"br0\">(</span><span class=\"br0\">(</span>left<span class=\"sy0\">+</span>right<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> f.<span class=\"me1\">call</span><span class=\"br0\">(</span>right<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">6.0</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> integrate<span class=\"br0\">(</span>f, a, b, steps, method<span class=\"br0\">)</span><br/>  delta = <span class=\"nu0\">1.0</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> steps<br/>  total = <span class=\"nu0\">0.0</span><br/>  steps.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>    left = a <span class=\"sy0\">+</span> i<span class=\"sy0\">*</span>delta<br/>    right = left <span class=\"sy0\">+</span> delta<br/>    total <span class=\"sy0\">+</span>= delta <span class=\"sy0\">*</span> send<span class=\"br0\">(</span>method, f, left, right<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  total<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> square<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  x<span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> def_int<span class=\"br0\">(</span>f, a, b<span class=\"br0\">)</span><br/>  l = <span class=\"kw1\">case</span> f.<span class=\"me1\">to_s</span><br/>      <span class=\"kw1\">when</span> <span class=\"sy0\">/</span>sin<span class=\"sy0\">&gt;/</span><br/>        <span class=\"kw3\">lambda</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> <span class=\"sy0\">-</span><span class=\"kw4\">Math</span>.<span class=\"me1\">cos</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>      <span class=\"kw1\">when</span> <span class=\"sy0\">/</span>square<span class=\"sy0\">&gt;/</span><br/>        <span class=\"kw3\">lambda</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> <span class=\"br0\">(</span>x<span class=\"sy0\">**</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">3.0</span><span class=\"br0\">}</span><br/>      <span class=\"kw1\">end</span><br/>  l.<span class=\"me1\">call</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"sy0\">-</span> l.<span class=\"me1\">call</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>a = <span class=\"nu0\">0</span><br/>b = <span class=\"kw4\">Math</span>::PI<br/>steps = <span class=\"nu0\">10</span><br/>\u00a0<br/><span class=\"kw1\">for</span> func <span class=\"kw1\">in</span> <span class=\"br0\">[</span>method<span class=\"br0\">(</span><span class=\"re3\">:square</span><span class=\"br0\">)</span>, <span class=\"kw4\">Math</span>.<span class=\"me1\">method</span><span class=\"br0\">(</span><span class=\"re3\">:sin</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"integral of #{func} from #{a} to #{b} in #{steps} steps\"</span><br/>  actual = def_int<span class=\"br0\">(</span>func, a, b<span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> method <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"re3\">:leftrect</span>, <span class=\"re3\">:midrect</span>, <span class=\"re3\">:rightrect</span>, <span class=\"re3\">:trapezium</span>, <span class=\"re3\">:simpson</span><span class=\"br0\">]</span><br/>    int = integrate<span class=\"br0\">(</span>func, a, b, steps, method<span class=\"br0\">)</span><br/>    diff = <span class=\"br0\">(</span>int <span class=\"sy0\">-</span> actual<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100.0</span> <span class=\"sy0\">/</span> actual<br/>    <span class=\"kw3\">printf</span> <span class=\"st0\">\"  \u00a0%-10s \u00a0%s<span class=\"es0\">\\t</span>(%.1f%%)<span class=\"es0\">\\n</span>\"</span>, method, int, diff<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 20, "block": "<pre class=\"text highlighted_source\">fn integral&lt;F&gt;(f: F, range: std::ops::Range&lt;f64&gt;, n_steps: u32) -&gt; f64<br/>    where F: Fn(f64) -&gt; f64<br/>{<br/>    let step_size = (range.end - range.start)/n_steps as f64;<br/>\u00a0<br/>    let mut integral = (f(range.start) + f(range.end))/2.;<br/>    let mut pos = range.start + step_size;<br/>    while pos &lt; range.end {<br/>        integral += f(pos);<br/>        pos += step_size;<br/>    }<br/>    integral * step_size<br/>}<br/>\u00a0<br/>fn main() {<br/>    println!(\"{}\", integral(|x| x.powi(3), 0.0..1.0, 100));<br/>    println!(\"{}\", integral(|x| 1.0/x, 1.0..100.0, 1000));<br/>    println!(\"{}\", integral(|x| x, 0.0..5000.0, 5_000_000));<br/>    println!(\"{}\", integral(|x| x, 0.0..6000.0, 6_000_000));<br/>}</pre>"}, {"lang": "Scala", "loc": 35, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> NumericalIntegration <span class=\"br0\">{</span>  <br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> leftRect<span class=\"br0\">(</span>f<span class=\"sy0\">:</span>Double<span class=\"sy0\">=&gt;</span>Double, a<span class=\"sy0\">:</span>Double, b<span class=\"sy0\">:</span>Double<span class=\"br0\">)</span><span class=\"sy0\">=</span>f<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> midRect<span class=\"br0\">(</span>f<span class=\"sy0\">:</span>Double<span class=\"sy0\">=&gt;</span>Double, a<span class=\"sy0\">:</span>Double, b<span class=\"sy0\">:</span>Double<span class=\"br0\">)</span><span class=\"sy0\">=</span>f<span class=\"br0\">(</span><span class=\"br0\">(</span>a+b<span class=\"br0\">)</span>/<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> rightRect<span class=\"br0\">(</span>f<span class=\"sy0\">:</span>Double<span class=\"sy0\">=&gt;</span>Double, a<span class=\"sy0\">:</span>Double, b<span class=\"sy0\">:</span>Double<span class=\"br0\">)</span><span class=\"sy0\">=</span>f<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> trapezoid<span class=\"br0\">(</span>f<span class=\"sy0\">:</span>Double<span class=\"sy0\">=&gt;</span>Double, a<span class=\"sy0\">:</span>Double, b<span class=\"sy0\">:</span>Double<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span>a<span class=\"br0\">)</span>+f<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span>/<span class=\"nu0\">2</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> simpson<span class=\"br0\">(</span>f<span class=\"sy0\">:</span>Double<span class=\"sy0\">=&gt;</span>Double, a<span class=\"sy0\">:</span>Double, b<span class=\"sy0\">:</span>Double<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span>a<span class=\"br0\">)</span>+<span class=\"nu0\">4</span><span class=\"sy0\">*</span>f<span class=\"br0\">(</span><span class=\"br0\">(</span>a+b<span class=\"br0\">)</span>/<span class=\"nu0\">2</span><span class=\"br0\">)</span>+f<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span>/<span class=\"nu0\">6</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> fn1<span class=\"br0\">(</span>x<span class=\"sy0\">:</span>Double<span class=\"br0\">)</span><span class=\"sy0\">=</span>x<span class=\"sy0\">*</span>x<span class=\"sy0\">*</span>x<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> fn2<span class=\"br0\">(</span>x<span class=\"sy0\">:</span>Double<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span>/x<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> fn3<span class=\"br0\">(</span>x<span class=\"sy0\">:</span>Double<span class=\"br0\">)</span><span class=\"sy0\">=</span>x<br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">type</span></a> Method <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Double<span class=\"sy0\">=&gt;</span>Double, Double, Double<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Double <br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> integrate<span class=\"br0\">(</span>f<span class=\"sy0\">:</span>Double<span class=\"sy0\">=&gt;</span>Double, a<span class=\"sy0\">:</span>Double, b<span class=\"sy0\">:</span>Double, steps<span class=\"sy0\">:</span>Double, m<span class=\"sy0\">:</span>Method<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> delta<span class=\"sy0\">:</span>Double<span class=\"sy0\">=</span><span class=\"br0\">(</span>b-a<span class=\"br0\">)</span>/steps<br/>    delta<span class=\"sy0\">*</span><span class=\"br0\">(</span>a until b by delta<span class=\"br0\">)</span>.<span class=\"me1\">foldLeft</span><span class=\"br0\">(</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>s,x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> s+m<span class=\"br0\">(</span>f, x, x+delta<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> print<span class=\"br0\">(</span>f<span class=\"sy0\">:</span>Double<span class=\"sy0\">=&gt;</span>Double, a<span class=\"sy0\">:</span>Double, b<span class=\"sy0\">:</span>Double, steps<span class=\"sy0\">:</span>Double<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"rectangular left  \u00a0:\u00a0%f\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>integrate<span class=\"br0\">(</span>f, a, b, steps, leftRect<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"rectangular middle\u00a0:\u00a0%f\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>integrate<span class=\"br0\">(</span>f, a, b, steps, midRect<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"rectangular right \u00a0:\u00a0%f\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>integrate<span class=\"br0\">(</span>f, a, b, steps, rightRect<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"trapezoid         \u00a0:\u00a0%f\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>integrate<span class=\"br0\">(</span>f, a, b, steps, trapezoid<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"simpson           \u00a0:\u00a0%f\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>integrate<span class=\"br0\">(</span>f, a, b, steps, simpson<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    print<span class=\"br0\">(</span>fn1, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"------\"</span><span class=\"br0\">)</span><br/>    print<span class=\"br0\">(</span>fn2, <span class=\"nu0\">1</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"------\"</span><span class=\"br0\">)</span><br/>    print<span class=\"br0\">(</span>fn3, <span class=\"nu0\">0</span>, <span class=\"nu0\">5000</span>, <span class=\"nu0\">5000000</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"------\"</span><span class=\"br0\">)</span><br/>    print<span class=\"br0\">(</span>fn3, <span class=\"nu0\">0</span>, <span class=\"nu0\">6000</span>, <span class=\"nu0\">6000000</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 21, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>integrate <span class=\"kw1\">f</span> a b steps meth<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> h <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> b a<span class=\"br0\">)</span> steps<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">*</span> h<br/>     <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">s</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> i steps<span class=\"br0\">)</span><br/>           <span class=\"kw1\">s</span><br/>           <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"sy0\">+</span> i <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"kw1\">s</span> <span class=\"br0\">(</span>meth <span class=\"kw1\">f</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> a <span class=\"br0\">(</span><span class=\"sy0\">*</span> h i<span class=\"br0\">)</span><span class=\"br0\">)</span> h<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>left<span class=\"sy0\">-</span>rect <span class=\"kw1\">f</span> x h<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">f</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>mid<span class=\"sy0\">-</span>rect <span class=\"kw1\">f</span> x h<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">f</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> x <span class=\"br0\">(</span><span class=\"sy0\">/</span> h <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>right<span class=\"sy0\">-</span>rect <span class=\"kw1\">f</span> x h<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">f</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> x h<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>trapezium <span class=\"kw1\">f</span> x h<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">f</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">f</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> x h<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>simpson <span class=\"kw1\">f</span> x h<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">f</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">4</span> <span class=\"br0\">(</span><span class=\"kw1\">f</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> x <span class=\"br0\">(</span><span class=\"sy0\">/</span> h <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">f</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> x h<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>square x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> x x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> rl <span class=\"br0\">(</span>integrate square <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">10</span> left<span class=\"sy0\">-</span>rect<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> rm <span class=\"br0\">(</span>integrate square <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">10</span> mid<span class=\"sy0\">-</span>rect<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> rr <span class=\"br0\">(</span>integrate square <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">10</span> right<span class=\"sy0\">-</span>rect<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">t</span> <span class=\"br0\">(</span>integrate square <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">10</span> trapezium<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">s</span> <span class=\"br0\">(</span>integrate square <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">10</span> simpson<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 54, "block": "<pre class=\"ruby highlighted_source\">func sum<span class=\"br0\">(</span>f, start, from, to<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var s = <span class=\"nu0\">0</span>;<br/>    RangeNum<span class=\"br0\">(</span>start, to, from<span class=\"sy0\">-</span>start<span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>        s <span class=\"sy0\">+</span>= f<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">return</span> s<br/><span class=\"br0\">}</span><br/>\u00a0<br/>func leftrect<span class=\"br0\">(</span>f, a, b, n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var h = <span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<span class=\"br0\">)</span>;<br/>    h <span class=\"sy0\">*</span> sum<span class=\"br0\">(</span>f, a, a<span class=\"sy0\">+</span>h, b<span class=\"sy0\">-</span>h<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>func rightrect<span class=\"br0\">(</span>f, a, b, n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var h = <span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<span class=\"br0\">)</span>;<br/>    h <span class=\"sy0\">*</span> sum<span class=\"br0\">(</span>f, a<span class=\"sy0\">+</span>h, a <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>h, b<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>func midrect<span class=\"br0\">(</span>f, a, b, n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var h = <span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<span class=\"br0\">)</span>;<br/>    h <span class=\"sy0\">*</span> sum<span class=\"br0\">(</span>f, a <span class=\"sy0\">+</span> h<span class=\"sy0\">/</span><span class=\"nu0\">2</span>, a <span class=\"sy0\">+</span> h <span class=\"sy0\">+</span> h<span class=\"sy0\">/</span><span class=\"nu0\">2</span>, b <span class=\"sy0\">-</span> h<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func trapez<span class=\"br0\">(</span>f, a, b, n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var h = <span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<span class=\"br0\">)</span>;<br/>    h<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"sy0\">+</span> sum<span class=\"br0\">(</span><span class=\"br0\">{</span> f<span class=\"br0\">(</span>_<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span> <span class=\"br0\">}</span>, a<span class=\"sy0\">+</span>h, a <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>h, b<span class=\"sy0\">-</span>h<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>func simpsons<span class=\"br0\">(</span>f, a, b, n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var h = <span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> n<span class=\"br0\">)</span>;<br/>    var h2 = h<span class=\"sy0\">/</span><span class=\"nu0\">2</span>;<br/>\u00a0<br/>    var sum1 = f<span class=\"br0\">(</span>a <span class=\"sy0\">+</span> h2<span class=\"br0\">)</span>;<br/>    var sum2 = <span class=\"nu0\">0</span>;<br/>\u00a0<br/>    sum<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> sum1 <span class=\"sy0\">+</span>= f<span class=\"br0\">(</span>i <span class=\"sy0\">+</span> h2<span class=\"br0\">)</span>; sum2 <span class=\"sy0\">+</span>= f<span class=\"br0\">(</span>i<span class=\"br0\">)</span>; <span class=\"nu0\">0</span> <span class=\"br0\">}</span>, a<span class=\"sy0\">+</span>h, a<span class=\"sy0\">+</span>h<span class=\"sy0\">+</span>h, b<span class=\"sy0\">-</span>h<span class=\"br0\">)</span>;<br/>    h<span class=\"sy0\">/</span><span class=\"nu0\">6</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>f<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">4</span><span class=\"sy0\">*</span>sum1 <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>sum2<span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>func tryem<span class=\"br0\">(</span>label, f, a, b, n, exact<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    say <span class=\"st0\">\"<span class=\"es0\">\\n</span>#{label}<span class=\"es0\">\\n</span>   in [#{a}..#{b}] / #{n}\"</span>;<br/>\u00a0<br/>    say<span class=\"br0\">(</span><span class=\"st0\">'              exact result: '</span>, exact<span class=\"br0\">)</span>;<br/>    say<span class=\"br0\">(</span><span class=\"st0\">'     rectangle method left: '</span>, leftrect<span class=\"br0\">(</span>f, a, b, n<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    say<span class=\"br0\">(</span><span class=\"st0\">'    rectangle method right: '</span>, rightrect<span class=\"br0\">(</span>f, a, b, n<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    say<span class=\"br0\">(</span><span class=\"st0\">'      rectangle method mid: '</span>, midrect<span class=\"br0\">(</span>f, a, b, n<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    say<span class=\"br0\">(</span><span class=\"st0\">'composite trapezoidal rule: '</span>, trapez<span class=\"br0\">(</span>f, a, b, n<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    say<span class=\"br0\">(</span><span class=\"st0\">'   quadratic simpsons rule: '</span>, simpsons<span class=\"br0\">(</span>f, a, b, n<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>tryem<span class=\"br0\">(</span><span class=\"st0\">'x^3'</span>, <span class=\"br0\">{</span> _ <span class=\"sy0\">**</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">0.25</span><span class=\"br0\">)</span>;<br/>tryem<span class=\"br0\">(</span><span class=\"st0\">'1/x'</span>, <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> _ <span class=\"br0\">}</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">1000</span>, log<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>tryem<span class=\"br0\">(</span><span class=\"st0\">'x'</span>, <span class=\"br0\">{</span> _ <span class=\"br0\">}</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">5</span>_000, <span class=\"nu0\">5</span>_000_000, <span class=\"nu0\">12</span>_500_000<span class=\"br0\">)</span>;<br/>tryem<span class=\"br0\">(</span><span class=\"st0\">'x'</span>, <span class=\"br0\">{</span> _ <span class=\"br0\">}</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">6</span>_000, <span class=\"nu0\">6</span>_000_000, <span class=\"nu0\">18</span>_000_000<span class=\"br0\">)</span>;</pre>"}, {"lang": "SequenceL", "loc": 60, "block": "<pre class=\"text highlighted_source\">import &lt;Utilities/Conversion.sl&gt;;<br/>import &lt;Utilities/Sequence.sl&gt;;<br/>\u00a0<br/>integrateLeft(f, a, b, n)\u00a0:=<br/>    let<br/>        h\u00a0:= (b - a) / n;<br/>        vals[x]\u00a0:= f(x) foreach x within (0 ... (n-1)) * h + a; <br/>    in<br/>        h * sum(vals);<br/>\u00a0<br/>integrateRight(f, a, b, n)\u00a0:=<br/>    let<br/>        h\u00a0:= (b - a) / n;<br/>        vals[x]\u00a0:= f(x+h) foreach x within (0 ... (n-1)) * h + a; <br/>    in<br/>        h * sum(vals);<br/>\u00a0<br/>integrateMidpoint(f, a, b, n)\u00a0:=<br/>    let<br/>        h\u00a0:= (b - a) / n;<br/>        vals[x]\u00a0:= f(x+h/2.0) foreach x within (0 ... (n-1)) * h + a; <br/>    in<br/>        h * sum(vals);<br/>\u00a0<br/>integrateTrapezium(f, a, b, n)\u00a0:=<br/>    let<br/>        h\u00a0:= (b - a) / n;<br/>        vals[i]\u00a0:= 2.0 * f(a + i * h) foreach i within 1 ... n-1; <br/>    in<br/>        h * (sum(vals) + f(a) + f(b)) / 2.0;<br/>\u00a0<br/>integrateSimpsons(f, a, b, n)\u00a0:=<br/>    let<br/>        h\u00a0:= (b - a) / n;<br/>        vals1[i]\u00a0:= f(a + h * i + h / 2.0) foreach i within 0 ... n-1;<br/>        vals2[i]\u00a0:=  f(a + h * i) foreach i within 1 ... n-1;<br/>    in<br/>        h / 6.0 * (f(a) + f(b) + 4.0 * sum(vals1) + 2.0 * sum(vals2));<br/>\u00a0<br/>xCubed(x)\u00a0:= x^3;<br/>xInverse(x)\u00a0:= 1/x;<br/>identity(x)\u00a0:= x;<br/>\u00a0<br/>tests[method]\u00a0:= <br/>    [method(xCubed, 0.0, 1.0, 100),<br/>     method(xInverse, 1.0, 100.0, 1000),<br/>     method(identity, 0.0, 5000.0, 5000000),<br/>     method(identity, 0.0, 6000.0, 6000000)]<br/>     foreach method within [integrateLeft, integrateRight, integrateMidpoint, integrateTrapezium, integrateSimpsons];<br/>\u00a0<br/>//String manipulation for ouput display.<br/>main\u00a0:= <br/>    let<br/>        heading\u00a0:= [[\"Func\", \"Range\\t\", \"L-Rect\\t\", \"R-Rect\\t\", \"M-Rect\\t\", \"Trapezium\", \"Simpson\"]];<br/>        ranges\u00a0:= [[\"0 - 1\\t\", \"1 - 100\\t\", \"0 - 5000\", \"0 - 6000\"]];<br/>        funcs\u00a0:= [[\"x^3\", \"1/x\", \"x\", \"x\"]];<br/>    in<br/>        delimit(delimit(heading ++ transpose(funcs ++ ranges ++ trimEndZeroes(floatToString(tests, 8))), '\\t'), '\\n');<br/>\u00a0<br/>trimEndZeroes(x(1))\u00a0:= x when size(x) = 0 else x when x[size(x)] /= '0' else trimEndZeroes(x[1...size(x)-1]);</pre>"}, {"lang": "Standard ML", "loc": 23, "block": "<pre class=\"text highlighted_source\">fun integrate (f, a, b, steps, meth) = let<br/>  val h = (b - a) / real steps<br/>  fun helper (i, s) =<br/>    if i &gt;= steps then s<br/>    else helper (i+1, s + meth (f, a + h * real i, h))<br/>in<br/>  h * helper (0, 0.0)<br/>end<br/>\u00a0<br/>fun leftRect  (f, x, _) = f x<br/>fun midRect   (f, x, h) = f (x + h / 2.0)<br/>fun rightRect (f, x, h) = f (x + h)<br/>fun trapezium (f, x, h) = (f x + f (x + h)) / 2.0<br/>fun simpson   (f, x, h) = (f x + 4.0 * f (x + h / 2.0) + f (x + h)) / 6.0<br/>\u00a0<br/>fun square x = x * x<br/>\u00a0<br/>\u00a0<br/>val rl = integrate (square, 0.0, 1.0, 10, left_rect )<br/>val rm = integrate (square, 0.0, 1.0, 10, mid_rect  )<br/>val rr = integrate (square, 0.0, 1.0, 10, right_rect)<br/>val t  = integrate (square, 0.0, 1.0, 10, trapezium )<br/>val s  = integrate (square, 0.0, 1.0, 10, simpson   )</pre>"}, {"lang": "Stata", "loc": 41, "block": "<pre class=\"text highlighted_source\">mata<br/>function integrate(f,a,b,n,u,v) {<br/>\ts = 0<br/>\th = (b-a)/n<br/>\tm = length(u)<br/>\tfor (i=0; i&lt;n; i++) {<br/>\t\tx = a+i*h<br/>\t\tfor (j=1; j&lt;=m; j++) s = s+v[j]*(*f)(x+h*u[j])<br/>\t}<br/>\treturn(s*h)<br/>}<br/>\u00a0<br/>function log_(x) {<br/>\treturn(log(x))<br/>}<br/>\u00a0<br/>function id(x) {<br/>\treturn(x)<br/>}<br/>\u00a0<br/>function cube(x) {<br/>\treturn(x*x*x)<br/>}<br/>\u00a0<br/>function inv(x) {<br/>\treturn(1/x)<br/>}<br/>\u00a0<br/>function test(f,a,b,n) {<br/>\treturn(integrate(f,a,b,n,(0,1),(1,0)),<br/>\t       integrate(f,a,b,n,(0,1),(0,1)),<br/>\t       integrate(f,a,b,n,(0.5),(1)),<br/>\t       integrate(f,a,b,n,(0,1),(0.5,0.5)),<br/>\t       integrate(f,a,b,n,(0,1/2,1),(1/6,4/6,1/6)))<br/>}<br/>\u00a0<br/>test(&amp;cube(),0,1,100)<br/>test(&amp;inv(),1,100,1000)<br/>test(&amp;id(),0,5000,5000000)<br/>test(&amp;id(),0,6000,6000000)<br/>end</pre>"}, {"lang": "Tcl", "loc": 54, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> leftrect <span class=\"br0\">{</span>f left right<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$f</span> <span class=\"re0\">$left</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> midrect <span class=\"br0\">{</span>f left right<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> mid <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$left</span> + <span class=\"re0\">$right</span><span class=\"br0\">)</span> / <span class=\"nu0\">2.0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"re0\">$f</span> <span class=\"re0\">$mid</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> rightrect <span class=\"br0\">{</span>f left right<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$f</span> <span class=\"re0\">$right</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> trapezium <span class=\"br0\">{</span>f left right<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re0\">$f</span> <span class=\"re0\">$left</span><span class=\"br0\">]</span> + <span class=\"br0\">[</span><span class=\"re0\">$f</span> <span class=\"re0\">$right</span><span class=\"br0\">]</span><span class=\"br0\">)</span> / <span class=\"nu0\">2.0</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> simpson <span class=\"br0\">{</span>f left right<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> mid <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$left</span> + <span class=\"re0\">$right</span><span class=\"br0\">)</span> / <span class=\"nu0\">2.0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re0\">$f</span> <span class=\"re0\">$left</span><span class=\"br0\">]</span> + <span class=\"nu0\">4</span><span class=\"sy0\">*</span><span class=\"br0\">[</span><span class=\"re0\">$f</span> <span class=\"re0\">$mid</span><span class=\"br0\">]</span> + <span class=\"br0\">[</span><span class=\"re0\">$f</span> <span class=\"re0\">$right</span><span class=\"br0\">]</span><span class=\"br0\">)</span> / <span class=\"nu0\">6.0</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> integrate <span class=\"br0\">{</span>f a b steps <span class=\"kw1\">method</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> delta <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">1.0</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span> - <span class=\"re0\">$a</span><span class=\"br0\">)</span> / <span class=\"re0\">$steps</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> total <span class=\"nu0\">0.0</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$steps</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> left <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> + <span class=\"re0\">$i</span> <span class=\"sy0\">*</span> <span class=\"re0\">$delta</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> right <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$left</span> + <span class=\"re0\">$delta</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> total <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$total</span> + <span class=\"re0\">$delta</span> <span class=\"sy0\">*</span> <span class=\"br0\">[</span><span class=\"re0\">$method</span> <span class=\"re0\">$f</span> <span class=\"re0\">$left</span> <span class=\"re0\">$right</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$total</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">interp</span> alias <span class=\"br0\">{</span><span class=\"br0\">}</span> sin <span class=\"br0\">{</span><span class=\"br0\">}</span>\u00a0::<span class=\"me1\">tcl</span>::<span class=\"me1\">mathfunc</span>::<span class=\"me1\">sin</span><br/><span class=\"kw1\">proc</span> square x <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"sy0\">*</span><span class=\"re0\">$x</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> def_int <span class=\"br0\">{</span>f a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">switch</span> -- <span class=\"re0\">$f</span> <span class=\"br0\">{</span><br/>        sin    <span class=\"br0\">{</span><span class=\"kw1\">set</span> lambda <span class=\"br0\">{</span>x <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>-cos<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>        square <span class=\"br0\">{</span><span class=\"kw1\">set</span> lambda <span class=\"br0\">{</span>x <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"sy0\">**</span><span class=\"nu0\">3</span>/<span class=\"nu0\">3.0</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>apply <span class=\"re0\">$lambda</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span> - <span class=\"br0\">[</span>apply <span class=\"re0\">$lambda</span> <span class=\"re0\">$a</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> a <span class=\"nu0\">0</span><br/><span class=\"kw1\">set</span> b <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">4</span><span class=\"sy0\">*</span>atan<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> steps <span class=\"nu0\">10</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> func <span class=\"br0\">{</span>square sin<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"integral of ${func}(x) from $a to $b in $steps steps\"</span><br/>    <span class=\"kw1\">set</span> actual <span class=\"br0\">[</span>def_int <span class=\"re0\">$func</span> <span class=\"re0\">$a</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"kw1\">method</span> <span class=\"br0\">{</span>leftrect midrect rightrect trapezium simpson<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> int <span class=\"br0\">[</span>integrate <span class=\"re0\">$func</span> <span class=\"re0\">$a</span> <span class=\"re0\">$b</span> <span class=\"re0\">$steps</span> <span class=\"re0\">$method</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> diff <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$int</span> - <span class=\"re0\">$actual</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100.0</span> / <span class=\"re0\">$actual</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"  \u00a0%-10s \u00a0%s<span class=\"es0\">\\t</span>(%.1f%%)\"</span> <span class=\"re0\">$method</span> <span class=\"re0\">$int</span> <span class=\"re0\">$diff</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TI-89 BASIC", "loc": 7, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>#import flo<br/>\u00a0<br/>(integral_by \"m\") (\"f\",\"a\",\"b\",\"n\") =<br/>\u00a0<br/>iprod ^(*\u00a0! div\\float\"n\" minus/\"b\" \"a\",~&amp;) (\"m\" \"f\")*ytp (ari successor \"n\")/\"a\" \"b\"</pre>"}, {"lang": "Ursala", "loc": 7, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>#import flo<br/>\u00a0<br/>(integral_by \"m\") (\"f\",\"a\",\"b\",\"n\") =<br/>\u00a0<br/>iprod ^(*\u00a0! div\\float\"n\" minus/\"b\" \"a\",~&amp;) (\"m\" \"f\")*ytp (ari successor \"n\")/\"a\" \"b\"</pre>"}, {"lang": "VBA", "loc": 56, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/><span class=\"kw2\">Option</span> Base 1<br/>\u00a0<br/><span class=\"kw2\">Function</span> Quad(<span class=\"kw4\">ByVal</span> f <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, <span class=\"kw4\">ByVal</span> a <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span>, _<br/>        <span class=\"kw4\">ByVal</span> b <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span>, <span class=\"kw4\">ByVal</span> n <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, _<br/>        <span class=\"kw4\">ByVal</span> u <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>, <span class=\"kw4\">ByVal</span> v <span class=\"kw4\">As</span> <span class=\"kw1\">Variant</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span><br/>    <span class=\"kw4\">Dim</span> m <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, h <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span>, x <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span>, s <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span>, i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, j <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    m = <span class=\"kw4\">UBound</span>(u)<br/>    h = (b - a) / n<br/>    s = 0#<br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> n<br/>        x = a + (i - 1) * h<br/>        <span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> m<br/>            s = s + v(j) * Application.Run(f, x + h * u(j))<br/>        <span class=\"kw3\">Next</span><br/>    <span class=\"kw3\">Next</span><br/>    Quad = s * h<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> f1fun(x <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span><br/>    f1fun = x ^ 3<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> f2fun(x <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span><br/>    f2fun = 1 / x<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> f3fun(x <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span><br/>    f3fun = x<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Test()<br/>    <span class=\"kw4\">Dim</span> fun, f, coef, c<br/>    <span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, j <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, s <span class=\"kw4\">As</span> <span class=\"kw1\">Double</span><br/>\u00a0<br/>    fun = Array(Array(<span class=\"st0\">\"f1fun\"</span>, 0, 1, 100, 1 / 4), _<br/>        Array(<span class=\"st0\">\"f2fun\"</span>, 1, 100, 1000, Log(100)), _<br/>        Array(<span class=\"st0\">\"f3fun\"</span>, 0, 5000, 50000, 5000 ^ 2 / 2), _<br/>        Array(<span class=\"st0\">\"f3fun\"</span>, 0, 6000, 60000, 6000 ^ 2 / 2))<br/>\u00a0<br/>    coef = Array(Array(<span class=\"st0\">\"Left rect.  \"</span>, Array(0, 1), Array(1, 0)), _<br/>        Array(<span class=\"st0\">\"Right rect. \"</span>, Array(0, 1), Array(0, 1)), _<br/>        Array(<span class=\"st0\">\"Midpoint    \"</span>, Array(0.5), Array(1)), _<br/>        Array(<span class=\"st0\">\"Trapez.     \"</span>, Array(0, 1), Array(0.5, 0.5)), _<br/>        Array(<span class=\"st0\">\"Simpson     \"</span>, Array(0, 0.5, 1), Array(1 / 6, 4 / 6, 1 / 6)))<br/>\u00a0<br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(fun)<br/>        f = fun(i)<br/>        Debug.<span class=\"kw4\">Print</span> f(1)<br/>        <span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(coef)<br/>            c = coef(j)<br/>            s = Quad(f(1), f(2), f(3), f(4), c(2), c(3))<br/>            Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"  \"</span> + c(1) + <span class=\"st0\">\": \"</span>, s, (s - f(5)) / f(5)<br/>        <span class=\"kw3\">Next</span> j<br/>    <span class=\"kw3\">Next</span> i<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span></pre>"}, {"lang": "XPL0", "loc": 47, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>\u00a0<br/>func real Func(FN, X);          \\Return F(X) for function number FN<br/>int  FN;  real X;<br/>[case FN of<br/>  1:  return X*X*X;<br/>  2:  return 1.0/X;<br/>  3:  return X<br/>other return 0.0;<br/>];<br/>\u00a0<br/>func Integrate(A, B, FN, N);    \\Display area under curve for function FN<br/>real A, B;  int FN, N;          \\limits A, B, and number of slices N<br/>real DX, X, Area;               \\delta X<br/>int  I;<br/>[DX:= (B-A)/float(N);<br/>X:= A;  Area:= 0.0;             \\rectangular left<br/>for I:= 1 to N do<br/>    [Area:= Area + Func(FN,X)*DX;  X:= X+DX];<br/>RlOut(0, Area);<br/>X:= A;  Area:= 0.0;             \\rectangular right<br/>for I:= 1 to N do<br/>    [X:= X+DX;  Area:= Area + Func(FN,X)*DX];<br/>RlOut(0, Area);<br/>X:= A+DX/2.0;  Area:= 0.0;      \\rectangular mid point<br/>for I:= 1 to N do<br/>    [Area:= Area + Func(FN,X)*DX;  X:= X+DX];<br/>RlOut(0, Area);<br/>X:= A;  Area:= 0.0;             \\trapezium<br/>for I:= 1 to N do<br/>    [Area:= Area + (Func(FN,X)+Func(FN,X+DX))/2.0*DX;  X:= X+DX];<br/>RlOut(0, Area);<br/>X:= A;  Area:= 0.0;             \\Simpson's rule<br/>for I:= 1 to N do<br/>    [Area:= Area +<br/>        DX/6.0*(Func(FN,X) + 4.0*Func(FN,(X+X+DX)/2.0) + Func(FN,X+DX));<br/>    X:= X+DX];<br/>RlOut(0, Area);<br/>CrLf(0);<br/>];<br/>\u00a0<br/>[Format(9,6);<br/>Integrate(0.0, 1.0, 1, 100);<br/>Integrate(1.0, 100.0, 2, 1000);<br/>Integrate(0.0, 5000.0, 3, 5_000_000);<br/>Integrate(0.0, 6000.0, 3, 6_000_000);<br/>]</pre>"}, {"lang": "zkl", "loc": 24, "block": "<pre class=\"text highlighted_source\">fcn integrate(F,f,a,b,steps){<br/>   h:=(b - a) / steps;<br/>   h*(0).reduce(steps,'wrap(s,i){ F(f, h*i + a, h) + s },0.0);<br/>}<br/>\u00a0<br/>fcn rectangularLeft(f,x)    { f(x) }<br/>fcn rectangularMiddle(f,x,h){ f(x+h/2) }<br/>fcn rectangularRight(f,x,h) { f(x+h) }<br/>fcn trapezium(f,x,h)        { (f(x) + f(x+h))/2 }<br/>fcn simpson(f,x,h)\t    { (f(x) + 4.0*f(x+h/2) + f(x+h))/6 }<br/>\u00a0<br/>args:=T( T(fcn(x){ x.pow(3) }, 0.0, 1.0,   10),<br/>         T(fcn(x){ 1.0 / x },  1.0, 100.0, 1000),<br/>         T(fcn(x){ x },        0.0, 5000.0, 0d5_000_000),<br/>         T(fcn(x){ x },        0.0, 6000.0, 0d6_000_000) );<br/>fs:=T(rectangularLeft,rectangularMiddle,rectangularRight,<br/>      trapezium,simpson);<br/>names:=fs.pump(List,\"name\",'+(\":\"),\"%-18s\".fmt);<br/>\u00a0<br/>foreach a in (args){<br/>   names.zipWith('wrap(nm,f){<br/>      \"%s\u00a0%f\".fmt(nm,integrate(f,a.xplode())).println() }, fs);<br/>   println();<br/>}</pre>"}]}