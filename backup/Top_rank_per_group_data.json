{"task": "Top_rank_per_group", "blocks": [{"lang": "Ada", "loc": 71, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Vectors</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Top <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Departments <span class=\"kw1\">is</span> <span class=\"br0\">(</span>D050, D101, D190, D202<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">type</span> Employee_Data <span class=\"kw1\">is</span> <span class=\"kw3\">record</span><br/>      Name      \u00a0: String <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">15</span><span class=\"br0\">)</span>;<br/>      ID        \u00a0: String <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">6</span><span class=\"br0\">)</span>;<br/>      Salary    \u00a0: Positive;<br/>      Department\u00a0: Departments;<br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/>\u00a0<br/>   <span class=\"kw3\">package</span> Employee_Vectors <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Vectors</span><br/>     <span class=\"br0\">(</span>Element_Type =&gt; Employee_Data, Index_Type =&gt; Positive<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Compare_Salary <span class=\"br0\">(</span>Left, Right\u00a0: Employee_Data<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> Left.<span class=\"me1\">Salary</span> &gt; Right.<span class=\"me1\">Salary</span>;<br/>   <span class=\"kw1\">end</span> Compare_Salary;<br/>   <span class=\"kw3\">package</span> Salary_Sort <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Employee_Vectors.<span class=\"me1\">Generic_Sorting</span><br/>     <span class=\"br0\">(</span><span class=\"st0\">\"&lt;\"</span> =&gt; Compare_Salary<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Compare_Department <span class=\"br0\">(</span>Left, Right\u00a0: Employee_Data<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> Left.<span class=\"me1\">Department</span> &lt; Right.<span class=\"me1\">Department</span>;<br/>   <span class=\"kw1\">end</span> Compare_Department;<br/>   <span class=\"kw3\">package</span> Department_Sort <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Employee_Vectors.<span class=\"me1\">Generic_Sorting</span><br/>     <span class=\"br0\">(</span><span class=\"st0\">\"&lt;\"</span> =&gt; Compare_Department<span class=\"br0\">)</span>;<br/>\u00a0<br/>   Example_Data\u00a0: Employee_Vectors.<span class=\"me1\">Vector</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"co1\">-- fill data</span><br/>   Example_Data.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Tyler Bennett  \"</span>, <span class=\"st0\">\"E10297\"</span>, <span class=\"nu0\">32000</span>, D101<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Example_Data.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"John Rappl     \"</span>, <span class=\"st0\">\"E21437\"</span>, <span class=\"nu0\">47000</span>, D050<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Example_Data.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"George Woltman \"</span>, <span class=\"st0\">\"E00127\"</span>, <span class=\"nu0\">53500</span>, D101<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Example_Data.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Adam Smith     \"</span>, <span class=\"st0\">\"E63535\"</span>, <span class=\"nu0\">18000</span>, D202<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Example_Data.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Claire Buckman \"</span>, <span class=\"st0\">\"E39876\"</span>, <span class=\"nu0\">27800</span>, D202<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Example_Data.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"David McClellan\"</span>, <span class=\"st0\">\"E04242\"</span>, <span class=\"nu0\">41500</span>, D101<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Example_Data.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Rich Holcomb   \"</span>, <span class=\"st0\">\"E01234\"</span>, <span class=\"nu0\">49500</span>, D202<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Example_Data.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Nathan Adams   \"</span>, <span class=\"st0\">\"E41298\"</span>, <span class=\"nu0\">21900</span>, D050<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Example_Data.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Richard Potter \"</span>, <span class=\"st0\">\"E43128\"</span>, <span class=\"nu0\">15900</span>, D101<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Example_Data.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"David Motsinger\"</span>, <span class=\"st0\">\"E27002\"</span>, <span class=\"nu0\">19250</span>, D202<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Example_Data.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Tim Sampair    \"</span>, <span class=\"st0\">\"E03033\"</span>, <span class=\"nu0\">27000</span>, D101<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Example_Data.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Kim Arlich     \"</span>, <span class=\"st0\">\"E10001\"</span>, <span class=\"nu0\">57000</span>, D190<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Example_Data.<span class=\"me1\">Append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Timothy Grove  \"</span>, <span class=\"st0\">\"E16398\"</span>, <span class=\"nu0\">29900</span>, D190<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"co1\">-- sort by salary</span><br/>   Salary_Sort.<span class=\"me1\">Sort</span> <span class=\"br0\">(</span>Example_Data<span class=\"br0\">)</span>;<br/>   <span class=\"co1\">-- output each department</span><br/>   <span class=\"kw1\">for</span> Department <span class=\"kw3\">in</span> Departments <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">declare</span><br/>         Position\u00a0: Employee_Vectors.<span class=\"me1\">Cursor</span>\u00a0:= Example_Data.<span class=\"me1\">First</span>;<br/>         Employee\u00a0: Employee_Data;<br/>      <span class=\"kw1\">begin</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"Department \"</span> &amp; Departments'Image <span class=\"br0\">(</span>Department<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">3</span> <span class=\"kw1\">loop</span><br/>            Employee\u00a0:= Employee_Vectors.<span class=\"me1\">Element</span> <span class=\"br0\">(</span>Position<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">while</span> Employee.<span class=\"me1\">Department</span> /= Department <span class=\"kw1\">loop</span><br/>               Position\u00a0:= Employee_Vectors.<span class=\"me1\">Next</span> <span class=\"br0\">(</span>Position<span class=\"br0\">)</span>;<br/>               Employee\u00a0:= Employee_Vectors.<span class=\"me1\">Element</span> <span class=\"br0\">(</span>Position<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>            Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"   \"</span> &amp; Employee.<span class=\"me1\">Name</span> &amp; <span class=\"st0\">\" | \"</span> &amp;<br/>                                  Employee.<span class=\"me1\">ID</span> &amp; <span class=\"st0\">\" | \"</span> &amp;<br/>                                  Positive'Image <span class=\"br0\">(</span>Employee.<span class=\"me1\">Salary</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            Position\u00a0:= Employee_Vectors.<span class=\"me1\">Next</span> <span class=\"br0\">(</span>Position<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">exception</span><br/>         <span class=\"kw3\">when</span> Constraint_Error =&gt;<br/>            <span class=\"kw3\">null</span>;<br/>      <span class=\"kw1\">end</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Top;</pre>"}, {"lang": "Aime", "loc": 77, "block": "<pre class=\"text highlighted_source\">void<br/>Add_Employee(record employees, text name, text id, integer salary,<br/>\t     text department)<br/>{<br/>    employees[name] = list(name, id, salary, department);<br/>}<br/>\u00a0<br/>void<br/>collect(record top, record employees)<br/>{<br/>    list l;<br/>\u00a0<br/>    for (, l in employees) {<br/>        list department;<br/>        integer i, salary;<br/>\u00a0<br/>        department = r_v_list(top, l[3]);<br/>\u00a0<br/>        salary = l[2];<br/>        i = 0;<br/>        while (i &lt; ~department) {<br/>            if (__list(department[i])[2] &lt; salary) {<br/>                break;<br/>            }<br/>            i += 1;<br/>        }<br/>\u00a0<br/>        l_l_list(department, i, l);<br/>\u00a0<br/>        if (~department == N + 1) {<br/>            department.delete(N);<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>void<br/>print(record top)<br/>{<br/>    text department;<br/>    list employees;<br/>\u00a0<br/>    for (department, employees in top) {<br/>        list l;<br/>\u00a0<br/>        o_(\"Department \", department, \"\\n\");<br/>\u00a0<br/>        for (, l in employees) {<br/>            o_form(\"  ~ | ~ | ~\\n\", l[0], l[1], l[2]);<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    record employees, top;<br/>\u00a0<br/>    Add_Employee(employees, \"Tyler Bennett  \", \"E10297\", 32000, \"D101\");<br/>    Add_Employee(employees, \"John Rappl     \", \"E21437\", 47000, \"D050\");<br/>    Add_Employee(employees, \"George Woltman \", \"E00127\", 53500, \"D101\");<br/>    Add_Employee(employees, \"Adam Smith     \", \"E63535\", 18000, \"D202\");<br/>    Add_Employee(employees, \"Claire Buckman \", \"E39876\", 27800, \"D202\");<br/>    Add_Employee(employees, \"David McClellan\", \"E04242\", 41500, \"D101\");<br/>    Add_Employee(employees, \"Rich Holcomb   \", \"E01234\", 49500, \"D202\");<br/>    Add_Employee(employees, \"Nathan Adams   \", \"E41298\", 21900, \"D050\");<br/>    Add_Employee(employees, \"Richard Potter \", \"E43128\", 15900, \"D101\");<br/>    Add_Employee(employees, \"David Motsinger\", \"E27002\", 19250, \"D202\");<br/>    Add_Employee(employees, \"Tim Sampair    \", \"E03033\", 27000, \"D101\");<br/>    Add_Employee(employees, \"Kim Arlich     \", \"E10001\", 57000, \"D190\");<br/>    Add_Employee(employees, \"Timothy Grove  \", \"E16398\", 29900, \"D190\");<br/>\u00a0<br/>    collect(top, employees);<br/>\u00a0<br/>    print(top);<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "AutoHotkey", "loc": 56, "block": "<pre class=\"autohotkey highlighted_source\">Departments <span class=\"sy0\">=</span> D050<span class=\"sy0\">,</span> D101<span class=\"sy0\">,</span> D190<span class=\"sy0\">,</span> D202 <br/><a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> Department_<span class=\"sy0\">,</span> Departments<span class=\"sy0\">,</span> `<span class=\"sy0\">,,</span> <span class=\"re0\">%A_Space%</span> <br/>\u00a0<br/><span class=\"co1\">; Employee Name, Employee ID, Salary, Department </span><br/>Add_Employee<span class=\"br0\">(</span><span class=\"st0\">\"Tyler Bennett  \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E10297\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">32000</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span> <br/>Add_Employee<span class=\"br0\">(</span><span class=\"st0\">\"John Rappl     \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E21437\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">47000</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D050\"</span><span class=\"br0\">)</span> <br/>Add_Employee<span class=\"br0\">(</span><span class=\"st0\">\"George Woltman \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E00127\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">53500</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span> <br/>Add_Employee<span class=\"br0\">(</span><span class=\"st0\">\"Adam Smith     \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E63535\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">18000</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span> <br/>Add_Employee<span class=\"br0\">(</span><span class=\"st0\">\"Claire Buckman \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E39876\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">27800</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span> <br/>Add_Employee<span class=\"br0\">(</span><span class=\"st0\">\"David McClellan\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E04242\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">41500</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span> <br/>Add_Employee<span class=\"br0\">(</span><span class=\"st0\">\"Rich Holcomb   \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E01234\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">49500</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span> <br/>Add_Employee<span class=\"br0\">(</span><span class=\"st0\">\"Nathan Adams   \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E41298\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">21900</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D050\"</span><span class=\"br0\">)</span> <br/>Add_Employee<span class=\"br0\">(</span><span class=\"st0\">\"Richard Potter \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E43128\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">15900</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span> <br/>Add_Employee<span class=\"br0\">(</span><span class=\"st0\">\"David Motsinger\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E27002\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">19250</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span> <br/>Add_Employee<span class=\"br0\">(</span><span class=\"st0\">\"Tim Sampair    \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E03033\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">27000</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span> <br/>Add_Employee<span class=\"br0\">(</span><span class=\"st0\">\"Kim Arlich     \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E10001\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">57000</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D190\"</span><span class=\"br0\">)</span> <br/>Add_Employee<span class=\"br0\">(</span><span class=\"st0\">\"Timothy Grove  \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E16398\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">29900</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D190\"</span><span class=\"br0\">)</span> <br/>\u00a0<br/><span class=\"co1\">; display top 3 ranks for each department </span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%Department_0%</span> <span class=\"co1\">; all departments </span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,,</span>\u00a0% <span class=\"st0\">\"Department:  \"</span> Department_<span class=\"re0\">%A_Index%</span> <br/>           <span class=\"sy0\">,</span>\u00a0% TopRank<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> Department_<span class=\"re0\">%A_Index%</span><span class=\"br0\">)</span> <br/>\u00a0<br/><span class=\"co1\">;--------------------------------------------------------------------------- </span><br/>TopRank<span class=\"br0\">(</span>N<span class=\"sy0\">,</span> Department<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; find the top N salaries in each department </span><br/><span class=\"co1\">;--------------------------------------------------------------------------- </span><br/>    local Collection <span class=\"sy0\">:=</span> Msg <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span> <br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%m%</span> <span class=\"co1\">; all employees </span><br/>        <span class=\"kw1\">If</span> <span class=\"br0\">(</span>Employee_<span class=\"re0\">%A_Index%</span>_Dept <span class=\"sy0\">=</span> Department<span class=\"br0\">)</span> <br/>            <span class=\"co1\">; collect all the salaries being paid in this department </span><br/>            Collection <span class=\"sy0\">.=</span> <span class=\"br0\">(</span>Collection\u00a0? <span class=\"st0\">\",\"</span>\u00a0: <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> Employee_<span class=\"re0\">%A_Index%</span>_Salary <br/>    <a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><span class=\"sy0\">,</span> Collection<span class=\"sy0\">,</span> ND<span class=\"sy0\">,</span>R <br/>    <a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"sy0\">,</span> Collection<span class=\"sy0\">,</span> Collection<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span> <br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"br0\">(</span>N <span class=\"sy0\">&lt;</span> Collection0<span class=\"br0\">)</span>\u00a0? N\u00a0: Collection0 <span class=\"br0\">{</span> <br/>        Salary <span class=\"sy0\">:=</span> Collection<span class=\"re0\">%A_Index%</span> <br/>        <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%m%</span> <span class=\"co1\">; find the respective employee </span><br/>            <span class=\"kw1\">If</span> <span class=\"br0\">(</span>Employee_<span class=\"re0\">%A_Index%</span>_Salary <span class=\"sy0\">=</span> Salary<span class=\"br0\">)</span> <br/>                <span class=\"co1\">; and put out his/her details </span><br/>                Msg <span class=\"sy0\">.=</span> Employee_<span class=\"re0\">%A_Index%</span>_Name <span class=\"st0\">\"`t\"</span> <br/>                    <span class=\"sy0\">.</span>  Employee_<span class=\"re0\">%A_Index%</span>_ID <span class=\"st0\">\"`t\"</span> <br/>                    <span class=\"sy0\">.</span>  Employee_<span class=\"re0\">%A_Index%</span>_Salary <span class=\"st0\">\"`t\"</span> <br/>                    <span class=\"sy0\">.</span>  Employee_<span class=\"re0\">%A_Index%</span>_Dept <span class=\"st0\">\"`t`n\"</span> <br/>    <span class=\"br0\">}</span> <br/>    <span class=\"kw1\">Return</span><span class=\"sy0\">,</span> Msg <br/><span class=\"br0\">}</span> <br/>\u00a0<br/><span class=\"co1\">;--------------------------------------------------------------------------- </span><br/>Add_Employee<span class=\"br0\">(</span>Name<span class=\"sy0\">,</span> ID<span class=\"sy0\">,</span> Salary<span class=\"sy0\">,</span> Department<span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/><span class=\"co1\">;--------------------------------------------------------------------------- </span><br/>    global <br/>    m<span class=\"sy0\">++</span> <br/>    Employee_<span class=\"re0\">%m%</span>_Name   <span class=\"sy0\">:=</span> Name <br/>    Employee_<span class=\"re0\">%m%</span>_ID     <span class=\"sy0\">:=</span> ID <br/>    Employee_<span class=\"re0\">%m%</span>_Salary <span class=\"sy0\">:=</span> Salary <br/>    Employee_<span class=\"re0\">%m%</span>_Dept   <span class=\"sy0\">:=</span> Department <br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 47, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f TOP_RANK_PER_GROUP.AWK [n]</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># sorting:</span><br/><span class=\"co1\">#   PROCINFO[\"sorted_in\"] is used by GAWK</span><br/><span class=\"co1\">#   SORTTYPE is used by Thompson Automation's TAWK</span><br/><span class=\"co1\">#</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    arrA<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"st0\">\"Employee Name,Employee ID,Salary,Department\"</span> <span class=\"co1\"># raw data</span><br/>    arrA<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"st0\">\"Tyler Bennett,E10297,32000,D101\"</span><br/>    arrA<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"st0\">\"John Rappl,E21437,47000,D050\"</span><br/>    arrA<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"st0\">\"George Woltman,E00127,53500,D101\"</span><br/>    arrA<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"st0\">\"Adam Smith,E63535,18000,D202\"</span><br/>    arrA<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"st0\">\"Claire Buckman,E39876,27800,D202\"</span><br/>    arrA<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"st0\">\"David McClellan,E04242,41500,D101\"</span><br/>    arrA<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"st0\">\"Rich Holcomb,E01234,49500,D202\"</span><br/>    arrA<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"st0\">\"Nathan Adams,E41298,21900,D050\"</span><br/>    arrA<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"st0\">\"Richard Potter,E43128,15900,D101\"</span><br/>    arrA<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"st0\">\"David Motsinger,E27002,19250,D202\"</span><br/>    arrA<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"st0\">\"Tim Sampair,E03033,27000,D101\"</span><br/>    arrA<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"st0\">\"Kim Arlich,E10001,57000,D190\"</span><br/>    arrA<span class=\"br0\">[</span><span class=\"sy3\">++</span>n<span class=\"br0\">]</span> = <span class=\"st0\">\"Timothy Grove,E16398,29900,D190\"</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">2</span>; i<span class=\"sy2\">&lt;=</span>n; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># build internal structure</span><br/>      <span class=\"kw4\">split</span><span class=\"br0\">(</span>arrA<span class=\"br0\">[</span>i<span class=\"br0\">]</span>,arrB,<span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>      arrC<span class=\"br0\">[</span>arrB<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>arrB<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>arrB<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"st0\">\" \"</span> arrB<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"co1\"># I.E. arrC[dept][salary][id \" \" name]</span><br/>    <span class=\"br0\">}</span><br/>    show = <span class=\"br0\">(</span><span class=\"kw3\">ARGV</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy2\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy5\">?</span> <span class=\"nu0\">1</span> <span class=\"sy5\">:</span> <span class=\"kw3\">ARGV</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"co1\"># employees to show per department</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"DEPT SALARY EMPID  NAME<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span> <span class=\"co1\"># produce report</span><br/>    PROCINFO<span class=\"br0\">[</span><span class=\"st0\">\"sorted_in\"</span><span class=\"br0\">]</span> = <span class=\"st0\">\"@ind_str_asc\"</span>\u00a0; SORTTYPE = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"kw1\">in</span> arrC<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      PROCINFO<span class=\"br0\">[</span><span class=\"st0\">\"sorted_in\"</span><span class=\"br0\">]</span> = <span class=\"st0\">\"@ind_str_desc\"</span>\u00a0; SORTTYPE = <span class=\"nu0\">9</span><br/>      shown = <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"kw1\">in</span> arrC<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        PROCINFO<span class=\"br0\">[</span><span class=\"st0\">\"sorted_in\"</span><span class=\"br0\">]</span> = <span class=\"st0\">\"@ind_str_asc\"</span>\u00a0; SORTTYPE = <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>k <span class=\"kw1\">in</span> arrC<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>shown<span class=\"sy3\">++</span> <span class=\"sy2\">&lt;</span> show<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%-4s\u00a0%6s\u00a0%s<span class=\"es0\">\\n</span>\"</span>,i,j,k<span class=\"br0\">)</span><br/>            printed<span class=\"sy3\">++</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>printed <span class=\"sy2\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>      printed = <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Bracmat", "loc": 40, "block": "<pre class=\"text highlighted_source\">      (Tyler Bennett,E10297,32000,D101)<br/>      (John Rappl,E21437,47000,D050)<br/>      (George Woltman,E00127,53500,D101)<br/>      (Adam Smith,E63535,18000,D202)<br/>      (Claire Buckman,E39876,27800,D202)<br/>      (David McClellan,E04242,41500,D101)<br/>      (Rich Holcomb,E01234,49500,D202)<br/>      (Nathan Adams,E41298,21900,D050)<br/>      (Richard Potter,E43128,15900,D101)<br/>      (David Motsinger,E27002,19250,D202)<br/>      (Tim Sampair,E03033,27000,D101)<br/>      (Kim Arlich,E10001,57000,D190)<br/>      (Timothy Grove,E16398,29900,D190)<br/> \u00a0:\u00a0?employees<br/>&amp; ( toprank<br/>  =   employees N n P \"Employee Name\" \"Employee ID\" SalaryDepartment<br/>    .  \u00a0!arg:(?employees.?N)<br/>      &amp; 1:?P<br/>      &amp;   whl<br/>        ' (  \u00a0!employees<br/>           \u00a0:   (?\"Employee Name\",?\"Employee ID\",?Salary,?Department)<br/>               \u00a0?employees<br/>          &amp;\u00a0!Department^(!Salary.!\"Employee Name\".!\"Employee ID\")*!P:?P<br/>          )<br/>      &amp; out$(Top\u00a0!N \"salaries per department.\")<br/>      &amp;   whl<br/>        ' (\u00a0!P:%?Department^?employees*?P<br/>          &amp; out$(str$(\"Department \"\u00a0!Department \":\"))<br/>          &amp;\u00a0!N:?n<br/>          &amp;   whl<br/>            ' (\u00a0!n+-1:~&lt;0:?n<br/>              &amp;  \u00a0!employees<br/>               \u00a0:\u00a0?employees+(?Salary.?\"Employee Name\".?\"Employee ID\")<br/>              &amp;   out<br/>                $ (str$(\"  \"\u00a0!\"Employee Name\" \" (\"\u00a0!\"Employee ID\" \"):\"\u00a0!Salary))<br/>              )<br/>          )<br/>  )<br/>&amp; toprank$(!employees.3)<br/>&amp;\u00a0;</pre>"}, {"lang": "C", "loc": 55, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>name<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>id<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>dept<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> sal<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> person<span class=\"sy0\">;</span><br/>\u00a0<br/>person ppl<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\t<span class=\"br0\">{</span><span class=\"st0\">\"Tyler Bennett\"</span><span class=\"sy0\">,</span>\t<span class=\"st0\">\"E10297\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">32000</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"st0\">\"John Rappl\"</span><span class=\"sy0\">,</span>\t\t<span class=\"st0\">\"E21437\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D050\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">47000</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"st0\">\"George Woltman\"</span><span class=\"sy0\">,</span>\t<span class=\"st0\">\"E00127\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">53500</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"st0\">\"Adam Smith\"</span><span class=\"sy0\">,</span>\t\t<span class=\"st0\">\"E63535\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D202\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">18000</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"st0\">\"Claire Buckman\"</span><span class=\"sy0\">,</span>\t<span class=\"st0\">\"E39876\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D202\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">27800</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"st0\">\"David McClellan\"</span><span class=\"sy0\">,</span>\t<span class=\"st0\">\"E04242\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">41500</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"st0\">\"Rich Holcomb\"</span><span class=\"sy0\">,</span>\t<span class=\"st0\">\"E01234\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D202\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">49500</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"st0\">\"Nathan Adams\"</span><span class=\"sy0\">,</span>\t<span class=\"st0\">\"E41298\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D050\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">21900</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"st0\">\"Richard Potter\"</span><span class=\"sy0\">,</span>\t<span class=\"st0\">\"E43128\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">15900</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"st0\">\"David Motsinger\"</span><span class=\"sy0\">,</span>\t<span class=\"st0\">\"E27002\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D202\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">19250</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"st0\">\"Tim Sampair\"</span><span class=\"sy0\">,</span>\t\t<span class=\"st0\">\"E03033\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">27000</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"st0\">\"Kim Arlich\"</span><span class=\"sy0\">,</span>\t\t<span class=\"st0\">\"E10001\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D190\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">57000</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"st0\">\"Timothy Grove\"</span><span class=\"sy0\">,</span>\t<span class=\"st0\">\"E16398\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D190\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">29900</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> pcmp<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">const</span> person <span class=\"sy0\">*</span>aa <span class=\"sy0\">=</span> a<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>bb <span class=\"sy0\">=</span> b<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span>aa<span class=\"sy0\">-&gt;</span>dept<span class=\"sy0\">,</span> bb<span class=\"sy0\">-&gt;</span>dept<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">return</span> x<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> aa<span class=\"sy0\">-&gt;</span>sal <span class=\"sy0\">&gt;</span> bb<span class=\"sy0\">-&gt;</span>sal <span class=\"sy0\">?</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span> aa<span class=\"sy0\">-&gt;</span>sal <span class=\"sy0\">&lt;</span> bb<span class=\"sy0\">-&gt;</span>sal<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#define N sizeof(ppl)/sizeof(person)</span><br/><span class=\"kw4\">void</span> top<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> rank<span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/qsort.html\"><span class=\"kw3\">qsort</span></a><span class=\"br0\">(</span>ppl<span class=\"sy0\">,</span> N<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>person<span class=\"br0\">)</span><span class=\"sy0\">,</span> pcmp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> rank <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> N<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span>ppl<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">dept</span><span class=\"sy0\">,</span> ppl<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">dept</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\trank <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>rank<span class=\"sy0\">++</span> <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s\u00a0%d:\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> ppl<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">dept</span><span class=\"sy0\">,</span> ppl<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">sal</span><span class=\"sy0\">,</span> ppl<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\ttop<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 114, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;set&gt;</span><br/><span class=\"co2\">#include &lt;list&gt;</span><br/><span class=\"co2\">#include &lt;map&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">struct</span> Employee<br/><span class=\"br0\">{</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">string</span> Name<span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">string</span> ID<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> Salary<span class=\"sy4\">;</span><br/>\tstd<span class=\"sy4\">::</span><span class=\"me2\">string</span> Department<span class=\"sy4\">;</span><br/>\tEmployee<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> _Name <span class=\"sy1\">=</span> <span class=\"st0\">\"\"</span>, std<span class=\"sy4\">::</span><span class=\"me2\">string</span> _ID <span class=\"sy1\">=</span> <span class=\"st0\">\"\"</span>, <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> _Salary <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, std<span class=\"sy4\">::</span><span class=\"me2\">string</span> _Department <span class=\"sy1\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t<span class=\"sy4\">:</span> Name<span class=\"br0\">(</span>_Name<span class=\"br0\">)</span>, ID<span class=\"br0\">(</span>_ID<span class=\"br0\">)</span>, Salary<span class=\"br0\">(</span>_Salary<span class=\"br0\">)</span>, Department<span class=\"br0\">(</span>_Department<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">void</span> display<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span> out<span class=\"br0\">)</span> <span class=\"kw4\">const</span><br/>\t<span class=\"br0\">{</span><br/>\t\tout <span class=\"sy1\">&lt;&lt;</span> Name <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span> <span class=\"sy1\">&lt;&lt;</span> ID <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span> <span class=\"sy1\">&lt;&lt;</span> Salary <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span> <span class=\"sy1\">&lt;&lt;</span> Department <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">// We'll tell std::set to use this to sort our employees.</span><br/><span class=\"kw4\">struct</span> CompareEarners<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">bool</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> Employee<span class=\"sy3\">&amp;</span> e1, <span class=\"kw4\">const</span> Employee<span class=\"sy3\">&amp;</span> e2<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span>e1.<span class=\"me1\">Salary</span> <span class=\"sy1\">&gt;</span> e2.<span class=\"me1\">Salary</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">// A few typedefs to make the code easier to type, read and maintain.</span><br/><span class=\"kw4\">typedef</span> std<span class=\"sy4\">::</span><span class=\"me2\">list</span><span class=\"sy1\">&lt;</span>Employee<span class=\"sy1\">&gt;</span> EMPLOYEELIST<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">// Notice the CompareEarners; We're telling std::set to user our specified comparison mechanism</span><br/><span class=\"co1\">// to sort its contents.</span><br/><span class=\"kw4\">typedef</span> std<span class=\"sy4\">::</span><span class=\"me2\">set</span><span class=\"sy1\">&lt;</span>Employee, CompareEarners<span class=\"sy1\">&gt;</span> DEPARTMENTPAYROLL<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> std<span class=\"sy4\">::</span><span class=\"me2\">map</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span>, DEPARTMENTPAYROLL<span class=\"sy1\">&gt;</span> DEPARTMENTLIST<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> initialize<span class=\"br0\">(</span>EMPLOYEELIST<span class=\"sy3\">&amp;</span> Employees<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"co1\">// Initialize our employee list data source.</span><br/>\tEmployees.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Employee<span class=\"br0\">(</span><span class=\"st0\">\"Tyler Bennett\"</span>, <span class=\"st0\">\"E10297\"</span>, <span class=\"nu0\">32000</span>, <span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tEmployees.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Employee<span class=\"br0\">(</span><span class=\"st0\">\"John Rappl\"</span>, <span class=\"st0\">\"E21437\"</span>, <span class=\"nu0\">47000</span>, <span class=\"st0\">\"D050\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tEmployees.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Employee<span class=\"br0\">(</span><span class=\"st0\">\"George Woltman\"</span>, <span class=\"st0\">\"E21437\"</span>, <span class=\"nu0\">53500</span>, <span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tEmployees.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Employee<span class=\"br0\">(</span><span class=\"st0\">\"Adam Smith\"</span>, <span class=\"st0\">\"E21437\"</span>, <span class=\"nu0\">18000</span>, <span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tEmployees.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Employee<span class=\"br0\">(</span><span class=\"st0\">\"Claire Buckman\"</span>, <span class=\"st0\">\"E39876\"</span>, <span class=\"nu0\">27800</span>, <span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tEmployees.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Employee<span class=\"br0\">(</span><span class=\"st0\">\"David McClellan\"</span>, <span class=\"st0\">\"E04242\"</span>, <span class=\"nu0\">41500</span>, <span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tEmployees.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Employee<span class=\"br0\">(</span><span class=\"st0\">\"Rich Holcomb\"</span>, <span class=\"st0\">\"E01234\"</span>, <span class=\"nu0\">49500</span>, <span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tEmployees.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Employee<span class=\"br0\">(</span><span class=\"st0\">\"Nathan Adams\"</span>, <span class=\"st0\">\"E41298\"</span>, <span class=\"nu0\">21900</span>, <span class=\"st0\">\"D050\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tEmployees.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Employee<span class=\"br0\">(</span><span class=\"st0\">\"Richard Potter\"</span>, <span class=\"st0\">\"E43128\"</span>, <span class=\"nu0\">15900</span>, <span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tEmployees.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Employee<span class=\"br0\">(</span><span class=\"st0\">\"David Motsinger\"</span>, <span class=\"st0\">\"E27002\"</span>, <span class=\"nu0\">19250</span>, <span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tEmployees.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Employee<span class=\"br0\">(</span><span class=\"st0\">\"Tim Sampair\"</span>, <span class=\"st0\">\"E03033\"</span>, <span class=\"nu0\">27000</span>, <span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tEmployees.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Employee<span class=\"br0\">(</span><span class=\"st0\">\"Kim Arlich\"</span>, <span class=\"st0\">\"E10001\"</span>, <span class=\"nu0\">57000</span>, <span class=\"st0\">\"D190\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tEmployees.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>Employee<span class=\"br0\">(</span><span class=\"st0\">\"Timothy Grove\"</span>, <span class=\"st0\">\"E16398\"</span>, <span class=\"nu0\">29900</span>, <span class=\"st0\">\"D190\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> group<span class=\"br0\">(</span>EMPLOYEELIST<span class=\"sy3\">&amp;</span> Employees, DEPARTMENTLIST<span class=\"sy3\">&amp;</span> Departments<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"co1\">// Loop through all of our employees.</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> EMPLOYEELIST<span class=\"sy4\">::</span><span class=\"me2\">iterator</span> iEmployee <span class=\"sy1\">=</span> Employees.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t Employees.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> iEmployee<span class=\"sy4\">;</span><br/>\t\t <span class=\"sy2\">++</span>iEmployee <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tDEPARTMENTPAYROLL<span class=\"sy3\">&amp;</span> groupSet <span class=\"sy1\">=</span> Departments<span class=\"br0\">[</span>iEmployee<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>Department<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t\t<span class=\"co1\">// Add our employee to this group.</span><br/>\t\tgroupSet.<span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"sy2\">*</span>iEmployee<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> present<span class=\"br0\">(</span>DEPARTMENTLIST<span class=\"sy3\">&amp;</span> Departments, <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> N<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"co1\">// Loop through all of our departments</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> DEPARTMENTLIST<span class=\"sy4\">::</span><span class=\"me2\">iterator</span> iDepartment <span class=\"sy1\">=</span> Departments.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t Departments.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> iDepartment<span class=\"sy4\">;</span><br/>\t\t <span class=\"sy2\">++</span>iDepartment <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"In department \"</span> <span class=\"sy1\">&lt;&lt;</span> iDepartment<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>first <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\t\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Name<span class=\"es1\">\\t</span><span class=\"es1\">\\t</span>ID<span class=\"es1\">\\t</span>Salary<span class=\"es1\">\\t</span>Department\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"co1\">// Get the top three employees for each employee</span><br/>\t\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> rank <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> DEPARTMENTPAYROLL<span class=\"sy4\">::</span><span class=\"me2\">iterator</span> iEmployee <span class=\"sy1\">=</span> iDepartment<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>second.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t\t <span class=\"br0\">(</span> iDepartment<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>second.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> iEmployee<span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"br0\">(</span>rank <span class=\"sy1\">&lt;=</span> N<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t\t <span class=\"sy2\">++</span>iEmployee, <span class=\"sy2\">++</span>rank <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tiEmployee<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>display<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"co1\">// Our container for our list of employees.</span><br/>\tEMPLOYEELIST Employees<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// Fill our list of employees</span><br/>\tinitialize<span class=\"br0\">(</span>Employees<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// Our departments.  </span><br/>\tDEPARTMENTLIST Departments<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// Sort our employees into their departments.</span><br/>\t<span class=\"co1\">// This will also rank them.</span><br/>\tgroup<span class=\"br0\">(</span>Employees, Departments<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">// Display the top 3 earners in each department.</span><br/>\tpresent<span class=\"br0\">(</span>Departments, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 70, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">class</span> Employee<br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">public</span> Employee<span class=\"br0\">(</span><span class=\"kw4\">string</span> name, <span class=\"kw4\">string</span> id, <span class=\"kw4\">int</span> salary, <span class=\"kw4\">string</span> department<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tName <span class=\"sy0\">=</span> name<span class=\"sy0\">;</span><br/>\t\t\tId <span class=\"sy0\">=</span> id<span class=\"sy0\">;</span><br/>\t\t\tSalary <span class=\"sy0\">=</span> salary<span class=\"sy0\">;</span><br/>\t\t\tDepartment <span class=\"sy0\">=</span> department<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">string</span> Name <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">private</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">string</span> Id <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">private</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">int</span> Salary <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">private</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw4\">string</span> Department <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">private</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">public</span> <span class=\"kw1\">override</span> <span class=\"kw4\">string</span> ToString<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"kw4\">String</span><span class=\"sy0\">.</span><span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"{0, -25}<span class=\"es0\">\\t</span>{1}<span class=\"es0\">\\t</span>{2}\"</span>, Name, Id, Salary<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">var</span> employees <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>Employee<span class=\"sy0\">&gt;</span><br/>\t\t\t            <span class=\"br0\">{</span><br/>\t\t\t\t            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Employee<span class=\"br0\">(</span><span class=\"st0\">\"Tyler Bennett\"</span>, <span class=\"st0\">\"E10297\"</span>, <span class=\"nu0\">32000</span>, <span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span>,<br/>\t\t\t\t            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Employee<span class=\"br0\">(</span><span class=\"st0\">\"John Rappl\"</span>, <span class=\"st0\">\"E21437\"</span>, <span class=\"nu0\">47000</span>, <span class=\"st0\">\"D050\"</span><span class=\"br0\">)</span>,<br/>\t\t\t\t            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Employee<span class=\"br0\">(</span><span class=\"st0\">\"George Woltman\"</span>, <span class=\"st0\">\"E21437\"</span>, <span class=\"nu0\">53500</span>, <span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span>,<br/>\t\t\t\t            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Employee<span class=\"br0\">(</span><span class=\"st0\">\"Adam Smith\"</span>, <span class=\"st0\">\"E21437\"</span>, <span class=\"nu0\">18000</span>, <span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span>,<br/>\t\t\t\t            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Employee<span class=\"br0\">(</span><span class=\"st0\">\"Claire Buckman\"</span>, <span class=\"st0\">\"E39876\"</span>, <span class=\"nu0\">27800</span>, <span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span>,<br/>\t\t\t\t            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Employee<span class=\"br0\">(</span><span class=\"st0\">\"David McClellan\"</span>, <span class=\"st0\">\"E04242\"</span>, <span class=\"nu0\">41500</span>, <span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span>,<br/>\t\t\t\t            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Employee<span class=\"br0\">(</span><span class=\"st0\">\"Rich Holcomb\"</span>, <span class=\"st0\">\"E01234\"</span>, <span class=\"nu0\">49500</span>, <span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span>,<br/>\t\t\t\t            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Employee<span class=\"br0\">(</span><span class=\"st0\">\"Nathan Adams\"</span>, <span class=\"st0\">\"E41298\"</span>, <span class=\"nu0\">21900</span>, <span class=\"st0\">\"D050\"</span><span class=\"br0\">)</span>,<br/>\t\t\t\t            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Employee<span class=\"br0\">(</span><span class=\"st0\">\"Richard Potter\"</span>, <span class=\"st0\">\"E43128\"</span>, <span class=\"nu0\">15900</span>, <span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span>,<br/>\t\t\t\t            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Employee<span class=\"br0\">(</span><span class=\"st0\">\"David Motsinger\"</span>, <span class=\"st0\">\"E27002\"</span>, <span class=\"nu0\">19250</span>, <span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span>,<br/>\t\t\t\t            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Employee<span class=\"br0\">(</span><span class=\"st0\">\"Tim Sampair\"</span>, <span class=\"st0\">\"E03033\"</span>, <span class=\"nu0\">27000</span>, <span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span>,<br/>\t\t\t\t            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Employee<span class=\"br0\">(</span><span class=\"st0\">\"Kim Arlich\"</span>, <span class=\"st0\">\"E10001\"</span>, <span class=\"nu0\">57000</span>, <span class=\"st0\">\"D190\"</span><span class=\"br0\">)</span>,<br/>\t\t\t\t            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Employee<span class=\"br0\">(</span><span class=\"st0\">\"Timothy Grove\"</span>, <span class=\"st0\">\"E16398\"</span>, <span class=\"nu0\">29900</span>, <span class=\"st0\">\"D190\"</span><span class=\"br0\">)</span><br/>\t\t\t            <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tDisplayTopNPerDepartment<span class=\"br0\">(</span>employees, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">static</span> <span class=\"kw4\">void</span> DisplayTopNPerDepartment<span class=\"br0\">(</span>IEnumerable<span class=\"sy0\">&lt;</span>Employee<span class=\"sy0\">&gt;</span> employees, <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">var</span> topSalariesByDepartment <span class=\"sy0\">=</span><br/>\t\t\t<span class=\"kw1\">from</span> employee <span class=\"kw1\">in</span> employees<br/>\t\t\t<span class=\"kw1\">group</span> employee <span class=\"kw1\">by</span> employee<span class=\"sy0\">.</span><span class=\"me1\">Department</span><br/>\t\t\t<span class=\"kw1\">into</span> g<br/>\t\t\t<span class=\"kw1\">select</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><br/>\t\t\t\t    <span class=\"br0\">{</span><br/>\t\t\t\t\t    Department <span class=\"sy0\">=</span> g<span class=\"sy0\">.</span><span class=\"me1\">Key</span>,<br/>\t\t\t\t\t    TopEmployeesBySalary <span class=\"sy0\">=</span> g<span class=\"sy0\">.</span><span class=\"me1\">OrderByDescending</span><span class=\"br0\">(</span>e <span class=\"sy0\">=&gt;</span> e<span class=\"sy0\">.</span><span class=\"me1\">Salary</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Take</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t\t\t\t    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> x <span class=\"kw1\">in</span> topSalariesByDepartment<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Department: \"</span> <span class=\"sy0\">+</span> x<span class=\"sy0\">.</span><span class=\"me1\">Department</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> employee <span class=\"kw1\">in</span> x<span class=\"sy0\">.</span><span class=\"me1\">TopEmployeesBySalary</span><span class=\"br0\">)</span><br/>\t\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>employee<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tConsole<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"----------------------------\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 42, "block": "<pre class=\"text highlighted_source\">class Employee(name, id, salary, dept) {<br/>    shared String name;<br/>    shared String id;<br/>    shared Integer salary;<br/>    shared String dept;<br/>\u00a0<br/>    string =&gt; \"``name`` ``id`` $``salary``.00 ``dept``\";<br/>}<br/>\u00a0<br/>Employee[] employees = [<br/>    Employee(\"Tyler Bennett\", \"E10297\", 32000, \"D101\"),<br/>    Employee(\"John Rappl\", \"E21437\", 47000, \"D050\"),<br/>    Employee(\"George Woltman\", \"E00127\", 53500, \"D101\"),<br/>    Employee(\"Adam Smith\", \"E63535\", 18000, \"D202\"),<br/>    Employee(\"Claire Buckman\", \"E39876\", 27800, \"D202\"),<br/>    Employee(\"David McClellan\", \"E04242\", 41500, \"D101\"),<br/>    Employee(\"Rich Holcomb\", \"E01234\", 49500, \"D202\"),<br/>    Employee(\"Nathan Adams\", \"E41298\", 21900, \"D050\"),<br/>    Employee(\"Richard Potter\", \"E43128\", 15900, \"D101\"),<br/>    Employee(\"David Motsinger\", \"E27002\", 19250, \"D202\"),<br/>    Employee(\"Tim Sampair\", \"E03033\", 27000, \"D101\"),<br/>    Employee(\"Kim Arlich\", \"E10001\", 57000, \"D190\"),<br/>    Employee(\"Timothy Grove\", \"E16398\", 29900, \"D190\")<br/>];<br/>\u00a0<br/>\"This is the main function.\"<br/>shared void run() {<br/>\u00a0<br/>    value topRanked = topSalaries(employees, 3);<br/>\u00a0<br/>    for (dept -&gt; staff in topRanked) {<br/>        print(dept);<br/>        for (employee in staff) {<br/>            print(\"\\t``employee``\");<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>Map&lt;String, {Employee*}&gt; topSalaries({Employee*} employees, Integer n) =&gt; map {<br/>    for (dept -&gt; staff in employees.group(Employee.dept))<br/>    dept -&gt; staff.sort(byDecreasing(Employee.salary)).take(n)<br/>};</pre>"}, {"lang": "Clojure", "loc": 26, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>use '<span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>contrib<span class=\"sy0\">.</span>seq-utils <span class=\"sy0\">:</span><span class=\"me1\">only</span> <span class=\"br0\">(</span>group-by<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defstruct employee <span class=\"sy0\">:</span><span class=\"kw1\">Name</span> <span class=\"sy0\">:</span><span class=\"me1\">ID</span> <span class=\"sy0\">:</span><span class=\"me1\">Salary</span> <span class=\"sy0\">:</span><span class=\"me1\">Department</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>def data<br/>     <span class=\"br0\">(</span>-<span class=\"sy0\">&gt;&gt;</span> '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Tyler Bennett\"</span> E10297 <span class=\"nu0\">32000</span> D101<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"st0\">\"John Rappl\"</span> E21437 <span class=\"nu0\">47000</span> D050<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"st0\">\"George Woltman\"</span> E00127 <span class=\"nu0\">53500</span> D101<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"st0\">\"Adam Smith\"</span> E63535 <span class=\"nu0\">18000</span> D202<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"st0\">\"Claire Buckman\"</span> E39876 <span class=\"nu0\">27800</span> D202<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"st0\">\"David McClellan\"</span> E04242 <span class=\"nu0\">41500</span> D101<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"st0\">\"Rich Holcomb\"</span> E01234 <span class=\"nu0\">49500</span> D202<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"st0\">\"Nathan Adams\"</span> E41298 <span class=\"nu0\">21900</span> D050<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"st0\">\"Richard Potter\"</span> E43128 <span class=\"nu0\">15900</span> D101<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"st0\">\"David Motsinger\"</span> E27002 <span class=\"nu0\">19250</span> D202<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"st0\">\"Tim Sampair\"</span> E03033 <span class=\"nu0\">27000</span> D101<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"st0\">\"Kim Arlich\"</span> E10001 <span class=\"nu0\">57000</span> D190<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"st0\">\"Timothy Grove\"</span> E16398 <span class=\"nu0\">29900</span> D190<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>map #<span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"br0\">(</span>partial struct employee<span class=\"br0\">)</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span>doseq <span class=\"br0\">[</span><span class=\"br0\">[</span>dep emps<span class=\"br0\">]</span> <span class=\"br0\">(</span>group-by <span class=\"sy0\">:</span><span class=\"me1\">Department</span> data<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>println <span class=\"st0\">\"Department:\"</span> dep<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>doseq <span class=\"br0\">[</span>e <span class=\"br0\">(</span>take <span class=\"nu0\">3</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span>sort-by <span class=\"sy0\">:</span><span class=\"me1\">Salary</span> emps<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>println e<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 34, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> top-n-by-group <span class=\"br0\">(</span>n data value-key group-key predicate <span class=\"sy0\">&amp;</span>key <span class=\"br0\">(</span>group-test '<span class=\"kw1\">eql</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>not-pred <span class=\"br0\">(</span><span class=\"kw1\">complement</span> predicate<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>group-data <span class=\"br0\">(</span>make-hash-table <span class=\"sy0\">:</span><span class=\"me1\">test</span> group-test<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">value</span> <span class=\"br0\">(</span>datum<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> value-key datum<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>insert <span class=\"br0\">(</span>x <span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>merge '<span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> x<span class=\"br0\">)</span> <span class=\"kw1\">list</span> not-pred <span class=\"sy0\">:</span><span class=\"me1\">key</span> #'<span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>entry <span class=\"br0\">(</span>group<span class=\"br0\">)</span><br/>               <span class=\"st0\">\"Return the entry for the group, creating it if<br/>                necessary. An entry is a list whose first element is<br/>                k, the number of items currently associated with the<br/>                group (out of n total), and whose second element is<br/>                the list of the k current top items for the group.\"</span><br/>               <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>entry presentp<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>gethash group group-data<span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">if</span> presentp entry<br/>                   <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>gethash group group-data<span class=\"br0\">)</span><br/>                         <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">0</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>update-entry <span class=\"br0\">(</span>entry datum<span class=\"br0\">)</span><br/>               <span class=\"st0\">\"Update the entry using datum. If there are already n<br/>                items associated with the entry, then when datum's value<br/>                is greater than the current least item, data is merged into<br/>                the items, and the list (minus the first element) is<br/>                stored in entry. Otherwise, if there are fewer than n<br/>                items in the entry, datum is merged in, and the<br/>                entry's k is increased by 1.\"</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"br0\">(</span>first entry<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> predicate <span class=\"br0\">(</span><span class=\"kw1\">value</span> datum<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">value</span> <span class=\"br0\">(</span>first <span class=\"br0\">(</span>second entry<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>second entry<span class=\"br0\">)</span><br/>                         <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span>insert datum <span class=\"br0\">(</span>second entry<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>first entry<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span>first entry<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                       <span class=\"br0\">(</span>second entry<span class=\"br0\">)</span> <span class=\"br0\">(</span>insert datum <span class=\"br0\">(</span>second entry<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>datum data group-data<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>update-entry <span class=\"br0\">(</span>entry <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> group-key datum<span class=\"br0\">)</span><span class=\"br0\">)</span> datum<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 35, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> Employee <span class=\"br0\">{</span><br/>  <span class=\"kw4\">string</span> name<span class=\"sy0\">,</span> id<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">uint</span> salary<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">string</span> department<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">immutable</span> Employee<span class=\"br0\">[</span><span class=\"br0\">]</span> data <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"Tyler Bennett\"</span><span class=\"sy0\">,</span>   <span class=\"st0\">\"E10297\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">32</span>_000<span class=\"sy0\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"John Rappl\"</span><span class=\"sy0\">,</span>      <span class=\"st0\">\"E21437\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">47</span>_000<span class=\"sy0\">,</span> <span class=\"st0\">\"D050\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"George Woltman\"</span><span class=\"sy0\">,</span>  <span class=\"st0\">\"E00127\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">53</span>_500<span class=\"sy0\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"Adam Smith\"</span><span class=\"sy0\">,</span>      <span class=\"st0\">\"E63535\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span>_000<span class=\"sy0\">,</span> <span class=\"st0\">\"D202\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"Claire Buckman\"</span><span class=\"sy0\">,</span>  <span class=\"st0\">\"E39876\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">27</span>_800<span class=\"sy0\">,</span> <span class=\"st0\">\"D202\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"David McClellan\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E04242\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">41</span>_500<span class=\"sy0\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"Rich Holcomb\"</span><span class=\"sy0\">,</span>    <span class=\"st0\">\"E01234\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">49</span>_500<span class=\"sy0\">,</span> <span class=\"st0\">\"D202\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"Nathan Adams\"</span><span class=\"sy0\">,</span>    <span class=\"st0\">\"E41298\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">21</span>_900<span class=\"sy0\">,</span> <span class=\"st0\">\"D050\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"Richard Potter\"</span><span class=\"sy0\">,</span>  <span class=\"st0\">\"E43128\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span>_900<span class=\"sy0\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"David Motsinger\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E27002\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">19</span>_250<span class=\"sy0\">,</span> <span class=\"st0\">\"D202\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"Tim Sampair\"</span><span class=\"sy0\">,</span>     <span class=\"st0\">\"E03033\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">27</span>_000<span class=\"sy0\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"Kim Arlich\"</span><span class=\"sy0\">,</span>      <span class=\"st0\">\"E10001\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">57</span>_000<span class=\"sy0\">,</span> <span class=\"st0\">\"D190\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span><span class=\"st0\">\"Timothy Grove\"</span><span class=\"sy0\">,</span>   <span class=\"st0\">\"E16398\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">29</span>_900<span class=\"sy0\">,</span> <span class=\"st0\">\"D190\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">immutable</span> n <span class=\"sy0\">=</span> <span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> to<span class=\"sy0\">!</span><span class=\"kw4\">int</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  Employee<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw4\">string</span><span class=\"br0\">]</span> departments<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> rec<span class=\"sy0\">;</span> data<span class=\"br0\">)</span><br/>    departments<span class=\"br0\">[</span>rec.<span class=\"me1\">department</span><span class=\"br0\">]</span> <span class=\"sy0\">~=</span> rec<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>dep<span class=\"sy0\">,</span> recs<span class=\"sy0\">;</span> departments<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    recs.<span class=\"me1\">topN</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span>a.<span class=\"me1\">salary</span> <span class=\"sy0\">&gt;</span> b.<span class=\"me1\">salary</span><span class=\"br0\">}</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"Department\u00a0%s<span class=\"es1\">\\n</span> \u00a0%(%s<span class=\"es1\">\\n</span> \u00a0%)<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> dep<span class=\"sy0\">,</span> recs.<span class=\"me1\">take</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 39, "block": "<pre class=\"e highlighted_source\"><span class=\"coMULTI\">/** Turn a list of arrays into a list of maps with the given keys. */</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> addKeys<span class=\"br0\">(</span>keys<span class=\"sy0\">,</span> rows<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> res <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">diverge</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> row <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> rows <span class=\"br0\">{</span> res.<span class=\"me1\">push</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/__makeMap\"><span class=\"kw6\">__makeMap</span></a>.<span class=\"me1\">fromColumns</span><span class=\"br0\">(</span>keys<span class=\"sy0\">,</span> row<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>  return res.<span class=\"me1\">snapshot</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> data <span class=\"sy0\">:=</span> addKeys<span class=\"br0\">(</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"name\"</span><span class=\"sy0\">,</span>            <span class=\"st0\">\"id\"</span><span class=\"sy0\">,</span>  <span class=\"st0\">\"salary\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"dept\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"Tyler Bennett\"</span><span class=\"sy0\">,</span>   <span class=\"st0\">\"E10297\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">32000</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"John Rappl\"</span><span class=\"sy0\">,</span>      <span class=\"st0\">\"E21437\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">47000</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D050\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"George Woltman\"</span><span class=\"sy0\">,</span>  <span class=\"st0\">\"E00127\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">53500</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"Adam Smith\"</span><span class=\"sy0\">,</span>      <span class=\"st0\">\"E63535\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">18000</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D202\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"Claire Buckman\"</span><span class=\"sy0\">,</span>  <span class=\"st0\">\"E39876\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">27800</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D202\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"David McClellan\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E04242\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">41500</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"Rich Holcomb\"</span><span class=\"sy0\">,</span>    <span class=\"st0\">\"E01234\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">49500</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D202\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"Nathan Adams\"</span><span class=\"sy0\">,</span>    <span class=\"st0\">\"E41298\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">21900</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D050\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"Richard Potter\"</span><span class=\"sy0\">,</span>  <span class=\"st0\">\"E43128\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">15900</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"David Motsinger\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"E27002\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">19250</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D202\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"Tim Sampair\"</span><span class=\"sy0\">,</span>     <span class=\"st0\">\"E03033\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">27000</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"Kim Arlich\"</span><span class=\"sy0\">,</span>      <span class=\"st0\">\"E10001\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">57000</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D190\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">[</span><span class=\"st0\">\"Timothy Grove\"</span><span class=\"sy0\">,</span>   <span class=\"st0\">\"E16398\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">29900</span><span class=\"sy0\">,</span> <span class=\"st0\">\"D190\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> topSalaries<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> out<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> groups <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">asMap</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> row <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> data <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> <span class=\"br0\">[</span><span class=\"sy0\">=&gt;</span> salary<span class=\"sy0\">,</span> <span class=\"sy0\">=&gt;</span> dept<span class=\"br0\">]</span> <span class=\"sy0\">|</span> _ <span class=\"sy0\">:=</span> row<br/>        <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> top <span class=\"sy0\">:=</span> groups.<span class=\"me1\">fetch</span><span class=\"br0\">(</span>dept<span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">with</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">-</span>salary<span class=\"sy0\">,</span> row<span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        groups with<span class=\"sy0\">=</span> <span class=\"br0\">(</span>dept<span class=\"sy0\">,</span> top.<span class=\"me1\">run</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> top.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">min</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> dept <span class=\"sy0\">=&gt;</span> group <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> groups.<span class=\"me1\">sortKeys</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        out.<a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">`Department $dept`</span><span class=\"br0\">)</span><br/>        out.<a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">`---------------`</span><span class=\"br0\">)</span><br/>        <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> <span class=\"br0\">[</span>_<span class=\"sy0\">,</span> row<span class=\"br0\">]</span> <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> group <span class=\"br0\">{</span><br/>          out.<a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">`${row[\"id\"]}  $$${row[\"salary\"]}  ${row[\"name\"]}`</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        out.<a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 16, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'struct<span class=\"br0\">)</span> <span class=\"co1\">;; tables are based upon structures</span><br/><span class=\"br0\">(</span>lib 'sql<span class=\"br0\">)</span>  <span class=\"co1\">;; sql-select function</span><br/>\u00a0<br/><span class=\"co1\">;; input table</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> emps  <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>table <span class=\"br0\">(</span>struct emp <span class=\"br0\">(</span>name id salary dept<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; output table</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> high  <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>table <span class=\"br0\">(</span>struct out <span class=\"br0\">(</span>dept name salary<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; sort/group procedure</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>get<span class=\"sy0\">-</span>high num<span class=\"sy0\">-</span>records: N into: high<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>sql<span class=\"sy0\">-</span>select emp.dept emp.name emp.salary <br/>  from emps  <br/>  group<span class=\"sy0\">-</span>by emp.dept <br/>  order<span class=\"sy0\">-</span>by emp.salary desc limit N into high<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 79, "block": "<pre class=\"text highlighted_source\">import system'collections.<br/>import system'routines.<br/>import extensions.<br/>import extensions'routines.<br/>import extensions'text.<br/>\u00a0<br/>class Employee<br/>{<br/>    object theName.<br/>    object theID.<br/>    object theSalary.<br/>    object theDepartment.<br/>\u00a0<br/>    constructor new name:name id:id salary:salary department:department<br/>    [<br/>        theName\u00a0:= name.<br/>        theID\u00a0:= id.<br/>        theSalary\u00a0:= salary.<br/>        theDepartment\u00a0:= department.<br/>    ]<br/>\u00a0<br/>    Name = theName.<br/>\u00a0<br/>    Salary = theSalary.<br/>\u00a0<br/>    Department = theDepartment.<br/>\u00a0<br/>    literal<br/>        = StringWriter new;<br/>            write:theName paddingRight:25;<br/>            write:theID paddingRight:12;<br/>            write(theSalary literal) paddingRight:12;<br/>            write:theDepartment.<br/>}<br/>\u00a0<br/>extension reportOp<br/>{<br/>    topNPerDepartment:n<br/>        = self groupBy(:x)( x Department ); selectBy(:x)<br/>        [<br/>            ^ {<br/>                Department = x key.<br/>\u00a0<br/>                Employees<br/>                    = x orderBy(:f:l)( f Salary &gt; l Salary ); top:n; summarize(ArrayList new).<br/>            }.<br/>        ].<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    var employees\u00a0:=<br/>    (<br/>        Employee new name:\"Tyler Bennett\" id:\"E10297\" salary:32000 department:\"D101\",<br/>        Employee new name:\"John Rappl\" id:\"E21437\" salary:47000 department:\"D050\",<br/>        Employee new name:\"George Woltman\" id:\"E00127\" salary:53500 department:\"D101\",<br/>        Employee new name:\"Adam Smith\" id:\"E63535\" salary:18000 department:\"D202\",<br/>        Employee new name:\"Claire Buckman\" id:\"E39876\" salary:27800 department:\"D202\",<br/>        Employee new name:\"David McClellan\" id:\"E04242\" salary:41500 department:\"D101\",<br/>        Employee new name:\"Rich Holcomb\" id:\"E01234\" salary:49500 department:\"D202\",<br/>        Employee new name:\"Nathan Adams\" id:\"E41298\" salary:21900 department:\"D050\",<br/>        Employee new name:\"Richard Potter\" id:\"E43128\" salary:15900 department:\"D101\",<br/>        Employee new name:\"David Motsinger\" id:\"E27002\" salary:19250 department:\"D202\",<br/>        Employee new name:\"Tim Sampair\" id:\"E03033\" salary:27000 department:\"D101\",<br/>        Employee new name:\"Kim Arlich\" id:\"E10001\" salary:57000 department:\"D190\",<br/>        Employee new name:\"Timothy Grove\" id:\"E16398\" salary:29900 department:\"D190\"<br/>    ).<br/>\u00a0<br/>    employees topNPerDepartment:2; forEach(:info)<br/>    [<br/>        console printLine(\"Department: \",info Department).<br/>\u00a0<br/>        info Employees; forEach:printingLn.<br/>\u00a0<br/>        console writeLine:\"---------------------------------------------\"<br/>    ].<br/>\u00a0<br/>    console readChar<br/>].</pre>"}, {"lang": "Elixir", "loc": 36, "block": "<pre class=\"text highlighted_source\">defmodule TopRank do<br/>  def per_groupe(data, n) do<br/>    String.split(data, ~r/(\\n|\\r\\n|\\r)/, trim: true)<br/>    |&gt; Enum.drop(1)<br/>    |&gt; Enum.map(fn person -&gt; String.split(person,\",\") end)<br/>    |&gt; Enum.group_by(fn person -&gt; department(person) end)<br/>    |&gt; Enum.each(fn {department,group} -&gt;<br/>         IO.puts \"Department: #{department}\"<br/>         Enum.sort_by(group, fn person -&gt; -salary(person) end)<br/>         |&gt; Enum.take(n)<br/>         |&gt; Enum.each(fn person -&gt; IO.puts str_format(person) end)<br/>       end)<br/>  end<br/>\u00a0<br/>  defp salary([_,_,x,_]), do: String.to_integer(x)<br/>  defp department([_,_,_,x]), do: x<br/>  defp str_format([a,b,c,_]), do: \"  #{a} - #{b} - #{c} annual salary\"<br/>end<br/>\u00a0<br/>data = \"\"\"<br/>Employee Name,Employee ID,Salary,Department<br/>Tyler Bennett,E10297,32000,D101<br/>John Rappl,E21437,47000,D050<br/>George Woltman,E00127,53500,D101<br/>Adam Smith,E63535,18000,D202<br/>Claire Buckman,E39876,27800,D202<br/>David McClellan,E04242,41500,D101<br/>Rich Holcomb,E01234,49500,D202<br/>Nathan Adams,E41298,21900,D050<br/>Richard Potter,E43128,15900,D101<br/>David Motsinger,E27002,19250,D202<br/>Tim Sampair,E03033,27000,D101<br/>Kim Arlich,E10001,57000,D190<br/>Timothy Grove,E16398,29900,D190<br/>\"\"\"<br/>TopRank.per_groupe(data, 3)</pre>"}, {"lang": "Erlang", "loc": 40, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">&lt;-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> top_rank_per_group  <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>employees<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> employees_in_department<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> highest_payed<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">record</span><span class=\"br0\">(</span> employee<span class=\"sy1\">,</span> <span class=\"br0\">{</span>name<span class=\"sy1\">,</span> id<span class=\"sy1\">,</span> salery<span class=\"sy1\">,</span> department<span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">employees</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">[</span>#<span class=\"re7\">employee</span><span class=\"br0\">{</span>name<span class=\"sy3\">=</span><span class=\"st0\">\"Tyler Bennett\"</span><span class=\"sy1\">,</span> id<span class=\"sy3\">=</span><span class=\"st0\">\"E10297\"</span><span class=\"sy1\">,</span> salery<span class=\"sy3\">=</span><span class=\"nu0\">32000</span><span class=\"sy1\">,</span> department<span class=\"sy3\">=</span><span class=\"st0\">\"D101\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t#<span class=\"re7\">employee</span><span class=\"br0\">{</span>name<span class=\"sy3\">=</span><span class=\"st0\">\"John Rappl\"</span><span class=\"sy1\">,</span> id<span class=\"sy3\">=</span><span class=\"st0\">\"E21437\"</span><span class=\"sy1\">,</span> salery<span class=\"sy3\">=</span><span class=\"nu0\">47000</span><span class=\"sy1\">,</span> department<span class=\"sy3\">=</span><span class=\"st0\">\"D101\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t#<span class=\"re7\">employee</span><span class=\"br0\">{</span>name<span class=\"sy3\">=</span><span class=\"st0\">\"George Woltman\"</span><span class=\"sy1\">,</span> id<span class=\"sy3\">=</span><span class=\"st0\">\"E00127\"</span><span class=\"sy1\">,</span> salery<span class=\"sy3\">=</span><span class=\"nu0\">53500</span><span class=\"sy1\">,</span> department<span class=\"sy3\">=</span><span class=\"st0\">\"D050\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t#<span class=\"re7\">employee</span><span class=\"br0\">{</span>name<span class=\"sy3\">=</span><span class=\"st0\">\"Adam Smith\"</span><span class=\"sy1\">,</span> id<span class=\"sy3\">=</span><span class=\"st0\">\"E63535\"</span><span class=\"sy1\">,</span> salery<span class=\"sy3\">=</span><span class=\"nu0\">18000</span><span class=\"sy1\">,</span> department<span class=\"sy3\">=</span><span class=\"st0\">\"D202\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t#<span class=\"re7\">employee</span><span class=\"br0\">{</span>name<span class=\"sy3\">=</span><span class=\"st0\">\"Claire Buckman\"</span><span class=\"sy1\">,</span> id<span class=\"sy3\">=</span><span class=\"st0\">\"E39876\"</span><span class=\"sy1\">,</span> salery<span class=\"sy3\">=</span><span class=\"nu0\">27800</span><span class=\"sy1\">,</span> department<span class=\"sy3\">=</span><span class=\"st0\">\"D202\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t#<span class=\"re7\">employee</span><span class=\"br0\">{</span>name<span class=\"sy3\">=</span><span class=\"st0\">\"David McClellan\"</span><span class=\"sy1\">,</span> id<span class=\"sy3\">=</span><span class=\"st0\">\"E04242\"</span><span class=\"sy1\">,</span> salery<span class=\"sy3\">=</span><span class=\"nu0\">41500</span><span class=\"sy1\">,</span> department<span class=\"sy3\">=</span><span class=\"st0\">\"D101\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t#<span class=\"re7\">employee</span><span class=\"br0\">{</span>name<span class=\"sy3\">=</span><span class=\"st0\">\"Rich Holcomb\"</span><span class=\"sy1\">,</span> id<span class=\"sy3\">=</span><span class=\"st0\">\"E01234\"</span><span class=\"sy1\">,</span> salery<span class=\"sy3\">=</span><span class=\"nu0\">49500</span><span class=\"sy1\">,</span> department<span class=\"sy3\">=</span><span class=\"st0\">\"D202\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t#<span class=\"re7\">employee</span><span class=\"br0\">{</span>name<span class=\"sy3\">=</span><span class=\"st0\">\"Nathan Adams\"</span><span class=\"sy1\">,</span> id<span class=\"sy3\">=</span><span class=\"st0\">\"E41298\"</span><span class=\"sy1\">,</span> salery<span class=\"sy3\">=</span><span class=\"nu0\">21900</span><span class=\"sy1\">,</span> department<span class=\"sy3\">=</span><span class=\"st0\">\"D050\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t#<span class=\"re7\">employee</span><span class=\"br0\">{</span>name<span class=\"sy3\">=</span><span class=\"st0\">\"Richard Potter\"</span><span class=\"sy1\">,</span> id<span class=\"sy3\">=</span><span class=\"st0\">\"E43128\"</span><span class=\"sy1\">,</span> salery<span class=\"sy3\">=</span><span class=\"nu0\">15900</span><span class=\"sy1\">,</span> department<span class=\"sy3\">=</span><span class=\"st0\">\"D101\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t#<span class=\"re7\">employee</span><span class=\"br0\">{</span>name<span class=\"sy3\">=</span><span class=\"st0\">\"David Motsinger\"</span><span class=\"sy1\">,</span> id<span class=\"sy3\">=</span><span class=\"st0\">\"E27002\"</span><span class=\"sy1\">,</span> salery<span class=\"sy3\">=</span><span class=\"nu0\">19250</span><span class=\"sy1\">,</span> department<span class=\"sy3\">=</span><span class=\"st0\">\"D202\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t#<span class=\"re7\">employee</span><span class=\"br0\">{</span>name<span class=\"sy3\">=</span><span class=\"st0\">\"Tim Sampair\"</span><span class=\"sy1\">,</span> id<span class=\"sy3\">=</span><span class=\"st0\">\"E03033\"</span><span class=\"sy1\">,</span> salery<span class=\"sy3\">=</span><span class=\"nu0\">27000</span><span class=\"sy1\">,</span> department<span class=\"sy3\">=</span><span class=\"st0\">\"D101\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t#<span class=\"re7\">employee</span><span class=\"br0\">{</span>name<span class=\"sy3\">=</span><span class=\"st0\">\"Kim Arlich\"</span><span class=\"sy1\">,</span> id<span class=\"sy3\">=</span><span class=\"st0\">\"E10001\"</span><span class=\"sy1\">,</span> salery<span class=\"sy3\">=</span><span class=\"nu0\">57000</span><span class=\"sy1\">,</span> department<span class=\"sy3\">=</span><span class=\"st0\">\"D190\"</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>\t\t#<span class=\"re7\">employee</span><span class=\"br0\">{</span>name<span class=\"sy3\">=</span><span class=\"st0\">\"Timothy Grove\"</span><span class=\"sy1\">,</span> id<span class=\"sy3\">=</span><span class=\"st0\">\"E16398\"</span><span class=\"sy1\">,</span> salery<span class=\"sy3\">=</span><span class=\"nu0\">29900</span><span class=\"sy1\">,</span> department<span class=\"sy3\">=</span><span class=\"st0\">\"D190\"</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">employees_in_department</span><span class=\"br0\">(</span> <span class=\"re5\">Department</span><span class=\"sy1\">,</span> <span class=\"re5\">Employees</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">||</span> #<span class=\"re7\">employee</span><span class=\"br0\">{</span>department<span class=\"sy3\">=</span><span class=\"re5\">D</span><span class=\"br0\">}</span><span class=\"sy3\">=</span><span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Employees</span><span class=\"sy1\">,</span> <span class=\"re5\">D</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">Department</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">highest_payed</span><span class=\"br0\">(</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Employees</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">Highest</span><span class=\"sy1\">,</span> <span class=\"re5\">_T</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">split</span><span class=\"br0\">(</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">keysort</span><span class=\"br0\">(</span>#<span class=\"re7\">employee</span><span class=\"sy1\">.</span>salery<span class=\"sy1\">,</span> <span class=\"re5\">Employees</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Highest</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Employees</span> <span class=\"sy3\">=</span> <span class=\"re3\">employees</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Departments</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">usort</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">||</span> #<span class=\"re7\">employee</span><span class=\"br0\">{</span>department<span class=\"sy3\">=</span><span class=\"re5\">X</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Employees</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Employees_in_departments</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re3\">employees_in_department</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Employees</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Departments</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Highest_payed_in_departments</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re3\">highest_payed</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Xs</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">Xs</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Employees_in_departments</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">[</span><span class=\"re3\">task_write</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Highest_payed_in_departments</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">task_write</span><span class=\"br0\">(</span> <span class=\"re5\">Highest_payeds</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"~p ~p: ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Department</span><span class=\"sy1\">,</span> <span class=\"re5\">Salery</span><span class=\"sy1\">,</span> <span class=\"re5\">Name</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> #<span class=\"re7\">employee</span><span class=\"br0\">{</span>department<span class=\"sy3\">=</span><span class=\"re5\">Department</span><span class=\"sy1\">,</span> salery<span class=\"sy3\">=</span><span class=\"re5\">Salery</span><span class=\"sy1\">,</span> name<span class=\"sy3\">=</span><span class=\"re5\">Name</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Highest_payeds</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">nl</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 20, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> data <span class=\"sy0\">=</span><br/>  <span class=\"br0\">[</span><br/>    <span class=\"st0\">\"Tyler Bennett\"</span>,   <span class=\"st0\">\"E10297\"</span>,  <span class=\"nu0\">32000</span>,  <span class=\"st0\">\"D101\"</span><span class=\"sy0\">;</span>   <br/>    <span class=\"st0\">\"John Rappl\"</span>,      <span class=\"st0\">\"E21437\"</span>,  <span class=\"nu0\">47000</span>,  <span class=\"st0\">\"D050\"</span><span class=\"sy0\">;</span>   <br/>    <span class=\"st0\">\"George Woltman\"</span>,  <span class=\"st0\">\"E00127\"</span>,  <span class=\"nu0\">53500</span>,  <span class=\"st0\">\"D101\"</span><span class=\"sy0\">;</span>   <br/>    <span class=\"st0\">\"Adam Smith\"</span>,      <span class=\"st0\">\"E63535\"</span>,  <span class=\"nu0\">18000</span>,  <span class=\"st0\">\"D202\"</span><span class=\"sy0\">;</span>   <br/>    <span class=\"st0\">\"Claire Buckman\"</span>,  <span class=\"st0\">\"E39876\"</span>,  <span class=\"nu0\">27800</span>,  <span class=\"st0\">\"D202\"</span><span class=\"sy0\">;</span>   <br/>    <span class=\"st0\">\"David McClellan\"</span>, <span class=\"st0\">\"E04242\"</span>,  <span class=\"nu0\">41500</span>,  <span class=\"st0\">\"D101\"</span><span class=\"sy0\">;</span>   <br/>    <span class=\"st0\">\"Rich Holcomb\"</span>,    <span class=\"st0\">\"E01234\"</span>,  <span class=\"nu0\">49500</span>,  <span class=\"st0\">\"D202\"</span><span class=\"sy0\">;</span>   <br/>    <span class=\"st0\">\"Nathan Adams\"</span>,    <span class=\"st0\">\"E41298\"</span>,  <span class=\"nu0\">21900</span>,  <span class=\"st0\">\"D050\"</span><span class=\"sy0\">;</span>   <br/>    <span class=\"st0\">\"Richard Potter\"</span>,  <span class=\"st0\">\"E43128\"</span>,  <span class=\"nu0\">15900</span>,  <span class=\"st0\">\"D101\"</span><span class=\"sy0\">;</span>   <br/>    <span class=\"st0\">\"David Motsinger\"</span>, <span class=\"st0\">\"E27002\"</span>,  <span class=\"nu0\">19250</span>,  <span class=\"st0\">\"D202\"</span><span class=\"sy0\">;</span>   <br/>    <span class=\"st0\">\"Tim Sampair\"</span>,     <span class=\"st0\">\"E03033\"</span>,  <span class=\"nu0\">27000</span>,  <span class=\"st0\">\"D101\"</span><span class=\"sy0\">;</span>   <br/>    <span class=\"st0\">\"Kim Arlich\"</span>,      <span class=\"st0\">\"E10001\"</span>,  <span class=\"nu0\">57000</span>,  <span class=\"st0\">\"D190\"</span><span class=\"sy0\">;</span>   <br/>    <span class=\"st0\">\"Timothy Grove\"</span>,   <span class=\"st0\">\"E16398\"</span>,  <span class=\"nu0\">29900</span>,  <span class=\"st0\">\"D190\"</span><span class=\"sy0\">;</span>   <br/>  <span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> topRank n <span class=\"sy0\">=</span><br/>  <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">groupBy</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>_, _, _, d<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> d<span class=\"br0\">)</span> data<br/>  <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw3\">snd</span> <span class=\"sy0\">&gt;&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">sortBy</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>_, _, s, _<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">-</span>s<span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">take</span> n<span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 42, "block": "<pre class=\"text highlighted_source\">USING: accessors assocs fry io kernel math.parser sequences<br/>sorting\u00a0;<br/>IN: top-rank<br/>\u00a0<br/>TUPLE: employee name id salary department\u00a0;<br/>\u00a0<br/>CONSTANT: employees {<br/>        T{ employee f \"Tyler Bennett\" \"E10297\" 32000 \"D101\" }<br/>        T{ employee f \"John Rappl\" \"E21437\" 47000 \"D050\" }<br/>        T{ employee f \"George Woltman\" \"E00127\" 53500 \"D101\" }<br/>        T{ employee f \"Adam Smith\" \"E63535\" 18000 \"D202\" }<br/>        T{ employee f \"Claire Buckman\" \"E39876\" 27800 \"D202\" }<br/>        T{ employee f \"David McClellan\" \"E04242\" 41500 \"D101\" }<br/>        T{ employee f \"Rich Holcomb\" \"E01234\" 49500 \"D202\" }<br/>        T{ employee f \"Nathan Adams\" \"E41298\" 21900 \"D050\" }<br/>        T{ employee f \"Richard Potter\" \"E43128\" 15900 \"D101\" }<br/>        T{ employee f \"David Motsinger\" \"E27002\" 19250 \"D202\" }<br/>        T{ employee f \"Tim Sampair\" \"E03033\" 27000 \"D101\" }<br/>        T{ employee f \"Kim Arlich\" \"E10001\" 57000 \"D190\" }<br/>        T{ employee f \"Timothy Grove\" \"E16398\" 29900 \"D190\" }<br/>    }<br/>\u00a0<br/>: group-by ( seq quot -- hash )<br/>    H{ } clone [ '[ dup @ _ push-at ] each ] keep\u00a0; inline<br/>\u00a0<br/>: prepare-departments ( seq -- departments )<br/>    [ department&gt;&gt; ] group-by<br/>    [ [ salary&gt;&gt; ] inv-sort-with ] assoc-map\u00a0;<br/>\u00a0<br/>: first-n-each ( seq n quot -- )<br/>    [ short head-slice ] dip each\u00a0; inline<br/>\u00a0<br/>: main ( -- )<br/>    employees prepare-departments [<br/>        [ \"Department \" write write \":\" print ] dip<br/>        3 [<br/>            [ id&gt;&gt; write \"  $\" write ]<br/>            [ salary&gt;&gt; number&gt;string write \"  \" write ]<br/>            [ name&gt;&gt; print ] tri<br/>        ] first-n-each<br/>        nl<br/>    ] assoc-each\u00a0;</pre>"}, {"lang": "Forth", "loc": 131, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\\ Written in ANS-Forth; tested under VFX.<br/>\\ Requires the novice package: http://www.forth.org/novice.html<br/>\\ The following should already be done:<br/>\\ include novice.4th<br/>\\ include list.4th<br/>\u00a0<br/>marker TopRank.4th<br/>\u00a0<br/>\\ This demonstrates how I typically use lists. A program such as this does not need any explicit iteration, so it is more like Factor than C.<br/>\\ I would define high-level languages as those that allow programs to be written without explicit iteration. Iteration is a major source of bugs.<br/>\\ The C library has QSORT that hides iteration, but user-written code very rarely uses this technique, and doesn't in the TopRank example.<br/>\u00a0<br/>\u00a0<br/>\\ ******<br/>\\ ****** The following defines our data-structure.<br/>\\ ****** Pretty much every struct definition has these basic functions.<br/>\\ ******<br/>\u00a0<br/>list<br/>    w field .name       \\ string<br/>    w field .id         \\ string<br/>    w field .salary     \\ integer<br/>    w field .dept       \\ string<br/>constant employee<br/>\u00a0<br/>: init-employee ( name id salary department node -- node )<br/>    init-list &gt;r<br/>    hstr    <a class=\"__cf_email__\" data-cfemail=\"9feddf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> .dept\u00a0!<br/>            <a class=\"__cf_email__\" data-cfemail=\"fb89bb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> .salary\u00a0!<br/>    hstr    <a class=\"__cf_email__\" data-cfemail=\"d3a193\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> .id\u00a0!<br/>    hstr    <a class=\"__cf_email__\" data-cfemail=\"077547\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> .name\u00a0!<br/>    r&gt;\u00a0;<br/>\u00a0<br/>: new-employee ( name id salary dept -- node )<br/>    employee alloc<br/>    init-employee\u00a0;<br/>\u00a0<br/>: &lt;kill-employee&gt; ( node -- )<br/>    dup .name @     dealloc<br/>    dup .id @       dealloc<br/>    dup .dept @     dealloc<br/>    dealloc\u00a0;<br/>\u00a0<br/>: kill-employee ( head -- )<br/>    each[  &lt;kill-employee&gt;  ]each\u00a0;<br/>\u00a0<br/>: &lt;clone-employee&gt; ( node -- new-node )<br/>    clone-node<br/>    dup .name @     hstr    over .name\u00a0!<br/>    dup .id @       hstr    over .id\u00a0!<br/>    dup .dept @     hstr    over .dept\u00a0!\u00a0;<br/>\u00a0<br/>: clone-employee ( head -- new-head )    <br/>    nil<br/>    swap each[  &lt;clone-employee&gt; link  ]each\u00a0;<br/>\u00a0<br/>: &lt;show-employee&gt; ( node -- )<br/>    dup .id @       count type  4 spaces<br/>    dup .dept @     count type  4 spaces<br/>    dup .salary @   .           4 spaces<br/>    dup .name @     count type  cr<br/>    drop\u00a0;<br/>\u00a0<br/>: show-employee ( head -- )    <br/>    cr<br/>    each[  &lt;show-employee&gt;  ]each\u00a0;<br/>\u00a0<br/>\u00a0<br/>\\ ******<br/>\\ ****** The following code is specific to the query that we want to do in this example problem.<br/>\\ ******<br/>\u00a0<br/>: employee-dept-salary ( new-node node -- new-node\u00a0? )                      \\ for use by FIND-PRIOR or INSERT-ORDERED<br/>    2dup  <br/>    .dept @ count   rot .dept @ count   compare    \u00a0?dup if  A&gt;B =  nip exit then<br/>    .salary @       over .salary @      &lt;\u00a0;<br/>\u00a0<br/>: &lt;top&gt; ( n rank current-dept head node -- n rank current-dept head )    <br/>    2&gt;r                         \\ -- n rank current-dept<br/>    dup count  <a class=\"__cf_email__\" data-cfemail=\"f082b0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> .dept @ count  compare  A=B &lt;&gt; if                         \\ we have a new department<br/>        2drop                                                               \\ discard RANK and CURRENT-DEPT<br/>        0  <a class=\"__cf_email__\" data-cfemail=\"c8ba88\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> .dept @  then                                                 \\ start again with a new RANK and CURRENT-DEPT<br/>    rover rover &gt; if                                                        \\ if N &gt; RANK then it is good<br/>        r&gt; r&gt;  over             \\ -- n rank current-dept node head node<br/>        &lt;clone-employee&gt; link   \\ -- n rank current-dept node head<br/>        &gt;r &gt;r  then             \\ -- n rank current-dept<br/>    swap 1+  swap                                                           \\ increment RANK<br/>    rdrop  r&gt;\u00a0;                 \\ -- n rank current-dept head<br/>\u00a0<br/>: top ( n head -- new-head )    \\ make a new list of the top N salary earners in each dept      \\ requires that list be sorted by dept-salary<br/>    &gt;r<br/>    0  c\" xxx\"  nil             \\ -- n rank current-dept new-head           \\ initially for an invalid department<br/>    r&gt;  ['] &lt;top&gt;  each <br/>    3nip\u00a0;<br/>\u00a0<br/>\u00a0<br/>\\ ******<br/>\\ ****** The following is a test of the program using sample data.<br/>\\ ******<br/>\u00a0<br/>nil  ' employee-dept-salary<br/>c\" Tyler Bennett\"       c\" E10297\"  32000  c\" D101\"     new-employee  insert-ordered<br/>c\" John Rappl\"          c\" E21437\"  47000  c\" D050\"     new-employee  insert-ordered<br/>c\" George Woltman\"      c\" E00127\"  53500  c\" D101\"     new-employee  insert-ordered<br/>c\" Adam Smith\"          c\" E63535\"  18000  c\" D202\"     new-employee  insert-ordered<br/>c\" Claire Buckman\"      c\" E39876\"  27800  c\" D202\"     new-employee  insert-ordered<br/>c\" David McClellan\"     c\" E04242\"  41500  c\" D101\"     new-employee  insert-ordered<br/>c\" Rich Holcomb\"        c\" E01234\"  49500  c\" D202\"     new-employee  insert-ordered<br/>c\" Nathan Adams\"        c\" E41298\"  21900  c\" D050\"     new-employee  insert-ordered<br/>c\" Richard Potter\"      c\" E43128\"  15900  c\" D101\"     new-employee  insert-ordered<br/>c\" David Motsinger\"     c\" E27002\"  19250  c\" D202\"     new-employee  insert-ordered<br/>c\" Tim Sampair\"         c\" E03033\"  27000  c\" D101\"     new-employee  insert-ordered<br/>c\" Kim Arlich\"          c\" E10001\"  57000  c\" D190\"     new-employee  insert-ordered<br/>c\" Timothy Grove\"       c\" E16398\"  29900  c\" D190\"     new-employee  insert-ordered<br/>drop  constant test-data<br/>\u00a0<br/>cr .( N = 0 )<br/>0 test-data top  dup show-employee  kill-employee<br/>\u00a0<br/>cr .( N = 1 )<br/>1 test-data top  dup show-employee  kill-employee<br/>\u00a0<br/>cr .( N = 2 )<br/>2 test-data top  dup show-employee  kill-employee<br/>\u00a0<br/>cr .( N = 3 )<br/>3 test-data top  dup show-employee  kill-employee<br/>\u00a0<br/>test-data kill-employee<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 5, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw3\">DATA</span> EMPLOYEE<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><br/>     <span class=\"nu0\">1</span> GRIST<span class=\"br0\">(</span><span class=\"st0\">\"Tyler Bennett\"</span>,<span class=\"st0\">\"E10297\"</span>,<span class=\"nu0\">32000</span>,<span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span>,<br/>     <span class=\"nu0\">2</span> GRIST<span class=\"br0\">(</span><span class=\"st0\">\"John Rappl\"</span>,<span class=\"st0\">\"E21437\"</span>,<span class=\"nu0\">47000</span>,<span class=\"st0\">\"D050\"</span><span class=\"br0\">)</span>,<br/>     <span class=\"nu0\">3</span> GRIST<span class=\"br0\">(</span><span class=\"st0\">\"George Woltman\"</span>,<span class=\"st0\">\"E00127\"</span>,<span class=\"nu0\">53500</span>,<span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><br/>\u00a0</pre>"}, {"lang": "FunL", "loc": 27, "block": "<pre class=\"text highlighted_source\">data Employee( name, id, salary, dept )<br/>\u00a0<br/>employees = [<br/>  Employee( 'Tyler Bennett', 'E10297', 32000, 'D101' ),<br/>  Employee( 'John Rappl', 'E21437', 47000, 'D050' ),<br/>  Employee( 'George Woltman', 'E00127', 53500, 'D101' ),<br/>  Employee( 'Adam Smith', 'E63535', 18000, 'D202' ),<br/>  Employee( 'Claire Buckman', 'E39876', 27800, 'D202' ),<br/>  Employee( 'David McClellan', 'E04242', 41500, 'D101' ),<br/>  Employee( 'Rich Holcomb', 'E01234', 49500, 'D202' ),<br/>  Employee( 'Nathan Adams', 'E41298', 21900, 'D050' ),<br/>  Employee( 'Richard Potter', 'E43128', 15900, 'D101' ),<br/>  Employee( 'David Motsinger', 'E27002', 19250, 'D202' ),<br/>  Employee( 'Tim Sampair', 'E03033', 27000, 'D101' ),<br/>  Employee( 'Kim Arlich', 'E10001', 57000, 'D190' ),<br/>  Employee( 'Timothy Grove', 'E16398', 29900, 'D190' )<br/>  ]<br/>\u00a0<br/>N = 2<br/>\u00a0<br/>for (dept, empl) &lt;- employees.groupBy( e -&gt; e.dept ).&gt;toList().sortWith( (&lt;) )<br/>  println( dept )<br/>\u00a0<br/>  for e &lt;- empl.sortWith( \\a, b -&gt; a.salary &gt; b.salary ).take( N )<br/>    printf( \"   \u00a0%-16s \u00a0%6s \u00a0%7d\\n\", e.name, e.id, e.salary )<br/>\u00a0<br/>  println()</pre>"}, {"lang": "Go", "loc": 121, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"sort\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// language-native data description</span><br/><span class=\"kw1\">type</span> Employee <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>\tName<span class=\"sy1\">,</span> ID <span class=\"kw4\">string</span><br/>\tSalary   <span class=\"kw4\">int</span><br/>\tDept     <span class=\"kw4\">string</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> EmployeeList <span class=\"sy1\">[]</span><span class=\"sy3\">*</span>Employee<br/>\u00a0<br/><span class=\"kw1\">var</span> data <span class=\"sy2\">=</span> EmployeeList<span class=\"sy1\">{</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"Tyler Bennett\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"E10297\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">32000</span><span class=\"sy1\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"John Rappl\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"E21437\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">47000</span><span class=\"sy1\">,</span> <span class=\"st0\">\"D050\"</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"George Woltman\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"E00127\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">53500</span><span class=\"sy1\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"Adam Smith\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"E63535\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">18000</span><span class=\"sy1\">,</span> <span class=\"st0\">\"D202\"</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"Claire Buckman\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"E39876\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">27800</span><span class=\"sy1\">,</span> <span class=\"st0\">\"D202\"</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"David McClellan\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"E04242\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">41500</span><span class=\"sy1\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"Rich Holcomb\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"E01234\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">49500</span><span class=\"sy1\">,</span> <span class=\"st0\">\"D202\"</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"Nathan Adams\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"E41298\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">21900</span><span class=\"sy1\">,</span> <span class=\"st0\">\"D050\"</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"Richard Potter\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"E43128\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">15900</span><span class=\"sy1\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"David Motsinger\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"E27002\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">19250</span><span class=\"sy1\">,</span> <span class=\"st0\">\"D202\"</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"Tim Sampair\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"E03033\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">27000</span><span class=\"sy1\">,</span> <span class=\"st0\">\"D101\"</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"Kim Arlich\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"E10001\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">57000</span><span class=\"sy1\">,</span> <span class=\"st0\">\"D190\"</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"Timothy Grove\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"E16398\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">29900</span><span class=\"sy1\">,</span> <span class=\"st0\">\"D190\"</span><span class=\"sy1\">},</span><br/>\t<span class=\"co1\">// Extra data to demonstrate ties</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"Tie A\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"E16399\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">29900</span><span class=\"sy1\">,</span> <span class=\"st0\">\"D190\"</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"Tie B\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"E16400\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">29900</span><span class=\"sy1\">,</span> <span class=\"st0\">\"D190\"</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"st0\">\"No Tie\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"E16401\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">29899</span><span class=\"sy1\">,</span> <span class=\"st0\">\"D190\"</span><span class=\"sy1\">},</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// We only need one type of ordering/grouping for this task so we could directly</span><br/><span class=\"co1\">// implement sort.Interface on EmployeeList (or a byDeptSalary alias type) with</span><br/><span class=\"co1\">// the appropriate Less method.</span><br/><span class=\"co1\">//</span><br/><span class=\"co1\">// Instead, we'll add a bit here that makes it easier to use arbitrary orderings.</span><br/><span class=\"co1\">// This is like the \"SortKeys\" Planet sorting example in the sort package</span><br/><span class=\"co1\">// documentation, see https://golang.org/pkg/sort</span><br/>\u00a0<br/><span class=\"kw1\">type</span> By <span class=\"kw4\">func</span><span class=\"sy1\">(</span>e1<span class=\"sy1\">,</span> e2 <span class=\"sy3\">*</span>Employee<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span><br/><span class=\"kw1\">type</span> employeeSorter <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>\tlist EmployeeList<br/>\tby   <span class=\"kw4\">func</span><span class=\"sy1\">(</span>e1<span class=\"sy1\">,</span> e2 <span class=\"sy3\">*</span>Employee<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>by By<span class=\"sy1\">)</span> Sort<span class=\"sy1\">(</span>list EmployeeList<span class=\"sy1\">)</span>         <span class=\"sy1\">{</span> sort<span class=\"sy3\">.</span>Sort<span class=\"sy1\">(</span>&amp;employeeSorter<span class=\"sy1\">{</span>list<span class=\"sy1\">,</span> by<span class=\"sy1\">})</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s <span class=\"sy3\">*</span>employeeSorter<span class=\"sy1\">)</span> Len<span class=\"sy1\">()</span> <span class=\"kw4\">int</span>           <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy3\">.</span>list<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s <span class=\"sy3\">*</span>employeeSorter<span class=\"sy1\">)</span> Swap<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span>      <span class=\"sy1\">{</span> s<span class=\"sy3\">.</span>list<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> s<span class=\"sy3\">.</span>list<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> s<span class=\"sy3\">.</span>list<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> s<span class=\"sy3\">.</span>list<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s <span class=\"sy3\">*</span>employeeSorter<span class=\"sy1\">)</span> Less<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> s<span class=\"sy3\">.</span>by<span class=\"sy1\">(</span>s<span class=\"sy3\">.</span>list<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> s<span class=\"sy3\">.</span>list<span class=\"sy1\">[</span>j<span class=\"sy1\">])</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// For this specific task we could just write the data to an io.Writer</span><br/><span class=\"co1\">// but in general it's better to return the data in a usable form (for</span><br/><span class=\"co1\">// example, perhaps other code want's to do something like compare the</span><br/><span class=\"co1\">// averages of the top N by department).</span><br/><span class=\"co1\">//</span><br/><span class=\"co1\">// So we go through the extra effort of returning an []EmployeeList, a</span><br/><span class=\"co1\">// list of employee lists, one per deparment. The lists are trimmed to</span><br/><span class=\"co1\">// to the top 'n', which can be larger than n if there are ties for the</span><br/><span class=\"co1\">// nth salary (callers that don't care about ties could just trim more.)</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>el EmployeeList<span class=\"sy1\">)</span> TopSalariesByDept<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span>EmployeeList <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">if</span> n &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>el<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">nil</span><br/>\t<span class=\"sy1\">}</span><br/>\tdeptSalary <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>e1<span class=\"sy1\">,</span> e2 <span class=\"sy3\">*</span>Employee<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> e1<span class=\"sy3\">.</span>Dept <span class=\"sy2\">!=</span> e2<span class=\"sy3\">.</span>Dept <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> e1<span class=\"sy3\">.</span>Dept &lt; e2<span class=\"sy3\">.</span>Dept<br/>\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"kw1\">if</span> e1<span class=\"sy3\">.</span>Salary <span class=\"sy2\">!=</span> e2<span class=\"sy3\">.</span>Salary <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> e1<span class=\"sy3\">.</span>Salary &gt; e2<span class=\"sy3\">.</span>Salary<br/>\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"co1\">// Always have some unique field as the last one in a sort list</span><br/>\t\t<span class=\"kw1\">return</span> e1<span class=\"sy3\">.</span>ID &lt; e2<span class=\"sy3\">.</span>ID<br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">// We could just sort the data in place for this task. But</span><br/>\t<span class=\"co1\">// perhaps messing with the order is undesirable or there is</span><br/>\t<span class=\"co1\">// other concurrent access. So we'll make a copy and sort that.</span><br/>\t<span class=\"co1\">// It's just pointers so the amount to copy is relatively small.</span><br/>\tsorted <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>EmployeeList<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>el<span class=\"sy1\">))</span><br/>\t<span class=\"kw3\">copy</span><span class=\"sy1\">(</span>sorted<span class=\"sy1\">,</span> el<span class=\"sy1\">)</span><br/>\tBy<span class=\"sy1\">(</span>deptSalary<span class=\"sy1\">)</span><span class=\"sy3\">.</span>Sort<span class=\"sy1\">(</span>sorted<span class=\"sy1\">)</span><br/>\u00a0<br/>\tperDept <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span>EmployeeList<span class=\"sy1\">{}</span><br/>\t<span class=\"kw1\">var</span> lastDept <span class=\"kw4\">string</span><br/>\t<span class=\"kw1\">var</span> lastSalary <span class=\"kw4\">int</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> sorted <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> e<span class=\"sy3\">.</span>Dept <span class=\"sy2\">!=</span> lastDept <span class=\"sy3\">||</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>perDept<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t\tlastDept <span class=\"sy2\">=</span> e<span class=\"sy3\">.</span>Dept<br/>\t\t\tperDept <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>perDept<span class=\"sy1\">,</span> EmployeeList<span class=\"sy1\">{</span>e<span class=\"sy1\">})</span><br/>\t\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>perDept<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>perDept<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">])</span> &gt;<span class=\"sy2\">=</span> n &amp;&amp; e<span class=\"sy3\">.</span>Salary <span class=\"sy2\">!=</span> lastSalary <span class=\"sy1\">{</span><br/>\t\t\t\t<span class=\"kw1\">continue</span><br/>\t\t\t<span class=\"sy1\">}</span><br/>\t\t\tperDept<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>perDept<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> e<span class=\"sy1\">)</span><br/>\t\t\tlastSalary <span class=\"sy2\">=</span> e<span class=\"sy3\">.</span>Salary<br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> perDept<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">const</span> n <span class=\"sy2\">=</span> <span class=\"nu0\">3</span><br/>\ttop <span class=\"sy2\">:=</span> data<span class=\"sy3\">.</span>TopSalariesByDept<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>top<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Nothing to show.\"</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">return</span><br/>\t<span class=\"sy1\">}</span><br/>\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"Top\u00a0%d salaries per department<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> list <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> top <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>list<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>Dept<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> list <span class=\"sy1\">{</span><br/>\t\t\tfmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"   \u00a0%s\u00a0%16s\u00a0%7d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> e<span class=\"sy3\">.</span><span class=\"me1\">ID</span><span class=\"sy1\">,</span> e<span class=\"sy3\">.</span><span class=\"me1\">Name</span><span class=\"sy1\">,</span> e<span class=\"sy3\">.</span><span class=\"me1\">Salary</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 28, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> displayRank<span class=\"br0\">(</span>employees, number<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    employees.<span class=\"me1\">groupBy</span> <span class=\"br0\">{</span> it.<span class=\"me1\">Department</span> <span class=\"br0\">}</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20sort\"><span class=\"kw5\">sort</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> department, staff <span class=\"sy0\">-&gt;</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"Department $department\"</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"    Name                ID      Salary\"</span><br/>        staff.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20sort\"><span class=\"kw5\">sort</span></a> <span class=\"br0\">{</span> e1, e2 <span class=\"sy0\">-&gt;</span> e2.<span class=\"me1\">Salary</span> <span class=\"sy0\">&lt;=&gt;</span> e1.<span class=\"me1\">Salary</span> <span class=\"br0\">}</span><br/>        staff<span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span><a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20min\"><span class=\"kw5\">min</span></a><span class=\"br0\">(</span>number, staff.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> e <span class=\"sy0\">-&gt;</span><br/>           <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"    ${e.Name.padRight(20)}${e.ID}${sprintf('%8d', e.Salary)}\"</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> employees <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>        <span class=\"br0\">[</span><a href=\"http://www.google.de/search?as_q=Name&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Name</span></a>: <span class=\"st0\">'Tyler Bennett'</span>, ID: <span class=\"st0\">'E10297'</span>, Salary: <span class=\"nu0\">32000</span>, Department: <span class=\"st0\">'D101'</span><span class=\"br0\">]</span>,<br/>        <span class=\"br0\">[</span><a href=\"http://www.google.de/search?as_q=Name&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Name</span></a>: <span class=\"st0\">'John Rappl'</span>, ID: <span class=\"st0\">'E21437'</span>, Salary: <span class=\"nu0\">47000</span>, Department: <span class=\"st0\">'D050'</span><span class=\"br0\">]</span>,<br/>        <span class=\"br0\">[</span><a href=\"http://www.google.de/search?as_q=Name&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Name</span></a>: <span class=\"st0\">'George Woltman'</span>, ID: <span class=\"st0\">'E00127'</span>, Salary: <span class=\"nu0\">53500</span>, Department: <span class=\"st0\">'D101'</span><span class=\"br0\">]</span>,<br/>        <span class=\"br0\">[</span><a href=\"http://www.google.de/search?as_q=Name&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Name</span></a>: <span class=\"st0\">'Adam Smith'</span>, ID: <span class=\"st0\">'E63535'</span>, Salary: <span class=\"nu0\">18000</span>, Department: <span class=\"st0\">'D202'</span><span class=\"br0\">]</span>,<br/>        <span class=\"br0\">[</span><a href=\"http://www.google.de/search?as_q=Name&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Name</span></a>: <span class=\"st0\">'Claire Buckman'</span>, ID: <span class=\"st0\">'E39876'</span>, Salary: <span class=\"nu0\">27800</span>, Department: <span class=\"st0\">'D202'</span><span class=\"br0\">]</span>,<br/>        <span class=\"br0\">[</span><a href=\"http://www.google.de/search?as_q=Name&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Name</span></a>: <span class=\"st0\">'David McClellan'</span>, ID: <span class=\"st0\">'E04242'</span>, Salary: <span class=\"nu0\">41500</span>, Department: <span class=\"st0\">'D101'</span><span class=\"br0\">]</span>,<br/>        <span class=\"br0\">[</span><a href=\"http://www.google.de/search?as_q=Name&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Name</span></a>: <span class=\"st0\">'Rich Holcomb'</span>, ID: <span class=\"st0\">'E01234'</span>, Salary: <span class=\"nu0\">49500</span>, Department: <span class=\"st0\">'D202'</span><span class=\"br0\">]</span>,<br/>        <span class=\"br0\">[</span><a href=\"http://www.google.de/search?as_q=Name&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Name</span></a>: <span class=\"st0\">'Nathan Adams'</span>, ID: <span class=\"st0\">'E41298'</span>, Salary: <span class=\"nu0\">21900</span>, Department: <span class=\"st0\">'D050'</span><span class=\"br0\">]</span>,<br/>        <span class=\"br0\">[</span><a href=\"http://www.google.de/search?as_q=Name&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Name</span></a>: <span class=\"st0\">'Richard Potter'</span>, ID: <span class=\"st0\">'E43128'</span>, Salary: <span class=\"nu0\">15900</span>, Department: <span class=\"st0\">'D101'</span><span class=\"br0\">]</span>,<br/>        <span class=\"br0\">[</span><a href=\"http://www.google.de/search?as_q=Name&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Name</span></a>: <span class=\"st0\">'David Motsinger'</span>, ID: <span class=\"st0\">'E27002'</span>, Salary: <span class=\"nu0\">19250</span>, Department: <span class=\"st0\">'D202'</span><span class=\"br0\">]</span>,<br/>        <span class=\"br0\">[</span><a href=\"http://www.google.de/search?as_q=Name&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Name</span></a>: <span class=\"st0\">'Tim Sampair'</span>, ID: <span class=\"st0\">'E03033'</span>, Salary: <span class=\"nu0\">27000</span>, Department: <span class=\"st0\">'D101'</span><span class=\"br0\">]</span>,<br/>        <span class=\"br0\">[</span><a href=\"http://www.google.de/search?as_q=Name&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Name</span></a>: <span class=\"st0\">'Kim Arlich'</span>, ID: <span class=\"st0\">'E10001'</span>, Salary: <span class=\"nu0\">57000</span>, Department: <span class=\"st0\">'D190'</span><span class=\"br0\">]</span>,<br/>        <span class=\"br0\">[</span><a href=\"http://www.google.de/search?as_q=Name&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Name</span></a>: <span class=\"st0\">'Timothy Grove'</span>, ID: <span class=\"st0\">'E16398'</span>, Salary: <span class=\"nu0\">29900</span>, Department: <span class=\"st0\">'D190'</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span><br/>displayRank<span class=\"br0\">(</span>employees, <span class=\"nu0\">3</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 79, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>sortBy<span class=\"sy0\">,</span> groupBy<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Text<span class=\"sy0\">.</span>Printf <span class=\"br0\">(</span>printf<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> <span class=\"br0\">(</span>comparing<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Function <span class=\"br0\">(</span>on<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> ID <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>\u00a0<br/><span class=\"kw1\">type</span> DEP <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>\u00a0<br/><span class=\"kw1\">type</span> NAME <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>\u00a0<br/><span class=\"kw1\">type</span> SALARY <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><br/>\u00a0<br/><span class=\"kw1\">data</span> Employee <span class=\"sy0\">=</span> Employee<br/>  <span class=\"br0\">{</span> nr <span class=\"sy0\">::</span> ID<br/>  <span class=\"sy0\">,</span> dep <span class=\"sy0\">::</span> DEP<br/>  <span class=\"sy0\">,</span> name <span class=\"sy0\">::</span> NAME<br/>  <span class=\"sy0\">,</span> sal <span class=\"sy0\">::</span> SALARY<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>employees <span class=\"sy0\">::</span> <span class=\"br0\">[</span>Employee<span class=\"br0\">]</span><br/>employees <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a><br/>    <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> s<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Employee i d n s<span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"nu0\">1001</span><span class=\"sy0\">,</span> <span class=\"st0\">\"AB\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Janssen A.H.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">41000</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">101</span><span class=\"sy0\">,</span> <span class=\"st0\">\"KA\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"'t Woud B.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">45000</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1013</span><span class=\"sy0\">,</span> <span class=\"st0\">\"AB\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"de Bont C.A.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">65000</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1101</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Modaal A.M.J.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">30000</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1203</span><span class=\"sy0\">,</span> <span class=\"st0\">\"AB\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Anders H.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">50000</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"st0\">\"KA\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ezelbips P.J.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">52000</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1102</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Zagt A.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">33000</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1103</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ternood T.R.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">21000</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1104</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Lageln M.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">23000</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1105</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Amperwat A.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">19000</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1106</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Boon T.J.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">25000</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1107</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Beloop L.O.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">31000</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1009</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CD\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Janszoon A.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">38665</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1026</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CD\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Janszen H.P.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">41000</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1011</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"de Goeij J.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">39000</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">106</span><span class=\"sy0\">,</span> <span class=\"st0\">\"KA\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Pragtweik J.M.V.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">42300</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">111</span><span class=\"sy0\">,</span> <span class=\"st0\">\"KA\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Bakeuro S.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">31000</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">105</span><span class=\"sy0\">,</span> <span class=\"st0\">\"KA\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Clubdrager C.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">39800</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">104</span><span class=\"sy0\">,</span> <span class=\"st0\">\"KA\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Karendijk F.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">23000</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">107</span><span class=\"sy0\">,</span> <span class=\"st0\">\"KA\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Centjes R.M.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">34000</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">119</span><span class=\"sy0\">,</span> <span class=\"st0\">\"KA\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Tegenstroom H.L.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">39000</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1111</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CD\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Telmans R.M.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">55500</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1093</span><span class=\"sy0\">,</span> <span class=\"st0\">\"AB\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"de Slegte S.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">46987</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1199</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CC\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Uitlaat G.A.S.\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">44500</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">]</span><br/>\u00a0<br/>firstN <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>       <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>Employee <span class=\"sy0\">-&gt;</span> DEP<span class=\"br0\">)</span><br/>       <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>Employee <span class=\"sy0\">-&gt;</span> SALARY<span class=\"br0\">)</span><br/>       <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>Employee<span class=\"br0\">]</span><br/>       <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>Employee<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>firstN n o1 o2 x <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a><br/>    <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> n <span class=\"sy0\">.</span> sortBy <span class=\"br0\">(</span>comparingDown o2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>groupBy <span class=\"br0\">(</span>groupingOn o1<span class=\"br0\">)</span> <span class=\"br0\">(</span>sortBy <span class=\"br0\">(</span>comparing o1<span class=\"br0\">)</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>groupingOn<br/>  <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a> a1<br/>  <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> a1<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>groupingOn <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">==</span><span class=\"br0\">)</span> `on`<span class=\"br0\">)</span><br/>\u00a0<br/>comparingDown<br/>  <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> a<br/>  <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> b <span class=\"sy0\">-&gt;</span> b <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ordering\"><span class=\"kw4\">Ordering</span></a><br/>comparingDown <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <span class=\"sy0\">.</span> comparing<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  printf <span class=\"st0\">\"%-16s\u00a0%3s\u00a0%10s<span class=\"es0\">\\n</span>\"</span> <span class=\"st0\">\"NAME\"</span> <span class=\"st0\">\"DEP\"</span> <span class=\"st0\">\"TIP\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> replicate <span class=\"nu0\">31</span> <span class=\"st0\">'='</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span>traverse <span class=\"br0\">(</span><span class=\"br0\">(</span>printf <span class=\"st0\">\"%-16s\u00a0%3s\u00a0%10.2g<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">.</span> name<span class=\"br0\">)</span> <span class=\"sy0\">&lt;*&gt;</span> dep <span class=\"sy0\">&lt;*&gt;</span> sal<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>    firstN <span class=\"nu0\">3</span> dep sal employees</pre>"}, {"lang": "HicEst", "loc": 30, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">CHARACTER</span> source<span class=\"sy1\">=</span><span class=\"st0\">\"Test.txt\"</span><span class=\"sy1\">,</span> outP<span class=\"sy1\">=</span><span class=\"st0\">'Top_rank.txt'</span><span class=\"sy1\">,</span> fmt<span class=\"sy1\">=</span><span class=\"st0\">'A20,A8,i6,2x,A10'</span><br/><span class=\"kw1\">CHARACTER</span> name<span class=\"sy1\">*</span><span class=\"nu0\">20</span><span class=\"sy1\">,</span> employee_ID<span class=\"sy1\">*</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span> department<span class=\"sy1\">*</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span> temp<span class=\"sy1\">*</span><span class=\"nu0\">10</span><br/><span class=\"kw1\">REAL</span> <span class=\"sy1\">::</span>   idx<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> N_top_salaries<span class=\"sy1\">=</span><span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"co1\">! Open the source with 4 \",\" separated columns, skip line 1:</span><br/><span class=\"kw1\">OPEN</span><span class=\"br0\">(</span>FIle<span class=\"sy1\">=</span>source<span class=\"sy1\">,</span> Format<span class=\"sy1\">=</span><span class=\"st0\">'SL=1;4,;'</span><span class=\"sy1\">,</span> LENgth<span class=\"sy1\">=</span>L<span class=\"br0\">)</span><br/><span class=\"kw1\">ALLOCATE</span><span class=\"br0\">(</span>idx<span class=\"sy1\">,</span> L<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">! Sort salary column 3 descending, then department column 4, store in idx:</span><br/><span class=\"kw1\">SORT</span><span class=\"br0\">(</span>FIle<span class=\"sy1\">=</span>source<span class=\"sy1\">,</span> Column<span class=\"sy1\">=</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> Descending<span class=\"sy1\">=</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> Column<span class=\"sy1\">=</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"kw1\">Index</span><span class=\"sy1\">=</span>idx<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">! Display a spreadsheet-like scrolling dialog of the presorted source:</span><br/><span class=\"kw1\">DLG</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>idx<span class=\"sy1\">,</span> Text<span class=\"sy1\">=</span>source<span class=\"sy1\">,</span> Format<span class=\"sy1\">=</span>fmt<span class=\"sy1\">,</span> Y<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">! Output the first N top salaries of each department_</span><br/><span class=\"kw1\">OPEN</span><span class=\"br0\">(</span>FIle<span class=\"sy1\">=</span>outP<span class=\"br0\">)</span><br/><span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> L<br/>   rank <span class=\"sy1\">=</span> rank <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">READ</span><span class=\"br0\">(</span>FIle<span class=\"sy1\">=</span>source<span class=\"sy1\">,</span> Row<span class=\"sy1\">=</span>idx<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> name<span class=\"sy1\">,</span> employee_ID<span class=\"sy1\">,</span> salary<span class=\"sy1\">,</span> department<br/>   <span class=\"kw1\">IF</span><span class=\"br0\">(</span>temp <span class=\"sy1\">/=</span> department<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>       rank <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/>       <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>FIle<span class=\"sy1\">=</span>outP<span class=\"br0\">)</span><br/>       temp <span class=\"sy1\">=</span> department<br/>   <span class=\"kw1\">ENDIF</span><br/>   <span class=\"kw1\">IF</span><span class=\"br0\">(</span>rank <span class=\"sy1\">&lt;=</span> N_top_salaries<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>       <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>FIle<span class=\"sy1\">=</span>outP<span class=\"sy1\">,</span> Format<span class=\"sy1\">=</span>fmt<span class=\"br0\">)</span> name<span class=\"sy1\">,</span> employee_ID<span class=\"sy1\">,</span> salary<span class=\"sy1\">,</span> department<br/>   <span class=\"kw1\">ENDIF</span><br/><span class=\"kw1\">ENDDO</span><br/>\u00a0<br/><span class=\"kw1\">END</span></pre>"}, {"lang": "Icon and Unicon", "loc": 44, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">record</span> Employee<span class=\"br0\">(</span><span class=\"kw4\">name</span><span class=\"sy1\">,</span>id<span class=\"sy1\">,</span>salary<span class=\"sy1\">,</span>dept<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> getEmployees <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  employees <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><br/>    Employee<span class=\"br0\">(</span><span class=\"st0\">\"Tyler Bennett\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"E10297\"</span><span class=\"sy1\">,</span><span class=\"nu0\">32000</span><span class=\"sy1\">,</span><span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    Employee<span class=\"br0\">(</span><span class=\"st0\">\"John Rappl\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"E21437\"</span><span class=\"sy1\">,</span><span class=\"nu0\">47000</span><span class=\"sy1\">,</span><span class=\"st0\">\"D050\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    Employee<span class=\"br0\">(</span><span class=\"st0\">\"George Woltman\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"E00127\"</span><span class=\"sy1\">,</span><span class=\"nu0\">53500</span><span class=\"sy1\">,</span><span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    Employee<span class=\"br0\">(</span><span class=\"st0\">\"Adam Smith\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"E63535\"</span><span class=\"sy1\">,</span><span class=\"nu0\">18000</span><span class=\"sy1\">,</span><span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    Employee<span class=\"br0\">(</span><span class=\"st0\">\"Claire Buckman\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"E39876\"</span><span class=\"sy1\">,</span><span class=\"nu0\">27800</span><span class=\"sy1\">,</span><span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    Employee<span class=\"br0\">(</span><span class=\"st0\">\"David McClellan\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"E04242\"</span><span class=\"sy1\">,</span><span class=\"nu0\">41500</span><span class=\"sy1\">,</span><span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    Employee<span class=\"br0\">(</span><span class=\"st0\">\"Rich Holcomb\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"E01234\"</span><span class=\"sy1\">,</span><span class=\"nu0\">49500</span><span class=\"sy1\">,</span><span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    Employee<span class=\"br0\">(</span><span class=\"st0\">\"Nathan Adams\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"E41298\"</span><span class=\"sy1\">,</span><span class=\"nu0\">21900</span><span class=\"sy1\">,</span><span class=\"st0\">\"D050\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    Employee<span class=\"br0\">(</span><span class=\"st0\">\"Richard Potter\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"E43128\"</span><span class=\"sy1\">,</span><span class=\"nu0\">15900</span><span class=\"sy1\">,</span><span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    Employee<span class=\"br0\">(</span><span class=\"st0\">\"David Motsinger\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"E27002\"</span><span class=\"sy1\">,</span><span class=\"nu0\">19250</span><span class=\"sy1\">,</span><span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    Employee<span class=\"br0\">(</span><span class=\"st0\">\"Tim Sampair\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"E03033\"</span><span class=\"sy1\">,</span><span class=\"nu0\">27000</span><span class=\"sy1\">,</span><span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    Employee<span class=\"br0\">(</span><span class=\"st0\">\"Kim Arlich\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"E10001\"</span><span class=\"sy1\">,</span><span class=\"nu0\">57000</span><span class=\"sy1\">,</span><span class=\"st0\">\"D190\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    Employee<span class=\"br0\">(</span><span class=\"st0\">\"Timothy Grove\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"E16398\"</span><span class=\"sy1\">,</span><span class=\"nu0\">29900</span><span class=\"sy1\">,</span><span class=\"st0\">\"D190\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">]</span><br/>  <span class=\"kw1\">return</span> employees<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> show_employee <span class=\"br0\">(</span>employee<span class=\"br0\">)</span><br/>  <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span> <span class=\"br0\">(</span><span class=\"sy1\">!</span>employee <span class=\"sy1\">||</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main <span class=\"br0\">(</span><span class=\"kw4\">args</span><span class=\"br0\">)</span><br/>  N <span class=\"sy1\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"kw4\">args</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\"># N set from command line</span><br/>  employees <span class=\"sy1\">:=</span> getEmployees <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  groups <span class=\"sy1\">:=</span> <span class=\"kw4\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">every</span> employee <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>employees <span class=\"kw1\">do</span> <span class=\"kw4\">insert</span><span class=\"br0\">(</span>groups<span class=\"sy1\">,</span> employee<span class=\"sy1\">.</span><span class=\"me1\">dept</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">every</span> group <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>groups <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"== Top \"</span> <span class=\"sy1\">||</span> N <span class=\"sy1\">||</span> <span class=\"st0\">\" in group \"</span> <span class=\"sy1\">||</span> group<span class=\"br0\">)</span><br/>    employeesInGroup <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">every</span> employee <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>employees <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> employee<span class=\"sy1\">.</span><span class=\"me1\">dept</span> <span class=\"sy1\">==</span> group <span class=\"kw1\">then</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>employeesInGroup<span class=\"sy1\">,</span> employee<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\"># sort by third field and reverse, so highest salary comes first</span><br/>    employeesInGroup <span class=\"sy1\">:=</span> <span class=\"kw4\">reverse</span><span class=\"br0\">(</span><span class=\"kw4\">sortf</span><span class=\"br0\">(</span>employeesInGroup<span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    <span class=\"co1\"># show the first N records, up to the end of the list</span><br/>    <span class=\"kw1\">every</span> show_employee <span class=\"br0\">(</span><span class=\"sy1\">!</span>employeesInGroup<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">+</span>min<span class=\"br0\">(</span>N<span class=\"sy1\">,*</span>employeesInGroup<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 5, "block": "<pre class=\"j highlighted_source\"><span class=\"co1\">NB.  Dynamically generate convenience functions</span><br/><span class=\"sy0\">(</span><span class=\"st_h\">'`'</span>,,;:^:_1: N=:{.Employees<span class=\"sy0\">)</span> =:, <span class=\"sy0\">(</span><span class=\"nu0\">_</span>&amp;{\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span>`<span class=\"st_h\">''</span> <span class=\"sy0\">(</span>[^:<span class=\"sy0\">(</span><span class=\"nu0\">_</span> -: ]<span class=\"sy0\">)</span>L:<span class=\"nu0\">0</span><span class=\"sy0\">)</span>\"<span class=\"nu0\">0</span> <span class=\"nu0\">_</span>~ i.# E =: {: Employees<br/>\u00a0<br/><span class=\"co1\">NB.  Show top six ranked employees in each dept</span><br/>N , <span class=\"sy0\">(</span>&lt;@:&gt;\"<span class=\"nu0\">1</span>@:|:@:<span class=\"sy0\">((</span><span class=\"nu0\">6</span> &lt;. #<span class=\"sy0\">)</span> {. ] \\: SALARY<span class=\"sy0\">)</span>/.~ DEPT<span class=\"sy0\">)</span> |: &lt;\"<span class=\"nu0\">1</span>&amp;&gt; E</pre>"}, {"lang": "Java", "loc": 49, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.io.File</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> TopRankPerGroup <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> Employee <span class=\"br0\">{</span><br/>        <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> name<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> id<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> department<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> salary<span class=\"sy0\">;</span><br/>\u00a0<br/>        Employee<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> rec<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            name <span class=\"sy0\">=</span> rec<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            id <span class=\"sy0\">=</span> rec<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            salary <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>rec<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            department <span class=\"sy0\">=</span> rec<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        @Override<br/>        <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%s\u00a0%s\u00a0%d\u00a0%s\"</span>, id, name, salary, department<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> N <span class=\"sy0\">=</span> args.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Map<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>, List<span class=\"sy0\">&lt;</span>Employee<span class=\"sy0\">&gt;&gt;</span> records <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> TreeMap<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">try</span> <span class=\"br0\">(</span>Scanner sc <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Scanner<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afile+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">File</span></a><span class=\"br0\">(</span><span class=\"st0\">\"data.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>sc.<span class=\"me1\">hasNextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> rec <span class=\"sy0\">=</span> sc.<span class=\"me1\">nextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">trim</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                List<span class=\"sy0\">&lt;</span>Employee<span class=\"sy0\">&gt;</span> lst <span class=\"sy0\">=</span> records.<span class=\"me1\">get</span><span class=\"br0\">(</span>rec<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>lst <span class=\"sy0\">==</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    lst <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    records.<span class=\"me1\">put</span><span class=\"br0\">(</span>rec<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>, lst<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                lst.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> Employee<span class=\"br0\">(</span>rec<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        records.<span class=\"kw1\">forEach</span><span class=\"br0\">(</span><span class=\"br0\">(</span>key, val<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%nDepartment\u00a0%s%n\"</span>, key<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            val.<span class=\"me1\">stream</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                .<span class=\"me1\">sorted</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">compare</span><span class=\"br0\">(</span>b.<span class=\"me1\">salary</span>, a.<span class=\"me1\">salary</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                .<span class=\"me1\">limit</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span>.<span class=\"kw1\">forEach</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span><span class=\"sy0\">::</span>println<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 59, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> data <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>    <span class=\"br0\">{</span>name<span class=\"sy0\">:</span> <span class=\"st0\">\"Tyler Bennett\"</span><span class=\"sy0\">,</span>   id<span class=\"sy0\">:</span> <span class=\"st0\">\"E10297\"</span><span class=\"sy0\">,</span> salary<span class=\"sy0\">:</span> <span class=\"nu0\">32000</span><span class=\"sy0\">,</span> dept<span class=\"sy0\">:</span> <span class=\"st0\">\"D101\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span>name<span class=\"sy0\">:</span> <span class=\"st0\">\"John Rappl\"</span><span class=\"sy0\">,</span>      id<span class=\"sy0\">:</span> <span class=\"st0\">\"E21437\"</span><span class=\"sy0\">,</span> salary<span class=\"sy0\">:</span> <span class=\"nu0\">47000</span><span class=\"sy0\">,</span> dept<span class=\"sy0\">:</span> <span class=\"st0\">\"D050\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span>name<span class=\"sy0\">:</span> <span class=\"st0\">\"George Woltman\"</span><span class=\"sy0\">,</span>  id<span class=\"sy0\">:</span> <span class=\"st0\">\"E00127\"</span><span class=\"sy0\">,</span> salary<span class=\"sy0\">:</span> <span class=\"nu0\">53500</span><span class=\"sy0\">,</span> dept<span class=\"sy0\">:</span> <span class=\"st0\">\"D101\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span>name<span class=\"sy0\">:</span> <span class=\"st0\">\"Adam Smith\"</span><span class=\"sy0\">,</span>      id<span class=\"sy0\">:</span> <span class=\"st0\">\"E63535\"</span><span class=\"sy0\">,</span> salary<span class=\"sy0\">:</span> <span class=\"nu0\">18000</span><span class=\"sy0\">,</span> dept<span class=\"sy0\">:</span> <span class=\"st0\">\"D202\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span>name<span class=\"sy0\">:</span> <span class=\"st0\">\"Claire Buckman\"</span><span class=\"sy0\">,</span>  id<span class=\"sy0\">:</span> <span class=\"st0\">\"E39876\"</span><span class=\"sy0\">,</span> salary<span class=\"sy0\">:</span> <span class=\"nu0\">27800</span><span class=\"sy0\">,</span> dept<span class=\"sy0\">:</span> <span class=\"st0\">\"D202\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span>name<span class=\"sy0\">:</span> <span class=\"st0\">\"David McClellan\"</span><span class=\"sy0\">,</span> id<span class=\"sy0\">:</span> <span class=\"st0\">\"E04242\"</span><span class=\"sy0\">,</span> salary<span class=\"sy0\">:</span> <span class=\"nu0\">41500</span><span class=\"sy0\">,</span> dept<span class=\"sy0\">:</span> <span class=\"st0\">\"D101\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span>name<span class=\"sy0\">:</span> <span class=\"st0\">\"Rich Holcomb\"</span><span class=\"sy0\">,</span>    id<span class=\"sy0\">:</span> <span class=\"st0\">\"E01234\"</span><span class=\"sy0\">,</span> salary<span class=\"sy0\">:</span> <span class=\"nu0\">49500</span><span class=\"sy0\">,</span> dept<span class=\"sy0\">:</span> <span class=\"st0\">\"D202\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span>name<span class=\"sy0\">:</span> <span class=\"st0\">\"Nathan Adams\"</span><span class=\"sy0\">,</span>    id<span class=\"sy0\">:</span> <span class=\"st0\">\"E41298\"</span><span class=\"sy0\">,</span> salary<span class=\"sy0\">:</span> <span class=\"nu0\">21900</span><span class=\"sy0\">,</span> dept<span class=\"sy0\">:</span> <span class=\"st0\">\"D050\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span>name<span class=\"sy0\">:</span> <span class=\"st0\">\"Richard Potter\"</span><span class=\"sy0\">,</span>  id<span class=\"sy0\">:</span> <span class=\"st0\">\"E43128\"</span><span class=\"sy0\">,</span> salary<span class=\"sy0\">:</span> <span class=\"nu0\">15900</span><span class=\"sy0\">,</span> dept<span class=\"sy0\">:</span> <span class=\"st0\">\"D101\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span>name<span class=\"sy0\">:</span> <span class=\"st0\">\"David Motsinger\"</span><span class=\"sy0\">,</span> id<span class=\"sy0\">:</span> <span class=\"st0\">\"E27002\"</span><span class=\"sy0\">,</span> salary<span class=\"sy0\">:</span> <span class=\"nu0\">19250</span><span class=\"sy0\">,</span> dept<span class=\"sy0\">:</span> <span class=\"st0\">\"D202\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span>name<span class=\"sy0\">:</span> <span class=\"st0\">\"Tim Sampair\"</span><span class=\"sy0\">,</span>     id<span class=\"sy0\">:</span> <span class=\"st0\">\"E03033\"</span><span class=\"sy0\">,</span> salary<span class=\"sy0\">:</span> <span class=\"nu0\">27000</span><span class=\"sy0\">,</span> dept<span class=\"sy0\">:</span> <span class=\"st0\">\"D101\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span>name<span class=\"sy0\">:</span> <span class=\"st0\">\"Kim Arlich\"</span><span class=\"sy0\">,</span>      id<span class=\"sy0\">:</span> <span class=\"st0\">\"E10001\"</span><span class=\"sy0\">,</span> salary<span class=\"sy0\">:</span> <span class=\"nu0\">57000</span><span class=\"sy0\">,</span> dept<span class=\"sy0\">:</span> <span class=\"st0\">\"D190\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">{</span>name<span class=\"sy0\">:</span> <span class=\"st0\">\"Timothy Grove\"</span><span class=\"sy0\">,</span>   id<span class=\"sy0\">:</span> <span class=\"st0\">\"E16398\"</span><span class=\"sy0\">,</span> salary<span class=\"sy0\">:</span> <span class=\"nu0\">29900</span><span class=\"sy0\">,</span> dept<span class=\"sy0\">:</span> <span class=\"st0\">\"D190\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> top_rank<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> by_dept <span class=\"sy0\">=</span> group_by_dept<span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> dept <span class=\"kw1\">in</span> by_dept<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        output<span class=\"br0\">(</span>dept<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">&lt;</span> by_dept<span class=\"br0\">[</span>dept<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> emp <span class=\"sy0\">=</span> by_dept<span class=\"br0\">[</span>dept<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            output<span class=\"br0\">(</span>emp.<span class=\"me1\">name</span> <span class=\"sy0\">+</span> <span class=\"st0\">\", id=\"</span> <span class=\"sy0\">+</span> emp.<span class=\"me1\">id</span> <span class=\"sy0\">+</span> <span class=\"st0\">\", salary=\"</span> <span class=\"sy0\">+</span> emp.<span class=\"me1\">salary</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        output<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// group by dept, and sort by salary</span><br/><span class=\"kw1\">function</span> group_by_dept<span class=\"br0\">(</span>data<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> by_dept <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> idx <span class=\"kw1\">in</span> data<span class=\"br0\">)</span>  <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> dept <span class=\"sy0\">=</span> data<span class=\"br0\">[</span>idx<span class=\"br0\">]</span>.<span class=\"me1\">dept</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"sy0\">!</span> has_property<span class=\"br0\">(</span>by_dept<span class=\"sy0\">,</span> dept<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            by_dept<span class=\"br0\">[</span>dept<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        by_dept<span class=\"br0\">[</span>dept<span class=\"br0\">]</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span>data<span class=\"br0\">[</span>idx<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> dept <span class=\"kw1\">in</span> by_dept<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// numeric sort</span><br/>        by_dept<span class=\"br0\">[</span>dept<span class=\"br0\">]</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw1\">return</span> b.<span class=\"me1\">salary</span> <span class=\"sy0\">-</span> a.<span class=\"me1\">salary</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> by_dept<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> has_property<span class=\"br0\">(</span>obj<span class=\"sy0\">,</span> propname<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">typeof</span><span class=\"br0\">(</span>obj<span class=\"br0\">[</span>propname<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"st0\">\"undefined\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> output<span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>        WScript.<span class=\"me1\">Echo</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// WSH</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">catch</span><span class=\"br0\">(</span>err<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// Rhino</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>top_rank<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 6, "block": "<pre class=\"text highlighted_source\">  {<br/>    \"Employee Name\": \"Tyler Bennett\",<br/>    \"Employee ID\": \"E10297\",<br/>    \"Salary\": \"32000\",<br/>    \"Department\": \"D101\"<br/>  }</pre>"}, {"lang": "Julia", "loc": 59, "block": "<pre class=\"text highlighted_source\"># v0.6.0<br/>\u00a0<br/>using DataFrames<br/>\u00a0<br/>df = DataFrame(<br/>EmployeeName=[\"Tyler Bennett\", \"John Rappl\", \"George Woltman\", \"Adam Smith\",<br/>\"Claire Buckman\", \"David McClellan\", \"Rich Holcomb\", \"Nathan Adams\",<br/>\"Richard Potter\", \"David Motsinger\", \"Tim Sampair\", \"Kim Arlich\", \"Timothy Grove\"],<br/>EmployeeID = [\"E10297\", \"E21437\", \"E00127\", \"E63535\", \"E39876\", \"E04242\",<br/>\"E01234\", \"E41298\", \"E43128\", \"E27002\", \"E03033\", \"E10001\", \"E16398\"],<br/>Salary = [32000, 47000, 53500, 18000, 27800, 41500, 49500, 21900, 15900, 19250,<br/>27000, 57000, 29900],<br/>Department = [\"D101\", \"D050\", \"D101\", \"D202\", \"D202\", \"D101\", \"D202\", \"D050\",<br/>\"D101\", \"D202\", \"D101\", \"D190\", \"D190\"])<br/>\u00a0<br/># To get only values<br/>function firstnby(n::Int, y::Array, by::Array)<br/>    # Check that each value belong to one and one only class<br/>    if length(y)\u00a0!= length(by); error(\"y and by must have the same length\"); end<br/>\u00a0<br/>    # Initialize resulting dictionary<br/>    rst = Dict{eltype(by), Array{eltype(y)}}()<br/>\u00a0<br/>    # For each class...<br/>    for cl in unique(by)<br/>        # ...select the values of that class...<br/>        i = find(x -&gt; x == cl, by)<br/>        # ...sort them and store them in result...<br/>        rst[cl] = sort(y[i]; rev=true)<br/>        # ...if length is greater than n select only first n elements<br/>        if length(i) &gt; n<br/>            rst[cl] = rst[cl][1:n]<br/>        end<br/>    end<br/>    return rst<br/>end<br/>\u00a0<br/>for (cl, val) in firstnby(3, Array(df[:Salary]), Array(df[:Department]))<br/>    println(\"$cl =&gt; $val\")<br/>end<br/>\u00a0<br/># To get the full row...<br/>function firstnby(n::Int, df::DataFrame, y::Symbol, by::Symbol)<br/>    rst = Dict{eltype(df[by]), DataFrame}()<br/>\u00a0<br/>    for cl in unique(df[by])<br/>        i = find(x -&gt; x == cl, df[by])<br/>        rst[cl] = sort(df[i,\u00a0:]; cols=order(y; rev=true))<br/>        if length(i) &gt; n<br/>            rst[cl] = rst[cl][1:n,\u00a0:]<br/>        end<br/>    end<br/>    return rst<br/>end<br/>\u00a0<br/>for (cl, data) in firstnby(3, df,\u00a0:Salary,\u00a0:Department)<br/>    println(\"\\n$cl:\\n$data\")<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 31, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>data <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Employee<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> name<span class=\"sy0\">:</span> String, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> id<span class=\"sy0\">:</span> String, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> salary<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dept<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> N <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"co1\">//say</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> employees <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><br/>        Employee<span class=\"br0\">(</span><span class=\"st0\">\"Tyler Bennett\"</span>, <span class=\"st0\">\"E10297\"</span>, <span class=\"nu0\">32000</span>, <span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span>,<br/>        Employee<span class=\"br0\">(</span><span class=\"st0\">\"John Rappl\"</span>, <span class=\"st0\">\"E21437\"</span>, <span class=\"nu0\">47000</span>, <span class=\"st0\">\"D050\"</span><span class=\"br0\">)</span>,<br/>        Employee<span class=\"br0\">(</span><span class=\"st0\">\"George Woltman\"</span> , <span class=\"st0\">\"E00127\"</span>, <span class=\"nu0\">53500</span>, <span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span>,<br/>        Employee<span class=\"br0\">(</span><span class=\"st0\">\"Adam Smith\"</span>, <span class=\"st0\">\"E63535\"</span>, <span class=\"nu0\">18000</span>, <span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span>,<br/>        Employee<span class=\"br0\">(</span><span class=\"st0\">\"Claire Buckman\"</span>, <span class=\"st0\">\"E39876\"</span>, <span class=\"nu0\">27800</span>, <span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span>,<br/>        Employee<span class=\"br0\">(</span><span class=\"st0\">\"David McClellan\"</span>, <span class=\"st0\">\"E04242\"</span>, <span class=\"nu0\">41500</span>, <span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span>,<br/>        Employee<span class=\"br0\">(</span><span class=\"st0\">\"Rich Holcomb\"</span>, <span class=\"st0\">\"E01234\"</span>, <span class=\"nu0\">49500</span>, <span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span>,<br/>        Employee<span class=\"br0\">(</span><span class=\"st0\">\"Nathan Adams\"</span>, <span class=\"st0\">\"E41298\"</span>, <span class=\"nu0\">21900</span>, <span class=\"st0\">\"D050\"</span><span class=\"br0\">)</span>,<br/>        Employee<span class=\"br0\">(</span><span class=\"st0\">\"Richard Potter\"</span>, <span class=\"st0\">\"E43128\"</span>, <span class=\"nu0\">15900</span>, <span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span>,<br/>        Employee<span class=\"br0\">(</span><span class=\"st0\">\"David Motsinger\"</span>, <span class=\"st0\">\"E27002\"</span>, <span class=\"nu0\">19250</span>, <span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span>,<br/>        Employee<span class=\"br0\">(</span><span class=\"st0\">\"Tim Sampair\"</span>, <span class=\"st0\">\"E03033\"</span>, <span class=\"nu0\">27000</span>, <span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span>,<br/>        Employee<span class=\"br0\">(</span><span class=\"st0\">\"Kim Arlich\"</span>, <span class=\"st0\">\"E10001\"</span>, <span class=\"nu0\">57000</span>, <span class=\"st0\">\"D190\"</span><span class=\"br0\">)</span>,<br/>        Employee<span class=\"br0\">(</span><span class=\"st0\">\"Timothy Grove\"</span>, <span class=\"st0\">\"E16398\"</span>, <span class=\"nu0\">29900</span>, <span class=\"st0\">\"D190\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> employeesByDept <span class=\"sy0\">=</span> employees.<span class=\"me1\">sortedBy</span> <span class=\"br0\">{</span> it.<span class=\"me1\">dept</span> <span class=\"br0\">}</span>.<span class=\"me1\">groupBy</span> <span class=\"br0\">{</span> it.<span class=\"me1\">dept</span> <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Highest $N salaries by department:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>key, value<span class=\"br0\">)</span> in employeesByDept<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> topRanked <span class=\"sy0\">=</span> value.<span class=\"me1\">sortedByDescending</span> <span class=\"br0\">{</span> it.<span class=\"me1\">salary</span> <span class=\"br0\">}</span>.<span class=\"me1\">take</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Dept $key =&gt; \"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until N<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">with</span></a> <span class=\"br0\">(</span>topRanked<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> println<span class=\"br0\">(</span><span class=\"st0\">\"${name.padEnd(15)} $id $salary\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 36, "block": "<pre class=\"lua highlighted_source\">N <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>lst <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"st0\">\"Tyler Bennett\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E10297\"</span><span class=\"sy0\">,</span><span class=\"nu0\">32000</span><span class=\"sy0\">,</span><span class=\"st0\">\"D101\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span> <span class=\"st0\">\"John Rappl\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E21437\"</span><span class=\"sy0\">,</span><span class=\"nu0\">47000</span><span class=\"sy0\">,</span><span class=\"st0\">\"D050\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span> <span class=\"st0\">\"George Woltman\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E00127\"</span><span class=\"sy0\">,</span><span class=\"nu0\">53500</span><span class=\"sy0\">,</span><span class=\"st0\">\"D101\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span> <span class=\"st0\">\"Adam Smith\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E63535\"</span><span class=\"sy0\">,</span><span class=\"nu0\">18000</span><span class=\"sy0\">,</span><span class=\"st0\">\"D202\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span> <span class=\"st0\">\"Claire Buckman\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E39876\"</span><span class=\"sy0\">,</span><span class=\"nu0\">27800</span><span class=\"sy0\">,</span><span class=\"st0\">\"D202\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span> <span class=\"st0\">\"David McClellan\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E04242\"</span><span class=\"sy0\">,</span><span class=\"nu0\">41500</span><span class=\"sy0\">,</span><span class=\"st0\">\"D101\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span> <span class=\"st0\">\"Rich Holcomb\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E01234\"</span><span class=\"sy0\">,</span><span class=\"nu0\">49500</span><span class=\"sy0\">,</span><span class=\"st0\">\"D202\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span> <span class=\"st0\">\"Nathan Adams\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E41298\"</span><span class=\"sy0\">,</span><span class=\"nu0\">21900</span><span class=\"sy0\">,</span><span class=\"st0\">\"D050\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span> <span class=\"st0\">\"Richard Potter\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E43128\"</span><span class=\"sy0\">,</span><span class=\"nu0\">15900</span><span class=\"sy0\">,</span><span class=\"st0\">\"D101\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span> <span class=\"st0\">\"David Motsinger\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E27002\"</span><span class=\"sy0\">,</span><span class=\"nu0\">19250</span><span class=\"sy0\">,</span><span class=\"st0\">\"D202\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span> <span class=\"st0\">\"Tim Sampair\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E03033\"</span><span class=\"sy0\">,</span><span class=\"nu0\">27000</span><span class=\"sy0\">,</span><span class=\"st0\">\"D101\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span> <span class=\"st0\">\"Kim Arlich\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E10001\"</span><span class=\"sy0\">,</span><span class=\"nu0\">57000</span><span class=\"sy0\">,</span><span class=\"st0\">\"D190\"</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">{</span> <span class=\"st0\">\"Timothy Grove\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E16398\"</span><span class=\"sy0\">,</span><span class=\"nu0\">29900</span><span class=\"sy0\">,</span><span class=\"st0\">\"D190\"</span> <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>dep <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>lst <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> dep<span class=\"br0\">[</span> lst<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"kw4\">nil</span> <span class=\"kw1\">then</span><br/>\tdep<span class=\"br0\">[</span> lst<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\tdep<span class=\"br0\">[</span> lst<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> lst<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw1\">else</span><br/>\tdep<span class=\"br0\">[</span> lst<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"sy0\">#</span>dep<span class=\"br0\">[</span>lst<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> lst<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> _ <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span> dep <span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">table.sort</span><span class=\"br0\">(</span> dep<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"kw1\">return</span> a<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> b<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"kw1\">end</span> <span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"Department:\"</span><span class=\"sy0\">,</span> dep<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> l <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw3\">math.min</span><span class=\"br0\">(</span> N<span class=\"sy0\">,</span> <span class=\"sy0\">#</span>dep<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t<span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> dep<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>l<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> dep<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>l<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> dep<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>l<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica", "loc": 14, "block": "<pre class=\"text highlighted_source\">InitialList ={{\"Tyler Bennett\",\"E10297\",32000,\"D101\"},<br/>{\"John Rappl\",\"E21437\",47000,\"D050\"},{\"George Woltman\",\"E00127\",53500,\"D101\"},<br/>{\"Adam Smith\",\"E63535\",18000,\"D202\"},{\"Claire Buckman\",\"E39876\",27800,\"D202\"},<br/>{\"David McClellan\",\"E04242\",41500,\"D101\"},{\"Rich Holcomb\",\"E01234\",49500,\"D202\"},<br/>{\"Nathan Adams\",\"E41298\",21900,\"D050\"},{\"Richard Potter\",\"E43128\",15900,\"D101\"},<br/>{\"David Motsinger\",\"E27002\",19250,\"D202\"},{\"Tim Sampair\",\"E03033\",27000,\"D101\"},<br/>{\"Kim Arlich\",\"E10001\",57000,\"D190\"},{\"Timothy Grove\",\"E16398\",29900,\"D190\"}};<br/>\u00a0<br/>TrimmedList=Map[ If[Length[#]&gt;3,Take[#,3],#]&amp; ,<br/> Map[Reverse[SortBy[#,#[[3]]&amp;]]&amp;,GatherBy[InitialList,Last]]<br/>];<br/>\u00a0<br/>Scan[((Print[\"Department \",#[[1,4]],\"\\n\",\"Employee\",\"\\t\",\"Id\",\"\\t\",\"Salary\"]&amp;[#])&amp;[#];<br/>(Scan[Print[#[[1]],\"\\t\",#[[2]],\"\\t\",#[[3]]]&amp;,#] )&amp; [#])&amp;,TrimmedList]</pre>"}, {"lang": "Nim", "loc": 39, "block": "<pre class=\"text highlighted_source\">import algorithm<br/>\u00a0<br/>type Record = tuple[name, id: string, salary: int, department: string]<br/>\u00a0<br/>var people: seq[Record] =<br/>  @[(\"Tyler Bennett\", \"E10297\", 32000, \"D101\"),<br/>    (\"John Rappl\", \"E21437\", 47000, \"D050\"),<br/>    (\"George Woltman\", \"E00127\", 53500, \"D101\"),<br/>    (\"Adam Smith\", \"E63535\", 18000, \"D202\"),<br/>    (\"Claire Buckman\", \"E39876\", 27800, \"D202\"),<br/>    (\"David McClellan\", \"E04242\", 41500, \"D101\"),<br/>    (\"Rich Holcomb\", \"E01234\", 49500, \"D202\"),<br/>    (\"Nathan Adams\", \"E41298\", 21900, \"D050\"),<br/>    (\"Richard Potter\", \"E43128\", 15900, \"D101\"),<br/>    (\"David Motsinger\", \"E27002\", 19250, \"D202\"),<br/>    (\"Tim Sampair\", \"E03033\", 27000, \"D101\"),<br/>    (\"Kim Arlich\", \"E10001\", 57000, \"D190\"),<br/>    (\"Timothy Grove\", \"E16398\", 29900, \"D190\")]<br/>\u00a0<br/>proc pcmp(a, b): int =<br/>  result = cmp(a.department, b.department)<br/>  if result\u00a0!= 0: return<br/>  result = cmp(b.salary, a.salary)<br/>\u00a0<br/>proc top(n) =<br/>  sort(people, pcmp)<br/>\u00a0<br/>  var rank = 0<br/>  for i, p in people:<br/>    if i &gt; 0 and p.department\u00a0!= people[i-1].department:<br/>      rank = 0<br/>      echo \"\"<br/>\u00a0<br/>    if rank &lt; n:<br/>      echo p.department,\" \",p.salary,\" \",p.name<br/>\u00a0<br/>    inc rank<br/>\u00a0<br/>top(2)</pre>"}, {"lang": "OCaml", "loc": 50, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/StdLabels.html\"><span class=\"kw2\">StdLabels</span></a><br/>\u00a0<br/><span class=\"kw1\">let</span> to_string <span class=\"br0\">(</span>name,_,s,_<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>sprintf <span class=\"st0\">\"%s (%d)\"</span> name s<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> take n li <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux i acc <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> _ <span class=\"kw1\">when</span> i <span class=\"sy0\">&gt;=</span> n <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev acc<span class=\"br0\">)</span><br/>  <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev acc<span class=\"br0\">)</span><br/>  <span class=\"sy0\">|</span> x<span class=\"sy0\">::</span>xs <span class=\"sy0\">-&gt;</span> aux <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> i<span class=\"br0\">)</span> <span class=\"br0\">(</span>x<span class=\"sy0\">::</span>acc<span class=\"br0\">)</span> xs<br/>  <span class=\"kw1\">in</span><br/>  aux <span class=\"nu0\">0</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> li <span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> toprank data n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> len <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>length data <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> h <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>create len <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter data <span class=\"re1\">~f</span><span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>_,_,_,dep<span class=\"br0\">)</span> <span class=\"kw1\">as</span> employee<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>add h dep employee<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">let</span> deps <span class=\"sy0\">=</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left data <span class=\"re1\">~init</span><span class=\"sy0\">:</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"re1\">~f</span><span class=\"sy0\">:</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">fun</span> ac <span class=\"br0\">(</span>_,_,_,v<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>mem v ac <span class=\"kw1\">then</span> ac <span class=\"kw1\">else</span> v<span class=\"sy0\">::</span>ac<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> f dep <span class=\"sy0\">=</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"Department:\u00a0%s\\n \"</span> dep<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">let</span> l <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>find_all h dep <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> l2 <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>sort <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>_,_,v1,_<span class=\"br0\">)</span> <span class=\"br0\">(</span>_,_,v2,_<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> v2 v1<span class=\"br0\">)</span> l <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> l3 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>take n l2<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>concat <span class=\"st0\">\", \"</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map to_string l3<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter f deps<span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> data <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>  <span class=\"st0\">\"Tyler Bennett\"</span>,   <span class=\"st0\">\"E10297\"</span>,  <span class=\"nu0\">32000</span>,  <span class=\"st0\">\"D101\"</span><span class=\"sy0\">;</span>   <br/>  <span class=\"st0\">\"John Rappl\"</span>,      <span class=\"st0\">\"E21437\"</span>,  <span class=\"nu0\">47000</span>,  <span class=\"st0\">\"D050\"</span><span class=\"sy0\">;</span>   <br/>  <span class=\"st0\">\"George Woltman\"</span>,  <span class=\"st0\">\"E00127\"</span>,  <span class=\"nu0\">53500</span>,  <span class=\"st0\">\"D101\"</span><span class=\"sy0\">;</span>   <br/>  <span class=\"st0\">\"Adam Smith\"</span>,      <span class=\"st0\">\"E63535\"</span>,  <span class=\"nu0\">18000</span>,  <span class=\"st0\">\"D202\"</span><span class=\"sy0\">;</span>   <br/>  <span class=\"st0\">\"Claire Buckman\"</span>,  <span class=\"st0\">\"E39876\"</span>,  <span class=\"nu0\">27800</span>,  <span class=\"st0\">\"D202\"</span><span class=\"sy0\">;</span>   <br/>  <span class=\"st0\">\"David McClellan\"</span>, <span class=\"st0\">\"E04242\"</span>,  <span class=\"nu0\">41500</span>,  <span class=\"st0\">\"D101\"</span><span class=\"sy0\">;</span>   <br/>  <span class=\"st0\">\"Rich Holcomb\"</span>,    <span class=\"st0\">\"E01234\"</span>,  <span class=\"nu0\">49500</span>,  <span class=\"st0\">\"D202\"</span><span class=\"sy0\">;</span>   <br/>  <span class=\"st0\">\"Nathan Adams\"</span>,    <span class=\"st0\">\"E41298\"</span>,  <span class=\"nu0\">21900</span>,  <span class=\"st0\">\"D050\"</span><span class=\"sy0\">;</span>   <br/>  <span class=\"st0\">\"Richard Potter\"</span>,  <span class=\"st0\">\"E43128\"</span>,  <span class=\"nu0\">15900</span>,  <span class=\"st0\">\"D101\"</span><span class=\"sy0\">;</span>   <br/>  <span class=\"st0\">\"David Motsinger\"</span>, <span class=\"st0\">\"E27002\"</span>,  <span class=\"nu0\">19250</span>,  <span class=\"st0\">\"D202\"</span><span class=\"sy0\">;</span>   <br/>  <span class=\"st0\">\"Tim Sampair\"</span>,     <span class=\"st0\">\"E03033\"</span>,  <span class=\"nu0\">27000</span>,  <span class=\"st0\">\"D101\"</span><span class=\"sy0\">;</span>   <br/>  <span class=\"st0\">\"Kim Arlich\"</span>,      <span class=\"st0\">\"E10001\"</span>,  <span class=\"nu0\">57000</span>,  <span class=\"st0\">\"D190\"</span><span class=\"sy0\">;</span>   <br/>  <span class=\"st0\">\"Timothy Grove\"</span>,   <span class=\"st0\">\"E16398\"</span>,  <span class=\"nu0\">29900</span>,  <span class=\"st0\">\"D190\"</span><span class=\"sy0\">;</span>   <br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  toprank data <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "Oforth", "loc": 27, "block": "<pre class=\"text highlighted_source\">Object Class new: Employee(name, id, salary, dep)<br/>\u00a0<br/>Employee method: initialize \u00a0:= dep \u00a0:= salary\u00a0:= id\u00a0:= name\u00a0;<br/>Employee method: salary  @salary\u00a0;<br/>Employee method: dep     @dep\u00a0;<br/>Employee method: &lt;&lt;      \"[\" &lt;&lt; @dep &lt;&lt; \",\" &lt;&lt; @name &lt;&lt; \",\" &lt;&lt; @salary &lt;&lt; \"]\" &lt;&lt;\u00a0;<br/>\u00a0<br/>: topRank(n)<br/>| employees |<br/>   ListBuffer new -&gt;employees<br/>\u00a0<br/>   Employee new(\"Tyler Bennett\",   \"E10297\", 32000, \"D101\") employees add<br/>   Employee new(\"John Rappl\",      \"E21437\", 47000, \"D050\") employees add<br/>   Employee new(\"George Woltman\",  \"E00127\", 53500, \"D101\") employees add<br/>   Employee new(\"Adam Smith\",      \"E63535\", 18000, \"D202\") employees add<br/>   Employee new(\"Claire Buckman\",  \"E39876\", 27800, \"D202\") employees add<br/>   Employee new(\"David McClellan\", \"E04242\", 41500, \"D101\") employees add<br/>   Employee new(\"Rich Holcomb\",    \"E01234\", 49500, \"D202\") employees add<br/>   Employee new(\"Nathan Adams\",    \"E41298\", 21900, \"D050\") employees add<br/>   Employee new(\"Richard Potter\",  \"E43128\", 15900, \"D101\") employees add<br/>   Employee new(\"David Motsinger\", \"E27002\", 19250, \"D202\") employees add<br/>   Employee new(\"Tim Sampair\",     \"E03033\", 27000, \"D101\") employees add<br/>   Employee new(\"Kim Arlich\",      \"E10001\", 57000, \"D190\") employees add<br/>   Employee new(\"Timothy Grove\",   \"E16398\", 29900, \"D190\") employees add<br/>\u00a0<br/>   #dep employees sortBy groupWith( #dep ) <br/>   map(#[ sortBy(#[ salary neg ]) left(n) ]) apply(#println)\u00a0; </pre>"}, {"lang": "Oz", "loc": 46, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"co1\">%% Create a list of employee records.</span><br/>  Data = <span class=\"br0\">{</span>Map<br/>          <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">'Tyler Bennett'</span> e10297 32000 d101<span class=\"br0\">]</span><br/>           <span class=\"br0\">[</span><span class=\"st0\">'John Rappl'</span> e21437 47000 d050<span class=\"br0\">]</span><br/>           <span class=\"br0\">[</span><span class=\"st0\">'George Woltman'</span> e00127 53500 d101<span class=\"br0\">]</span><br/>           <span class=\"br0\">[</span><span class=\"st0\">'Adam Smith'</span> e63535 18000 d202<span class=\"br0\">]</span><br/>           <span class=\"br0\">[</span><span class=\"st0\">'Claire Buckman'</span> e39876 27800 d202<span class=\"br0\">]</span><br/>           <span class=\"br0\">[</span><span class=\"st0\">'David McClellan'</span> e04242 41500 d101<span class=\"br0\">]</span><br/>           <span class=\"br0\">[</span><span class=\"st0\">'Rich Holcomb'</span> e01234 49500 d202<span class=\"br0\">]</span><br/>           <span class=\"br0\">[</span><span class=\"st0\">'Nathan Adams'</span> e41298 21900 d050<span class=\"br0\">]</span><br/>           <span class=\"br0\">[</span><span class=\"st0\">'Richard Potter'</span> e43128 15900 d101<span class=\"br0\">]</span><br/>           <span class=\"br0\">[</span><span class=\"st0\">'David Motsinger'</span> e27002 19250 d202<span class=\"br0\">]</span><br/>           <span class=\"br0\">[</span><span class=\"st0\">'Tim Sampair'</span> e03033 27000 d101<span class=\"br0\">]</span><br/>           <span class=\"br0\">[</span><span class=\"st0\">'Kim Arlich'</span> e10001 57000 d190<span class=\"br0\">]</span><br/>           <span class=\"br0\">[</span><span class=\"st0\">'Timothy Grove'</span> e16398 29900 d190<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>          <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> <span class=\"br0\">[</span>Name Id Salary Department<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>             employee<span class=\"br0\">(</span>name:Name id:Id salary:Salary department:Department<span class=\"br0\">)</span><br/>          <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">TopEarners</span> Employees N<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Record<span class=\"sy0\">.</span>map <span class=\"br0\">{</span>GroupBy Employees department<span class=\"br0\">}</span><br/>      <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> Employees<span class=\"br0\">}</span><br/>\t <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>take<br/>\t  <span class=\"br0\">{</span>Sort Employees CompareSalary<span class=\"br0\">}</span><br/>\t  N<span class=\"br0\">}</span><br/>      <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">CompareSalary</span> E1 E2<span class=\"br0\">}</span><br/>     E1<span class=\"sy0\">.</span>salary <span class=\"sy0\">&gt;</span> E2<span class=\"sy0\">.</span>salary<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% Groups the records Xs by the value of feature F and returns</span><br/>  <span class=\"co1\">%% the result as a record that maps values of F to list of records.</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">GroupBy</span> Xs F<span class=\"br0\">}</span><br/>     Groups = <span class=\"br0\">{</span>Dictionary<span class=\"sy0\">.</span>new<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"kw1\">for</span> X <span class=\"kw1\">in</span> Xs <span class=\"kw1\">do</span><br/>        Groups<span class=\"sy0\">.</span><span class=\"br0\">(</span>X<span class=\"sy0\">.</span>F<span class=\"br0\">)</span> <span class=\"sy0\">:=</span> X<span class=\"sy0\">|</span><span class=\"br0\">{</span>CondSelect Groups X<span class=\"sy0\">.</span>F nil<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>     <span class=\"br0\">{</span>Dictionary<span class=\"sy0\">.</span>toRecord <span class=\"kw1\">unit</span> Groups<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Inspect <span class=\"br0\">{</span>TopEarners Data 3<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 28, "block": "<pre class=\"parigp highlighted_source\"><span class=\"br0\">{</span>V<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"Tyler Bennett\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E10297\"</span><span class=\"sy0\">,</span><span class=\"nu1\">32000</span><span class=\"sy0\">,</span><span class=\"st0\">\"D101\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"br0\">[</span><span class=\"st0\">\"John Rappl\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E21437\"</span><span class=\"sy0\">,</span><span class=\"nu1\">47000</span><span class=\"sy0\">,</span><span class=\"st0\">\"D050\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"br0\">[</span><span class=\"st0\">\"George Woltman\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E00127\"</span><span class=\"sy0\">,</span><span class=\"nu1\">53500</span><span class=\"sy0\">,</span><span class=\"st0\">\"D101\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"br0\">[</span><span class=\"st0\">\"Adam Smith\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E63535\"</span><span class=\"sy0\">,</span><span class=\"nu1\">18000</span><span class=\"sy0\">,</span><span class=\"st0\">\"D202\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"br0\">[</span><span class=\"st0\">\"Claire Buckman\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E39876\"</span><span class=\"sy0\">,</span><span class=\"nu1\">27800</span><span class=\"sy0\">,</span><span class=\"st0\">\"D202\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"br0\">[</span><span class=\"st0\">\"David McClellan\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E04242\"</span><span class=\"sy0\">,</span><span class=\"nu1\">41500</span><span class=\"sy0\">,</span><span class=\"st0\">\"D101\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"br0\">[</span><span class=\"st0\">\"Rich Holcomb\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E01234\"</span><span class=\"sy0\">,</span><span class=\"nu1\">49500</span><span class=\"sy0\">,</span><span class=\"st0\">\"D202\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"br0\">[</span><span class=\"st0\">\"Nathan Adams\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E41298\"</span><span class=\"sy0\">,</span><span class=\"nu1\">21900</span><span class=\"sy0\">,</span><span class=\"st0\">\"D050\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"br0\">[</span><span class=\"st0\">\"Richard Potter\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E43128\"</span><span class=\"sy0\">,</span><span class=\"nu1\">15900</span><span class=\"sy0\">,</span><span class=\"st0\">\"D101\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"br0\">[</span><span class=\"st0\">\"David Motsinger\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E27002\"</span><span class=\"sy0\">,</span><span class=\"nu1\">19250</span><span class=\"sy0\">,</span><span class=\"st0\">\"D202\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"br0\">[</span><span class=\"st0\">\"Tim Sampair\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E03033\"</span><span class=\"sy0\">,</span><span class=\"nu1\">27000</span><span class=\"sy0\">,</span><span class=\"st0\">\"D101\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"br0\">[</span><span class=\"st0\">\"Kim Arlich\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E10001\"</span><span class=\"sy0\">,</span><span class=\"nu1\">57000</span><span class=\"sy0\">,</span><span class=\"st0\">\"D190\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/><span class=\"br0\">[</span><span class=\"st0\">\"Timothy Grove\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E16398\"</span><span class=\"sy0\">,</span><span class=\"nu1\">29900</span><span class=\"sy0\">,</span><span class=\"st0\">\"D190\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>top<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>V<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>dept<span class=\"sy0\">=</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span>#V<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>V<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,,</span><span class=\"nu1\">8</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>d<span class=\"sy0\">,</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#dept<span class=\"sy0\">,</span><br/>    d<span class=\"sy0\">=</span>dept<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    v<span class=\"sy0\">=</span><span class=\"kw1\">select</span><span class=\"br0\">(</span>u<span class=\"sy0\">-&gt;</span>u<span class=\"br0\">[</span><span class=\"nu1\">4</span><span class=\"br0\">]</span><span class=\"sy0\">==</span>d<span class=\"sy0\">,</span>V<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    v<span class=\"sy0\">=</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span><span class=\"nu1\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">\\\\ Sort by salary (#3) descending (flag 0x4)</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"kw1\">min</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>#v<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>      <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>top<span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>V<span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 70, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> TopRankPerGroup<span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  Classes<span class=\"sy1\">,</span> Math<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  TData <span class=\"sy3\">=</span> <span class=\"kw4\">record</span><br/>            <span class=\"kw1\">name</span><span class=\"sy1\">:</span>   <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>\t    ID<span class=\"sy1\">:</span>     <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>\t    salary<span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>\t    dept<span class=\"sy1\">:</span>   <span class=\"kw4\">string</span><br/>\t  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  PTData <span class=\"sy3\">=</span> <span class=\"sy2\">^</span>TData<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  data<span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">13</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> TData <span class=\"sy3\">=</span><br/>    <span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"kw1\">name</span><span class=\"sy1\">:</span> <span class=\"st0\">'Tyler Bennett'</span><span class=\"sy1\">;</span>   ID<span class=\"sy1\">:</span> <span class=\"st0\">'E10297'</span><span class=\"sy1\">;</span> salary<span class=\"sy1\">:</span> <span class=\"nu0\">32000</span><span class=\"sy1\">;</span> dept<span class=\"sy1\">:</span> <span class=\"st0\">'D101'</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">name</span><span class=\"sy1\">:</span> <span class=\"st0\">'John Rappl'</span><span class=\"sy1\">;</span>      ID<span class=\"sy1\">:</span> <span class=\"st0\">'E21437'</span><span class=\"sy1\">;</span> salary<span class=\"sy1\">:</span> <span class=\"nu0\">47000</span><span class=\"sy1\">;</span> dept<span class=\"sy1\">:</span> <span class=\"st0\">'D050'</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">name</span><span class=\"sy1\">:</span> <span class=\"st0\">'George Woltman'</span><span class=\"sy1\">;</span>  ID<span class=\"sy1\">:</span> <span class=\"st0\">'E00127'</span><span class=\"sy1\">;</span> salary<span class=\"sy1\">:</span> <span class=\"nu0\">53500</span><span class=\"sy1\">;</span> dept<span class=\"sy1\">:</span> <span class=\"st0\">'D101'</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">name</span><span class=\"sy1\">:</span> <span class=\"st0\">'Adam Smith'</span><span class=\"sy1\">;</span>      ID<span class=\"sy1\">:</span> <span class=\"st0\">'E63535'</span><span class=\"sy1\">;</span> salary<span class=\"sy1\">:</span> <span class=\"nu0\">18000</span><span class=\"sy1\">;</span> dept<span class=\"sy1\">:</span> <span class=\"st0\">'D202'</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">name</span><span class=\"sy1\">:</span> <span class=\"st0\">'Claire Buckman'</span><span class=\"sy1\">;</span>  ID<span class=\"sy1\">:</span> <span class=\"st0\">'E39876'</span><span class=\"sy1\">;</span> salary<span class=\"sy1\">:</span> <span class=\"nu0\">27800</span><span class=\"sy1\">;</span> dept<span class=\"sy1\">:</span> <span class=\"st0\">'D202'</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">name</span><span class=\"sy1\">:</span> <span class=\"st0\">'David McClellan'</span><span class=\"sy1\">;</span> ID<span class=\"sy1\">:</span> <span class=\"st0\">'E04242'</span><span class=\"sy1\">;</span> salary<span class=\"sy1\">:</span> <span class=\"nu0\">41500</span><span class=\"sy1\">;</span> dept<span class=\"sy1\">:</span> <span class=\"st0\">'D101'</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">name</span><span class=\"sy1\">:</span> <span class=\"st0\">'Rich Holcomb'</span><span class=\"sy1\">;</span>    ID<span class=\"sy1\">:</span> <span class=\"st0\">'E01234'</span><span class=\"sy1\">;</span> salary<span class=\"sy1\">:</span> <span class=\"nu0\">49500</span><span class=\"sy1\">;</span> dept<span class=\"sy1\">:</span> <span class=\"st0\">'D202'</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">name</span><span class=\"sy1\">:</span> <span class=\"st0\">'Nathan Adams'</span><span class=\"sy1\">;</span>    ID<span class=\"sy1\">:</span> <span class=\"st0\">'E41298'</span><span class=\"sy1\">;</span> salary<span class=\"sy1\">:</span> <span class=\"nu0\">21900</span><span class=\"sy1\">;</span> dept<span class=\"sy1\">:</span> <span class=\"st0\">'D050'</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">name</span><span class=\"sy1\">:</span> <span class=\"st0\">'Richard Potter'</span><span class=\"sy1\">;</span>  ID<span class=\"sy1\">:</span> <span class=\"st0\">'E43128'</span><span class=\"sy1\">;</span> salary<span class=\"sy1\">:</span> <span class=\"nu0\">15900</span><span class=\"sy1\">;</span> dept<span class=\"sy1\">:</span> <span class=\"st0\">'D101'</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">name</span><span class=\"sy1\">:</span> <span class=\"st0\">'David Motsinger'</span><span class=\"sy1\">;</span> ID<span class=\"sy1\">:</span> <span class=\"st0\">'E27002'</span><span class=\"sy1\">;</span> salary<span class=\"sy1\">:</span> <span class=\"nu0\">19250</span><span class=\"sy1\">;</span> dept<span class=\"sy1\">:</span> <span class=\"st0\">'D202'</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">name</span><span class=\"sy1\">:</span> <span class=\"st0\">'Tim Sampair'</span><span class=\"sy1\">;</span>     ID<span class=\"sy1\">:</span> <span class=\"st0\">'E03033'</span><span class=\"sy1\">;</span> salary<span class=\"sy1\">:</span> <span class=\"nu0\">27000</span><span class=\"sy1\">;</span> dept<span class=\"sy1\">:</span> <span class=\"st0\">'D101'</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">name</span><span class=\"sy1\">:</span> <span class=\"st0\">'Kim Arlich'</span><span class=\"sy1\">;</span>      ID<span class=\"sy1\">:</span> <span class=\"st0\">'E10001'</span><span class=\"sy1\">;</span> salary<span class=\"sy1\">:</span> <span class=\"nu0\">57000</span><span class=\"sy1\">;</span> dept<span class=\"sy1\">:</span> <span class=\"st0\">'D190'</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">name</span><span class=\"sy1\">:</span> <span class=\"st0\">'Timothy Grove'</span><span class=\"sy1\">;</span>   ID<span class=\"sy1\">:</span> <span class=\"st0\">'E16398'</span><span class=\"sy1\">;</span> salary<span class=\"sy1\">:</span> <span class=\"nu0\">29900</span><span class=\"sy1\">;</span> dept<span class=\"sy1\">:</span> <span class=\"st0\">'D190'</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> CompareSalary<span class=\"br0\">(</span>Item1<span class=\"sy1\">,</span> Item2<span class=\"sy1\">:</span> PTData<span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    CompareSalary <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Item2<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">salary</span> <span class=\"sy3\">-</span> Item1<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">salary</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  depts   <span class=\"sy1\">:</span> TStringList<span class=\"sy1\">;</span><br/>  deptList<span class=\"sy1\">:</span> Tlist<span class=\"sy1\">;</span><br/>  number<span class=\"sy1\">,</span> i<span class=\"sy1\">,</span> j<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">write</span> <span class=\"br0\">(</span><span class=\"st0\">'Enter the number of ranks: '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">readln</span> <span class=\"br0\">(</span>number<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  depts <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStringList<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  depts<span class=\"sy1\">.</span><span class=\"me1\">Sorted</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">true</span><span class=\"sy1\">;</span><br/>  depts<span class=\"sy1\">.</span><span class=\"me1\">Duplicates</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> dupIgnore<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>data<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>data<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    depts<span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>data<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">dept</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> depts<span class=\"sy1\">.</span><span class=\"me1\">Count</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Department: '</span><span class=\"sy1\">,</span> depts<span class=\"sy1\">.</span><span class=\"me1\">Strings</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    deptList <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TList<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> low<span class=\"br0\">(</span>data<span class=\"br0\">)</span> <span class=\"kw1\">to</span> high<span class=\"br0\">(</span>data<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> data<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">dept</span> <span class=\"sy3\">=</span> depts<span class=\"sy1\">.</span><span class=\"me1\">Strings</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>        deptList<span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"sy2\">@</span>data<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    deptList<span class=\"sy1\">.</span><span class=\"me1\">Sort</span><span class=\"br0\">(</span>TListSortCompare<span class=\"br0\">(</span><span class=\"sy2\">@</span>CompareSalary<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> min<span class=\"br0\">(</span>deptList<span class=\"sy1\">.</span><span class=\"me1\">count</span><span class=\"sy1\">,</span> number<span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw3\">write</span> <span class=\"br0\">(</span>PTData<span class=\"br0\">(</span>deptList<span class=\"sy1\">.</span><span class=\"me1\">Items</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"kw1\">name</span><span class=\"sy1\">,</span> <span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">write</span> <span class=\"br0\">(</span><span class=\"st0\">'ID: '</span><span class=\"sy1\">,</span> PTData<span class=\"br0\">(</span>deptList<span class=\"sy1\">.</span><span class=\"me1\">Items</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">ID</span><span class=\"sy1\">,</span> <span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">write</span> <span class=\"br0\">(</span><span class=\"st0\">'Salary: '</span><span class=\"sy1\">,</span> PTData<span class=\"br0\">(</span>deptList<span class=\"sy1\">.</span><span class=\"me1\">Items</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">Salary</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    deptList<span class=\"sy1\">.</span><span class=\"me1\">Destroy</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 47, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> zip <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@a</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@b</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@l</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@l</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"re0\">@a</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"re0\">@b</span> <span class=\"kw1\">while</span> <span class=\"re0\">@a</span> <span class=\"kw1\">and</span> <span class=\"re0\">@b</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">@l</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> uniq <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">%h</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"re0\">$h</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">++</span><span class=\"br0\">}</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@data</span> <span class=\"sy0\">=</span><br/>    <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span><span class=\"br0\">{</span> zip <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>name id salary dept<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"st_h\">','</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>    <span class=\"co4\">&lt;&lt;'EOF';<br/>Tyler Bennett,E10297,32000,D101<br/>John Rappl,E21437,47000,D050<br/>George Woltman,E00127,53500,D101<br/>Adam Smith,E63535,18000,D202<br/>Claire Buckman,E39876,27800,D202<br/>David McClellan,E04242,41500,D101<br/>Rich Holcomb,E01234,49500,D202<br/>Nathan Adams,E41298,21900,D050<br/>Richard Potter,E43128,15900,D101<br/>David Motsinger,E27002,19250,D202<br/>Tim Sampair,E03033,27000,D101<br/>Kim Arlich,E10001,57000,D190<br/>Timothy Grove,E16398,29900,D190<br/>EOF</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$N</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"sy0\">||</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$d</span> <span class=\"br0\">(</span>uniq <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>dept<span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"re0\">@data</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$d<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@es</span> <span class=\"sy0\">=</span><br/>        <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <span class=\"br0\">{</span><span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>salary<span class=\"br0\">}</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>salary<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>        <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>dept<span class=\"br0\">}</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$d</span><span class=\"br0\">}</span><br/>        <span class=\"re0\">@data</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$N</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">@es</span> <span class=\"kw1\">or</span> <span class=\"kw1\">last</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$e</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"re0\">@es</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"%-15s |\u00a0%-6s |\u00a0%5d<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$e</span><span class=\"br0\">}</span><span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>name id salary<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 29, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@data</span> <span class=\"sy0\">=</span> <span class=\"kw1\">do</span> <span class=\"kw1\">for</span> q<span class=\"sy0\">:</span>to<span class=\"sy0\">/---/.</span><span class=\"me1\">lines</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$line</span> <span class=\"br0\">{</span><br/>        E10297  <span class=\"nu0\">32000</span>   D101    Tyler Bennett<br/>        E21437  <span class=\"nu0\">47000</span>   D050    John Rappl<br/>        E00127  <span class=\"nu0\">53500</span>   D101    George Woltman<br/>        E63535  <span class=\"nu0\">18000</span>   D202    Adam Smith<br/>        E39876  <span class=\"nu0\">27800</span>   D202    Claire Buckman<br/>        E04242  <span class=\"nu0\">41500</span>   D101    David McClellan<br/>        E01234  <span class=\"nu0\">49500</span>   D202    Rich Holcomb<br/>        E41298  <span class=\"nu0\">21900</span>   D050    Nathan Adams<br/>        E43128  <span class=\"nu0\">15900</span>   D101    Richard Potter<br/>        E27002  <span class=\"nu0\">19250</span>   D202    David Motsinger<br/>        E03033  <span class=\"nu0\">27000</span>   D101    Tim Sampair<br/>        E10001  <span class=\"nu0\">57000</span>   D190    Kim Arlich<br/>        E16398  <span class=\"nu0\">29900</span>   D190    Timothy Grove<br/>        <span class=\"sy0\">---</span><br/>\u00a0<br/>  $<span class=\"sy0\">%</span><span class=\"br0\">(</span> <span class=\"sy0\">&lt;</span> Id      Salary  Dept    Name <span class=\"sy0\">&gt;</span><br/>      <span class=\"kw1\">Z</span><span class=\"sy0\">=&gt;</span><br/>      <span class=\"re0\">$line</span><span class=\"sy0\">.</span><span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"co2\">/ \\s\\s+ /</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> MAIN<span class=\"br0\">(</span>Int <span class=\"re0\">$N</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"re0\">@data</span><span class=\"sy0\">.</span><span class=\"kw3\">classify</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"sy0\">.&lt;</span>Dept<span class=\"sy0\">&gt;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">value</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@es</span> <span class=\"sy0\">=</span> <span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"sy0\">-.&lt;</span>Salary<span class=\"sy0\">&gt;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw3\">say</span> <span class=\"st_h\">''</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">state</span> <span class=\"re0\">$bline</span><span class=\"br0\">)</span><span class=\"sy0\">++;</span><br/>        <span class=\"kw3\">say</span> <span class=\"sy0\">.&lt;</span> Dept Id Salary Name <span class=\"sy0\">&gt;</span> <span class=\"kw1\">for</span> <span class=\"re0\">@es</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"re0\">$N</span><span class=\"br0\">]</span><span class=\"sy0\">:</span>v<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 41, "block": "<pre class=\"text highlighted_source\">constant N=3<br/>\u00a0<br/>--                      Employee Name,Employee ID,Salary,Department<br/>enum                    /*NAME,*/        /*ID,*/  SAL=3, DEPT=4<br/>constant employees = {{\"Tyler Bennett\",  \"E10297\",32000,\"D101\"},<br/>                      {\"John Rappl\",     \"E21437\",47000,\"D050\"},<br/>                      {\"George Woltman\", \"E00127\",53500,\"D101\"},<br/>                      {\"Adam Smith\",     \"E63535\",18000,\"D202\"},<br/>                      {\"Claire Buckman\", \"E39876\",27800,\"D202\"},<br/>                      {\"David McClellan\",\"E04242\",41500,\"D101\"},<br/>                      {\"Rich Holcomb\",   \"E01234\",49500,\"D202\"},<br/>                      {\"Nathan Adams\",   \"E41298\",21900,\"D050\"},<br/>                      {\"Richard Potter\", \"E43128\",15900,\"D101\"},<br/>                      {\"David Motsinger\",\"E27002\",19250,\"D202\"},<br/>                      {\"Tim Sampair\",    \"E03033\",27000,\"D101\"},<br/>                      {\"Kim Arlich\",     \"E10001\",57000,\"D190\"},<br/>                      {\"Timothy Grove\",  \"E16398\",29900,\"D190\"}}<br/>\u00a0<br/>function by_dept_sal(integer i, integer j)<br/>    return compare(employees[i][DEPT]&amp;-employees[i][SAL],<br/>                   employees[j][DEPT]&amp;-employees[j][SAL])<br/>end function<br/>\u00a0<br/>sequence tags = custom_sort(routine_id(\"by_dept_sal\"),tagset(length(employees)))<br/>\u00a0<br/>string lastdep = \"\"<br/>integer dcount = 0<br/>printf(1,\"Top\u00a0%d salaries by department\\n\",{N})<br/>for i=1 to length(employees) do<br/>    object emp = employees[tags[i]]<br/>    if emp[DEPT]!=lastdep then<br/>        lastdep = emp[DEPT]<br/>        dcount = 1<br/>        printf(1,\"\\n\")<br/>    else<br/>        dcount += 1<br/>    end if<br/>    if dcount&lt;=N then<br/>       \u00a0?emp<br/>    end if<br/>end for</pre>"}, {"lang": "PHP", "loc": 48, "block": "<pre class=\"php highlighted_source\"><span class=\"re0\">$data</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">Array</span></a><span class=\"br0\">(</span><br/>\t\t\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">Array</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Tyler Bennett\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E10297\"</span><span class=\"sy0\">,</span><span class=\"nu0\">32000</span><span class=\"sy0\">,</span><span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">Array</span></a><span class=\"br0\">(</span><span class=\"st0\">\"John Rappl\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E21437\"</span><span class=\"sy0\">,</span><span class=\"nu0\">47000</span><span class=\"sy0\">,</span><span class=\"st0\">\"D050\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">Array</span></a><span class=\"br0\">(</span><span class=\"st0\">\"George Woltman\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E00127\"</span><span class=\"sy0\">,</span><span class=\"nu0\">53500</span><span class=\"sy0\">,</span><span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">Array</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Adam Smith\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E63535\"</span><span class=\"sy0\">,</span><span class=\"nu0\">18000</span><span class=\"sy0\">,</span><span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">Array</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Claire Buckman\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E39876\"</span><span class=\"sy0\">,</span><span class=\"nu0\">27800</span><span class=\"sy0\">,</span><span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">Array</span></a><span class=\"br0\">(</span><span class=\"st0\">\"David McClellan\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E04242\"</span><span class=\"sy0\">,</span><span class=\"nu0\">41500</span><span class=\"sy0\">,</span><span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">Array</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Rich Holcomb\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E01234\"</span><span class=\"sy0\">,</span><span class=\"nu0\">49500</span><span class=\"sy0\">,</span><span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">Array</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Nathan Adams\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E41298\"</span><span class=\"sy0\">,</span><span class=\"nu0\">21900</span><span class=\"sy0\">,</span><span class=\"st0\">\"D050\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">Array</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Richard Potter\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E43128\"</span><span class=\"sy0\">,</span><span class=\"nu0\">15900</span><span class=\"sy0\">,</span><span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">Array</span></a><span class=\"br0\">(</span><span class=\"st0\">\"David Motsinger\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E27002\"</span><span class=\"sy0\">,</span><span class=\"nu0\">19250</span><span class=\"sy0\">,</span><span class=\"st0\">\"D202\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">Array</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Tim Sampair\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E03033\"</span><span class=\"sy0\">,</span><span class=\"nu0\">27000</span><span class=\"sy0\">,</span><span class=\"st0\">\"D101\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">Array</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Kim Arlich\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E10001\"</span><span class=\"sy0\">,</span><span class=\"nu0\">57000</span><span class=\"sy0\">,</span><span class=\"st0\">\"D190\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t\t<a href=\"http://www.php.net/array\"><span class=\"kw3\">Array</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Timothy Grove\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"E16398\"</span><span class=\"sy0\">,</span><span class=\"nu0\">29900</span><span class=\"sy0\">,</span><span class=\"st0\">\"D190\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">function</span> top_sal<span class=\"br0\">(</span><span class=\"re0\">$num</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw2\">global</span> <span class=\"re0\">$data</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$depts</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">Array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$data</span> <span class=\"kw1\">as</span> <span class=\"re0\">$key</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$arr</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.php.net/isset\"><span class=\"kw3\">isset</span></a><span class=\"br0\">(</span><span class=\"re0\">$depts</span><span class=\"br0\">[</span><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"re0\">$depts</span><span class=\"br0\">[</span><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">Array</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$depts</span><span class=\"br0\">[</span><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$key</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span>\t<br/>\t<span class=\"kw2\">function</span> topsalsort<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span><span class=\"re0\">$b</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">global</span> <span class=\"re0\">$data</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$data</span><span class=\"br0\">[</span><span class=\"re0\">$a</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"re0\">$data</span><span class=\"br0\">[</span><span class=\"re0\">$b</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"re0\">$data</span><span class=\"br0\">[</span><span class=\"re0\">$a</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$data</span><span class=\"br0\">[</span><span class=\"re0\">$b</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\u00a0? <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$depts</span> <span class=\"kw1\">as</span> <span class=\"re0\">$key</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$val</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.php.net/usort\"><span class=\"kw3\">usort</span></a><span class=\"br0\">(</span><span class=\"re0\">$depts</span><span class=\"br0\">[</span><span class=\"re0\">$key</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"st0\">\"topsalsort\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.php.net/ksort\"><span class=\"kw3\">ksort</span></a><span class=\"br0\">(</span><span class=\"re0\">$depts</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">echo</span> <span class=\"st_h\">'&lt;pre&gt;'</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$depts</span> <span class=\"kw1\">as</span> <span class=\"re0\">$key</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$val</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">echo</span> <span class=\"re0\">$key</span> <span class=\"sy0\">.</span> <span class=\"st_h\">'&lt;br&gt;'</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">echo</span> <span class=\"st_h\">'Name\t\t\tID\t\tSalary&lt;br&gt;'</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"re0\">$val</span> <span class=\"kw1\">as</span> <span class=\"re0\">$value</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">echo</span> <span class=\"re0\">$data</span><span class=\"br0\">[</span><span class=\"re0\">$value</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span> <span class=\"st_h\">'\t'</span> <span class=\"sy0\">.</span> <span class=\"re0\">$data</span><span class=\"br0\">[</span><span class=\"re0\">$value</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span> <span class=\"st_h\">'\t'</span> <span class=\"sy0\">.</span> <span class=\"re0\">$data</span><span class=\"br0\">[</span><span class=\"re0\">$value</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span> <span class=\"st_h\">'&lt;br&gt;'</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"re0\">$count</span><span class=\"sy0\">++;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$count</span><span class=\"sy0\">&gt;=</span><span class=\"re0\">$num</span><span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">echo</span> <span class=\"st_h\">'&lt;br&gt;'</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">echo</span> <span class=\"st_h\">'&lt;/pre&gt;'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>top_sal<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 27, "block": "<pre class=\"text highlighted_source\"># Employee Name, ID, Salary, Department<br/>(de *Employees<br/>   (\"Tyler Bennett\" E10297 32000 D101)<br/>   (\"John Rappl\" E21437 47000 D050)<br/>   (\"George Woltman\" E00127 53500 D101)<br/>   (\"Adam Smith\" E63535 18000 D202)<br/>   (\"Claire Buckman\" E39876 27800 D202)<br/>   (\"David McClellan\" E04242 41500 D101)<br/>   (\"Rich Holcomb\" E01234 49500 D202)<br/>   (\"Nathan Adams\" E41298 21900 D050)<br/>   (\"Richard Potter\" E43128 15900 D101)<br/>   (\"David Motsinger\" E27002 19250 D202)<br/>   (\"Tim Sampair\" E03033 27000 D101)<br/>   (\"Kim Arlich\" E10001 57000 D190)<br/>   (\"Timothy Grove\" E16398 29900 D190) )<br/>\u00a0<br/>(de topEmployees (N)<br/>   (let Fmt (4 -16 -7 7)<br/>      (for Dept (by cadddr group *Employees)<br/>         (prinl \"Department \" (cadddr (car Dept)) \":\")<br/>         (tab Fmt NIL \"Name\" \"ID\" \"Salary\")<br/>         (for (I . D) (flip (by caddr sort Dept))<br/>            (tab Fmt (pack I \". \") (car D) (cadr D) (caddr D))<br/>            (T (= I N)) )<br/>         (prinl) ) ) )<br/>\u00a0<br/>(topEmployees 3)</pre>"}, {"lang": "PL/I", "loc": 83, "block": "<pre class=\"text highlighted_source\">(subrg, stringrange, stringsize):<br/>rank: procedure options (main);   /* 10 November 2013 */<br/>\u00a0<br/>   declare 1 employee (13),<br/>             2 name char (15) varying,<br/>             2 ID   char (6),<br/>             2 salary fixed (5),<br/>             2 department char (4);<br/>   declare done(hbound(employee)) bit (1);<br/>   declare ptr(hbound(employee)) fixed binary;<br/>   declare true bit(1) value ('1'b), false bit(1) value ('0'b);<br/>   declare dept character (4);<br/>   declare text character (80) varying;<br/>   declare (i, j, l, k, m, n, p, t) fixed binary;<br/>   declare in file input;<br/>\u00a0<br/>   open file (in) title ('/TOP-RANK.DAT, RECSIZE(80), TYPE(TEXT)' );<br/>\u00a0<br/>   on endfile (in) go to completed_input;<br/>   j = 0;<br/>   do forever;<br/>      get file (in) edit (text) (L);<br/>      j = j + 1;<br/>      i = index(text, ',');<br/>      name(j) = substr(text, 1, i-1);<br/>      k = index(text, ',', i+1);<br/>      ID(j) = substr(text, i+1, k-(i+1));<br/>      i = k; k = index(text, ',', i+1);<br/>      salary(j) = substr(text, i+1, k-(i+1));<br/>      department(j) = substr(text, k+1);<br/>   end;<br/>\u00a0<br/>completed_input:<br/>   m = hbound(employee);<br/>   put skip list ('How many highest-paid employees do you want?');<br/>   get (n);<br/>   put skip edit ('Looking for the ', trim(n),<br/>                  ' highest-paid employees in each department') (a);<br/>   done = false;<br/>   do i = 1 to m;<br/>      do j = 1 to m;<br/>         if done(j) then iterate;<br/>         dept = department(j);<br/>          /* done(j) = true; */<br/>         leave;<br/>      end;<br/>      /* Locate all the employees of this department. */<br/>      k = 0;<br/>      do j = 1 to m;<br/>         if ^done(j) &amp; (department(j) = dept) then<br/>            do;<br/>               k = k + 1;<br/>               ptr(k) = j;<br/>               done(j) = true;<br/>            end;<br/>      end;<br/>      if k = 0 then leave; /* (No more departments.) */<br/>\u00a0<br/>      put skip list ('Employees in department ' || dept || ' are:-' );<br/>      do j = 1 to k;<br/>         put skip list (employee(ptr(j)));<br/>      end;<br/>      /* We now have k employees in \"dept\".  Now find the maximum n salaries. */<br/>      /* ptr points to all of them. */<br/>      /* Use a bubble sort to move n values to one end. */<br/>      do p = 1 to min(n, k);<br/>         do j = 1 to k-1;<br/>            if salary(ptr(j)) &gt; salary(ptr(j+1)) then<br/>               do;<br/>                  t = ptr(j+1); ptr(j+1) = ptr(j); ptr(j) = t;<br/>               end;<br/>         end;<br/>      end;<br/>\u00a0<br/>      /* Having moved the largest n values to the end of our list, */<br/>      /* we print them. */<br/>      put skip list ('Highest-paid employees in department ' || dept || ':-');<br/>      do j = k to k-min(k,n)+1 by -1;<br/>         put skip list (employee(ptr(j)) );<br/>      end;<br/>   end;<br/>   put skip list ('FINISHED');<br/>end rank;</pre>"}, {"lang": "PL/SQL", "loc": 108, "block": "<pre class=\"plsql highlighted_source\"><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=CREATE\"><span class=\"kw1\">CREATE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=OR\"><span class=\"kw1\">OR</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=REPLACE\"><span class=\"kw2\">REPLACE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=PROCEDURE\"><span class=\"kw1\">PROCEDURE</span></a> <span class=\"st0\">\"Top rank per group\"</span><span class=\"br0\">(</span>TOP_N <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IN\"><span class=\"kw1\">IN</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=PLS_INTEGER\"><span class=\"kw1\">PLS_INTEGER</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=DEFAULT\"><span class=\"kw1\">DEFAULT</span></a> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=AS\"><span class=\"kw1\">AS</span></a><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=CURSOR\"><span class=\"kw1\">CURSOR</span></a> CSR_EMP<span class=\"br0\">(</span>TOP_N <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=PLS_INTEGER\"><span class=\"kw1\">PLS_INTEGER</span></a><span class=\"br0\">)</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IS\"><span class=\"kw1\">IS</span></a><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=SELECT\"><span class=\"kw1\">SELECT</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=CASE\"><span class=\"kw1\">CASE</span></a> LINE<br/>             <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=WHEN\"><span class=\"kw1\">WHEN</span></a> <span class=\"nu0\">10</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=THEN\"><span class=\"kw1\">THEN</span></a><br/>              <span class=\"st0\">'Tot.'</span> <span class=\"sy0\">||</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LPAD\"><span class=\"kw2\">LPAD</span></a><span class=\"br0\">(</span>POPULATION<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"st0\">' Employees in '</span> <span class=\"sy0\">||</span> TIE_COUNT <span class=\"sy0\">||</span><br/>              <span class=\"st0\">' deps.Avg salary:'</span> <span class=\"sy0\">||</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=TO_CHAR\"><span class=\"kw2\">TO_CHAR</span></a><span class=\"br0\">(</span>SALARY<span class=\"sy0\">,</span> <span class=\"st0\">'99990.99'</span><span class=\"br0\">)</span><br/>             <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=WHEN\"><span class=\"kw1\">WHEN</span></a> <span class=\"nu0\">30</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=THEN\"><span class=\"kw1\">THEN</span></a><br/>              <span class=\"st0\">'-'</span><br/>             <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=WHEN\"><span class=\"kw1\">WHEN</span></a> <span class=\"nu0\">50</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=THEN\"><span class=\"kw1\">THEN</span></a><br/>              <span class=\"st0\">'Department: '</span> <span class=\"sy0\">||</span> DEPT_ID <span class=\"sy0\">||</span> <span class=\"st0\">', pop: '</span> <span class=\"sy0\">||</span> POPULATION <span class=\"sy0\">||</span><br/>              <span class=\"st0\">'. Avg Salary: '</span> <span class=\"sy0\">||</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=TO_CHAR\"><span class=\"kw2\">TO_CHAR</span></a><span class=\"br0\">(</span>SALARY<span class=\"sy0\">,</span> <span class=\"st0\">'99990.99'</span><span class=\"br0\">)</span><br/>             <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=WHEN\"><span class=\"kw1\">WHEN</span></a> <span class=\"nu0\">70</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=THEN\"><span class=\"kw1\">THEN</span></a><br/>              <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LPAD\"><span class=\"kw2\">LPAD</span></a><span class=\"br0\">(</span><span class=\"st0\">'Employee ID'</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LPAD\"><span class=\"kw2\">LPAD</span></a><span class=\"br0\">(</span><span class=\"st0\">'Employee name'</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>              <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LPAD\"><span class=\"kw2\">LPAD</span></a><span class=\"br0\">(</span><span class=\"st0\">'Salary'</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"st0\">'Rank'</span><br/>             <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=WHEN\"><span class=\"kw1\">WHEN</span></a> <span class=\"nu0\">90</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=THEN\"><span class=\"kw1\">THEN</span></a><br/>              <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LPAD\"><span class=\"kw2\">LPAD</span></a><span class=\"br0\">(</span><span class=\"st0\">'+'</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span><span class=\"sy0\">,</span> <span class=\"st0\">'-'</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LPAD\"><span class=\"kw2\">LPAD</span></a><span class=\"br0\">(</span><span class=\"st0\">'+'</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"st0\">'-'</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LPAD\"><span class=\"kw2\">LPAD</span></a><span class=\"br0\">(</span><span class=\"st0\">'+'</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"st0\">'-'</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>              <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LPAD\"><span class=\"kw2\">LPAD</span></a><span class=\"br0\">(</span><span class=\"st0\">'+'</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"st0\">'-'</span><span class=\"br0\">)</span><br/>             <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=ELSE\"><span class=\"kw1\">ELSE</span></a><br/>              <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LPAD\"><span class=\"kw2\">LPAD</span></a><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LPAD\"><span class=\"kw2\">LPAD</span></a><span class=\"br0\">(</span>EMP_ID<span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LPAD\"><span class=\"kw2\">LPAD</span></a><span class=\"br0\">(</span>EMP_NAME<span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>              <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=TO_CHAR\"><span class=\"kw2\">TO_CHAR</span></a><span class=\"br0\">(</span>SALARY<span class=\"sy0\">,</span> <span class=\"st0\">'99990.99'</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>              <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LPAD\"><span class=\"kw2\">LPAD</span></a><span class=\"br0\">(</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=CASE\"><span class=\"kw1\">CASE</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=WHEN\"><span class=\"kw1\">WHEN</span></a> TIE_COUNT <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=THEN\"><span class=\"kw1\">THEN</span></a>  <span class=\"st0\">' '</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=ELSE\"><span class=\"kw1\">ELSE</span></a> <span class=\"st0\">'T'</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> <span class=\"sy0\">||</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RANK\"><span class=\"kw2\">RANK</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>           <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> <span class=\"st0\">\"Top rank per group\"</span><br/>      <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FROM\"><span class=\"kw1\">FROM</span></a> <span class=\"br0\">(</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=SELECT\"><span class=\"kw1\">SELECT</span></a> <span class=\"nu0\">10</span> LINE<br/>                  <span class=\"sy0\">,</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NULL\"><span class=\"kw1\">NULL</span></a> EMP_ID<br/>                  <span class=\"sy0\">,</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NULL\"><span class=\"kw1\">NULL</span></a> EMP_NAME<br/>                  <span class=\"sy0\">,</span><span class=\"st0\">' '</span> DEPT_ID<br/>                  <span class=\"sy0\">,</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=AVG\"><span class=\"kw2\">AVG</span></a><span class=\"br0\">(</span>SALARY<span class=\"br0\">)</span> SALARY<br/>                  <span class=\"sy0\">,</span><span class=\"nu0\">0</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RANK\"><span class=\"kw2\">RANK</span></a><br/>                  <span class=\"sy0\">,</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=COUNT\"><span class=\"kw2\">COUNT</span></a><span class=\"br0\">(</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=DISTINCT\"><span class=\"kw1\">DISTINCT</span></a> DEPT_ID<span class=\"br0\">)</span> TIE_COUNT<br/>                  <span class=\"sy0\">,</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=COUNT\"><span class=\"kw2\">COUNT</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> POPULATION<br/>              <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FROM\"><span class=\"kw1\">FROM</span></a> EMP<br/>            <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=UNION\"><span class=\"kw1\">UNION</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=ALL\"><span class=\"kw1\">ALL</span></a><br/>            <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=SELECT\"><span class=\"kw1\">SELECT</span></a> <span class=\"nu0\">30</span>      LINE<br/>                  <span class=\"sy0\">,</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NULL\"><span class=\"kw1\">NULL</span></a>    EMP_ID<br/>                  <span class=\"sy0\">,</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NULL\"><span class=\"kw1\">NULL</span></a>    EMP_NAME<br/>                  <span class=\"sy0\">,</span>DEPT_ID<br/>                  <span class=\"sy0\">,</span><span class=\"nu0\">0</span>       SALARY<br/>                  <span class=\"sy0\">,</span><span class=\"nu0\">0</span>       <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RANK\"><span class=\"kw2\">RANK</span></a><br/>                  <span class=\"sy0\">,</span><span class=\"nu0\">0</span>       TIE_COUNT<br/>                  <span class=\"sy0\">,</span><span class=\"nu0\">0</span>       POPULATION<br/>              <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FROM\"><span class=\"kw1\">FROM</span></a> EMP<br/>             <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=GROUP\"><span class=\"kw1\">GROUP</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BY\"><span class=\"kw1\">BY</span></a> DEPT_ID<br/>            <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=UNION\"><span class=\"kw1\">UNION</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=ALL\"><span class=\"kw1\">ALL</span></a><br/>            <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=SELECT\"><span class=\"kw1\">SELECT</span></a> <span class=\"nu0\">50</span> LINE<br/>                  <span class=\"sy0\">,</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NULL\"><span class=\"kw1\">NULL</span></a> EMP_ID<br/>                  <span class=\"sy0\">,</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NULL\"><span class=\"kw1\">NULL</span></a> EMP_NAME<br/>                  <span class=\"sy0\">,</span>DEPT_ID<br/>                  <span class=\"sy0\">,</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=AVG\"><span class=\"kw2\">AVG</span></a><span class=\"br0\">(</span>SALARY<span class=\"br0\">)</span> SALARY<br/>                  <span class=\"sy0\">,</span><span class=\"nu0\">0</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RANK\"><span class=\"kw2\">RANK</span></a><br/>                  <span class=\"sy0\">,</span><span class=\"nu0\">0</span> TIE_COUNT<br/>                  <span class=\"sy0\">,</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=COUNT\"><span class=\"kw2\">COUNT</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> POPULATION<br/>              <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FROM\"><span class=\"kw1\">FROM</span></a> EMP<br/>             <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=GROUP\"><span class=\"kw1\">GROUP</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BY\"><span class=\"kw1\">BY</span></a> DEPT_ID<br/>            <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=UNION\"><span class=\"kw1\">UNION</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=ALL\"><span class=\"kw1\">ALL</span></a><br/>            <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=SELECT\"><span class=\"kw1\">SELECT</span></a> <span class=\"nu0\">70</span>      LINE<br/>                  <span class=\"sy0\">,</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NULL\"><span class=\"kw1\">NULL</span></a>    EMP_ID<br/>                  <span class=\"sy0\">,</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NULL\"><span class=\"kw1\">NULL</span></a>    EMP_NAME<br/>                  <span class=\"sy0\">,</span>DEPT_ID<br/>                  <span class=\"sy0\">,</span><span class=\"nu0\">0</span>       SALARY<br/>                  <span class=\"sy0\">,</span><span class=\"nu0\">0</span>       <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RANK\"><span class=\"kw2\">RANK</span></a><br/>                  <span class=\"sy0\">,</span><span class=\"nu0\">0</span>       TIE_COUNT<br/>                  <span class=\"sy0\">,</span><span class=\"nu0\">0</span>       POPULATION<br/>              <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FROM\"><span class=\"kw1\">FROM</span></a> EMP<br/>             <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=GROUP\"><span class=\"kw1\">GROUP</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BY\"><span class=\"kw1\">BY</span></a> DEPT_ID<br/>            <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=UNION\"><span class=\"kw1\">UNION</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=ALL\"><span class=\"kw1\">ALL</span></a><br/>            <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=SELECT\"><span class=\"kw1\">SELECT</span></a> <span class=\"nu0\">90</span>      LINE<br/>                  <span class=\"sy0\">,</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NULL\"><span class=\"kw1\">NULL</span></a>    EMP_ID<br/>                  <span class=\"sy0\">,</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=NULL\"><span class=\"kw1\">NULL</span></a>    EMP_NAME<br/>                  <span class=\"sy0\">,</span>DEPT_ID<br/>                  <span class=\"sy0\">,</span><span class=\"nu0\">0</span>       SALARY<br/>                  <span class=\"sy0\">,</span><span class=\"nu0\">0</span>       <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RANK\"><span class=\"kw2\">RANK</span></a><br/>                  <span class=\"sy0\">,</span><span class=\"nu0\">0</span>       TIE_COUNT<br/>                  <span class=\"sy0\">,</span><span class=\"nu0\">0</span>       POPULATION<br/>              <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FROM\"><span class=\"kw1\">FROM</span></a> EMP<br/>             <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=GROUP\"><span class=\"kw1\">GROUP</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BY\"><span class=\"kw1\">BY</span></a> DEPT_ID<br/>            <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=UNION\"><span class=\"kw1\">UNION</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=ALL\"><span class=\"kw1\">ALL</span></a><br/>            <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=SELECT\"><span class=\"kw1\">SELECT</span></a> <span class=\"nu0\">110</span> LINE<br/>                  <span class=\"sy0\">,</span>EMP_ID<br/>                  <span class=\"sy0\">,</span>EMP_NAME<br/>                  <span class=\"sy0\">,</span>DEPT_ID<br/>                  <span class=\"sy0\">,</span>SALARY<br/>                  <span class=\"sy0\">,</span><span class=\"br0\">(</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=SELECT\"><span class=\"kw1\">SELECT</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=COUNT\"><span class=\"kw2\">COUNT</span></a><span class=\"br0\">(</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=DISTINCT\"><span class=\"kw1\">DISTINCT</span></a> EMP4<span class=\"sy0\">.</span>SALARY<span class=\"br0\">)</span><br/>                      <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FROM\"><span class=\"kw1\">FROM</span></a> EMP EMP4<br/>                     <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=WHERE\"><span class=\"kw1\">WHERE</span></a> EMP4<span class=\"sy0\">.</span>DEPT_ID <span class=\"sy0\">=</span> EMP3<span class=\"sy0\">.</span>DEPT_ID<br/>                       <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=AND\"><span class=\"kw1\">AND</span></a> EMP4<span class=\"sy0\">.</span>SALARY <span class=\"sy0\">&gt;=</span> EMP3<span class=\"sy0\">.</span>SALARY<span class=\"br0\">)</span> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=RANK\"><span class=\"kw2\">RANK</span></a><br/>                  <span class=\"sy0\">,</span><span class=\"br0\">(</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=SELECT\"><span class=\"kw1\">SELECT</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=COUNT\"><span class=\"kw2\">COUNT</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>                      <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FROM\"><span class=\"kw1\">FROM</span></a> EMP EMP2<br/>                     <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=WHERE\"><span class=\"kw1\">WHERE</span></a> EMP2<span class=\"sy0\">.</span>DEPT_ID <span class=\"sy0\">=</span> EMP3<span class=\"sy0\">.</span>DEPT_ID<br/>                       <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=AND\"><span class=\"kw1\">AND</span></a> EMP2<span class=\"sy0\">.</span>SALARY <span class=\"sy0\">=</span> EMP3<span class=\"sy0\">.</span>SALARY<span class=\"br0\">)</span> TIE_COUNT<br/>                  <span class=\"sy0\">,</span><span class=\"nu0\">0</span> POPULATION<br/>              <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FROM\"><span class=\"kw1\">FROM</span></a> EMP EMP3<br/>             <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=WHERE\"><span class=\"kw1\">WHERE</span></a> TOP_N <span class=\"sy0\">&gt;=</span> <span class=\"co1\">-- Here is the meat, Correlated subquery</span><br/>                   <span class=\"br0\">(</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=SELECT\"><span class=\"kw1\">SELECT</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=COUNT\"><span class=\"kw2\">COUNT</span></a><span class=\"br0\">(</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=DISTINCT\"><span class=\"kw1\">DISTINCT</span></a> EMP4<span class=\"sy0\">.</span>SALARY<span class=\"br0\">)</span><br/>                      <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FROM\"><span class=\"kw1\">FROM</span></a> EMP EMP4<br/>                     <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=WHERE\"><span class=\"kw1\">WHERE</span></a> EMP4<span class=\"sy0\">.</span>DEPT_ID <span class=\"sy0\">=</span> EMP3<span class=\"sy0\">.</span>DEPT_ID<br/>                       <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=AND\"><span class=\"kw1\">AND</span></a> EMP4<span class=\"sy0\">.</span>SALARY <span class=\"sy0\">&gt;=</span> EMP3<span class=\"sy0\">.</span>SALARY<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=ORDER\"><span class=\"kw1\">ORDER</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BY\"><span class=\"kw1\">BY</span></a> DEPT_ID<br/>             <span class=\"sy0\">,</span>LINE<br/>             <span class=\"sy0\">,</span>SALARY <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=DESC\"><span class=\"kw1\">DESC</span></a><br/>             <span class=\"sy0\">,</span>EMP_ID<span class=\"sy0\">;</span><br/>\u00a0<br/>  V_EMP CSR_EMP<span class=\"sy0\">%</span><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=ROWTYPE\"><span class=\"kw1\">ROWTYPE</span></a><span class=\"sy0\">;</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=FOR\"><span class=\"kw1\">FOR</span></a> V_EMP <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=IN\"><span class=\"kw1\">IN</span></a> CSR_EMP<span class=\"br0\">(</span>TOP_N<span class=\"br0\">)</span><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LOOP\"><span class=\"kw1\">LOOP</span></a><br/>    <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=DBMS_OUTPUT\"><span class=\"kw3\">DBMS_OUTPUT</span></a><span class=\"sy0\">.</span>PUT_LINE<span class=\"br0\">(</span>v_emp<span class=\"sy0\">.</span><span class=\"st0\">\"Top rank per group\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a> <a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=LOOP\"><span class=\"kw1\">LOOP</span></a><span class=\"sy0\">;</span><br/><a href=\"http://www.oracle.com/pls/db92/db92.drilldown?word=END\"><span class=\"kw1\">END</span></a><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 32, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> New<span class=\"sy0\">-</span>Employee <span class=\"br0\">(</span><span class=\"re0\">$Name</span><span class=\"sy0\">,</span> <span class=\"re0\">$ID</span><span class=\"sy0\">,</span> <span class=\"re0\">$Salary</span><span class=\"sy0\">,</span> <span class=\"re0\">$Department</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">New-Object</span> PSObject `<br/>        <span class=\"sy0\">|</span> <span class=\"kw1\">Add-Member</span> <span class=\"kw5\">-PassThru</span> NoteProperty EmployeeName <span class=\"re0\">$Name</span> `<br/>        <span class=\"sy0\">|</span> <span class=\"kw1\">Add-Member</span> <span class=\"kw5\">-PassThru</span> NoteProperty EmployeeID <span class=\"re0\">$ID</span> `<br/>        <span class=\"sy0\">|</span> <span class=\"kw1\">Add-Member</span> <span class=\"kw5\">-PassThru</span> NoteProperty Salary <span class=\"re0\">$Salary</span> `<br/>        <span class=\"sy0\">|</span> <span class=\"kw1\">Add-Member</span> <span class=\"kw5\">-PassThru</span> NoteProperty Department <span class=\"re0\">$Department</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$data</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>New<span class=\"sy0\">-</span>Employee <span class=\"st0\">'Tyler Bennett'</span>    E10297  <span class=\"nu0\">32000</span>  D101<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span>New<span class=\"sy0\">-</span>Employee <span class=\"st0\">'John Rappl'</span>       E21437  <span class=\"nu0\">47000</span>  D050<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span>New<span class=\"sy0\">-</span>Employee <span class=\"st0\">'George Woltman'</span>   E00127  <span class=\"nu0\">53500</span>  D101<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span>New<span class=\"sy0\">-</span>Employee <span class=\"st0\">'Adam Smith'</span>       E63535  <span class=\"nu0\">18000</span>  D202<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span>New<span class=\"sy0\">-</span>Employee <span class=\"st0\">'Claire Buckman'</span>   E39876  <span class=\"nu0\">27800</span>  D202<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span>New<span class=\"sy0\">-</span>Employee <span class=\"st0\">'David McClellan'</span>  E04242  <span class=\"nu0\">41500</span>  D101<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span>New<span class=\"sy0\">-</span>Employee <span class=\"st0\">'Rich Holcomb'</span>     E01234  <span class=\"nu0\">49500</span>  D202<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span>New<span class=\"sy0\">-</span>Employee <span class=\"st0\">'Nathan Adams'</span>     E41298  <span class=\"nu0\">21900</span>  D050<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span>New<span class=\"sy0\">-</span>Employee <span class=\"st0\">'Richard Potter'</span>   E43128  <span class=\"nu0\">15900</span>  D101<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span>New<span class=\"sy0\">-</span>Employee <span class=\"st0\">'David Motsinger'</span>  E27002  <span class=\"nu0\">19250</span>  D202<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span>New<span class=\"sy0\">-</span>Employee <span class=\"st0\">'Tim Sampair'</span>      E03033  <span class=\"nu0\">27000</span>  D101<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span>New<span class=\"sy0\">-</span>Employee <span class=\"st0\">'Kim Arlich'</span>       E10001  <span class=\"nu0\">57000</span>  D190<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span>New<span class=\"sy0\">-</span>Employee <span class=\"st0\">'Timothy Grove'</span>    E16398  <span class=\"nu0\">29900</span>  D190<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>TopRank <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$data</span> `<br/>        <span class=\"sy0\">|</span> <span class=\"kw1\">Group-Object</span> Department `<br/>        <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><br/>              <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.<span class=\"kw2\">Group</span> `<br/>                  <span class=\"sy0\">|</span> <span class=\"kw1\">Sort-Object</span> Salary <span class=\"kw5\">-Descending</span> `<br/>                  <span class=\"sy0\">|</span> <span class=\"kw1\">Select-Object</span> <span class=\"kw5\">-First</span> <span class=\"re0\">$n</span><br/>          <span class=\"br0\">}</span> `<br/>        <span class=\"sy0\">|</span> <span class=\"kw1\">Format-Table</span> <span class=\"kw5\">-GroupBy</span> Department<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Prolog", "loc": 53, "block": "<pre class=\"prolog highlighted_source\"><span class=\"co1\">% emp(name,id,salary,dpt)</span><br/>emp<span class=\"br0\">(</span><span class=\"st_h\">'Tyler Bennett'</span><span class=\"sy4\">,</span><span class=\"st_h\">'E10297'</span><span class=\"sy4\">,</span><span class=\"nu0\">32000</span><span class=\"sy4\">,</span><span class=\"st_h\">'D101'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>emp<span class=\"br0\">(</span><span class=\"st_h\">'John Rappl'</span><span class=\"sy4\">,</span><span class=\"st_h\">'E21437'</span><span class=\"sy4\">,</span><span class=\"nu0\">47000</span><span class=\"sy4\">,</span><span class=\"st_h\">'D050'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>emp<span class=\"br0\">(</span><span class=\"st_h\">'George Woltman'</span><span class=\"sy4\">,</span><span class=\"st_h\">'E00127'</span><span class=\"sy4\">,</span><span class=\"nu0\">53500</span><span class=\"sy4\">,</span><span class=\"st_h\">'D101'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>emp<span class=\"br0\">(</span><span class=\"st_h\">'Adam Smith'</span><span class=\"sy4\">,</span><span class=\"st_h\">'E63535'</span><span class=\"sy4\">,</span><span class=\"nu0\">18000</span><span class=\"sy4\">,</span><span class=\"st_h\">'D202'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>emp<span class=\"br0\">(</span><span class=\"st_h\">'Claire Buckman'</span><span class=\"sy4\">,</span><span class=\"st_h\">'E39876'</span><span class=\"sy4\">,</span><span class=\"nu0\">27800</span><span class=\"sy4\">,</span><span class=\"st_h\">'D202'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>emp<span class=\"br0\">(</span><span class=\"st_h\">'David McClellan'</span><span class=\"sy4\">,</span><span class=\"st_h\">'E04242'</span><span class=\"sy4\">,</span><span class=\"nu0\">41500</span><span class=\"sy4\">,</span><span class=\"st_h\">'D101'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>emp<span class=\"br0\">(</span><span class=\"st_h\">'Rich Holcomb'</span><span class=\"sy4\">,</span><span class=\"st_h\">'E01234'</span><span class=\"sy4\">,</span><span class=\"nu0\">49500</span><span class=\"sy4\">,</span><span class=\"st_h\">'D202'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>emp<span class=\"br0\">(</span><span class=\"st_h\">'Nathan Adams'</span><span class=\"sy4\">,</span><span class=\"st_h\">'E41298'</span><span class=\"sy4\">,</span><span class=\"nu0\">21900</span><span class=\"sy4\">,</span><span class=\"st_h\">'D050'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>emp<span class=\"br0\">(</span><span class=\"st_h\">'Richard Potter'</span><span class=\"sy4\">,</span><span class=\"st_h\">'E43128'</span><span class=\"sy4\">,</span><span class=\"nu0\">15900</span><span class=\"sy4\">,</span><span class=\"st_h\">'D101'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>emp<span class=\"br0\">(</span><span class=\"st_h\">'David Motsinger'</span><span class=\"sy4\">,</span><span class=\"st_h\">'E27002'</span><span class=\"sy4\">,</span><span class=\"nu0\">19250</span><span class=\"sy4\">,</span><span class=\"st_h\">'D202'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>emp<span class=\"br0\">(</span><span class=\"st_h\">'Tim Sampair'</span><span class=\"sy4\">,</span><span class=\"st_h\">'E03033'</span><span class=\"sy4\">,</span><span class=\"nu0\">27000</span><span class=\"sy4\">,</span><span class=\"st_h\">'D101'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>emp<span class=\"br0\">(</span><span class=\"st_h\">'Kim Arlich'</span><span class=\"sy4\">,</span><span class=\"st_h\">'E10001'</span><span class=\"sy4\">,</span><span class=\"nu0\">57000</span><span class=\"sy4\">,</span><span class=\"st_h\">'D190'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>emp<span class=\"br0\">(</span><span class=\"st_h\">'Timothy Grove'</span><span class=\"sy4\">,</span><span class=\"st_h\">'E16398'</span><span class=\"sy4\">,</span><span class=\"nu0\">29900</span><span class=\"sy4\">,</span><span class=\"st_h\">'D190'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>departments<span class=\"br0\">(</span>Depts<span class=\"br0\">)</span> <span class=\"sy1\">:-</span>  <span class=\"co1\">% Find the set of departments</span><br/>  <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">findall</span></a><span class=\"br0\">(</span>Dpt<span class=\"sy4\">,</span> emp<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>Dpt<span class=\"br0\">)</span><span class=\"sy4\">,</span> DList<span class=\"br0\">)</span><span class=\"sy4\">,</span> list_to_set<span class=\"br0\">(</span>DList<span class=\"sy4\">,</span> Depts<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>greater<span class=\"br0\">(</span>emp<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>Sal1<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"sy4\">,</span> emp<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>Sal2<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <br/>  Sal1 <span class=\"sy6\">&gt;</span> Sal2<span class=\"sy4\">.</span>  <span class=\"co1\">% First employee salary greater than second</span><br/>\u00a0<br/><span class=\"co1\">% Maintains a decreasing ordered list of employees truncated after (N) items.</span><br/><span class=\"co1\">%  Rule 1: For N=0, always return an empty set.</span><br/><span class=\"co1\">%  Rule 2: Add employee with greater salary at start of list, call with N-1</span><br/><span class=\"co1\">%  Rule 3: Try to add new employee at N-1</span><br/><span class=\"co1\">%  Rule 4: for an empty input list regardless of N, add the new employee</span><br/>topSalary<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>topSalary<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Emp<span class=\"sy4\">,</span> <span class=\"br0\">[</span>E<span class=\"sy5\">|</span>R<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Emp<span class=\"sy5\">|</span>Res<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span>  <br/>  greater<span class=\"br0\">(</span>Emp<span class=\"sy4\">,</span>E<span class=\"br0\">)</span><span class=\"sy4\">,</span> N0 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> topSalary<span class=\"br0\">(</span>N0<span class=\"sy4\">,</span> E<span class=\"sy4\">,</span> R<span class=\"sy4\">,</span> Res<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>topSalary<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Emp<span class=\"sy4\">,</span> <span class=\"br0\">[</span>E<span class=\"sy5\">|</span>R<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>E<span class=\"sy5\">|</span>Res<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span>  <br/>  N0 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> topSalary<span class=\"br0\">(</span>N0<span class=\"sy4\">,</span> Emp<span class=\"sy4\">,</span> R<span class=\"sy4\">,</span> Res<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>topSalary<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> Emp<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Emp<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% For each employee, add him to the list if top salary</span><br/>topEmps<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> <span class=\"br0\">[</span>Emp<span class=\"sy5\">|</span>Emps<span class=\"br0\">]</span><span class=\"sy4\">,</span> R<span class=\"sy4\">,</span> Res<span class=\"br0\">)</span> <span class=\"sy1\">:-</span>     <br/>  topSalary<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Emp<span class=\"sy4\">,</span> R<span class=\"sy4\">,</span> Rt<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> topEmps<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Emps<span class=\"sy4\">,</span> Rt<span class=\"sy4\">,</span> Res<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>topEmps<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> Res<span class=\"sy4\">,</span> Res<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% For each department, find the list of top employees in that department</span><br/>topDeps<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> <span class=\"br0\">[</span>Dept<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>dept<span class=\"br0\">(</span>Dept<span class=\"sy4\">,</span>Ro<span class=\"br0\">)</span><span class=\"sy5\">|</span>Res<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>  <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">findall</span></a><span class=\"br0\">(</span>emp<span class=\"br0\">(</span>Name<span class=\"sy4\">,</span> Id<span class=\"sy4\">,</span> Sal<span class=\"sy4\">,</span> Dept<span class=\"br0\">)</span><span class=\"sy4\">,</span> emp<span class=\"br0\">(</span>Name<span class=\"sy4\">,</span> Id<span class=\"sy4\">,</span> Sal<span class=\"sy4\">,</span> Dept<span class=\"br0\">)</span><span class=\"sy4\">,</span> Emps<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  topEmps<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Emps<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> Ro<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> topDeps<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> Res<span class=\"br0\">)</span><span class=\"sy4\">.</span>  <br/>topDeps<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% Calculate and report the list of highest salaried employees per department</span><br/>topDeps<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>  departments<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"sy4\">,</span> topDeps<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> D<span class=\"sy4\">,</span> Res<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  member<span class=\"br0\">(</span>dept<span class=\"br0\">(</span>Dept<span class=\"sy4\">,</span>R<span class=\"br0\">)</span><span class=\"sy4\">,</span> Res<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  writef<span class=\"br0\">(</span><span class=\"st_h\">'Department:\u00a0%w\\n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Dept<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  member<span class=\"br0\">(</span>emp<span class=\"br0\">(</span>Name<span class=\"sy4\">,</span>Id<span class=\"sy4\">,</span>Sal<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  writef<span class=\"br0\">(</span><span class=\"st_h\">'  ID:\u00a0%w\\t%w\\tSalary:\u00a0%w\\n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Id<span class=\"sy4\">,</span>Name<span class=\"sy4\">,</span>Sal<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">fail</span></a><span class=\"sy4\">.</span><br/>topDeps<span class=\"br0\">(</span>_<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 58, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Structure</span> Employees<br/>  Name$<br/>  ID$<br/>  Salary.i<br/>  Department$<br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> displayTopEarners<span class=\"br0\">(</span>List MyEmployees.Employees<span class=\"br0\">(</span><span class=\"br0\">)</span>, n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> filename$ <span class=\"sy0\">=</span> <span class=\"kw2\">OpenFileRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Top rank per group\"</span>, <span class=\"st0\">\"DataFile.txt\"</span>, <span class=\"st0\">\"\"</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">ReadFile</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, filename$<span class=\"br0\">)</span> <br/>    <span class=\"kw1\">Protected</span> InData.Employees, txt.s, MaxNameLength<br/>\u00a0<br/>    <span class=\"kw1\">While</span> <span class=\"kw2\">Eof</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>    <br/>      <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>MyEmployees<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>      <br/>      txt <span class=\"sy0\">=</span> <span class=\"kw2\">ReadString</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">With</span> MyEmployees<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">\\</span>Name$ <span class=\"sy0\">=</span> <span class=\"kw2\">StringField</span><span class=\"br0\">(</span>txt, <span class=\"nu0\">1</span>, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">\\</span>ID$ <span class=\"sy0\">=</span> <span class=\"kw2\">StringField</span><span class=\"br0\">(</span>txt, <span class=\"nu0\">2</span>, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">\\</span>Salary <span class=\"sy0\">=</span> <span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">StringField</span><span class=\"br0\">(</span>txt, <span class=\"nu0\">3</span>, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">\\</span>Department$ <span class=\"sy0\">=</span> <span class=\"kw2\">StringField</span><span class=\"br0\">(</span>txt, <span class=\"nu0\">4</span>, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>Name$<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> MaxNameLength: MaxNameLength <span class=\"sy0\">=</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>Name$<span class=\"br0\">)</span>: <span class=\"kw1\">EndIf</span><br/>      <span class=\"kw1\">EndWith</span><br/>    <span class=\"kw1\">Wend</span><br/>    <span class=\"kw2\">CloseFile</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Information\"</span>, <span class=\"st0\">\"Couldn't open the file!\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">End</span><br/>  <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Protected</span> OldDepartment$, count<br/>\u00a0<br/>    <span class=\"kw2\">SortStructuredList</span><span class=\"br0\">(</span>MyEmployees<span class=\"br0\">(</span><span class=\"br0\">)</span>, #PB_Sort_Descending, <span class=\"kw2\">OffsetOf</span><span class=\"br0\">(</span>Employees<span class=\"sy0\">\\</span>Salary<span class=\"br0\">)</span>, #PB_Sort_integer<span class=\"br0\">)</span><br/>    <span class=\"kw2\">SortStructuredList</span><span class=\"br0\">(</span>MyEmployees<span class=\"br0\">(</span><span class=\"br0\">)</span>, #PB_Sort_Ascending, <span class=\"kw2\">OffsetOf</span><span class=\"br0\">(</span>Employees<span class=\"sy0\">\\</span>Department$<span class=\"br0\">)</span>, #PB_Sort_String<span class=\"br0\">)</span><br/>    <span class=\"kw1\">ForEach</span> MyEmployees<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">With</span> MyEmployees<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> <span class=\"sy0\">\\</span>Department$ <span class=\"sy0\">&lt;&gt;</span> OldDepartment$<br/>          <span class=\"kw1\">If</span> OldDepartment$ <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span><br/>            <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#CRLF$<span class=\"br0\">)</span><br/>          <span class=\"kw1\">EndIf</span><br/>          OldDepartment$ <span class=\"sy0\">=</span> <span class=\"sy0\">\\</span>Department$<br/>          <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Department \"</span> <span class=\"sy0\">+</span> <span class=\"sy0\">\\</span>Department$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"---------------\"</span><span class=\"br0\">)</span><br/>          <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">LSet</span><span class=\"br0\">(</span><span class=\"st0\">\"Name\"</span>, MaxNameLength <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw2\">LSet</span><span class=\"br0\">(</span><span class=\"st0\">\"ID\"</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw2\">LSet</span><span class=\"br0\">(</span><span class=\"st0\">\"Salary\"</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">EndIf</span> <br/>        count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">If</span> count <span class=\"sy0\">&lt;=</span> n<br/>          <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">LSet</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>Name$, MaxNameLength <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>ID$, <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" $\"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span><span class=\"sy0\">\\</span>Salary<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">EndIf</span><br/>      <span class=\"kw1\">EndWith</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span>             <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">NewList</span> MyEmployees.Employees<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>displayTopEarners<span class=\"br0\">(</span>MyEmployees<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 30, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">collections</span> <span class=\"kw1\">import</span> defaultdict<br/><span class=\"kw1\">from</span> <span class=\"kw3\">heapq</span> <span class=\"kw1\">import</span> nlargest<br/>\u00a0<br/>data <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"st0\">'Employee Name'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Employee ID'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Salary'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Department'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span><span class=\"st0\">'Tyler Bennett'</span><span class=\"sy0\">,</span> <span class=\"st0\">'E10297'</span><span class=\"sy0\">,</span> <span class=\"nu0\">32000</span><span class=\"sy0\">,</span> <span class=\"st0\">'D101'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span><span class=\"st0\">'John Rappl'</span><span class=\"sy0\">,</span> <span class=\"st0\">'E21437'</span><span class=\"sy0\">,</span> <span class=\"nu0\">47000</span><span class=\"sy0\">,</span> <span class=\"st0\">'D050'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span><span class=\"st0\">'George Woltman'</span><span class=\"sy0\">,</span> <span class=\"st0\">'E00127'</span><span class=\"sy0\">,</span> <span class=\"nu0\">53500</span><span class=\"sy0\">,</span> <span class=\"st0\">'D101'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span><span class=\"st0\">'Adam Smith'</span><span class=\"sy0\">,</span> <span class=\"st0\">'E63535'</span><span class=\"sy0\">,</span> <span class=\"nu0\">18000</span><span class=\"sy0\">,</span> <span class=\"st0\">'D202'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span><span class=\"st0\">'Claire Buckman'</span><span class=\"sy0\">,</span> <span class=\"st0\">'E39876'</span><span class=\"sy0\">,</span> <span class=\"nu0\">27800</span><span class=\"sy0\">,</span> <span class=\"st0\">'D202'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span><span class=\"st0\">'David McClellan'</span><span class=\"sy0\">,</span> <span class=\"st0\">'E04242'</span><span class=\"sy0\">,</span> <span class=\"nu0\">41500</span><span class=\"sy0\">,</span> <span class=\"st0\">'D101'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span><span class=\"st0\">'Rich Holcomb'</span><span class=\"sy0\">,</span> <span class=\"st0\">'E01234'</span><span class=\"sy0\">,</span> <span class=\"nu0\">49500</span><span class=\"sy0\">,</span> <span class=\"st0\">'D202'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span><span class=\"st0\">'Nathan Adams'</span><span class=\"sy0\">,</span> <span class=\"st0\">'E41298'</span><span class=\"sy0\">,</span> <span class=\"nu0\">21900</span><span class=\"sy0\">,</span> <span class=\"st0\">'D050'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span><span class=\"st0\">'Richard Potter'</span><span class=\"sy0\">,</span> <span class=\"st0\">'E43128'</span><span class=\"sy0\">,</span> <span class=\"nu0\">15900</span><span class=\"sy0\">,</span> <span class=\"st0\">'D101'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span><span class=\"st0\">'David Motsinger'</span><span class=\"sy0\">,</span> <span class=\"st0\">'E27002'</span><span class=\"sy0\">,</span> <span class=\"nu0\">19250</span><span class=\"sy0\">,</span> <span class=\"st0\">'D202'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span><span class=\"st0\">'Tim Sampair'</span><span class=\"sy0\">,</span> <span class=\"st0\">'E03033'</span><span class=\"sy0\">,</span> <span class=\"nu0\">27000</span><span class=\"sy0\">,</span> <span class=\"st0\">'D101'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span><span class=\"st0\">'Kim Arlich'</span><span class=\"sy0\">,</span> <span class=\"st0\">'E10001'</span><span class=\"sy0\">,</span> <span class=\"nu0\">57000</span><span class=\"sy0\">,</span> <span class=\"st0\">'D190'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span><span class=\"st0\">'Timothy Grove'</span><span class=\"sy0\">,</span> <span class=\"st0\">'E16398'</span><span class=\"sy0\">,</span> <span class=\"nu0\">29900</span><span class=\"sy0\">,</span> <span class=\"st0\">'D190'</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>departments <span class=\"sy0\">=</span> defaultdict<span class=\"br0\">(</span><span class=\"kw2\">list</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> rec <span class=\"kw1\">in</span> data<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span>:<br/>    departments<span class=\"br0\">[</span>rec<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">append</span><span class=\"br0\">(</span>rec<span class=\"br0\">)</span><br/>\u00a0<br/>N <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>format <span class=\"sy0\">=</span> <span class=\"st0\">\"\u00a0%-15s \"</span> * <span class=\"kw2\">len</span><span class=\"br0\">(</span>data<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> department<span class=\"sy0\">,</span> recs <span class=\"kw1\">in</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>departments.<span class=\"me1\">items</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"st0\">\"Department\u00a0%s\"</span>\u00a0% department<span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span> <span class=\"br0\">(</span>format\u00a0% data<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> rec <span class=\"kw1\">in</span> nlargest<span class=\"br0\">(</span>N<span class=\"sy0\">,</span> recs<span class=\"sy0\">,</span> key<span class=\"sy0\">=</span><span class=\"kw1\">lambda</span> rec: rec<span class=\"br0\">[</span>-<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span> <span class=\"br0\">(</span>format\u00a0% rec<span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 15, "block": "<pre class=\"text highlighted_source\">dfr &lt;- read.csv(tc &lt;- textConnection(<br/>\"Employee Name,Employee ID,Salary,Department<br/>Tyler Bennett,E10297,32000,D101<br/>John Rappl,E21437,47000,D050<br/>George Woltman,E00127,53500,D101<br/>Adam Smith,E63535,18000,D202<br/>Claire Buckman,E39876,27800,D202<br/>David McClellan,E04242,41500,D101<br/>Rich Holcomb,E01234,49500,D202<br/>Nathan Adams,E41298,21900,D050<br/>Richard Potter,E43128,15900,D101<br/>David Motsinger,E27002,19250,D202<br/>Tim Sampair,E03033,27000,D101<br/>Kim Arlich,E10001,57000,D190<br/>Timothy Grove,E16398,29900,D190\")); close(tc)</pre>"}, {"lang": "Racket", "loc": 32, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(struct employee (name id salary dept))<br/>(define employees<br/>  (list (employee \"Tyler Bennett\"   \"E10297\" 32000 \"D101\")<br/>        (employee \"John Rappl\"      \"E21437\" 47000 \"D050\")<br/>        (employee \"George Woltman\"  \"E00127\" 53500 \"D101\")<br/>        (employee \"Adam Smith\"      \"E63535\" 18000 \"D202\")<br/>        (employee \"Claire Buckman\"  \"E39876\" 27800 \"D202\")<br/>        (employee \"David McClellan\" \"E04242\" 41500 \"D101\")<br/>        (employee \"Rich Holcomb\"    \"E01234\" 49500 \"D202\")<br/>        (employee \"Nathan Adams\"    \"E41298\" 21900 \"D050\")<br/>        (employee \"Richard Potter\"  \"E43128\" 15900 \"D101\")<br/>        (employee \"David Motsinger\" \"E27002\" 19250 \"D202\")<br/>        (employee \"Tim Sampair\"     \"E03033\" 27000 \"D101\")<br/>        (employee \"Kim Arlich\"      \"E10001\" 57000 \"D190\")<br/>        (employee \"Timothy Grove\"   \"E16398\" 29900 \"D190\")))<br/>\u00a0<br/>(define (top/dept N)<br/>  (for/list ([dept (remove-duplicates (map employee-dept employees))])<br/>    (define people<br/>      (filter (\u03bb(e) (equal? dept (employee-dept e))) employees))<br/>    (cons dept (take (sort people &gt; #:key employee-salary) N))))<br/>\u00a0<br/>(for ([dept (top/dept 2)])<br/>  (printf \"Department ~a:\\n\" (car dept))<br/>  (for ([e (cdr dept)])<br/>    (printf \"  $~a: ~a (~a)\\n\"<br/>            (employee-salary e)<br/>            (employee-name e)<br/>            (employee-id e))))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 40, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program displays the top   N   salaries in each department (internal table).     */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> topN <span class=\"sy0\">.</span>                                 <span class=\"coMULTI\">/*get optional # for the top N salaries*/</span><br/><span class=\"kw1\">if</span> topN==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> topN==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> topN=<span class=\"nu0\">1</span>             <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'Finding the top '</span>   topN   <span class=\"st0\">\" salaries in each department.\"</span>;            <span class=\"kw1\">say</span><br/>@<span class=\"sy0\">.</span>=      <span class=\"coMULTI\">/*\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 employee name      ID    salary   dept. \u2550\u2550\u2550\u2550\u2550\u2550\u2550 */</span><br/>            @<span class=\"sy0\">.</span>1 = <span class=\"st0\">\"Tyler Bennett    ,E10297,  32000,  D101\"</span><br/>            @<span class=\"sy0\">.</span>2 = <span class=\"st0\">\"John Rappl       ,E21437,  47000,  D050\"</span><br/>            @<span class=\"sy0\">.</span>3 = <span class=\"st0\">\"George Woltman   ,E00127,  53500,  D101\"</span><br/>            @<span class=\"sy0\">.</span>4 = <span class=\"st0\">\"Adam Smith       ,E63535,  18000,  D202\"</span><br/>            @<span class=\"sy0\">.</span>5 = <span class=\"st0\">\"Claire Buckman   ,E39876,  27800,  D202\"</span><br/>            @<span class=\"sy0\">.</span>6 = <span class=\"st0\">\"David McClellan  ,E04242,  41500,  D101\"</span><br/>            @<span class=\"sy0\">.</span>7 = <span class=\"st0\">\"Rich Holcomb     ,E01234,  49500,  D202\"</span><br/>            @<span class=\"sy0\">.</span>8 = <span class=\"st0\">\"Nathan Adams     ,E41298,  21900,  D050\"</span><br/>            @<span class=\"sy0\">.</span>9 = <span class=\"st0\">\"Richard Potter   ,E43128,  15900,  D101\"</span><br/>           @<span class=\"sy0\">.</span>10 = <span class=\"st0\">\"David Motsinger  ,E27002,  19250,  D202\"</span><br/>           @<span class=\"sy0\">.</span>11 = <span class=\"st0\">\"Tim Sampair      ,E03033,  27000,  D101\"</span><br/>           @<span class=\"sy0\">.</span>12 = <span class=\"st0\">\"Kim Arlich       ,E10001,  57000,  D190\"</span><br/>           @<span class=\"sy0\">.</span>13 = <span class=\"st0\">\"Timothy Grove    ,E16398,  29900,  D190\"</span><br/>depts=<br/>                   <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">until</span> @<span class=\"sy0\">.</span>j==<span class=\"st0\">''</span>         <span class=\"coMULTI\">/*build database elements from @ array.*/</span><br/>                   <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  @<span class=\"sy0\">.</span>j  <span class=\"kw2\">name</span><span class=\"sy0\">.</span>j    <span class=\"st0\">','</span>    id<span class=\"sy0\">.</span>j    <span class=\"st0\">\",\"</span>    sal<span class=\"sy0\">.</span>j    <span class=\"st0\">','</span>   dept<span class=\"sy0\">.</span>j <span class=\"sy0\">.</span><br/>                   <span class=\"kw1\">if</span> <span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>dept<span class=\"sy0\">.</span>j,depts<span class=\"br0\">)</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> depts=depts dept<span class=\"sy0\">.</span>j    <span class=\"coMULTI\">/*a new DEPT?*/</span><br/>                   <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>employees=j-<span class=\"nu0\">1</span>                                    <span class=\"coMULTI\">/*adjust for the  DO  loop  index bump.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'There are '</span>   employees   <span class=\"st0\">\"employees, \"</span>    <span class=\"kw6\">words</span><span class=\"br0\">(</span>depts<span class=\"br0\">)</span>     <span class=\"st0\">'departments: '</span>     depts<br/><span class=\"kw1\">say</span><br/>    <span class=\"kw1\">do</span> dep=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>depts<span class=\"br0\">)</span>;      <span class=\"kw1\">say</span>         <span class=\"coMULTI\">/*process each of the departments.     */</span><br/>    Xdept=<span class=\"kw6\">word</span><span class=\"br0\">(</span>depts,dep<span class=\"br0\">)</span>                        <span class=\"coMULTI\">/*current department being processed.  */</span><br/>        <span class=\"kw1\">do</span> topN;             highSal=<span class=\"nu0\">0</span>           <span class=\"coMULTI\">/*process the top  N  salaries.        */</span><br/>        h=<span class=\"nu0\">0</span>                                      <span class=\"coMULTI\">/*point to the highest paid employee.  */</span><br/>            <span class=\"kw1\">do</span> e=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> employees                <span class=\"coMULTI\">/*process each employee in department. */</span><br/>            <span class=\"kw1\">if</span> dept<span class=\"sy0\">.</span>e<span class=\"sy0\">\\</span>==Xdept <span class=\"sy0\">|</span> sal<span class=\"sy0\">.</span>e<span class=\"sy0\">&lt;</span>highSal  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>    <span class=\"coMULTI\">/*is this the wrong info?*/</span><br/>            highSal=sal<span class=\"sy0\">.</span>e;   h=e                 <span class=\"coMULTI\">/*a higher salary was just discovered. */</span><br/>            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*e*/</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> h==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>                    <span class=\"coMULTI\">/*do we have no highest paid this time?*/</span><br/>        <span class=\"kw1\">say</span> <span class=\"st0\">'department:  '</span>      dept<span class=\"sy0\">.</span>h      <span class=\"st0\">\" $\"</span> <span class=\"sy0\">||</span> sal<span class=\"sy0\">.</span>h+<span class=\"nu0\">0</span>       id<span class=\"sy0\">.</span>h      <span class=\"kw6\">space</span><span class=\"br0\">(</span><span class=\"kw2\">name</span><span class=\"sy0\">.</span>h<span class=\"br0\">)</span><br/>        dept<span class=\"sy0\">.</span>h=                                  <span class=\"coMULTI\">/*make sure we see the employee again. */</span><br/>        <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*topN*/</span><br/>    <span class=\"kw3\">end</span>           <span class=\"coMULTI\">/*dep*/</span>                        <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 61, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Top rank per group<br/>\u00a0<br/>load \"stdlib.ring\"<br/>salary = \"Tyler Bennett,E10297,32000,D101<br/>John Rappl,E21437,47000,D050<br/>George Woltman,E00127,53500,D101<br/>Adam Smith,E63535,18000,D202<br/>Claire Buckman,E39876,27800,D202<br/>David McClellan,E04242,41500,D101<br/>Rich Holcomb,E01234,49500,D202<br/>Nathan Adams,E41298,21900,D050<br/>Richard Potter,E43128,15900,D101<br/>David Motsinger,E27002,19250,D202<br/>Tim Sampair,E03033,27000,D101<br/>Kim Arlich,E10001,57000,D190<br/>Timothy Grove,E16398,29900,D190\"<br/>\u00a0<br/>temp = substr(salary, \",\", nl)<br/>temp = str2list(temp)<br/>depsal = newlist(13,4)<br/>for n = 1 to len(temp)<br/>     n1 = ceil(n/4)<br/>     n2 = n%4<br/>     if n2 = 0<br/>        n2 = 4<br/>     ok<br/>     depsal[n1][n2] = temp[n]<br/>next<br/>for n = 1 to len(depsal)-1<br/>     for m = n+1 to len(depsal)<br/>          if strcmp(depsal[m][4], depsal[n][4]) &lt; 0 <br/>              tmp = depsal[n]<br/>              depsal[n] = depsal[m]<br/>              depsal[m] = tmp<br/>          ok<br/>      next<br/>next<br/>for n = 1 to len(depsal)-1<br/>     for m = n+1 to len(depsal)<br/>           if (depsal[m][4] = depsal[n][4]) and (depsal[m][3] &gt; depsal[n][3]) <br/>               tmp = depsal[n]<br/>               depsal[n] = depsal[m]<br/>               depsal[m] = tmp<br/>           ok<br/>      next<br/>next<br/>see \"Department\u00a0: \" + depsal[1][4] + nl<br/>see \"Name                   \" + \"Id             \" + \"Salary\" + nl + nl<br/>see \"\" + depsal[1][1] + \"      \" + depsal[1][2] + \"      \" + depsal[1][3]+ nl<br/>for n = 1 to len(depsal)-1<br/>    if (depsal[n+1][4]\u00a0!= depsal[n][4])<br/>        see nl<br/>        see \"Department\u00a0: \" + depsal[n+1][4] + nl<br/>        see \"Name                   \" + \"Id             \" + \"Salary\" + nl + nl<br/>        see \"\" + depsal[n+1][1] + \"      \" + depsal[n+1][2] + \"      \" + depsal[n+1][3]+ nl<br/>     else<br/>        see \"\" + depsal[n+1][1] + \"      \" + depsal[n+1][2] + \"      \" + depsal[n+1][3]+ nl<br/>     ok<br/>next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 33, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">\"csv\"</span><br/>\u00a0<br/>data = <span class=\"co4\">&lt;&lt;EOS<br/>Employee Name,Employee ID,Salary,Department<br/>Tyler Bennett,E10297,32000,D101<br/>John Rappl,E21437,47000,D050<br/>George Woltman,E00127,53500,D101<br/>Adam Smith,E63535,18000,D202<br/>Claire Buckman,E39876,27800,D202<br/>David McClellan,E04242,41500,D101<br/>Rich Holcomb,E01234,49500,D202<br/>Nathan Adams,E41298,21900,D050<br/>Richard Potter,E43128,15900,D101<br/>David Motsinger,E27002,19250,D202<br/>Tim Sampair,E03033,27000,D101<br/>Kim Arlich,E10001,57000,D190<br/>Timothy Grove,E16398,29900,D190<br/>EOS</span><br/>\u00a0<br/><span class=\"kw1\">def</span> show_top_salaries_per_group<span class=\"br0\">(</span>data, n<span class=\"br0\">)</span><br/>  table = CSV.<span class=\"me1\">parse</span><span class=\"br0\">(</span>data, <span class=\"re3\">:headers</span><span class=\"sy0\">=&gt;</span><span class=\"kw2\">true</span>, <span class=\"re3\">:header_converters</span><span class=\"sy0\">=&gt;</span>:symbol<span class=\"br0\">)</span><br/>  groups = table.<span class=\"me1\">group_by</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>emp<span class=\"sy0\">|</span> emp<span class=\"br0\">[</span><span class=\"re3\">:department</span><span class=\"br0\">]</span><span class=\"br0\">}</span>.<span class=\"me1\">sort</span><br/>  groups.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>dept, emps<span class=\"sy0\">|</span><br/>    <span class=\"kw3\">puts</span> dept<br/>    <span class=\"co1\"># max by salary</span><br/>    emps.<span class=\"me1\">max_by</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>emp<span class=\"sy0\">|</span> emp<span class=\"br0\">[</span><span class=\"re3\">:salary</span><span class=\"br0\">]</span>.<span class=\"me1\">to_i</span><span class=\"br0\">}</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>e<span class=\"sy0\">|</span><br/>      <span class=\"kw3\">puts</span> <span class=\"st0\">\"   \u00a0%-16s\u00a0%6s\u00a0%7d\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>e<span class=\"br0\">[</span><span class=\"re3\">:employee_name</span><span class=\"br0\">]</span>, e<span class=\"br0\">[</span><span class=\"re3\">:employee_id</span><span class=\"br0\">]</span>, e<span class=\"br0\">[</span><span class=\"re3\">:salary</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">puts</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>show_top_salaries_per_group<span class=\"br0\">(</span>data, <span class=\"nu0\">3</span><span class=\"br0\">)</span></pre>"}, {"lang": "Run BASIC", "loc": 39, "block": "<pre class=\"text highlighted_source\">perSal$ = \"Tyler Bennett,E10297,32000,D101<br/>John Rappl,E21437,47000,D050;<br/>George Woltman,E00127,53500,D101<br/>Adam Smith,E63535,18000,D202;<br/>Claire Buckman,E39876,27800,D202<br/>David McClellan,E04242,41500,D101<br/>Rich Holcomb,E01234,49500,D202<br/>Nathan Adams,E41298,21900,D050<br/>Richard Potter,E43128,15900,D101<br/>David Motsinger,E27002,19250,D202<br/>Tim Sampair,E03033,27000,D101<br/>Kim Arlich,E10001,57000,D190<br/>Timothy Grove,E16398,29900,D190\"<br/>\u00a0<br/>while word$(perSal$,n+1,chr$(13)) &lt;&gt; \"\"\u00a0: n = n + 1\u00a0: wend   ' get count of employees<br/>dim depSal$(n)<br/>for i = 1 to n<br/>  depSal$(i) = word$(perSal$,i,chr$(13))<br/>next i<br/>sw = 1<br/>while sw = 1<br/>  sw = 0<br/>  for i = 1 to n -1<br/>    if word$(depSal$(i),4,\",\")+word$(depSal$(i),3,\",\") &gt; word$(depSal$(i+1),4,\",\")+word$(depSal$(i+1),3,\",\") then<br/>      temp$        = depSal$(i)   <br/>      depSal$(i)   = depSal$(i+1)<br/>      depSal$(i+1) = temp$<br/>      sw           = 1<br/>    end if<br/>  next i<br/>wend<br/>print \"Employee Name\";chr$(9);\"ID\";chr$(9);\"Salary\"<br/>for i = 1 to n<br/>  if dep$ &lt;&gt; word$(depSal$(i),4,\",\") then <br/>    dep$ = word$(depSal$(i),4,\",\")<br/>    print\u00a0: print\"Department:\";dep$<br/>  end if<br/>print word$(depSal$(i),1,\",\");chr$(9);word$(depSal$(i),2,\",\");chr$(9);word$(depSal$(i),3,\",\")<br/>next i</pre>"}, {"lang": "Scala", "loc": 58, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">io</span>.<span class=\"me1\">Source</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">language</span>.<span class=\"me1\">implicitConversions</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">language</span>.<span class=\"me1\">reflectiveCalls</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">collection</span>.<span class=\"me1\">immutable</span>.<span class=\"me1\">TreeMap</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> TopRank <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> topN <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rawData <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"Employee Name;Employee ID;Salary;Department<br/>\t\t\t   |Tyler Bennett;E10297;32000;D101<br/>\t\t\t   |John Rappl;E21437;47000;D050<br/>\t\t\t   |George Woltman;E00127;53500;D101<br/>\t\t\t   |Adam Smith;E63535;18000;D202<br/>\t\t\t   |Claire Buckman;E39876;27800;D202<br/>\t\t\t   |David McClellan;E04242;41500;D101<br/>\t\t\t   |Rich Holcomb;E01234;49500;D202<br/>\t\t\t   |Nathan Adams;E41298;21900;D050<br/>\t\t\t   |Richard Potter;E43128;15900;D101<br/>\t\t\t   |David Motsinger;E27002;19250;D202<br/>\t\t\t   |Tim Sampair;E03033;27000;D101<br/>\t\t\t   |Kim Arlich;E10001;57000;D190<br/>\t\t\t   |Timothy Grove;E16398;29900;D190\"</span><span class=\"st0\">\"\"</span>.<span class=\"me1\">stripMargin</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Employee<span class=\"br0\">(</span>name<span class=\"sy0\">:</span> String, id<span class=\"sy0\">:</span> String,<br/>                 <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> salary<span class=\"sy0\">:</span> Int,<br/>                 <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> department<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString <span class=\"sy0\">=</span> s<span class=\"st0\">\"$id<span class=\"es1\">\\t</span>$salary<span class=\"es1\">\\t</span>$name\"</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// A TreeMap has sorted keys</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> data<span class=\"sy0\">:</span> TreeMap<span class=\"br0\">[</span>String, Seq<span class=\"br0\">[</span>TopRank.<span class=\"me1\">Employee</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"co1\">// TreeMap is a sorted map</span><br/>    TreeMap<span class=\"br0\">(</span><span class=\"br0\">(</span>Source.<span class=\"me1\">fromString</span><span class=\"br0\">(</span>rawData<span class=\"br0\">)</span> getLines <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toSeq</span> <span class=\"co1\">// Runtime parsing</span><br/>      .<span class=\"me1\">drop</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">// Drop header</span><br/>      .<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\";\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">//read fields into list of employees</span><br/>      .<span class=\"me1\">map</span><span class=\"br0\">(</span>emp <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Employee<span class=\"br0\">(</span>emp<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, emp<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, emp<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span>, emp<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      .<span class=\"me1\">groupBy</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">department</span><span class=\"br0\">)</span>.<span class=\"me1\">toSeq</span><span class=\"sy0\">:</span> <span class=\"sy0\">_*</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">implicit</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> iterableWithAvg<span class=\"br0\">[</span>T<span class=\"sy0\">:</span> Numeric<span class=\"br0\">]</span><span class=\"br0\">(</span>data<span class=\"sy0\">:</span> Iterable<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> average<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">(</span>ts<span class=\"sy0\">:</span> Iterable<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">implicit</span></a> num<span class=\"sy0\">:</span> Numeric<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      num.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span>ts.<span class=\"me1\">sum</span><span class=\"br0\">)</span> / ts.<span class=\"me1\">size</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> avg <span class=\"sy0\">=</span> average<span class=\"br0\">(</span>data<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> data.<span class=\"me1\">flatMap</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span><span class=\"sy0\">_</span>, emps<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> emps.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">salary</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">avg</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Reporting top $topN salaries in each department.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Total of ${data.foldLeft(0)(_ + _._2.size)} employees in ${data.size} departments\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>f<span class=\"st0\">\"Average salary: $a%8.2f<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  data.<span class=\"me1\">foreach</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>dep, emps<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>f<span class=\"st0\">\"Department: $dep  pop: ${emps.size} avg: ${emps.map(_.salary).avg}%8.2f<span class=\"es1\">\\n</span>\"</span><br/>      + emps.<span class=\"me1\">sortBy</span><span class=\"br0\">(</span>-<span class=\"sy0\">_</span>.<span class=\"me1\">salary</span><span class=\"br0\">)</span>.<span class=\"me1\">take</span><span class=\"br0\">(</span>topN<span class=\"br0\">)</span><br/>      .<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">toString</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span>, <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\t</span>\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 57, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span>use gauche.record<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;  This will let us treat a list as though it is a structure (record).</span><br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>record<span class=\"sy0\">-</span>type <span class=\"br0\">(</span>employee <span class=\"br0\">(</span>pseudo<span class=\"sy0\">-</span>rtd <span class=\"sy0\">&lt;</span>list<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"br0\">)</span> #t #t<br/>  name id salary dept<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>get<span class=\"sy0\">-</span>fields str<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"sy0\">^</span>x <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>#<span class=\"sy0\">/^</span>\\<span class=\"kw1\">d</span><span class=\"sy0\">/</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span>number x<span class=\"br0\">)</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>split str #\\,<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>print<span class=\"sy0\">-</span>record column<span class=\"sy0\">-</span>widths record<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"  \"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>print <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>join<br/>    <span class=\"br0\">(</span><span class=\"kw1\">map</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">^</span><span class=\"br0\">(</span>x width<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">number?</span> x<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>format <span class=\"st0\">\"~vD\"</span> width x<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>format <span class=\"st0\">\"~vA\"</span> width x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      record<br/>      column<span class=\"sy0\">-</span>widths<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>get<span class=\"sy0\">-</span>column<span class=\"sy0\">-</span>widths records<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>apply<br/>    <span class=\"kw1\">map</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> column<br/>        <span class=\"br0\">(</span>apply <span class=\"kw1\">max</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span>compose <span class=\"kw1\">string-length</span> x<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span><span class=\"br0\">)</span> column<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      records<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> records<br/>  <span class=\"br0\">(</span><span class=\"kw1\">map</span> get<span class=\"sy0\">-</span>fields<br/>    <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>split<br/>      <span class=\"st0\">\"Tyler Bennett,E10297,32000,D101<br/>      John Rappl,E21437,47000,D050<br/>      George Woltman,E00127,53500,D101<br/>      Adam Smith,E63535,18000,D202<br/>      Claire Buckman,E39876,27800,D202<br/>      David McClellan,E04242,41500,D101<br/>      Rich Holcomb,E01234,49500,D202<br/>      Nathan Adams,E41298,21900,D050<br/>      Richard Potter,E43128,15900,D101<br/>      David Motsinger,E27002,19250,D202<br/>      Tim Sampair,E03033,27000,D101<br/>      Kim Arlich,E10001,57000,D190<br/>      Timothy Grove,E16398,29900,D190\"</span><br/>      #<span class=\"sy0\">/</span>\\<span class=\"kw1\">s</span><span class=\"sy0\">*</span>\\n\\<span class=\"kw1\">s</span><span class=\"sy0\">*/</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>top<span class=\"sy0\">-</span>salaries n records<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>departments <span class=\"br0\">(</span>sort <span class=\"br0\">(</span>delete<span class=\"sy0\">-</span>duplicates <span class=\"br0\">(</span><span class=\"kw1\">map</span> employee<span class=\"sy0\">-</span>dept records<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>col<span class=\"sy0\">-</span>widths <span class=\"br0\">(</span>get<span class=\"sy0\">-</span>column<span class=\"sy0\">-</span>widths records<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>sorted<span class=\"sy0\">-</span>by<span class=\"sy0\">-</span>salary <span class=\"br0\">(</span>sort records <span class=\"sy0\">&gt;</span> employee<span class=\"sy0\">-</span>salary<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>dolist <span class=\"br0\">(</span>dept departments<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>print dept<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>let1 matches <span class=\"br0\">(</span>filter <span class=\"br0\">(</span><span class=\"sy0\">^</span>x <span class=\"br0\">(</span><span class=\"kw1\">string=?</span> dept <span class=\"br0\">(</span>employee<span class=\"sy0\">-</span>dept x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                            sorted<span class=\"sy0\">-</span>by<span class=\"sy0\">-</span>salary<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">for-each</span><br/>          <span class=\"br0\">(</span>pa$ print<span class=\"sy0\">-</span>record col<span class=\"sy0\">-</span>widths<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>take<span class=\"sy0\">*</span> matches n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 27, "block": "<pre class=\"ruby highlighted_source\">var data = <span class=\"sy0\">&lt;&lt;</span><span class=\"st0\">'EOF'</span>.<span class=\"me1\">lines</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span> <span class=\"sy0\">&lt;</span>name id salary dept<span class=\"sy0\">&gt;</span> ~Z .<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> flat.<span class=\"me1\">to_h</span> <span class=\"br0\">}</span><br/>Tyler Bennett,E10297,<span class=\"nu0\">32000</span>,D101<br/>John Rappl,E21437,<span class=\"nu0\">47000</span>,D050<br/>George Woltman,E00127,<span class=\"nu0\">53500</span>,D101<br/>Adam Smith,E63535,<span class=\"nu0\">18000</span>,D202<br/>Claire Buckman,E39876,<span class=\"nu0\">27800</span>,D202<br/>David McClellan,E04242,<span class=\"nu0\">41500</span>,D101<br/>Rich Holcomb,E01234,<span class=\"nu0\">49500</span>,D202<br/>Nathan Adams,E41298,<span class=\"nu0\">21900</span>,D050<br/>Richard Potter,E43128,<span class=\"nu0\">15900</span>,D101<br/>David Motsinger,E27002,<span class=\"nu0\">19250</span>,D202<br/>Tim Sampair,E03033,<span class=\"nu0\">27000</span>,D101<br/>Kim Arlich,E10001,<span class=\"nu0\">57000</span>,D190<br/>Timothy Grove,E16398,<span class=\"nu0\">29900</span>,D190<br/>EOF<br/>\u00a0<br/>var n = <span class=\"br0\">(</span>ARGV\u00a0? Num<span class=\"br0\">(</span>ARGV<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\u00a0: <span class=\"st0\">\"usage: #{__MAIN__} [n]<span class=\"es0\">\\n</span>\"</span>.<span class=\"me1\">die</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> d <span class=\"kw1\">in</span> <span class=\"br0\">(</span>data.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>h<span class=\"sy0\">|</span> h<span class=\"br0\">{</span>:dept<span class=\"br0\">}</span> <span class=\"br0\">}</span>.<span class=\"me1\">uniq</span>.<span class=\"me1\">sort</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var es = data.<span class=\"me1\">grep</span> <span class=\"br0\">{</span> _<span class=\"br0\">{</span>:dept<span class=\"br0\">}</span> == d <span class=\"br0\">}</span>.<span class=\"me1\">sort_by</span> <span class=\"br0\">{</span> <span class=\"sy0\">-</span>Num<span class=\"br0\">(</span>_<span class=\"br0\">{</span>:salary<span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    say d<br/>    n.<span class=\"me1\">times</span> <span class=\"br0\">{</span><br/>        es <span class=\"sy0\">||</span> <span class=\"kw1\">break</span><br/>        <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%-15s |\u00a0%-6s |\u00a0%5d<span class=\"es0\">\\n</span>\"</span>, es.<span class=\"me1\">shift</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">&lt;</span>name id salary<span class=\"sy0\">&gt;</span>...<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "SMEQL", "loc": 6, "block": "<pre class=\"text highlighted_source\">table: Employees<br/>----------------<br/>empID<br/>dept<br/>empName<br/>salary</pre>"}, {"lang": "SQL", "loc": 39, "block": "<pre class=\"sql highlighted_source\"><span class=\"kw1\">CREATE</span> <span class=\"kw1\">TABLE</span> EMP<br/><span class=\"br0\">(</span><br/>EMP_ID  varchar2<span class=\"br0\">(</span><span class=\"nu0\">6</span> <span class=\"kw1\">CHAR</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>EMP_NAMEvarchar2<span class=\"br0\">(</span><span class=\"nu0\">20</span> <span class=\"kw1\">CHAR</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>DEPT_ID varchar2<span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"kw1\">CHAR</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>SALARY  <span class=\"kw1\">NUMBER</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> EMP <span class=\"br0\">(</span>EMP_ID<span class=\"sy0\">,</span> EMP_NAME<span class=\"sy0\">,</span> DEPT_ID<span class=\"sy0\">,</span> SALARY<span class=\"br0\">)</span><br/> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"st0\">'E21437'</span><span class=\"sy0\">,</span><span class=\"st0\">'John Rappl'</span><span class=\"sy0\">,</span><span class=\"st0\">'D050'</span><span class=\"sy0\">,</span><span class=\"nu0\">47000</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> EMP <span class=\"br0\">(</span>EMP_ID<span class=\"sy0\">,</span> EMP_NAME<span class=\"sy0\">,</span> DEPT_ID<span class=\"sy0\">,</span> SALARY<span class=\"br0\">)</span><br/> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"st0\">'E10297'</span><span class=\"sy0\">,</span><span class=\"st0\">'Tyler Bennett'</span><span class=\"sy0\">,</span><span class=\"st0\">'D101'</span><span class=\"sy0\">,</span><span class=\"nu0\">32000</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> EMP <span class=\"br0\">(</span>EMP_ID<span class=\"sy0\">,</span> EMP_NAME<span class=\"sy0\">,</span> DEPT_ID<span class=\"sy0\">,</span> SALARY<span class=\"br0\">)</span><br/> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"st0\">'E00127'</span><span class=\"sy0\">,</span><span class=\"st0\">'George Woltman'</span><span class=\"sy0\">,</span><span class=\"st0\">'D101'</span><span class=\"sy0\">,</span><span class=\"nu0\">53500</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> EMP <span class=\"br0\">(</span>EMP_ID<span class=\"sy0\">,</span> EMP_NAME<span class=\"sy0\">,</span> DEPT_ID<span class=\"sy0\">,</span> SALARY<span class=\"br0\">)</span><br/> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"st0\">'E63535'</span><span class=\"sy0\">,</span><span class=\"st0\">'Adam Smith'</span><span class=\"sy0\">,</span><span class=\"st0\">'D202'</span><span class=\"sy0\">,</span><span class=\"nu0\">18000</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> EMP <span class=\"br0\">(</span>EMP_ID<span class=\"sy0\">,</span> EMP_NAME<span class=\"sy0\">,</span> DEPT_ID<span class=\"sy0\">,</span> SALARY<span class=\"br0\">)</span><br/> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"st0\">'E39876'</span><span class=\"sy0\">,</span><span class=\"st0\">'Claire Buckman'</span><span class=\"sy0\">,</span><span class=\"st0\">'D202'</span><span class=\"sy0\">,</span><span class=\"nu0\">27800</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> EMP <span class=\"br0\">(</span>EMP_ID<span class=\"sy0\">,</span> EMP_NAME<span class=\"sy0\">,</span> DEPT_ID<span class=\"sy0\">,</span> SALARY<span class=\"br0\">)</span><br/> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"st0\">'E04242'</span><span class=\"sy0\">,</span><span class=\"st0\">'David McClellan'</span><span class=\"sy0\">,</span><span class=\"st0\">'D101'</span><span class=\"sy0\">,</span><span class=\"nu0\">41500</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> EMP <span class=\"br0\">(</span>EMP_ID<span class=\"sy0\">,</span> EMP_NAME<span class=\"sy0\">,</span> DEPT_ID<span class=\"sy0\">,</span> SALARY<span class=\"br0\">)</span><br/> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"st0\">'E41298'</span><span class=\"sy0\">,</span><span class=\"st0\">'Nathan Adams'</span><span class=\"sy0\">,</span><span class=\"st0\">'D050'</span><span class=\"sy0\">,</span><span class=\"nu0\">21900</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> EMP <span class=\"br0\">(</span>EMP_ID<span class=\"sy0\">,</span> EMP_NAME<span class=\"sy0\">,</span> DEPT_ID<span class=\"sy0\">,</span> SALARY<span class=\"br0\">)</span><br/> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"st0\">'E43128'</span><span class=\"sy0\">,</span><span class=\"st0\">'Richard Potter'</span><span class=\"sy0\">,</span><span class=\"st0\">'D101'</span><span class=\"sy0\">,</span><span class=\"nu0\">15900</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> EMP <span class=\"br0\">(</span>EMP_ID<span class=\"sy0\">,</span> EMP_NAME<span class=\"sy0\">,</span> DEPT_ID<span class=\"sy0\">,</span> SALARY<span class=\"br0\">)</span><br/> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"st0\">'E27002'</span><span class=\"sy0\">,</span><span class=\"st0\">'David Motsinger'</span><span class=\"sy0\">,</span><span class=\"st0\">'D202'</span><span class=\"sy0\">,</span><span class=\"nu0\">19250</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> EMP <span class=\"br0\">(</span>EMP_ID<span class=\"sy0\">,</span> EMP_NAME<span class=\"sy0\">,</span> DEPT_ID<span class=\"sy0\">,</span> SALARY<span class=\"br0\">)</span><br/> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"st0\">'E03033'</span><span class=\"sy0\">,</span><span class=\"st0\">'Tim Sampair'</span><span class=\"sy0\">,</span><span class=\"st0\">'D101'</span><span class=\"sy0\">,</span><span class=\"nu0\">27000</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> EMP <span class=\"br0\">(</span>EMP_ID<span class=\"sy0\">,</span> EMP_NAME<span class=\"sy0\">,</span> DEPT_ID<span class=\"sy0\">,</span> SALARY<span class=\"br0\">)</span><br/> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"st0\">'E10001'</span><span class=\"sy0\">,</span><span class=\"st0\">'Kim Arlich'</span><span class=\"sy0\">,</span><span class=\"st0\">'D190'</span><span class=\"sy0\">,</span><span class=\"nu0\">57000</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> EMP <span class=\"br0\">(</span>EMP_ID<span class=\"sy0\">,</span> EMP_NAME<span class=\"sy0\">,</span> DEPT_ID<span class=\"sy0\">,</span> SALARY<span class=\"br0\">)</span><br/> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"st0\">'E16398'</span><span class=\"sy0\">,</span><span class=\"st0\">'Timothy Grove'</span><span class=\"sy0\">,</span><span class=\"st0\">'D190'</span><span class=\"sy0\">,</span><span class=\"nu0\">29900</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> EMP <span class=\"br0\">(</span>EMP_ID<span class=\"sy0\">,</span> EMP_NAME<span class=\"sy0\">,</span> DEPT_ID<span class=\"sy0\">,</span> SALARY<span class=\"br0\">)</span><br/> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"st0\">'E01234'</span><span class=\"sy0\">,</span><span class=\"st0\">'Rich Holcomb'</span><span class=\"sy0\">,</span><span class=\"st0\">'D202'</span><span class=\"sy0\">,</span><span class=\"nu0\">49500</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> EMP <span class=\"br0\">(</span>EMP_ID<span class=\"sy0\">,</span> EMP_NAME<span class=\"sy0\">,</span> DEPT_ID<span class=\"sy0\">,</span> SALARY<span class=\"br0\">)</span><br/> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"st0\">'E16399'</span><span class=\"sy0\">,</span><span class=\"st0\">'Timothy Grave'</span><span class=\"sy0\">,</span><span class=\"st0\">'D190'</span><span class=\"sy0\">,</span><span class=\"nu0\">29900</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> EMP <span class=\"br0\">(</span>EMP_ID<span class=\"sy0\">,</span> EMP_NAME<span class=\"sy0\">,</span> DEPT_ID<span class=\"sy0\">,</span> SALARY<span class=\"br0\">)</span><br/> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span><span class=\"st0\">'E16400'</span><span class=\"sy0\">,</span><span class=\"st0\">'Timothy Grive'</span><span class=\"sy0\">,</span><span class=\"st0\">'D190'</span><span class=\"sy0\">,</span><span class=\"nu0\">29900</span><span class=\"br0\">)</span>;<br/>COMMIT;</pre>"}, {"lang": "Stata", "loc": 3, "block": "<pre class=\"text highlighted_source\">import delimited employees.csv<br/>local k 2<br/>bysort department (salary): list salary if _N-_n&lt;`k'</pre>"}, {"lang": "Tcl", "loc": 34, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"kw1\">set</span> text <span class=\"br0\">{</span>Tyler Bennett,E10297,<span class=\"nu0\">32000</span>,D101<br/>John Rappl,E21437,<span class=\"nu0\">47000</span>,D050<br/>George Woltman,E00127,<span class=\"nu0\">53500</span>,D101<br/>Adam Smith,E63535,<span class=\"nu0\">18000</span>,D202<br/>Claire Buckman,E39876,<span class=\"nu0\">27800</span>,D202<br/>David McClellan,E04242,<span class=\"nu0\">41500</span>,D101<br/>Rich Holcomb,E01234,<span class=\"nu0\">49500</span>,D202<br/>Nathan Adams,E41298,<span class=\"nu0\">21900</span>,D050<br/>Richard Potter,E43128,<span class=\"nu0\">15900</span>,D101<br/>David Motsinger,E27002,<span class=\"nu0\">19250</span>,D202<br/>Tim Sampair,E03033,<span class=\"nu0\">27000</span>,D101<br/>Kim Arlich,E10001,<span class=\"nu0\">57000</span>,D190<br/>Timothy Grove,E16398,<span class=\"nu0\">29900</span>,D190<span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> data <span class=\"br0\">[</span>dict create<span class=\"br0\">]</span><br/><span class=\"kw1\">foreach</span> line <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$text</span> \\n<span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    lassign <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$line</span> ,<span class=\"br0\">]</span> name id salary dept<br/>    dict <span class=\"kw2\">lappend</span> data <span class=\"re0\">$dept</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$name</span> <span class=\"re0\">$id</span> <span class=\"re0\">$salary</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> top_n_salaries <span class=\"br0\">{</span>n data<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">incr</span> n -<span class=\"nu0\">1</span><br/>    dict <span class=\"kw1\">for</span> <span class=\"br0\">{</span>dept employees<span class=\"br0\">}</span> <span class=\"re0\">$data</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">puts</span> <span class=\"st0\">\"Department $dept\"</span><br/>        <span class=\"kw1\">foreach</span> emp <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -integer -decreasing -index <span class=\"nu0\">2</span> <span class=\"re0\">$employees</span><span class=\"br0\">]</span> <span class=\"nu0\">0</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"  \u00a0%-20s\u00a0%-8s\u00a0%8d\"</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$emp</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">puts</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>top_n_salaries <span class=\"nu0\">3</span> <span class=\"re0\">$data</span></pre>"}, {"lang": "TUSCRIPT", "loc": 47, "block": "<pre class=\"text highlighted_source\">$$ MODE TUSCRIPT<br/>MODE DATA<br/>$$ SET dates=*<br/>Tyler Bennett,E10297,32000,D101<br/>John Rappl,E21437,47000,D050<br/>George Woltman,E00127,53500,D101<br/>Adam Smith,E63535,18000,D202<br/>Claire Buckman,E39876,27800,D202<br/>David McClellan,E04242,41500,D101<br/>Rich Holcomb,E01234,49500,D202<br/>Nathan Adams,E41298,21900,D050<br/>Richard Potter,E43128,15900,D101<br/>David Motsinger,E27002,19250,D202<br/>Tim Sampair,E03033,27000,D101<br/>Kim Arlich,E10001,57000,D190<br/>Timothy Grove,E16398,29900,D190<br/>$$ MODE TUSCRIPT<br/>SET nix=SPLIT (dates,\":,:\",EmployeeName,Employee_ID,Salary,Department)<br/>SET d=MIXED_SORT (department),d=REDUCE(d)<br/>SET index=DIGIT_INDEX(salary), index=REVERSE(index)<br/>SET employeeName=INDEX_SORT (employeeName,index)<br/>SET employee_ID =INDEX_SORT (employee_ID,index)<br/>SET Salary=INDEX_SORT (salary,index)<br/>SET Department=INDEX_SORT (Department,index)<br/>COMPILE<br/>LOOP l=d<br/>PRINT \"Department \", l<br/>SET rtable=QUOTES (l)<br/>BUILD R_TABLE pos = rtable<br/>SET id=FILTER_INDEX (department,pos,-)<br/>RELEASE R_TABLE pos<br/>SET en  =SELECT (employeeName,#id)<br/>SET ei  =SELECT (employee_ID,#id)<br/>SET sal =SELECT (salary,#id)<br/>SET he  =CENTER (\"employeeName\",-16)<br/>SET hi  =CENTER (\"employee ID\",-11)<br/>SET hs  =CENTER (\"Salary\",+10)<br/>SET line=REPEAT (\"-\",37)<br/>PRINT he,hi,hs<br/>PRINT line<br/> LOOP e=en,i=ei,s=sal<br/> SET e=CENTER (e,-16), i=CENTER (i,-11), s=CENTER (s,+10)<br/> PRINT e,i,s<br/> ENDLOOP<br/>PRINT \" \"<br/>ENDLOOP<br/>ENDCOMPILE</pre>"}, {"lang": "TXR", "loc": 23, "block": "<pre class=\"text highlighted_source\">@(next\u00a0:args)<br/>@{n-param}<br/>@(next \"top-rank-per-group.dat\")<br/>Employee Name,Employee ID,Salary,Department<br/>@(collect\u00a0:vars (record))<br/>@name,@id,@salary,@dept<br/>@(bind record (@(int-str salary) dept name id))<br/>@(end)<br/>@(bind (dept salary dept2 name id)<br/>  @(let* ((n (int-str n-param))<br/>          (dept-hash [group-by second record\u00a0:equal-based])<br/>          (dept (hash-keys dept-hash))<br/>          (ranked (collect-each ((rec (hash-values dept-hash)))<br/>                    [apply mapcar list [[sort rec &gt; first] 0..n]])))<br/>     (cons dept [apply mapcar list ranked])))<br/>@(output)<br/>@  (repeat)<br/>Department: @dept<br/>@    (repeat)<br/>  @{name 15} (@id)  <a class=\"__cf_email__\" data-cfemail=\"b793f7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{salary -6}<br/>@    (end)<br/>@  (end)<br/>@(end)</pre>"}, {"lang": "Ursala", "loc": 26, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>\u00a0<br/>data =<br/>\u00a0<br/>-[<br/>Employee Name,Employee ID,Salary,Department<br/>Tyler Bennett,E10297,32000,D101<br/>John Rappl,E21437,47000,D050<br/>George Woltman,E00127,53500,D101<br/>Adam Smith,E63535,18000,D202<br/>Claire Buckman,E39876,27800,D202<br/>David McClellan,E04242,41500,D101<br/>Rich Holcomb,E01234,49500,D202<br/>Nathan Adams,E41298,21900,D050<br/>Richard Potter,E43128,15900,D101<br/>David Motsinger,E27002,19250,D202<br/>Tim Sampair,E03033,27000,D101<br/>Kim Arlich,E10001,57000,D190<br/>Timothy Grove,E16398,29900,D190]-<br/>\u00a0<br/>top \"n\" = @tt sep`,*; mat0+ ^C(~&amp;hz,mat`,*yS)*+ take/*\"n\"+ *zK2 (nleq+\u00a0%np~~)-&lt;x&amp;yzNC <br/>\u00a0<br/>#show+<br/>\u00a0<br/>main = top3 data</pre>"}, {"lang": "zkl", "loc": 14, "block": "<pre class=\"text highlighted_source\">fcn setAppend(d,[(key,data)]){ d[key]=d.find(key,T).append(data) } //--&gt;(key,(data,data...))<br/>\u00a0<br/>fcn topNsalaries(n){<br/>   File(\"data.txt\").pump(setAppend.fp(data:=D()),fcn(line){ //--&gt;Dictionary(dept:salaries)<br/>      line=line.strip().split(\",\");<br/>      T(line[-1],line[-2]); //--&gt;(dept,salary)<br/>   });<br/>   dss:=data.pump(List,fcn([(dept,ss)],N){ //--&gt;(dept,(salaries), dept...)<br/>      T(dept).append(ss.sort()[-N,*].reverse());<br/>   }.fp1(n)).sort(fcn(a,b){a[0]&lt;b[0]});<br/>   foreach d,ss in (dss){<br/>      \"%s:\u00a0%s\".fmt(d,ss.concat(\",\")).println();<br/>   }<br/>}(3);</pre>"}]}