{"task": "Sort_three_variables", "blocks": [{"lang": "Aime", "loc": 28, "block": "<pre class=\"text highlighted_source\">integer a, b, c;<br/>index i;<br/>text x, y, z;<br/>record r;<br/>\u00a0<br/>x = \"lions, tigers, and\";<br/>y = \"bears, oh my!\";<br/>z = \"(from the \\\"Wizard of OZ\\\")\";<br/>\u00a0<br/>r.fit(x, x, y, y, z, z);<br/>\u00a0<br/>x = r.rf_pick;<br/>y = r.rf_pick;<br/>z = r.rf_pick;<br/>\u00a0<br/>o_form(\"~\\n~\\n~\\n\", x, y, z);<br/>\u00a0<br/>a = 77444;<br/>b = -12;<br/>c = 0;<br/>\u00a0<br/>i.fit(a, a, b, b, c, c);<br/>\u00a0<br/>a = i.if_pick;<br/>b = i.if_pick;<br/>c = i.if_pick;<br/>\u00a0<br/>o_form(\"~\\n~\\n~\\n\", a, b, c);</pre>"}, {"lang": "ALGOL 68", "loc": 50, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw2\">BEGIN</span><br/>    <span class=\"coMULTI\"># MODE that can hold integers and strings - would need to be extended to #</span><br/>    <span class=\"coMULTI\"># allow for other types                                                  #</span><br/>    <span class=\"kw4\">MODE</span> INTORSTRING <span class=\"sy1\">=</span> <span class=\"kw6\">UNION</span><span class=\"br0\">(</span> <span class=\"kw3\">INT</span><span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># returns TRUE if a is an INT, FALSE otherwise #</span><br/>    <span class=\"kw4\">OP</span>   ISINT    <span class=\"sy1\">=</span> <span class=\"br0\">(</span> INTORSTRING a <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span>   <span class=\"kw2\">CASE</span> a <span class=\"kw2\">IN</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span><span class=\"br0\">)</span><span class=\"sy1\">:</span>      <span class=\"kw7\">TRUE</span> <span class=\"kw2\">OUT</span> <span class=\"kw7\">FALSE</span> <span class=\"kw2\">ESAC</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># returns TRUE if a is an INT, FALSE otherwise #</span><br/>    <span class=\"kw4\">OP</span>   ISSTRING <span class=\"sy1\">=</span> <span class=\"br0\">(</span> INTORSTRING a <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span>   <span class=\"kw2\">CASE</span> a <span class=\"kw2\">IN</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span><span class=\"br0\">)</span><span class=\"sy1\">:</span>   <span class=\"kw7\">TRUE</span> <span class=\"kw2\">OUT</span> <span class=\"kw7\">FALSE</span> <span class=\"kw2\">ESAC</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># returns the integer in a or 0 if a isn't an integer #</span><br/>    <span class=\"kw4\">OP</span>   TOINT    <span class=\"sy1\">=</span> <span class=\"br0\">(</span> INTORSTRING a <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span>    <span class=\"kw2\">CASE</span> a <span class=\"kw2\">IN</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> i<span class=\"br0\">)</span><span class=\"sy1\">:</span>    i    <span class=\"kw2\">OUT</span> 0     <span class=\"kw2\">ESAC</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># returns the string in a or \"\" if a isn't a string #</span><br/>    <span class=\"kw4\">OP</span>   TOSTRING <span class=\"sy1\">=</span> <span class=\"br0\">(</span> INTORSTRING a <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span> <span class=\"kw2\">CASE</span> a <span class=\"kw2\">IN</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> s<span class=\"br0\">)</span><span class=\"sy1\">:</span> s    <span class=\"kw2\">OUT</span> <span class=\"st0\">\"\"</span>    <span class=\"kw2\">ESAC</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># returns TRUE if a &lt; b, FALSE otherwise #</span><br/>    <span class=\"coMULTI\"># a and b must have the same type #</span><br/>    <span class=\"kw4\">PRIO</span> LESSTHAN <span class=\"sy1\">=</span> 4<span class=\"sy1\">;</span><br/>    <span class=\"kw4\">OP</span>   LESSTHAN <span class=\"sy1\">=</span> <span class=\"br0\">(</span> INTORSTRING a<span class=\"sy1\">,</span> b <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>        <span class=\"kw2\">IF</span>  ISSTRING a <span class=\"kw16\">AND</span> ISSTRING b <span class=\"kw2\">THEN</span><br/>            <span class=\"coMULTI\"># both strings #</span><br/>            TOSTRING a <span class=\"sy1\">&lt;</span> TOSTRING b<br/>        <span class=\"kw2\">ELIF</span> ISINT a <span class=\"kw16\">AND</span> ISINT b <span class=\"kw2\">THEN</span><br/>            <span class=\"coMULTI\"># both integers #</span><br/>            TOINT a <span class=\"sy1\">&lt;</span> TOINT b<br/>        <span class=\"kw2\">ELSE</span><br/>            <span class=\"coMULTI\"># different MODEs #</span><br/>            <span class=\"kw7\">FALSE</span><br/>        <span class=\"kw2\">FI</span> <span class=\"coMULTI\"># LESSTHAN #</span> <span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># exchanges the values of a and b #</span><br/>    <span class=\"kw4\">PRIO</span> SWAP <span class=\"sy1\">=</span> 9<span class=\"sy1\">;</span><br/>    <span class=\"kw4\">OP</span>   SWAP <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> INTORSTRING a<span class=\"sy1\">,</span> b <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"kw2\">BEGIN</span> INTORSTRING t <span class=\"sy1\">:=</span> a<span class=\"sy1\">;</span> a <span class=\"sy1\">:=</span> b<span class=\"sy1\">;</span> b <span class=\"sy1\">:=</span> t <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># sorts a, b and c #</span><br/>    <span class=\"kw4\">PROC</span> sort 3 <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> INTORSTRING a<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> c <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">BEGIN</span><br/>        <span class=\"kw2\">IF</span> b LESSTHAN a <span class=\"kw2\">THEN</span> a SWAP b <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> c LESSTHAN a <span class=\"kw2\">THEN</span> a SWAP c <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> c LESSTHAN b <span class=\"kw2\">THEN</span> b SWAP c <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">END</span> <span class=\"coMULTI\"># sort 3 #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># task test cases #</span><br/>    INTORSTRING x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z<span class=\"sy1\">;</span><br/>    x <span class=\"sy1\">:=</span> <span class=\"st0\">\"lions, tigers, and\"</span><span class=\"sy1\">;</span><br/>    y <span class=\"sy1\">:=</span> <span class=\"st0\">\"bears, oh my!\"</span><span class=\"sy1\">;</span><br/>    z <span class=\"sy1\">:=</span> <span class=\"st0\">\"(from the \"</span><span class=\"st0\">\"Wizard of OZ\"</span><span class=\"st0\">\")\"</span><span class=\"sy1\">;</span><br/>    sort 3<span class=\"br0\">(</span> x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> x<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"sy1\">,</span> z<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    x <span class=\"sy1\">:=</span> 77444<span class=\"sy1\">;</span><br/>    y <span class=\"sy1\">:=</span> <span class=\"sy1\">-</span>12<span class=\"sy1\">;</span><br/>    z <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>    sort 3<span class=\"br0\">(</span> x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> x<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"sy1\">,</span> z<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">END</span></pre>"}, {"lang": "AutoHotkey", "loc": 7, "block": "<pre class=\"autohotkey highlighted_source\">SortThreeVariables<span class=\"br0\">(</span>ByRef x<span class=\"sy0\">,</span>ByRef y<span class=\"sy0\">,</span>ByRef z<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tobj <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\tfor k<span class=\"sy0\">,</span> v in <span class=\"br0\">(</span>var <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span><span class=\"st0\">\"x,y,z\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\tobj<span class=\"br0\">[</span><span class=\"re0\">%v%</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> true<br/>\tfor k<span class=\"sy0\">,</span> v in obj<br/>\t\ttemp <span class=\"sy0\">:=</span> var<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">%temp%</span> <span class=\"sy0\">:=</span> k<br/><span class=\"br0\">}</span></pre>"}, {"lang": "C", "loc": 51, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;string.h&gt;</span><br/><span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define MAX 3</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> values<span class=\"br0\">[</span>MAX<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>tempStr<span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>isString<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">double</span> val<span class=\"br0\">[</span>MAX<span class=\"br0\">]</span><span class=\"sy0\">,</span>temp<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>MAX<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Enter\u00a0%d%s value\u00a0: \"</span><span class=\"sy0\">,</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>i<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">?</span><span class=\"st0\">\"st\"</span><span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">?</span><span class=\"st0\">\"nd\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"rd\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fgets.html\"><span class=\"kw3\">fgets</span></a><span class=\"br0\">(</span>values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span>stdin<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">!=</span><span class=\"nu8\">00</span><span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">&lt;</span><span class=\"st0\">'0'</span> <span class=\"sy0\">||</span> values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">&gt;</span><span class=\"st0\">'9'</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">!=</span><span class=\"st0\">'.'</span> <span class=\"sy0\">||</span>values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">!=</span><span class=\"st0\">'-'</span><span class=\"sy0\">||</span>values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">!=</span><span class=\"st0\">'+'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy0\">||</span><span class=\"br0\">(</span><span class=\"br0\">(</span>values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">'.'</span> <span class=\"sy0\">||</span>values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">'-'</span><span class=\"sy0\">||</span>values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">'+'</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;&amp;</span><span class=\"br0\">(</span>values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">&lt;</span><span class=\"st0\">'0'</span> <span class=\"sy0\">||</span> values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span><span class=\"st0\">'9'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\tisString <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>isString<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>MAX<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\tval<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atof.html\"><span class=\"kw3\">atof</span></a><span class=\"br0\">(</span>values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>MAX<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span>MAX<span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>isString<span class=\"sy0\">==</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> val<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&gt;</span>val<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\ttemp <span class=\"sy0\">=</span> val<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\tval<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> val<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t\tval<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span>values<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>tempStr<span class=\"sy0\">,</span>values<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>values<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span>values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>tempStr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>MAX<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\tisString<span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"sy0\">?</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%c =\u00a0%s\"</span><span class=\"sy0\">,</span><span class=\"st0\">'X'</span><span class=\"sy0\">+</span>i<span class=\"sy0\">,</span>values<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%c =\u00a0%lf\"</span><span class=\"sy0\">,</span><span class=\"st0\">'X'</span><span class=\"sy0\">+</span>i<span class=\"sy0\">,</span>val<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 31, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"br0\">(</span><span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, <span class=\"kw4\">int</span> z<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">77444</span>, <span class=\"sy0\">-</span><span class=\"nu0\">12</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">//Sort directly:</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;</span> y<span class=\"br0\">)</span> <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>y, x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&gt;</span> z<span class=\"br0\">)</span> <span class=\"br0\">(</span>x, z<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>z, x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>y <span class=\"sy0\">&gt;</span> z<span class=\"br0\">)</span> <span class=\"br0\">(</span>y, z<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>z, y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x, y, z<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> <span class=\"br0\">(</span>a, b, c<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>            <span class=\"st0\">\"lions, tigers, and\"</span>,<br/>            <span class=\"st0\">\"bears, oh my!\"</span>,<br/>            <span class=\"st0\">\"(from the 'Wizard of OZ')\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">//Sort with generic method:</span><br/>        Sort<span class=\"br0\">(</span><span class=\"kw1\">ref</span> a, <span class=\"kw1\">ref</span> b, <span class=\"kw1\">ref</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a, b, c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Sort<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">ref</span> T a, <span class=\"kw1\">ref</span> T b, <span class=\"kw1\">ref</span> T c<span class=\"br0\">)</span><br/>        <span class=\"kw1\">where</span> T <span class=\"sy0\">:</span> IComparable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b, a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>a, c<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>c, a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b<span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>b, c<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>c, b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 41, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span> <span class=\"kw2\">class</span> T <span class=\"sy1\">&gt;</span><br/><span class=\"kw4\">void</span> sort3<span class=\"br0\">(</span> T<span class=\"sy3\">&amp;</span> x, T<span class=\"sy3\">&amp;</span> y, T<span class=\"sy3\">&amp;</span> z<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>T<span class=\"sy1\">&gt;</span> v<span class=\"sy4\">;</span><br/>    v.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> x <span class=\"br0\">)</span><span class=\"sy4\">;</span> v.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> y <span class=\"br0\">)</span><span class=\"sy4\">;</span> v.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> z <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">bool</span> b <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> b <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        b <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">size_t</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> v.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> v<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> v<span class=\"br0\">[</span>i<span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                T t <span class=\"sy1\">=</span> v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>                v<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> v<span class=\"br0\">[</span>i <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>                v<span class=\"br0\">[</span>i <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> t<span class=\"sy4\">;</span><br/>                b <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    x <span class=\"sy1\">=</span> v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy4\">;</span> y <span class=\"sy1\">=</span> v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy4\">;</span> z <span class=\"sy1\">=</span> v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> xi <span class=\"sy1\">=</span> <span class=\"nu0\">77444</span>, yi <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">12</span>, zi <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    sort3<span class=\"br0\">(</span> xi, yi, zi <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> xi <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"sy1\">&lt;&lt;</span> yi <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"sy1\">&lt;&lt;</span> zi <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> xs, ys, zs<span class=\"sy4\">;</span><br/>    xs <span class=\"sy1\">=</span> <span class=\"st0\">\"lions, tigers, and\"</span><span class=\"sy4\">;</span><br/>    ys <span class=\"sy1\">=</span> <span class=\"st0\">\"bears, oh my!\"</span><span class=\"sy4\">;</span><br/>    zs <span class=\"sy1\">=</span> <span class=\"st0\">\"(from the <span class=\"es1\">\\\"</span>Wizard of OZ<span class=\"es1\">\\\"</span>)\"</span><span class=\"sy4\">;</span><br/>    sort3<span class=\"br0\">(</span> xs, ys, zs <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> xs <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"sy1\">&lt;&lt;</span> ys <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"sy1\">&lt;&lt;</span> zs <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">float</span> xf <span class=\"sy1\">=</span> <span class=\"nu17\">11.3f</span>, yf <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu17\">9.7f</span>, zf <span class=\"sy1\">=</span> <span class=\"nu17\">11.17f</span><span class=\"sy4\">;</span><br/>    sort3<span class=\"br0\">(</span> xf, yf, zf <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> xf <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"sy1\">&lt;&lt;</span> yf <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"sy1\">&lt;&lt;</span> zf <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "COBOL", "loc": 43, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> 3var<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> n <span class=\"kw3\">binary</span> <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> num <span class=\"kw3\">pic</span> -<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> a1 <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">\"lions, tigers, and\"</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> a2 <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">\"bears, oh my!\"</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> a3 <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">\"(from the \"</span><span class=\"st0\">\"Wizard of OZ\"</span><span class=\"st0\">\")\"</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> n1 <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">\"77444\"</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> n2 <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">\"-12\"</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> n3 <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> alpha-<span class=\"kw3\">table</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> alpha-entry <span class=\"kw3\">occurs</span> <span class=\"nu0\">3</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> numeric-<span class=\"kw3\">table</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> numeric-entry <span class=\"kw3\">occurs</span> <span class=\"nu0\">3</span> <span class=\"kw3\">pic</span> s9<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> <span class=\"kw3\">filler</span> <span class=\"kw3\">value</span> <span class=\"st0\">\"x = y = z = \"</span><span class=\"sy0\">.</span><br/>        <span class=\"nu0\">2</span> lead-<span class=\"kw3\">in</span> <span class=\"kw3\">occurs</span> <span class=\"nu0\">3</span> <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       begin<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">move</span> a1 <span class=\"kw2\">to</span> alpha-entry <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>           <span class=\"kw2\">move</span> a2 <span class=\"kw2\">to</span> alpha-entry <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>           <span class=\"kw2\">move</span> a3 <span class=\"kw2\">to</span> alpha-entry <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>           <span class=\"kw3\">sort</span> alpha-entry <span class=\"kw3\">ascending</span> alpha-entry<br/>           <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> n <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span><br/>           <span class=\"kw2\">until</span> n &gt; <span class=\"nu0\">3</span><br/>               <span class=\"kw2\">display</span> lead-<span class=\"kw3\">in</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> alpha-entry <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>           end-<span class=\"kw2\">perform</span><br/>\u00a0<br/>           <span class=\"kw2\">display</span> <span class=\"kw3\">space</span><br/>\u00a0<br/>           <span class=\"kw2\">compute</span> numeric-entry <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw3\">function</span> <span class=\"kw4\">numval</span> <span class=\"br0\">(</span>n1<span class=\"br0\">)</span><br/>           <span class=\"kw2\">compute</span> numeric-entry <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw3\">function</span> <span class=\"kw4\">numval</span> <span class=\"br0\">(</span>n2<span class=\"br0\">)</span><br/>           <span class=\"kw2\">compute</span> numeric-entry <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw3\">function</span> <span class=\"kw4\">numval</span> <span class=\"br0\">(</span>n3<span class=\"br0\">)</span><br/>           <span class=\"kw3\">sort</span> numeric-entry <span class=\"kw3\">ascending</span> numeric-entry<br/>           <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> n <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">by</span> <span class=\"nu0\">1</span><br/>           <span class=\"kw2\">until</span> n &gt; <span class=\"nu0\">3</span><br/>               <span class=\"kw2\">move</span> numeric-entry <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw2\">to</span> num<br/>               <span class=\"kw2\">display</span> lead-<span class=\"kw3\">in</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> num<br/>           end-<span class=\"kw2\">perform</span><br/>\u00a0<br/>           <span class=\"kw3\">stop</span> <span class=\"kw3\">run</span><br/>           <span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> 3var<span class=\"sy0\">.</span></pre>"}, {"lang": "D", "loc": 35, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    driver<span class=\"br0\">(</span><span class=\"nu0\">77444</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    driver<span class=\"br0\">(</span><span class=\"st0\">\"lions, tigers, and\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"bears, oh my!\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"(from the <span class=\"es1\">\\\"</span>Wizard of OZ<span class=\"es1\">\\\"</span>)\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> driver<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T x<span class=\"sy0\">,</span> T y<span class=\"sy0\">,</span> T z<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"BEFORE: x=[\"</span><span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> <span class=\"st0\">\"]; y=[\"</span><span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> <span class=\"st0\">\"]; z=[\"</span><span class=\"sy0\">,</span> z<span class=\"sy0\">,</span> <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    sort3Var<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>z<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"AFTER: x=[\"</span><span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> <span class=\"st0\">\"]; y=[\"</span><span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> <span class=\"st0\">\"]; z=[\"</span><span class=\"sy0\">,</span> z<span class=\"sy0\">,</span> <span class=\"st0\">\"]\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> sort3Var<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">ref</span> T x<span class=\"sy0\">,</span> <span class=\"kw2\">ref</span> T y<span class=\"sy0\">,</span> <span class=\"kw2\">ref</span> T z<span class=\"br0\">)</span><br/><span class=\"kw2\">out</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>x<span class=\"sy0\">&lt;=</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>x<span class=\"sy0\">&lt;=</span>z<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>y<span class=\"sy0\">&lt;=</span>z<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">algorithm</span> <span class=\"sy0\">:</span> swap<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x <span class=\"sy0\">&lt;</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>z <span class=\"sy0\">&lt;</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            swap<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>z<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>y <span class=\"sy0\">&lt;</span> z<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        swap<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        swap<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>z<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>z<span class=\"sy0\">&lt;</span>y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        swap<span class=\"br0\">(</span>y<span class=\"sy0\">,</span>z<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elena", "loc": 26, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import extensions.<br/>\u00a0<br/>sortThree = (:a:b:c)&lt;ref,ref,ref&gt;<br/>                [<br/>                    if (a &gt; b) [ a exchangeWith:b ].<br/>                    if (a &gt; c) [ a exchangeWith:c ].<br/>                    if (b &gt; c) [ b exchangeWith:c ].<br/>                ].<br/>\u00a0<br/>program =<br/>[<br/>    var x\u00a0:= 5.<br/>    var y\u00a0:= 1.<br/>    var z\u00a0:= 2.<br/>\u00a0<br/>    var a\u00a0:= \"lions, tigers, and\".<br/>    var b\u00a0:= \"bears, oh my!\".<br/>    var c\u00a0:= \"(from the 'Wizard of OZ')\".<br/>\u00a0<br/>    sortThree(type&lt;ref&gt;(x),type&lt;ref&gt;(y),type&lt;ref&gt;(z)).<br/>    sortThree(type&lt;ref&gt;(a),type&lt;ref&gt;(b),type&lt;ref&gt;(c)).<br/>\u00a0<br/>    console printLine(x,\",\",y,\",\",z).<br/>    console printLine(a,\",\",b,\",\",c).<br/>].</pre>"}, {"lang": "F#", "loc": 5, "block": "<pre class=\"fsharp highlighted_source\"> <span class=\"kw1\">let</span> x <span class=\"sy0\">=</span> <span class=\"st0\">\"lions, tigers, and\"</span><br/> <span class=\"kw1\">let</span> y <span class=\"sy0\">=</span> <span class=\"st0\">\"bears, oh my!\"</span><br/> <span class=\"kw1\">let</span> z <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"(from the \"</span>Wizard <span class=\"kw1\">of</span> OZ<span class=\"st0\">\")\"</span><span class=\"st0\">\"\"</span><br/> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span>printfn <span class=\"st0\">\"%s\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">sort</span> <span class=\"br0\">[</span>x<span class=\"sy0\">;</span>y<span class=\"sy0\">;</span>z<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 11, "block": "<pre class=\"text highlighted_source\">USING: arrays io kernel prettyprint sequences sorting\u00a0;<br/>IN: rosetta-code.sort-three<br/>\u00a0<br/>: sort3 ( b c a -- a b c ) 3array natural-sort first3\u00a0;<br/>\u00a0<br/>\"lions, tigers, and\"<br/>\"bears, oh my!\"<br/>\"(from the \\\"Wizard of OZ\\\")\"<br/>sort3 [ print ] <a class=\"__cf_email__\" data-cfemail=\"4f3b3d260f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>\u00a0<br/>77444 -12 0 sort3 [ . ] <a class=\"__cf_email__\" data-cfemail=\"b8cccad1f8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></pre>"}, {"lang": "Forth", "loc": 10, "block": "<pre class=\"text highlighted_source\">\\ sort 3 integers<br/>VARIABLE X  VARIABLE Y   VARIABLE Z<br/>\u00a0<br/>: <a class=\"__cf_email__\" data-cfemail=\"e0b6a1b2b3a0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  ( --- n n n)  X @  Y @   Z @\u00a0; \\ read variables<br/>: VARS!  ( n n n -- )  Z\u00a0!  Y\u00a0!   X\u00a0!\u00a0; \\ store variables<br/>\u00a0<br/>:\u00a0?SWAP     ( a b -- a b)   \\ conditional swap<br/>            2DUP &lt; IF SWAP THEN\u00a0;<br/>\u00a0<br/>: SORT3INTS ( a b c -- c b a) \u00a0?SWAP &gt;R \u00a0?SWAP  R&gt; \u00a0?SWAP\u00a0;</pre>"}, {"lang": "Fortran", "loc": 8, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw3\">TYPE</span><span class=\"br0\">(</span>MONGREL<span class=\"br0\">)</span><br/>       <span class=\"kw3\">INTEGER</span> TYPEIS<br/>       <span class=\"kw3\">INTEGER</span> VI<br/>       <span class=\"kw3\">REAL</span> VF<br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>enuff<span class=\"br0\">)</span> VC<br/>       ...<span class=\"me1\">etc</span>...<br/>      <span class=\"kw1\">END</span> <span class=\"kw3\">TYPE</span> MONGREL<br/>      <span class=\"kw3\">TYPE</span> <span class=\"br0\">(</span>MONGREL<span class=\"br0\">)</span> DOG </pre>"}, {"lang": "Go", "loc": 175, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"log\"</span><br/>    <span class=\"st0\">\"sort\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> <span class=\"sy1\">(</span><br/>    stringsIn <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>        <span class=\"co2\">`lions, tigers, and`</span><span class=\"sy1\">,</span><br/>        <span class=\"co2\">`bears, oh my!`</span><span class=\"sy1\">,</span><br/>        <span class=\"co2\">`(from the \"Wizard of OZ\")`</span><span class=\"sy1\">}</span><br/>    intsIn <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">77444</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">12</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">}</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// initialize three vars</span><br/>        x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z <span class=\"sy2\">:=</span> stringsIn<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> stringsIn<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> stringsIn<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><br/>\u00a0<br/>        <span class=\"co1\">// I. Task suggested technique, move values to array (slice).</span><br/>        <span class=\"co1\">// It's consise and relies on library code.</span><br/>        s <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span>x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z<span class=\"sy1\">}</span><br/>        sort<span class=\"sy3\">.</span>Strings<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>        x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z <span class=\"sy2\">=</span> s<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> s<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> s<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><br/>\u00a0<br/>        <span class=\"co1\">// validate</span><br/>        <span class=\"kw1\">if</span> x &gt; y <span class=\"sy3\">||</span> y &gt; z <span class=\"sy1\">{</span><br/>            log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">()</span><br/>        <span class=\"sy1\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// II. Likely fastest technique, minimizing tests and data movement.</span><br/>        <span class=\"co1\">// Least consise though, hardest to understand, and most chance to make</span><br/>        <span class=\"co1\">// a coding mistake.</span><br/>        x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z <span class=\"sy2\">=</span> stringsIn<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> stringsIn<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> stringsIn<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"co1\">// (initialize)</span><br/>        <span class=\"kw1\">if</span> x &lt; y <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">case</span> y &lt; z<span class=\"sy1\">:</span><br/>            <span class=\"kw1\">case</span> x &lt; z<span class=\"sy1\">:</span><br/>                y<span class=\"sy1\">,</span> z <span class=\"sy2\">=</span> z<span class=\"sy1\">,</span> y<br/>            <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>                x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z <span class=\"sy2\">=</span> z<span class=\"sy1\">,</span> x<span class=\"sy1\">,</span> y<br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">case</span> x &lt; z<span class=\"sy1\">:</span><br/>                x<span class=\"sy1\">,</span> y <span class=\"sy2\">=</span> y<span class=\"sy1\">,</span> x<br/>            <span class=\"kw1\">case</span> z &lt; y<span class=\"sy1\">:</span><br/>                x<span class=\"sy1\">,</span> z <span class=\"sy2\">=</span> z<span class=\"sy1\">,</span> x<br/>            <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>                x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z <span class=\"sy2\">=</span> y<span class=\"sy1\">,</span> z<span class=\"sy1\">,</span> x<br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> x &gt; y <span class=\"sy3\">||</span> y &gt; z <span class=\"sy1\">{</span> <span class=\"co1\">// (validate)</span><br/>            log<span class=\"sy3\">.</span><span class=\"me1\">Fatal</span><span class=\"sy1\">()</span><br/>        <span class=\"sy1\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// III.  A little more consise than II, easier to understand, almost</span><br/>        <span class=\"co1\">// as fast.</span><br/>        x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z <span class=\"sy2\">=</span> stringsIn<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> stringsIn<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> stringsIn<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"co1\">// (initialize)</span><br/>        <span class=\"kw1\">if</span> x &gt; y <span class=\"sy1\">{</span><br/>            x<span class=\"sy1\">,</span> y <span class=\"sy2\">=</span> y<span class=\"sy1\">,</span> x<br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> y &gt; z <span class=\"sy1\">{</span><br/>            y<span class=\"sy1\">,</span> z <span class=\"sy2\">=</span> z<span class=\"sy1\">,</span> y<br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> x &gt; y <span class=\"sy1\">{</span><br/>            x<span class=\"sy1\">,</span> y <span class=\"sy2\">=</span> y<span class=\"sy1\">,</span> x<br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> x &gt; y <span class=\"sy3\">||</span> y &gt; z <span class=\"sy1\">{</span> <span class=\"co1\">// (validate)</span><br/>            log<span class=\"sy3\">.</span><span class=\"me1\">Fatal</span><span class=\"sy1\">()</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"sorted strings:\"</span><span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> x<span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> y<span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> z<span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"original data:\"</span><span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> stringsIn<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> stringsIn<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">])</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> stringsIn<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">])</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// same techniques, with integer test case</span><br/>    <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// task suggested technique</span><br/>        x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z <span class=\"sy2\">:=</span> intsIn<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> intsIn<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> intsIn<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"co1\">// (initialize)</span><br/>        s <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span>x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z<span class=\"sy1\">}</span><br/>        sort<span class=\"sy3\">.</span>Ints<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>        x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z <span class=\"sy2\">=</span> s<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> s<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> s<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><br/>        <span class=\"kw1\">if</span> x &gt; y <span class=\"sy3\">||</span> y &gt; z <span class=\"sy1\">{</span> <span class=\"co1\">// (validate)</span><br/>            log<span class=\"sy3\">.</span><span class=\"me1\">Fatal</span><span class=\"sy1\">()</span><br/>        <span class=\"sy1\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// minimizing data movement</span><br/>        x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z <span class=\"sy2\">=</span> intsIn<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> intsIn<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> intsIn<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"co1\">// (initialize)</span><br/>        <span class=\"kw1\">if</span> x &lt; y <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">case</span> y &lt; z<span class=\"sy1\">:</span><br/>            <span class=\"kw1\">case</span> x &lt; z<span class=\"sy1\">:</span><br/>                y<span class=\"sy1\">,</span> z <span class=\"sy2\">=</span> z<span class=\"sy1\">,</span> y<br/>            <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>                x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z <span class=\"sy2\">=</span> z<span class=\"sy1\">,</span> x<span class=\"sy1\">,</span> y<br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">case</span> x &lt; z<span class=\"sy1\">:</span><br/>                x<span class=\"sy1\">,</span> y <span class=\"sy2\">=</span> y<span class=\"sy1\">,</span> x<br/>            <span class=\"kw1\">case</span> z &lt; y<span class=\"sy1\">:</span><br/>                x<span class=\"sy1\">,</span> z <span class=\"sy2\">=</span> z<span class=\"sy1\">,</span> x<br/>            <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>                x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z <span class=\"sy2\">=</span> y<span class=\"sy1\">,</span> z<span class=\"sy1\">,</span> x<br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> x &gt; y <span class=\"sy3\">||</span> y &gt; z <span class=\"sy1\">{</span> <span class=\"co1\">// (validate)</span><br/>            log<span class=\"sy3\">.</span><span class=\"me1\">Fatal</span><span class=\"sy1\">()</span><br/>        <span class=\"sy1\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// three swaps</span><br/>        x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z <span class=\"sy2\">=</span> intsIn<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> intsIn<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> intsIn<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"co1\">// (initialize)</span><br/>        <span class=\"kw1\">if</span> x &gt; y <span class=\"sy1\">{</span><br/>            x<span class=\"sy1\">,</span> y <span class=\"sy2\">=</span> y<span class=\"sy1\">,</span> x<br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> y &gt; z <span class=\"sy1\">{</span><br/>            y<span class=\"sy1\">,</span> z <span class=\"sy2\">=</span> z<span class=\"sy1\">,</span> y<br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> x &gt; y <span class=\"sy1\">{</span><br/>            x<span class=\"sy1\">,</span> y <span class=\"sy2\">=</span> y<span class=\"sy1\">,</span> x<br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> x &gt; y <span class=\"sy3\">||</span> y &gt; z <span class=\"sy1\">{</span> <span class=\"co1\">// (validate)</span><br/>            log<span class=\"sy3\">.</span><span class=\"me1\">Fatal</span><span class=\"sy1\">()</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"sorted ints:\"</span><span class=\"sy1\">,</span> x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z<span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"original data:\"</span><span class=\"sy1\">,</span> intsIn<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// To put any of these techniques in a function, a function could just</span><br/>    <span class=\"co1\">// take three values and return them sorted.</span><br/>    <span class=\"sy1\">{</span><br/>        sort3 <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"kw4\">int</span><span class=\"sy1\">,</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> x &gt; y <span class=\"sy1\">{</span><br/>                x<span class=\"sy1\">,</span> y <span class=\"sy2\">=</span> y<span class=\"sy1\">,</span> x<br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">if</span> y &gt; z <span class=\"sy1\">{</span><br/>                y<span class=\"sy1\">,</span> z <span class=\"sy2\">=</span> z<span class=\"sy1\">,</span> y<br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">if</span> x &gt; y <span class=\"sy1\">{</span><br/>                x<span class=\"sy1\">,</span> y <span class=\"sy2\">=</span> y<span class=\"sy1\">,</span> x<br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">return</span> x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z<br/>        <span class=\"sy1\">}</span><br/>        x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z <span class=\"sy2\">:=</span> intsIn<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> intsIn<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> intsIn<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"co1\">// (initialize)</span><br/>        x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z <span class=\"sy2\">=</span> sort3<span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> x &gt; y <span class=\"sy3\">||</span> y &gt; z <span class=\"sy1\">{</span> <span class=\"co1\">// (validate)</span><br/>            log<span class=\"sy3\">.</span><span class=\"me1\">Fatal</span><span class=\"sy1\">()</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// Alternatively, a function could take pointers</span><br/>    <span class=\"sy1\">{</span><br/>        sort3 <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z <span class=\"sy3\">*</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"sy3\">*</span>x &gt; <span class=\"sy3\">*</span>y <span class=\"sy1\">{</span><br/>                <span class=\"sy3\">*</span>x<span class=\"sy1\">,</span> <span class=\"sy3\">*</span>y <span class=\"sy2\">=</span> <span class=\"sy3\">*</span>y<span class=\"sy1\">,</span> <span class=\"sy3\">*</span>x<br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"sy3\">*</span>y &gt; <span class=\"sy3\">*</span>z <span class=\"sy1\">{</span><br/>                <span class=\"sy3\">*</span>y<span class=\"sy1\">,</span> <span class=\"sy3\">*</span>z <span class=\"sy2\">=</span> <span class=\"sy3\">*</span>z<span class=\"sy1\">,</span> <span class=\"sy3\">*</span>y<br/>            <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"sy3\">*</span>x &gt; <span class=\"sy3\">*</span>y <span class=\"sy1\">{</span><br/>                <span class=\"sy3\">*</span>x<span class=\"sy1\">,</span> <span class=\"sy3\">*</span>y <span class=\"sy2\">=</span> <span class=\"sy3\">*</span>y<span class=\"sy1\">,</span> <span class=\"sy3\">*</span>x<br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z <span class=\"sy2\">:=</span> intsIn<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> intsIn<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">],</span> intsIn<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"co1\">// (initialize)</span><br/>        sort3<span class=\"sy1\">(</span>&amp;x<span class=\"sy1\">,</span> &amp;y<span class=\"sy1\">,</span> &amp;z<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> x &gt; y <span class=\"sy3\">||</span> y &gt; z <span class=\"sy1\">{</span> <span class=\"co1\">// (validate)</span><br/>            log<span class=\"sy3\">.</span><span class=\"me1\">Fatal</span><span class=\"sy1\">()</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 5, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>sort<span class=\"br0\">)</span><br/>\u00a0<br/>sort3 <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><br/>sort3 <span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>z<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"br0\">)</span> <span class=\"kw1\">where</span><br/>    <span class=\"br0\">[</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> sort <span class=\"br0\">[</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>z<span class=\"br0\">]</span></pre>"}, {"lang": "J", "loc": 21, "block": "<pre class=\"j highlighted_source\">   <span class=\"kw2\">x</span> =:  <span class=\"st_h\">'lions, tigers, and'</span><br/>   <span class=\"kw2\">y</span> =:  <span class=\"st_h\">'bears, oh my!'</span><br/>   z =:  <span class=\"st_h\">'(from the \"Wizard of OZ\")'</span><br/>   <span class=\"st_h\">'x y z'</span>=: /:~\".<span class=\"st_h\">'x;y;&lt;z'</span><br/>   <span class=\"kw2\">x</span><br/><span class=\"sy0\">(</span>from the \"Wizard of OZ\"<span class=\"sy0\">)</span><br/>   <span class=\"kw2\">y</span><br/>bears, oh my!<br/>   z<br/>lions, tigers, and<br/>\u00a0<br/>   <span class=\"kw2\">x</span> =:  <span class=\"nu0\">77444</span><br/>   <span class=\"kw2\">y</span> =:    -<span class=\"nu0\">12</span><br/>   z =:      <span class=\"nu0\">0</span><br/>   <span class=\"st_h\">'x y z'</span>=: /:~\".<span class=\"st_h\">'x;y;&lt;z'</span><br/>   <span class=\"kw2\">x</span><br/><span class=\"nu0\">_12</span><br/>   <span class=\"kw2\">y</span><br/><span class=\"nu0\">0</span><br/>   z<br/><span class=\"nu0\">77444</span></pre>"}, {"lang": "Java", "loc": 56, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> SortThreeVariables <span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> Triple<span class=\"sy0\">&lt;</span>T <span class=\"kw1\">extends</span> Comparable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">{</span><br/>        T first, second, third<span class=\"sy0\">;</span><br/>\u00a0<br/>        Triple<span class=\"br0\">(</span>T x, T y, T z<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            first <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>            second <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span><br/>            third <span class=\"sy0\">=</span> z<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        Triple<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> sortInPlace<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            T s<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> first.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>  second <span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"br0\">{</span> s <span class=\"sy0\">=</span> second<span class=\"sy0\">;</span> second <span class=\"sy0\">=</span> first<span class=\"sy0\">;</span>  first  <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> first.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>  third  <span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"br0\">{</span> s <span class=\"sy0\">=</span> third<span class=\"sy0\">;</span>  third  <span class=\"sy0\">=</span> first<span class=\"sy0\">;</span>  first  <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> second.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span> third  <span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"br0\">{</span> s <span class=\"sy0\">=</span> third<span class=\"sy0\">;</span>  third  <span class=\"sy0\">=</span> second<span class=\"sy0\">;</span> second <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">this</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"sy0\">&lt;</span>T <span class=\"kw1\">extends</span> Comparable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span> Triple<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> sortThree<span class=\"br0\">(</span>T x, T y, T z<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span> <span class=\"kw1\">new</span> Triple<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span> x, y, z <span class=\"br0\">)</span> <span class=\"br0\">)</span>.<span class=\"me1\">sortInPlace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> <span class=\"kw4\">void</span> printThree<span class=\"br0\">(</span>T x, T y, T z<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"x=%s%ny=%s%nz=%s%n%n\"</span>, x, y, z<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> x <span class=\"sy0\">=</span> <span class=\"st0\">\"lions, and tigers, and\"</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> y <span class=\"sy0\">=</span> <span class=\"st0\">\"bears, oh my!\"</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> z <span class=\"sy0\">=</span> <span class=\"st0\">\"(from the <span class=\"es0\">\\\"</span>Wizard of OZ<span class=\"es0\">\\\"</span>)\"</span><span class=\"sy0\">;</span><br/>        Triple<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> t <span class=\"sy0\">=</span> sortThree<span class=\"br0\">(</span>x, y, z<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        x <span class=\"sy0\">=</span> t.<span class=\"me1\">first</span><span class=\"sy0\">;</span><br/>        y <span class=\"sy0\">=</span> t.<span class=\"me1\">second</span><span class=\"sy0\">;</span><br/>        z <span class=\"sy0\">=</span> t.<span class=\"me1\">third</span><span class=\"sy0\">;</span><br/>        printThree<span class=\"br0\">(</span>x, y, z<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> x2 <span class=\"sy0\">=</span> <span class=\"nu0\">77444</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> y2 <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">12</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> z2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        Triple<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> t2 <span class=\"sy0\">=</span> sortThree<span class=\"br0\">(</span>x2, y2, z2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        x2 <span class=\"sy0\">=</span> t2.<span class=\"me1\">first</span><span class=\"sy0\">;</span><br/>        y2 <span class=\"sy0\">=</span> t2.<span class=\"me1\">second</span><span class=\"sy0\">;</span><br/>        z2 <span class=\"sy0\">=</span> t2.<span class=\"me1\">third</span><span class=\"sy0\">;</span><br/>        printThree<span class=\"br0\">(</span>x2, y2, z2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> x3 <span class=\"sy0\">=</span> <span class=\"nu0\">174.5</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> y3 <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">62.5</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> z3 <span class=\"sy0\">=</span> <span class=\"nu0\">41.7</span><span class=\"sy0\">;</span><br/>        Triple<span class=\"sy0\">&lt;</span>Double<span class=\"sy0\">&gt;</span> t3 <span class=\"sy0\">=</span> sortThree<span class=\"br0\">(</span>x3, y3, z3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        x3 <span class=\"sy0\">=</span> t3.<span class=\"me1\">first</span><span class=\"sy0\">;</span><br/>        y3 <span class=\"sy0\">=</span> t3.<span class=\"me1\">second</span><span class=\"sy0\">;</span><br/>        z3 <span class=\"sy0\">=</span> t3.<span class=\"me1\">third</span><span class=\"sy0\">;</span><br/>        printThree<span class=\"br0\">(</span>x3, y3, z3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 27, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">const</span> printThree <span class=\"sy0\">=</span> <span class=\"br0\">(</span>note<span class=\"sy0\">,</span> <span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>a1<span class=\"sy0\">,</span> b1<span class=\"sy0\">,</span> c1<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>  console.<span class=\"me1\">log</span><span class=\"br0\">(</span>`$<span class=\"br0\">{</span>note<span class=\"br0\">}</span><br/>    $<span class=\"br0\">{</span>a<span class=\"br0\">}</span> is<span class=\"sy0\">:</span> $<span class=\"br0\">{</span>a1<span class=\"br0\">}</span><br/>    $<span class=\"br0\">{</span>b<span class=\"br0\">}</span> is<span class=\"sy0\">:</span> $<span class=\"br0\">{</span>b1<span class=\"br0\">}</span><br/>    $<span class=\"br0\">{</span>c<span class=\"br0\">}</span> is<span class=\"sy0\">:</span> $<span class=\"br0\">{</span>c1<span class=\"br0\">}</span><br/>  `<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">const</span> sortThree <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>\u00a0<br/>  let a <span class=\"sy0\">=</span> <span class=\"st0\">'lions, tigers, and'</span><span class=\"sy0\">;</span><br/>  let b <span class=\"sy0\">=</span> <span class=\"st0\">'bears, oh my!'</span><span class=\"sy0\">;</span><br/>  let c <span class=\"sy0\">=</span> <span class=\"st0\">'(from the \"Wizard of OZ\")'</span><span class=\"sy0\">;</span><br/>  printThree<span class=\"br0\">(</span><span class=\"st0\">'Before Sorting'</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">'a'</span><span class=\"sy0\">,</span> <span class=\"st0\">'b'</span><span class=\"sy0\">,</span> <span class=\"st0\">'c'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"br0\">]</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  printThree<span class=\"br0\">(</span><span class=\"st0\">'After Sorting'</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">'a'</span><span class=\"sy0\">,</span> <span class=\"st0\">'b'</span><span class=\"sy0\">,</span> <span class=\"st0\">'c'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  let x <span class=\"sy0\">=</span> <span class=\"nu0\">77444</span><span class=\"sy0\">;</span><br/>  let y <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">12</span><span class=\"sy0\">;</span><br/>  let z <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  printThree<span class=\"br0\">(</span><span class=\"st0\">'Before Sorting'</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">'x'</span><span class=\"sy0\">,</span> <span class=\"st0\">'y'</span><span class=\"sy0\">,</span> <span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z<span class=\"br0\">]</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  printThree<span class=\"br0\">(</span><span class=\"st0\">'After Sorting'</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">'x'</span><span class=\"sy0\">,</span> <span class=\"st0\">'y'</span><span class=\"sy0\">,</span> <span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>sortThree<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 11, "block": "<pre class=\"text highlighted_source\">def example1:<br/> {x: \"lions, tigers, and\",<br/>  y: \"bears, oh my\",<br/>  z: \"(from the \\\"Wizard of OZ\\\")\"<br/> };<br/>\u00a0<br/>def example2:<br/> {x: 77444,<br/>  y: -12,<br/>  z: 0<br/> };</pre>"}, {"lang": "Julia", "loc": 9, "block": "<pre class=\"text highlighted_source\"># v0.6<br/>\u00a0<br/>a, b, c = \"lions, tigers, and\", \"bears, oh my!\", \"(from the \\\"Wizard of OZ\\\")\"<br/>a, b, c = sort([a, b, c])<br/>@show a b c<br/>\u00a0<br/>a, b, c = 77444, -12, 0<br/>a, b, c = sort([a, b, c])<br/>@show a b c</pre>"}, {"lang": "Kotlin", "loc": 38, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>inline fun <span class=\"sy0\">&lt;</span>reified T <span class=\"sy0\">:</span> Comparable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span> sortThree<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> T, y<span class=\"sy0\">:</span> T, z<span class=\"sy0\">:</span> T<span class=\"br0\">)</span><span class=\"sy0\">:</span> Triple<span class=\"sy0\">&lt;</span>T, T, T<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span>x, y, z<span class=\"br0\">)</span><br/>    a.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Triple<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun <span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> printThree<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> T, y<span class=\"sy0\">:</span> T, z<span class=\"sy0\">:</span> T<span class=\"br0\">)</span> <span class=\"sy0\">=</span> println<span class=\"br0\">(</span><span class=\"st0\">\"x = $x<span class=\"es1\">\\n</span>y = $y<span class=\"es1\">\\n</span>z = $z<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> x <span class=\"sy0\">=</span> <span class=\"st0\">\"lions, tigers, and\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> y <span class=\"sy0\">=</span> <span class=\"st0\">\"bears, oh my!\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> z <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"(from the \"</span>Wizard of OZ<span class=\"st0\">\")\"</span><span class=\"st0\">\"\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> t <span class=\"sy0\">=</span> sortThree<span class=\"br0\">(</span>x, y, z<span class=\"br0\">)</span><br/>    x <span class=\"sy0\">=</span> t.<span class=\"me1\">first</span><br/>    y <span class=\"sy0\">=</span> t.<span class=\"me1\">second</span><br/>    z <span class=\"sy0\">=</span> t.<span class=\"me1\">third</span><br/>    printThree<span class=\"br0\">(</span>x, y, z<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> x2 <span class=\"sy0\">=</span> <span class=\"nu0\">77444</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> y2 <span class=\"sy0\">=</span> -<span class=\"nu0\">12</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> z2 <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> t2 <span class=\"sy0\">=</span> sortThree<span class=\"br0\">(</span>x2, y2, z2<span class=\"br0\">)</span><br/>    x2 <span class=\"sy0\">=</span> t2.<span class=\"me1\">first</span><br/>    y2 <span class=\"sy0\">=</span> t2.<span class=\"me1\">second</span><br/>    z2 <span class=\"sy0\">=</span> t2.<span class=\"me1\">third</span><br/>    printThree<span class=\"br0\">(</span>x2, y2, z2<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> x3 <span class=\"sy0\">=</span> <span class=\"nu0\">174.5</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> y3 <span class=\"sy0\">=</span> -<span class=\"nu0\">62.5</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> z3 <span class=\"sy0\">=</span> <span class=\"nu0\">41.7</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> t3 <span class=\"sy0\">=</span> sortThree<span class=\"br0\">(</span>x3, y3, z3<span class=\"br0\">)</span><br/>    x3 <span class=\"sy0\">=</span> t3.<span class=\"me1\">first</span><br/>    y3 <span class=\"sy0\">=</span> t3.<span class=\"me1\">second</span><br/>    z3 <span class=\"sy0\">=</span> t3.<span class=\"me1\">third</span><br/>    printThree<span class=\"br0\">(</span>x3, y3, z3<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 26, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> variadicSort <span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> t <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> x <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">{</span><span class=\"sy0\">...</span><span class=\"br0\">}</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>t<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw3\">table.sort</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw3\">unpack</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> testCases <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  <span class=\"br0\">{</span> x <span class=\"sy0\">=</span> <span class=\"st0\">'lions, tigers, and'</span><span class=\"sy0\">,</span><br/>    y <span class=\"sy0\">=</span> <span class=\"st0\">'bears, oh my!'</span><span class=\"sy0\">,</span><br/>    z <span class=\"sy0\">=</span> <span class=\"st0\">'(from the \"Wizard of OZ\")'</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>  <span class=\"br0\">{</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">77444</span><span class=\"sy0\">,</span><br/>    y <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span><br/>    z <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> case <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>testCases<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z <span class=\"sy0\">=</span> variadicSort<span class=\"br0\">(</span>case<span class=\"sy0\">.</span>x<span class=\"sy0\">,</span> case<span class=\"sy0\">.</span>y<span class=\"sy0\">,</span> case<span class=\"sy0\">.</span>z<span class=\"br0\">)</span><br/>  <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Case \"</span> <span class=\"sy0\">..</span> i<span class=\"br0\">)</span><br/>  <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>x = \"</span> <span class=\"sy0\">..</span> x<span class=\"br0\">)</span><br/>  <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>y = \"</span> <span class=\"sy0\">..</span> y<span class=\"br0\">)</span><br/>  <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>z = \"</span> <span class=\"sy0\">..</span> z<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 33, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module Sort3 {<br/>      Let X=77744, Y=-12, Z=0<br/>      Let X$ =  \"lions, tigers, and\",  Y$ =  \"bears, oh my!\",  Z$ =  {(from the \"Wizard of OZ\")}<br/>      \\\\ &amp; use for by reference pass<br/>      Module SortSome (&amp;X$, &amp;Y$, &amp;Z$){<br/>            If Type$(X$)&lt;&gt;\"String\" Then {<br/>                  Link X$,Y$, Z$ to X,Y,Z<br/>                  Print3()<br/>                  If Y&gt;Z then Swap Y, Z  ' both numeric in Swap<br/>                  If X&gt;Z then Swap X, Z<br/>                  If X&gt;Y then Swap X, Y <br/>                  Print3()<br/>            } Else {<br/>                  Print3Str()<br/>                  If Y$&gt;Z$ then Swap Y$, Z$ ' both strings in Swap<br/>                  If X$&gt;Z$ then Swap X$, Z$<br/>                  If X$&gt;Y$ then Swap X$, Y$<br/>                  Print3Str()<br/>            }<br/>      }<br/>      SortSome &amp;X, &amp;Y, &amp;Z<br/>      SortSome &amp;X$, &amp;Y$, &amp;Z$<br/>      Sub Print3()<br/>            \\\\ double ,, used to insert a New Line<br/>            Print \"X=\",X,,\"Y=\",Y,,\"Z=\",Z<br/>      End Sub<br/>      Sub Print3Str()<br/>            Print \"X$=\",X$,,\"Y$=\",Y$,,\"Z$=\",Z$<br/>      End Sub<br/>}<br/>Sort3<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 2, "block": "<pre class=\"text highlighted_source\">lst\u00a0:= sort([x,y,z]):<br/>x,y,z\u00a0:= lst[1],lst[2],lst[3]:</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">{x, y, z} = Sort[{x, y, z}]</pre>"}, {"lang": "Modula-2", "loc": 44, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> SortThreeVariables;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> SwapInt<span class=\"br0\">(</span><span class=\"kw1\">VAR</span> a<span class=\"sy0\">,</span>b <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span> t <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    t <span class=\"sy0\">:=</span> a;<br/>    a <span class=\"sy0\">:=</span> b;<br/>    b <span class=\"sy0\">:=</span> t;<br/><span class=\"kw1\">END</span> SwapInt;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Sort3Int<span class=\"br0\">(</span><span class=\"kw1\">VAR</span> x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>z <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">IF</span> x&lt;y <span class=\"kw1\">THEN</span><br/>        <span class=\"kw1\">IF</span> z&lt;x <span class=\"kw1\">THEN</span><br/>            SwapInt<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>z<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">ELSIF</span> y&lt;z <span class=\"kw1\">THEN</span><br/>        SwapInt<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">ELSE</span><br/>        SwapInt<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>z<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">IF</span> z&lt;y <span class=\"kw1\">THEN</span><br/>        SwapInt<span class=\"br0\">(</span>y<span class=\"sy0\">,</span>z<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">END</span>;<br/><span class=\"kw1\">END</span> Sort3Int;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    a <span class=\"sy0\">:=</span> <span class=\"nu0\">77444</span>;<br/>    b <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span><span class=\"nu0\">12</span>;<br/>    c <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    FormatString<span class=\"br0\">(</span><span class=\"st0\">\"Before a=[%i]; b=[%i]; c=[%i]<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>\u00a0<br/>    Sort3Int<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"sy0\">,</span>c<span class=\"br0\">)</span>;<br/>    FormatString<span class=\"br0\">(</span><span class=\"st0\">\"Before a=[%i]; b=[%i]; c=[%i]<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> c<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>\u00a0<br/>    ReadChar;<br/><span class=\"kw1\">END</span> SortThreeVariables.</pre>"}, {"lang": "OCaml", "loc": 28, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> sortrefs <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> sorted <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map <span class=\"br0\">(</span> <span class=\"sy0\">!</span> <span class=\"br0\">)</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a><br/>               <span class=\"sy0\">|&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>sort <span class=\"br0\">(</span><span class=\"kw1\">fun</span> a b <span class=\"sy0\">-&gt;</span><br/>                   <span class=\"kw1\">if</span> a <span class=\"sy0\">&lt;</span> b <span class=\"kw1\">then</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">else</span><br/>                   <span class=\"kw1\">if</span> a <span class=\"sy0\">&gt;</span> b <span class=\"kw1\">then</span>  <span class=\"nu0\">1</span> <span class=\"kw1\">else</span><br/>                     <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter2 <span class=\"br0\">(</span><span class=\"kw1\">fun</span> v x <span class=\"sy0\">-&gt;</span> v <span class=\"sy0\">:=</span> x<span class=\"br0\">)</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist\"><span class=\"kw4\">list</span></a> sorted<br/>\u00a0<br/><span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><br/>\u00a0<br/><span class=\"kw1\">let</span> test <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> x <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"st0\">\"lions, tigers, and\"</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> y <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"st0\">\"bears, oh my!\"</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> z <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"st0\">\"(from the \\\"</span>Wizard <span class=\"kw1\">of</span> OZ\\<span class=\"st0\">\")\"</span> <span class=\"kw1\">in</span><br/>  sortrefs <span class=\"br0\">[</span>x<span class=\"sy0\">;</span> y<span class=\"sy0\">;</span> z<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"case 1:\"</span><span class=\"sy0\">;</span><br/>  printf <span class=\"st0\">\"\\tx:\u00a0%s\\n\"</span> <span class=\"sy0\">!</span>x<span class=\"sy0\">;</span><br/>  printf <span class=\"st0\">\"\\ty:\u00a0%s\\n\"</span> <span class=\"sy0\">!</span>y<span class=\"sy0\">;</span><br/>  printf <span class=\"st0\">\"\\tz:\u00a0%s\\n\"</span> <span class=\"sy0\">!</span>z<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> x <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">77444</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> y <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> z <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>  sortrefs <span class=\"br0\">[</span>x<span class=\"sy0\">;</span> y<span class=\"sy0\">;</span> z<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"case 1:\"</span><span class=\"sy0\">;</span><br/>  printf <span class=\"st0\">\"\\tx:\u00a0%d\\n\"</span> <span class=\"sy0\">!</span>x<span class=\"sy0\">;</span><br/>  printf <span class=\"st0\">\"\\ty:\u00a0%d\\n\"</span> <span class=\"sy0\">!</span>y<span class=\"sy0\">;</span><br/>  printf <span class=\"st0\">\"\\tz:\u00a0%d\\n\"</span> <span class=\"sy0\">!</span>z</pre>"}, {"lang": "Perl", "loc": 31, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/env perl</span><br/><span class=\"kw2\">use</span> <span class=\"nu0\">5.010</span>_000<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Sort strings</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'lions, tigers, and'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'bears, oh my!'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$z</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'(from the \"Wizard of OZ\")'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># When assigning a list to list, the values are mapped</span><br/><span class=\"br0\">(</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <span class=\"br0\">(</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>say <span class=\"st_h\">'Case 1:'</span><span class=\"sy0\">;</span><br/>say <span class=\"st0\">\"  x = $x\"</span><span class=\"sy0\">;</span><br/>say <span class=\"st0\">\"  y = $y\"</span><span class=\"sy0\">;</span><br/>say <span class=\"st0\">\"  z = $z\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Sort numbers</span><br/>\u00a0<br/><span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">77444</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">12</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$z</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># The sort function can take a customizing block parameter.</span><br/><span class=\"co1\"># The spaceship operator creates a by-value numeric sort</span><br/><span class=\"br0\">(</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <span class=\"br0\">{</span> <span class=\"re0\">$a</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"re0\">$b</span> <span class=\"br0\">}</span> <span class=\"br0\">(</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>say <span class=\"st_h\">'Case 2:'</span><span class=\"sy0\">;</span><br/>say <span class=\"st0\">\"  x = $x\"</span><span class=\"sy0\">;</span><br/>say <span class=\"st0\">\"  y = $y\"</span><span class=\"sy0\">;</span><br/>say <span class=\"st0\">\"  z = $z\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 24, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"co1\"># Sorting strings. Added a vertical bar between strings to make them discernable</span><br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'lions, tigers, and'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'bears,  oh my!'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'(from \"The Wizard of Oz\")'</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"sorting: {($a, $b, $c).join('|')}\"</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st_h\">'|'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st_h\">' - standard lexical string sort'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Sorting numeric things</span><br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> 7<span class=\"sy0\">.</span>7444e4<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>sorting: $x $y $z\"</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">,</span> <span class=\"st_h\">' - standard numeric sort, low to high'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># Or, with a modified comparitor:</span><br/><span class=\"kw1\">for</span>  <span class=\"sy0\">-*,</span>       <span class=\"st_h\">' - numeric sort high to low'</span><span class=\"sy0\">,</span><br/>     <span class=\"sy0\">~*,</span>       <span class=\"st_h\">' - lexical \"string\" sort'</span><span class=\"sy0\">,</span><br/>     <span class=\"sy0\">*.</span><span class=\"kw3\">chars</span><span class=\"sy0\">,</span>  <span class=\"st_h\">' - sort by string length short to long'</span><span class=\"sy0\">,</span><br/>     <span class=\"sy0\">-*.</span><span class=\"kw3\">chars</span><span class=\"sy0\">,</span> <span class=\"st_h\">' - or long to short'</span><br/>  <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$comparitor</span><span class=\"sy0\">,</span> <span class=\"re0\">$type</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> 7<span class=\"sy0\">.</span>7444e4<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"br0\">(</span> <span class=\"sy0\">&amp;</span><span class=\"re0\">$comparitor</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$type</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># sort ALL THE THINGS</span><br/><span class=\"co1\"># sorts by lexical order with numeric values by magnitude.</span><br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 9, "block": "<pre class=\"text highlighted_source\">object {x,y,z} = {\"lions, tigers, and\",\"bears, oh my\",\"(from the \\\"Wizard of OZ\\\")\"}<br/>?{x,y,z}<br/>{x,y,z} = sort({x,y,z})<br/>?{x,y,z}<br/>\u00a0<br/>{x,y,z} = {77444,-12,0}<br/>?{x,y,z}<br/>{x,y,z} = sort({x,y,z})<br/>?{x,y,z}</pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">(let (X 77444  Y -12  Z 0)<br/>   (println X Y Z)<br/>   (mapc set '(X Y Z) (sort (list X Y Z)))<br/>   (println X Y Z) )</pre>"}, {"lang": "PHP", "loc": 36, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"co1\">//Sort strings</span><br/><span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'lions, tigers, and'</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'bears, oh my!'</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$z</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'(from the \"Wizard of OZ\")'</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$items</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/sort\"><span class=\"kw3\">sort</span></a><span class=\"br0\">(</span><span class=\"re0\">$items</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://www.php.net/list\"><span class=\"kw3\">list</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$items</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> <span class=\"co3\">&lt;&lt;&lt;EOT<br/>Case 1:<br/>  x = $x<br/>  y = $y<br/>  z = $z<br/>\u00a0<br/>EOT</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">//Sort numbers</span><br/><span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">77444</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">12</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$z</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$items</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/sort\"><span class=\"kw3\">sort</span></a><span class=\"br0\">(</span><span class=\"re0\">$items</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://www.php.net/list\"><span class=\"kw3\">list</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">$items</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> <span class=\"co3\">&lt;&lt;&lt;EOT<br/>Case 2:<br/>  x = $x<br/>  y = $y<br/>  z = $z<br/>\u00a0<br/>EOT</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Python", "loc": 13, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"co1\">#python2 Code for Sorting 3 values</span><br/>a<span class=\"sy0\">=</span> <span class=\"kw2\">raw_input</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter values one by one ..<span class=\"es0\">\\n</span>1.\"</span><span class=\"br0\">)</span>.<span class=\"me1\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>b<span class=\"sy0\">=</span><span class=\"kw2\">raw_input</span><span class=\"br0\">(</span><span class=\"st0\">\"2.\"</span><span class=\"br0\">)</span>.<span class=\"me1\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>c<span class=\"sy0\">=</span><span class=\"kw2\">raw_input</span><span class=\"br0\">(</span><span class=\"st0\">\"3.\"</span><span class=\"br0\">)</span>.<span class=\"me1\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> a<span class=\"sy0\">&gt;</span>b\u00a0:<br/>   a<span class=\"sy0\">,</span>b <span class=\"sy0\">=</span> b<span class=\"sy0\">,</span>a <br/><span class=\"kw1\">if</span> a<span class=\"sy0\">&gt;</span>c:<br/>   a<span class=\"sy0\">,</span>c <span class=\"sy0\">=</span> c<span class=\"sy0\">,</span>a <br/><span class=\"kw1\">if</span> b<span class=\"sy0\">&gt;</span>c:<br/>   b<span class=\"sy0\">,</span>c <span class=\"sy0\">=</span> c<span class=\"sy0\">,</span>b <br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>+<span class=\"st0\">\" \"</span>+<span class=\"kw2\">str</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span>+<span class=\"st0\">\" \"</span>+<span class=\"kw2\">str</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 40, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define-syntax-rule (sort-3! x y z &lt;?)<br/>  (begin<br/>    (define-syntax-rule (swap! x y) (let ((tmp x)) (set! x y) (set! y tmp)))<br/>    (define-syntax-rule (sort-2! x y) (when (&lt;? y x) (swap! x y)))<br/>    (sort-2! x y)<br/>    (sort-2! x z)<br/>    (sort-2! y z)))<br/>\u00a0<br/>(module+ test<br/>  (require rackunit<br/>           data/order)<br/>\u00a0<br/>  (define (test-permutations l &lt;?)<br/>    (test-case<br/>     (format \"test-permutations ~a\" (object-name &lt;?))<br/>     (for ((p (in-permutations l)))<br/>       (match-define (list a b c) p)<br/>       (sort-3! a b c &lt;?)<br/>       (check-equal? (list a b c) l))))<br/>\u00a0<br/>  (test-permutations '(1 2 3) &lt;)<br/>\u00a0<br/> \u00a0;; string sorting<br/>  (let ((x  \"lions, tigers, and\")<br/>        (y  \"bears, oh my!\")<br/>        (z  \"(from the \\\"Wizard of OZ\\\")\"))<br/>    (sort-3! x y z string&lt;?)<br/>    (for-each displayln (list x y z)))<br/>\u00a0<br/>  (newline)<br/>\u00a0<br/> \u00a0;; general data sorting<br/>  (define datum&lt;? (order-&lt;? datum-order))  <br/>  (let ((x  \"lions, tigers, and\")<br/>        (y  \"bears, oh my!\")<br/>        (z  '(from the \"Wizard of OZ\")))<br/>    (sort-3! x y z datum&lt;?)<br/>    (for-each displayln (list x y z))))</pre>"}, {"lang": "REXX", "loc": 15, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program sorts three (any value)  variables  (X, Y, and  Z)  into ascending order.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x y z <span class=\"sy0\">.</span>                                <span class=\"coMULTI\">/*obtain the three variables from C.L. */</span><br/><span class=\"kw1\">if</span> x==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> x==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> x= <span class=\"st0\">'lions, tigers, and'</span>        <span class=\"coMULTI\">/*Not specified?  Use the default*/</span><br/><span class=\"kw1\">if</span> y==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> y==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> y= <span class=\"st0\">'bears,  oh my!'</span>            <span class=\"coMULTI\">/* \"      \"        \"   \"     \"   */</span><br/><span class=\"kw1\">if</span> z==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> z==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> z= <span class=\"st0\">'(from \"The Wizard of Oz\")'</span> <span class=\"coMULTI\">/* \"      \"        \"   \"     \"   */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500 original value of X: '</span>   x<br/><span class=\"kw1\">say</span> <span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500 original value of Y: '</span>   y<br/><span class=\"kw1\">say</span> <span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500 original value of Z: '</span>   z<br/><span class=\"kw1\">if</span> x<span class=\"sy0\">&gt;</span>y  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  _=x;  x=y;  y=_;  <span class=\"kw3\">end</span>          <span class=\"coMULTI\">/*swap the values of   X   and   Y.    */</span>      <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2500 sorting.*/</span><br/><span class=\"kw1\">if</span> y<span class=\"sy0\">&gt;</span>z  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  _=y;  y=z;  z=_;  <span class=\"kw3\">end</span>          <span class=\"coMULTI\">/*  \"   \"     \"    \"   Y    \"    Z.    */</span>      <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2500 sorting.*/</span><br/><span class=\"kw1\">if</span> x<span class=\"sy0\">&gt;</span>y  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  _=x;  x=y;  y=_;  <span class=\"kw3\">end</span>          <span class=\"coMULTI\">/*  \"   \"     \"    \"   X    \"    Y.    */</span>      <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2500 sorting */</span><br/><span class=\"kw1\">say</span>                                              <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'\u2550\u2550\u2550\u2550\u2550  sorted  value of X: '</span>   x<br/><span class=\"kw1\">say</span> <span class=\"st0\">'\u2550\u2550\u2550\u2550\u2550  sorted  value of Y: '</span>   y<br/><span class=\"kw1\">say</span> <span class=\"st0\">'\u2550\u2550\u2550\u2550\u2550  sorted  value of Z: '</span>   z</pre>"}, {"lang": "Ring", "loc": 22, "block": "<pre class=\"text highlighted_source\"># Project\u00a0: Sort three variables<br/>\u00a0<br/>x = 'lions, tigers, and'<br/>y = 'bears, oh my!'<br/>z = '(from the \"Wizard of OZ\")'<br/>sortthree(x,y,z)<br/>x = 77444<br/>y = -12<br/>z = 0<br/>sortthree(x,y,z)<br/>\u00a0<br/>func sortthree(x,y,z)<br/>        str = []<br/>        add(str,x)<br/>        add(str,y)<br/>        add(str,z)<br/>        str = sort(str)<br/>        see \"x = \" + str[1] + nl<br/>        see \"y = \" + str[2] + nl<br/>        see \"z = \" + str[3] + nl<br/>        see nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">x =  <span class=\"st0\">'lions, tigers, and'</span><br/>y =  <span class=\"st0\">'bears, oh my!'</span><br/>z =  <span class=\"st0\">'(from the \"Wizard of OZ\")'</span><br/>x, y, z = <span class=\"br0\">[</span>x, y, z<span class=\"br0\">]</span>.<span class=\"me1\">sort</span><br/><span class=\"kw3\">puts</span> x, y, z<br/>\u00a0<br/>x, y, z = 7.7444e4, <span class=\"sy0\">-</span><span class=\"nu0\">12</span>, <span class=\"nu0\">18</span><span class=\"sy0\">/</span>2r <span class=\"co1\"># Float, Integer, Rational; taken from Perl 6</span><br/>x, y, z = <span class=\"br0\">[</span>x, y, z<span class=\"br0\">]</span>.<span class=\"me1\">sort</span><br/><span class=\"kw3\">puts</span> x, y, z<br/>\u00a0</pre>"}, {"lang": "Ring", "loc": 17, "block": "<pre class=\"text highlighted_source\">x = 77444<br/>y = -12<br/>z = 0<br/>sList = sortList(x, y, z)<br/>see sList + nl<br/>\u00a0<br/>x = 'lions, tigers, and'<br/>y = 'bears, oh my!'<br/>z = '(from the \"Wizard of OZ\")'<br/>sList = sortList(x, y, z)<br/>see sList + nl<br/>\u00a0<br/>func sortList (x, y, z)<br/>     aList = [x, y, z]<br/>     sList = sort(aList)<br/>     return sList<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 13, "block": "<pre class=\"ruby highlighted_source\">func sort_refs<span class=\"br0\">(</span><span class=\"sy0\">*</span>arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    arr.<span class=\"me1\">map</span><span class=\"br0\">{</span> <span class=\"sy0\">*</span>_ <span class=\"br0\">}</span>.<span class=\"me1\">sort</span> ~Z arr <span class=\"sy0\">-&gt;</span> each <span class=\"br0\">{</span> <span class=\"sy0\">*</span>_<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = _<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var x = <span class=\"nu0\">77444</span><br/>var y =   <span class=\"sy0\">-</span><span class=\"nu0\">12</span><br/>var z =     <span class=\"nu0\">0</span><br/>\u00a0<br/>sort_refs<span class=\"br0\">(</span>\\x, \\y, \\z<span class=\"br0\">)</span><br/>\u00a0<br/>say x<br/>say y<br/>say z</pre>"}, {"lang": "Sidef", "loc": 13, "block": "<pre class=\"ruby highlighted_source\">func sort_refs<span class=\"br0\">(</span><span class=\"sy0\">*</span>arr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    arr.<span class=\"me1\">map</span><span class=\"br0\">{</span> <span class=\"sy0\">*</span>_ <span class=\"br0\">}</span>.<span class=\"me1\">sort</span> ~Z arr <span class=\"sy0\">-&gt;</span> each <span class=\"br0\">{</span> <span class=\"sy0\">*</span>_<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = _<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var x = <span class=\"nu0\">77444</span><br/>var y =   <span class=\"sy0\">-</span><span class=\"nu0\">12</span><br/>var z =     <span class=\"nu0\">0</span><br/>\u00a0<br/>sort_refs<span class=\"br0\">(</span>\\x, \\y, \\z<span class=\"br0\">)</span><br/>\u00a0<br/>say x<br/>say y<br/>say z</pre>"}, {"lang": "zkl", "loc": 7, "block": "<pre class=\"text highlighted_source\">x,y,z\u00a0:= \"lions, tigers, and\", \"bears, oh my!\", 0'|(from the \"Wizard of OZ\")|;<br/>x,y,z = List(x,y,z).sort();<br/>println(x,\" | \",y,\" | \",z);<br/>\u00a0<br/>x,y,z\u00a0:= 77444, -12, 0;<br/>x,y,z = List(x,y,z).sort();<br/>println(x,\" \",y,\" \",z);</pre>"}]}