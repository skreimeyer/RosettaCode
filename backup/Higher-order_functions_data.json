{"task": "Higher-order_functions", "blocks": [{"lang": "8th", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>: pass-me <br/>  \"I was passed\\n\" .\u00a0;<br/>: passer<br/>  w:exec\u00a0;<br/>\\ pass 'pass-me' to 'passer'<br/>' pass-me passer<br/>\u00a0</pre>"}, {"lang": "ActionScript", "loc": 19, "block": "<pre class=\"actionscript highlighted_source\">package <span class=\"br0\">{</span><br/>    <span class=\"kw3\">public</span> <span class=\"kw2\">class</span> MyClass <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw3\">public</span> <span class=\"kw2\">function</span> first<span class=\"br0\">(</span>func:<span class=\"kw2\">Function</span><span class=\"br0\">)</span>:<span class=\"kw3\">String</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> func.<span class=\"kw3\">call</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw3\">public</span> <span class=\"kw2\">function</span> second<span class=\"br0\">(</span><span class=\"br0\">)</span>:<span class=\"kw3\">String</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"second\"</span>;<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw3\">public</span> <span class=\"kw3\">static</span> <span class=\"kw2\">function</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>:<span class=\"kw3\">void</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">var</span> result:<span class=\"kw3\">String</span> = first<span class=\"br0\">(</span>second<span class=\"br0\">)</span>;<br/>            <span class=\"kw3\">trace</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span>;<br/>            result = first<span class=\"br0\">(</span><span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"third\"</span>; <span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw3\">trace</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span>;<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 17, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_Io</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_Io</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Subprogram_As_Argument <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Proc_Access <span class=\"kw1\">is</span> <span class=\"kw3\">access</span> <span class=\"kw3\">procedure</span>;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Second <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"Second Procedure\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Second;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> First<span class=\"br0\">(</span>Proc\u00a0: Proc_Access<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      Proc.<span class=\"kw3\">all</span>;<br/>   <span class=\"kw1\">end</span> First;<br/><span class=\"kw1\">begin</span><br/>   First<span class=\"br0\">(</span>Second'<span class=\"kw3\">Access</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Subprogram_As_Argument;</pre>"}, {"lang": "Aime", "loc": 25, "block": "<pre class=\"text highlighted_source\">integer<br/>average(integer p, integer q)<br/>{<br/>    return (p + q) / 2;<br/>}<br/>\u00a0<br/>\u00a0<br/>void<br/>out(integer p, integer q, integer (*f) (integer, integer))<br/>{<br/>    o_integer(f(p, q));<br/>    o_byte('\\n');<br/>}<br/>\u00a0<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    # display the minimum, the maximum and the average of 117 and 319<br/>    out(117, 319, min);<br/>    out(117, 319, max);<br/>    out(117, 319, average);<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "AntLang", "loc": 2, "block": "<pre class=\"text highlighted_source\">twice:{x[x[y]]}<br/>echo twice \"Hello!\"</pre>"}, {"lang": "ALGOL 68", "loc": 13, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">PROC</span> first <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">PROC</span><span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> f<span class=\"br0\">)</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  f<span class=\"br0\">(</span>1<span class=\"br0\">)</span> <span class=\"sy1\">+</span> 2<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> second <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> x<span class=\"br0\">)</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  x<span class=\"sy1\">/</span>2<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$xg<span class=\"br0\">(</span>5<span class=\"sy1\">,</span>2<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span>first<span class=\"br0\">(</span>second<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "AmigaE", "loc": 12, "block": "<pre class=\"text highlighted_source\">PROC compute(func, val)<br/>  DEF s[10]\u00a0: STRING<br/>  WriteF('\\s\\n', RealF(s,func(val),4))<br/>ENDPROC<br/>\u00a0<br/>PROC sin_wrap(val) IS Fsin(val)<br/>PROC cos_wrap(val) IS Fcos(val)<br/>\u00a0<br/>PROC main()<br/>  compute({sin_wrap}, 0.0)<br/>  compute({cos_wrap}, 3.1415)<br/>ENDPROC</pre>"}, {"lang": "AppleScript", "loc": 25, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- This handler takes a script object (singer)</span><br/><span class=\"co1\">-- with another handler (call).</span><br/><span class=\"kw3\">on</span> sing about topic <span class=\"kw1\">by</span> singer<br/>    call <span class=\"kw3\">of</span> singer for <span class=\"st0\">\"Of \"</span> <span class=\"sy0\">&amp;</span> topic <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" I sing\"</span><br/><span class=\"kw3\">end</span> sing<br/>\u00a0<br/><span class=\"co1\">-- Define a handler in a script object,</span><br/><span class=\"co1\">-- then pass the script object.</span><br/><span class=\"kw3\">script</span> cellos<br/>    <span class=\"kw3\">on</span> call for what<br/>        say what using <span class=\"st0\">\"Cellos\"</span><br/>    <span class=\"kw3\">end</span> call<br/><span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>sing about <span class=\"st0\">\"functional programming\"</span> <span class=\"kw1\">by</span> cellos<br/>\u00a0<br/><span class=\"co1\">-- Pass a different handler. This one is a closure</span><br/><span class=\"co1\">-- that uses a variable (voice) from its context.</span><br/><span class=\"kw3\">on</span> hire for voice<br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> call for what<br/>            say what using voice<br/>        <span class=\"kw3\">end</span> call<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> hire<br/>sing about <span class=\"st0\">\"closures\"</span> <span class=\"kw1\">by</span> <span class=\"br0\">(</span>hire for <span class=\"st0\">\"Pipe Organ\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "ATS", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#include<br/>\"share/atspre_staload.hats\"<br/>\u00a0<br/>fun app_to_0 (f: (int) -&gt; int): int = f (0)<br/>\u00a0<br/>implement<br/>main0 () =<br/>{<br/>//<br/>val () = assertloc (app_to_0(lam(x) =&gt; x+1) = 1)<br/>val () = assertloc (app_to_0(lam(x) =&gt; 10*(x+1)) = 10)<br/>//<br/>} (* end of [main0] *)<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 17, "block": "<pre class=\"autohotkey highlighted_source\">\u00a0<br/>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"This \"</span> <span class=\"sy0\">.</span> x<br/><span class=\"br0\">}</span><br/>\u00a0<br/>g<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"That \"</span> <span class=\"sy0\">.</span> x<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">show</span></a><span class=\"br0\">(</span>fun<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% <span class=\"re0\">%fun%</span><span class=\"br0\">(</span><span class=\"st0\">\"works\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">show</span></a><span class=\"br0\">(</span>Func<span class=\"br0\">(</span><span class=\"st0\">\"f\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; either create a Func object</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">show</span></a><span class=\"br0\">(</span><span class=\"st0\">\"g\"</span><span class=\"br0\">)</span>       <span class=\"co1\">; or just name the function</span><br/><span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 9, "block": "<pre class=\"text highlighted_source\">      REM Test passing a function to a function:<br/>      PRINT FNtwo(FNone(), 10, 11)<br/>      END<br/>\u00a0<br/>      REM Function to be passed:<br/>      DEF FNone(x, y) = (x + y) ^ 2<br/>\u00a0<br/>      REM Function taking a function as an argument:<br/>      DEF FNtwo(RETURN f%, x, y) = FN(^f%)(x, y)</pre>"}, {"lang": "Bracmat", "loc": 14, "block": "<pre class=\"text highlighted_source\">( (plus=a b.!arg:(?a.?b)&amp;!a+!b)<br/>&amp; ( print<br/>  =   text a b func<br/>    .  \u00a0!arg:(?a.?b.(=?func).?text)<br/>      &amp; out$(str$(!text \"(\"\u00a0!a \",\"\u00a0!b \")=\" func$(!a.!b)))<br/>  )<br/>&amp; print$(3.7.'$plus.add)<br/>&amp;   print<br/>  $ ( 3<br/>    . 7<br/>    . (=a b.!arg:(?a.?b)&amp;!a*!b)<br/>    . multiply<br/>    )<br/>);</pre>"}, {"lang": "Brat", "loc": 5, "block": "<pre class=\"text highlighted_source\">add = { a, b | a + b }<br/>\u00a0<br/>doit = { f, a, b | f a, b }<br/>\u00a0<br/>p doit -&gt;add 1 2 #prints 3</pre>"}, {"lang": "Burlesque", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>blsq ) {1 2 3 4}{5.+}m[<br/>{6 7 8 9}<br/>\u00a0</pre>"}, {"lang": "C", "loc": 9, "block": "<pre class=\"c highlighted_source\"><span class=\"kw4\">void</span> myFuncSimple<span class=\"br0\">(</span> <span class=\"kw4\">void</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>funcParameter<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"coMULTI\">/* ... */</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><span class=\"sy0\">*</span>funcParameter<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* Call the passed function. */</span><br/>    funcParameter<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>     <span class=\"coMULTI\">/* Same as above with slight different syntax. */</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* ... */</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 23, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co1\">// Use &lt;functional&gt; for C++11</span><br/><span class=\"co2\">#include &lt;tr1/functional&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">::</span><span class=\"me2\">tr1</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> first<span class=\"br0\">(</span>function<span class=\"sy1\">&lt;</span><span class=\"kw4\">void</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">&gt;</span> f<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> second<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"second<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  first<span class=\"br0\">(</span>second<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 1, "block": "<pre>f=Add, f(6, 2) = 8\nf=Mul, f(6, 2) = 12\nf=Div, f(6, 2) = 3\n</pre>"}, {"lang": "Clean", "loc": 2, "block": "<pre class=\"text highlighted_source\">map f [x:xs] = [f x:map f xs]<br/>map f []     = []</pre>"}, {"lang": "Clojure", "loc": 9, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>defn append-hello <span class=\"br0\">[</span>s<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>str <span class=\"st0\">\"Hello \"</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn modify-string <span class=\"br0\">[</span>f s<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>f s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>modify-string append-hello <span class=\"st0\">\"World!\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 1, "block": "<pre class=\"coffeescript highlighted_source\">double = <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> x<span class=\"sy0\">*</span><span class=\"nu0\">2</span></pre>"}, {"lang": "Common Lisp", "loc": 9, "block": "<pre class=\"lisp highlighted_source\">CL-USER<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">defun</span> add <span class=\"br0\">(</span>a b<span class=\"br0\">)</span> <span class=\"br0\">(</span>+ a b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>ADD<br/>CL-USER<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>add <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"nu0\">3</span><br/>CL-USER<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">defun</span> call-it <span class=\"br0\">(</span>fn x y<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> fn x y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>CALL-IT<br/>CL-USER<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>call-it #'add <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"nu0\">3</span></pre>"}, {"lang": "D", "loc": 9, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">int</span> hof<span class=\"br0\">(</span><span class=\"kw4\">int</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> b<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> <span class=\"kw2\">delegate</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span> f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Add: \"</span><span class=\"sy0\">,</span> hof<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">+</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Multiply: \"</span><span class=\"sy0\">,</span> hof<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">*</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 10, "block": "<pre class=\"text highlighted_source\">map f lst:<br/>    ]<br/>    for item in lst:<br/>        f item<br/>    [<br/>\u00a0<br/>twice:<br/>    * 2<br/>\u00a0<br/>!. map @twice [ 1 2 5 ]</pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 10, "block": "<pre class=\"text highlighted_source\">map f lst:<br/>    ]<br/>    for item in lst:<br/>        f item<br/>    [<br/>\u00a0<br/>twice:<br/>    * 2<br/>\u00a0<br/>!. map @twice [ 1 2 5 ]</pre>"}, {"lang": "DWScript", "loc": 13, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">type</span> TFnType <span class=\"sy3\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>x <span class=\"sy1\">:</span> Float<span class=\"br0\">)</span> <span class=\"sy1\">:</span> Float<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> First<span class=\"br0\">(</span>f <span class=\"sy1\">:</span> TFnType<span class=\"br0\">)</span> <span class=\"sy1\">:</span> Float<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> f<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Second<span class=\"br0\">(</span>f <span class=\"sy1\">:</span> Float<span class=\"br0\">)</span> <span class=\"sy1\">:</span> Float<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> f<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>PrintLn<span class=\"br0\">(</span>First<span class=\"br0\">(</span>Second<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "E", "loc": 17, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> map<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> list<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> out <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> x <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> list <span class=\"br0\">{</span><br/>    out with<span class=\"sy0\">=</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  return out<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">?</span> map<span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> x <span class=\"br0\">{</span> x <span class=\"sy0\">+</span> x <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"two\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: [2, \"twotwo\"]</span><br/>\u00a0<br/><span class=\"sy0\">?</span> map<span class=\"br0\">(</span><span class=\"nu0\">1</span>.<span class=\"me1\">add</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: [6, 11, 21]</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> foo<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span> return <span class=\"sy0\">-</span><span class=\"br0\">(</span>x.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"sy0\">&gt;</span> map<span class=\"br0\">(</span>foo<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"a\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"bc\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: [0, -1, -2]</span></pre>"}, {"lang": "ECL", "loc": 51, "block": "<pre class=\"text highlighted_source\">//a Function prototype:<br/>INTEGER actionPrototype(INTEGER v1, INTEGER v2)\u00a0:= 0;<br/>\u00a0<br/>INTEGER aveValues(INTEGER v1, INTEGER v2)\u00a0:= (v1 + v2) DIV 2;<br/>INTEGER addValues(INTEGER v1, INTEGER v2)\u00a0:= v1 + v2;<br/>INTEGER multiValues(INTEGER v1, INTEGER v2)\u00a0:= v1 * v2;<br/>\u00a0<br/>//a Function prototype using a function prototype:<br/>INTEGER applyPrototype(INTEGER v1, actionPrototype actionFunc)\u00a0:= 0;<br/>\u00a0<br/>//using the Function prototype and a default value:<br/>INTEGER applyValue2(INTEGER v1,<br/>                    actionPrototype actionFunc = aveValues)\u00a0:=<br/>                    actionFunc(v1, v1+1)*2;<br/>\u00a0<br/>//Defining the Function parameter inline, witha default value:<br/>INTEGER applyValue4(INTEGER v1,<br/>                    INTEGER actionFunc(INTEGER v1,INTEGER v2) = aveValues)<br/>              \u00a0:= actionFunc(v1, v1+1)*4; <br/>INTEGER doApplyValue(INTEGER v1,<br/>                     INTEGER actionFunc(INTEGER v1, INTEGER v2))<br/>       \u00a0:= applyValue2(v1+1, actionFunc);<br/>\u00a0<br/>//producing simple results:<br/>OUTPUT(applyValue2(1));                           // 2<br/>OUTPUT(applyValue2(2));                           // 4<br/>OUTPUT(applyValue2(1, addValues));                // 6<br/>OUTPUT(applyValue2(2, addValues));                // 10<br/>OUTPUT(applyValue2(1, multiValues));              // 4<br/>OUTPUT(applyValue2(2, multiValues));              // 12<br/>OUTPUT(doApplyValue(1, multiValues));             // 12<br/>OUTPUT(doApplyValue(2, multiValues));             // 24<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>//A definition taking function parameters which themselves<br/>//have parameters that are functions...<br/>\u00a0<br/>STRING doMany(INTEGER v1,<br/>              INTEGER firstAction(INTEGER v1,<br/>                                  INTEGER actionFunc(INTEGER v1,INTEGER v2)),<br/>              INTEGER secondAction(INTEGER v1,<br/>                                   INTEGER actionFunc(INTEGER v1,INTEGER v2)),<br/>              INTEGER actionFunc(INTEGER v1,INTEGER v2)) <br/>      \u00a0:= (STRING)firstAction(v1, actionFunc) + ':' + (STRING)secondaction(v1, actionFunc);<br/>\u00a0<br/>OUTPUT(doMany(1, applyValue2, applyValue4, addValues));<br/>     // produces \"6:12\"<br/>\u00a0<br/>OUTPUT(doMany(2, applyValue4, applyValue2,multiValues));<br/>     // produces \"24:12\"</pre>"}, {"lang": "Efene", "loc": 24, "block": "<pre class=\"text highlighted_source\">first = fn (F) {<br/>  F()<br/>}<br/>\u00a0<br/>second = fn () { <br/>  io.format(\"hello~n\")<br/>}<br/>\u00a0<br/>@public<br/>run = fn () {<br/>    # passing the function specifying the name and arity<br/>    # arity: the number of arguments it accepts<br/>    first(fn second:0)<br/>\u00a0<br/>    first(fn () { io.format(\"hello~n\") })<br/>\u00a0<br/>    # holding a reference to the function in a variable<br/>    F1 = fn second:0<br/>    F2 = fn () { io.format(\"hello~n\") }<br/>\u00a0<br/>    first(F1)<br/>    first(F2)<br/>}<br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 8, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>program =<br/>[<br/>    var first\u00a0:= (:f)(f()).<br/>    var second\u00a0:= [ ^ \"second\" ].<br/>    console printLine(first(second)).<br/>].</pre>"}, {"lang": "Elixir", "loc": 17, "block": "<pre class=\"text highlighted_source\">iex(1)&gt; defmodule RC do<br/>...(1)&gt;   def first(f), do: f.()<br/>...(1)&gt;   def second, do:\u00a0:hello<br/>...(1)&gt; end<br/>{:module, RC,<br/> &lt;&lt;70, 79, 82, 49, 0, 0, 4, 224, 66, 69, 65, 77, 69, 120, 68, 99, 0, 0, 0, 142,<br/>131, 104, 2, 100, 0, 14, 101, 108, 105, 120, 105, 114, 95, 100, 111, 99, 115, 95<br/>, 118, 49, 108, 0, 0, 0, 2, 104, 2, ...&gt;&gt;,<br/> {:second, 0}}<br/>iex(2)&gt; RC.first(fn -&gt; RC.second end)<br/>:hello<br/>iex(3)&gt; RC.first(&amp;RC.second/0)\t\t\t# Another expression<br/>:hello<br/>iex(4)&gt; f = fn -&gt;\u00a0:world end                    # Anonymous function<br/>#Function&lt;20.54118792/0 in\u00a0:erl_eval.expr/5&gt;<br/>iex(5)&gt; RC.first(f)<br/>:world</pre>"}, {"lang": "Erlang", "loc": 5, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>test<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>first<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> second<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">first</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">F</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">second</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">hello</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM FUNC_PASS<br/>\u00a0<br/>  FUNCTION ONE(X,Y)<br/>     ONE=(X+Y)^2<br/>  END FUNCTION<br/>\u00a0<br/>  FUNCTION TWO(X,Y)<br/>     TWO=ONE(X,Y)+1<br/>  END FUNCTION<br/>\u00a0<br/>BEGIN<br/>  PRINT(TWO(10,11))<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euler Math Toolbox", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt;function f(x,a)\u00a0:= x^a-a^x<br/>&gt;function dof (f$:string,x)\u00a0:= f$(x,args());<br/>&gt;dof(\"f\",1:5;2)<br/> [ -1  0  1  0  -7 ]<br/>&gt;plot2d(\"f\",1,5;2):<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 9, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">procedure</span> use<span class=\"br0\">(</span><span class=\"kw2\">integer</span> fi<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> a<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> b<span class=\"br0\">)</span><br/>    <span class=\"kw2\">print</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"kw2\">call_func</span><span class=\"br0\">(</span>fi<span class=\"sy2\">,</span><span class=\"br0\">{</span>a<span class=\"sy2\">,</span>b<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">procedure</span><br/>\u00a0<br/><span class=\"kw1\">function</span> add<span class=\"br0\">(</span><span class=\"kw2\">integer</span> a<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> b<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> a <span class=\"sy1\">+</span> b<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>use<span class=\"br0\">(</span><span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"add\"</span><span class=\"br0\">)</span><span class=\"sy2\">,</span><span class=\"nu0\">23</span><span class=\"sy2\">,</span><span class=\"nu0\">45</span><span class=\"br0\">)</span></pre>"}, {"lang": "F#", "loc": 6, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"sy0\">&gt;</span> <span class=\"kw1\">let</span> twice f x <span class=\"sy0\">=</span> f <span class=\"br0\">(</span>f x<span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">val</span> twice\u00a0: <span class=\"br0\">(</span><span class=\"st0\">'a -&gt; '</span>a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"st0\">'a -&gt; '</span>a<br/>\u00a0<br/><span class=\"sy0\">&gt;</span> twice System.<span class=\"me1\">Math</span>.<span class=\"me1\">Sqrt</span> <span class=\"nu0\">81.0</span><span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> it\u00a0: <span class=\"kw4\">float</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3.0</span></pre>"}, {"lang": "Factor", "loc": 14, "block": "<pre class=\"text highlighted_source\">USING: io\u00a0;<br/>IN: rosetacode<br/>: argument-function1 ( -- ) \"Hello World!\" print\u00a0;<br/>: argument-function2 ( -- ) \"Goodbye World!\" print\u00a0;<br/>\u00a0<br/>! normal words have to know the stack effect of the input parameters they execute<br/>: calling-function1 ( another-function -- ) execute( -- )\u00a0;<br/>\u00a0<br/>! unlike normal words, inline words do not have to know the stack effect.<br/>: calling-function2 ( another-function -- ) execute\u00a0; inline<br/>\u00a0<br/>! Stack effect has to be written for runtime computed values\u00a0:<br/>: calling-function3 ( bool -- ) \\ argument-function1 \\ argument-function2\u00a0? execute( -- )\u00a0;<br/>\u00a0</pre>"}, {"lang": "FALSE", "loc": 5, "block": "<pre class=\"text highlighted_source\">[f:[$0&gt;][@@\\f;!\\1-]#%]r:   { reduce n stack items using the given basis and binary function }<br/>\u00a0<br/>1 2 3 4  0 4[+]r;!.\" \" { 10 }<br/>1 2 3 4  1 4[*]r;!.\" \" { 24 }<br/>1 2 3 4  0 4[$*+]r;!.  { 30 }</pre>"}, {"lang": "Fantom", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Main<br/>{<br/>  // apply given function to two arguments<br/>  static Int performOp (Int arg1, Int arg2, |Int, Int -&gt; Int| fn)<br/>  {<br/>    fn (arg1, arg2)<br/>  }<br/>\u00a0<br/>  public static Void main ()<br/>  {<br/>    echo (performOp (2, 5, |Int a, Int b -&gt; Int| { a + b }))<br/>    echo (performOp (2, 5, |Int a, Int b -&gt; Int| { a * b }))<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "F\u014drmul\u00e6", "loc": 9, "block": "<pre class=\"text highlighted_source\">: square  dup *\u00a0;<br/>: cube  dup dup * *\u00a0;<br/>: map. ( xt addr len -- )<br/>  0 do  2dup i cells + @ swap execute .  loop 2drop\u00a0;<br/>\u00a0<br/>create array 1 , 2 , 3 , 4 , 5 ,<br/>' square array 5 map. cr   \\ 1 4 9 16 25<br/>' cube   array 5 map. cr   \\ 1 8 27 64 125<br/>:noname 2* 1+\u00a0; array 5 map. cr   \\ 3 5 7 9 11</pre>"}, {"lang": "Forth", "loc": 9, "block": "<pre class=\"text highlighted_source\">: square  dup *\u00a0;<br/>: cube  dup dup * *\u00a0;<br/>: map. ( xt addr len -- )<br/>  0 do  2dup i cells + @ swap execute .  loop 2drop\u00a0;<br/>\u00a0<br/>create array 1 , 2 , 3 , 4 , 5 ,<br/>' square array 5 map. cr   \\ 1 4 9 16 25<br/>' cube   array 5 map. cr   \\ 1 8 27 64 125<br/>:noname 2* 1+\u00a0; array 5 map. cr   \\ 3 5 7 9 11</pre>"}, {"lang": "Fortran", "loc": 7, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">FUNCTION</span> FUNC3<span class=\"br0\">(</span>FUNC1, FUNC2, x, y<span class=\"br0\">)</span><br/>  <span class=\"kw3\">REAL</span>, <span class=\"kw3\">EXTERNAL</span> <span class=\"sy0\">::</span> <span class=\"me2\">FUNC1</span>, FUNC2 <br/>  <span class=\"kw3\">REAL</span> <span class=\"sy0\">::</span> <span class=\"me2\">FUNC3</span><br/>  <span class=\"kw3\">REAL</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span>, y<br/>\u00a0<br/>  FUNC3 <span class=\"sy0\">=</span> FUNC1<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">*</span> FUNC2<span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span> FUNC3</pre>"}, {"lang": "FreeBASIC", "loc": 23, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> square<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>  <br/>  <span class=\"kw1\">Return</span> n * n<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> cube<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">Return</span> n * n * n<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> doCalcs<span class=\"br0\">(</span>from <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, upTo <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span>, title <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>, func <span class=\"kw1\">As</span> <span class=\"kw1\">Function</span><span class=\"br0\">(</span><span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Print</span> title; <span class=\"st0\">\" -&gt; \"</span>;<br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = from <span class=\"kw1\">To</span> upTo<br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"#####\"</span>; func<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Print</span>  <br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>doCalcs <span class=\"nu0\">1</span>, <span class=\"nu0\">10</span>, <span class=\"st0\">\"Squares\"</span>, @square<br/>doCalcs <span class=\"nu0\">1</span>, <span class=\"nu0\">10</span>, <span class=\"st0\">\"Cubes  \"</span>, @cube<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>cmpFunc = {|a,b| length[a] &lt;=&gt; length[b]}<br/>\u00a0<br/>a = [\"tree\", \"apple\", \"bee\", \"monkey\", \"z\"]<br/>sort[a, cmpFunc]<br/>\u00a0</pre>"}, {"lang": "FutureBasic", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>dim as pointer functionOneAddress<br/>\u00a0<br/>def fn FunctionOne( x as long, y as long ) as long = (x + y) ^ 2<br/>functionOneAddress = @fn FunctionOne<br/>\u00a0<br/>def fn FunctionTwo( x as long, y as long ) using functionOneAddress<br/>\u00a0<br/>print fn FunctionTwo( 12, 12 )<br/>\u00a0</pre>"}, {"lang": "GAP", "loc": 6, "block": "<pre class=\"text highlighted_source\">Eval\u00a0:= function(f, x)<br/>  return f(x);<br/>end;<br/>\u00a0<br/>Eval(x -&gt; x^3, 7);<br/># 343</pre>"}, {"lang": "Go", "loc": 6, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> func1<span class=\"sy1\">(</span>f <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> f<span class=\"sy1\">(</span><span class=\"st0\">\"a string\"</span><span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> func2<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"func2 called with \"</span> <span class=\"sy3\">+</span> s <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span> fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>func1<span class=\"sy1\">(</span>func2<span class=\"sy1\">))</span> <span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 4, "block": "<pre class=\"groovy highlighted_source\">first <span class=\"sy0\">=</span> <span class=\"br0\">{</span> func <span class=\"sy0\">-&gt;</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>second <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"second\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/>first<span class=\"br0\">(</span>second<span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 4, "block": "<pre class=\"haskell highlighted_source\">func1 f <span class=\"sy0\">=</span> f <span class=\"st0\">\"a string\"</span><br/>func2 s <span class=\"sy0\">=</span> <span class=\"st0\">\"func2 called with \"</span> <span class=\"sy0\">++</span> s<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> func1 func2</pre>"}, {"lang": "Icon and Unicon", "loc": 13, "block": "<pre class=\"icon highlighted_source\"> <span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">local</span> lst<br/>   lst <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">20</span><span class=\"sy1\">,</span> <span class=\"nu0\">30</span><span class=\"sy1\">,</span> <span class=\"nu0\">40</span><span class=\"br0\">]</span><br/>   myfun<span class=\"br0\">(</span>callback<span class=\"sy1\">,</span> lst<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> myfun<span class=\"br0\">(</span>fun<span class=\"sy1\">,</span> lst<span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> fun<span class=\"br0\">(</span><span class=\"sy1\">!</span>lst<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> callback<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"-&gt;\"</span><span class=\"sy1\">,</span> arg<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Inform 6", "loc": 11, "block": "<pre class=\"text highlighted_source\">[ func;<br/>  print \"Hello^\";<br/>];<br/>\u00a0<br/>[ call_func x;<br/>  x();<br/>];<br/>\u00a0<br/>[ Main;<br/>  call_func(func);<br/>];</pre>"}, {"lang": "Inform 7", "loc": 15, "block": "<pre class=\"text highlighted_source\">Higher Order Functions is a room.<br/>\u00a0<br/>To decide which number is (N - number) added to (M - number) (this is addition):<br/>\tdecide on N + M.<br/>\u00a0<br/>To decide which number is multiply (N - number) by (M - number) (this is multiplication):<br/>\tdecide on N * M.<br/>\u00a0<br/>To demonstrate (P - phrase (number, number) -&gt; number) as (title - text):<br/>\tsay \"[title]: [P applied to 12 and 34].\"<br/>\u00a0<br/>When play begins:<br/>\tdemonstrate addition as \"Add\";<br/>\tdemonstrate multiplication as \"Mul\";<br/>\tend the story.</pre>"}, {"lang": "J", "loc": 31, "block": "<pre class=\"j highlighted_source\">   + / <span class=\"nu0\">3</span> <span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"nu0\">9</span>   <span class=\"co1\">NB. sum</span><br/><span class=\"nu0\">23</span><br/>   &gt;./ <span class=\"nu0\">3</span> <span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"nu0\">9</span>   <span class=\"co1\">NB. max</span><br/><span class=\"nu0\">9</span><br/>   *./ <span class=\"nu0\">3</span> <span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"nu0\">9</span>   <span class=\"co1\">NB. lcm</span><br/><span class=\"nu0\">180</span><br/>\u00a0<br/>   +/\\ <span class=\"nu0\">3</span> <span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"nu0\">9</span>   <span class=\"co1\">NB. sum prefix (partial sums)</span><br/><span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">14</span> <span class=\"nu0\">23</span><br/>\u00a0<br/>   +/\\. <span class=\"nu0\">3</span> <span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"nu0\">9</span>  <span class=\"co1\">NB. sum suffix</span><br/><span class=\"nu0\">23</span> <span class=\"nu0\">20</span> <span class=\"nu0\">19</span> <span class=\"nu0\">15</span> <span class=\"nu0\">14</span> <span class=\"nu0\">9</span><br/>\u00a0<br/>   <span class=\"nu0\">2</span>&amp;% <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span>         <span class=\"co1\">NB. divide 2 by</span><br/><span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0.666667</span><br/>\u00a0<br/>  \u00a0%&amp;<span class=\"nu0\">2</span> <span class=\"sy0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"sy0\">)</span>       <span class=\"co1\">NB. divide by 2 (need parenthesis to break up list formation)</span><br/><span class=\"nu0\">0.5</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1.5</span><br/>   -: <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span>          <span class=\"co1\">NB. but divide by 2 happens a lot so it's a primitive</span><br/><span class=\"nu0\">0.5</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1.5</span><br/>\u00a0<br/>   f=: -:@<span class=\"sy0\">(</span>+ <span class=\"nu0\">2</span>&amp;%<span class=\"sy0\">)</span>    <span class=\"co1\">NB. one Newton iteration</span><br/>   f <span class=\"nu0\">1</span><br/><span class=\"nu0\">1.5</span><br/>   f f <span class=\"nu0\">1</span><br/><span class=\"nu0\">1.41667</span><br/>\u00a0<br/>   f^:<span class=\"sy0\">(</span>i.<span class=\"nu0\">5</span><span class=\"sy0\">)</span> <span class=\"nu0\">1</span>        <span class=\"co1\">NB. first 5 Newton iterations</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">1.5</span> <span class=\"nu0\">1.41667</span> <span class=\"nu0\">1.41422</span> <span class=\"nu0\">1.41421</span><br/>   f^:<span class=\"sy0\">(</span>i.<span class=\"nu0\">5</span><span class=\"sy0\">)</span> <span class=\"nu0\">1x</span>       <span class=\"co1\">NB. rational approximations to sqrt 2</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">3r2</span> <span class=\"nu0\">17r12</span> <span class=\"nu0\">577r408</span> <span class=\"nu0\">665857r470832</span></pre>"}, {"lang": "Java", "loc": 26, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> NewClass <span class=\"br0\">{</span><br/>\u00a0<br/>   <span class=\"kw1\">public</span> NewClass<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       first<span class=\"br0\">(</span><span class=\"kw1\">new</span> AnEventOrCallback<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>           <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> call<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>               second<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>           <span class=\"br0\">}</span><br/>       <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> first<span class=\"br0\">(</span>AnEventOrCallback obj<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       obj.<span class=\"me1\">call</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> second<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Second\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       <span class=\"kw1\">new</span> NewClass<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">interface</span> AnEventOrCallback <span class=\"br0\">{</span><br/>   <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> call<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 10, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> first <span class=\"br0\">(</span>func<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> func<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> second <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"st0\">\"second\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> result <span class=\"sy0\">=</span> first<span class=\"br0\">(</span>second<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>result <span class=\"sy0\">=</span> first<span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"third\"</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Joy", "loc": 1, "block": "<pre class=\"text highlighted_source\">DEFINE first == *.</pre>"}, {"lang": "jq", "loc": 9, "block": "<pre class=\"text highlighted_source\">def foo( filter ):<br/>  (\"world\" | filter) as $str<br/>  | \"hello \\($str)\"\u00a0;<br/>\u00a0<br/># blue is defined here as a filter that adds blue to its input:<br/>def blue: \"blue \\(.)\";<br/>\u00a0<br/>foo( blue ) # prints \"hello blue world\"<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function foo(x)<br/>  str = x(\"world\")<br/>  println(\"hello $(str)!\")<br/>end<br/>foo(y -&gt; \"blue $y\") # prints \"hello blue world\"<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 7, "block": "<pre class=\"scala highlighted_source\">fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> list <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">2.0</span>, <span class=\"nu0\">3.0</span>, <span class=\"nu0\">4.0</span>, <span class=\"nu0\">5.0</span>, <span class=\"nu0\">6.0</span>, <span class=\"nu0\">7.0</span>, <span class=\"nu0\">8.0</span>, <span class=\"nu0\">9.0</span>, <span class=\"nu0\">10.0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> list.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span> x -<span class=\"sy0\">&gt;</span> x + <span class=\"nu0\">2</span> <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> h <span class=\"sy0\">=</span> list.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span> x -<span class=\"sy0\">&gt;</span> x <span class=\"sy0\">*</span> x <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g <span class=\"sy0\">=</span> list.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span> x -<span class=\"sy0\">&gt;</span> x <span class=\"sy0\">*</span> x <span class=\"sy0\">*</span> x <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">average</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"A =\u00a0%f  G =\u00a0%f  H =\u00a0%f\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>a, g, h<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lingo", "loc": 17, "block": "<pre class=\"text highlighted_source\">-- in some movie script<br/>----------------------------------------<br/>-- Runs provided function (of some object) on all elements of the provided list, returns results as new list<br/>-- @param {list} aList<br/>-- @param {symbol} cbFunc<br/>-- @param {object} [cbObj=_movie]<br/>-- @return {list}<br/>----------------------------------------<br/>on map (aList, cbFunc, cbObj)<br/>  if voidP(cbObj) then cbObj = _movie<br/>  res = []<br/>  cnt = aList.count<br/>  repeat with i = 1 to cnt<br/>    res[i] = call(cbFunc, cbObj, aList[i])<br/>  end repeat<br/>  return res<br/>end</pre>"}, {"lang": "Logo", "loc": 8, "block": "<pre class=\"text highlighted_source\">to printstuff<br/>  print \"stuff<br/>end<br/>to runstuff\u00a0:proc<br/>  run\u00a0:proc<br/>end<br/>runstuff \"printstuff   \u00a0; stuff<br/>runstuff [print [also stuff]] \u00a0; also stuff</pre>"}, {"lang": "Lily", "loc": 26, "block": "<pre class=\"text highlighted_source\">define square(x: Integer): Integer<br/>{<br/>    return x * x<br/>}<br/>\u00a0<br/>var l = [1, 2, 3] # Inferred type: List[Integer].<br/>\u00a0<br/># Transform using a user-defined function.<br/>print(l.map(square)) # [1, 4, 9]<br/>\u00a0<br/># Using a built-in method this time.<br/>print(l.map(Integer.to_s)) # [\"1\", \"2\", \"3\"]<br/>\u00a0<br/># Using a lambda (with the type of 'x' properly inferred).<br/>print(l.map{|x| (x + 1).to_s()}) # [\"2\", \"3\", \"4\"]<br/>\u00a0<br/># In reverse order using F#-styled pipes.<br/>Boolean.to_i |&gt; [true, false].map |&gt; print<br/>\u00a0<br/>define apply[A, B](value: A, f: Function(A =&gt; B)): B<br/>{<br/>    return f(value)<br/>}<br/>\u00a0<br/># Calling user-defined transformation.<br/>print(apply(\"123\", String.parse_i)) # Some(123)</pre>"}, {"lang": "Lua", "loc": 3, "block": "<pre class=\"lua highlighted_source\">a <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/>b <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span> r<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>b<span class=\"br0\">(</span>a<span class=\"br0\">)</span></pre>"}, {"lang": "Luck", "loc": 5, "block": "<pre class=\"text highlighted_source\">function lambda_true(x: 'a)(y: 'a): 'a = x;;<br/>function lambda_false(x: 'a)(y: 'a): 'a = y;;<br/>function lambda_if(c:'a -&gt; 'a -&gt; 'a )(t: 'a)(f: 'a): 'a = c(t)(f);;<br/>\u00a0<br/>print( lambda_if(lambda_true)(\"condition was true\")(\"condition was false\") );;</pre>"}, {"lang": "M2000 Interpreter", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Function Foo (x) {<br/>      =x**2<br/>}<br/>Function Bar(&amp;f(), k) {<br/>      =f(k)<br/>}<br/>Print Bar(&amp;foo(), 20)=400<br/>Group K {<br/>      Z=10<br/>      Function MulZ(x) {<br/>            =.Z*x<br/>            .Z++<br/>      }<br/>}<br/>Print Bar(&amp;K.MulZ(), 20)=200<br/>Print K.Z=11<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 4, "block": "<pre class=\"text highlighted_source\">PassFunc[f_, g_, h_, x_]\u00a0:= f[g[x]*h[x]]<br/>PassFunc[Tan, Cos, Sin, x]<br/>% /. x -&gt; 0.12<br/>PassFunc[Tan, Cos, Sin, 0.12]</pre>"}, {"lang": "MATLAB / Octave", "loc": 18, "block": "<pre class=\"matlab highlighted_source\">   <a class=\"__cf_email__\" data-cfemail=\"9adcaba7da\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sin.html\"><span class=\"kw2\">sin</span></a>;\t<span class=\"co1\">% F1 refers to function sin()</span><br/>   <a class=\"__cf_email__\" data-cfemail=\"4204707f02\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/cos.html\"><span class=\"kw2\">cos</span></a>;\t<span class=\"co1\">% F2 refers to function cos()</span><br/>\u00a0<br/>   <span class=\"co1\">% varios ways to call the refered function \t</span><br/>   F1<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pi.html\"><span class=\"kw2\">pi</span></a>/<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>   F2<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pi.html\"><span class=\"kw2\">pi</span></a>/<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>   <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/feval.html\"><span class=\"kw2\">feval</span></a><span class=\"br0\">(</span>@<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sin.html\"><span class=\"kw2\">sin</span></a>,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pi.html\"><span class=\"kw2\">pi</span></a>/<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>   <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/feval.html\"><span class=\"kw2\">feval</span></a><span class=\"br0\">(</span>@<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/cos.html\"><span class=\"kw2\">cos</span></a>,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pi.html\"><span class=\"kw2\">pi</span></a>/<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>   <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/feval.html\"><span class=\"kw2\">feval</span></a><span class=\"br0\">(</span>F1,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pi.html\"><span class=\"kw2\">pi</span></a>/<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>   <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/feval.html\"><span class=\"kw2\">feval</span></a><span class=\"br0\">(</span>F2,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pi.html\"><span class=\"kw2\">pi</span></a>/<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"co1\">% named functions, stored as strings\t</span><br/>   <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/feval.html\"><span class=\"kw2\">feval</span></a><span class=\"br0\">(</span><span class=\"co2\">'sin'</span>,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pi.html\"><span class=\"kw2\">pi</span></a>/<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>   <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/feval.html\"><span class=\"kw2\">feval</span></a><span class=\"br0\">(</span><span class=\"co2\">'cos'</span>,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pi.html\"><span class=\"kw2\">pi</span></a>/<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>   F3 = <span class=\"co2\">'sin'</span>;<br/>   F4 = <span class=\"co2\">'cos'</span>;<br/>   <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/feval.html\"><span class=\"kw2\">feval</span></a><span class=\"br0\">(</span>F3,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pi.html\"><span class=\"kw2\">pi</span></a>/<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>   <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/feval.html\"><span class=\"kw2\">feval</span></a><span class=\"br0\">(</span>F4,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pi.html\"><span class=\"kw2\">pi</span></a>/<span class=\"nu0\">4</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maxima", "loc": 6, "block": "<pre class=\"text highlighted_source\">callee(n)\u00a0:= (print(sconcat(\"called with \", n)), n + 1)$<br/>caller(f, n)\u00a0:= sum(f(i), i, 1, n)$<br/>caller(callee, 3);<br/>\"called with 1\"<br/>\"called with 2\"<br/>\"called with 3\"</pre>"}, {"lang": "MAXScript", "loc": 11, "block": "<pre class=\"text highlighted_source\">fn second =<br/>(<br/>    print \"Second\"<br/>)<br/>\u00a0<br/>fn first func =<br/>(<br/>    func()<br/>)<br/>\u00a0<br/>first second</pre>"}, {"lang": "Metafont", "loc": 5, "block": "<pre class=\"text highlighted_source\">def calcit(expr v, s) = scantokens(s &amp; decimal v) enddef;<br/>\u00a0<br/>t\u00a0:= calcit(100.4, \"sind\");<br/>show t;<br/>end</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 3, "block": "<pre class=\"text highlighted_source\">6\t\u041f\u041f\t04<br/>\u041f7\t\u041a\u041f\u041f7\t\u0412/\u041e<br/>1\t\u0412/\u041e</pre>"}, {"lang": "Modula-3", "loc": 19, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> Proc <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span> Proc <span class=\"sy0\">=</span> <span class=\"kw1\">PROCEDURE</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Second<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">BEGIN</span><br/>    IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"Second procedure.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span> Second;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> First<span class=\"br0\">(</span>proc<span class=\"sy0\">:</span> Proc<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">BEGIN</span><br/>    proc<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span> First;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  First<span class=\"br0\">(</span>Second<span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> Proc.</pre>"}, {"lang": "Morfa", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>func g(a: int, b: int, f: func(int,int): int): int<br/>{<br/>    return f(a, b);<br/>}<br/>\u00a0<br/>import morfa.base;<br/>\u00a0<br/>func main(): void<br/>{<br/>    println(\"Add: \", g(2, 3, func(a: int, b: int) { return a + b; }));<br/>    println(\"Multiply: \", g(2, 3, func(a: int, b: int) { return a * b; }));<br/>}<br/>\u00a0</pre>"}, {"lang": "Nemerle", "loc": 1, "block": "<pre class=\"text highlighted_source\">Twice[T] (f\u00a0: T -&gt; T, x\u00a0: T)\u00a0: T { f(f(x)) }</pre>"}, {"lang": "NewLISP", "loc": 7, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>my<span class=\"sy1\">-</span>multiply a b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy1\">*</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#lambda\"><span class=\"kw1\">lambda</span></a> <span class=\"br0\">(</span>a b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy1\">*</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>call<span class=\"sy1\">-</span>it f x y<span class=\"br0\">)</span> <span class=\"br0\">(</span>f x y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#lambda\"><span class=\"kw1\">lambda</span></a> <span class=\"br0\">(</span>f x y<span class=\"br0\">)</span> <span class=\"br0\">(</span>f x y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy1\">&gt;</span> <span class=\"br0\">(</span>call<span class=\"sy1\">-</span>it my<span class=\"sy1\">-</span>multiply <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"nu0\">6</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 7, "block": "<pre class=\"text highlighted_source\">proc first(fn: proc): auto =<br/>  return fn()<br/>\u00a0<br/>proc second(): string =<br/>  return \"second\"<br/>\u00a0<br/>echo first(second)</pre>"}, {"lang": "Oberon-2", "loc": 36, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> HOFuns;<br/><span class=\"kw1\">IMPORT</span><br/>  NPCT<span class=\"sy0\">:</span>Tools<span class=\"sy0\">,</span><br/>  Out;<br/><span class=\"kw1\">TYPE</span><br/>  Formatter <span class=\"sy0\">=</span> <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> STRING; len<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> STRING;<br/><span class=\"kw1\">VAR</span><br/>  words<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">8</span> <span class=\"kw1\">OF</span> STRING;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> PrintWords<span class=\"br0\">(</span>w<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> STRING; format<span class=\"sy0\">:</span> Formatter<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">VAR</span><br/>    i<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>i &lt; <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>words<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>      Out.<span class=\"me1\">Object</span><span class=\"br0\">(</span>format<span class=\"br0\">(</span>words<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>    Out.<span class=\"me1\">Ln</span><br/>  <span class=\"kw1\">END</span> PrintWords;<br/><span class=\"kw1\">BEGIN</span><br/>  words<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"Al-Andalus\"</span>;<br/>  words<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"contributed\"</span>;<br/>  words<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"significantly\"</span>;<br/>  words<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"to\"</span>;<br/>  words<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"the\"</span>;<br/>  words<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"field\"</span>;<br/>  words<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"of\"</span>;<br/>  words<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"medicine\"</span>;<br/>\u00a0<br/>  PrintWords<span class=\"br0\">(</span>words<span class=\"sy0\">,</span>Tools.<span class=\"me1\">AdjustLeft</span><span class=\"br0\">)</span>;<br/>  PrintWords<span class=\"br0\">(</span>words<span class=\"sy0\">,</span>Tools.<span class=\"me1\">AdjustCenter</span><span class=\"br0\">)</span>;<br/>  PrintWords<span class=\"br0\">(</span>words<span class=\"sy0\">,</span>Tools.<span class=\"me1\">AdjustRight</span><span class=\"br0\">)</span><br/><span class=\"kw1\">END</span> HOFuns.<br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 18, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> HighOrder <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      f <span class=\"sy0\">:=</span> GetSize<span class=\"br0\">(</span><span class=\"kw2\">String</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span><span class=\"sy0\">;</span><br/>      Print<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> GetSize<span class=\"br0\">(</span>s <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Print<span class=\"br0\">(</span>func <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw2\">String</span><span class=\"br0\">)</span>~<span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      func<span class=\"br0\">(</span><span class=\"st0\">\"Hello World!\"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 8, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> func1 f <span class=\"sy0\">=</span> f <span class=\"st0\">\"a string\"</span><span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> func1 <span class=\"sy0\">:</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>a<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"sy0\">'</span>a <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>fun<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">#</span> <span class=\"kw1\">let</span> func2 s <span class=\"sy0\">=</span> <span class=\"st0\">\"func2 called with \"</span> <span class=\"sy0\">^</span> s<span class=\"sy0\">;;</span><br/><span class=\"kw1\">val</span> func2 <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>fun<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">#</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"br0\">(</span>func1 func2<span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/>func2 called <span class=\"kw1\">with</span> a <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEunit\"><span class=\"kw4\">unit</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Octave", "loc": 6, "block": "<pre class=\"octave highlighted_source\"><span class=\"kw4\">function</span> r <span class=\"sy3\">=</span> computeit<span class=\"br0\">(</span>f<span class=\"sy5\">,</span> g<span class=\"sy5\">,</span> v<span class=\"br0\">)</span><br/>  r <span class=\"sy3\">=</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/>computeit<span class=\"br0\">(</span><span class=\"co7\">@exp</span><span class=\"sy5\">,</span> <span class=\"co7\">@sin</span><span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/pi.html\"><span class=\"kw10\">pi</span></a><span class=\"sy1\">/</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>computeit<span class=\"br0\">(</span><span class=\"co7\">@log</span><span class=\"sy5\">,</span> <span class=\"co7\">@cos</span><span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/pi.html\"><span class=\"kw10\">pi</span></a><span class=\"sy1\">/</span><span class=\"nu0\">6</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">[1, 2, 3, 4, 5 ] map(#1+)</pre>"}, {"lang": "ooRexx", "loc": 56, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"kw1\">say</span> callit<span class=\"br0\">(</span><span class=\"sy0\">.</span>routines~fib, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> callit<span class=\"br0\">(</span><span class=\"sy0\">.</span>routines~fact, <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> callit<span class=\"br0\">(</span><span class=\"sy0\">.</span>routines~square, <span class=\"nu0\">13</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> callit<span class=\"br0\">(</span><span class=\"sy0\">.</span>routines~cube, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> callit<span class=\"br0\">(</span><span class=\"sy0\">.</span>routines~<span class=\"kw6\">reverse</span>, <span class=\"nu0\">721</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> callit<span class=\"br0\">(</span><span class=\"sy0\">.</span>routines~sumit, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> callit<span class=\"br0\">(</span><span class=\"sy0\">.</span>routines~sumit, <span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- call the provided routine object with the provided variable number of arguments</span><br/>::routine callit<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> function<br/>  args = <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"st0\">'a'</span><span class=\"br0\">)</span>   <span class=\"co1\">-- get all arguments after the first to pass along</span><br/>  <span class=\"kw1\">return</span> function~callWith<span class=\"br0\">(</span>args<span class=\"br0\">)</span>  <span class=\"co1\">-- and pass along the call</span><br/>\u00a0<br/>::routine cube<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> n<br/>  <span class=\"kw1\">return</span> n<span class=\"sy0\">**</span><span class=\"nu0\">3</span><br/>\u00a0<br/>::routine square<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> n<br/>  <span class=\"kw1\">return</span> n<span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/>\u00a0<br/>::routine <span class=\"kw6\">reverse</span><br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> n<br/>  <span class=\"kw1\">return</span> <span class=\"kw6\">reverse</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>::routine fact<br/>   <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> n<br/>   accum = <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">loop</span> j = <span class=\"nu0\">2</span> <span class=\"kw2\">to</span> n<br/>     accum = accum <span class=\"sy0\">*</span> j<br/>   <span class=\"kw3\">end</span><br/>   <span class=\"kw1\">return</span> accum<br/>\u00a0<br/>::routine sumit<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> n<br/>  accum = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">do</span> i <span class=\"kw2\">over</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"st0\">'a'</span><span class=\"br0\">)</span>  <span class=\"co1\">-- iterate over the array of args</span><br/>     accum += i<br/>  <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> accum<br/>\u00a0<br/>::routine fib<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> n<br/>  <span class=\"kw1\">if</span> n == <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>     <span class=\"kw1\">return</span> n<br/>  <span class=\"kw1\">if</span> n == <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>     <span class=\"kw1\">return</span> n<br/>  last = <span class=\"nu0\">0</span><br/>  next = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">loop</span> j = <span class=\"nu0\">2</span> <span class=\"kw2\">to</span> n;<br/>    current = last + next<br/>    last = next<br/>    next = current<br/>  <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span> current</pre>"}, {"lang": "Order", "loc": 30, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;order/interpreter.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define ORDER_PP_DEF_8func1 ORDER_PP_FN ( \\<br/>8fn(8F, \\<br/>    8ap(8F, 8(\"a string\")) ))</span><br/>\u00a0<br/><span class=\"co2\">#define ORDER_PP_DEF_8func2 ORDER_PP_FN ( \\<br/>8fn(8S, \\<br/>    8adjoin(8(\"func2 called with \"), 8S ) ))</span><br/>\u00a0<br/>ORDER_PP<span class=\"br0\">(</span><br/>  8func1<span class=\"br0\">(</span>8func2<span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/><span class=\"co1\">// -&gt; \"func2 called with \"\"a string\"</span><br/>\u00a0<br/><span class=\"co2\">#define ORDER_PP_DEF_8func3 ORDER_PP_FN ( \\<br/>8fn(8F, \\<br/>    8ap(8F, 1, 2) ))</span><br/>\u00a0<br/>ORDER_PP<span class=\"br0\">(</span><br/>  8func3<span class=\"br0\">(</span>8plus<span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/><span class=\"co1\">// -&gt; 3</span><br/>\u00a0<br/>ORDER_PP<span class=\"br0\">(</span><br/>  8ap<span class=\"br0\">(</span> 8fn<span class=\"br0\">(</span>8X<span class=\"sy0\">,</span> 8Y<span class=\"sy0\">,</span> 8mul<span class=\"br0\">(</span>8add<span class=\"br0\">(</span>8X<span class=\"sy0\">,</span> 8Y<span class=\"br0\">)</span><span class=\"sy0\">,</span> 8sub<span class=\"br0\">(</span>8X<span class=\"sy0\">,</span> 8Y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/><span class=\"co1\">// -&gt; 16</span><br/>\u00a0</pre>"}, {"lang": "OxygenBasic", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>'FUNCTION TO BE PASSED<br/>'=====================<br/>\u00a0<br/>function f(double d,e) as double<br/>  return (d+e)*2<br/>end function<br/>\u00a0<br/>\u00a0<br/>'FUNCTION TAKING A FUNCTION AS AN ARGUMENT<br/>'=========================================<br/>\u00a0<br/>function g(sys p) as string<br/>\u00a0<br/>  declare function x(double d,e) as double at p<br/>\u00a0<br/>  return x(10,11)<br/>\u00a0<br/>end function<br/>\u00a0<br/>\u00a0<br/>'TEST: PASSING ADDRESS OF FUNCTION f<br/>'===================================<br/>\u00a0<br/>'the name 'f' is combined with the prototype signature '#double#double'<br/>'@' signifies the address of the function is being passed<br/>\u00a0<br/>print g(@f#double#double) 'result '42'<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 6, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Twice</span> Function X<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Function <span class=\"br0\">{</span>Function X<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>Twice Sqrt 81<span class=\"sy0\">.</span>0<span class=\"br0\">}</span><span class=\"br0\">}</span>  <span class=\"co1\">%% prints 3.0</span></pre>"}, {"lang": "PARI/GP", "loc": 19, "block": "<pre class=\"parigp highlighted_source\">secant_root<span class=\"br0\">(</span>ff<span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>\te <span class=\"sy0\">=</span> eps<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu1\">2</span><span class=\"sy0\">;</span><br/>\taval<span class=\"sy0\">=</span>ff<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tbval<span class=\"sy0\">=</span>ff<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">abs</span><span class=\"br0\">(</span>bval<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> e<span class=\"sy0\">,</span><br/>\t\toldb <span class=\"sy0\">=</span> b<span class=\"sy0\">;</span><br/>\t\tb <span class=\"sy0\">=</span> b <span class=\"sy0\">-</span> <span class=\"br0\">(</span>b <span class=\"sy0\">-</span> a<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>bval <span class=\"sy0\">-</span> aval<span class=\"br0\">)</span> <span class=\"sy0\">*</span> bval<span class=\"sy0\">;</span><br/>\t\taval <span class=\"sy0\">=</span> bval<span class=\"sy0\">;</span><br/>\t\tbval <span class=\"sy0\">=</span> ff<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ta <span class=\"sy0\">=</span> oldb<br/>\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tb<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">addhelp</span><span class=\"br0\">(</span>secant_root<span class=\"sy0\">,</span> <span class=\"st0\">\"secant_root(ff,a,b): Finds a root of ff between a and b using the secant method.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>eps<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">precision</span><span class=\"br0\">(</span><span class=\"nu1\">2</span>. <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"nu1\">32</span> <span class=\"sy0\">*</span> <span class=\"kw1\">ceil</span><span class=\"br0\">(</span><span class=\"kw1\">default</span><span class=\"br0\">(</span><span class=\"kw3\">realprecision</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu1\">38539962</span> <span class=\"sy0\">/</span> <span class=\"nu1\">371253907</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu1\">9</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">addhelp</span><span class=\"br0\">(</span>eps<span class=\"sy0\">,</span><span class=\"st0\">\"Returns machine epsilon for the current precision.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 15, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> example<span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> first<span class=\"br0\">(</span><span class=\"kw1\">function</span> f<span class=\"br0\">(</span>x<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">begin</span><br/>  first <span class=\"sy1\">:</span><span class=\"sy3\">=</span> f<span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">2.0</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> second<span class=\"br0\">(</span>x<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">begin</span><br/>  second <span class=\"sy1\">:</span><span class=\"sy3\">=</span> x<span class=\"sy3\">/</span><span class=\"nu0\">2.0</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/> <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>first<span class=\"br0\">(</span>second<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 27, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> another <span class=\"br0\">{</span><br/>    <span class=\"co1\"># take a function and a value</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$func</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$val</span>  <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\"># call the function with the value as argument</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$func</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"re0\">$val</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> reverser <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># pass named coderef</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> another <span class=\"re0\">\\&amp;reverser</span><span class=\"sy0\">,</span> <span class=\"st_h\">'data'</span><span class=\"sy0\">;</span><br/><span class=\"co1\"># pass anonymous coderef</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> another <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"st_h\">'data'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># if all you have is a string and you want to act on that,</span><br/><span class=\"co1\"># set up a dispatch table</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">%dispatch</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>    square <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    cube   <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">**</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>    rev    <span class=\"sy0\">=&gt;</span> <span class=\"re0\">\\&amp;reverser</span><span class=\"sy0\">,</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> another <span class=\"re0\">$dispatch</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">123</span> <span class=\"kw1\">for</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>square cube rev<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 17, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> twice<span class=\"br0\">(</span><span class=\"re0\">&amp;todo</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   todo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> todo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># declaring &amp;todo also defines bare function</span><br/><span class=\"br0\">}</span><br/>twice <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"Boing!\"</span> <span class=\"br0\">}</span><br/><span class=\"co1\"># output:</span><br/><span class=\"co1\"># Boing!</span><br/><span class=\"co1\"># Boing!</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> twice<span class=\"sy0\">-</span>with<span class=\"sy0\">-</span>param<span class=\"br0\">(</span><span class=\"re0\">&amp;todo</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    todo<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> todo<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>twice<span class=\"sy0\">-</span>with<span class=\"sy0\">-</span>param <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$time</span> <span class=\"br0\">{</span><br/>   <span class=\"kw3\">say</span> <span class=\"st0\">\"{$time+1}: Hello!\"</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># output:</span><br/><span class=\"co1\"># 1: Hello!</span><br/><span class=\"co1\"># 2: Hello!</span></pre>"}, {"lang": "Phix", "loc": 9, "block": "<pre class=\"text highlighted_source\">procedure use(integer fi, integer a, integer b)<br/>    print(1,call_func(fi,{a,b}))<br/>end procedure<br/>\u00a0<br/>function add(integer a, integer b)<br/>    return a + b<br/>end function<br/>\u00a0<br/>use(routine_id(\"add\"),23,45)</pre>"}, {"lang": "PHP", "loc": 9, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">function</span> first<span class=\"br0\">(</span><span class=\"re0\">$func</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"re0\">$func</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">function</span> second<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"st_h\">'second'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$result</span> <span class=\"sy0\">=</span> first<span class=\"br0\">(</span><span class=\"st_h\">'second'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 33, "block": "<pre class=\"text highlighted_source\">: (de first (Fun)<br/>   (Fun) )<br/>-&gt; first<br/>\u00a0<br/>: (de second ()<br/>   \"second\" )<br/>-&gt; second<br/>\u00a0<br/>: (first second)<br/>-&gt; \"second\"<br/>\u00a0<br/>: (de add (A B)<br/>   (+ A B) )<br/>-&gt; add<br/>\u00a0<br/>: (add 1 2)<br/>-&gt; 3<br/>\u00a0<br/>: (de call-it (Fun X Y)<br/>   (Fun X Y) )<br/>-&gt; call-it<br/>\u00a0<br/>: (call-it add 1 2)<br/>-&gt; 3<br/>\u00a0<br/>: (mapcar inc (1 2 3 4 5))<br/>-&gt; (2 3 4 5 6)<br/>\u00a0<br/>: (mapcar + (1 2 3) (4 5 6))<br/>-&gt; (5 7 9)<br/>\u00a0<br/>:  (mapcar add (1 2 3) (4 5 6))<br/>-&gt; (5 7 9)</pre>"}, {"lang": "PL/I", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>f: procedure (g) returns (float);<br/>   declare g entry (float);<br/>\u00a0<br/>   get (x);<br/>   put (g(x));<br/>end f;<br/>\u00a0<br/>   x = f(p); /* where \"p\" is the name of a function. */<br/>\u00a0</pre>"}, {"lang": "Pop11", "loc": 7, "block": "<pre class=\"text highlighted_source\">;;; Define a function<br/>define x_times_three_minus_1(x);<br/>  return(3*x-1);<br/>enddefine;<br/>\u00a0<br/>;;; Pass it as argument to built-in function map and print the result<br/>mapdata({0 1 2 3 4}, x_times_three_minus_1) =&gt;</pre>"}, {"lang": "PostScript", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>% operator example<br/>% 'ifelse' is passed a boolean and two procedures<br/>/a 5 def<br/>a 0 gt { (Hello!) } { (World?) } ifelse ==<br/>\u00a0<br/>% procedure example<br/>% 'bar' is loaded onto the stack and passed to 'foo'<br/>/foo { exec } def<br/>/bar { (Hello, world!) } def<br/>/bar load foo ==<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 8, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> f <span class=\"br0\">(</span><span class=\"re0\">$y</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span><br/>    <span class=\"re0\">$y</span><span class=\"sy0\">*</span><span class=\"re0\">$y</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">function</span> g <span class=\"br0\">(</span>$<span class=\"br0\">{</span><span class=\"kw3\">function</span>:f<span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span>f <span class=\"re0\">$y</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 6, "block": "<pre class=\"prolog highlighted_source\">\u00a0<br/>first<span class=\"br0\">(</span>Predicate<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">call</span></a><span class=\"br0\">(</span>Predicate<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>second<span class=\"br0\">(</span>Argument<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span>Argument<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"sy1\">:-</span>first<span class=\"br0\">(</span>second<span class=\"br0\">(</span><span class=\"st_h\">'Hello World!'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 12, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Prototype</span>.d func<span class=\"br0\">(</span><span class=\"sy0\">*</span>text$<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> NumberTwo<span class=\"br0\">(</span>arg$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Debug</span> arg$<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> NumberOne<span class=\"br0\">(</span><span class=\"sy0\">*</span>p, text$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> MyFunc.func<span class=\"sy0\">=*</span>p<br/>  MyFunc<span class=\"br0\">(</span>@text$<span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/>NumberOne<span class=\"br0\">(</span>@NumberTwo<span class=\"br0\">(</span><span class=\"br0\">)</span>,<span class=\"st0\">\"Hello Worldy!\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 7, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> first<span class=\"br0\">(</span>function<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> function<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> second<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"second\"</span><br/>\u00a0<br/>result <span class=\"sy0\">=</span> first<span class=\"br0\">(</span>second<span class=\"br0\">)</span></pre>"}, {"lang": "Q", "loc": 7, "block": "<pre class=\"q highlighted_source\">\u00a0<br/>q<span class=\"br0\">)</span>sayHi:<span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"st0\">\"Hello \"</span><span class=\"sy0\">,</span>x;<span class=\"br0\">}</span><br/>q<span class=\"br0\">)</span>callFuncWithParam:<span class=\"br0\">{</span>x<span class=\"br0\">[</span><span class=\"st0\">\"Peter\"</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>q<span class=\"br0\">)</span>callFuncWithParam sayHi<br/>Hello Peter<br/>q<span class=\"br0\">)</span>callFuncWithParam<span class=\"br0\">[</span>sayHi<span class=\"br0\">]</span><br/>Hello Peter</pre>"}, {"lang": "R", "loc": 6, "block": "<pre class=\"text highlighted_source\">f &lt;- function(f0) f0(pi) # calc. the function in pi<br/>tf &lt;- function(x) x^pi   # a func. just to test<br/>\u00a0<br/>print(f(sin))<br/>print(f(cos))<br/>print(f(tf))</pre>"}, {"lang": "Racket", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>  #lang racket/base<br/>  (define (add f g x)<br/>    (+ (f x) (g x)))<br/>  (add sin cos 10)<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 8, "block": "<pre class=\"text highlighted_source\">define doit use $v1<br/>   \"doit called with \" print $v1 print \"\\n\" print<br/>\u00a0<br/>define callit use $v2<br/>   \"callit called with \" print $v2 print \"\\n\" print<br/>   $v2 call<br/>\u00a0<br/>23.54 \"doit\" callit</pre>"}, {"lang": "REBOL", "loc": 30, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol [<br/>\tTitle: \"Function Argument\"<br/>\tURL: http://rosettacode.org/wiki/Function_as_an_Argument<br/>]</span><br/>\u00a0<br/>map: <span class=\"kw2\">func</span> <span class=\"br0\">[</span><br/>\t<span class=\"st0\">\"Apply function to contents of list, return new list.\"</span><br/>\tf <span class=\"br0\">[</span><span class=\"kw2\">function</span><span class=\"sy0\">!</span><span class=\"br0\">]</span> <span class=\"st0\">\"Function to apply to list.\"</span><br/>\tdata <span class=\"br0\">[</span><span class=\"kw1\">block!</span> <span class=\"kw1\">list!</span><span class=\"br0\">]</span> <span class=\"st0\">\"List to transform.\"</span><br/>\t<span class=\"sy0\">/</span>local result i<br/><span class=\"br0\">]</span><span class=\"br0\">[</span><br/>\tresult: <span class=\"kw3\">copy</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>  <span class=\"kw2\">repeat</span> i data <span class=\"br0\">[</span><span class=\"kw3\">append</span> result f i<span class=\"br0\">]</span>  result<span class=\"br0\">]</span><br/>\u00a0<br/>square: <span class=\"kw2\">func</span> <span class=\"br0\">[</span><br/>\t<span class=\"st0\">\"Calculate x^2.\"</span><br/>\tx <span class=\"br0\">[</span>number<span class=\"sy0\">!</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span><span class=\"br0\">[</span>x <span class=\"sy0\">*</span> x<span class=\"br0\">]</span><br/>\u00a0<br/>cube: <span class=\"kw2\">func</span> <span class=\"br0\">[</span><br/>\t<span class=\"st0\">\"Calculate x^3.\"</span><br/>\tx <span class=\"br0\">[</span>number<span class=\"sy0\">!</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span><span class=\"br0\">[</span>x <span class=\"sy0\">*</span> x <span class=\"sy0\">*</span> x<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; Testing:</span><br/>\u00a0<br/>x: <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span><span class=\"st0\">\"Data:   \"</span>  <span class=\"kw3\">mold</span> x<span class=\"br0\">]</span><br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span><span class=\"st0\">\"Squared:\"</span>  <span class=\"kw3\">mold</span> map\u00a0:square x<span class=\"br0\">]</span><br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span><span class=\"st0\">\"Cubed:  \"</span>  <span class=\"kw3\">mold</span> map\u00a0:cube x<span class=\"br0\">]</span><br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span><span class=\"st0\">\"Unnamed:\"</span>  <span class=\"kw3\">mold</span> map <span class=\"kw2\">func</span> <span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>i <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> + <span class=\"nu0\">1</span><span class=\"br0\">]</span> x<span class=\"br0\">]</span></pre>"}, {"lang": "Retro", "loc": 5, "block": "<pre class=\"text highlighted_source\">: disp ( nq- )<br/>  do putn\u00a0;<br/>\u00a0<br/>31 [ ( n-n )  100 * ] disp<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 12, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program demonstrates the  passing of a  name of a function  to another function. */</span><br/><span class=\"kw1\">call</span> function  <span class=\"st0\">'fact'</span>   ,   <span class=\"nu0\">6</span>;           <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>    <span class=\"st0\">'fact{'</span>$<span class=\"st0\">\"} = \"</span>, <span class=\"nu0\">30</span><span class=\"br0\">)</span>    <span class=\"kw4\">result</span><br/><span class=\"kw1\">call</span> function  <span class=\"st0\">'square'</span> ,  <span class=\"nu0\">13</span>;           <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>  <span class=\"st0\">'square{'</span>$<span class=\"st0\">\"} = \"</span>, <span class=\"nu0\">30</span><span class=\"br0\">)</span>    <span class=\"kw4\">result</span><br/><span class=\"kw1\">call</span> function  <span class=\"st0\">'cube'</span>   ,   <span class=\"nu0\">3</span>;           <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>    <span class=\"st0\">'cube{'</span>$<span class=\"st0\">\"} = \"</span>, <span class=\"nu0\">30</span><span class=\"br0\">)</span>    <span class=\"kw4\">result</span><br/><span class=\"kw1\">call</span> function  <span class=\"st0\">'reverse'</span>, <span class=\"nu0\">721</span>;           <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span> <span class=\"st0\">'reverse{'</span>$<span class=\"st0\">\"} = \"</span>, <span class=\"nu0\">30</span><span class=\"br0\">)</span>    <span class=\"kw4\">result</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>cube:     <span class=\"kw1\">return</span> $<span class=\"sy0\">**</span><span class=\"nu0\">3</span><br/>fact:     <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> $; \u00a0!=<span class=\"nu0\">1</span>;      <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> $;   \u00a0!=!<span class=\"sy0\">*</span>j;     <span class=\"kw3\">end</span>;         <span class=\"kw1\">return</span>\u00a0!<br/>function: <span class=\"kw1\">arg</span>\u00a0?<span class=\"sy0\">.</span>;   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> ,$;        <span class=\"kw1\">signal</span> <span class=\"kw2\">value</span> <span class=\"br0\">(</span>?<span class=\"sy0\">.</span><span class=\"br0\">)</span><br/><span class=\"kw6\">reverse</span>:  <span class=\"kw1\">return</span> <span class=\"st0\">'REVERSE'</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span><br/>square:   <span class=\"kw1\">return</span> $<span class=\"sy0\">**</span><span class=\"nu0\">2</span></pre>"}, {"lang": "Ring", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Higher-order functions<br/>\u00a0<br/>docalcs(1,10,\"squares\",:square)<br/>docalcs(1,10,\"cubes\",:cube)<br/>\u00a0<br/>func square(n)  <br/>        return n * n<br/>\u00a0<br/>func cube(n)<br/>        return n * n * n<br/>\u00a0<br/>func docalcs(from2,upto,title,func2)<br/>       see title + \" -&gt; \" + nl<br/>       for i = from2 to upto<br/>            x = call func2(i)<br/>            see x + nl<br/>       next<br/>       see nl <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 7, "block": "<pre class=\"ruby highlighted_source\">succ = <span class=\"kw3\">proc</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><br/><span class=\"kw1\">def</span> to2<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>f<span class=\"br0\">)</span><br/>  f<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>to2<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>succ<span class=\"br0\">)</span> <span class=\"co1\">#=&gt; 3</span><br/>to2<span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> x<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"co1\">#=&gt; 3</span></pre>"}, {"lang": "Rust", "loc": 12, "block": "<pre class=\"text highlighted_source\">fn execute_with_10&lt;F: Fn(u64) -&gt; u64&gt; (f: F) -&gt; u64 {<br/>\tf(10)<br/>}<br/>\u00a0<br/>fn square(n: u64) -&gt; u64 {<br/>\tn*n<br/>}<br/>\u00a0<br/>fn main() {<br/>\tprintln!(\"{}\", execute_with_10(|n| n*n )); // closure<br/>\tprintln!(\"{}\", execute_with_10(square));   // function<br/>}</pre>"}, {"lang": "Scala", "loc": 1, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> functionWithAFunctionArgument<span class=\"br0\">(</span>x <span class=\"sy0\">:</span> <span class=\"kw2\">int</span>, y <span class=\"sy0\">:</span> <span class=\"kw2\">int</span>, f <span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"kw2\">int</span>, <span class=\"kw2\">int</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">int</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 4, "block": "<pre class=\"scheme highlighted_source\"><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>func1 <span class=\"kw1\">f</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">f</span> <span class=\"st0\">\"a string\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>func2 <span class=\"kw1\">s</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"st0\">\"func2 called with \"</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">begin</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>func1 func2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>func2 called with a <span class=\"kw1\">string</span></pre>"}, {"lang": "Sidef", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">func first<span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw2\">return</span> f<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>func second <span class=\"br0\">{</span><br/>  <span class=\"kw2\">return</span> <span class=\"st0\">\"second\"</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>say first<span class=\"br0\">(</span>second<span class=\"br0\">)</span>;              <span class=\"co1\"># =&gt; \"second\"</span><br/>say first<span class=\"br0\">(</span>func <span class=\"br0\">{</span> <span class=\"st0\">\"third\"</span> <span class=\"br0\">}</span><span class=\"br0\">)</span>;    <span class=\"co1\"># =&gt; \"third\"</span></pre>"}, {"lang": "Slate", "loc": 2, "block": "<pre class=\"text highlighted_source\">define: #function -&gt; [|\u00a0:x | x * 3 - 1].<br/>#(1 1 2 3 5 8) collect: function.</pre>"}, {"lang": "Smalltalk", "loc": 3, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re6\">first</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">f</span> | f value <span class=\"br0\">]</span>.<br/><span class=\"re5\">second</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span> <span class=\"st0\">'second'</span> <span class=\"br0\">]</span>.<br/><span class=\"re0\">Transcript</span> show: <span class=\"br0\">(</span><span class=\"re5\">first</span> value: <span class=\"re5\">second</span><span class=\"br0\">)</span>.</pre>"}, {"lang": "Sparkling", "loc": 6, "block": "<pre class=\"text highlighted_source\">function call_me(func, arg) {<br/>    return func(arg);<br/>}<br/>\u00a0<br/>let answer = call_me(function(x) { return 6 * x; }, 7);<br/>print(answer);</pre>"}, {"lang": "Standard ML", "loc": 8, "block": "<pre class=\"text highlighted_source\">- fun func1 f = f \"a string\";<br/>val func1 = fn\u00a0: (string -&gt; 'a) -&gt; 'a<br/>- fun func2 s = \"func2 called with \" ^ s;<br/>val func2 = fn\u00a0: string -&gt; string<br/>\u00a0<br/>- print (func1 func2 ^ \"\\n\");<br/>func2 called with a string<br/>val it = ()\u00a0: unit</pre>"}, {"lang": "SuperCollider", "loc": 2, "block": "<pre class=\"text highlighted_source\">f = { |x, y| x.(y) }; // a function that takes a function and calls it with an argument<br/>f.({\u00a0|x| x + 1 }, 5); // returns 5</pre>"}, {"lang": "Swift", "loc": 3, "block": "<pre class=\"text highlighted_source\">func func1(f: String-&gt;String) -&gt; String { return f(\"a string\") }<br/>func func2(s: String) -&gt; String { return \"func2 called with \" + s }<br/>println(func1(func2)) // prints \"func2 called with a string\"</pre>"}, {"lang": "Tcl", "loc": 6, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># this procedure executes its argument:</span><br/><span class=\"kw1\">proc</span> demo <span class=\"br0\">{</span>function<span class=\"br0\">}</span> <span class=\"br0\">{</span> <br/>    <span class=\"re0\">$function</span> <br/><span class=\"br0\">}</span><br/><span class=\"co1\"># for example:</span><br/>demo bell</pre>"}, {"lang": "TI-89 BASIC", "loc": 5, "block": "<pre class=\"text highlighted_source\">Local map<br/>Define map(f,l)=Func<br/>  Return seq(#f(l[i]),i,1,dim(l))<br/>EndFunc<br/>Disp map(\"sin\", {0, \u03c0/6, \u03c0/4, \u03c0/3, \u03c0/2})</pre>"}, {"lang": "Toka", "loc": 3, "block": "<pre class=\"text highlighted_source\">[ .\" First\\n\" ] is first<br/>[ invoke ] is second<br/>` first second</pre>"}, {"lang": "Trith", "loc": 3, "block": "<pre class=\"text highlighted_source\">: twice 2 times\u00a0;<br/>: hello \"Hello, world!\" print\u00a0;<br/>[hello] twice</pre>"}, {"lang": "TXR", "loc": 8, "block": "<pre class=\"text highlighted_source\">@(bind a @(let ((counter 0))<br/>            (mapcar (lambda (x y) (list (inc counter) x y))<br/>                    '(a b c) '(t r s))))<br/>@(output)<br/>@  (repeat)<br/>@    (rep)@a:@(last)@<a class=\"__cf_email__\" data-cfemail=\"187958\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(end)<br/>@  (end)<br/>@(end)</pre>"}, {"lang": "Ursa", "loc": 10, "block": "<pre class=\"text highlighted_source\">def first (function f)<br/>\treturn (f)<br/>end<br/>\u00a0<br/>def second ()<br/>\treturn \"second\"<br/>end<br/>\u00a0<br/>out (first second) endl console<br/># \"second\" is output to the console</pre>"}, {"lang": "Ursala", "loc": 1, "block": "<pre class=\"text highlighted_source\">(autocomposition \"f\") \"x\" = \"f\" \"f\" \"x\"</pre>"}, {"lang": "V", "loc": 1, "block": "<pre class=\"text highlighted_source\">[first *].</pre>"}, {"lang": "VBA", "loc": 11, "block": "<pre class=\"pascal highlighted_source\">Sub HigherOrder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    Dim result As Single<br/>    result <span class=\"sy3\">=</span> first<span class=\"br0\">(</span>\"second\"<span class=\"br0\">)</span><br/>    MsgBox result<br/><span class=\"kw1\">End</span> Sub<br/><span class=\"kw1\">Function</span> first<span class=\"br0\">(</span>f As <span class=\"kw4\">String</span><span class=\"br0\">)</span> As Single<br/>    first <span class=\"sy3\">=</span> Application<span class=\"sy1\">.</span><span class=\"me1\">Run</span><span class=\"br0\">(</span>f<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/><span class=\"kw1\">Function</span> second<span class=\"br0\">(</span>x As Single<span class=\"br0\">)</span> As Single<br/>    second <span class=\"sy3\">=</span> x <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span></pre>"}, {"lang": "Visual Prolog", "loc": 18, "block": "<pre class=\"prolog highlighted_source\">\u00a0<br/>domains<br/>  intFunction <span class=\"sy6\">=</span> <span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">integer</span></a> In<span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">integer</span></a> Out procedure <span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>class predicates<br/>  addone <span class=\"sy4\">:</span> intFunction<span class=\"sy4\">.</span><br/>  doTwice <span class=\"sy4\">:</span> <span class=\"br0\">(</span>intFunction<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">integer</span></a><span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">integer</span></a> procedure <span class=\"br0\">(</span>i<span class=\"sy4\">,</span> i<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>clauses<br/>  doTwice<span class=\"br0\">(</span>Pred<span class=\"sy4\">,</span>X<span class=\"br0\">)</span> <span class=\"sy6\">=</span> Y <span class=\"sy1\">:-</span> Y <span class=\"sy6\">=</span> Pred<span class=\"br0\">(</span>Pred<span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>  addone<span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy6\">=</span> Y <span class=\"sy4\">:</span><span class=\"sy6\">=</span> Y <span class=\"sy6\">=</span> X <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">.</span><br/>\u00a0<br/>  run<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>    init<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span>dotwice<span class=\"br0\">(</span>addone<span class=\"sy4\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    succeed<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">fcn f(g){ g() } fcn g{ \"Hello World!\".println() }</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 3, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> DEF FN f<span class=\"br0\">(</span>f$,x,y<span class=\"br0\">)</span>=<span class=\"kw3\">VAL</span> <span class=\"br0\">(</span><span class=\"st0\">\"FN \"</span>+f$+<span class=\"st0\">\"(\"</span>+<span class=\"kw3\">STR</span>$ <span class=\"br0\">(</span>x<span class=\"br0\">)</span>+<span class=\"st0\">\",\"</span>+<span class=\"kw3\">STR</span>$ <span class=\"br0\">(</span>y<span class=\"br0\">)</span>+<span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/><span class=\"nu0\">20</span> DEF FN n<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span>=<span class=\"br0\">(</span>x+y<span class=\"br0\">)</span>^<span class=\"nu0\">2</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">PRINT</span> FN f<span class=\"br0\">(</span><span class=\"st0\">\"n\"</span>,<span class=\"nu0\">10</span>,<span class=\"nu0\">11</span><span class=\"br0\">)</span></pre>"}]}