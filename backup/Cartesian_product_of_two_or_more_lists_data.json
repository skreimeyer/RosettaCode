{"task": "Cartesian_product_of_two_or_more_lists", "blocks": [{"lang": "AppleScript", "loc": 160, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- CARTESIAN PRODUCTS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- Two lists:</span><br/>\u00a0<br/><span class=\"co1\">-- cartProd\u00a0:: [a] -&gt; [b] -&gt; [(a, b)]</span><br/><span class=\"kw3\">on</span> cartProd<span class=\"br0\">(</span>xs, ys<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>                    <span class=\"br0\">[</span><span class=\"br0\">[</span>x, y<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>            concatMap<span class=\"br0\">(</span><span class=\"kw1\">result</span>, ys<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    concatMap<span class=\"br0\">(</span><span class=\"kw1\">result</span>, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> cartProd<br/>\u00a0<br/><span class=\"co1\">-- N-ary \u2013 a function over a list of lists:</span><br/>\u00a0<br/><span class=\"co1\">-- cartProdNary\u00a0:: [[a]] -&gt; [[a]]</span><br/><span class=\"kw3\">on</span> cartProdNary<span class=\"br0\">(</span>xss<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>accs, xs<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                    <span class=\"kw3\">script</span><br/>                        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>                            <span class=\"br0\">{</span>x <span class=\"sy0\">&amp;</span> a<span class=\"br0\">}</span><br/>                        <span class=\"kw3\">end</span> |\u03bb|<br/>                    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>                    concatMap<span class=\"br0\">(</span><span class=\"kw1\">result</span>, accs<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>            concatMap<span class=\"br0\">(</span><span class=\"kw1\">result</span>, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    foldr<span class=\"br0\">(</span><span class=\"kw1\">result</span>, <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span>, xss<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> cartProdNary<br/>\u00a0<br/><span class=\"co1\">-- TESTS ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"kw3\">set</span> baseExamples <span class=\"kw3\">to</span> unlines<span class=\"br0\">(</span>map<span class=\"br0\">(</span>show, \u00ac<br/>        <span class=\"br0\">[</span>cartProd<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">)</span>, \u00ac<br/>            cartProd<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">)</span>, \u00ac<br/>            cartProd<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span>, \u00ac<br/>            cartProd<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">set</span> naryA <span class=\"kw3\">to</span> unlines<span class=\"br0\">(</span>map<span class=\"br0\">(</span>show, \u00ac<br/>        cartProdNary<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"nu0\">1776</span>, <span class=\"nu0\">1789</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">7</span>, <span class=\"nu0\">12</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">4</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">23</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">set</span> naryB <span class=\"kw3\">to</span> show<span class=\"br0\">(</span>cartProdNary<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">30</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">500</span>, <span class=\"nu0\">100</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">set</span> naryC <span class=\"kw3\">to</span> show<span class=\"br0\">(</span>cartProdNary<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">500</span>, <span class=\"nu0\">100</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    intercalate<span class=\"br0\">(</span>linefeed <span class=\"sy0\">&amp;</span> linefeed, <span class=\"br0\">{</span>baseExamples, naryA, naryB, naryC<span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- concatMap\u00a0:: (a -&gt; [b]) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> concatMap<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">(</span>lst <span class=\"sy0\">&amp;</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> concatMap<br/>\u00a0<br/><span class=\"co1\">-- foldr\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldr<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> lng <span class=\"kw3\">to</span> <span class=\"nu0\">1</span> <span class=\"kw1\">by</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldr<br/>\u00a0<br/><span class=\"co1\">-- intercalate\u00a0:: Text -&gt; [Text] -&gt; Text</span><br/><span class=\"kw3\">on</span> intercalate<span class=\"br0\">(</span>strText, lstText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strText<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> strJoined <span class=\"kw3\">to</span> lstText <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> strJoined<br/><span class=\"kw3\">end</span> intercalate<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- show\u00a0:: a -&gt; String</span><br/><span class=\"kw3\">on</span> show<span class=\"br0\">(</span>e<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> c <span class=\"kw3\">to</span> class <span class=\"kw3\">of</span> e<br/>    <span class=\"kw3\">if</span> c <span class=\"sy0\">=</span> <span class=\"kw1\">list</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">script</span> serialized<br/>            <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>                show<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span> |\u03bb|<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>        <span class=\"st0\">\"[\"</span> <span class=\"sy0\">&amp;</span> intercalate<span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, map<span class=\"br0\">(</span>serialized, e<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"]\"</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> c <span class=\"sy0\">=</span> record <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">script</span> showField<br/>            <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>kv<span class=\"br0\">)</span><br/>                <span class=\"kw3\">set</span> <span class=\"br0\">{</span>k, ev<span class=\"br0\">}</span> <span class=\"kw3\">to</span> kv<br/>                <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span> <span class=\"sy0\">&amp;</span> k <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<span class=\"es0\">\\\"</span>:\"</span> <span class=\"sy0\">&amp;</span> show<span class=\"br0\">(</span>ev<span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span> |\u03bb|<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>        <span class=\"st0\">\"{\"</span> <span class=\"sy0\">&amp;</span> intercalate<span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, \u00ac<br/>            map<span class=\"br0\">(</span>showField, zip<span class=\"br0\">(</span>allKeys<span class=\"br0\">(</span>e<span class=\"br0\">)</span>, allValues<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"}\"</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> c <span class=\"sy0\">=</span> date <span class=\"kw3\">then</span><br/>        <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span> <span class=\"sy0\">&amp;</span> iso8601Z<span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> c <span class=\"sy0\">=</span> <span class=\"kw1\">text</span> <span class=\"kw3\">then</span><br/>        <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span> <span class=\"sy0\">&amp;</span> e <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">=</span> <span class=\"kw1\">integer</span> <span class=\"kw2\">or</span> c <span class=\"sy0\">=</span> real<span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>        e <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> c <span class=\"sy0\">=</span> class <span class=\"kw3\">then</span><br/>        <span class=\"st0\">\"null\"</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">try</span><br/>            e <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>        <span class=\"kw3\">on</span> <span class=\"kw3\">error</span><br/>            <span class=\"br0\">(</span><span class=\"st0\">\"\u00ab\"</span> <span class=\"sy0\">&amp;</span> c <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"\u00bb\"</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">try</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> show<br/>\u00a0<br/><span class=\"co1\">-- unlines\u00a0:: [String] -&gt; String</span><br/><span class=\"kw3\">on</span> unlines<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    intercalate<span class=\"br0\">(</span>linefeed, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> unlines</pre>"}, {"lang": "C", "loc": 118, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;string.h&gt;</span><br/><span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> cartesianProduct<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">**</span> sets<span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"sy0\">*</span> setLengths<span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"sy0\">*</span> currentSet<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> numSets<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> times<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>times<span class=\"sy0\">==</span>numSets<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"(\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>times<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d,\"</span><span class=\"sy0\">,</span>currentSet<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\b</span>),\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span>setLengths<span class=\"br0\">[</span>times<span class=\"br0\">]</span><span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tcurrentSet<span class=\"br0\">[</span>times<span class=\"br0\">]</span> <span class=\"sy0\">=</span> sets<span class=\"br0\">[</span>times<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tcartesianProduct<span class=\"br0\">(</span>sets<span class=\"sy0\">,</span>setLengths<span class=\"sy0\">,</span>currentSet<span class=\"sy0\">,</span>numSets<span class=\"sy0\">,</span>times<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> printSets<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">**</span> sets<span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"sy0\">*</span> setLengths<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> numSets<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Number of sets\u00a0:\u00a0%d\"</span><span class=\"sy0\">,</span>numSets<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>numSets<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Set\u00a0%d\u00a0: \"</span><span class=\"sy0\">,</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span>setLengths<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%d \"</span><span class=\"sy0\">,</span>sets<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> processInputString<span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span> str<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> <span class=\"sy0\">**</span>sets<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>currentSet<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>setLengths<span class=\"sy0\">,</span> setLength<span class=\"sy0\">,</span> numSets <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>k<span class=\"sy0\">,</span>l<span class=\"sy0\">,</span>start<span class=\"sy0\">,</span>counter<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>token<span class=\"sy0\">,*</span>holder<span class=\"sy0\">,*</span>holderToken<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">!=</span><span class=\"nu8\">00</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">'x'</span><span class=\"br0\">)</span><br/>\t\t\tnumSets<span class=\"sy0\">++;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>numSets<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>%s\"</span><span class=\"sy0\">,</span>str<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tcurrentSet <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>numSets <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tsetLengths <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>numSets <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tsets <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">**</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>numSets <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\ttoken <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strtok.html\"><span class=\"kw3\">strtok</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">,</span><span class=\"st0\">\"x\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>token<span class=\"sy0\">!=</span>NULL<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tholder <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>token<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tj <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>token<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">!=</span><span class=\"nu8\">00</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>token<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&gt;=</span><span class=\"st0\">'0'</span> <span class=\"sy0\">&amp;&amp;</span> token<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&lt;=</span><span class=\"st0\">'9'</span><span class=\"br0\">)</span><br/>\t\t\t\tholder<span class=\"br0\">[</span>j<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> token<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>token<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">','</span><span class=\"br0\">)</span><br/>\t\t\t\tholder<span class=\"br0\">[</span>j<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">' '</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\tholder<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu8\">00</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tsetLength <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>holder<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">!=</span><span class=\"nu8\">00</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>holder<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>\t\t\t\tsetLength<span class=\"sy0\">++;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>setLength<span class=\"sy0\">==</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>holder<span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>{}\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tsetLengths<span class=\"br0\">[</span>counter<span class=\"br0\">]</span> <span class=\"sy0\">=</span> setLength<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tsets<span class=\"br0\">[</span>counter<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>setLength<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tk <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tstart <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>l<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>holder<span class=\"br0\">[</span>l<span class=\"br0\">]</span><span class=\"sy0\">!=</span><span class=\"nu8\">00</span><span class=\"sy0\">;</span>l<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>holder<span class=\"br0\">[</span>l<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">' '</span><span class=\"sy0\">||</span>holder<span class=\"br0\">[</span>l<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu8\">00</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\tholderToken <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>l<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span>start<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strncpy.html\"><span class=\"kw3\">strncpy</span></a><span class=\"br0\">(</span>holderToken<span class=\"sy0\">,</span>holder <span class=\"sy0\">+</span> start<span class=\"sy0\">,</span>l<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span>start<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tsets<span class=\"br0\">[</span>counter<span class=\"br0\">]</span><span class=\"br0\">[</span>k<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atoi.html\"><span class=\"kw3\">atoi</span></a><span class=\"br0\">(</span>holderToken<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tstart <span class=\"sy0\">=</span> l<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tcounter<span class=\"sy0\">++;</span><br/>\t\ttoken <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strtok.html\"><span class=\"kw3\">strtok</span></a><span class=\"br0\">(</span>NULL<span class=\"sy0\">,</span><span class=\"st0\">\"x\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>{\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tcartesianProduct<span class=\"br0\">(</span>sets<span class=\"sy0\">,</span>setLengths<span class=\"sy0\">,</span>currentSet<span class=\"sy0\">,</span>numSets <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\b</span>}\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argC<span class=\"sy0\">,</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span> argV<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>argC<span class=\"sy0\">!=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Usage\u00a0:\u00a0%s &lt;Set product expression enclosed in double quotes&gt;\"</span><span class=\"sy0\">,</span>argV<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">else</span><br/>\t\tprocessInputString<span class=\"br0\">(</span>argV<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 57, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;&gt;</span><span class=\"sy3\">&amp;</span> v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"{ \"</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">auto</span><span class=\"sy3\">&amp;</span> p <span class=\"sy4\">:</span> v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"(\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">auto</span><span class=\"sy3\">&amp;</span> e <span class=\"sy4\">:</span> p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> e <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\") \"</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"}\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> product<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;&gt;</span><span class=\"sy3\">&amp;</span> lists<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;&gt;</span> result<span class=\"sy4\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">find_if</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>lists<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>lists<span class=\"br0\">)</span>, <br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"kw4\">auto</span> e<span class=\"br0\">)</span> <span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span> <span class=\"kw4\">bool</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> e.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>lists<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span><span class=\"sy3\">&amp;</span> e <span class=\"sy4\">:</span> lists<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    result.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"br0\">{</span> e <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> lists.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;&gt;</span> temp<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span><span class=\"sy3\">&amp;</span> e <span class=\"sy4\">:</span> result<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> f <span class=\"sy4\">:</span> lists<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> e_tmp <span class=\"sy1\">=</span> e<span class=\"sy4\">;</span><br/>        e_tmp.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        temp.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>e_tmp<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    result <span class=\"sy1\">=</span> temp<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> result<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;&gt;</span> prods<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"nu0\">1776</span>, <span class=\"nu0\">1789</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">7</span>, <span class=\"nu0\">12</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">4</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">23</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">30</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">500</span>, <span class=\"nu0\">100</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"br0\">}</span>, <span class=\"br0\">{</span> <span class=\"nu0\">500</span>, <span class=\"nu0\">100</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">auto</span><span class=\"sy3\">&amp;</span> p <span class=\"sy4\">:</span> prods<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    print<span class=\"br0\">(</span>product<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cin</span>.<span class=\"me1\">ignore</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cin</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 44, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> empty <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> list1 <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> list2 <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> list3 <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1776</span>, <span class=\"nu0\">1789</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> list4 <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">7</span>, <span class=\"nu0\">12</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> list5 <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">4</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">23</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> list6 <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> list7 <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> list8 <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">30</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> list9 <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">500</span>, <span class=\"nu0\">100</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> sequenceList <span class=\"kw1\">in</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> list1, list2 <span class=\"br0\">}</span>,<br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> list2, list1 <span class=\"br0\">}</span>,<br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> list1, empty <span class=\"br0\">}</span>,<br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> empty, list1 <span class=\"br0\">}</span>,<br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> list3, list4, list5, list6 <span class=\"br0\">}</span>,<br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> list7, list8, list9 <span class=\"br0\">}</span>,<br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> list7, empty, list9 <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> cart <span class=\"sy0\">=</span> sequenceList<span class=\"sy0\">.</span><span class=\"me1\">CartesianProduct</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                <span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>tuple <span class=\"sy0\">=&gt;</span> $<span class=\"st0\">\"({string.Join(\"</span>, <span class=\"st0\">\", tuple)})\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>$<span class=\"st0\">\"{{{string.Join(\"</span>, <span class=\"st0\">\", cart)}}}\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Extensions<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span>IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span> CartesianProduct<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">this</span> IEnumerable<span class=\"sy0\">&lt;</span>IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span> sequences<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        IEnumerable<span class=\"sy0\">&lt;</span>IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span> emptyProduct <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Empty</span><span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> sequences<span class=\"sy0\">.</span><span class=\"me1\">Aggregate</span><span class=\"br0\">(</span><br/>            emptyProduct,<br/>            <span class=\"br0\">(</span>accumulator, sequence<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>            <span class=\"kw1\">from</span> acc <span class=\"kw1\">in</span> accumulator<br/>            <span class=\"kw1\">from</span> item <span class=\"kw1\">in</span> sequence<br/>            <span class=\"kw1\">select</span> acc<span class=\"sy0\">.</span><span class=\"me1\">Concat</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> item <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 5, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> cartesian-product <span class=\"br0\">(</span>s1 s2<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Compute the cartesian product of two sets represented as lists\"</span><br/>  <span class=\"br0\">(</span>loop for x in s1<br/>\t<span class=\"kw1\">nconc</span> <span class=\"br0\">(</span>loop for y in s2 collect <span class=\"br0\">(</span><span class=\"kw1\">list</span> x y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 39, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> a <span class=\"sy0\">=</span> listProduct<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> b <span class=\"sy0\">=</span> listProduct<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> c <span class=\"sy0\">=</span> listProduct<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> d <span class=\"sy0\">=</span> listProduct<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> listProduct<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>T<span class=\"br0\">[</span><span class=\"br0\">]</span> ta<span class=\"sy0\">,</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> tb<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">struct</span> Result <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">bool</span> empty<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> i<span class=\"sy0\">&gt;=</span>ta.<span class=\"me1\">length</span><br/>                <span class=\"sy0\">||</span> j<span class=\"sy0\">&gt;=</span>tb.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        T<span class=\"br0\">[</span><span class=\"br0\">]</span> front<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">[</span>ta<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> tb<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">void</span> popFront<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>j<span class=\"sy0\">&gt;=</span>tb.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                i<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> Result<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "F#", "loc": 4, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"co1\">//Nigel Galloway February 12th., 2018</span><br/><span class=\"kw1\">let</span> cP2 n g <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>n,g<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span>n<span class=\"sy0\">;</span>g<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">allPairs</span> n g<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 8, "block": "<pre class=\"text highlighted_source\">IN: scratchpad { 1 2 } { 3 4 } cartesian-product .<br/>{ { { 1 3 } { 1 4 } } { { 2 3 } { 2 4 } } }<br/>IN: scratchpad { 3 4 } { 1 2 } cartesian-product .<br/>{ { { 3 1 } { 3 2 } } { { 4 1 } { 4 2 } } }<br/>IN: scratchpad { 1 2 } { } cartesian-product .<br/>{ { } { } }<br/>IN: scratchpad { } { 1 2 } cartesian-product .<br/>{ }</pre>"}, {"lang": "Go", "loc": 24, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">type</span> pair <span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><br/>\u00a0<br/><span class=\"kw4\">func</span> cart2<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">[]</span>pair <span class=\"sy1\">{</span><br/>    p <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>pair<span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>a<span class=\"sy1\">)</span><span class=\"sy3\">*</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>b<span class=\"sy1\">))</span><br/>    <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> a <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> a <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> b <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> b <span class=\"sy1\">{</span><br/>            p<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> pair<span class=\"sy1\">{</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">}</span><br/>            <span class=\"nu2\">i</span><span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> p<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>cart2<span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">},</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">}))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>cart2<span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">},</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">}))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>cart2<span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">},</span> <span class=\"kw2\">nil</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>cart2<span class=\"sy1\">(</span><span class=\"kw2\">nil</span><span class=\"sy1\">,</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">}))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 5, "block": "<pre class=\"haskell highlighted_source\">cartProd <span class=\"sy0\">::</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>cartProd xs ys <span class=\"sy0\">=</span><br/>  <span class=\"br0\">[</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>  <span class=\"sy0\">|</span> x <span class=\"sy0\">&lt;-</span> xs <br/>  <span class=\"sy0\">,</span> y <span class=\"sy0\">&lt;-</span> ys <span class=\"br0\">]</span></pre>"}, {"lang": "J", "loc": 43, "block": "<pre class=\"j highlighted_source\">   { <span class=\"nu0\">1776</span> <span class=\"nu0\">1789</span>\u00a0; <span class=\"nu0\">7</span> <span class=\"nu0\">12</span>\u00a0; <span class=\"nu0\">4</span> <span class=\"nu0\">14</span> <span class=\"nu0\">23</span>\u00a0; <span class=\"nu0\">0</span> <span class=\"nu0\">1</span>   <span class=\"co1\">NB. result is 4 dimensional array with shape 2 2 3 2</span><br/>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510<br/>\u2502<span class=\"nu0\">1776</span> <span class=\"nu0\">7</span> <span class=\"nu0\">4</span> <span class=\"nu0\">0</span>  \u2502<span class=\"nu0\">1776</span> <span class=\"nu0\">7</span> <span class=\"nu0\">4</span> <span class=\"nu0\">1</span>  \u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">1776</span> <span class=\"nu0\">7</span> <span class=\"nu0\">14</span> <span class=\"nu0\">0</span> \u2502<span class=\"nu0\">1776</span> <span class=\"nu0\">7</span> <span class=\"nu0\">14</span> <span class=\"nu0\">1</span> \u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">1776</span> <span class=\"nu0\">7</span> <span class=\"nu0\">23</span> <span class=\"nu0\">0</span> \u2502<span class=\"nu0\">1776</span> <span class=\"nu0\">7</span> <span class=\"nu0\">23</span> <span class=\"nu0\">1</span> \u2502<br/>\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518<br/>\u00a0<br/>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510<br/>\u2502<span class=\"nu0\">1776</span> <span class=\"nu0\">12</span> <span class=\"nu0\">4</span> <span class=\"nu0\">0</span> \u2502<span class=\"nu0\">1776</span> <span class=\"nu0\">12</span> <span class=\"nu0\">4</span> <span class=\"nu0\">1</span> \u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">1776</span> <span class=\"nu0\">12</span> <span class=\"nu0\">14</span> <span class=\"nu0\">0</span>\u2502<span class=\"nu0\">1776</span> <span class=\"nu0\">12</span> <span class=\"nu0\">14</span> <span class=\"nu0\">1</span>\u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">1776</span> <span class=\"nu0\">12</span> <span class=\"nu0\">23</span> <span class=\"nu0\">0</span>\u2502<span class=\"nu0\">1776</span> <span class=\"nu0\">12</span> <span class=\"nu0\">23</span> <span class=\"nu0\">1</span>\u2502<br/>\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518<br/>\u00a0<br/>\u00a0<br/>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510<br/>\u2502<span class=\"nu0\">1789</span> <span class=\"nu0\">7</span> <span class=\"nu0\">4</span> <span class=\"nu0\">0</span>  \u2502<span class=\"nu0\">1789</span> <span class=\"nu0\">7</span> <span class=\"nu0\">4</span> <span class=\"nu0\">1</span>  \u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">1789</span> <span class=\"nu0\">7</span> <span class=\"nu0\">14</span> <span class=\"nu0\">0</span> \u2502<span class=\"nu0\">1789</span> <span class=\"nu0\">7</span> <span class=\"nu0\">14</span> <span class=\"nu0\">1</span> \u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">1789</span> <span class=\"nu0\">7</span> <span class=\"nu0\">23</span> <span class=\"nu0\">0</span> \u2502<span class=\"nu0\">1789</span> <span class=\"nu0\">7</span> <span class=\"nu0\">23</span> <span class=\"nu0\">1</span> \u2502<br/>\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518<br/>\u00a0<br/>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510<br/>\u2502<span class=\"nu0\">1789</span> <span class=\"nu0\">12</span> <span class=\"nu0\">4</span> <span class=\"nu0\">0</span> \u2502<span class=\"nu0\">1789</span> <span class=\"nu0\">12</span> <span class=\"nu0\">4</span> <span class=\"nu0\">1</span> \u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">1789</span> <span class=\"nu0\">12</span> <span class=\"nu0\">14</span> <span class=\"nu0\">0</span>\u2502<span class=\"nu0\">1789</span> <span class=\"nu0\">12</span> <span class=\"nu0\">14</span> <span class=\"nu0\">1</span>\u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">1789</span> <span class=\"nu0\">12</span> <span class=\"nu0\">23</span> <span class=\"nu0\">0</span>\u2502<span class=\"nu0\">1789</span> <span class=\"nu0\">12</span> <span class=\"nu0\">23</span> <span class=\"nu0\">1</span>\u2502<br/>\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518<br/>   { <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span>\u00a0; <span class=\"nu0\">30</span>\u00a0; <span class=\"nu0\">50</span> <span class=\"nu0\">100</span>    <span class=\"co1\">NB. result is a 2-dimensional array with shape 2 3</span><br/>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510<br/>\u2502<span class=\"nu0\">1</span> <span class=\"nu0\">30</span> <span class=\"nu0\">50</span>\u2502<span class=\"nu0\">1</span> <span class=\"nu0\">30</span> <span class=\"nu0\">100</span>\u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">2</span> <span class=\"nu0\">30</span> <span class=\"nu0\">50</span>\u2502<span class=\"nu0\">2</span> <span class=\"nu0\">30</span> <span class=\"nu0\">100</span>\u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">3</span> <span class=\"nu0\">30</span> <span class=\"nu0\">50</span>\u2502<span class=\"nu0\">3</span> <span class=\"nu0\">30</span> <span class=\"nu0\">100</span>\u2502<br/>\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518<br/>   { <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span>\u00a0; <span class=\"st_h\">''</span>\u00a0; <span class=\"nu0\">50</span> <span class=\"nu0\">100</span>    <span class=\"co1\">NB. result is an empty 3-dimensional array with shape 3 0 2</span><br/>\u00a0</pre>"}, {"lang": "Java", "loc": 30, "block": "<pre class=\"java highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">util</span>.<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">util</span>.<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acollections+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Collections</span></a>.<span class=\"me1\">emptyList</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">util</span>.<span class=\"me1\">Optional</span>.<span class=\"me1\">of</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">util</span>.<span class=\"me1\">stream</span>.<span class=\"me1\">Collectors</span>.<span class=\"me1\">toList</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> CartesianProduct <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> List<span class=\"sy0\">&lt;?&gt;</span> product<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;?&gt;</span>... <span class=\"me1\">a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            List<span class=\"sy0\">&lt;?&gt;</span> product <span class=\"sy0\">=</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> a.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                product <span class=\"sy0\">=</span> product<span class=\"br0\">(</span>product, a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> product<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> emptyList<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"sy0\">&lt;</span>A, B<span class=\"sy0\">&gt;</span> List<span class=\"sy0\">&lt;?&gt;</span> product<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;</span>A<span class=\"sy0\">&gt;</span> a, List<span class=\"sy0\">&lt;</span>B<span class=\"sy0\">&gt;</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> of<span class=\"br0\">(</span>a.<span class=\"me1\">stream</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                .<span class=\"me1\">map</span><span class=\"br0\">(</span>e1 <span class=\"sy0\">-&gt;</span> of<span class=\"br0\">(</span>b.<span class=\"me1\">stream</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>e2 <span class=\"sy0\">-&gt;</span> asList<span class=\"br0\">(</span>e1, e2<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">collect</span><span class=\"br0\">(</span>toList<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">orElse</span><span class=\"br0\">(</span>emptyList<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                .<span class=\"me1\">flatMap</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Alist+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">List</span></a><span class=\"sy0\">::</span>stream<span class=\"br0\">)</span><br/>                .<span class=\"me1\">collect</span><span class=\"br0\">(</span>toList<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">orElse</span><span class=\"br0\">(</span>emptyList<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "JavaScript", "loc": 33, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co1\">// CARTESIAN PRODUCT OF TWO LISTS -----------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// cartProd\u00a0:: [a] -&gt; [b] -&gt; [[a, b]]</span><br/>    <span class=\"kw1\">const</span> cartProd <span class=\"sy0\">=</span> <span class=\"br0\">(</span>xs<span class=\"sy0\">,</span> ys<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        concatMap<span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> concatMap<span class=\"br0\">(</span>y <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><br/>            <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">]</span><br/>        <span class=\"br0\">]</span><span class=\"sy0\">,</span> ys<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"co1\">// GENERIC FUNCTIONS ------------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// concatMap\u00a0:: (a -&gt; [b]) -&gt; [a] -&gt; [b]</span><br/>    <span class=\"kw1\">const</span> concatMap <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">concat</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/>    <span class=\"kw1\">const</span> map <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// show\u00a0:: a -&gt; String</span><br/>    <span class=\"kw1\">const</span> show <span class=\"sy0\">=</span> x <span class=\"sy0\">=&gt;</span> JSON.<span class=\"me1\">stringify</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//, null, 2);</span><br/>\u00a0<br/>    <span class=\"co1\">// unlines\u00a0:: [String] -&gt; String</span><br/>    <span class=\"kw1\">const</span> unlines <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// TEST -------------------------------------------------------------------</span><br/>    <span class=\"kw1\">return</span> unlines<span class=\"br0\">(</span>map<span class=\"br0\">(</span>show<span class=\"sy0\">,</span> <span class=\"br0\">[</span><br/>        cartProd<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        cartProd<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        cartProd<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        cartProd<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>def products: .[0][] as $x | .[1][] as $y | [$x,$y];<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Product {1, 2} \u00d7 {3, 4}<br/>collect(product([1, 2], [3, 4]))<br/># Product {3, 4} \u00d7 {1, 2}<br/>collect(product([3, 4], [1, 2]))<br/>\u00a0<br/># Product {1, 2} \u00d7 {}<br/>collect(product([1, 2], []))<br/># Product {} \u00d7 {1, 2}<br/>collect(product([], [1, 2]))<br/>\u00a0<br/># Product {1776, 1789} \u00d7 {7, 12} \u00d7 {4, 14, 23} \u00d7 {0, 1}<br/>collect(product([1776, 1789], [7, 12], [4, 14, 23], [0, 1]))<br/># Product {1, 2, 3} \u00d7 {30} \u00d7 {500, 100}<br/>collect(product([1, 2, 3], [30], [500, 100]))<br/># Product {1, 2, 3} \u00d7 {} \u00d7 {500, 100}<br/>collect(product([1, 2, 3], [], [500, 100]))<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 53, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun flattenList<span class=\"br0\">(</span>nestList<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Any<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Any<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> flatList <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Any<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    fun flatten<span class=\"br0\">(</span>list<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Any<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>e in list<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>e <span class=\"sy0\">!</span>is List<span class=\"sy0\">&lt;*&gt;</span><span class=\"br0\">)</span><br/>                flatList.<span class=\"me1\">add</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>                <span class=\"sy0\">@</span>Suppress<span class=\"br0\">(</span><span class=\"st0\">\"UNCHECKED_CAST\"</span><span class=\"br0\">)</span><br/>                flatten<span class=\"br0\">(</span>e as List<span class=\"sy0\">&lt;</span>Any<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    flatten<span class=\"br0\">(</span>nestList<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> flatList<br/><span class=\"br0\">}</span><br/>\u00a0<br/>operator fun List<span class=\"sy0\">&lt;</span>Any<span class=\"sy0\">&gt;</span>.<span class=\"me1\">times</span><span class=\"br0\">(</span>other<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Any<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>Any<span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> prod <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>Any<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>e in <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>f in other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            prod.<span class=\"me1\">add</span><span class=\"br0\">(</span>listOf<span class=\"br0\">(</span>e, f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> prod<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun nAryCartesianProduct<span class=\"br0\">(</span>lists<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>Any<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>Any<span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">{</span><br/>    require<span class=\"br0\">(</span>lists.<span class=\"me1\">size</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> lists.<span class=\"me1\">drop</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">fold</span><span class=\"br0\">(</span>lists<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> lists<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> cp, ls -<span class=\"sy0\">&gt;</span> cp <span class=\"sy0\">*</span> ls <span class=\"br0\">}</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> flattenList<span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun printNAryProduct<span class=\"br0\">(</span>lists<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>Any<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"${lists.joinToString(\"</span> x <span class=\"st0\">\")} = \"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"[\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>nAryCartesianProduct<span class=\"br0\">(</span>lists<span class=\"br0\">)</span>.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>    \"</span>, <span class=\"st0\">\"    \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"]<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"[1, 2] x [3, 4] = ${listOf(1, 2) * listOf(3, 4)}\"</span><span class=\"br0\">)</span><br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"[3, 4] x [1, 2] = ${listOf(3, 4) * listOf(1, 2)}\"</span><span class=\"br0\">)</span><br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"[1, 2] x []     = ${listOf(1, 2) * listOf()}\"</span><span class=\"br0\">)</span><br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"[]     x [1, 2] = ${listOf&lt;Any&gt;() * listOf(1, 2)}\"</span><span class=\"br0\">)</span><br/>   println<span class=\"br0\">(</span><span class=\"st0\">\"[1, a] x [2, b] = ${listOf(1, 'a') * listOf(2, 'b')}\"</span><span class=\"br0\">)</span><br/>   println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   printNAryProduct<span class=\"br0\">(</span>listOf<span class=\"br0\">(</span>listOf<span class=\"br0\">(</span><span class=\"nu0\">1776</span>, <span class=\"nu0\">1789</span><span class=\"br0\">)</span>, listOf<span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"nu0\">12</span><span class=\"br0\">)</span>, listOf<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">23</span><span class=\"br0\">)</span>, listOf<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   printNAryProduct<span class=\"br0\">(</span>listOf<span class=\"br0\">(</span>listOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>, listOf<span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span>, listOf<span class=\"br0\">(</span><span class=\"nu0\">500</span>, <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   printNAryProduct<span class=\"br0\">(</span>listOf<span class=\"br0\">(</span>listOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>, listOf<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, listOf<span class=\"br0\">(</span><span class=\"nu0\">500</span>, <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   printNAryProduct<span class=\"br0\">(</span>listOf<span class=\"br0\">(</span>listOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>, listOf<span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span>, listOf<span class=\"br0\">(</span><span class=\"st0\">'a'</span>, <span class=\"st0\">'b'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 50, "block": "<pre class=\"lua highlighted_source\">  <span class=\"kw1\">local</span> pk<span class=\"sy0\">,</span>upk <span class=\"sy0\">=</span> <span class=\"kw3\">table</span><span class=\"sy0\">.</span>pack<span class=\"sy0\">,</span> <span class=\"kw3\">table</span><span class=\"sy0\">.</span><span class=\"kw3\">unpack</span><br/>  <span class=\"kw1\">local</span> <span class=\"kw3\">getn</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"kw1\">return</span> <span class=\"sy0\">#</span>t <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">local</span> const <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"kw1\">return</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"kw1\">return</span> k <span class=\"kw1\">end</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">local</span> <span class=\"kw1\">function</span> attachIdx<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"co1\">-- one-time-off function modifier</span><br/>    <span class=\"kw1\">local</span> idx <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span>idx<span class=\"sy0\">=</span>idx<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">;</span> <span class=\"kw1\">return</span> f<span class=\"br0\">(</span>e<span class=\"sy0\">,</span>idx<span class=\"br0\">)</span><span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span>  <br/>\u00a0<br/>  <span class=\"kw1\">local</span> <span class=\"kw1\">function</span> reduce<span class=\"br0\">(</span>t<span class=\"sy0\">,</span>acc<span class=\"sy0\">,</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>t<span class=\"sy0\">.</span>n <span class=\"kw2\">or</span> <span class=\"sy0\">#</span>t <span class=\"kw1\">do</span> acc<span class=\"sy0\">=</span>f<span class=\"br0\">(</span>acc<span class=\"sy0\">,</span>t<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> acc<br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">local</span> <span class=\"kw1\">function</span> imap<span class=\"br0\">(</span>t<span class=\"sy0\">,</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> r <span class=\"sy0\">=</span> <span class=\"br0\">{</span>n<span class=\"sy0\">=</span>t<span class=\"sy0\">.</span>n <span class=\"kw2\">or</span> <span class=\"sy0\">#</span>t<span class=\"sy0\">,</span> r<span class=\"sy0\">=</span>reduce<span class=\"sy0\">,</span> u<span class=\"sy0\">=</span>upk<span class=\"sy0\">,</span> m<span class=\"sy0\">=</span>imap<span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>r<span class=\"sy0\">.</span>n <span class=\"kw1\">do</span> r<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>f<span class=\"br0\">(</span>t<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> r<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">local</span> <span class=\"kw1\">function</span> prod<span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> ts <span class=\"sy0\">=</span> pk<span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> limit <span class=\"sy0\">=</span> imap<span class=\"br0\">(</span>ts<span class=\"sy0\">,</span><span class=\"kw3\">getn</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> idx<span class=\"sy0\">,</span> cnt <span class=\"sy0\">=</span> imap<span class=\"br0\">(</span>limit<span class=\"sy0\">,</span>const<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">local</span> <span class=\"kw3\">max</span> <span class=\"sy0\">=</span> reduce<span class=\"br0\">(</span>limit<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"kw1\">return</span> a<span class=\"sy0\">*</span>b <span class=\"kw1\">end</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> <span class=\"kw1\">function</span> ret<span class=\"br0\">(</span>t<span class=\"sy0\">,</span>i<span class=\"br0\">)</span><span class=\"kw1\">return</span> t<span class=\"br0\">[</span>idx<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> cnt<span class=\"sy0\">&gt;=</span><span class=\"kw3\">max</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw1\">end</span> <span class=\"co1\">-- no more output</span><br/>      <span class=\"kw1\">if</span> cnt<span class=\"sy0\">==</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"co1\">-- skip for 1st</span><br/>        cnt <span class=\"sy0\">=</span> cnt <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <br/>      <span class=\"kw1\">else</span><br/>        cnt<span class=\"sy0\">,</span> idx<span class=\"br0\">[</span><span class=\"sy0\">#</span>idx<span class=\"br0\">]</span> <span class=\"sy0\">=</span> cnt <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> idx<span class=\"br0\">[</span><span class=\"sy0\">#</span>idx<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <br/>        <span class=\"kw1\">for</span> i<span class=\"sy0\">=#</span>idx<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"co1\">-- update index list</span><br/>          <span class=\"kw1\">if</span> idx<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&lt;=</span>limit<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">then</span> <br/>            <span class=\"kw1\">break</span> <span class=\"co1\">-- no further update need</span><br/>          <span class=\"kw1\">else</span> <span class=\"co1\">-- propagate limit overflow</span><br/>            idx<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>idx<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> idx<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>          <span class=\"kw1\">end</span>        <br/>        <span class=\"kw1\">end</span>        <br/>      <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">return</span> cnt<span class=\"sy0\">,</span>imap<span class=\"br0\">(</span>ts<span class=\"sy0\">,</span>attachIdx<span class=\"br0\">(</span>ret<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>u<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span>    <br/>  <span class=\"kw1\">end</span><br/><span class=\"co1\">--- test</span><br/>  <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>b <span class=\"kw2\">in</span> prod<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>b <span class=\"kw2\">in</span> prod<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>cartmulti\u00a0:= proc ()<br/> local m, v;<br/> if [] in {args} then<br/> return [];<br/> else <br/>m\u00a0:= Iterator:-CartesianProduct(args);<br/> for v in m do<br/> printf(\"%{}a\\n\", v);<br/> end do;<br/> end if;<br/> end proc;<br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 16, "block": "<pre class=\"ocaml highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> product l1 l2 <span class=\"sy0\">=</span> <br/>    <span class=\"kw1\">match</span> l1, l2 <span class=\"kw1\">with</span><br/>    <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>, _ <span class=\"sy0\">|</span> _, <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"sy0\">|</span> h1<span class=\"sy0\">::</span>t1, h2<span class=\"sy0\">::</span>t2 <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>h1,h2<span class=\"br0\">)</span><span class=\"sy0\">::</span><span class=\"br0\">(</span>product <span class=\"br0\">[</span>h1<span class=\"br0\">]</span> t2<span class=\"br0\">)</span>@<span class=\"br0\">(</span>product t1 l2<span class=\"br0\">)</span><br/><span class=\"sy0\">;;</span><br/>\u00a0<br/>product <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;;</span><br/><span class=\"co1\">(*-\u00a0: (int * int) list = [(1, 3); (1, 4); (2, 3); (2, 4)]*)</span><br/>product <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;;</span><br/><span class=\"co1\">(*-\u00a0: (int * int) list = [(3, 1); (3, 2); (4, 1); (4, 2)]*)</span><br/>product <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;;</span><br/><span class=\"co1\">(*-\u00a0: (int * 'a) list = []*)</span><br/>product <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;;</span><br/><span class=\"co1\">(*-\u00a0: ('a * int) list = []*)</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 32, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> cartesian <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$sets</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">@$sets</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">unless</span> <span class=\"sy0\">@</span><span class=\"co5\">$_</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$products</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$set</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"re0\">@$sets</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$partial</span> <span class=\"sy0\">=</span> <span class=\"re0\">$products</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$products</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$item</span> <span class=\"br0\">(</span><span class=\"re0\">@$set</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$product</span> <span class=\"br0\">(</span><span class=\"re0\">@$partial</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@$products</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re0\">$item</span><span class=\"sy0\">,</span> <span class=\"re0\">@$product</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$products</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> product <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span><span class=\"re0\">$fmt</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$tuples</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"re0\">$a</span> <span class=\"br0\">(</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span> cartesian<span class=\"br0\">(</span> \\<span class=\"re0\">@$s</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$tuples</span> <span class=\"sy0\">.=</span> <a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a> <span class=\"st0\">\"($fmt) \"</span><span class=\"sy0\">,</span> <span class=\"re0\">@$a</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"re0\">$tuples</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <br/>product<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>      <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span>                  <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">'%1d\u00a0%1d'</span>        <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>product<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>      <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span>                  <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">'%1d\u00a0%1d'</span>        <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>product<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>      <span class=\"br0\">[</span><span class=\"br0\">]</span>                      <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">'%1d\u00a0%1d'</span>        <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>product<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>          <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span>                  <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">'%1d\u00a0%1d'</span>        <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>product<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>     <span class=\"br0\">[</span><span class=\"nu0\">30</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>   <span class=\"br0\">[</span><span class=\"nu0\">500</span><span class=\"sy0\">,</span><span class=\"nu0\">100</span><span class=\"br0\">]</span>       <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">'%1d\u00a0%1d\u00a0%3d'</span>    <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>product<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>     <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>     <span class=\"br0\">[</span><span class=\"nu0\">500</span><span class=\"sy0\">,</span><span class=\"nu0\">100</span><span class=\"br0\">]</span>       <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">'%1d\u00a0%1d\u00a0%3d'</span>    <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>product<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1776</span><span class=\"sy0\">,</span><span class=\"nu0\">1789</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">14</span><span class=\"sy0\">,</span><span class=\"nu0\">23</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">'%4d\u00a0%2d\u00a0%2d\u00a0%1d'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl 6", "loc": 11, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"co1\"># cartesian product of two lists using the X cross meta-operator</span><br/><span class=\"kw3\">say</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">X</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">X</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">X</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"br0\">(</span> <span class=\"br0\">)</span>    <span class=\"kw1\">X</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># cartesian product of variable number of lists using</span><br/><span class=\"co1\"># the [X] reduce cross meta-operator</span><br/><span class=\"kw3\">say</span> <span class=\"br0\">[</span><span class=\"kw1\">X</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"nu0\">1776</span><span class=\"sy0\">,</span> <span class=\"nu0\">1789</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span><span class=\"sy0\">,</span> <span class=\"nu0\">23</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"br0\">[</span><span class=\"kw1\">X</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">500</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"br0\">[</span><span class=\"kw1\">X</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>   <span class=\"br0\">(</span><span class=\"nu0\">500</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 22, "block": "<pre class=\"text highlighted_source\">function cart(sequence s)<br/>sequence res = {}<br/>    for n=2 to length(s) do<br/>        for i=1 to length(s[1]) do<br/>            for j=1 to length(s[2]) do<br/>                res = append(res,s[1][i]&amp;s[2][j])<br/>            end for<br/>        end for<br/>        if length(s)=2 then exit end if<br/>        s[1..2] = {res}<br/>        res = {}<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>?cart({{1,2},{3,4}})<br/>?cart({{3,4},{1,2}})<br/>?cart({{1,2},{}})<br/>?cart({{},{1,2}})<br/>?cart({{1776, 1789},{7, 12},{4, 14, 23},{0, 1}})<br/>?cart({{1, 2, 3},{30},{500, 100}})<br/>?cart({{1, 2, 3},{},{500, 100}})</pre>"}, {"lang": "PicoLisp", "loc": 26, "block": "<pre class=\"text highlighted_source\">(de 2lists (L1 L2)<br/>   (mapcan<br/>      '((I)<br/>         (mapcar<br/>            '((A) ((if (atom A) list cons) I A))<br/>            L2 ) )<br/>      L1 ) )<br/>(de reduce (L . @)<br/>   (ifn (rest) L (2lists L (apply reduce (rest)))) )<br/>(de cartesian (L . @)<br/>   (and L (rest) (pass reduce L)) )<br/>\u00a0<br/>(println<br/>   (cartesian (1 2)) )<br/>(println<br/>   (cartesian NIL (1 2)) )<br/>(println<br/>   (cartesian (1 2) (3 4)) )<br/>(println<br/>   (cartesian (3 4) (1 2)) )<br/>(println<br/>   (cartesian (1776 1789) (7 12) (4 14 23) (0 1)) )<br/>(println<br/>   (cartesian (1 2 3) (30) (500 100)) )<br/>(println<br/>   (cartesian (1 2 3) NIL (500 100)) )</pre>"}, {"lang": "Python", "loc": 10, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw3\">itertools</span><br/>lists_1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>lists_2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"kw1\">for</span> element <span class=\"kw1\">in</span> <span class=\"kw3\">itertools</span>.<span class=\"me1\">product</span><span class=\"br0\">(</span>*lists_1<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>element<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> element <span class=\"kw1\">in</span> <span class=\"kw3\">itertools</span>.<span class=\"me1\">product</span><span class=\"br0\">(</span>*lists_2<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>element<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "R", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>one_w_many &lt;- function(one, many) lapply(many, function(x) c(one,x))<br/>\u00a0<br/># Let's define an infix operator to perform a cartesian product.<br/>\u00a0<br/>\"%p%\" &lt;- function( a, b ) {<br/>  p = c( sapply(a, function (x) one_w_many(x, b) ) )<br/>  if (is.null(unlist(p))) list() else p}<br/>\u00a0<br/>display_prod &lt;-<br/>  function (xs) { for (x in xs) cat( paste(x, collapse=\", \"), \"\\n\" ) }<br/>\u00a0<br/>fmt_vec &lt;- function(v) sprintf(\"(%s)\", paste(v, collapse=', '))<br/>\u00a0<br/>go &lt;- function (...) {<br/>  cat(\"\\n\", paste( sapply(list(...),fmt_vec), collapse=\" * \"), \"\\n\")<br/>  prod = Reduce( '%p%', list(...) )<br/>  display_prod( prod ) }<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 17, "block": "<pre class=\"text highlighted_source\">#lang racket/base<br/>(require rackunit<br/>        \u00a0;; usually, included in \"racket\", but we're using racket/base so we<br/>        \u00a0;; show where this comes from<br/>         (only-in racket/list cartesian-product))<br/>;; these tests will pass silently<br/>(check-equal? (cartesian-product '(1 2) '(3 4))<br/>             '((1 3) (1 4) (2 3) (2 4)))<br/>(check-equal? (cartesian-product '(3 4) '(1 2))<br/>             '((3 1) (3 2) (4 1) (4 2)))<br/>(check-equal? (cartesian-product '(1 2) '()) '())<br/>(check-equal? (cartesian-product '() '(1 2)) '())<br/>\u00a0<br/>;; these will print<br/>(cartesian-product '(1776 1789) '(7 12) '(4 14 23) '(0 1))<br/>(cartesian-product '(1 2 3) '(30) '(500 100))<br/>(cartesian-product '(1 2 3) '() '(500 100))</pre>"}, {"lang": "REXX", "loc": 27, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  calculates  the   Cartesian product   of two  arbitrary-sized  lists.   */</span><br/>@<span class=\"sy0\">.</span>=                                              <span class=\"coMULTI\">/*assign the default value to  @. array*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> @<span class=\"sy0\">.</span>1                                    <span class=\"coMULTI\">/*obtain the optional value of  @.1    */</span><br/><span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>1=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  @<span class=\"sy0\">.</span>1= <span class=\"st0\">\"{1,2} {3,4}\"</span>          <span class=\"coMULTI\">/*Not specified?  Then use the defaults*/</span><br/>                     @<span class=\"sy0\">.</span>2= <span class=\"st0\">\"{3,4} {1,2}\"</span>          <span class=\"coMULTI\">/* \"      \"         \"   \"   \"      \"   */</span><br/>                     @<span class=\"sy0\">.</span>3= <span class=\"st0\">\"{1,2} {}\"</span>             <span class=\"coMULTI\">/* \"      \"         \"   \"   \"      \"   */</span><br/>                     @<span class=\"sy0\">.</span>4= <span class=\"st0\">\"{}    {3,4}\"</span>          <span class=\"coMULTI\">/* \"      \"         \"   \"   \"      \"   */</span><br/>                     @<span class=\"sy0\">.</span>5= <span class=\"st0\">\"{1,2} {3,4,5}\"</span>        <span class=\"coMULTI\">/* \"      \"         \"   \"   \"      \"   */</span><br/>                <span class=\"kw3\">end</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  process each of the  @.n values*/</span><br/>  <span class=\"kw1\">do</span> n=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> @<span class=\"sy0\">.</span>n <span class=\"sy0\">\\</span>= <span class=\"st0\">''</span>                        <span class=\"coMULTI\">/*keep processing while there's a value*/</span><br/>  z=<span class=\"kw6\">translate</span><span class=\"br0\">(</span> <span class=\"kw6\">space</span><span class=\"br0\">(</span> @<span class=\"sy0\">.</span>n, <span class=\"nu0\">0</span><span class=\"br0\">)</span>,  ,  <span class=\"st0\">','</span><span class=\"br0\">)</span>          <span class=\"coMULTI\">/*translate the  commas  to blanks.    */</span><br/>     <span class=\"kw1\">do</span> #=<span class=\"nu0\">1</span>  <span class=\"kw2\">until</span> z==<span class=\"st0\">''</span>                         <span class=\"coMULTI\">/*process each elements in first list. */</span><br/>     <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  z   <span class=\"st0\">'{'</span>  x<span class=\"sy0\">.</span>#  <span class=\"st0\">'}'</span>   z            <span class=\"coMULTI\">/*parse the list  (contains elements). */</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*#*/</span><br/>  $=<br/>     <span class=\"kw1\">do</span>       i=<span class=\"nu0\">1</span>   <span class=\"kw2\">for</span> #-<span class=\"nu0\">1</span>                      <span class=\"coMULTI\">/*process the subsequent lists.        */</span><br/>       <span class=\"kw1\">do</span>     a=<span class=\"nu0\">1</span>   <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>x<span class=\"sy0\">.</span>i<span class=\"br0\">)</span>               <span class=\"coMULTI\">/*obtain the elements of the first list*/</span><br/>         <span class=\"kw1\">do</span>   j=i+<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> #-<span class=\"nu0\">1</span>                      <span class=\"coMULTI\">/*   \"    \"  subsequent lists.         */</span><br/>           <span class=\"kw1\">do</span> b=<span class=\"nu0\">1</span>   <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>x<span class=\"sy0\">.</span>j<span class=\"br0\">)</span>               <span class=\"coMULTI\">/*   \"    \" elements of subsequent list*/</span><br/>           $=$<span class=\"st0\">',('</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>x<span class=\"sy0\">.</span>i, a<span class=\"br0\">)</span><span class=\"st0\">\",\"</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>x<span class=\"sy0\">.</span>j, b<span class=\"br0\">)</span><span class=\"st0\">')'</span> <span class=\"coMULTI\">/*append partial cartesian product \u2500\u2500\u25ba$*/</span><br/>           <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*jj*/</span><br/>         <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*j */</span><br/>       <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*ii*/</span><br/>     <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*i */</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'Cartesian product of '</span>       <span class=\"kw6\">space</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>n<span class=\"br0\">)</span>       <span class=\"st0\">\" is \u2500\u2500\u2500\u25ba {\"</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>$, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"st0\">'}'</span><br/>  <span class=\"kw3\">end</span>           <span class=\"coMULTI\">/*n */</span>                           <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Cartesian product of two or more lists<br/>\u00a0<br/>list1 = [[1,2],[3,4]]<br/>list2 = [[3,4],[1,2]]<br/>cartesian(list1)<br/>cartesian(list2)<br/>\u00a0<br/>func cartesian(list1)<br/>     for n = 1 to len(list1[1])<br/>         for m = 1 to len(list1[2])<br/>             see \"(\" + list1[1][n] + \", \" + list1[2][m] + \")\" + nl<br/>         next<br/>      next<br/>      see nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 8, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">p</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">product</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <br/><span class=\"kw3\">p</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">]</span>.<span class=\"me1\">product</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw3\">p</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">product</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw3\">p</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">product</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <br/><span class=\"kw3\">p</span> <span class=\"br0\">[</span><span class=\"nu0\">1776</span>, <span class=\"nu0\">1789</span><span class=\"br0\">]</span>.<span class=\"me1\">product</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">7</span>, <span class=\"nu0\">12</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">4</span>, <span class=\"nu0\">14</span>, <span class=\"nu0\">23</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw3\">p</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">product</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">30</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">500</span>, <span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <br/><span class=\"kw3\">p</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">product</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">500</span>, <span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 30, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> cartesianProduct<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">(</span>lst<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>List<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/**<br/>    * Prepend single element to all lists of list<br/>    * @param e single elemetn<br/>    * @param ll list of list<br/>    * @param a accumulator for tail recursive implementation<br/>    * @return list of lists with prepended element e<br/>    */</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> pel<span class=\"br0\">(</span>e<span class=\"sy0\">:</span> T,<br/>          ll<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>List<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">]</span>,<br/>          a<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>List<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> Nil<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>List<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span><br/>    ll <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Nil <span class=\"sy0\">=&gt;</span> a.<span class=\"me1\">reverse</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> x <span class=\"sy0\">::</span> xs <span class=\"sy0\">=&gt;</span> pel<span class=\"br0\">(</span>e, xs, <span class=\"br0\">(</span>e <span class=\"sy0\">::</span> x<span class=\"br0\">)</span> <span class=\"sy0\">::</span> a <span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>  lst.<span class=\"me1\">toList</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Nil <span class=\"sy0\">=&gt;</span> Nil<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> x <span class=\"sy0\">::</span> Nil <span class=\"sy0\">=&gt;</span> List<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> x <span class=\"sy0\">::</span> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span><br/>      x <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Nil <span class=\"sy0\">=&gt;</span> Nil<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span><br/>          lst.<span class=\"me1\">par</span>.<span class=\"me1\">foldRight</span><span class=\"br0\">(</span>List<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>l, a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>            l.<span class=\"me1\">flatMap</span><span class=\"br0\">(</span>pel<span class=\"br0\">(</span><span class=\"sy0\">_</span>, a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">dropRight</span><span class=\"br0\">(</span>x.<span class=\"me1\">size</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">cartesian<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">5</span>,<span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">say</span><br/>cartesian<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">3</span>,<span class=\"nu0\">4</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">5</span>,<span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span>, <span class=\"br0\">{</span><span class=\"sy0\">|*</span>arr<span class=\"sy0\">|</span> say arr <span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "Standard ML", "loc": 4, "block": "<pre class=\"text highlighted_source\">fun prodList (nil,     _) = nil<br/>  | prodList ((x::xs), ys) = map (fn y =&gt; (x,y)) ys @ prodList (xs, ys)<br/>\u00a0<br/>fun naryProdList zs = foldl (fn (xs, ys) =&gt; map op:: (prodList (xs, ys))) [[]] (rev zs)</pre>"}, {"lang": "Stata", "loc": 20, "block": "<pre class=\"text highlighted_source\">. list<br/>\u00a0<br/>     +-------+<br/>     | a   b |<br/>     |-------|<br/>  1. | 1   3 |<br/>  2. | 2   4 |<br/>     +-------+<br/>\u00a0<br/>. fillin a b<br/>. list<br/>\u00a0<br/>     +-----------------+<br/>     | a   b   _fillin |<br/>     |-----------------|<br/>  1. | 1   3         0 |<br/>  2. | 1   4         1 |<br/>  3. | 2   3         1 |<br/>  4. | 2   4         0 |<br/>     +-----------------+</pre>"}, {"lang": "zkl", "loc": 7, "block": "<pre class=\"text highlighted_source\">zkl: Walker.cproduct(List(1,2),List(3,4)).walk().println();<br/>L(L(1,3),L(1,4),L(2,3),L(2,4))<br/>zkl: foreach a,b in (List(1,2),List(3,4)){ print(\"(%d,%d) \".fmt(a,b)) }<br/>(1,3) (1,4) (2,3) (2,4)<br/>\u00a0<br/>zkl: Walker.cproduct(List(3,4),List(1,2)).walk().println();<br/>L(L(3,1),L(3,2),L(4,1),L(4,2))</pre>"}]}