{"task": "Pi", "blocks": [{"lang": "360 Assembly", "loc": 104, "block": "<pre class=\"text highlighted_source\">*        Spigot algorithm do the digits of PI  02/07/2016<br/>PISPIG   CSECT<br/>         USING  PISPIG,R13         base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    prolog<br/>         ST     R13,4(R15)         \"<br/>         ST     R15,8(R13)         \" <br/>         LR     R13,R15            \"<br/>         SR     R0,R0              0<br/>         ST     R0,MORE            more=0<br/>         LA     R6,1               i=1 <br/>LOOPI1   C      R6,=A(NBUF)        do i=1 to hbound(buf)<br/>         BH     ELOOPI1            \"<br/>         SR     R9,R9                karray=0<br/>         L      R7,=A(NVECT)         j=hbound(vect)<br/>         LR     R1,R7                  j<br/>         SLA    R1,2                   .<br/>         LA     R10,VECT-4(R1)       <a class=\"__cf_email__\" data-cfemail=\"b2c083828ff2c4d7d1c6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(j)<br/>LOOPJ    EQU    *                    do j=hbound(vect) to 1 by -1<br/>         L      R5,=F'100000'            100000<br/>         M      R4,0(R10)                *vect(j)<br/>         LR     R2,R5                    r2=100000*vect(j)<br/>         LR     R5,R9                    karray<br/>         MR     R4,R7                    karray*j<br/>         AR     R2,R5                    r2+karray*j<br/>         LR     R11,R2                 n=100000*vect(j)+karray*j<br/>         LR     R3,R7                    j<br/>         SLA    R3,1                     2*j<br/>         BCTR   R3,0                     2*j-1)<br/>         LR     R4,R11                   n<br/>         SRDA   R4,32                    .<br/>         DR     R4,R3                    n/(2*j-1)<br/>         LR     R9,R5                  karray=n/(2*j-1)<br/>         LR     R5,R9                    karray<br/>         MR     R4,R3                    karray*(2*j-1)<br/>         LR     R1,R11                   n<br/>         SR     R1,R5                    n-karray*(2*j-1)<br/>         ST     R1,0(R10)              vect(j)=n-karray*(2*j-1)<br/>         SH     R10,=H'4'              <a class=\"__cf_email__\" data-cfemail=\"44367574790432212730\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(j)<br/>         BCT    R7,LOOPJ             end do j<br/>         LR     R4,R9                karray<br/>         SRDA   R4,32                .<br/>         D      R4,=F'100000'        karray/100000<br/>         LR     R11,R5               k=karray/100000<br/>         L      R2,MORE              more<br/>         AR     R2,R11               +k<br/>         LR     R1,R6                i<br/>         SLA    R1,2                 .<br/>         ST     R2,BUF-4(R1)         buf(i)=more+k<br/>         LR     R5,R11                 k<br/>         M      R4,=F'100000'          *100000<br/>         LR     R1,R9                  karray<br/>         SR     R1,R5                  -k*100000<br/>         ST     R1,MORE              more=karray-k*100000<br/>         LA     R6,1(R6)             i=i+1<br/>         B      LOOPI1             end do i<br/>ELOOPI1  L      R1,BUF             buf(1)<br/>         CVD    R1,PACKED          convert buf(1) to packed decimal<br/>         OI     PACKED+7,X'0F'     prepare unpack<br/>         UNPK   PG(1),PACKED       packed decimal to zoned printable<br/>         MVI    PG+1,C'.'          output '.'<br/>         XPRNT  PG,80              print buffer<br/>         MVC    PG,=CL80' '        clear buffer<br/>         LA     R3,PG              pgi=0<br/>         LA     R6,2               i=2<br/>LOOPI2   C      R6,=A(NBUF)        do i=2 to hbound(buf)<br/>         BH     ELOOPI2            \"  <br/>         MVC    0(1,R3),=C' '        output ' '<br/>         LA     R3,1(R3)             pgi=pgi+1<br/>         LR     R1,R6                i<br/>         SLA    R1,2                 .<br/>         L      R2,BUF-4(R1)         buf(i)<br/>         CVD    R2,PACKED            convert v to packed decimal<br/>         OI     PACKED+7,X'0F'       prepare unpack<br/>         UNPK   XDEC,PACKED          packed decimal to zoned printable<br/>         MVC    0(5,R3),XDEC+7       output buf(i) with 5 decimals<br/>         LA     R3,5(R3)             pgi=pgi+5<br/>         LR     R4,R6                i<br/>         BCTR   R4,0                 i-1<br/>         SRDA   R4,32                .<br/>         D      R4,=F'10'            (i-1)/10<br/>         LTR    R4,R4                if (i-1)//10=0<br/>         BNZ    NOSKIP               then<br/>         XPRNT  PG,80                  print buffer<br/>         LA     R3,PG                  pgi=0<br/>         MVC    PG,=CL80' '            clear buffer<br/>NOSKIP   LA     R6,1(R6)             i=i+1<br/>         B      LOOPI2             end do i<br/>ELOOPI2  L      R13,4(0,R13)       epilog <br/>         LM     R14,R12,12(R13)    \"<br/>         XR     R15,R15            \"<br/>         BR     R14                exit<br/>         LTORG  <br/>MORE     DS     F                  more<br/>PACKED   DS     0D,PL8             packed decimal<br/>PG       DC     CL80' '            buffer<br/>XDEC     DS     CL12               temp<br/>BUF      DC     (NBUF)F'0'         buf(nbuf)<br/>VECT     DC     (NVECT)F'2'        vect(nvect) init 2<br/>         YREGS<br/>NBUF     EQU    201                number of 5 decimals<br/>NVECT    EQU    3350               nvect=ceil(nbuf*50/3)<br/>         END    PISPIG</pre>"}, {"lang": "Ada", "loc": 112, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Command_Line</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> GNU_Multiple_Precision.<span class=\"me1\">Big_Integers</span>;<br/><span class=\"kw3\">with</span> GNU_Multiple_Precision.<span class=\"me1\">Big_Rationals</span>;<br/><span class=\"kw3\">use</span> GNU_Multiple_Precision;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Pi_Digits <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Int <span class=\"kw1\">is</span> <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span> ** <span class=\"nu0\">64</span>;<br/>   <span class=\"kw3\">package</span> Int_To_Big <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Big_Integers.<span class=\"me1\">Modular_Conversions</span> <span class=\"br0\">(</span>Int<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- constants</span><br/>   Zero\u00a0: <span class=\"kw3\">constant</span> Big_Integer\u00a0:= Int_To_Big.<span class=\"me1\">To_Big_Integer</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>   One\u00a0: <span class=\"kw3\">constant</span> Big_Integer\u00a0:= Int_To_Big.<span class=\"me1\">To_Big_Integer</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   Two\u00a0: <span class=\"kw3\">constant</span> Big_Integer\u00a0:= Int_To_Big.<span class=\"me1\">To_Big_Integer</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>   Three\u00a0: <span class=\"kw3\">constant</span> Big_Integer\u00a0:= Int_To_Big.<span class=\"me1\">To_Big_Integer</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>   Four\u00a0: <span class=\"kw3\">constant</span> Big_Integer\u00a0:= Int_To_Big.<span class=\"me1\">To_Big_Integer</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>   Ten\u00a0: <span class=\"kw3\">constant</span> Big_Integer\u00a0:= Int_To_Big.<span class=\"me1\">To_Big_Integer</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- type LFT = (Integer, Integer, Integer, Integer</span><br/>   <span class=\"kw3\">type</span> LFT <span class=\"kw1\">is</span> <span class=\"kw3\">record</span><br/>      Q, R, S, T\u00a0: Big_Integer;<br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- extr\u00a0:: LFT -&gt; Integer -&gt; Rational</span><br/>   <span class=\"kw3\">function</span> Extr <span class=\"br0\">(</span>T\u00a0: LFT; X\u00a0: Big_Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Big_Rational <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">use</span> Big_Integers;<br/>      Result\u00a0: Big_Rational;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"co1\">-- extr (q,r,s,t) x = ((fromInteger q) * x + (fromInteger r)) /</span><br/>      <span class=\"co1\">--                    ((fromInteger s) * x + (fromInteger t))</span><br/>      Big_Rationals.<span class=\"me1\">Set_Numerator</span> <span class=\"br0\">(</span>Item         =&gt; Result,<br/>                                   New_Value    =&gt; T.<span class=\"me1\">Q</span> * X + T.<span class=\"me1\">R</span>,<br/>                                   Canonicalize =&gt; False<span class=\"br0\">)</span>;<br/>      Big_Rationals.<span class=\"me1\">Set_Denominator</span> <span class=\"br0\">(</span>Item      =&gt; Result,<br/>                                     New_Value =&gt; T.<span class=\"me1\">S</span> * X + T.<span class=\"me1\">T</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> Extr;<br/>\u00a0<br/>   <span class=\"co1\">-- unit\u00a0:: LFT</span><br/>   <span class=\"kw3\">function</span> Unit <span class=\"kw1\">return</span> LFT <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"co1\">-- unit = (1,0,0,1)</span><br/>      <span class=\"kw1\">return</span> LFT'<span class=\"br0\">(</span>Q =&gt; One, R =&gt; Zero, S =&gt; Zero, T =&gt; One<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Unit;<br/>\u00a0<br/>   <span class=\"co1\">-- comp\u00a0:: LFT -&gt; LFT -&gt; LFT</span><br/>   <span class=\"kw3\">function</span> Comp <span class=\"br0\">(</span>T1, T2\u00a0: LFT<span class=\"br0\">)</span> <span class=\"kw1\">return</span> LFT <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">use</span> Big_Integers;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"co1\">-- comp (q,r,s,t) (u,v,w,x) = (q*u+r*w,q*v+r*x,s*u+t*w,s*v+t*x)</span><br/>      <span class=\"kw1\">return</span> LFT'<span class=\"br0\">(</span>Q =&gt; T1.<span class=\"me1\">Q</span> * T2.<span class=\"me1\">Q</span> + T1.<span class=\"me1\">R</span> * T2.<span class=\"me1\">S</span>,<br/>                  R =&gt; T1.<span class=\"me1\">Q</span> * T2.<span class=\"me1\">R</span> + T1.<span class=\"me1\">R</span> * T2.<span class=\"me1\">T</span>,<br/>                  S =&gt; T1.<span class=\"me1\">S</span> * T2.<span class=\"me1\">Q</span> + T1.<span class=\"me1\">T</span> * T2.<span class=\"me1\">S</span>,<br/>                  T =&gt; T1.<span class=\"me1\">S</span> * T2.<span class=\"me1\">R</span> + T1.<span class=\"me1\">T</span> * T2.<span class=\"me1\">T</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Comp;<br/>\u00a0<br/>   <span class=\"co1\">-- lfts = [(k, 4*k+2, 0, 2*k+1) | k&lt;-[1..]</span><br/>   K\u00a0: Big_Integer\u00a0:= Zero;<br/>   <span class=\"kw3\">function</span> LFTS <span class=\"kw1\">return</span> LFT <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">use</span> Big_Integers;<br/>   <span class=\"kw1\">begin</span><br/>      K\u00a0:= K + One;<br/>      <span class=\"kw1\">return</span> LFT'<span class=\"br0\">(</span>Q =&gt; K,<br/>                  R =&gt; Four * K + Two,<br/>                  S =&gt; Zero,<br/>                  T =&gt; Two * K + One<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> LFTS;<br/>\u00a0<br/>   <span class=\"co1\">-- next z = floor (extr z 3)</span><br/>   <span class=\"kw3\">function</span> Next <span class=\"br0\">(</span>T\u00a0: LFT<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Big_Integer <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> Big_Rationals.<span class=\"me1\">To_Big_Integer</span> <span class=\"br0\">(</span>Extr <span class=\"br0\">(</span>T, Three<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Next;<br/>\u00a0<br/>   <span class=\"co1\">-- safe z n = (n == floor (extr z 4)</span><br/>   <span class=\"kw3\">function</span> Safe <span class=\"br0\">(</span>T\u00a0: LFT; N\u00a0: Big_Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> N = Big_Rationals.<span class=\"me1\">To_Big_Integer</span> <span class=\"br0\">(</span>Extr <span class=\"br0\">(</span>T, Four<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Safe;<br/>\u00a0<br/>   <span class=\"co1\">-- prod z n = comp (10, -10*n, 0, 1)</span><br/>   <span class=\"kw3\">function</span> Prod <span class=\"br0\">(</span>T\u00a0: LFT; N\u00a0: Big_Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> LFT <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">use</span> Big_Integers;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> Comp <span class=\"br0\">(</span>LFT'<span class=\"br0\">(</span>Q =&gt; Ten, R =&gt; -Ten * N, S =&gt; Zero, T =&gt; One<span class=\"br0\">)</span>, T<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Prod;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Print_Pi <span class=\"br0\">(</span>Digit_Count\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      Z\u00a0: LFT\u00a0:= Unit;<br/>      Y\u00a0: Big_Integer;<br/>      Count\u00a0: Natural\u00a0:= <span class=\"nu0\">0</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">loop</span><br/>         Y\u00a0:= Next <span class=\"br0\">(</span>Z<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">if</span> Safe <span class=\"br0\">(</span>Z, Y<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            Count\u00a0:= Count + <span class=\"nu0\">1</span>;<br/>            Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>Big_Integers.<span class=\"me1\">Image</span> <span class=\"br0\">(</span>Y<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> Count &gt;= Digit_Count;<br/>            Z\u00a0:= Prod <span class=\"br0\">(</span>Z, Y<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">else</span><br/>            Z\u00a0:= Comp <span class=\"br0\">(</span>Z, LFTS<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Print_Pi;<br/>\u00a0<br/>   N\u00a0: Positive\u00a0:= <span class=\"nu0\">250</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">if</span> Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument_Count</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>      N\u00a0:= Positive'Value <span class=\"br0\">(</span>Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   Print_Pi <span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Pi_Digits;</pre>"}, {"lang": "AutoHotkey", "loc": 66, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/_NoEnv.htm\"><span class=\"kw5\">#NoEnv</span></a><br/><a href=\"http://www.autohotkey.com/docs/commands/_SingleInstance.htm\"><span class=\"kw5\">#SingleInstance</span></a><span class=\"sy0\">,</span> Force<br/><a href=\"http://www.autohotkey.com/docs/commands/SetBatchLines.htm\"><span class=\"kw3\">SetBatchLines</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/><a href=\"http://www.autohotkey.com/docs/commands/_Include.htm\"><span class=\"kw5\">#Include</span></a> mpl<span class=\"sy0\">.</span>ahk<br/>dot<span class=\"sy0\">:=</span><span class=\"st0\">\".\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">0</span><br/><span class=\"sy0\">,</span> MP_SET<span class=\"br0\">(</span>q<span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><br/><span class=\"sy0\">,</span> MP_SET<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/><span class=\"sy0\">,</span> MP_SET<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><br/><span class=\"sy0\">,</span> MP_SET<span class=\"br0\">(</span>k<span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><br/><span class=\"sy0\">,</span> MP_SET<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"st0\">\"3\"</span><span class=\"br0\">)</span><br/><span class=\"sy0\">,</span> MP_SET<span class=\"br0\">(</span>l<span class=\"sy0\">,</span> <span class=\"st0\">\"3\"</span><span class=\"br0\">)</span><br/><span class=\"sy0\">,</span> MP_SET<span class=\"br0\">(</span>ONE<span class=\"sy0\">,</span> <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><br/><span class=\"sy0\">,</span> MP_SET<span class=\"br0\">(</span>TWO<span class=\"sy0\">,</span> <span class=\"st0\">\"2\"</span><span class=\"br0\">)</span><br/><span class=\"sy0\">,</span> MP_SET<span class=\"br0\">(</span>THREE<span class=\"sy0\">,</span> <span class=\"st0\">\"3\"</span><span class=\"br0\">)</span><br/><span class=\"sy0\">,</span> MP_SET<span class=\"br0\">(</span>FOUR<span class=\"sy0\">,</span> <span class=\"st0\">\"4\"</span><span class=\"br0\">)</span><br/><span class=\"sy0\">,</span> MP_SET<span class=\"br0\">(</span>SEVEN<span class=\"sy0\">,</span> <span class=\"st0\">\"7\"</span><span class=\"br0\">)</span><br/><span class=\"sy0\">,</span> MP_SET<span class=\"br0\">(</span>TEN<span class=\"sy0\">,</span> <span class=\"st0\">\"10\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><br/><span class=\"br0\">{</span><br/>\tMP_MUL<span class=\"br0\">(</span>q4<span class=\"sy0\">,</span> q<span class=\"sy0\">,</span> FOUR<span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span> MP_ADD<span class=\"br0\">(</span>q4r<span class=\"sy0\">,</span> q4<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span> MP_SUB<span class=\"br0\">(</span>q4rt<span class=\"sy0\">,</span> q4r<span class=\"sy0\">,</span> t<span class=\"br0\">)</span><br/>\t<span class=\"sy0\">,</span> MP_MUL<span class=\"br0\">(</span>tn<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span>MP_CMP<span class=\"br0\">(</span>q4rt<span class=\"sy0\">,</span>tn<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\ts <span class=\"sy0\">:=</span> MP_DEC<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">.</span> dot<br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/OutputDebug.htm\"><span class=\"kw3\">OutputDebug</span></a> <span class=\"re0\">%s%</span><br/>\t\t  dot <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>\t\t<span class=\"sy0\">,</span> i<span class=\"sy0\">++</span><br/>\t\t<span class=\"sy0\">,</span> MP_MUL<span class=\"br0\">(</span>tn<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_SUB<span class=\"br0\">(</span>rtn<span class=\"sy0\">,</span> r<span class=\"sy0\">,</span> tn<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_MUL<span class=\"br0\">(</span>nr<span class=\"sy0\">,</span> rtn<span class=\"sy0\">,</span> TEN<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_MUL<span class=\"br0\">(</span>q3<span class=\"sy0\">,</span> q<span class=\"sy0\">,</span> THREE<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_ADD<span class=\"br0\">(</span>q3r<span class=\"sy0\">,</span> q3<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_DIV<span class=\"br0\">(</span>q3rt<span class=\"sy0\">,</span> remainder<span class=\"sy0\">,</span> q3r<span class=\"sy0\">,</span> t<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_SUB<span class=\"br0\">(</span>q3rtn<span class=\"sy0\">,</span> q3rt<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_MUL<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> q3rtn<span class=\"sy0\">,</span> TEN<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_MUL<span class=\"br0\">(</span>tmp<span class=\"sy0\">,</span> q<span class=\"sy0\">,</span> TEN<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_CPY<span class=\"br0\">(</span>q<span class=\"sy0\">,</span> tmp<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_CPY<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> nr<span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">Else</span><br/>\t<span class=\"br0\">{</span><br/>\t\tMP_MUL<span class=\"br0\">(</span>q2<span class=\"sy0\">,</span> q<span class=\"sy0\">,</span> TWO<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_ADD<span class=\"br0\">(</span>q2r<span class=\"sy0\">,</span> q2<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_MUL<span class=\"br0\">(</span>nr<span class=\"sy0\">,</span> q2r<span class=\"sy0\">,</span> l<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_MUL<span class=\"br0\">(</span>k7<span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> SEVEN<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_ADD<span class=\"br0\">(</span>k72<span class=\"sy0\">,</span> k7<span class=\"sy0\">,</span> TWO<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_MUL<span class=\"br0\">(</span>qk<span class=\"sy0\">,</span> q<span class=\"sy0\">,</span> k72<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_MUL<span class=\"br0\">(</span>rl<span class=\"sy0\">,</span> r<span class=\"sy0\">,</span> l<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_ADD<span class=\"br0\">(</span>qkrl<span class=\"sy0\">,</span> qk<span class=\"sy0\">,</span> rl<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_MUL<span class=\"br0\">(</span>tl<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> l<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_DIV<span class=\"br0\">(</span>nn<span class=\"sy0\">,</span> remainder<span class=\"sy0\">,</span> qkrl<span class=\"sy0\">,</span> tl<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_MUL<span class=\"br0\">(</span>tmp<span class=\"sy0\">,</span> q<span class=\"sy0\">,</span> k<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_CPY<span class=\"br0\">(</span>q<span class=\"sy0\">,</span> tmp<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_MUL<span class=\"br0\">(</span>tmp<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> l<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_CPY<span class=\"br0\">(</span>t<span class=\"sy0\">,</span> tmp<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_ADD<span class=\"br0\">(</span>tmp<span class=\"sy0\">,</span> l<span class=\"sy0\">,</span> TWO<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_CPY<span class=\"br0\">(</span>l<span class=\"sy0\">,</span> tmp<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_ADD<span class=\"br0\">(</span>tmp<span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> ONE<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_CPY<span class=\"br0\">(</span>k<span class=\"sy0\">,</span> tmp<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_CPY<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> nn<span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span> MP_CPY<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> nr<span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "ALGOL 68", "loc": 51, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\">#!/usr/local/bin/a68g --script #</span><br/>\u00a0<br/><span class=\"kw3\">INT</span> base <span class=\"sy1\">:=</span> 10<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> YIELDINT <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span><span class=\"br0\">(</span><span class=\"kw3\">INT</span><span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">PROC</span> gen <span class=\"kw23\">pi</span> digits <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> decimal places<span class=\"sy1\">,</span> YIELDINT yield<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>  <span class=\"kw3\">INT</span> nine <span class=\"sy1\">=</span> base <span class=\"sy1\">-</span> 1<span class=\"sy1\">;</span><br/>  <span class=\"kw3\">INT</span> nines <span class=\"sy1\">:=</span> 0<span class=\"sy1\">,</span> predigit <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span> <span class=\"coMULTI\"># First predigit is a 0 #</span><br/>  <span class=\"br0\">[</span>decimal places<span class=\"sy1\">*</span>10 <span class=\"kw12\">OVER</span> 3<span class=\"br0\">]</span><span class=\"coMULTI\">#LONG#</span> <span class=\"kw3\">INT</span> digits<span class=\"sy1\">;</span> <span class=\"coMULTI\"># We need 3 times the digits to calculate #</span><br/>  <span class=\"kw2\">FOR</span> place <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> digits <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> digits <span class=\"kw2\">DO</span> digits<span class=\"br0\">[</span>place<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 2 <span class=\"kw2\">OD</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># Start with 2s #</span><br/>  <span class=\"kw2\">FOR</span> place <span class=\"kw2\">TO</span> decimal places <span class=\"sy1\">+</span> 1 <span class=\"kw2\">DO</span><br/>    <span class=\"kw3\">INT</span> digit <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">UPB</span> digits <span class=\"kw2\">BY</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> <span class=\"kw8\">LWB</span> digits <span class=\"kw2\">DO</span> <span class=\"coMULTI\"># Work backwards #</span><br/>        <span class=\"kw3\">INT</span> x <span class=\"sy1\">:=</span> <span class=\"coMULTI\">#SHORTEN#</span><span class=\"br0\">(</span>base<span class=\"sy1\">*</span>digits<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">+</span> <span class=\"coMULTI\">#LENG#</span> digit<span class=\"sy1\">*</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        digits<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> x <span class=\"kw12\">MOD</span> <span class=\"br0\">(</span>2<span class=\"sy1\">*</span>i<span class=\"sy1\">-</span>1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        digit <span class=\"sy1\">:=</span> x <span class=\"kw12\">OVER</span> <span class=\"br0\">(</span>2<span class=\"sy1\">*</span>i<span class=\"sy1\">-</span>1<span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    digits<span class=\"br0\">[</span><span class=\"kw8\">LWB</span> digits<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> digit <span class=\"kw12\">MOD</span> base<span class=\"sy1\">;</span> digit <span class=\"kw17\">OVERAB</span> base<span class=\"sy1\">;</span><br/>    nines <span class=\"sy1\">:=</span> <br/>      <span class=\"kw2\">IF</span> digit <span class=\"sy1\">=</span> nine <span class=\"kw2\">THEN</span> <br/>        nines <span class=\"sy1\">+</span> 1<br/>      <span class=\"kw2\">ELSE</span><br/>        <span class=\"kw2\">IF</span> digit <span class=\"sy1\">=</span> base <span class=\"kw2\">THEN</span><br/>          yield<span class=\"br0\">(</span>predigit<span class=\"sy1\">+</span>1<span class=\"br0\">)</span><span class=\"sy1\">;</span> predigit <span class=\"sy1\">:=</span> 0 <span class=\"sy1\">;</span><br/>          <span class=\"kw2\">FOR</span> repeats <span class=\"kw2\">TO</span> nines <span class=\"kw2\">DO</span> yield<span class=\"br0\">(</span>0<span class=\"br0\">)</span> <span class=\"kw2\">OD</span> <span class=\"coMULTI\"># zeros #</span> <br/>        <span class=\"kw2\">ELSE</span><br/>          <span class=\"kw2\">IF</span> place <span class=\"kw15\">NE</span> 1 <span class=\"kw2\">THEN</span> yield<span class=\"br0\">(</span>predigit<span class=\"br0\">)</span> <span class=\"kw2\">FI</span><span class=\"sy1\">;</span> predigit <span class=\"sy1\">:=</span> digit<span class=\"sy1\">;</span><br/>          <span class=\"kw2\">FOR</span> repeats <span class=\"kw2\">TO</span> nines <span class=\"kw2\">DO</span> yield<span class=\"br0\">(</span>nine<span class=\"br0\">)</span> <span class=\"kw2\">OD</span><br/>        <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        0<br/>      <span class=\"kw2\">FI</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  yield<span class=\"br0\">(</span>predigit<span class=\"br0\">)</span><br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw3\">INT</span> feynman point <span class=\"sy1\">=</span> 762<span class=\"sy1\">;</span> <span class=\"coMULTI\"># feynman point + 4 is a good test case #</span><br/><span class=\"coMULTI\"># the 33rd decimal place is a shorter tricky test case #</span><br/>  <span class=\"kw3\">INT</span> test decimal places <span class=\"sy1\">=</span> <span class=\"kw8\">UPB</span> <span class=\"st0\">\"3.1415926.......................502\"</span><span class=\"sy1\">-</span>2<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">INT</span> width <span class=\"sy1\">=</span> <span class=\"kw8\">ENTIER</span> <span class=\"kw24\">log</span><span class=\"br0\">(</span>base<span class=\"sy1\">*</span><span class=\"br0\">(</span>1<span class=\"sy1\">+</span><span class=\"kw20\">small real</span><span class=\"sy1\">*</span>10<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <br/>\u00a0<br/><span class=\"coMULTI\"># iterate throught the digits as they are being found #</span><br/><span class=\"coMULTI\"># FOR INT digit IN #</span> gen <span class=\"kw23\">pi</span> digits<span class=\"br0\">(</span>test decimal places<span class=\"coMULTI\">#) DO ( #</span><span class=\"sy1\">,</span><br/>  <span class=\"coMULTI\">##</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> digit<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$n<span class=\"br0\">(</span>width<span class=\"br0\">)</span>d$<span class=\"sy1\">,</span>digit<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><br/><span class=\"coMULTI\"># OD #</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "BASIC", "loc": 59, "block": "<pre class=\"text highlighted_source\">cls<br/>\u00a0<br/>n   =1000<br/>len = 10*n \\ 4<br/>needdecimal = true<br/>dim a(len)<br/>nines = 0<br/>predigit = 0\t# {First predigit is a 0}<br/>\u00a0<br/>for j = 1 to len<br/>   a[j-1] = 2\t# {Start with 2s}<br/>next j<br/>\u00a0<br/>for j = 1 to n<br/>   q = 0<br/>   for i = len to 1 step -1<br/>      #  {Work backwards}<br/>      x   = 10*a[i-1] + q*i<br/>      a[i-1] = x\u00a0% (2*i - 1)<br/>      q    = x \\ (2*i - 1)<br/>   next i<br/>   a[0] = q\u00a0% 10<br/>   q = q \\ 10<br/>   if q = 9 then<br/>      nines = nines + 1<br/>   else<br/>      if q = 10 then<br/>         d = predigit+1: gosub outputd<br/>         if nines &gt; 0 then<br/>            for k = 1 to nines<br/>               d =  0: gosub outputd<br/>            next k<br/>         end if<br/>         predigit = 0<br/>         nines = 0<br/>      else<br/>         d = predigit: gosub outputd<br/>         predigit = q<br/>         if nines &lt;&gt; 0 then<br/>            for k = 1 to nines<br/>               d =  9: gosub outputd<br/>            next k<br/>            nines = 0<br/>         end if<br/>      end if<br/>   end if<br/>next j<br/>print predigit<br/>end<br/>\u00a0<br/>outputd:<br/>if needdecimal then<br/>   if d = 0 then return<br/>   print d + \".\";<br/>   needdecimal = false<br/>else<br/>   print d;<br/>end if<br/>return</pre>"}, {"lang": "BBC BASIC", "loc": 23, "block": "<pre class=\"text highlighted_source\">      WIDTH 80<br/>      M% = (HIMEM-END-1000) / 4<br/>      DIM B%(M%)<br/>      FOR I% = 0 TO M%\u00a0: B%(I%) = 20\u00a0: NEXT<br/>      E% = 0<br/>      L% = 2<br/>      FOR C% = M% TO 14 STEP -7<br/>        D% = 0<br/>        A% = C%*2-1<br/>        FOR P% = C% TO 1 STEP -1<br/>          D% = D%*P% + B%(P%)*&amp;64<br/>          B%(P%) = D% MOD A%<br/>          D% DIV= A%<br/>          A% -= 2<br/>        NEXT<br/>        CASE TRUE OF<br/>          WHEN D% = 99: E% = E% * 100 + D%\u00a0: L% += 2<br/>          WHEN C% = M%: PRINT\u00a0;(D% DIV 100) / 10;\u00a0: E% = D% MOD 100<br/>          OTHERWISE:<br/>            PRINT RIGHT$(STRING$(L%,\"0\") + STR$(E% + D% DIV 100),L%);<br/>            E% = D% MOD 100\u00a0: L% = 2<br/>        ENDCASE<br/>      NEXT</pre>"}, {"lang": "bc", "loc": 30, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/bc -l<br/>\u00a0<br/>scaleinc= 20<br/>\u00a0<br/>define zeropad ( n ) {<br/>    auto m<br/>    for ( m= scaleinc - 1; m &gt; 0; --m ) {<br/>        if ( n &lt; 10^m ) {<br/>            print \"0\"<br/>        }<br/>    }<br/>    return ( n )<br/>}<br/>\u00a0<br/>wantscale= scaleinc - 2<br/>scale= wantscale + 2<br/>oldpi= 4*a(1)<br/>scale= wantscale<br/>oldpi= oldpi / 1<br/>oldpi<br/>while( 1 ) {<br/>    wantscale= wantscale + scaleinc<br/>    scale= wantscale + 2<br/>    pi= 4*a(1)<br/>    scale= 0<br/>    digits= ((pi - oldpi) * 10^wantscale) / 1<br/>    zeropad( digits )<br/>    scale= wantscale<br/>    oldpi= pi / 1<br/>}</pre>"}, {"lang": "Bracmat", "loc": 29, "block": "<pre class=\"text highlighted_source\">  ( pi<br/>  =   f,q r t k n l,first<br/>    .  \u00a0!arg:((=?f),?q,?r,?t,?k,?n,?l)<br/>      &amp; yes:?first<br/>      &amp;   whl<br/>        ' (   4*!q+!r+-1*!t+-1*!n*!t:&lt;0<br/>            &amp; f$!n<br/>            &amp; (  \u00a0!first:yes<br/>                &amp; f$\".\"<br/>                &amp; no:?first<br/>              | <br/>              )<br/>            &amp; \"compute and update variables for next cycle\"<br/>            &amp; 10*(!r+-1*!n*!t):?nr<br/>            &amp; div$(10*(3*!q+!r).!t)+-10*!n:?n<br/>            &amp;\u00a0!q*10:?q<br/>            &amp;\u00a0!nr:?r<br/>          |   \"compute and update variables for next cycle\"<br/>            &amp; (2*!q+!r)*!l:?nr<br/>            &amp; div$(!q*(7*!k+2)+!r*!l.!t*!l):?nn<br/>            &amp;\u00a0!q*!k:?q<br/>            &amp;\u00a0!t*!l:?t<br/>            &amp;\u00a0!l+2:?l<br/>            &amp;\u00a0!k+1:?k<br/>            &amp;\u00a0!nn:?n<br/>            &amp;\u00a0!nr:?r<br/>          )<br/>  )<br/>&amp; pi$((=.put$!arg),1,0,1,1,3,3)</pre>"}, {"lang": "C", "loc": 68, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;gmp.h&gt;</span><br/>\u00a0<br/>mpz_t tmp1<span class=\"sy0\">,</span> tmp2<span class=\"sy0\">,</span> t5<span class=\"sy0\">,</span> t239<span class=\"sy0\">,</span> pows<span class=\"sy0\">;</span><br/><span class=\"kw4\">void</span> actan<span class=\"br0\">(</span>mpz_t res<span class=\"sy0\">,</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> base<span class=\"sy0\">,</span> mpz_t pows<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> neg <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\tmpz_tdiv_q_ui<span class=\"br0\">(</span>res<span class=\"sy0\">,</span> pows<span class=\"sy0\">,</span> base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmpz_set<span class=\"br0\">(</span>tmp1<span class=\"sy0\">,</span> res<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tmpz_tdiv_q_ui<span class=\"br0\">(</span>tmp1<span class=\"sy0\">,</span> tmp1<span class=\"sy0\">,</span> base <span class=\"sy0\">*</span> base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tmpz_tdiv_q_ui<span class=\"br0\">(</span>tmp2<span class=\"sy0\">,</span> tmp1<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>mpz_cmp_ui<span class=\"br0\">(</span>tmp2<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>neg<span class=\"br0\">)</span> mpz_sub<span class=\"br0\">(</span>res<span class=\"sy0\">,</span> res<span class=\"sy0\">,</span> tmp2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span>\t  mpz_add<span class=\"br0\">(</span>res<span class=\"sy0\">,</span> res<span class=\"sy0\">,</span> tmp2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tneg <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>neg<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span> get_digits<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span><span class=\"sy0\">*</span> len<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tmpz_ui_pow_ui<span class=\"br0\">(</span>pows<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tactan<span class=\"br0\">(</span>t5<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> pows<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmpz_mul_ui<span class=\"br0\">(</span>t5<span class=\"sy0\">,</span> t5<span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tactan<span class=\"br0\">(</span>t239<span class=\"sy0\">,</span> <span class=\"nu0\">239</span><span class=\"sy0\">,</span> pows<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmpz_mul_ui<span class=\"br0\">(</span>t239<span class=\"sy0\">,</span> t239<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tmpz_sub<span class=\"br0\">(</span>t5<span class=\"sy0\">,</span> t5<span class=\"sy0\">,</span> t239<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmpz_ui_pow_ui<span class=\"br0\">(</span>pows<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmpz_tdiv_q<span class=\"br0\">(</span>t5<span class=\"sy0\">,</span> t5<span class=\"sy0\">,</span> pows<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"sy0\">*</span>len <span class=\"sy0\">=</span> mpz_sizeinbase<span class=\"br0\">(</span>t5<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> mpz_get_str<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> t5<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> c<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>v<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> accu <span class=\"sy0\">=</span> <span class=\"nu0\">16384</span><span class=\"sy0\">,</span> done <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">size_t</span> got<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">;</span><br/>\u00a0<br/>\tmpz_init<span class=\"br0\">(</span>tmp1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmpz_init<span class=\"br0\">(</span>tmp2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmpz_init<span class=\"br0\">(</span>t5<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmpz_init<span class=\"br0\">(</span>t239<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmpz_init<span class=\"br0\">(</span>pows<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ts <span class=\"sy0\">=</span> get_digits<span class=\"br0\">(</span>accu<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>got<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* write out digits up to the last one not preceding a 0 or 9*/</span><br/>\t\tgot <span class=\"sy0\">-=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* -2: length estimate may be longer than actual */</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>got<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'0'</span> <span class=\"sy0\">||</span> s<span class=\"br0\">[</span>got<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'9'</span><span class=\"br0\">)</span> got<span class=\"sy0\">--;</span><br/>\u00a0<br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%.*s\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span>got <span class=\"sy0\">-</span> done<span class=\"br0\">)</span><span class=\"sy0\">,</span> s <span class=\"sy0\">+</span> done<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tdone <span class=\"sy0\">=</span> got<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"coMULTI\">/* double the desired digits; slows down at least cubically */</span><br/>\t\taccu <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 50, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Numerics</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> PiCalc <span class=\"br0\">{</span><br/>    <span class=\"kw1\">internal</span> <span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">readonly</span> BigInteger FOUR <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BigInteger<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">readonly</span> BigInteger SEVEN <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BigInteger<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">readonly</span> BigInteger TEN <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BigInteger<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">readonly</span> BigInteger THREE <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BigInteger<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">readonly</span> BigInteger TWO <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BigInteger<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> BigInteger k <span class=\"sy0\">=</span> BigInteger<span class=\"sy0\">.</span><span class=\"me1\">One</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> BigInteger l <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BigInteger<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> BigInteger n <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BigInteger<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> BigInteger q <span class=\"sy0\">=</span> BigInteger<span class=\"sy0\">.</span><span class=\"me1\">One</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> BigInteger r <span class=\"sy0\">=</span> BigInteger<span class=\"sy0\">.</span><span class=\"me1\">Zero</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> BigInteger t <span class=\"sy0\">=</span> BigInteger<span class=\"sy0\">.</span><span class=\"me1\">One</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> CalcPiDigits<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            BigInteger nn, nr<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">bool</span> first <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>FOUR<span class=\"sy0\">*</span>q <span class=\"sy0\">+</span> r <span class=\"sy0\">-</span> t<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>n<span class=\"sy0\">*</span>t<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>first<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                        first <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                    nr <span class=\"sy0\">=</span> TEN<span class=\"sy0\">*</span><span class=\"br0\">(</span>r <span class=\"sy0\">-</span> <span class=\"br0\">(</span>n<span class=\"sy0\">*</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    n <span class=\"sy0\">=</span> TEN<span class=\"sy0\">*</span><span class=\"br0\">(</span>THREE<span class=\"sy0\">*</span>q <span class=\"sy0\">+</span> r<span class=\"br0\">)</span><span class=\"sy0\">/</span>t <span class=\"sy0\">-</span> <span class=\"br0\">(</span>TEN<span class=\"sy0\">*</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    q <span class=\"sy0\">*=</span> TEN<span class=\"sy0\">;</span><br/>                    r <span class=\"sy0\">=</span> nr<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    nr <span class=\"sy0\">=</span> <span class=\"br0\">(</span>TWO<span class=\"sy0\">*</span>q <span class=\"sy0\">+</span> r<span class=\"br0\">)</span><span class=\"sy0\">*</span>l<span class=\"sy0\">;</span><br/>                    nn <span class=\"sy0\">=</span> <span class=\"br0\">(</span>q<span class=\"sy0\">*</span><span class=\"br0\">(</span>SEVEN<span class=\"sy0\">*</span>k<span class=\"br0\">)</span> <span class=\"sy0\">+</span> TWO <span class=\"sy0\">+</span> r<span class=\"sy0\">*</span>l<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>t<span class=\"sy0\">*</span>l<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    q <span class=\"sy0\">*=</span> k<span class=\"sy0\">;</span><br/>                    t <span class=\"sy0\">*=</span> l<span class=\"sy0\">;</span><br/>                    l <span class=\"sy0\">+=</span> TWO<span class=\"sy0\">;</span><br/>                    k <span class=\"sy0\">+=</span> BigInteger<span class=\"sy0\">.</span><span class=\"me1\">One</span><span class=\"sy0\">;</span><br/>                    n <span class=\"sy0\">=</span> nn<span class=\"sy0\">;</span><br/>                    r <span class=\"sy0\">=</span> nr<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Program<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">CalcPiDigits</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 39, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ns pidigits<br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">gen-class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>def calc-pi<br/>        <span class=\"co1\">;  integer division rounding downwards to -infinity</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>div <span class=\"br0\">(</span>fn <span class=\"br0\">[</span>x y<span class=\"br0\">]</span> <span class=\"br0\">(</span>long <span class=\"br0\">(</span>Math/floor <span class=\"br0\">(</span>/ x y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>          <span class=\"co1\">; Computations performed after yield clause in Python code</span><br/>          update-after-yield <span class=\"br0\">(</span>fn <span class=\"br0\">[</span><span class=\"br0\">[</span>q r t k n <span class=\"kw1\">l</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>                         <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>nr <span class=\"br0\">(</span>* <span class=\"nu0\">10</span> <span class=\"br0\">(</span>- r <span class=\"br0\">(</span>* n t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                               nn <span class=\"br0\">(</span>- <span class=\"br0\">(</span>div <span class=\"br0\">(</span>* <span class=\"nu0\">10</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* <span class=\"nu0\">3</span> q<span class=\"br0\">)</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span> t<span class=\"br0\">)</span> <span class=\"br0\">(</span>* <span class=\"nu0\">10</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                               nq <span class=\"br0\">(</span>* <span class=\"nu0\">10</span> q<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                           <span class=\"br0\">[</span>nq nr t k nn <span class=\"kw1\">l</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>          <span class=\"co1\">; Update of else clause in Python code: if (&lt; (- (+ (* 4 q) r) t) (* n t))</span><br/>          update-else <span class=\"br0\">(</span>fn <span class=\"br0\">[</span><span class=\"br0\">[</span>q r t k n <span class=\"kw1\">l</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>                        <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>nr <span class=\"br0\">(</span>* <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> q<span class=\"br0\">)</span> r<span class=\"br0\">)</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><br/>                              nn <span class=\"br0\">(</span>div <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* q <span class=\"nu0\">7</span> k<span class=\"br0\">)</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span>* r <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>* t <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                              nq <span class=\"br0\">(</span>* k q<span class=\"br0\">)</span><br/>                              nt <span class=\"br0\">(</span>* <span class=\"kw1\">l</span> t<span class=\"br0\">)</span><br/>                              nl <span class=\"br0\">(</span>+ <span class=\"nu0\">2</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><br/>                              nk <span class=\"br0\">(</span>+ <span class=\"nu0\">1</span> k<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                          <span class=\"br0\">[</span>nq nr nt nk nn nl<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>          <span class=\"co1\">; Compute the lazy sequence of pi digits translating the Python code</span><br/>          pi-from <span class=\"br0\">(</span>fn pi-from <span class=\"br0\">[</span><span class=\"br0\">[</span>q r t k n <span class=\"kw1\">l</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>                    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>- <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* <span class=\"nu0\">4</span> q<span class=\"br0\">)</span> r<span class=\"br0\">)</span> t<span class=\"br0\">)</span> <span class=\"br0\">(</span>* n t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span>lazy-seq <span class=\"br0\">(</span><span class=\"kw1\">cons</span> n <span class=\"br0\">(</span>pi-from <span class=\"br0\">(</span>update-after-yield <span class=\"br0\">[</span>q r t k n <span class=\"kw1\">l</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span>recur <span class=\"br0\">(</span>update-else <span class=\"br0\">[</span>q r t k n <span class=\"kw1\">l</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>      <span class=\"co1\">; Use Clojure big numbers to perform the math (avoid integer overflow)</span><br/>      <span class=\"br0\">(</span>pi-from <span class=\"br0\">[</span>1N 0N 1N 1N 3N 3N<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Indefinitely Output digits of pi, with 40 characters per line</span><br/><span class=\"br0\">(</span>doseq <span class=\"br0\">[</span><span class=\"br0\">[</span>i q<span class=\"br0\">]</span> <span class=\"br0\">(</span>map-indexed vector calc-pi<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>mod i <span class=\"nu0\">40</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>println<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">print</span> q<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 25, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> pi-spigot <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>labels<br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span>g <span class=\"br0\">(</span>q r t1 k n <span class=\"kw1\">l</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>           <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>- <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* <span class=\"nu0\">4</span> q<span class=\"br0\">)</span> r<span class=\"br0\">)</span> t1<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>* n t1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">princ</span> n<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>g <span class=\"br0\">(</span>* <span class=\"nu0\">10</span> q<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>* <span class=\"nu0\">10</span> <span class=\"br0\">(</span>- r <span class=\"br0\">(</span>* n t1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               t1<br/>               k<br/>               <span class=\"br0\">(</span>- <span class=\"br0\">(</span>floor <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>* <span class=\"nu0\">10</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* <span class=\"nu0\">3</span> q<span class=\"br0\">)</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                            t1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>* <span class=\"nu0\">10</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>t<br/>            <span class=\"br0\">(</span>g <span class=\"br0\">(</span>* q k<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>* <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> q<span class=\"br0\">)</span> r<span class=\"br0\">)</span> <span class=\"kw1\">l</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>* t1 <span class=\"kw1\">l</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>+ k <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>floor <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* q <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* <span class=\"nu0\">7</span> k<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                            <span class=\"br0\">(</span>* r <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                         <span class=\"br0\">(</span>* t1 <span class=\"kw1\">l</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>+ <span class=\"kw1\">l</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>g <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Crystal", "loc": 31, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">\"big_int\"</span><br/>\u00a0<br/><span class=\"kw1\">def</span> pi<br/>  q, r, t, k, n, l = <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> BigInt.<span class=\"me1\">new</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>  dot_written = <span class=\"kw2\">false</span><br/>  <span class=\"kw3\">loop</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> <span class=\"nu0\">4</span><span class=\"sy0\">*</span>q <span class=\"sy0\">+</span> r <span class=\"sy0\">-</span> t <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">*</span>t<br/>      <span class=\"kw1\">yield</span> n<br/>      <span class=\"kw1\">unless</span> dot_written<br/>        <span class=\"kw1\">yield</span> <span class=\"st0\">'.'</span><br/>        dot_written = <span class=\"kw2\">true</span><br/>      <span class=\"kw1\">end</span><br/>      nr = <span class=\"nu0\">10</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>r <span class=\"sy0\">-</span> n<span class=\"sy0\">*</span>t<span class=\"br0\">)</span><br/>      n = <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span>q <span class=\"sy0\">+</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> t<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">10</span><span class=\"sy0\">*</span>n<br/>      q <span class=\"sy0\">*</span>= <span class=\"nu0\">10</span><br/>      r = nr<br/>    <span class=\"kw1\">else</span><br/>      nr = <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>q <span class=\"sy0\">+</span> r<span class=\"br0\">)</span> <span class=\"sy0\">*</span> l<br/>      nn = <span class=\"br0\">(</span>q<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">*</span>k <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> r<span class=\"sy0\">*</span>l<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>t<span class=\"sy0\">*</span>l<span class=\"br0\">)</span><br/>      q <span class=\"sy0\">*</span>= k<br/>      t <span class=\"sy0\">*</span>= l<br/>      l <span class=\"sy0\">+</span>= <span class=\"nu0\">2</span><br/>      k <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>      n = nn<br/>      r = nr<br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>pi <span class=\"br0\">{</span> <span class=\"sy0\">|</span>digit_or_dot<span class=\"sy0\">|</span> <span class=\"kw3\">print</span> digit_or_dot; STDOUT.<span class=\"me1\">flush</span> <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 38, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> PiDigits <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">uint</span> nDigits<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> opApply<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"kw2\">delegate</span><span class=\"br0\">(</span><span class=\"kw2\">ref</span> <span class=\"kw4\">string</span> <span class=\"coMULTI\">/*chunk of pi digit*/</span><span class=\"br0\">)</span> dg<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"co1\">// Maximum width for correct output, for type ulong.</span><br/>        <span class=\"kw4\">enum</span> <span class=\"kw4\">size_t</span> width <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">enum</span> <span class=\"kw4\">ulong</span> scale <span class=\"sy0\">=</span> 10UL <span class=\"sy0\">^^</span> width<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">enum</span> <span class=\"kw4\">ulong</span> initDigit <span class=\"sy0\">=</span> 2UL <span class=\"sy0\">*</span> 10UL <span class=\"sy0\">^^</span> <span class=\"br0\">(</span>width <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">enum</span> <span class=\"kw4\">string</span> formatString <span class=\"sy0\">=</span> <span class=\"st0\">\"%0\"</span> <span class=\"sy0\">~</span> text<span class=\"br0\">(</span>width<span class=\"br0\">)</span> <span class=\"sy0\">~</span> <span class=\"st0\">\"d\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">immutable</span> <span class=\"kw4\">size_t</span> len <span class=\"sy0\">=</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span> nDigits <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">auto</span> arr <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">ulong</span><span class=\"br0\">[</span>len<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        arr<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> initDigit<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">ulong</span> carry<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">nDigits</span> <span class=\"sy0\">/</span> width<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">ulong</span> sum<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach_reverse</span> <span class=\"br0\">(</span>j<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">len</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">auto</span> quo <span class=\"sy0\">=</span> sum <span class=\"sy0\">*</span> <span class=\"br0\">(</span>j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> scale <span class=\"sy0\">*</span> arr<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                arr<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> quo <span class=\"sy0\">%</span> <span class=\"br0\">(</span>j<span class=\"sy0\">*</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                sum <span class=\"sy0\">=</span> quo <span class=\"sy0\">/</span> <span class=\"br0\">(</span>j<span class=\"sy0\">*</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw4\">auto</span> yield <span class=\"sy0\">=</span> format<span class=\"br0\">(</span>formatString<span class=\"sy0\">,</span> carry <span class=\"sy0\">+</span> sum<span class=\"sy0\">/</span>scale<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dg<span class=\"br0\">(</span>yield<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            carry <span class=\"sy0\">=</span> sum <span class=\"sy0\">%</span> scale<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>d<span class=\"sy0\">;</span> PiDigits<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        writeln<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 17, "block": "<pre class=\"text highlighted_source\">defmodule Pi do<br/>  def calc, do: calc(1,0,1,1,3,3,0)<br/>\u00a0<br/>  defp calc(q,r,t,k,n,l,c) when c==50 do<br/>    IO.write \"\\n\"<br/>    calc(q,r,t,k,n,l,0)<br/>  end<br/>  defp calc(q,r,t,k,n,l,c) when (4*q + r - t) &lt; n*t do<br/>    IO.write n<br/>    calc(q*10, 10*(r-n*t), t, k, div(10*(3*q+r), t) - 10*n, l, c+1)<br/>  end<br/>  defp calc(q,r,t,k,_n,l,c) do<br/>    calc(q*k, (2*q+r)*l, t*l, k+1, div(q*7*k+2+r*l, t*l), l+2, c)<br/>  end<br/>end<br/>\u00a0<br/>Pi.calc</pre>"}, {"lang": "Erlang", "loc": 30, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">% Implemented by Arjun Sunel</span><br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>pi_calculation<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>main<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re3\">pi</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">pi</span><span class=\"br0\">(</span><span class=\"re5\">Q</span><span class=\"sy1\">,</span><span class=\"re5\">R</span><span class=\"sy1\">,</span><span class=\"re5\">T</span><span class=\"sy1\">,</span><span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"re5\">C</span><span class=\"br0\">)</span>   <span class=\"sy1\">-&gt;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"re5\">C</span><span class=\"sy3\">=:=</span><span class=\"nu0\">50</span> <span class=\"sy1\">-&gt;</span><br/>\t\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"re3\">pi</span><span class=\"br0\">(</span><span class=\"re5\">Q</span><span class=\"sy1\">,</span><span class=\"re5\">R</span><span class=\"sy1\">,</span><span class=\"re5\">T</span><span class=\"sy1\">,</span><span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>  <span class=\"sy1\">;</span><br/>\u00a0<br/>\ttrue <span class=\"sy1\">-&gt;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <br/>\t\t\t<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy3\">*</span><span class=\"re5\">Q</span> <span class=\"sy3\">+</span> <span class=\"re5\">R</span><span class=\"sy3\">-</span><span class=\"re5\">T</span><span class=\"br0\">)</span> <span class=\"sy3\">&lt;</span> <span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">*</span><span class=\"re5\">T</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>\t\t\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~p\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">N</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t \t\t<span class=\"re5\">P</span> <span class=\"sy3\">=</span> <span class=\"nu0\">10</span><span class=\"sy3\">*</span><span class=\"br0\">(</span><span class=\"re5\">R</span><span class=\"sy3\">-</span><span class=\"re5\">N</span><span class=\"sy3\">*</span><span class=\"re5\">T</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t \t\t<span class=\"re3\">pi</span><span class=\"br0\">(</span><span class=\"re5\">Q</span><span class=\"sy3\">*</span><span class=\"nu0\">10</span> <span class=\"sy1\">,</span> <span class=\"re5\">P</span><span class=\"sy1\">,</span> <span class=\"re5\">T</span> <span class=\"sy1\">,</span> <span class=\"re5\">K</span> <span class=\"sy1\">,</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy3\">*</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy3\">*</span><span class=\"re5\">Q</span><span class=\"sy3\">+</span><span class=\"re5\">R</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">div</span> <span class=\"re5\">T</span><span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">10</span><span class=\"sy3\">*</span><span class=\"re5\">N</span> <span class=\"sy1\">,</span> <span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"re5\">C</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>\t\ttrue <span class=\"sy1\">-&gt;</span><br/>\t\t\t<span class=\"re5\">P</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"re5\">Q</span><span class=\"sy3\">+</span><span class=\"re5\">R</span><span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><br/>\t\t\t<span class=\"re5\">M</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"re5\">Q</span><span class=\"sy3\">*</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy3\">*</span><span class=\"re5\">K</span><span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy3\">+</span><span class=\"br0\">(</span><span class=\"re5\">R</span><span class=\"sy3\">*</span><span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">div</span> <span class=\"br0\">(</span><span class=\"re5\">T</span><span class=\"sy3\">*</span><span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t\t\t<span class=\"re5\">H</span>  <span class=\"sy3\">=</span> <span class=\"re5\">L</span><span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><br/>\t\t\t<span class=\"re5\">J</span> <span class=\"sy3\">=</span><span class=\"re5\">K</span><span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span><br/>\t\t\t<span class=\"re3\">pi</span><span class=\"br0\">(</span><span class=\"re5\">Q</span><span class=\"sy3\">*</span><span class=\"re5\">K</span><span class=\"sy1\">,</span> <span class=\"re5\">P</span> <span class=\"sy1\">,</span> <span class=\"re5\">T</span><span class=\"sy3\">*</span><span class=\"re5\">L</span> <span class=\"sy1\">,</span><span class=\"re5\">J</span><span class=\"sy1\">,</span><span class=\"re5\">M</span><span class=\"sy1\">,</span><span class=\"re5\">H</span><span class=\"sy1\">,</span><span class=\"re5\">C</span><span class=\"br0\">)</span><br/>\t \t<span class=\"kw1\">end</span><br/> \t<span class=\"kw1\">end</span><span class=\"sy1\">.</span>\t<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 14, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> g q r t k n l <span class=\"sy0\">=</span> <span class=\"kw4\">seq</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> 4I<span class=\"sy0\">*</span>q<span class=\"sy0\">+</span>r<span class=\"sy0\">-</span>t <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">*</span>t<br/>    <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">yield</span> n<br/>        <span class=\"kw1\">yield!</span> <span class=\"br0\">(</span>g <span class=\"br0\">(</span>10I<span class=\"sy0\">*</span>q<span class=\"br0\">)</span> <span class=\"br0\">(</span>10I<span class=\"sy0\">*</span><span class=\"br0\">(</span>r<span class=\"sy0\">-</span>n<span class=\"sy0\">*</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span> t k <span class=\"br0\">(</span><span class=\"br0\">(</span>10I<span class=\"sy0\">*</span><span class=\"br0\">(</span>3I<span class=\"sy0\">*</span>q<span class=\"sy0\">+</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>t <span class=\"sy0\">-</span> 10I<span class=\"sy0\">*</span>n<span class=\"br0\">)</span> l<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">yield!</span> <span class=\"br0\">(</span>g <span class=\"br0\">(</span>q<span class=\"sy0\">*</span>k<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>2I<span class=\"sy0\">*</span>q<span class=\"sy0\">+</span>r<span class=\"br0\">)</span><span class=\"sy0\">*</span>l<span class=\"br0\">)</span> <span class=\"br0\">(</span>t<span class=\"sy0\">*</span>l<span class=\"br0\">)</span> <span class=\"br0\">(</span>k<span class=\"sy0\">+</span>1I<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>q<span class=\"sy0\">*</span><span class=\"br0\">(</span>7I<span class=\"sy0\">*</span>k<span class=\"sy0\">+</span>2I<span class=\"br0\">)</span><span class=\"sy0\">+</span>r<span class=\"sy0\">*</span>l<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>t<span class=\"sy0\">*</span>l<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>l<span class=\"sy0\">+</span>2I<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">let</span> \u03c0 <span class=\"sy0\">=</span> <span class=\"br0\">(</span>g 1I 0I 1I 1I 3I 3I<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">take</span> <span class=\"nu0\">1</span> \u03c0 <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span>printf <span class=\"st0\">\"%A.\"</span><span class=\"br0\">)</span><br/><span class=\"co1\">// 6 digits beginning at position 762 of \u03c0 are '9'</span><br/><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">take</span> <span class=\"nu0\">767</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">skip</span> <span class=\"nu0\">1</span> \u03c0<span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span>printf <span class=\"st0\">\"%A\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Fortran", "loc": 22, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> pi<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">integer</span>,<span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">3350</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">vect</span><br/>  <span class=\"kw3\">integer</span>,<span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">201</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">buffer</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">more</span>,karray,num,k,l,n<br/>  more <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  vect <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">do</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,<span class=\"nu0\">201</span><br/>    karray <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">do</span> l <span class=\"sy0\">=</span> <span class=\"nu0\">3350</span>,<span class=\"nu0\">1</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      num <span class=\"sy0\">=</span> <span class=\"nu0\">100000</span><span class=\"sy0\">*</span>vect<span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"sy0\">+</span> karray<span class=\"sy0\">*</span>l<br/>      karray <span class=\"sy0\">=</span> num<span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>l <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      vect<span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"sy0\">=</span> num <span class=\"sy0\">-</span> karray<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>l <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    k <span class=\"sy0\">=</span> karray<span class=\"sy0\">/</span><span class=\"nu0\">100000</span><br/>    buffer<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> more <span class=\"sy0\">+</span> k<br/>    more <span class=\"sy0\">=</span> karray <span class=\"sy0\">-</span> k<span class=\"sy0\">*</span><span class=\"nu0\">100000</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  write <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(i2,\".\"/(1x,10i5.5))'</span><span class=\"br0\">)</span> buffer<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> pi<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 54, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 05-07-2018</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"co1\">' unbounded spigot</span><br/><span class=\"co1\">' Ctrl-c to end program or close console window</span><br/>\u00a0<br/><span class=\"co2\">#Include \"gmp.bi\"</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> num, ndigit, fp = <span class=\"kw1\">Not</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> mpz_ptr q,r,t,k,n,l,tmp1,tmp2<br/>   q = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__Mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init_set_ui<span class=\"br0\">(</span>q,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   r = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__Mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init<span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>   t = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__Mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init_set_ui<span class=\"br0\">(</span>t,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   k = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__Mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init_set_ui<span class=\"br0\">(</span>k,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   n = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__Mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init_set_ui<span class=\"br0\">(</span>n,<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>   l = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__Mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init_set_ui<span class=\"br0\">(</span>l,<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>tmp1 = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__Mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init<span class=\"br0\">(</span>tmp1<span class=\"br0\">)</span><br/>tmp2 = Allocate<span class=\"br0\">(</span><span class=\"kw1\">Len</span><span class=\"br0\">(</span>__Mpz_struct<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: Mpz_init<span class=\"br0\">(</span>tmp2<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Do</span><br/>    mpz_mul_2exp<span class=\"br0\">(</span>tmp1, q, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    mpz_add<span class=\"br0\">(</span>tmp1,tmp1,r<span class=\"br0\">)</span><br/>    mpz_sub<span class=\"br0\">(</span>tmp1,tmp1,t<span class=\"br0\">)</span><br/>    mpz_mul<span class=\"br0\">(</span>tmp2, n, t<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> mpz_cmp<span class=\"br0\">(</span>tmp1, tmp2<span class=\"br0\">)</span> &lt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <br/>        <span class=\"kw1\">Print</span> mpz_get_ui<span class=\"br0\">(</span>n<span class=\"br0\">)</span>;\u00a0: ndigit += <span class=\"nu0\">1</span>\u00a0: <span class=\"kw1\">If</span> ndigit <span class=\"kw1\">Mod</span> <span class=\"nu0\">50</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Print</span> <span class=\"st0\">\"\u00a0:\"</span>;ndigit <br/>        <span class=\"kw1\">If</span> fp <span class=\"kw1\">Then</span> <span class=\"kw1\">Print</span> <span class=\"st0\">\".\"</span>;\u00a0: fp = <span class=\"kw1\">Not</span> fp\u00a0: <span class=\"kw1\">Print</span>\u00a0:ndigit = <span class=\"nu0\">0</span><br/>        mpz_sub<span class=\"br0\">(</span>tmp1, r, tmp2<span class=\"br0\">)</span><br/>        mpz_mul_ui<span class=\"br0\">(</span>tmp1, tmp1, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>        mpz_mul_ui<span class=\"br0\">(</span>tmp2, q, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>        mpz_add<span class=\"br0\">(</span>tmp2, tmp2, r<span class=\"br0\">)</span><br/>        mpz_mul_ui<span class=\"br0\">(</span>tmp2, tmp2, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>        mpz_set<span class=\"br0\">(</span>r, tmp1<span class=\"br0\">)</span><br/>        mpz_mul_ui<span class=\"br0\">(</span>tmp1, n, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>        mpz_tdiv_q<span class=\"br0\">(</span>tmp2, tmp2, t<span class=\"br0\">)</span><br/>        mpz_sub<span class=\"br0\">(</span>n, tmp2, tmp1<span class=\"br0\">)</span><br/>        mpz_mul_ui<span class=\"br0\">(</span>q, q, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Else</span><br/>        mpz_mul<span class=\"br0\">(</span>tmp2, r, l<span class=\"br0\">)</span><br/>        mpz_mul<span class=\"br0\">(</span>tmp1, q, k<span class=\"br0\">)</span><br/>        mpz_mul_ui<span class=\"br0\">(</span>tmp1, tmp1, <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>        mpz_add<span class=\"br0\">(</span>tmp1, tmp1, tmp2<span class=\"br0\">)</span><br/>        mpz_mul_2exp<span class=\"br0\">(</span>tmp2, q, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        mpz_add<span class=\"br0\">(</span>tmp2, tmp2, r<span class=\"br0\">)</span><br/>        mpz_mul<span class=\"br0\">(</span>tmp2, tmp2, l<span class=\"br0\">)</span><br/>        mpz_mul<span class=\"br0\">(</span>t, t, l<span class=\"br0\">)</span><br/>        mpz_tdiv_q<span class=\"br0\">(</span>tmp1, tmp1, t<span class=\"br0\">)</span><br/>        mpz_mul<span class=\"br0\">(</span>q, q, k<span class=\"br0\">)</span><br/>        mpz_add_ui<span class=\"br0\">(</span>k, k, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        mpz_add_ui<span class=\"br0\">(</span>l, l, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        mpz_set<span class=\"br0\">(</span>n, tmp1<span class=\"br0\">)</span><br/>        mpz_set<span class=\"br0\">(</span>r, tmp2<span class=\"br0\">)</span>     <br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Loop</span></pre>"}, {"lang": "FunL", "loc": 20, "block": "<pre class=\"text highlighted_source\">def compute_pi =<br/>  def g( q, r, t, k, n, l ) =<br/>    if 4*q + r - t &lt; n*t<br/>      n # g( 10*q, 10*(r - n*t), t, k, (10*(3*q + r))\\t - 10*n, l )<br/>    else<br/>      g( q*k, (2*q + r)*l, t*l, k + 1, (q*(7*k + 2) + r*l)\\(t*l), l + 2 )<br/>\u00a0<br/>  g( 1, 0, 1, 1, 3, 3 )<br/>\u00a0<br/>if _name_ == '-main-'<br/>  print( compute_pi().head() + '.' )<br/>\u00a0<br/>  if args.isEmpty()<br/>    for d &lt;- compute_pi().tail()<br/>      print( d )<br/>  else<br/>    for d &lt;- compute_pi().tail().take( int(args(0)) )<br/>      print( d )<br/>\u00a0<br/>    println()</pre>"}, {"lang": "FutureBasic", "loc": 171, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>dim as long  kf, ks<br/>xref mf(_maxLong - 1) as long<br/>xref ms(_maxLong - 1) as long<br/>dim as long  cnt, n, temp, nd<br/>dim as long  col, col1<br/>dim as long  lloc, stor(50)<br/>\u00a0<br/>end globals<br/>\u00a0<br/>local mode<br/>local fn FmtStr( nn as long, s as Str255 ) as Str255<br/>dim l as long<br/>dim as Str255 f<br/>l = s[0]<br/>select case<br/>   case ( nn =&gt; l )<br/>      f = string$( nn-l, 32 ) + s<br/>   case ( -nn &gt; l)<br/>      f = s + string$( -nn-l, 32 )<br/>   case else<br/>      f = s<br/>   end select<br/>end fn = f<br/>\u00a0<br/>\u00a0<br/>local mode<br/>local fn FmtInt( nn as long, s as Str255 ) as Str255<br/>if ( left$( s, 1 ) = \" \" ) then s = mid$( s, 2 )<br/>end fn = fn FmtStr( nn, s )<br/>\u00a0<br/>\u00a0<br/>local fn yprint( m as long )<br/>if ( cnt &lt; n )<br/>   col++<br/>   if ( col == 11 )<br/>      col = 1<br/>      col1++<br/>         long if ( col1 == 6 )<br/>            col1 = 0<br/>            print <br/>            print fn FmtInt( 4, str$( m mod 10) );<br/>         else<br/>            print fn FmtInt( 3, str$ (m mod 10) );<br/>         end if<br/>    else<br/>       print mid$( str$( m ), 2 )\u00a0;<br/>    end if<br/>    cnt++<br/>end if<br/>end fn <br/>\u00a0<br/>\u00a0<br/>local fn xprint( m as long)<br/>dim as long ii, wk, wk1<br/>\u00a0<br/>if ( m &lt; 8 )<br/>   ii = 1<br/>      while ( ii &lt;= lloc )<br/>         fn yprint( stor(ii) )<br/>         ii++<br/>      wend<br/>lloc = 0<br/>else<br/>   if ( m &gt; 9 )<br/>       wk = m / 10<br/>       m = m mod 10<br/>       wk1 = lloc<br/>          while ( wk1 &gt;= 1 )<br/>             wk += stor(wk1)<br/>             stor(wk1) = wk mod 10<br/>             wk = wk/10 <br/>             wk1--<br/>          wend<br/>    end if<br/>end if<br/>lloc++<br/>stor(lloc) = m<br/>end fn <br/>\u00a0<br/>\u00a0<br/>local mode<br/>local fn shift( l1 as ^long, l2 as ^long, lp as long, lmod as long )<br/>dim as long k<br/>\u00a0<br/>if ( l2.nil&amp; &gt; 0 )<br/>   k = ( l2.nil&amp; ) / lmod <br/>else<br/>   k =  -( -l2.nil&amp;  / lmod ) - 1<br/>end if<br/>l2.nil&amp; = l2.nil&amp; - k*lmod<br/>l1.nil&amp; = l1.nil&amp; + k*lp<br/>end fn <br/>\u00a0<br/>\u00a0<br/>local fn Main( nDig as long )<br/>dim as long i<br/>\u00a0<br/>n = nDig<br/>stor(0) = 0<br/>\u00a0<br/>mf = fn malloc( ( n + 10 ) * sizeof(long) )<br/>if ( 0 == mf ) then stop \"Out of memory\"<br/>\u00a0<br/>ms = fn malloc( ( n + 10 ) * sizeof(long) )<br/>if ( 0 == ms ) then stop \"Out of memory\"<br/>\u00a0<br/>print\u00a0: print \"Approximation of \u03c0 to\"; n; \" digits\"<br/>\u00a0<br/>cnt = 0<br/>kf  = 25<br/>ks  = 57121<br/>mf(1) = 1<br/>\u00a0<br/>i = 2<br/>while ( i &lt;= n )<br/>   mf(i)     = -16<br/>   mf(i + 1) =  16<br/>   i += 2<br/>wend<br/>\u00a0<br/>i = 1<br/>while ( i &lt;= n )<br/>   ms(i)     = -4<br/>   ms(i + 1) =  4<br/>   i += 2<br/>wend<br/>\u00a0<br/>print\u00a0: print \" 3.\";<br/>\u00a0<br/>while ( cnt &lt; n )<br/>   i = 0<br/>   i++<br/>   while ( i &lt;= n - cnt )<br/>      mf(i) = mf(i) * 10<br/>      ms(i) = ms(i) * 10<br/>      i++<br/>    wend<br/>\u00a0<br/>   i = ( n - cnt + 1 )<br/>   i-- <br/>   while ( i &gt;= 2 )<br/>      temp = 2 * i - 1<br/>      fn shift( @mf(i - 1), @mf(i), temp - 2, temp * kf )<br/>      fn shift( @ms(i - 1), @ms(i), temp - 2, temp * ks )<br/>      i--<br/>    wend<br/>\u00a0<br/>nd = 0<br/>\u00a0<br/>fn shift( @nd, @mf(1), 1, 5 )<br/>fn shift( @nd, @ms(1), 1, 239 )<br/>fn xprint( nd )<br/>\u00a0<br/>wend<br/>\u00a0<br/>print\u00a0: print \"Done\"<br/>fn free( ms )<br/>fn free( mf )<br/>end fn<br/>\u00a0<br/>\u00a0<br/>dim as unsigned long   ticks<br/>ticks = fn TickCount()<br/>// Here we specify the number of decimal places<br/>fn Main( 4000 ) <br/>ticks = fn TickCount() - ticks<br/>print \"Elapsed time:\" str$( ticks ) \" ticks<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 83, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/big\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> lft <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    q<span class=\"sy1\">,</span>r<span class=\"sy1\">,</span>s<span class=\"sy1\">,</span>t <a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>lft<span class=\"sy1\">)</span> extr<span class=\"sy1\">(</span>x <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span> <span class=\"sy3\">*</span>big<span class=\"sy3\">.</span>Rat <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> n<span class=\"sy1\">,</span> d <a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><br/>    <span class=\"kw1\">var</span> r big<span class=\"sy3\">.</span>Rat<br/>    <span class=\"kw1\">return</span> r<span class=\"sy3\">.</span>SetFrac<span class=\"sy1\">(</span><br/>        n<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>n<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>&amp;t<span class=\"sy3\">.</span>q<span class=\"sy1\">,</span> x<span class=\"sy1\">),</span> &amp;t<span class=\"sy3\">.</span>r<span class=\"sy1\">),</span><br/>        d<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>d<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>&amp;t<span class=\"sy3\">.</span>s<span class=\"sy1\">,</span> x<span class=\"sy1\">),</span> &amp;t<span class=\"sy3\">.</span>t<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> three <span class=\"sy2\">=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">)</span><br/><span class=\"kw1\">var</span> four <span class=\"sy2\">=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">4</span><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>lft<span class=\"sy1\">)</span> next<span class=\"sy1\">()</span> <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a> <span class=\"sy1\">{</span><br/>    r <span class=\"sy2\">:=</span> t<span class=\"sy3\">.</span>extr<span class=\"sy1\">(</span>three<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">var</span> f <a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><br/>    <span class=\"kw1\">return</span> f<span class=\"sy3\">.</span>Div<span class=\"sy1\">(</span>r<span class=\"sy3\">.</span>Num<span class=\"sy1\">(),</span> r<span class=\"sy3\">.</span>Denom<span class=\"sy1\">())</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>lft<span class=\"sy1\">)</span> safe<span class=\"sy1\">(</span>n <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    r <span class=\"sy2\">:=</span> t<span class=\"sy3\">.</span>extr<span class=\"sy1\">(</span>four<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">var</span> f <a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><br/>    <span class=\"kw1\">if</span> n<span class=\"sy3\">.</span>Cmp<span class=\"sy1\">(</span>f<span class=\"sy3\">.</span>Div<span class=\"sy1\">(</span>r<span class=\"sy3\">.</span>Num<span class=\"sy1\">(),</span> r<span class=\"sy3\">.</span>Denom<span class=\"sy1\">()))</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>lft<span class=\"sy1\">)</span> comp<span class=\"sy1\">(</span>u <span class=\"sy3\">*</span>lft<span class=\"sy1\">)</span> <span class=\"sy3\">*</span>lft <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> r lft<br/>    <span class=\"kw1\">var</span> a<span class=\"sy1\">,</span> b <a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><br/>    r<span class=\"sy3\">.</span>q<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>a<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>&amp;t<span class=\"sy3\">.</span>q<span class=\"sy1\">,</span> &amp;u<span class=\"sy3\">.</span>q<span class=\"sy1\">),</span> b<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>&amp;t<span class=\"sy3\">.</span>r<span class=\"sy1\">,</span> &amp;u<span class=\"sy3\">.</span>s<span class=\"sy1\">))</span><br/>    r<span class=\"sy3\">.</span>r<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>a<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>&amp;t<span class=\"sy3\">.</span>q<span class=\"sy1\">,</span> &amp;u<span class=\"sy3\">.</span>r<span class=\"sy1\">),</span> b<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>&amp;t<span class=\"sy3\">.</span>r<span class=\"sy1\">,</span> &amp;u<span class=\"sy3\">.</span>t<span class=\"sy1\">))</span><br/>    r<span class=\"sy3\">.</span>s<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>a<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>&amp;t<span class=\"sy3\">.</span>s<span class=\"sy1\">,</span> &amp;u<span class=\"sy3\">.</span>q<span class=\"sy1\">),</span> b<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>&amp;t<span class=\"sy3\">.</span>t<span class=\"sy1\">,</span> &amp;u<span class=\"sy3\">.</span>s<span class=\"sy1\">))</span><br/>    r<span class=\"sy3\">.</span>t<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>a<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>&amp;t<span class=\"sy3\">.</span>s<span class=\"sy1\">,</span> &amp;u<span class=\"sy3\">.</span>r<span class=\"sy1\">),</span> b<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>&amp;t<span class=\"sy3\">.</span>t<span class=\"sy1\">,</span> &amp;u<span class=\"sy3\">.</span>t<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">return</span> &amp;r<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>t <span class=\"sy3\">*</span>lft<span class=\"sy1\">)</span> prod<span class=\"sy1\">(</span>n <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span> <span class=\"sy3\">*</span>lft <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> r lft<br/>    r<span class=\"sy3\">.</span>q<span class=\"sy3\">.</span>SetInt64<span class=\"sy1\">(</span><span class=\"nu0\">10</span><span class=\"sy1\">)</span><br/>    r<span class=\"sy3\">.</span>r<span class=\"sy3\">.</span>Mul<span class=\"sy1\">(</span>r<span class=\"sy3\">.</span>r<span class=\"sy3\">.</span>SetInt64<span class=\"sy1\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">10</span><span class=\"sy1\">),</span> n<span class=\"sy1\">)</span><br/>    r<span class=\"sy3\">.</span>t<span class=\"sy3\">.</span>SetInt64<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> r<span class=\"sy3\">.</span>comp<span class=\"sy1\">(</span>t<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// init z to unit</span><br/>    z <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span>lft<span class=\"sy1\">)</span><br/>    z<span class=\"sy3\">.</span>q<span class=\"sy3\">.</span>SetInt64<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    z<span class=\"sy3\">.</span>t<span class=\"sy3\">.</span>SetInt64<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// lfts generator</span><br/>    <span class=\"kw1\">var</span> k <span class=\"kw4\">int64</span><br/>    lfts <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy3\">*</span>lft <span class=\"sy1\">{</span><br/>        k<span class=\"sy2\">++</span><br/>        r <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span>lft<span class=\"sy1\">)</span><br/>        r<span class=\"sy3\">.</span>q<span class=\"sy3\">.</span>SetInt64<span class=\"sy1\">(</span>k<span class=\"sy1\">)</span><br/>        r<span class=\"sy3\">.</span>r<span class=\"sy3\">.</span>SetInt64<span class=\"sy1\">(</span><span class=\"nu0\">4</span><span class=\"sy3\">*</span>k<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>        r<span class=\"sy3\">.</span>t<span class=\"sy3\">.</span>SetInt64<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>k<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span> r<br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// stream</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>        y <span class=\"sy2\">:=</span> z<span class=\"sy3\">.</span>next<span class=\"sy1\">()</span><br/>        <span class=\"kw1\">if</span> z<span class=\"sy3\">.</span>safe<span class=\"sy1\">(</span>y<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>y<span class=\"sy1\">)</span><br/>            z <span class=\"sy2\">=</span> z<span class=\"sy3\">.</span>prod<span class=\"sy1\">(</span>y<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            z <span class=\"sy2\">=</span> z<span class=\"sy3\">.</span>comp<span class=\"sy1\">(</span>lfts<span class=\"sy1\">())</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 10, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?as_q=BigInteger&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigInteger</span></a> q <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, t <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>, l <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> nn<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20boolean\"><span class=\"kw4\">boolean</span></a> first <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true\"><span class=\"kw2\">true</span></a><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true\"><span class=\"kw2\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span>nn, first, q, r, t, k, n, l<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">*</span>q <span class=\"sy0\">+</span> r <span class=\"sy0\">-</span> t <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">*</span>t<span class=\"br0\">)</span> \\<br/>        <span class=\"sy0\">?</span> <span class=\"br0\">[</span><span class=\"st0\">\"${n}${first?'.':''}\"</span>, <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20false\"><span class=\"kw2\">false</span></a>, <span class=\"nu0\">10</span><span class=\"sy0\">*</span>q, <span class=\"nu0\">10</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>r <span class=\"sy0\">-</span> n<span class=\"sy0\">*</span>t<span class=\"br0\">)</span>, t  , k    , <span class=\"nu0\">10</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span>q <span class=\"sy0\">+</span> r<span class=\"br0\">)</span>/t <span class=\"sy0\">-</span> <span class=\"nu0\">10</span><span class=\"sy0\">*</span>n    , l    <span class=\"br0\">]</span> \\<br/>       \u00a0: <span class=\"br0\">[</span><span class=\"st0\">''</span>                   , first, q<span class=\"sy0\">*</span>k , <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>q <span class=\"sy0\">+</span> r<span class=\"br0\">)</span><span class=\"sy0\">*</span>l , t<span class=\"sy0\">*</span>l, k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span class=\"br0\">(</span>q<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">*</span>k <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> r<span class=\"sy0\">*</span>l<span class=\"br0\">)</span>/<span class=\"br0\">(</span>t<span class=\"sy0\">*</span>l<span class=\"br0\">)</span>, l <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20print\"><span class=\"kw8\">print</span></a> nn<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 19, "block": "<pre class=\"haskell highlighted_source\">pi<span class=\"sy0\">_</span> <span class=\"sy0\">=</span> g <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    g <span class=\"br0\">(</span>q<span class=\"sy0\">,</span> r<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> l<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">if</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> q <span class=\"sy0\">+</span> r <span class=\"sy0\">-</span> t <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">*</span> t<br/>        <span class=\"kw1\">then</span> n\u00a0:<br/>             g<br/>               <span class=\"br0\">(</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span> q<br/>               <span class=\"sy0\">,</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>r <span class=\"sy0\">-</span> n <span class=\"sy0\">*</span> t<span class=\"br0\">)</span><br/>               <span class=\"sy0\">,</span> t<br/>               <span class=\"sy0\">,</span> k<br/>               <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a> <span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy0\">*</span> q <span class=\"sy0\">+</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span> t <span class=\"sy0\">-</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span> n<br/>               <span class=\"sy0\">,</span> l<span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span> g<br/>               <span class=\"br0\">(</span> q <span class=\"sy0\">*</span> k<br/>               <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> q <span class=\"sy0\">+</span> r<span class=\"br0\">)</span> <span class=\"sy0\">*</span> l<br/>               <span class=\"sy0\">,</span> t <span class=\"sy0\">*</span> l<br/>               <span class=\"sy0\">,</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>               <span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a> <span class=\"br0\">(</span>q <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span> <span class=\"sy0\">*</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> r <span class=\"sy0\">*</span> l<span class=\"br0\">)</span> <span class=\"br0\">(</span>t <span class=\"sy0\">*</span> l<span class=\"br0\">)</span><br/>               <span class=\"sy0\">,</span> l <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 28, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> pi <span class=\"br0\">(</span>q<span class=\"sy1\">,</span> r<span class=\"sy1\">,</span> t<span class=\"sy1\">,</span> k<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> l<span class=\"br0\">)</span><br/>  first <span class=\"sy1\">:=</span> <span class=\"st0\">\"yes\"</span><br/>  <span class=\"kw1\">repeat</span> <span class=\"br0\">{</span> <span class=\"co1\"># infinite loop</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy1\">*</span>q<span class=\"sy1\">+</span>r<span class=\"sy1\">-</span>t <span class=\"sy1\">&lt;</span> n<span class=\"sy1\">*</span>t<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">suspend</span> n<br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy1\">\\</span>first<span class=\"br0\">)</span> <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">null</span> <span class=\"kw1\">then</span> <span class=\"kw1\">suspend</span> <span class=\"st0\">\".\"</span><br/>      <span class=\"co1\"># compute and update variables for next cycle</span><br/>      nr <span class=\"sy1\">:=</span> <span class=\"nu0\">10</span><span class=\"sy1\">*</span><span class=\"br0\">(</span>r<span class=\"sy1\">-</span>n<span class=\"sy1\">*</span>t<span class=\"br0\">)</span><br/>      n <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy1\">*</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">*</span>q<span class=\"sy1\">+</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">/</span> t<span class=\"br0\">)</span> <span class=\"sy1\">-</span> <span class=\"nu0\">10</span><span class=\"sy1\">*</span>n<br/>      q <span class=\"sy1\">*:=</span> <span class=\"nu0\">10</span><br/>      r <span class=\"sy1\">:=</span> nr<br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      <span class=\"co1\"># compute and update variables for next cycle</span><br/>      nr <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">*</span>q<span class=\"sy1\">+</span>r<span class=\"br0\">)</span><span class=\"sy1\">*</span>l<br/>      nn <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>q<span class=\"sy1\">*</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy1\">*</span>k<span class=\"sy1\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">+</span>r<span class=\"sy1\">*</span>l<span class=\"br0\">)</span> <span class=\"sy1\">/</span> <span class=\"br0\">(</span>t<span class=\"sy1\">*</span>l<span class=\"br0\">)</span><br/>      q <span class=\"sy1\">*:=</span> k<br/>      t <span class=\"sy1\">*:=</span> l<br/>      l <span class=\"sy1\">+:=</span> <span class=\"nu0\">2</span><br/>      k <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><br/>      n <span class=\"sy1\">:=</span> nn<br/>      r <span class=\"sy1\">:=</span> nr<br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">every</span> <span class=\"br0\">(</span><span class=\"kw4\">writes</span> <span class=\"br0\">(</span>pi <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 6, "block": "<pre class=\"j highlighted_source\">pi=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  smoutput\"<span class=\"nu0\">0</span><span class=\"st_h\">'3.1'</span><br/>  <span class=\"kw2\">n</span>=.<span class=\"nu0\">0</span> while.<span class=\"kw2\">n</span>=.<span class=\"kw2\">n</span>+<span class=\"nu0\">1</span> <span class=\"kw1\">do.</span><br/>    smoutput-/<span class=\"nu0\">1</span> <span class=\"nu0\">10</span>*&lt;<a class=\"__cf_email__\" data-cfemail=\"654b250a4b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"nu0\">10x</span>^<span class=\"nu0\">1</span> <span class=\"nu0\">0</span>+<span class=\"kw2\">n</span><br/>  <span class=\"kw1\">end.</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 45, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.math.BigInteger</span> <span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Pi <span class=\"br0\">{</span><br/>  <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> TWO <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>  <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> THREE <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>  <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> FOUR <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>  <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> SEVEN <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> q <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span> <span class=\"sy0\">;</span><br/>  <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> r <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ZERO</span> <span class=\"sy0\">;</span><br/>  <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> t <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span> <span class=\"sy0\">;</span><br/>  <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> k <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span> <span class=\"sy0\">;</span><br/>  <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> n <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>  <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> l <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> calcPiDigits<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a> nn, nr <span class=\"sy0\">;</span><br/>    <span class=\"kw4\">boolean</span> first <span class=\"sy0\">=</span> <span class=\"kw2\">true</span> <span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>FOUR.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>q<span class=\"br0\">)</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span>.<span class=\"me1\">subtract</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span>.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>n.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>          <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>          <span class=\"kw1\">if</span><span class=\"br0\">(</span>first<span class=\"br0\">)</span><span class=\"br0\">{</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span> first <span class=\"sy0\">=</span> <span class=\"kw2\">false</span> <span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>          nr <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">TEN</span>.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>r.<span class=\"me1\">subtract</span><span class=\"br0\">(</span>n.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>          n <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">TEN</span>.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>THREE.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>q<span class=\"br0\">)</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">divide</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span>.<span class=\"me1\">subtract</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">TEN</span>.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>          q <span class=\"sy0\">=</span> q.<span class=\"me1\">multiply</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">TEN</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>          r <span class=\"sy0\">=</span> nr <span class=\"sy0\">;</span><br/>          <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">flush</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>          nr <span class=\"sy0\">=</span> TWO.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>q<span class=\"br0\">)</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span>.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>          nn <span class=\"sy0\">=</span> q.<span class=\"me1\">multiply</span><span class=\"br0\">(</span><span class=\"br0\">(</span>SEVEN.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span>TWO<span class=\"br0\">)</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span>r.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">divide</span><span class=\"br0\">(</span>t.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>          q <span class=\"sy0\">=</span> q.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>          t <span class=\"sy0\">=</span> t.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>l<span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>          l <span class=\"sy0\">=</span> l.<span class=\"me1\">add</span><span class=\"br0\">(</span>TWO<span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>          k <span class=\"sy0\">=</span> k.<span class=\"me1\">add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abiginteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BigInteger</span></a>.<span class=\"me1\">ONE</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>          n <span class=\"sy0\">=</span> nn <span class=\"sy0\">;</span><br/>          r <span class=\"sy0\">=</span> nr <span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Pi p <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Pi<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>    p.<span class=\"me1\">calcPiDigits</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 26, "block": "<pre class=\"text highlighted_source\">var BigInteger = require('jsbn').BigInteger;<br/>var bi = function(n, b) { return new BigInteger(n.toString(), b\u00a0? b\u00a0: 10); };<br/>function calcPi() {<br/>    var q=bi(1), r=bi(0), t=bi(1), k=bi(1), n=bi(3), l=bi(3);<br/>    var one=bi(1), two=bi(2), three=bi(3), four=bi(4), seven=bi(7), ten=bi(10);<br/>    while (true) {<br/>        if (q.multiply(four).add(r).subtract(t).compareTo(n.multiply(t)) &lt; 0) {<br/>            process.stdout.write(n.toString());<br/>            nr = (r.subtract(n.multiply(t))).multiply(ten);<br/>            n  = (q.multiply(three).add(r)).multiply(ten).divide(t).subtract(n.multiply(ten));<br/>            q  = q.multiply(ten);<br/>            r  = nr;<br/>        } else {<br/>            nr = q.shiftLeft(1).add(r).multiply(l);<br/>            nn = q.multiply(k).multiply(seven).add(two).add(r.multiply(l)).divide(t.multiply(l));<br/>            q = q.multiply(k);<br/>            t = t.multiply(l);<br/>            l = l.add(two);<br/>            k = k.add(one);<br/>            n  = nn;<br/>            r  = nr;<br/>        }<br/>    }<br/>}<br/>calcPi();<br/>\u00a0</pre>"}, {"lang": "jq", "loc": 59, "block": "<pre class=\"text highlighted_source\"># The Gibbons spigot, in the mold of the [[#Groovy]] and ython]] programs shown on this page.  <br/># The \"bigint\" functions<br/>needed are: long_minus long_add long_multiply long_div<br/>\u00a0<br/>def pi_spigot:<br/>\u00a0<br/>  # S is the sixtuple:<br/>  # q      r      t      k      n      l<br/>  # 0      1      2      3      4      5<br/>\u00a0<br/>  def long_lt(x;y): if x == y then false else lessOrEqual(x;y) end;<br/>\u00a0<br/>  def check: <br/>     long_lt(long_minus(long_add(long_multiply(\"4\"; .[0]); .[1])\u00a0; .[2]);<br/>             long_multiply(.[4]; .[2]));<br/>\u00a0<br/>  # state: [d, S] where digit is null or a digit ready to be printed<br/>  def next:<br/>    .[1] as $S<br/>    | $S[0] as $q | $S[1] as $r | $S[2] as $t | $S[3] as $k | $S[4] as $n | $S[5] as $l<br/>    | if $S|check<br/>      then [$n,<br/>             [long_multiply(\"10\"; $q),<br/>              long_multiply(\"10\"; long_minus($r; long_multiply($n;$t))),<br/>              $t,<br/>              $k,<br/>              long_minus( long_div(long_multiply(\"10\";long_add(long_multiply(\"3\"; $q); $r)); $t );<br/>                          long_multiply(\"10\";$n)),<br/>              $l ]]<br/>      else [null,<br/>             [long_multiply($q;$k),<br/>              long_multiply( long_add(long_multiply(\"2\";$q); $r); $l),<br/>              long_multiply($t;$l),<br/>              long_add($k; \"1\"),<br/>              long_div( long_add(long_multiply($q; long_add(long_multiply(\"7\";$k); \"2\"))\u00a0; long_multiply($r;$l)); <br/>                        long_multiply($t;$l) ),<br/>              long_add($l; \"2\") ]]<br/>      end;<br/>\u00a0<br/>  # Input: input to the filter \"nextstate\"<br/>  # Output:  [count, space, digit] for successive digits produced by \"nextstate\"<br/>  def decorate( nextstate ):<br/>\u00a0<br/>     # For efficiency it is important that the recursive <br/>     # function have arity 0 and be tail-recursive:<br/>     def count:<br/>       .[0] as $count<br/>       | .[1] as $state<br/>       | $state[0] as $value<br/>       | ($state[1] | map(length) | add) as $space<br/>       | (if $value then [$count, $space, $value] else empty end),<br/>         ( [if $value then $count+1 else $count end, ($state | nextstate)] | count);<br/>  [0, .] | count;     <br/>\u00a0<br/>  #       q=1, r=0, t=1, k=1, n=3, l=3<br/>  [null, [\"1\", \"0\", \"1\", \"1\", \"3\", \"3\"]] | decorate(next)<br/>;<br/>\u00a0<br/>pi_spigot</pre>"}, {"lang": "Julia", "loc": 12, "block": "<pre class=\"text highlighted_source\">prec = precision(BigFloat)<br/>spi = \"\"<br/>digit = 1<br/>while true<br/>  if digit &gt; length(spi) - 6<br/>    prec *= 2<br/>    setprecision(prec)<br/>    spi = string(big(\u03c0))<br/>  end<br/>  print(spi[digit])<br/>  digit += 1<br/>end</pre>"}, {"lang": "Kotlin", "loc": 45, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">math</span>.<span class=\"me1\">BigInteger</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ZERO  <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">ZERO</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ONE   <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">ONE</span> <br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> TWO   <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>2L<span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> THREE <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>3L<span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> FOUR  <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>4L<span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> SEVEN <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>7L<span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> TEN   <span class=\"sy0\">=</span> BigInteger.<span class=\"me1\">TEN</span><br/>\u00a0<br/>fun calcPi<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nn<span class=\"sy0\">:</span> BigInteger<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nr<span class=\"sy0\">:</span> BigInteger<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> q <span class=\"sy0\">=</span> ONE<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> r <span class=\"sy0\">=</span> ZERO<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> t <span class=\"sy0\">=</span> ONE<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> k <span class=\"sy0\">=</span> ONE<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n <span class=\"sy0\">=</span> THREE<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> l <span class=\"sy0\">=</span> THREE     <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> first <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>FOUR <span class=\"sy0\">*</span> q + r - t <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">*</span> t<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            print<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>first<span class=\"br0\">)</span> <span class=\"br0\">{</span> print <span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> first <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a> <span class=\"br0\">}</span><br/>            nr <span class=\"sy0\">=</span> TEN <span class=\"sy0\">*</span> <span class=\"br0\">(</span>r - n <span class=\"sy0\">*</span> t<span class=\"br0\">)</span><br/>            n <span class=\"sy0\">=</span> TEN <span class=\"sy0\">*</span> <span class=\"br0\">(</span>THREE <span class=\"sy0\">*</span> q + r<span class=\"br0\">)</span> / t - TEN <span class=\"sy0\">*</span> n<br/>            q <span class=\"sy0\">*=</span> TEN<br/>            r <span class=\"sy0\">=</span> nr<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>            nr <span class=\"sy0\">=</span> <span class=\"br0\">(</span>TWO <span class=\"sy0\">*</span> q + r<span class=\"br0\">)</span> <span class=\"sy0\">*</span> l<br/>            nn <span class=\"sy0\">=</span> <span class=\"br0\">(</span>q <span class=\"sy0\">*</span> SEVEN <span class=\"sy0\">*</span> k + TWO + r <span class=\"sy0\">*</span> l<span class=\"br0\">)</span> / <span class=\"br0\">(</span>t <span class=\"sy0\">*</span> l<span class=\"br0\">)</span><br/>            q <span class=\"sy0\">*=</span> k<br/>            t <span class=\"sy0\">*=</span> l<br/>            l +<span class=\"sy0\">=</span> TWO<br/>            k +<span class=\"sy0\">=</span> ONE<br/>            n <span class=\"sy0\">=</span> nn<br/>            r <span class=\"sy0\">=</span> nr<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> calcPi<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Lasso", "loc": 31, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/lasso9<br/>\u00a0<br/>define generatePi =&gt; {<br/>  yield currentCapture<br/>\u00a0<br/>  local(r = array(), i, k, b, d, c = 0, x)<br/>  with i in generateSeries(1, 2800)<br/>  do #r-&gt;insert(2000)<br/>  with k in generateSeries(2800, 1, -14)<br/>  do {<br/>    #d = 0<br/>    #i = #k<br/>    while(true) =&gt; {<br/>      #d += #r-&gt;get(#i) * 10000<br/>      #b = 2 * #i - 1<br/>      #r-&gt;get(#i) = #d\u00a0% #b<br/>      #d /= #b<br/>      #i--<br/>     \u00a0!#i\u00a0? loop_abort<br/>      #d *= #i<br/>    }<br/>    #x = (#c + #d / 10000)<br/>    yield (#k == 2800\u00a0? ((#x * 0.001)-&gt;asstring(-precision = 3)) | #x-&gt;asstring(-padding=4, -padChar='0'))<br/>    #c = #d\u00a0% 10000<br/>  }<br/>}<br/>\u00a0<br/>local(pi_digits) = generatePi<br/>loop(200) =&gt; {<br/>    stdout(#pi_digits())<br/>}</pre>"}, {"lang": "Liberty BASIC", "loc": 35, "block": "<pre class=\"lb highlighted_source\">    ndigits <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    q       <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    r       <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    t       <span class=\"sy0\">=</span> q<br/>    k       <span class=\"sy0\">=</span> q<br/>    n       <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>    L       <span class=\"sy0\">=</span> n<br/>\u00a0<br/>   first <span class=\"sy0\">=</span> <span class=\"nu0\">666</span>  <span class=\"co1\">'   ANY non-zero =='true' in LB.</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> ndigits <span class=\"sy0\">&lt;</span><span class=\"nu0\">100</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span>q <span class=\"sy0\">+</span>r <span class=\"sy0\">-</span>t<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span><span class=\"br0\">(</span> n <span class=\"sy0\">*</span>t<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">print</span> n;<br/>            ndigits <span class=\"sy0\">=</span>ndigits <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw2\">not</span><span class=\"br0\">(</span> ndigits <span class=\"kw1\">mod</span> <span class=\"nu0\">40</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">print</span><span class=\"sy0\">:</span> <span class=\"kw1\">print</span> <span class=\"st0\">\"  \"</span>;<br/>            <span class=\"kw1\">if</span> first <span class=\"sy0\">=</span><span class=\"nu0\">666</span> <span class=\"kw1\">then</span> first <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">:</span> <span class=\"kw1\">print</span> <span class=\"st0\">\".\"</span>;<br/>            nr <span class=\"sy0\">=</span><span class=\"nu0\">10</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span> r <span class=\"sy0\">-</span>n <span class=\"sy0\">*</span>t<span class=\"br0\">)</span><br/>            n  <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span>q <span class=\"sy0\">+</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span>t<span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"nu0\">10</span> <span class=\"sy0\">*</span>n<span class=\"br0\">)</span><br/>            q  <span class=\"sy0\">=</span>q <span class=\"sy0\">*</span><span class=\"nu0\">10</span><br/>            r  <span class=\"sy0\">=</span>nr<br/>        <span class=\"kw1\">else</span><br/>            nr <span class=\"sy0\">=</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span>q <span class=\"sy0\">+</span>r<span class=\"br0\">)</span> <span class=\"sy0\">*</span>L<br/>            nn <span class=\"sy0\">=</span><span class=\"br0\">(</span>q <span class=\"sy0\">*</span><span class=\"br0\">(</span> <span class=\"nu0\">7</span> <span class=\"sy0\">*</span>k <span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span>r <span class=\"sy0\">*</span>L<span class=\"br0\">)</span> <span class=\"sy0\">/</span><span class=\"br0\">(</span> t <span class=\"sy0\">*</span>L<span class=\"br0\">)</span><br/>            q  <span class=\"sy0\">=</span>q <span class=\"sy0\">*</span>k<br/>            t  <span class=\"sy0\">=</span>t <span class=\"sy0\">*</span>L<br/>            L  <span class=\"sy0\">=</span>L <span class=\"sy0\">+</span><span class=\"nu0\">2</span><br/>            k  <span class=\"sy0\">=</span>k <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>            n  <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> nn<span class=\"br0\">)</span><br/>            r  <span class=\"sy0\">=</span>nr<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        <span class=\"kw1\">scan</span><br/><span class=\"kw1\">wend</span><br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Lua", "loc": 41, "block": "<pre class=\"lua highlighted_source\">a <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>n <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><br/>len <span class=\"sy0\">=</span> <span class=\"kw3\">math</span><span class=\"sy0\">.</span>modf<span class=\"br0\">(</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">/</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> len <span class=\"kw1\">do</span><br/>    a<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">end</span><br/>nines <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>predigit <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"kw1\">do</span><br/>    q <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> len<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        x <span class=\"sy0\">=</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">+</span> q <span class=\"sy0\">*</span> i<br/>        a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">math</span><span class=\"sy0\">.</span>fmod<span class=\"br0\">(</span> x<span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>        q <span class=\"sy0\">=</span> <span class=\"kw3\">math</span><span class=\"sy0\">.</span>modf<span class=\"br0\">(</span> x <span class=\"sy0\">/</span> <span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">math</span><span class=\"sy0\">.</span>fmod<span class=\"br0\">(</span> q<span class=\"sy0\">,</span> <span class=\"nu0\">10</span> <span class=\"br0\">)</span><br/>    q <span class=\"sy0\">=</span> <span class=\"kw3\">math</span><span class=\"sy0\">.</span>modf<span class=\"br0\">(</span> q <span class=\"sy0\">/</span> <span class=\"nu0\">10</span> <span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> q <span class=\"sy0\">==</span> <span class=\"nu0\">9</span> <span class=\"kw1\">then</span><br/>        nines <span class=\"sy0\">=</span> nines <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">if</span> q <span class=\"sy0\">==</span> <span class=\"nu0\">10</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> predigit <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> nines <span class=\"kw1\">do</span><br/>                <span class=\"kw3\">io.write</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">end</span><br/>            predigit <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            nines <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">else</span><br/>            <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> predigit <span class=\"br0\">)</span><br/>            predigit <span class=\"sy0\">=</span> q<br/>            <span class=\"kw1\">if</span> nines <span class=\"sy0\">~=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>                <span class=\"kw1\">for</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> nines <span class=\"kw1\">do</span><br/>                    <span class=\"kw3\">io.write</span><span class=\"br0\">(</span> <span class=\"nu0\">9</span> <span class=\"br0\">)</span><br/>                <span class=\"kw1\">end</span><br/>                nines <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> predigit <span class=\"br0\">)</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 97, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module Checkpi {<br/>      Module FindPi(Digits){ <br/>            Digits++<br/>            n=Int(3.32*Digits)<br/>            PlusOne=Lambda N=0% -&gt; {<br/>                  =N<br/>                  N++<br/>            }<br/>            PlusTwo=Lambda N=1% -&gt; {<br/>                  =N<br/>                  N+=2<br/>            }<br/>            Dim A(n)&lt;&lt;PlusOne(), B(n)&lt;&lt;PlusTwo()<br/>            Dim Ten(n),  CarrierOver(n), Sum(n),Remainder(n)=2<br/>            OutPutDigits=Digits<br/>            Predigits=Stack<br/>            CallBack=lambda fl=true, Chars=0 (x)-&gt;{<br/>                  Print x;<br/>                  Chars++<br/>                  If fl then Print \".\"\u00a0: Print \" \";\u00a0: fl=false\u00a0: Chars=0\u00a0: exit<br/>                  If Chars=50 then { <br/>                        Print<br/>                        Print \" \";<br/>                        Chars=0 <br/>                        Refresh<br/>                  } else.if (Chars mod 5)=0 then {<br/>                         Print \" \";<br/>                         Refresh<br/>                  }<br/>                  \\\\ explicitly refresh output layer, using Fast\u00a0! mode of speed<br/>            }<br/>            Print \"Pi=\";<br/>             While Digits {<br/>                  NextDigit(&amp;CallBack, &amp;Digits)<br/>            }<br/>            print<br/>            Refresh<br/>            Sub NextDigit(&amp;f, &amp;D)<br/>                CarrierOver=0<br/>                  For k=n-1 to 1 {<br/>                  Ten(k)=Remainder(k)*10%<br/>                  CarrierOver(k)=CarrierOver<br/>                  Sum(k)=Ten(k)+CarrierOver(k)<br/>                  q=Sum(k) div  B(k)<br/>                  Remainder(k)=Sum(k)-B(k)*q<br/>                  CarrierOver=A(k)*q<br/>                  }<br/>                  Ten(0)=Remainder(0)*10%<br/>                  CarrierOver(0)=CarrierOver<br/>                  Sum(0)=Ten(0)+CarrierOver(0)<br/>                  q=Sum(0) div  10%<br/>                  Remainder(0)=Sum(0)-10%*q<br/>                  if q&lt;&gt;9 and q&lt;&gt;10 then {<br/>                        Stack Predigits {<br/>                              While not empty {<br/>                                Call f(Number)<br/>                                if D&gt;0 then D--<br/>                                If D=0 then flush ' empty stack<br/>                              }      <br/>                              Push q<br/>                        }       <br/>                  } else.if q=9 Then {<br/>                        Stack Predigits { Data q }<br/>                  } else {<br/>                        Stack Predigits {<br/>                        While not empty {<br/>                              Call f((Number+1) mod 10)<br/>                              if D&gt;0 then D--<br/>                              If D=0 then flush ' empty stack<br/>                        }      <br/>                        Push 0<br/>                        }<br/>                  }<br/>            End Sub     <br/>      }<br/>      \\\\ reduce time to share with OS<br/>      \\\\ Need explicitly use of refresh output layer (M2000 console)<br/>      \\\\ Slow for a screen refresh per statement and give more time to OS<br/>      Rem Set Slow <br/>      \\\\ Fast is normal screen refresh, per Refresh time, and give standard time to OS<br/>      Rem Set Fast<br/>      \\\\ Fast\u00a0! use Refresh for screen refresh, and give less time o OS than standard<br/>      \\\\ Esc key work when Refresh executed (and OS get little time)<br/>      Set Fast\u00a0!  <br/>      FindPi 4<br/>      FindPi 28<br/>      Print Pi  ' pi in M2000 is Decimal type with 29 digits (1 plus 28 after dot, is same as FindPi 28)<br/>      Refresh<br/>      FindPi 50     <br/>}<br/>Flush ' empty stack of values<br/>CheckPi<br/>List  ' no variables exist<br/>Modules\u00a0? ' current module exist<br/>Stack ' Stack of values  ' has to be empty, we didn't use current stack for values.<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 3, "block": "<pre class=\"text highlighted_source\">WriteString[$Output, \"3.\"];<br/>For[i = -1, True, i--, <br/>  WriteString[$Output, RealDigits[Pi, 10, 1, i][[1, 1]]]; Pause[.05]];</pre>"}, {"lang": "MATLAB / Octave", "loc": 1, "block": "<pre class=\"matlab highlighted_source\"><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pi.html\"><span class=\"kw2\">pi</span></a></pre>"}, {"lang": "NetRexx", "loc": 63, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols <span class=\"kw2\">binary</span><br/><span class=\"kw1\">import</span> java.<span class=\"me0\">math</span>.<span class=\"me0\">BigInteger</span><br/>\u00a0<br/>runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">parse</span> arg places .<br/>  <span class=\"kw1\">if</span> places = <span class=\"st0\">''</span> <span class=\"kw3\">then</span> places = -<span class=\"nu0\">1</span><br/>\u00a0<br/>  TWO   = BigInteger.<span class=\"me0\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  THREE = BigInteger.<span class=\"me0\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  FOUR  = BigInteger.<span class=\"me0\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>  SEVEN = BigInteger.<span class=\"me0\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>\u00a0<br/>  q_ = BigInteger.<span class=\"me0\">ONE</span><br/>  r_ = BigInteger.<span class=\"me0\">ZERO</span><br/>  t_ = BigInteger.<span class=\"me0\">ONE</span><br/>  k_ = BigInteger.<span class=\"me0\">ONE</span><br/>  n_ = BigInteger.<span class=\"me0\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  l_ = BigInteger.<span class=\"me0\">valueOf</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/>  nn = BigInteger<br/>  nr = BigInteger<br/>\u00a0<br/>  first = isTrue<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  digitCt = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">loop</span> forever<br/>    <span class=\"kw1\">if</span> FOUR.<span class=\"me0\">multiply</span><span class=\"br0\">(</span>q_<span class=\"br0\">)</span>.<span class=\"me0\">add</span><span class=\"br0\">(</span>r_<span class=\"br0\">)</span>.<span class=\"me0\">subtract</span><span class=\"br0\">(</span>t_<span class=\"br0\">)</span>.<span class=\"me0\">compareTo</span><span class=\"br0\">(</span>n_.<span class=\"me0\">multiply</span><span class=\"br0\">(</span>t_<span class=\"br0\">)</span><span class=\"br0\">)</span> == -<span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>      digitCt = digitCt + <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">if</span> places <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span> digitCt - <span class=\"nu0\">1</span> <span class=\"sy0\">&gt;</span> places <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span><br/>      <span class=\"kw1\">say</span> n_<span class=\"st0\">'\\-'</span><br/>      <span class=\"kw1\">if</span> first <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">say</span> <span class=\"st0\">'.\\-'</span><br/>        first = isFalse<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span><br/>      nr = BigInteger.<span class=\"me0\">TEN</span>.<span class=\"me0\">multiply</span><span class=\"br0\">(</span>r_.<span class=\"me0\">subtract</span><span class=\"br0\">(</span>n_.<span class=\"me0\">multiply</span><span class=\"br0\">(</span>t_<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      n_ = BigInteger.<span class=\"me0\">TEN</span>.<span class=\"me0\">multiply</span><span class=\"br0\">(</span>THREE.<span class=\"me0\">multiply</span><span class=\"br0\">(</span>q_<span class=\"br0\">)</span>.<span class=\"me0\">add</span><span class=\"br0\">(</span>r_<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me0\">divide</span><span class=\"br0\">(</span>t_<span class=\"br0\">)</span>.<span class=\"me0\">subtract</span><span class=\"br0\">(</span>BigInteger.<span class=\"me0\">TEN</span>.<span class=\"me0\">multiply</span><span class=\"br0\">(</span>n_<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      q_ = q_.<span class=\"me0\">multiply</span><span class=\"br0\">(</span>BigInteger.<span class=\"me0\">TEN</span><span class=\"br0\">)</span><br/>      r_ = nr<br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw1\">do</span><br/>      nr = TWO.<span class=\"me0\">multiply</span><span class=\"br0\">(</span>q_<span class=\"br0\">)</span>.<span class=\"me0\">add</span><span class=\"br0\">(</span>r_<span class=\"br0\">)</span>.<span class=\"me0\">multiply</span><span class=\"br0\">(</span>l_<span class=\"br0\">)</span><br/>      nn = q_.<span class=\"me0\">multiply</span><span class=\"br0\">(</span><span class=\"br0\">(</span>SEVEN.<span class=\"me0\">multiply</span><span class=\"br0\">(</span>k_<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me0\">add</span><span class=\"br0\">(</span>TWO<span class=\"br0\">)</span>.<span class=\"me0\">add</span><span class=\"br0\">(</span>r_.<span class=\"me0\">multiply</span><span class=\"br0\">(</span>l_<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me0\">divide</span><span class=\"br0\">(</span>t_.<span class=\"me0\">multiply</span><span class=\"br0\">(</span>l_<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      q_ = q_.<span class=\"me0\">multiply</span><span class=\"br0\">(</span>k_<span class=\"br0\">)</span><br/>      t_ = t_.<span class=\"me0\">multiply</span><span class=\"br0\">(</span>l_<span class=\"br0\">)</span><br/>      l_ = l_.<span class=\"me0\">add</span><span class=\"br0\">(</span>TWO<span class=\"br0\">)</span><br/>      k_ = k_.<span class=\"me0\">add</span><span class=\"br0\">(</span>BigInteger.<span class=\"me0\">ONE</span><span class=\"br0\">)</span><br/>      n_ = nn<br/>      r_ = nr<br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">say</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/>method isTrue<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> boolean<br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> == <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>method isFalse<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> boolean<br/>  <span class=\"kw1\">return</span> <span class=\"sy0\">\\</span>isTrue<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 50, "block": "<pre class=\"text highlighted_source\">import strutils, bigints<br/>\u00a0<br/>var<br/>  tmp1, tmp2, tmp3, acc, k, dd = initBigInt(0)<br/>  den, num, k2 = initBigInt(1)<br/>\u00a0<br/>proc extractDigit(): int32 =<br/>  if num &gt; acc:<br/>    return -1<br/>\u00a0<br/>  tmp3 = num shl 1<br/>  tmp3 += num<br/>  tmp3 += acc<br/>  tmp2 = tmp3 mod den<br/>  tmp1 = tmp3 div den<br/>  tmp2 += num<br/>\u00a0<br/>  if tmp2 &gt;= den:<br/>    return -1<br/>\u00a0<br/>  result = int32(tmp1.limbs[0])<br/>\u00a0<br/>proc eliminateDigit(d: int32) =<br/>  acc -= den * d<br/>  acc *= 10<br/>  num *= 10<br/>\u00a0<br/>proc nextTerm() =<br/>  k += 1<br/>  k2 += 2<br/>  tmp1 = num shl 1<br/>  acc += tmp1<br/>  acc *= k2<br/>  den *= k2<br/>  num *= k<br/>\u00a0<br/>var i = 0<br/>\u00a0<br/>while true:<br/>  var d: int32 = -1<br/>  while d &lt; 0:<br/>    nextTerm()<br/>    d = extractDigit()<br/>\u00a0<br/>  stdout.write chr(ord('0') + d)<br/>  inc i<br/>  if i == 40:<br/>    echo \"\"<br/>    i = 0<br/>  eliminateDigit d</pre>"}, {"lang": "OCaml", "loc": 12, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">open</span> Creal<span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> block <span class=\"sy0\">=</span> <span class=\"nu0\">100</span> <span class=\"kw1\">in</span><br/><span class=\"kw1\">let</span> segment n <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> to_string pi <span class=\"br0\">(</span>n<span class=\"sy0\">*</span>block<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>   <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>sub s <span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>block<span class=\"br0\">)</span> block <span class=\"kw1\">in</span><br/><span class=\"kw1\">let</span> counter <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">1</span> <span class=\"kw1\">in</span><br/><span class=\"kw1\">while</span> <span class=\"kw1\">true</span> <span class=\"kw1\">do</span><br/>   <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_string\"><span class=\"kw3\">print_string</span></a> <span class=\"br0\">(</span>segment <span class=\"sy0\">!</span>counter<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALflush\"><span class=\"kw3\">flush</span></a> <span class=\"kw1\">stdout</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">incr</span> counter<br/><span class=\"kw1\">done</span></pre>"}, {"lang": "Oforth", "loc": 20, "block": "<pre class=\"text highlighted_source\">: calcPiDigits <br/>| q r t k n l |<br/>   1 -&gt;q 0 -&gt;r 1 -&gt;t 1 -&gt;k 3 -&gt;n 3 -&gt; l<br/>\u00a0<br/>   while( true ) [<br/>      4 q * r + t - n t * &lt; ifTrue: [<br/>         n print<br/>         r n t * - 10 *<br/>         3 q * r + 10 * t / n 10 * - -&gt;n -&gt;r<br/>         q 10 * -&gt;q<br/>         ]<br/>      else: [<br/>         2 q * r + l * <br/>         7 k * q * 2 + r l * + t l * / -&gt;n -&gt;r<br/>         k q * -&gt;q<br/>         t l * -&gt;t<br/>         l 2 + -&gt;l<br/>         k 1+  -&gt;k<br/>         ]<br/>       ]\u00a0;</pre>"}, {"lang": "PARI/GP", "loc": 11, "block": "<pre class=\"parigp highlighted_source\">pi<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>x<span class=\"sy0\">=</span><span class=\"kw1\">Pi</span><span class=\"sy0\">,</span>n<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">print1</span><span class=\"br0\">(</span><span class=\"st0\">\"3.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy0\">&gt;=</span><span class=\"kw1\">default</span><span class=\"br0\">(</span><span class=\"kw3\">realprecision</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>      <span class=\"kw1\">default</span><span class=\"br0\">(</span><span class=\"kw3\">realprecision</span><span class=\"sy0\">,</span><span class=\"kw1\">default</span><span class=\"br0\">(</span><span class=\"kw3\">realprecision</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      x<span class=\"sy0\">=</span><span class=\"kw1\">Pi</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">print1</span><span class=\"br0\">(</span><span class=\"kw1\">floor</span><span class=\"br0\">(</span>x<span class=\"sy0\">*</span><span class=\"nu1\">10</span><span class=\"sy0\">^</span>n<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu2\">10</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 64, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> Pi_Spigot<span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  n   <span class=\"sy3\">=</span> <span class=\"nu0\">1000</span><span class=\"sy1\">;</span><br/>  len <span class=\"sy3\">=</span> <span class=\"nu0\">10</span><span class=\"sy3\">*</span>n <span class=\"kw1\">div</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  j<span class=\"sy1\">,</span> k<span class=\"sy1\">,</span> q<span class=\"sy1\">,</span> nines<span class=\"sy1\">,</span> predigit<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  a<span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"me1\">len</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">longint</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> OneLoop<span class=\"br0\">(</span>i<span class=\"sy1\">:</span><span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  x<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"coMULTI\">{Only calculate as far as needed }</span><br/>  <span class=\"coMULTI\">{+16 for security digits ~5 decimals}</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy3\">*</span><span class=\"nu0\">10</span> <span class=\"kw1\">div</span> <span class=\"nu0\">3</span><span class=\"sy3\">+</span><span class=\"nu0\">16</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> i &gt; len <span class=\"kw1\">then</span><br/>    i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> len<span class=\"sy1\">;</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span>   <span class=\"coMULTI\">{Work backwards}</span><br/>    x  <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">10</span><span class=\"sy3\">*</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy3\">+</span> result<span class=\"sy3\">*</span>i<span class=\"sy1\">;</span><br/>    result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> x <span class=\"kw1\">div</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>i <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    a<span class=\"br0\">[</span>i<span class=\"br0\">]</span>   <span class=\"sy1\">:</span><span class=\"sy3\">=</span> x <span class=\"sy3\">-</span> result<span class=\"sy3\">*</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>i <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><span class=\"co1\">//x mod (2*i - 1)</span><br/>    dec<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> i&lt;<span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> len <span class=\"kw1\">do</span><br/>    a<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span>                 <span class=\"coMULTI\">{Start with 2s}</span><br/>  nines <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  predigit <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span>               <span class=\"coMULTI\">{First predigit is a 0}</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    q <span class=\"sy1\">:</span><span class=\"sy3\">=</span> OneLoop<span class=\"br0\">(</span>n<span class=\"sy3\">-</span>j<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> q <span class=\"kw1\">mod</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span><br/>    q <span class=\"sy1\">:</span><span class=\"sy3\">=</span> q <span class=\"kw1\">div</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> q <span class=\"sy3\">=</span> <span class=\"nu0\">9</span> <span class=\"kw1\">then</span><br/>      nines <span class=\"sy1\">:</span><span class=\"sy3\">=</span> nines <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">if</span> q <span class=\"sy3\">=</span> <span class=\"nu0\">10</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">begin</span><br/>        <span class=\"kw3\">write</span><span class=\"br0\">(</span>predigit<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">for</span> k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> nines <span class=\"kw1\">do</span><br/>          <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>            <span class=\"coMULTI\">{zeros}</span><br/>        predigit <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>        nines <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">begin</span><br/>        <span class=\"kw3\">write</span><span class=\"br0\">(</span>predigit<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        predigit <span class=\"sy1\">:</span><span class=\"sy3\">=</span> q<span class=\"sy1\">;</span><br/>        <span class=\"kw1\">if</span> nines &lt;&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">begin</span><br/>          <span class=\"kw1\">for</span> k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> nines <span class=\"kw1\">do</span><br/>            <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>          nines <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>predigit<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 41, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> pistream <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$digits</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">@out</span><span class=\"sy0\">,</span> <span class=\"re0\">@a</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span><span class=\"sy0\">,</span> <span class=\"re0\">$e</span><span class=\"sy0\">,</span> <span class=\"re0\">$f</span><span class=\"sy0\">,</span> <span class=\"re0\">$g</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$d4</span><span class=\"sy0\">,</span> <span class=\"re0\">$d3</span><span class=\"sy0\">,</span> <span class=\"re0\">$d2</span><span class=\"sy0\">,</span> <span class=\"re0\">$d1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$outi</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"re0\">$digits</span><span class=\"sy0\">++;</span><br/>  <span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <span class=\"re0\">$e</span> <span class=\"sy0\">=</span> <span class=\"re0\">$g</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$f</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10000</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"nu0\">14</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><span class=\"re0\">$digits</span><span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">@a</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">20000000</span><span class=\"br0\">)</span> x <span class=\"re0\">$c</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"3.\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <span class=\"re0\">$c</span> <span class=\"sy0\">-=</span> <span class=\"nu0\">14</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$digits</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <span class=\"re0\">$e</span> <span class=\"sy0\">=</span> <span class=\"re0\">$d</span> <span class=\"sy0\">%</span> <span class=\"re0\">$f</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">--</span><span class=\"re0\">$b</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <span class=\"re0\">$d</span> <span class=\"sy0\">*</span> <span class=\"re0\">$b</span> <span class=\"sy0\">+</span> <span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$b</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$g</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$b</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$d</span> <span class=\"sy0\">%</span> <span class=\"re0\">$g</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$f</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><span class=\"re0\">$d</span> <span class=\"sy0\">/</span> <span class=\"re0\">$g</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$d4</span> <span class=\"sy0\">=</span> <span class=\"re0\">$e</span> <span class=\"sy0\">+</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><span class=\"re0\">$d</span><span class=\"sy0\">/</span><span class=\"re0\">$f</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$d4</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">9999</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"re0\">$d4</span> <span class=\"sy0\">-=</span> <span class=\"nu0\">10000</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$out</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$out</span><span class=\"br0\">[</span><span class=\"re0\">$b</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$b</span><span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$out</span><span class=\"br0\">[</span><span class=\"re0\">$b</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$out</span><span class=\"br0\">[</span><span class=\"re0\">$b</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$d3</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><span class=\"re0\">$d4</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$d2</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><span class=\"re0\">$d3</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$d1</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><span class=\"re0\">$d2</span><span class=\"sy0\">/</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$out</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$d1</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$out</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$d2</span><span class=\"sy0\">-</span><span class=\"re0\">$d1</span><span class=\"sy0\">*</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$out</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$d3</span><span class=\"sy0\">-</span><span class=\"re0\">$d2</span><span class=\"sy0\">*</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$out</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$d4</span><span class=\"sy0\">-</span><span class=\"re0\">$d3</span><span class=\"sy0\">*</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"re0\">@out</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">15</span> <span class=\"sy0\">..</span> <span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">15</span><span class=\"sy0\">+</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>  <span class=\"kw1\">if</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">16</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"co1\"># We've closed the spigot.  Print the remainder without rounding.</span><br/>  <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"re0\">@out</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">-</span><span class=\"nu0\">15</span><span class=\"sy0\">+</span><span class=\"nu0\">4</span> <span class=\"sy0\">..</span> <span class=\"re0\">$digits</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 33, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"co1\"># based on http://www.mathpropress.com/stan/bibliography/spigot.pdf</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> stream<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"kw1\">next</span><span class=\"sy0\">,</span> <span class=\"re0\">&amp;safe</span><span class=\"sy0\">,</span> <span class=\"re0\">&amp;prod</span><span class=\"sy0\">,</span> <span class=\"re0\">&amp;cons</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span> <span class=\"kw1\">is</span> copy<span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    gather <span class=\"kw1\">loop</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$z</span> <span class=\"sy0\">=</span> safe<span class=\"br0\">(</span><span class=\"re0\">$z</span><span class=\"sy0\">,</span> <span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"kw1\">next</span><span class=\"br0\">(</span><span class=\"re0\">$z</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">??</span><br/>             prod<span class=\"br0\">(</span><span class=\"re0\">$z</span><span class=\"sy0\">,</span> take <span class=\"re0\">$y</span><span class=\"br0\">)</span>          <span class=\"sy0\">!!</span><br/>             cons<span class=\"br0\">(</span><span class=\"re0\">$z</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">state</span> $<span class=\"br0\">)</span><span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"br0\">)</span>  <br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> extr<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re0\">$q</span><span class=\"sy0\">,</span> <span class=\"re0\">$r</span><span class=\"sy0\">,</span> <span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"re0\">$t</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span><span class=\"re0\">$q</span> <span class=\"sy0\">*</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$r</span><span class=\"br0\">)</span> <span class=\"kw1\">div</span> <span class=\"br0\">(</span><span class=\"re0\">$s</span> <span class=\"sy0\">*</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$t</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> comp<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re0\">$q</span><span class=\"sy0\">,</span><span class=\"re0\">$r</span><span class=\"sy0\">,</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span><span class=\"re0\">$t</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re0\">$u</span><span class=\"sy0\">,</span><span class=\"re0\">$v</span><span class=\"sy0\">,</span><span class=\"re0\">$w</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span><span class=\"re0\">$q</span> <span class=\"sy0\">*</span> <span class=\"re0\">$u</span> <span class=\"sy0\">+</span> <span class=\"re0\">$r</span> <span class=\"sy0\">*</span> <span class=\"re0\">$w</span><span class=\"sy0\">,</span><br/>     <span class=\"re0\">$q</span> <span class=\"sy0\">*</span> <span class=\"re0\">$v</span> <span class=\"sy0\">+</span> <span class=\"re0\">$r</span> <span class=\"sy0\">*</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span><br/>     <span class=\"re0\">$s</span> <span class=\"sy0\">*</span> <span class=\"re0\">$u</span> <span class=\"sy0\">+</span> <span class=\"re0\">$t</span> <span class=\"sy0\">*</span> <span class=\"re0\">$w</span><span class=\"sy0\">,</span><br/>     <span class=\"re0\">$s</span> <span class=\"sy0\">*</span> <span class=\"re0\">$v</span> <span class=\"sy0\">+</span> <span class=\"re0\">$t</span> <span class=\"sy0\">*</span> <span class=\"re0\">$x</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$pi</span> <span class=\"sy0\">:=</span> <br/>    stream <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$z</span> <span class=\"br0\">{</span> extr<span class=\"br0\">(</span><span class=\"re0\">$z</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>           <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$z</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span> <span class=\"br0\">{</span> <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> extr<span class=\"br0\">(</span><span class=\"re0\">$z</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>           <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$z</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span> <span class=\"br0\">{</span> comp<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">10</span><span class=\"sy0\">*</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>           <span class=\"re0\">&amp;comp</span><span class=\"sy0\">,</span><br/>           <span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"sy0\">&gt;,</span><br/>           <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..*</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> <span class=\"re0\">$_</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"re0\">$_</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"sy0\">^</span>Inf <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$i</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">print</span> <span class=\"re0\">$pi</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    once <span class=\"kw3\">print</span> <span class=\"st_h\">'.'</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 3, "block": "<pre class=\"text highlighted_source\">integer a=10000,b,c=8400,d,e=0,g sequence f=repeat(floor(a/5),c+1) while c&gt;0 do g=2*c d=0 <br/>b=c while b&gt;0 do d+=f[b]*a g-=1 f[b]=remainder(d, g) d=floor(d/g) g-=1 b-=1 if b!=0 then <br/>d*=b end if end while printf(1,\"%04d\",e+floor(d/a)) c-=14 e = remainder(d,a) end while</pre>"}, {"lang": "PicoLisp", "loc": 21, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/picolisp /usr/lib/picolisp/lib.l<br/>\u00a0<br/>(de piDigit ()<br/>   (job '((Q . 1) (R . 0) (S . 1) (K . 1) (N . 3) (L . 3))<br/>      (while (&gt;= (- (+ R (* 4 Q)) S) (* N S))<br/>         (mapc set '(Q R S K N L)<br/>            (list<br/>               (* Q K)<br/>               (* L (+ R (* 2 Q)))<br/>               (* S L)<br/>               (inc K)<br/>               (/ (+ (* Q (+ 2 (* 7 K))) (* R L)) (* S L))<br/>               (+ 2 L) ) ) )<br/>      (prog1 N<br/>         (let M (- (/ (* 10 (+ R (* 3 Q))) S) (* 10 N))<br/>            (setq Q (* 10 Q)  R (* 10 (- R (* N S)))  N M) ) ) ) )<br/>\u00a0<br/>(prin (piDigit) \".\")<br/>(loop<br/>   (prin (piDigit))<br/>   (flush) )</pre>"}, {"lang": "PL/I", "loc": 42, "block": "<pre class=\"text highlighted_source\">/* Uses the algorithm of S. Rabinowicz and S. Wagon, \"A Spigot Algorithm */<br/>/* for the Digits of Pi\".                                                */<br/>(subrg, fofl, size):<br/>Pi_Spigot: procedure options (main);                 /* 21 January 2012. */<br/>   declare (n, len) fixed binary;<br/>\u00a0<br/>   n = 1000;<br/>   len = 10*n / 3;<br/>   begin;<br/>      declare ( i, j, k, q, nines, predigit ) fixed binary;<br/>      declare x fixed binary (31);<br/>      declare a(len) fixed binary (31);<br/>\u00a0<br/>      a = 2; /* Start with 2s */<br/>      nines, predigit = 0; /* First predigit is a 0 */<br/>      do j = 1 to n;<br/>         q = 0;<br/>         do i = len to 1 by -1; /* Work backwards */<br/>            x = 10*a(i) + q*i;<br/>            a(i) = mod (x, (2*i-1));<br/>            q = x / (2*i-1);<br/>         end;<br/>         a(1) = mod(q, 10); q = q / 10;<br/>         if q = 9 then nines = nines + 1;<br/>         else if q = 10 then<br/>            do;<br/>               put edit(predigit+1) (f(1));<br/>               do k = 1 to nines;<br/>                  put edit ('0')(a(1)); /* zeros */<br/>               end;<br/>               predigit, nines = 0;<br/>            end;<br/>         else<br/>            do;<br/>               put edit(predigit) (f(1)); predigit = q;<br/>               do k = 1 to nines; put edit ('9')(a(1)); end;<br/>               nines = 0;<br/>            end;<br/>      end;<br/>      put edit(predigit) (f(1));<br/>   end; /* of begin block */<br/>end Pi_Spigot;</pre>"}, {"lang": "Powershell", "loc": 59, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">Function</span> Get<span class=\"sy0\">-</span>Pi <span class=\"br0\">(</span> <span class=\"re0\">$Digits</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"re0\">$Big</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>bigint<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"re0\">$ndigits</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"re0\">$Output</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/>    <span class=\"re0\">$q</span> <span class=\"sy0\">=</span> <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <span class=\"re0\">$k</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Big</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"re0\">$r</span> <span class=\"sy0\">=</span>           <span class=\"re0\">$Big</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"re0\">$l</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span>      <span class=\"re0\">$Big</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>    <span class=\"co1\"># Calculate first digit</span><br/>    <span class=\"re0\">$nr</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">$Big</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$q</span> <span class=\"sy0\">+</span> <span class=\"re0\">$r</span> <span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$l</span><br/>    <span class=\"re0\">$nn</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">$q</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span> <span class=\"re0\">$Big</span><span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$k</span> <span class=\"sy0\">+</span> <span class=\"re0\">$Big</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"re0\">$r</span> <span class=\"sy0\">*</span> <span class=\"re0\">$l</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span> <span class=\"re0\">$t</span> <span class=\"sy0\">*</span> <span class=\"re0\">$l</span> <span class=\"br0\">)</span><br/>    <span class=\"re0\">$q</span> <span class=\"sy0\">*=</span> <span class=\"re0\">$k</span><br/>    <span class=\"re0\">$t</span> <span class=\"sy0\">*=</span> <span class=\"re0\">$l</span><br/>    <span class=\"re0\">$l</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$Big</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <span class=\"re0\">$k</span> <span class=\"sy0\">=</span> <span class=\"re0\">$k</span> <span class=\"sy0\">+</span> <span class=\"re0\">$Big</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$nn</span><br/>    <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"re0\">$nr</span><br/>\u00a0<br/>    <span class=\"re0\">$Output</span> <span class=\"sy0\">+=</span> <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$n</span> <span class=\"sy0\">+</span> <span class=\"st0\">'.'</span><br/>    <span class=\"re0\">$ndigits</span><span class=\"sy0\">++</span><br/>\u00a0<br/>    <span class=\"re0\">$nr</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Big</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span> <span class=\"re0\">$r</span> <span class=\"sy0\">-</span> <span class=\"re0\">$n</span> <span class=\"sy0\">*</span> <span class=\"re0\">$t</span> <span class=\"br0\">)</span><br/>    <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"re0\">$Big</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"re0\">$q</span> <span class=\"sy0\">+</span> <span class=\"re0\">$r</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"re0\">$t</span> <span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span><br/>    <span class=\"re0\">$q</span> <span class=\"sy0\">*=</span> <span class=\"re0\">$Big</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><br/>    <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"re0\">$nr</span><br/>\u00a0<br/>    <span class=\"kw3\">While</span> <span class=\"br0\">(</span> <span class=\"re0\">$ndigits</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$Digits</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>        <span class=\"kw3\">While</span> <span class=\"br0\">(</span> <span class=\"re0\">$ndigits</span> <span class=\"sy0\">%</span> <span class=\"nu0\">100</span> <span class=\"kw4\">-ne</span> <span class=\"nu0\">0</span> <span class=\"kw4\">-or</span> <span class=\"kw4\">-not</span> <span class=\"re0\">$Output</span> <span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>            <span class=\"kw3\">If</span> <span class=\"br0\">(</span> <span class=\"re0\">$Big</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$q</span> <span class=\"sy0\">+</span> <span class=\"re0\">$r</span> <span class=\"sy0\">-</span> <span class=\"re0\">$t</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$n</span> <span class=\"sy0\">*</span> <span class=\"re0\">$t</span> <span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                <span class=\"re0\">$Output</span> <span class=\"sy0\">+=</span> <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$n</span><br/>                <span class=\"re0\">$ndigits</span><span class=\"sy0\">++</span><br/>                <span class=\"re0\">$nr</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Big</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span> <span class=\"re0\">$r</span> <span class=\"sy0\">-</span> <span class=\"re0\">$n</span> <span class=\"sy0\">*</span> <span class=\"re0\">$t</span> <span class=\"br0\">)</span><br/>                <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"re0\">$Big</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span> <span class=\"nu0\">3</span> <span class=\"sy0\">*</span> <span class=\"re0\">$q</span> <span class=\"sy0\">+</span> <span class=\"re0\">$r</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"re0\">$t</span> <span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span><br/>                <span class=\"re0\">$q</span> <span class=\"sy0\">*=</span> <span class=\"re0\">$Big</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span><br/>                <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"re0\">$nr</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"kw3\">Else</span><br/>                <span class=\"br0\">{</span><br/>                <span class=\"re0\">$nr</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">$Big</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$q</span> <span class=\"sy0\">+</span> <span class=\"re0\">$r</span> <span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$l</span><br/>                <span class=\"re0\">$nn</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">$q</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span> <span class=\"re0\">$Big</span><span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$k</span> <span class=\"sy0\">+</span> <span class=\"re0\">$Big</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"re0\">$r</span> <span class=\"sy0\">*</span> <span class=\"re0\">$l</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span> <span class=\"re0\">$t</span> <span class=\"sy0\">*</span> <span class=\"re0\">$l</span> <span class=\"br0\">)</span><br/>                <span class=\"re0\">$q</span> <span class=\"sy0\">*=</span> <span class=\"re0\">$k</span><br/>                <span class=\"re0\">$t</span> <span class=\"sy0\">*=</span> <span class=\"re0\">$l</span><br/>                <span class=\"re0\">$l</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$Big</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>                <span class=\"re0\">$k</span> <span class=\"sy0\">=</span> <span class=\"re0\">$k</span> <span class=\"sy0\">+</span> <span class=\"re0\">$Big</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>                <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$nn</span><br/>                <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"re0\">$nr</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"re0\">$Output</span><br/>        <span class=\"re0\">$Output</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 40, "block": "<pre class=\"purebasic highlighted_source\">#SCALE <span class=\"sy0\">=</span> <span class=\"nu0\">10000</span><br/>#ARRINT<span class=\"sy0\">=</span>  <span class=\"nu0\">2000</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> Pi<span class=\"br0\">(</span>Digits<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> First<span class=\"sy0\">=</span>#True, Text$<br/>  <span class=\"kw1\">Protected</span> Carry, i, j, sum<br/>  <span class=\"kw1\">Dim</span> Arr<span class=\"br0\">(</span>Digits<span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> Digits<br/>    Arr<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>#ARRINT<br/>  <span class=\"kw1\">Next</span><br/>  i<span class=\"sy0\">=</span>Digits<br/>  <span class=\"kw1\">While</span> i<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><br/>    sum<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    j<span class=\"sy0\">=</span>i<br/>    <span class=\"kw1\">While</span> j<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><br/>      sum<span class=\"sy0\">*</span>j<span class=\"sy0\">+</span>#SCALE<span class=\"sy0\">*</span>arr<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>      Arr<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">=</span>sum<span class=\"sy0\">%</span><span class=\"br0\">(</span>j<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      sum<span class=\"sy0\">/</span><span class=\"br0\">(</span>j<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">Wend</span><br/>    Text$ <span class=\"sy0\">=</span> <span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>Carry<span class=\"sy0\">+</span>sum<span class=\"sy0\">/</span>#SCALE<span class=\"br0\">)</span>,<span class=\"nu0\">4</span>,<span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> First<br/>      Text$ <span class=\"sy0\">=</span> <span class=\"kw2\">ReplaceString</span><span class=\"br0\">(</span>Text$,<span class=\"st0\">\"3\"</span>,<span class=\"st0\">\"3.\"</span><span class=\"br0\">)</span><br/>      First <span class=\"sy0\">=</span> #False<br/>    <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span>Text$<span class=\"br0\">)</span><br/>    Carry<span class=\"sy0\">=</span>sum<span class=\"sy0\">%</span>#SCALE<br/>    i<span class=\"sy0\">-</span><span class=\"nu0\">14</span><br/>  <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  SetConsoleCtrlHandler_<span class=\"br0\">(</span>?Ctrl,#True<span class=\"br0\">)</span> <br/>  Pi<span class=\"br0\">(</span><span class=\"nu0\">24</span><span class=\"sy0\">*</span><span class=\"nu0\">1024</span><span class=\"sy0\">*</span><span class=\"nu0\">1024</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">End</span><br/>\u00a0<br/>Ctrl:<br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#CRLF$<span class=\"sy0\">+</span><span class=\"st0\">\"Ctrl-C was pressed\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Python", "loc": 26, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> calcPi<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    q<span class=\"sy0\">,</span> r<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> k<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> l <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        <span class=\"kw1\">if</span> <span class=\"nu0\">4</span>*q+r-t <span class=\"sy0\">&lt;</span> n*t:<br/>            <span class=\"kw1\">yield</span> n<br/>            nr <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>*<span class=\"br0\">(</span>r-n*t<span class=\"br0\">)</span><br/>            n  <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>*<span class=\"br0\">(</span><span class=\"nu0\">3</span>*q+r<span class=\"br0\">)</span><span class=\"br0\">)</span>//t<span class=\"br0\">)</span>-<span class=\"nu0\">10</span>*n<br/>            q  *<span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>            r  <span class=\"sy0\">=</span> nr<br/>        <span class=\"kw1\">else</span>:<br/>            nr <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span>*q+r<span class=\"br0\">)</span>*l<br/>            nn <span class=\"sy0\">=</span> <span class=\"br0\">(</span>q*<span class=\"br0\">(</span><span class=\"nu0\">7</span>*k<span class=\"br0\">)</span>+<span class=\"nu0\">2</span>+<span class=\"br0\">(</span>r*l<span class=\"br0\">)</span><span class=\"br0\">)</span>//<span class=\"br0\">(</span>t*l<span class=\"br0\">)</span><br/>            q  *<span class=\"sy0\">=</span> k<br/>            t  *<span class=\"sy0\">=</span> l<br/>            l  +<span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>            k +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            n  <span class=\"sy0\">=</span> nn<br/>            r  <span class=\"sy0\">=</span> nr<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw3\">sys</span><br/>pi_digits <span class=\"sy0\">=</span> calcPi<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">for</span> d <span class=\"kw1\">in</span> pi_digits:<br/>    <span class=\"kw3\">sys</span>.<span class=\"me1\">stdout</span>.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    i +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">40</span>: <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span></pre>"}, {"lang": "Racket", "loc": 21, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require racket/generator)<br/>\u00a0<br/>(define pidig<br/>  (generator ()<br/>    (let loop ([q 1] [r 0] [t 1] [k 1] [n 3] [l 3])<br/>      (if (&lt; (- (+ r (* 4 q)) t) (* n t))<br/>        (begin (yield n)<br/>               (loop (* q 10) (* 10 (- r (* n t))) t k<br/>                     (- (quotient (* 10 (+ (* 3 q) r)) t) (* 10 n))<br/>                     l))<br/>        (loop (* q k) (* (+ (* 2 q) r) l) (* t l) (+ 1 k)<br/>              (quotient (+ (* (+ 2 (* 7 k)) q) (* r l)) (* t l))<br/>              (+ l 2))))))<br/>\u00a0<br/>(for ([i (in-naturals)])<br/>  (display (pidig))<br/>  (when (zero? i) (display \".\" ))<br/>  (when (zero? (modulo i 80)) (newline)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 1, "block": "<pre>                    \u250c\u2500   \u2500\u2510                \u250c\u2500     \u2500\u2510\n  \u03c0                 \u2502  1  \u2502                \u2502   1   \u2502           John\n \u2500\u2500\u2500  =   4 \u2219 arctan\u2502 \u2500\u2500\u2500 \u2502     -    arctan\u2502 \u2500\u2500\u2500\u2500\u2500 \u2502             Machin's\n  4                 \u2502  5  \u2502                \u2502  239  \u2502               formula\n                    \u2514\u2500   \u2500\u2518                \u2514\u2500     \u2500\u2518\n\n which expands into:\n\n     \u250c\u2500                                                                      \u2500\u2510\n     \u2502    1         1          1          1          1           1            \u2502\n4 \u2219  \u2502   \u2500\u2500\u2500  -  \u2500\u2500\u2500\u2500\u2500\u2500  +  \u2500\u2500\u2500\u2500\u2500\u2500  -  \u2500\u2500\u2500\u2500\u2500\u2500  +  \u2500\u2500\u2500\u2500\u2500\u2500  -  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  +  ... \u2502\n     \u2502     1         3          5          7          9           11          \u2502\n     \u2502  1\u22195       3\u22195        5\u22195        7\u22195        9\u22195        11\u22195            \u2502\n     \u2514\u2500                                                                      \u2500\u2518\n\n\n     \u250c\u2500                                                                      \u2500\u2510\n     \u2502    1         1          1          1          1           1            \u2502\n -   \u2502   \u2500\u2500\u2500  -  \u2500\u2500\u2500\u2500\u2500\u2500  +  \u2500\u2500\u2500\u2500\u2500\u2500  -  \u2500\u2500\u2500\u2500\u2500\u2500  +  \u2500\u2500\u2500\u2500\u2500\u2500  -  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  +  ... \u2502\n     \u2502      1         3          5          7          9           11         \u2502\n     \u2502 1\u2219239     3\u2219239      5\u2219239      7\u2219239      9\u2219239      11\u2219239           \u2502\n     \u2514\u2500                                                                      \u2500\u2518\n</pre>"}, {"lang": "Ruby", "loc": 24, "block": "<pre class=\"ruby highlighted_source\">pi_digits = Enumerator.<span class=\"me1\">new</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>y<span class=\"sy0\">|</span><br/>  q, r, t, k, n, l = <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">3</span><br/>  <span class=\"kw3\">loop</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> <span class=\"nu0\">4</span><span class=\"sy0\">*</span>q<span class=\"sy0\">+</span>r<span class=\"sy0\">-</span>t <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">*</span>t<br/>      y <span class=\"sy0\">&lt;&lt;</span> n <br/>      nr = <span class=\"nu0\">10</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>r<span class=\"sy0\">-</span>n<span class=\"sy0\">*</span>t<span class=\"br0\">)</span><br/>      n = <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span>q<span class=\"sy0\">+</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> t<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">10</span><span class=\"sy0\">*</span>n<br/>      q <span class=\"sy0\">*</span>= <span class=\"nu0\">10</span><br/>      r = nr<br/>    <span class=\"kw1\">else</span><br/>      nr = <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>q<span class=\"sy0\">+</span>r<span class=\"br0\">)</span> <span class=\"sy0\">*</span> l<br/>      nn = <span class=\"br0\">(</span>q<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">*</span>k<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>r<span class=\"sy0\">*</span>l<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>t<span class=\"sy0\">*</span>l<span class=\"br0\">)</span><br/>      q <span class=\"sy0\">*</span>= k<br/>      t <span class=\"sy0\">*</span>= l<br/>      l <span class=\"sy0\">+</span>= <span class=\"nu0\">2</span><br/>      k <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>      n = nn<br/>      r = nr<br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span> pi_digits.<span class=\"kw1\">next</span>, <span class=\"st0\">\".\"</span><br/><span class=\"kw3\">loop</span> <span class=\"br0\">{</span> <span class=\"kw3\">print</span> pi_digits.<span class=\"kw1\">next</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Scala", "loc": 35, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Pi <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> PiIterator <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Iterable<span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span><span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> r<span class=\"sy0\">:</span>BigInt<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> q, t, k<span class=\"sy0\">:</span>BigInt<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n, l<span class=\"sy0\">:</span>BigInt<span class=\"sy0\">=</span><span class=\"nu0\">3</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nr, nn<span class=\"sy0\">:</span>BigInt<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> iterator<span class=\"sy0\">:</span> Iterator<span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span><span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Iterator<span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span><span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> hasNext<span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> next<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>BigInt<span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">*</span>q+r-t<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">*</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          nr <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>q+r<span class=\"br0\">)</span><span class=\"sy0\">*</span>l<br/>          nn <span class=\"sy0\">=</span> <span class=\"br0\">(</span>q<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">*</span>k<span class=\"br0\">)</span>+<span class=\"nu0\">2</span>+<span class=\"br0\">(</span>r<span class=\"sy0\">*</span>l<span class=\"br0\">)</span><span class=\"br0\">)</span>/<span class=\"br0\">(</span>t<span class=\"sy0\">*</span>l<span class=\"br0\">)</span><br/>          q <span class=\"sy0\">=</span> q <span class=\"sy0\">*</span> k<br/>          t <span class=\"sy0\">=</span> t <span class=\"sy0\">*</span> l<br/>          l <span class=\"sy0\">=</span> l + <span class=\"nu0\">2</span><br/>          k <span class=\"sy0\">=</span> k + <span class=\"nu0\">1</span><br/>          n  <span class=\"sy0\">=</span> nn<br/>          r  <span class=\"sy0\">=</span> nr\t\t\t<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ret<span class=\"sy0\">=</span>n<br/>        nr <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>r-n<span class=\"sy0\">*</span>t<span class=\"br0\">)</span><br/>        n  <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span>q+r<span class=\"br0\">)</span><span class=\"br0\">)</span>/t<span class=\"br0\">)</span>-<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">*</span>n<span class=\"br0\">)</span><br/>        q  <span class=\"sy0\">=</span> q <span class=\"sy0\">*</span> <span class=\"nu0\">10</span><br/>        r  <span class=\"sy0\">=</span> nr<br/>        ret<br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> it<span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> PiIterator<br/>    println<span class=\"br0\">(</span><span class=\"br0\">(</span>it head<span class=\"br0\">)</span> + <span class=\"st0\">\".\"</span> + <span class=\"br0\">(</span>it take <span class=\"nu0\">300</span> mkString<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 32, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> <span class=\"br0\">(</span>rnrs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>calc-pi <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>let loop <span class=\"br0\">(</span><span class=\"br0\">(</span>q <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>r <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>t <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>k <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>n <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>l <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>- <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">4</span> q<span class=\"br0\">)</span> r<span class=\"br0\">)</span> t<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> n t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>begin<br/>          <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> n<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"sy0\">*</span> q  <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">10</span> <span class=\"br0\">(</span>- r <span class=\"br0\">(</span><span class=\"sy0\">*</span> n t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                t<br/>                k<br/>                <span class=\"br0\">(</span>- <span class=\"br0\">(</span>div <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">10</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">3</span> q<span class=\"br0\">)</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span> t<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">10</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                l<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>begin<br/>          <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"sy0\">*</span> q k<span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> q<span class=\"br0\">)</span> r<span class=\"br0\">)</span> l<span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"sy0\">*</span> t l<span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>+ k <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>div <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"sy0\">*</span> q <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">7</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> r l<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> t l<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>+ l <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>let <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>calc-pi<br/>    <span class=\"br0\">(</span>lambda <span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>display d<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>set<span class=\"sy0\">!</span> i <span class=\"br0\">(</span>+ i <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">40</span> i<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>begin<br/>            <span class=\"br0\">(</span>newline<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>set<span class=\"sy0\">!</span> i <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 39, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"bigint.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var bigInteger: q is 1_;<br/>    var bigInteger: r is 0_;<br/>    var bigInteger: t is 1_;<br/>    var bigInteger: k is 1_;<br/>    var bigInteger: n is 3_;<br/>    var bigInteger: l is 3_;<br/>    var bigInteger: nn is 0_;<br/>    var bigInteger: nr is 0_;<br/>    var boolean: first is TRUE;<br/>  begin<br/>    while TRUE do<br/>      if 4_ * q + r - t &lt; n * t then<br/>        write(n);<br/>        if first then<br/>          write(\".\");<br/>          first\u00a0:= FALSE;<br/>        end if;<br/>        nr\u00a0:= 10_ * (r - n * t);<br/>        n\u00a0:= 10_ * (3_ * q + r) div t - 10_ * n;<br/>        q *:= 10_;<br/>        r\u00a0:= nr;<br/>        flush(OUT);<br/>      else<br/>        nr\u00a0:= (2_ * q + r) * l;<br/>        nn\u00a0:= (q * (7_ * k + 2_) + r * l) div (t * l);<br/>        q *:= k;<br/>        t *:= l;<br/>        l +:= 2_;<br/>        incr(k);<br/>        n\u00a0:= nn;<br/>        r\u00a0:= nr;<br/>      end if;<br/>    end while;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 26, "block": "<pre class=\"ruby highlighted_source\">func pi<span class=\"br0\">(</span>callback<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var <span class=\"br0\">(</span>q, r, t, k, n, l<span class=\"br0\">)</span> = <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">loop</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">*</span>q <span class=\"sy0\">+</span> r <span class=\"sy0\">-</span> t<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">*</span>t<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            callback<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>            static _dot = callback<span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span><br/>            var nr = <span class=\"nu0\">10</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>r <span class=\"sy0\">-</span> n<span class=\"sy0\">*</span>t<span class=\"br0\">)</span><br/>            n = <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span>q <span class=\"sy0\">+</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">//</span> t <span class=\"sy0\">-</span> <span class=\"nu0\">10</span><span class=\"sy0\">*</span>n<span class=\"br0\">)</span><br/>            q <span class=\"sy0\">*</span>= <span class=\"nu0\">10</span><br/>            r = nr<br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            var nr = <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>q <span class=\"sy0\">+</span> r<span class=\"br0\">)</span> <span class=\"sy0\">*</span> l<span class=\"br0\">)</span><br/>            var nn = <span class=\"br0\">(</span><span class=\"br0\">(</span>q<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">*</span>k <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> r<span class=\"sy0\">*</span>l<span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"br0\">(</span>t<span class=\"sy0\">*</span>l<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            q <span class=\"sy0\">*</span>= k<br/>            t <span class=\"sy0\">*</span>= l<br/>            l <span class=\"sy0\">+</span>= <span class=\"nu0\">2</span><br/>            k <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>            n = nn<br/>            r = nr<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>STDOUT.<span class=\"me1\">autoflush</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><br/>pi<span class=\"br0\">(</span>func<span class=\"br0\">(</span>digit<span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"kw3\">print</span> digit <span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "Simula", "loc": 309, "block": "<pre class=\"text highlighted_source\">CLASS BIGNUM;<br/>BEGIN<br/>\u00a0<br/>    BOOLEAN PROCEDURE TISZERO(T); TEXT T;<br/>        TISZERO\u00a0:= T = \"0\";<br/>\u00a0<br/>    TEXT PROCEDURE TSHL(T); TEXT T;<br/>        TSHL\u00a0:- IF TISZERO(T) THEN T ELSE T &amp; \"0\";<br/>\u00a0<br/>    TEXT PROCEDURE TSHR(T); TEXT T;<br/>        TSHR\u00a0:- IF T.LENGTH = 1 THEN \"0\" ELSE T.SUB(1, T.LENGTH - 1);<br/>\u00a0<br/>    INTEGER PROCEDURE TSIGN(T); TEXT T;<br/>        TSIGN\u00a0:= IF TISZERO(T) THEN 0<br/>            ELSE IF T.SUB(1, 1) = \"-\" THEN -1<br/>            ELSE 1;<br/>\u00a0<br/>    TEXT PROCEDURE TABS(T); TEXT T;<br/>        TABS\u00a0:- IF TSIGN(T) &lt; 0 THEN T.SUB(2, T.LENGTH - 1) ELSE T;<br/>\u00a0<br/>    TEXT PROCEDURE TNEGATE(T); TEXT T;<br/>        TNEGATE\u00a0:- IF TSIGN(T) &lt;= 0 THEN TABS(T) ELSE (\"-\" &amp; T);<br/>\u00a0<br/>    TEXT PROCEDURE TREVERSE(T); TEXT T;<br/>    BEGIN<br/>        INTEGER I, J;<br/>        I\u00a0:= 1; J\u00a0:= T.LENGTH;<br/>        WHILE I &lt; J DO<br/>        BEGIN CHARACTER C1, C2;<br/>            T.SETPOS(I); C1\u00a0:= T.GETCHAR;<br/>            T.SETPOS(J); C2\u00a0:= T.GETCHAR;<br/>            T.SETPOS(I); T.PUTCHAR(C2);<br/>            T.SETPOS(J); T.PUTCHAR(C1);<br/>            I\u00a0:= I + 1;<br/>            J\u00a0:= J - 1;<br/>        END;<br/>        TREVERSE\u00a0:- T;<br/>    END TREVERSE;<br/>\u00a0<br/>    INTEGER PROCEDURE TCMPUNSIGNED(A, B); TEXT A, B;<br/>    BEGIN<br/>        INTEGER ALEN, BLEN, RESULT;<br/>        ALEN\u00a0:= A.LENGTH; BLEN\u00a0:= B.LENGTH;<br/>        IF ALEN &lt; BLEN THEN<br/>            RESULT\u00a0:= -1<br/>        ELSE IF ALEN &gt; BLEN THEN<br/>            RESULT\u00a0:= 1<br/>        ELSE BEGIN<br/>            INTEGER CMP, I; BOOLEAN DONE;<br/>            A.SETPOS(1);<br/>            B.SETPOS(1);<br/>            I\u00a0:= 1;<br/>            WHILE I &lt;= ALEN AND NOT DONE DO<br/>            BEGIN<br/>                I\u00a0:= I + 1;<br/>                CMP\u00a0:= RANK(A.GETCHAR) - RANK(B.GETCHAR);<br/>                IF NOT (CMP = 0) THEN<br/>                    DONE\u00a0:= TRUE;<br/>            END;<br/>            RESULT\u00a0:= CMP;<br/>        END;<br/>        TCMPUNSIGNED\u00a0:= RESULT;<br/>    END TCMPUNSIGNED;<br/>\u00a0<br/>    INTEGER PROCEDURE TCMP(A, B); TEXT A, B;<br/>    BEGIN<br/>        BOOLEAN ANEG, BNEG;<br/>        ANEG\u00a0:= TSIGN(A) &lt; 0; BNEG\u00a0:= TSIGN(B) &lt; 0;<br/>        IF ANEG AND BNEG THEN<br/>           TCMP\u00a0:= -TCMPUNSIGNED(TABS(A), TABS(B))<br/>        ELSE IF NOT ANEG AND BNEG THEN<br/>           TCMP\u00a0:= 1<br/>        ELSE IF ANEG AND NOT BNEG THEN<br/>           TCMP\u00a0:= -1<br/>        ELSE<br/>           TCMP\u00a0:= TCMPUNSIGNED(A, B);<br/>    END TCMP;<br/>\u00a0<br/>    TEXT PROCEDURE TADDUNSIGNED(A, B); TEXT A, B;<br/>    BEGIN<br/>        INTEGER CARRY, I, J;<br/>        TEXT BF;<br/>        I\u00a0:= A.LENGTH;<br/>        J\u00a0:= B.LENGTH;<br/>        BF\u00a0:- BLANKS(MAX(I, J) + 1);<br/>        WHILE I &gt;= 1 OR J &gt;= 1 DO BEGIN<br/>            INTEGER X, Y, Z;<br/>            IF I &gt;= 1 THEN BEGIN<br/>                A.SETPOS(I); I\u00a0:= I - 1; X\u00a0:= RANK(A.GETCHAR) - RANK('0');<br/>            END;<br/>            IF J &gt;= 1 THEN BEGIN<br/>                B.SETPOS(J); J\u00a0:= J - 1; Y\u00a0:= RANK(B.GETCHAR) - RANK('0');<br/>            END;<br/>            Z\u00a0:= X + Y + CARRY;<br/>            IF Z &lt; 10 THEN<br/>            BEGIN BF.PUTCHAR(CHAR(Z + RANK('0'))); CARRY\u00a0:= 0;<br/>            END ELSE<br/>            BEGIN BF.PUTCHAR(CHAR(MOD(Z, 10) + RANK('0'))); CARRY\u00a0:= 1;<br/>            END;<br/>        END;<br/>        IF CARRY &gt; 0 THEN<br/>            BF.PUTCHAR(CHAR(CARRY + RANK('0')));<br/>        BF\u00a0:- TREVERSE(BF.STRIP);<br/>        TADDUNSIGNED\u00a0:- BF;<br/>    END TADDUNSIGNED;<br/>\u00a0<br/>    TEXT PROCEDURE TADD(A, B); TEXT A, B;<br/>    BEGIN<br/>        BOOLEAN ANEG, BNEG;<br/>        ANEG\u00a0:= TSIGN(A) &lt; 0; BNEG\u00a0:= TSIGN(B) &lt; 0;<br/>        IF NOT ANEG AND BNEG THEN         \u00a0! (+7)+(-5) =  (7-5) =   2\u00a0;<br/>            TADD\u00a0:- TSUBUNSIGNED(A, TABS(B))<br/>        ELSE IF ANEG AND NOT BNEG THEN    \u00a0! (-7)+(+5) =  (5-7) =  -2\u00a0;<br/>            TADD\u00a0:- TSUBUNSIGNED(B, TABS(A))<br/>        ELSE IF ANEG AND BNEG THEN        \u00a0! (-7)+(-5) = -(7+5) = -12\u00a0;<br/>            TADD\u00a0:- TNEGATE(TADDUNSIGNED(TABS(A), TABS(B)))<br/>        ELSE                              \u00a0! (+7)+(+5) =  (7+5) =  12\u00a0;<br/>            TADD\u00a0:- TADDUNSIGNED(A, B);<br/>    END TADD;<br/>\u00a0<br/>    TEXT PROCEDURE TSUBUNSIGNED(A, B); TEXT A, B;<br/>    BEGIN<br/>        INTEGER I, J, CARRY;<br/>        I\u00a0:= A.LENGTH; J\u00a0:= B.LENGTH;<br/>        IF I &lt; J OR I = J AND A &lt; B THEN<br/>            TSUBUNSIGNED\u00a0:- TNEGATE(TSUBUNSIGNED(B, A)) ELSE<br/>        BEGIN<br/>            TEXT BF;<br/>            BF\u00a0:- BLANKS(MAX(I, J) + 1);<br/>            WHILE I &gt;= 1 OR J &gt;= 1 DO<br/>            BEGIN<br/>                INTEGER X, Y, Z;<br/>                IF I &gt;= 1 THEN<br/>                BEGIN A.SETPOS(I); I\u00a0:= I - 1;<br/>                    X\u00a0:= RANK(A.GETCHAR) - RANK('0');<br/>                END;<br/>                IF J &gt;= 1 THEN<br/>                BEGIN B.SETPOS(J); J\u00a0:= J - 1;<br/>                    Y\u00a0:= RANK(B.GETCHAR) - RANK('0');<br/>                END;<br/>                Z\u00a0:= X - Y - CARRY;<br/>                IF Z &gt;= 0 THEN<br/>                BEGIN<br/>                    BF.PUTCHAR(CHAR(RANK('0') + Z));<br/>                    CARRY\u00a0:= 0;<br/>                END ELSE<br/>                BEGIN<br/>                    BF.PUTCHAR(CHAR(RANK('0') + MOD(10 + Z, 10)));<br/>                    CARRY\u00a0:= 1;\u00a0! (Z / 10);<br/>                END;<br/>            END;<br/>            BF\u00a0:- BF.STRIP;<br/>            BF\u00a0:- TREVERSE(BF);<br/>            BF.SETPOS(1);<br/>            WHILE BF.LENGTH &gt; 1 AND THEN BF.GETCHAR = '0' DO<br/>            BEGIN<br/>                BF\u00a0:- BF.SUB(2, BF.LENGTH - 1);<br/>                BF.SETPOS(1);<br/>            END;<br/>            TSUBUNSIGNED\u00a0:- BF;<br/>        END;<br/>    END TSUBUNSIGNED;<br/>\u00a0<br/>    TEXT PROCEDURE TSUB(A, B); TEXT A, B;<br/>    BEGIN<br/>        BOOLEAN ANEG, BNEG;<br/>        ANEG\u00a0:= TSIGN(A) &lt; 0; BNEG\u00a0:= TSIGN(B) &lt; 0;<br/>        IF ANEG AND BNEG THEN             \u00a0! (-7)-(-5) = -(7-5) =  -2\u00a0;<br/>            TSUB\u00a0:- TNEGATE(TSUBUNSIGNED(TABS(A), TABS(B)))<br/>        ELSE IF NOT ANEG AND BNEG THEN    \u00a0! (+7)-(-5) =  (7+5) =  12\u00a0;<br/>            TSUB\u00a0:- TADDUNSIGNED(A, TABS(B))<br/>        ELSE IF ANEG AND NOT BNEG THEN    \u00a0! (-7)-(+5) = -(7+5) = -12\u00a0;<br/>            TSUB\u00a0:- TNEGATE(TADDUNSIGNED(TABS(A), B))<br/>        ELSE                              \u00a0! (+7)-(+5) =  (7-5) =   2\u00a0;<br/>            TSUB\u00a0:- TSUBUNSIGNED(A, B);<br/>    END TSUB;<br/>\u00a0<br/>    TEXT PROCEDURE TMULUNSIGNED(A, B); TEXT A, B;<br/>    BEGIN<br/>        INTEGER ALEN, BLEN;<br/>        ALEN\u00a0:= A.LENGTH; BLEN\u00a0:= B.LENGTH;<br/>        IF ALEN &lt; BLEN THEN<br/>            TMULUNSIGNED\u00a0:- TMULUNSIGNED(B, A)<br/>        ELSE BEGIN<br/>            TEXT PRODUCT; INTEGER J;<br/>            PRODUCT\u00a0:- \"0\";<br/>            FOR J\u00a0:= 1 STEP 1 UNTIL BLEN DO BEGIN<br/>                TEXT PART; INTEGER I, Y, CARRY;<br/>                B.SETPOS(J); Y\u00a0:= RANK(B.GETCHAR) - RANK('0');<br/>                PART\u00a0:- BLANKS(ALEN + BLEN + 1); PART.SETPOS(1);<br/>                FOR I\u00a0:= ALEN STEP -1 UNTIL 1 DO BEGIN<br/>                    INTEGER X, Z;<br/>                    A.SETPOS(I); X\u00a0:= RANK(A.GETCHAR) - RANK('0');<br/>                    Z\u00a0:= X * Y + CARRY;<br/>                    IF Z &lt; 10 THEN BEGIN<br/>                        PART.PUTCHAR(CHAR(RANK('0') + Z));<br/>                        CARRY\u00a0:= 0;<br/>                    END ELSE BEGIN<br/>                        PART.PUTCHAR(CHAR(RANK('0') + MOD(Z, 10)));<br/>                        CARRY\u00a0:= Z // 10;<br/>                    END;<br/>                END;<br/>                IF CARRY &gt; 0 THEN<br/>                    PART.PUTCHAR(CHAR(RANK('0') + CARRY));<br/>                PART\u00a0:- PART.SUB(1, PART.POS - 1);<br/>                PART\u00a0:- TREVERSE(PART);<br/>                PART.SETPOS(1);<br/>                WHILE PART.LENGTH &gt; 1 AND THEN PART.GETCHAR = '0' DO<br/>                BEGIN<br/>                    PART\u00a0:- PART.SUB(2, PART.LENGTH - 1);<br/>                    PART.SETPOS(1);<br/>                END;<br/>                PRODUCT\u00a0:- TADDUNSIGNED(TSHL(PRODUCT), PART);<br/>            END;<br/>            TMULUNSIGNED\u00a0:- PRODUCT;<br/>        END;<br/>    END TMULUNSIGNED;<br/>\u00a0<br/>    TEXT PROCEDURE TMUL(A, B); TEXT A, B;<br/>    BEGIN<br/>        BOOLEAN ANEG, BNEG;<br/>        ANEG\u00a0:= TSIGN(A) &lt; 0; BNEG\u00a0:= TSIGN(B) &lt; 0;<br/>        IF ANEG AND BNEG THEN             \u00a0! (-7)*(-5) =  (7*5) =&gt;  35\u00a0;<br/>           TMUL\u00a0:- TMULUNSIGNED(TABS(A), TABS(B))<br/>        ELSE IF NOT ANEG AND BNEG THEN    \u00a0! (+7)*(-5) = -(7*5) =&gt; -35\u00a0;<br/>           TMUL\u00a0:- TNEGATE(TMULUNSIGNED(A, TABS(B)))<br/>        ELSE IF ANEG AND NOT BNEG THEN    \u00a0! (-7)*(+5) = -(7*5) =&gt; -35\u00a0;<br/>           TMUL\u00a0:- TNEGATE(TMULUNSIGNED(TABS(A), B))<br/>        ELSE                              \u00a0! (+7)*(+5) =  (7*5) =&gt;  35\u00a0;<br/>           TMUL\u00a0:- TMULUNSIGNED(A, B);<br/>    END TMUL;<br/>\u00a0<br/>    CLASS DIVMOD(DIV,MOD); TEXT DIV,MOD;;<br/>\u00a0<br/>    REF(DIVMOD) PROCEDURE TDIVMODUNSIGNED(A, B); TEXT A, B;<br/>    BEGIN<br/>        INTEGER CC;<br/>        REF(DIVMOD) RESULT;<br/>        IF TISZERO(B) THEN<br/>            ERROR(\"DIVISION BY ZERO\");<br/>        CC\u00a0:= TCMPUNSIGNED(A, B);<br/>        IF CC &lt; 0 THEN<br/>            RESULT\u00a0:- NEW DIVMOD(\"0\", A)<br/>        ELSE IF CC = 0 THEN<br/>            RESULT\u00a0:- NEW DIVMOD(\"1\", \"0\")<br/>        ELSE BEGIN<br/>            INTEGER ALEN, BLEN, AIDX;<br/>            TEXT Q, R;<br/>            ALEN\u00a0:= A.LENGTH; BLEN\u00a0:= B.LENGTH;<br/>            Q\u00a0:- BLANKS(ALEN); Q.SETPOS(1);<br/>            R\u00a0:- BLANKS(ALEN); R.SETPOS(1);<br/>            R\u00a0:= A.SUB(1, BLEN - 1); R.SETPOS(BLEN);<br/>            FOR AIDX\u00a0:= BLEN STEP 1 UNTIL ALEN DO<br/>            BEGIN<br/>                INTEGER COUNT; BOOLEAN DONE;<br/>                IF TISZERO(R.STRIP) THEN<br/>                    R.SETPOS(1);<br/>                A.SETPOS(AIDX); R.PUTCHAR(A.GETCHAR);<br/>                WHILE NOT DONE DO<br/>                BEGIN<br/>                    TEXT DIFF;<br/>                    DIFF\u00a0:- TSUBUNSIGNED(R.STRIP, B);<br/>                    IF TSIGN(DIFF) &lt; 0 THEN<br/>                        DONE\u00a0:= TRUE<br/>                    ELSE BEGIN<br/>                        R\u00a0:= DIFF; R.SETPOS(DIFF.LENGTH + 1);<br/>                        COUNT\u00a0:= COUNT + 1;<br/>                    END;<br/>                END;<br/>                IF (NOT (COUNT = 0)) OR (NOT (Q.POS = 1)) THEN<br/>                    Q.PUTCHAR(CHAR(COUNT + RANK('0')));<br/>            END;<br/>            RESULT\u00a0:- NEW DIVMOD(Q.STRIP, R.STRIP);<br/>        END;<br/>        TDIVMODUNSIGNED\u00a0:- RESULT;<br/>    END TDIVMODUNSIGNED;<br/>\u00a0<br/>    REF(DIVMOD) PROCEDURE TDIVMOD(A, B); TEXT A, B;<br/>    BEGIN<br/>        BOOLEAN ANEG, BNEG; REF(DIVMOD) RESULT;<br/>        ANEG\u00a0:= TSIGN(A) &lt; 0; BNEG\u00a0:= TSIGN(B) &lt; 0;<br/>        IF ANEG AND BNEG THEN<br/>            BEGIN<br/>                RESULT\u00a0:- TDIVMOD(TABS(A), TABS(B));<br/>                RESULT.MOD\u00a0:- TNEGATE(RESULT.MOD);<br/>            END<br/>        ELSE IF NOT ANEG AND BNEG THEN<br/>            BEGIN<br/>                RESULT\u00a0:- TDIVMOD(A, TABS(B));<br/>                RESULT.DIV\u00a0:- TNEGATE(RESULT.DIV);<br/>            END<br/>        ELSE IF ANEG AND NOT BNEG THEN<br/>            BEGIN<br/>                RESULT\u00a0:- TDIVMOD(TABS(A), B);<br/>                RESULT.DIV\u00a0:- TNEGATE(RESULT.DIV);<br/>                RESULT.MOD\u00a0:- TNEGATE(RESULT.MOD);<br/>            END<br/>        ELSE<br/>            RESULT\u00a0:- TDIVMODUNSIGNED(A, B);<br/>        TDIVMOD\u00a0:- RESULT;<br/>    END TDIVMOD;<br/>\u00a0<br/>    TEXT PROCEDURE TDIV(A, B); TEXT A, B;<br/>        TDIV\u00a0:- TDIVMOD(A, B).DIV;<br/>\u00a0<br/>    TEXT PROCEDURE TMOD(A, B); TEXT A, B;<br/>        TMOD\u00a0:- TDIVMOD(A, B).MOD;<br/>\u00a0<br/>END BIGNUM;</pre>"}, {"lang": "Tcl", "loc": 31, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>\u00a0<br/><span class=\"co1\"># http://www.cut-the-knot.org/Curriculum/Algorithms/SpigotForPi.shtml</span><br/><span class=\"co1\"># http://www.mathpropress.com/stan/bibliography/spigot.pdf</span><br/><span class=\"kw1\">proc</span> piDigitsBySpigot n <span class=\"br0\">{</span><br/>    yield <span class=\"br0\">[</span><span class=\"kw2\">info</span> coroutine<span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> A <span class=\"br0\">[</span>lrepeat <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>int<span class=\"br0\">(</span>floor<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">*</span><span class=\"re0\">$n</span>/<span class=\"nu0\">3</span>.<span class=\"br0\">)</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> Alen <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$A</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> predigits <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> carry <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"re0\">$Alen</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> i -<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lset</span> A <span class=\"re0\">$i</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"br0\">[</span><span class=\"kw1\">set</span> val <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$A</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"nu0\">10</span> + <span class=\"re0\">$carry</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\t<span class=\"sy0\">%</span> <span class=\"br0\">[</span><span class=\"kw1\">set</span> modulo <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"re0\">$i</span> + <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> carry <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$val</span> / <span class=\"re0\">$modulo</span> <span class=\"sy0\">*</span> <span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">lset</span> A <span class=\"nu0\">0</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">set</span> val <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$A</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"nu0\">10</span> + <span class=\"re0\">$carry</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> predigit <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$val</span> / <span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$predigit</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">foreach</span> p <span class=\"re0\">$predigits</span> <span class=\"br0\">{</span>yield <span class=\"re0\">$p</span><span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">set</span> predigits <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$predigit</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"re0\">$predigit</span> == <span class=\"nu0\">9</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> predigits <span class=\"re0\">$predigit</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">foreach</span> p <span class=\"re0\">$predigits</span> <span class=\"br0\">{</span>yield <span class=\"br0\">[</span><span class=\"kw2\">incr</span> p<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">set</span> predigits <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Visual Basic .NET", "loc": 24, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Imports</span> System<br/><span class=\"kw1\">Imports</span> System<span class=\"sy0\">.</span><span class=\"me1\">Numerics</span><br/>\u00a0<br/><span class=\"kw1\">Public</span> <span class=\"kw1\">Module</span> Module1<br/>\t<span class=\"kw1\">Public</span> <span class=\"kw1\">Sub</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Dim</span> two, three, four, seven, ten, k, q, t, l, n, r, nn, nr <span class=\"kw1\">As</span> BigInteger,<br/>            first <span class=\"kw1\">As</span> <span class=\"kw2\">Boolean</span> <span class=\"sy0\">=</span> <span class=\"kw1\">True</span><br/>        two <span class=\"sy0\">=</span> <span class=\"kw1\">New</span> BigInteger<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0: three <span class=\"sy0\">=</span> <span class=\"kw1\">New</span> BigInteger<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>\u00a0: four <span class=\"sy0\">=</span> two <span class=\"sy0\">+</span> two<br/>        seven <span class=\"sy0\">=</span> three <span class=\"sy0\">+</span> four\u00a0: ten <span class=\"sy0\">=</span> three <span class=\"sy0\">+</span> seven\u00a0: k <span class=\"sy0\">=</span> BigInteger<span class=\"sy0\">.</span><span class=\"me1\">One</span><br/>        q <span class=\"sy0\">=</span> k\u00a0: t <span class=\"sy0\">=</span> k\u00a0: l <span class=\"sy0\">=</span> three\u00a0: n <span class=\"sy0\">=</span> three\u00a0: r <span class=\"sy0\">=</span> BigInteger<span class=\"sy0\">.</span><span class=\"me1\">Zero</span><br/>        <span class=\"kw1\">While</span> <span class=\"kw1\">True</span><br/>            <span class=\"kw1\">If</span> four <span class=\"sy0\">*</span> q <span class=\"sy0\">+</span> r <span class=\"sy0\">-</span> t <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">*</span> t <span class=\"kw1\">Then</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">If</span> first <span class=\"kw1\">Then</span> Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span>\u00a0: first <span class=\"sy0\">=</span> <span class=\"kw1\">False</span><br/>                nr <span class=\"sy0\">=</span> ten <span class=\"sy0\">*</span> <span class=\"br0\">(</span>r <span class=\"sy0\">-</span> n <span class=\"sy0\">*</span> t<span class=\"br0\">)</span>\u00a0: n <span class=\"sy0\">=</span> ten <span class=\"sy0\">*</span> <span class=\"br0\">(</span>three <span class=\"sy0\">*</span> q <span class=\"sy0\">+</span> r<span class=\"br0\">)</span> <span class=\"sy0\">/</span> t <span class=\"sy0\">-</span> ten <span class=\"sy0\">*</span> n<br/>                q <span class=\"sy0\">*=</span> ten<br/>            <span class=\"kw1\">Else</span><br/>                nr <span class=\"sy0\">=</span> <span class=\"br0\">(</span>two <span class=\"sy0\">*</span> q <span class=\"sy0\">+</span> r<span class=\"br0\">)</span> <span class=\"sy0\">*</span> l\u00a0: nn <span class=\"sy0\">=</span> <span class=\"br0\">(</span>q <span class=\"sy0\">*</span> seven <span class=\"sy0\">*</span> k <span class=\"sy0\">+</span> two <span class=\"sy0\">+</span> r <span class=\"sy0\">*</span> l<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>t <span class=\"sy0\">*</span> l<span class=\"br0\">)</span><br/>                q <span class=\"sy0\">*=</span> k\u00a0: t <span class=\"sy0\">*=</span> l\u00a0: l <span class=\"sy0\">+=</span> two\u00a0: k <span class=\"sy0\">+=</span> BigInteger<span class=\"sy0\">.</span><span class=\"me1\">One</span>\u00a0: n <span class=\"sy0\">=</span> nn<br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>            r <span class=\"sy0\">=</span> nr<br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">While</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Module</span></pre>"}, {"lang": "zkl", "loc": 24, "block": "<pre class=\"text highlighted_source\">var [const] BN=Import(\"zklBigNum\"),<br/>   one=BN(1), two=BN(2), three=BN(3), four=BN(4), seven=BN(7), ten=BN(10);<br/>\u00a0<br/>fcn calcPiDigits{<br/>   reg q=BN(1), r=BN(0), t=BN(1), k=BN(1), n=BN(3), l=BN(3);<br/>   first:=True; N:=0;<br/>   while(True){ if((N+=1)==1000){ GarbageMan.collect(); N=0; } // take a deep breath ...<br/>      if(four*q + r - t &lt; n*t){<br/>         n.print(); if(first){ print(\".\"); first=False; }<br/>\t nr:=(r - n*t).mul(ten);\t// 10 * (r - n * t);<br/>\t n=(three*q).add(r).mul(ten)\t// ((10*(3*q + r))/t) - 10*n;<br/>\t   .div(t).sub(ten*n);<br/>\t q.mul(ten);\t\t\t// q *= 10;<br/>\t r=nr;<br/>      }else{<br/>\t nr:=(two*q).add(r).mul(l);\t// (2*q + r)*l;<br/>\t nn:=(q*seven).mul(k).add(two)\t// (q*(7*k + 2) + r*l)/(t*l);<br/>\t     .add(r*l).div(t*l);<br/>\t q.mul(k);   t.mul(l);\t\t// q*=k; t*=l;<br/>\t l.add(two); k.add(one);\t// l+=2; k++;<br/>\t n=nn; r=nr;<br/>      }<br/>   }<br/>}();</pre>"}]}