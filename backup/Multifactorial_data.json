{"task": "Multifactorial", "blocks": [{"lang": "360 Assembly", "loc": 51, "block": "<pre class=\"text highlighted_source\">*        Multifactorial            09/05/2016<br/>MULFACR  CSECT<br/>         USING MULFACR,13<br/>SAVEAR   B     STM-SAVEAR(15)<br/>         DC    17F'0'<br/>STM      STM   14,12,12(13) prolog<br/>         ST    13,4(15)     \"<br/>         ST    15,8(13)     \"<br/>         LR    13,15        \" <br/>         LA    I,1          i=1<br/>LOOPI    C     I,D          do i=1 to deg<br/>         BH    ELOOPI       leave i<br/>         LA    L,W+4          <a class=\"__cf_email__\" data-cfemail=\"b9d584f9c9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>         LA    J,1            j=1<br/>LOOPJ    C     J,N            do j=1 to num<br/>         BH    ELOOPJ         leave j<br/>         LA    R,1              r=1<br/>         LCR   S,I              s=-i<br/>         LR    K,J              k=j<br/>LOOPK    C     K,=F'2'          do k=j to 2 by s<br/>         BL    ELOOPK           leave k<br/>         MR    RR,K               r=r*k<br/>         AR    K,S                k=k+s<br/>         B     LOOPK            next k<br/>ELOOPK   CVD   R,Y              pack r<br/>         MVC   X,=XL12'402020202020202020202120' ed mask<br/>         ED    X,Y+2            edit r <br/>         MVC   0(8,L),X+4       output r<br/>         LA    L,8(L)           l=l+8<br/>         LA    J,1(J)           j=j+1<br/>         B     LOOPJ          next j<br/>ELOOPJ   WTO   MF=(E,W)<br/>         LA    I,1(I)         i=i+1<br/>         B     LOOPI        next i<br/>ELOOPI   L     13,4(0,13)   epilog<br/>         LM    14,12,12(13) \"<br/>         XR    15,15        \"<br/>         BR    14           \"<br/>N        DC    F'10'        number<br/>D        DC    F'5'         degree<br/>W        DC    0F,H'84',H'0',CL80' ' length,zero,text<br/>X        DS    CL12         temp<br/>Y        DS    D            packed PL8<br/>I        EQU   6<br/>J        EQU   7<br/>K        EQU   8<br/>S        EQU   9<br/>RR       EQU   10           even reg of R for MR opcode<br/>R        EQU   11<br/>L        EQU   12<br/>         END   MULFACR</pre>"}, {"lang": "Ada", "loc": 19, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">procedure</span> Mfact <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> MultiFact <span class=\"br0\">(</span>num\u00a0: Natural; deg\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span><br/>      Result, N\u00a0: Integer\u00a0:= num;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> N = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>; <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">loop</span><br/>         N\u00a0:= N - deg; <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> N &lt;= <span class=\"nu0\">0</span>; Result\u00a0:= Result * N;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>; <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> MultiFact;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> deg <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">5</span> <span class=\"kw1\">loop</span><br/>      Put<span class=\"br0\">(</span><span class=\"st0\">\"Degree\"</span>&amp; Integer'Image<span class=\"br0\">(</span>deg<span class=\"br0\">)</span> &amp;<span class=\"st0\">\":\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">for</span> num <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">10</span> <span class=\"kw1\">loop</span> Put<span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>MultiFact<span class=\"br0\">(</span>num,deg<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      New_line;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Mfact;</pre>"}, {"lang": "Aime", "loc": 30, "block": "<pre class=\"text highlighted_source\">integer<br/>mf(integer a, integer n)<br/>{<br/>    integer o;<br/>\u00a0<br/>    o = 1;<br/>    do {<br/>        o *= a;<br/>    } while (0 &lt; (a -= n));<br/>\u00a0<br/>    return o;<br/>}<br/>\u00a0<br/>integer<br/>main(void)<br/>{<br/>    integer i, j;<br/>\u00a0<br/>    i = 0;<br/>    while ((i += 1) &lt;= 5) {<br/>        o_(\"degree \", i, \":\");<br/>        j = 0;<br/>        while ((j += 1) &lt;= 10) {<br/>            o_(\"\\t\", mf(j, i));<br/>        }<br/>        o_(\"\\n\");<br/>    }<br/>\u00a0<br/>    return 0;<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 25, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw2\">BEGIN</span><br/>   <span class=\"kw3\">INT</span> highest degree <span class=\"sy1\">=</span> 5<span class=\"sy1\">;</span><br/>   <span class=\"kw3\">INT</span> largest number <span class=\"sy1\">=</span> 10<span class=\"sy1\">;</span><br/><span class=\"co1\">CO Recursive implementation of multifactorial function CO</span><br/>   <span class=\"kw4\">PROC</span> multi fact <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"sy1\">,</span> deg<span class=\"br0\">)</span> <span class=\"kw3\">INT</span> <span class=\"sy1\">:</span><br/>   <span class=\"br0\">(</span>n <span class=\"sy1\">&lt;=</span> deg <span class=\"sy1\">|</span> n <span class=\"sy1\">|</span> n <span class=\"sy1\">*</span> multi fact<span class=\"br0\">(</span>n <span class=\"sy1\">-</span> deg<span class=\"sy1\">,</span> deg<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"co1\">CO Iterative implementation of multifactorial function CO</span><br/>   <span class=\"kw4\">PROC</span> multi fact i <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"sy1\">,</span> deg<span class=\"br0\">)</span> <span class=\"kw3\">INT</span> <span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"kw3\">INT</span> result <span class=\"sy1\">:=</span> n<span class=\"sy1\">,</span> nn <span class=\"sy1\">:=</span> n<span class=\"sy1\">;</span><br/>      <span class=\"kw2\">WHILE</span> <span class=\"br0\">(</span>nn <span class=\"sy1\">&gt;=</span> deg <span class=\"sy1\">+</span> 1<span class=\"br0\">)</span> <span class=\"kw2\">DO</span><br/>\t result <span class=\"kw17\">TIMESAB</span> nn <span class=\"sy1\">-</span> deg<span class=\"sy1\">;</span><br/>\t nn <span class=\"kw17\">MINUSAB</span> deg<br/>      <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>      result<br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/><span class=\"co1\">CO Print out multifactorials CO</span><br/>   <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> highest degree <span class=\"kw2\">DO</span><br/>      <span class=\"kw22\">printf</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$l<span class=\"sy1\">,</span> <span class=\"st0\">\"Degree \"</span><span class=\"sy1\">,</span> g<span class=\"br0\">(</span>0<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\":\"</span>$<span class=\"sy1\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw2\">FOR</span> j <span class=\"kw2\">TO</span> largest number <span class=\"kw2\">DO</span><br/>\t <span class=\"kw22\">printf</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>$xg<span class=\"br0\">(</span>0<span class=\"br0\">)</span>$<span class=\"sy1\">,</span> multi fact <span class=\"br0\">(</span>j<span class=\"sy1\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">OD</span><br/>   <span class=\"kw2\">OD</span><br/><span class=\"kw2\">END</span><br/>\u00a0</pre>"}, {"lang": "ALGOL W", "loc": 22, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% returns the multifactorial of n with the specified degree\u00a0%<br/>    integer procedure multifactorial ( integer value n, degree )\u00a0;<br/>        begin<br/>            integer mf, v;<br/>            mf\u00a0:= v\u00a0:= n;<br/>            while begin<br/>                      v\u00a0:= v - degree;<br/>                      v &gt; 1<br/>            end do mf\u00a0:= mf * v;<br/>            mf<br/>        end multifactorial\u00a0;<br/>\u00a0<br/>   \u00a0% tests as per task\u00a0%<br/>    for degree\u00a0:= 1 until 5 do begin<br/>        i_w\u00a0:= 1; s_w\u00a0:= 0;\u00a0% output formatting\u00a0%<br/>        write( \"Degree: \", degree, \":\" );<br/>        for v\u00a0:= 1 until 10 do begin<br/>            writeon( \" \", multifactorial( v, degree ) )<br/>        end for_v<br/>    end for_degree<br/>end.</pre>"}, {"lang": "ANSI Standard BASIC", "loc": 20, "block": "<pre class=\"text highlighted_source\">100 FUNCTION multiFactorial (n, degree)<br/>110    IF  n &lt; 2 THEN <br/>120       LET multiFactorial = 1<br/>130       EXIT FUNCTION<br/>140    END IF<br/>150    LET result = n<br/>160    FOR i = n - degree TO 2 STEP -degree<br/>170       LET result = result * i<br/>180    NEXT i<br/>190    LET multiFactorial = result<br/>200 END FUNCTION<br/>210<br/>220 FOR degree = 1 TO 5<br/>230    PRINT \"Degree\"; degree; \" =&gt; \";<br/>240    FOR n = 1 TO 10<br/>250       PRINT multiFactorial(n, degree); \" \";<br/>260    NEXT n<br/>270    PRINT <br/>280 NEXT degree<br/>290 END</pre>"}, {"lang": "AutoHotkey", "loc": 13, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">5</span> <span class=\"br0\">{</span><br/>    Output <span class=\"sy0\">.=</span> <span class=\"st0\">\"Degree \"</span> <span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span> <span class=\"st0\">\": \"</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><br/>        Output <span class=\"sy0\">.=</span> MultiFact<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span>\u00a0? <span class=\"st0\">\"`n\"</span>\u00a0: <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% Output<br/>\u00a0<br/>MultiFact<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Result <span class=\"sy0\">:=</span> n<br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">-=</span> d<br/>        Result <span class=\"sy0\">*=</span> n<br/>    <span class=\"kw1\">return</span><span class=\"sy0\">,</span> Result<br/><span class=\"br0\">}</span></pre>"}, {"lang": "BBC BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">REM &gt;multifact<br/>FOR i% = 1 TO 5<br/>  PRINT \"Degree \"; i%; \":\";<br/>  FOR j% = 1 TO 10<br/>    PRINT \" \";FNmultifact(j%, i%);<br/>  NEXT<br/>  PRINT<br/>NEXT<br/>END<br/>:<br/>DEF FNmultifact(n%, degree%)<br/>LOCAL i%, mfact%<br/>mfact% = 1<br/>FOR i% = n% TO 1 STEP -degree%<br/>  mfact% = mfact% * i%<br/>NEXT<br/>= mfact%</pre>"}, {"lang": "C", "loc": 32, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* Include statements and constant definitions */</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#define HIGHEST_DEGREE 5</span><br/><span class=\"co2\">#define LARGEST_NUMBER 10</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Recursive implementation of multifactorial function */</span><br/><span class=\"kw4\">int</span> multifact<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> deg<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <span class=\"kw1\">return</span> n <span class=\"sy0\">&lt;=</span> deg <span class=\"sy0\">?</span> n <span class=\"sy0\">:</span> n <span class=\"sy0\">*</span> multifact<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> deg<span class=\"sy0\">,</span> deg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Iterative implementation of multifactorial function */</span><br/><span class=\"kw4\">int</span> multifact_i<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> deg<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <span class=\"kw4\">int</span> result <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> deg <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      result <span class=\"sy0\">*=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> deg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      n <span class=\"sy0\">-=</span> deg<span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Test function to print out multifactorials */</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> HIGHEST_DEGREE<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Degree\u00a0%d: \"</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> LARGEST_NUMBER<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>         <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span> multifact<span class=\"br0\">(</span>j<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 38, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">namespace</span> RosettaCode<span class=\"sy0\">.</span><span class=\"me1\">Multifactorial</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">internal</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span>Environment<span class=\"sy0\">.</span><span class=\"me1\">NewLine</span>,<br/>                                          Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>                                                    <span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span><br/>                                                        degree <span class=\"sy0\">=&gt;</span><br/>                                                        <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>,<br/>                                                                    Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>                                                                              <span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span><br/>                                                                                  number <span class=\"sy0\">=&gt;</span><br/>                                                                                  Multifactorial<span class=\"br0\">(</span>number, degree<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> Multifactorial<span class=\"br0\">(</span><span class=\"kw4\">int</span> number, <span class=\"kw4\">int</span> degree<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>degree <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentOutOfRangeException<span class=\"br0\">(</span><span class=\"st0\">\"degree\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>number <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> degree<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>count <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentOutOfRangeException<span class=\"br0\">(</span><span class=\"st0\">\"number\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, count<span class=\"br0\">)</span><br/>                             <span class=\"sy0\">.</span><span class=\"me1\">Aggregate</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"br0\">(</span>accumulator, index<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> accumulator <span class=\"sy0\">*</span> <span class=\"br0\">(</span>number <span class=\"sy0\">-</span> degree <span class=\"sy0\">*</span> index<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 18, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"coMULTI\">/*Generate multifactorials to 9<br/>\u00a0<br/>  Nigel_Galloway<br/>  November 14th., 2012.<br/>*/</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> g <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> g <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> g<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>     <span class=\"kw4\">int</span> v<span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"br0\">]</span>, n<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>     generate_n<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">ostream_iterator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span>, <span class=\"st0\">\" \"</span><span class=\"br0\">)</span>, <span class=\"nu0\">10</span>, <span class=\"br0\">[</span><span class=\"sy3\">&amp;</span><span class=\"br0\">]</span><span class=\"br0\">{</span>n<span class=\"sy2\">++</span><span class=\"sy4\">;</span> <span class=\"kw1\">return</span> v<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy1\">=</span><span class=\"br0\">(</span>g<span class=\"sy1\">&lt;</span>n<span class=\"br0\">)</span><span class=\"sy4\">?</span> v<span class=\"br0\">[</span>n<span class=\"sy2\">-</span>g<span class=\"br0\">]</span><span class=\"sy2\">*</span>n <span class=\"sy4\">:</span> n<span class=\"sy4\">;</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>     std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 5, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> <span class=\"sy0\">!!</span> <span class=\"br0\">[</span>m n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">iterate</span> #<span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"sy0\">%</span> m<span class=\"br0\">)</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">take-while</span> <span class=\"kw1\">pos?</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>m <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">1</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>prn m <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"sy0\">!!</span> m <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">1</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 9, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> mfac <span class=\"br0\">(</span>n m<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>reduce #'* <span class=\"br0\">(</span>loop for i from n downto <span class=\"nu0\">1</span> by m collect i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>loop for i from <span class=\"nu0\">1</span> to <span class=\"nu0\">10</span><br/>      <span class=\"kw1\">do</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"<a class=\"__cf_email__\" data-cfemail=\"443a760425\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>: ~{~a~^ ~}~%\"</span><br/>                 i <span class=\"br0\">(</span>loop for j from <span class=\"nu0\">1</span> to <span class=\"nu0\">10</span><br/>                         collect <span class=\"br0\">(</span>mfac j i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 12, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/>T multifactorial<span class=\"br0\">(</span>T<span class=\"sy0\">=</span><span class=\"kw4\">long</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> m<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"coMULTI\">/*nothrow*/</span> <span class=\"br0\">{</span><br/>    T one <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> reduce<span class=\"sy0\">!</span>q<span class=\"br0\">{</span>a <span class=\"sy0\">*</span> b<span class=\"br0\">}</span><span class=\"br0\">(</span>one<span class=\"sy0\">,</span> iota<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> m<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%2d:\u00a0%s\"</span><span class=\"sy0\">,</span> m<span class=\"sy0\">,</span> iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>                               .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>n <span class=\"sy0\">=&gt;</span> multifactorial<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>main()<br/>{<br/>  int n=5,d=3;<br/>int z= fact(n,d);<br/>print('$n factorial of degree $d is $z');<br/>for(var j=1;j&lt;=5;j++)<br/>{<br/>  print('first 10 numbers of degree $j\u00a0:');<br/>  for(var i=1;i&lt;=10;i++)<br/>  {   <br/>    int z=fact(i,j);<br/> print('$z'); <br/>}<br/>  print('\\n');<br/>}<br/>}<br/>\u00a0<br/>int fact(int a,int b)<br/>{<br/>\u00a0<br/>  if(a&lt;=b||a==0)<br/>    return a;<br/>  if(a&gt;1)<br/>    return a*fact((a-b),b);<br/>}<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 10, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def multifactorial(n,d) do<br/>    Enum.take_every(n..1, d) |&gt; Enum.reduce(1, fn x,p -&gt; x*p end)<br/>  end<br/>end<br/>\u00a0<br/>Enum.each(1..5, fn d -&gt;<br/>  multifac = for n &lt;- 1..10, do: RC.multifactorial(n,d)<br/>  IO.puts \"Degree #{d}: #{inspect multifac}\"<br/>end)</pre>"}, {"lang": "Erlang", "loc": 12, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>multifac<span class=\"br0\">)</span><span class=\"sy1\">.</span>   <br/><span class=\"sy3\">-</span><span class=\"re2\">compile</span><span class=\"br0\">(</span>export_all<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">multifac</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">D</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"re5\">P</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">X</span> <span class=\"sy3\">*</span> <span class=\"re5\">P</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"sy3\">-</span><span class=\"re5\">D</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Ds</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Ns</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>   <br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foreach</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">D</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>                          <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Degree ~b: ~p~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">D</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span> <span class=\"re3\">multifac</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">D</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Ns</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                  <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">Ds</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM MULTIFACTORIAL<br/>\u00a0<br/>PROCEDURE MULTI_FACT(NUM,DEG-&gt;MF)<br/>   RESULT=NUM<br/>   N=NUM<br/>   IF N=0 THEN<br/>      MF=1<br/>      EXIT PROCEDURE<br/>   END IF<br/>   LOOP<br/>      N-=DEG<br/>      EXIT IF N&lt;=0<br/>      RESULT*=N<br/>   END LOOP<br/>   MF=RESULT<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>  PRINT(CHR$(12);)<br/>  FOR DEG=1 TO 10 DO<br/>      PRINT(\"Degree\";DEG;\":\";)<br/>      FOR NUM=1 TO 10 DO<br/>          MULTI_FACT(NUM,DEG-&gt;MF)<br/>          PRINT(MF;)<br/>      END FOR<br/>      PRINT<br/>  END FOR<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 16, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> mfact d <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>    | n <span class=\"kw1\">when</span> n <span class=\"sy0\">&lt;=</span> d   <span class=\"sy0\">-&gt;</span> n<br/>    | n <span class=\"sy0\">-&gt;</span> n <span class=\"sy0\">*</span> mfact d <span class=\"br0\">(</span>n<span class=\"sy0\">-</span>d<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main argv <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> <span class=\"br0\">(</span>|UInt|_|<span class=\"br0\">)</span> <span class=\"sy0\">=</span> System.<span class=\"me1\">UInt32</span>.<span class=\"me1\">TryParse</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"kw1\">function</span> | <span class=\"kw1\">true</span>, v <span class=\"sy0\">-&gt;</span> Some v | <span class=\"kw1\">false</span>, _ <span class=\"sy0\">-&gt;</span> None<br/>    <span class=\"kw1\">let</span> <span class=\"br0\">(</span>maxDegree, maxN<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">match</span> argv <span class=\"kw1\">with</span><br/>            | <span class=\"br0\">[</span>| UInt d<span class=\"sy0\">;</span> UInt n |<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> d, <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>            | <span class=\"br0\">[</span>| UInt d |<span class=\"br0\">]</span>         <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> d, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>            | _                    <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> showFor d <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">init</span> maxN <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i <span class=\"sy0\">-&gt;</span> mfact d <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> printfn <span class=\"st0\">\"%i:\u00a0%A\"</span> d<br/>    <span class=\"kw3\">ignore</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">init</span> maxDegree <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i <span class=\"sy0\">-&gt;</span> showFor <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 15, "block": "<pre class=\"text highlighted_source\">USING: formatting io kernel math math.ranges prettyprint<br/>sequences\u00a0;<br/>IN: rosetta-code.multifactorial<br/>\u00a0<br/>: multifactorial ( n degree -- m )<br/>    neg 1 swap &lt;range&gt; product\u00a0;<br/>\u00a0<br/>: mf-row ( degree -- )<br/>    dup \"Degree\u00a0%d: \" printf<br/>    10 [1,b] [ swap multifactorial pprint bl ] with each\u00a0;<br/>\u00a0<br/>: main ( -- )<br/>    5 [1,b] [ mf-row nl ] each\u00a0;<br/>\u00a0<br/>MAIN: main</pre>"}, {"lang": "Forth", "loc": 2, "block": "<pre class=\"text highlighted_source\">:\u00a0!n negate swap 1 dup rot do i * over +loop nip\u00a0;<br/>: test cr 6 1\u00a0?do 11 1\u00a0?do i j\u00a0!n . loop cr loop\u00a0;</pre>"}, {"lang": "Fortran", "loc": 23, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> test<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j, n<br/>\u00a0<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">5</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a, i0, a)\"</span>, <span class=\"kw1\">advance</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Degree \"</span>, i, <span class=\"st0\">\": \"</span><br/>    <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">10</span><br/>      n <span class=\"sy0\">=</span> multifactorial<span class=\"br0\">(</span>j, i<span class=\"br0\">)</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(i0, 1x)\"</span>, <span class=\"kw1\">advance</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> n<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw1\">function</span> multifactorial <span class=\"br0\">(</span><span class=\"kw4\">range</span>, degree<span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">multifactorial</span>, <span class=\"kw4\">range</span>, degree<br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">k</span><br/>\u00a0<br/>  multifactorial <span class=\"sy0\">=</span> <span class=\"kw4\">product</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>k, k<span class=\"sy0\">=</span><span class=\"kw4\">range</span>, <span class=\"nu0\">1</span>, <span class=\"sy0\">-</span>degree<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span> multifactorial<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> test</pre>"}, {"lang": "FreeBASIC", "loc": 22, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> multiFactorial <span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span>, degree <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><br/>  <span class=\"kw1\">If</span>  n &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"nu0\">1</span><br/>  Var result = n<br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = n - degree <span class=\"kw1\">To</span> <span class=\"nu0\">2</span> <span class=\"kw1\">Step</span> -degree<br/>    result *= i<br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> result<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">For</span> degree <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">5</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"Degree\"</span>; degree; <span class=\"st0\">\" =&gt; \"</span>;<br/>  <span class=\"kw1\">For</span> n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">Print</span> multiFactorial<span class=\"br0\">(</span>n, degree<span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>;<br/>  <span class=\"kw1\">Next</span> n<br/>  <span class=\"kw1\">Print</span> <br/><span class=\"kw1\">Next</span> degree<br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "FunL", "loc": 4, "block": "<pre class=\"text highlighted_source\">def multifactorial( n, d ) = product( n..1 by -d )<br/>\u00a0<br/>for d &lt;- 1..5<br/>  println( d, [multifactorial(i, d) | i &lt;- 1..10] ))</pre>"}, {"lang": "GAP", "loc": 21, "block": "<pre class=\"text highlighted_source\">MultiFactorial\u00a0:= function(n, k)<br/>    local r;<br/>    r\u00a0:= 1;<br/>    while n &gt; 1 do<br/>        r\u00a0:= r*n;<br/>        n\u00a0:= n - k;<br/>    od;<br/>    return r;<br/>end;<br/>\u00a0<br/>PrintArray(List([1 .. 10], n -&gt; List([1 .. 5], k -&gt; MultiFactorial(n, k))));<br/>[ [        1,        1,        1,        1,        1 ],<br/>  [        2,        2,        2,        2,        2 ],<br/>  [        6,        3,        3,        3,        3 ],<br/>  [       24,        8,        4,        4,        4 ],<br/>  [      120,       15,       10,        5,        5 ],<br/>  [      720,       48,       18,       12,        6 ],<br/>  [     5040,      105,       28,       21,       14 ],<br/>  [    40320,      384,       80,       32,       24 ],<br/>  [   362880,      945,      162,       45,       36 ],<br/>  [  3628800,     3840,      280,      120,       50 ] ]</pre>"}, {"lang": "Go", "loc": 21, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> multiFactorial<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> k <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    r <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">;</span> n &gt; <span class=\"nu0\">1</span><span class=\"sy1\">;</span> n <span class=\"sy2\">-=</span> k <span class=\"sy1\">{</span><br/>        r <span class=\"sy2\">*=</span> n<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> r<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> k <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> k &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">5</span><span class=\"sy1\">;</span> k<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"degree \"</span><span class=\"sy1\">,</span> k<span class=\"sy1\">,</span> <span class=\"st0\">\":\"</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> n &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> multiFactorial<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> k<span class=\"sy1\">))</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 6, "block": "<pre class=\"haskell highlighted_source\">mulfac k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>:s <span class=\"kw1\">where</span> s <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> k<span class=\"br0\">]</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> s <span class=\"br0\">[</span>k<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- for single n</span><br/>mulfac1 k n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:product\"><span class=\"kw3\">product</span></a> <span class=\"br0\">[</span>n<span class=\"sy0\">,</span> n<span class=\"sy0\">-</span>k <span class=\"sy0\">..</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">10</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a> <span class=\"sy0\">.</span> mulfac<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">5</span><span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 14, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    l <span class=\"sy0\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">every</span> writeRow<span class=\"br0\">(</span>n <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>l<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">:</span> mf<span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span>n<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> writeRow<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><br/>    <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"kw4\">right</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\": \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"kw4\">right</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>r<span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">|</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> mf<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> m<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">return</span> n<span class=\"sy0\">*</span>mf<span class=\"br0\">(</span>n<span class=\"sy0\">-</span>m<span class=\"sy0\">,</span> m<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 23, "block": "<pre class=\"j highlighted_source\">\u00a0<br/>   <span class=\"co1\">NB. tacit implementation of the recursive c function</span><br/>   <span class=\"co1\">NB. int multifact(int n,int deg){return n&lt;=deg?n:n*multifact(n-deg,deg);}</span><br/>\u00a0<br/>   multifact=: [`<span class=\"sy0\">(</span>[ * - $: ]<span class=\"sy0\">)</span>@.<span class=\"sy0\">(</span>&lt;~<span class=\"sy0\">)</span>  <br/>   <span class=\"sy0\">(</span>a:,&lt;<span class=\"st_h\">'       degree'</span><span class=\"sy0\">)</span>,multifact table &gt;:i.<span class=\"nu0\">10</span><br/>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510<br/>\u2502         \u2502       degree                         \u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502multifact\u2502      <span class=\"nu0\">1</span>    <span class=\"nu0\">2</span>   <span class=\"nu0\">3</span>   <span class=\"nu0\">4</span>  <span class=\"nu0\">5</span>  <span class=\"nu0\">6</span>  <span class=\"nu0\">7</span>  <span class=\"nu0\">8</span>  <span class=\"nu0\">9</span> <span class=\"nu0\">10</span>\u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502 <span class=\"nu0\">1</span>       \u2502      <span class=\"nu0\">1</span>    <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>   <span class=\"nu0\">1</span>  <span class=\"nu0\">1</span>  <span class=\"nu0\">1</span>  <span class=\"nu0\">1</span>  <span class=\"nu0\">1</span>  <span class=\"nu0\">1</span>  <span class=\"nu0\">1</span>\u2502<br/>\u2502 <span class=\"nu0\">2</span>       \u2502      <span class=\"nu0\">2</span>    <span class=\"nu0\">2</span>   <span class=\"nu0\">2</span>   <span class=\"nu0\">2</span>  <span class=\"nu0\">2</span>  <span class=\"nu0\">2</span>  <span class=\"nu0\">2</span>  <span class=\"nu0\">2</span>  <span class=\"nu0\">2</span>  <span class=\"nu0\">2</span>\u2502<br/>\u2502 <span class=\"nu0\">3</span>       \u2502      <span class=\"nu0\">6</span>    <span class=\"nu0\">3</span>   <span class=\"nu0\">3</span>   <span class=\"nu0\">3</span>  <span class=\"nu0\">3</span>  <span class=\"nu0\">3</span>  <span class=\"nu0\">3</span>  <span class=\"nu0\">3</span>  <span class=\"nu0\">3</span>  <span class=\"nu0\">3</span>\u2502<br/>\u2502 <span class=\"nu0\">4</span>       \u2502     <span class=\"nu0\">24</span>    <span class=\"nu0\">8</span>   <span class=\"nu0\">4</span>   <span class=\"nu0\">4</span>  <span class=\"nu0\">4</span>  <span class=\"nu0\">4</span>  <span class=\"nu0\">4</span>  <span class=\"nu0\">4</span>  <span class=\"nu0\">4</span>  <span class=\"nu0\">4</span>\u2502<br/>\u2502 <span class=\"nu0\">5</span>       \u2502    <span class=\"nu0\">120</span>   <span class=\"nu0\">15</span>  <span class=\"nu0\">10</span>   <span class=\"nu0\">5</span>  <span class=\"nu0\">5</span>  <span class=\"nu0\">5</span>  <span class=\"nu0\">5</span>  <span class=\"nu0\">5</span>  <span class=\"nu0\">5</span>  <span class=\"nu0\">5</span>\u2502<br/>\u2502 <span class=\"nu0\">6</span>       \u2502    <span class=\"nu0\">720</span>   <span class=\"nu0\">48</span>  <span class=\"nu0\">18</span>  <span class=\"nu0\">12</span>  <span class=\"nu0\">6</span>  <span class=\"nu0\">6</span>  <span class=\"nu0\">6</span>  <span class=\"nu0\">6</span>  <span class=\"nu0\">6</span>  <span class=\"nu0\">6</span>\u2502<br/>\u2502 <span class=\"nu0\">7</span>       \u2502   <span class=\"nu0\">5040</span>  <span class=\"nu0\">105</span>  <span class=\"nu0\">28</span>  <span class=\"nu0\">21</span> <span class=\"nu0\">14</span>  <span class=\"nu0\">7</span>  <span class=\"nu0\">7</span>  <span class=\"nu0\">7</span>  <span class=\"nu0\">7</span>  <span class=\"nu0\">7</span>\u2502<br/>\u2502 <span class=\"nu0\">8</span>       \u2502  <span class=\"nu0\">40320</span>  <span class=\"nu0\">384</span>  <span class=\"nu0\">80</span>  <span class=\"nu0\">32</span> <span class=\"nu0\">24</span> <span class=\"nu0\">16</span>  <span class=\"nu0\">8</span>  <span class=\"nu0\">8</span>  <span class=\"nu0\">8</span>  <span class=\"nu0\">8</span>\u2502<br/>\u2502 <span class=\"nu0\">9</span>       \u2502 <span class=\"nu0\">362880</span>  <span class=\"nu0\">945</span> <span class=\"nu0\">162</span>  <span class=\"nu0\">45</span> <span class=\"nu0\">36</span> <span class=\"nu0\">27</span> <span class=\"nu0\">18</span>  <span class=\"nu0\">9</span>  <span class=\"nu0\">9</span>  <span class=\"nu0\">9</span>\u2502<br/>\u2502<span class=\"nu0\">10</span>       \u2502<span class=\"nu0\">3628800</span> <span class=\"nu0\">3840</span> <span class=\"nu0\">280</span> <span class=\"nu0\">120</span> <span class=\"nu0\">50</span> <span class=\"nu0\">40</span> <span class=\"nu0\">30</span> <span class=\"nu0\">20</span> <span class=\"nu0\">10</span> <span class=\"nu0\">10</span>\u2502<br/>\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518<br/>\u00a0</pre>"}, {"lang": "Java", "loc": 19, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> MultiFact <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">long</span> multiFact<span class=\"br0\">(</span><span class=\"kw4\">long</span> n, <span class=\"kw4\">int</span> deg<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">long</span> ans <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">long</span> i <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">-=</span> deg<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tans <span class=\"sy0\">*=</span> i<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> ans<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> deg <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> deg <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> deg<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"degree \"</span> <span class=\"sy0\">+</span> deg <span class=\"sy0\">+</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">long</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> multiFact<span class=\"br0\">(</span>n, deg<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 10, "block": "<pre class=\"javascript highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> multifact<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> deg<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> result <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>\twhile <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> deg <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tresult <span class=\"sy0\">*=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> deg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tn <span class=\"sy0\">-=</span> deg<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 6, "block": "<pre class=\"text highlighted_source\"># Input: n<br/># Output: n * (n - d) * (n - 2d) ...<br/>def multifactorial(d):<br/>  . as $n<br/>  | ($n / d | floor) as $k<br/>  | reduce ($n - (d * range(0; $k))) as $i (1; . * $i);</pre>"}, {"lang": "Julia", "loc": 14, "block": "<pre class=\"text highlighted_source\">function multifact(n::Integer, k::Integer)<br/>    n &gt; 0 &amp;&amp; k &gt; 0 || throw(DomainError())<br/>    k &gt; 1 || factorial(n)<br/>    return prod(n:-k:2)<br/>end<br/>\u00a0<br/>const khi = 5<br/>const nhi = 10<br/>println(\"Showing multifactorial for n in [1, $nhi] and k in [1, $khi].\")<br/>for k = 1:khi<br/>    a = multifact.(1:nhi, k)<br/>    lab = \"n\" * \"!\" ^ k<br/>    @printf(\" \u00a0%-6s \u2192 \u00a0%s\\n\", lab, a)<br/>end</pre>"}, {"lang": "Kotlin", "loc": 14, "block": "<pre class=\"scala highlighted_source\">fun multifactorial<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Long, d<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Long <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> n <span class=\"sy0\">%</span> d<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span> <span class=\"br0\">{</span> it <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> r <span class=\"br0\">}</span> .<span class=\"me1\">reduce</span> <span class=\"br0\">{</span> i, p -<span class=\"sy0\">&gt;</span> i <span class=\"sy0\">*</span> p <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>..10L<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>d in <span class=\"nu0\">1</span>..<span class=\"me1\">m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"%${m}s:\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span> <span class=\"st0\">\"!\"</span>.<span class=\"me1\">repeat</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        r.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> print<span class=\"br0\">(</span><span class=\"st0\">\" \"</span> + multifactorial<span class=\"br0\">(</span>it, d<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 17, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> multiFact <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> degree<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> fact <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> n<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>degree <span class=\"kw1\">do</span><br/>        fact <span class=\"sy0\">=</span> fact <span class=\"sy0\">*</span> i<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> fact<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Degree<span class=\"es1\">\\t</span>|<span class=\"es1\">\\t</span>Multifactorials 1 to 10\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">string.rep</span><span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">52</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">io.write</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">..</span> d<span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\t</span>| \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw3\">io.write</span><span class=\"br0\">(</span>multiFact<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> d<span class=\"br0\">)</span> <span class=\"sy0\">..</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maple", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>f\u00a0:= proc (n, m)<br/>\tlocal fac, i;<br/>\tfac\u00a0:= 1;<br/>\tfor i from n by -m to 1 do<br/>\t\tfac\u00a0:= fac*i; <br/>\tend do; <br/>\treturn fac;<br/>end proc:<br/>\u00a0<br/>a:=Matrix(5,10):<br/>for i from 1 to 5 do<br/>\tfor j from 1 to 10 do<br/>\t\ta[i,j]:=f(j,i);<br/>\tend do;<br/>end do;<br/>a;<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">Multifactorial[n_, m_]\u00a0:= Abs[ Apply[ Times, Range[-n, -1, m]]]<br/>Table[ Multifactorial[j, i], {i, 5}, {j, 10}] // TableForm</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u041f1\t&lt;-&gt;\t\u041f0\t\u041f2\t\u0418\u041f0\t\u0418\u041f1\t1\t+\t-\tx&gt;=0<br/>23\t\u0418\u041f2\t\u0418\u041f0\t\u0418\u041f1\t-\t*\t\u041f2\t\u0418\u041f0\t\u0418\u041f1\t-<br/>\u041f1\t\u0411\u041f\t04\t\u0418\u041f2\t\u0421/\u041f</pre>"}, {"lang": "Nim", "loc": 16, "block": "<pre class=\"text highlighted_source\"># Recursive<br/>proc multifact(n, deg): int =<br/>  result = (if n &lt;= deg: n else: n * multifact(n - deg, deg))<br/>\u00a0<br/># Iterative<br/>proc multifactI(n, deg): int =<br/>  result = n<br/>  var n = n<br/>  while n &gt;= deg + 1:<br/>    result *= n - deg<br/>    n -= deg<br/>\u00a0<br/>for i in 1..5:<br/>  stdout.write \"\\nDegree \", i, \": \"<br/>  for j in 1..10:<br/>    stdout.write multifactI(j, i), \" \"</pre>"}, {"lang": "Objeck", "loc": 23, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span> Multifact <span class=\"br0\">{</span><br/>   <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> MultiFact<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">,</span> deg <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>      result <span class=\"sy0\">:=</span> n<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> deg <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>         result <span class=\"sy0\">*=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> deg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         n <span class=\"sy0\">-=</span> deg<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> i<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>         IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Degree \"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\": \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> j<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>' '<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>MultiFact<span class=\"br0\">(</span>j<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>         IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Oforth", "loc": 5, "block": "<pre class=\"text highlighted_source\">: multifact(n, deg)  1 while( n 0 &gt; ) [ n * n deg - -&gt;n ]\u00a0;<br/>\u00a0<br/>: printMulti<br/>| i |<br/>   5 loop: i [ System.Out i &lt;&lt; \"\u00a0: \" &lt;&lt; 10 seq map(#[ i multifact]) &lt;&lt; cr ]\u00a0;</pre>"}, {"lang": "PARI/GP", "loc": 2, "block": "<pre class=\"parigp highlighted_source\">fac<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>d<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">prod</span><span class=\"br0\">(</span>k<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>d<span class=\"sy0\">,</span>n<span class=\"sy0\">-</span>k<span class=\"sy0\">*</span>d<span class=\"br0\">)</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>k<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">5</span><span class=\"sy0\">,</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">10</span><span class=\"sy0\">,</span><span class=\"kw1\">print1</span><span class=\"br0\">(</span>fac<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>k<span class=\"br0\">)</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">print</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 14, "block": "<pre class=\"perl highlighted_source\"><span class=\"br0\">{</span> <span class=\"co1\"># &lt;-- scoping the cache and bigint clause</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@cache</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">use</span> bigint<span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">sub</span> mfact <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$cache</span><span class=\"br0\">[</span><span class=\"re0\">$s</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"sy0\">//=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">*</span> mfact<span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"re0\">$s</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"step=$s: \"</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span>mfact<span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 4, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">5</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$degree</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">sub</span> mfact<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">]</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"sy0\">*-</span><span class=\"re0\">$degree</span> <span class=\"sy0\">...^</span> <span class=\"sy0\">*</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"$degree: \"</span><span class=\"sy0\">,</span> <span class=\"kw3\">map</span> <span class=\"re0\">&amp;mfact</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 15, "block": "<pre class=\"text highlighted_source\">function multifactorial(integer n, integer order)<br/>atom res = 1<br/>    if n&gt;0 then<br/>        res = n*multifactorial(n-order,order)<br/>    end if <br/>    return res<br/>end function<br/>\u00a0<br/>sequence s = repeat(0,10)<br/>for i=1 to 5 do<br/>    for j=1 to 10 do<br/>        s[j] = multifactorial(j,i)<br/>    end for<br/>   \u00a0?s<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 11, "block": "<pre class=\"text highlighted_source\">(de multifact (N Deg)<br/>   (let Res N<br/>      (while (&gt; N Deg)<br/>         (setq Res (* Res (dec 'N Deg))) )<br/>      Res ) )<br/>\u00a0<br/>(for I 5<br/>   (prin \"Degree \" I \":\")<br/>   (for J 10<br/>      (prin \" \" (multifact J I)) )<br/>   (prinl) )</pre>"}, {"lang": "PL/I", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>multi: procedure options (main);      /* 29 October 2013 */<br/>   declare (i, j, n) fixed binary;<br/>   declare text character (6) static initial ('n!!!!!');<br/>\u00a0<br/>   do i = 1 to 5;<br/>      put skip edit (substr(text, 1, i+1), '=' ) (A, COLUMN(8));<br/>      do n = 1 to 10;<br/>         put edit ( trim( multifactorial(n,i) ) ) (X(1), A);<br/>      end;<br/>   end;<br/>\u00a0<br/>multifactorial: procedure (n, j) returns (fixed(15));<br/>   declare (n, j) fixed binary;<br/>   declare f fixed (15), m fixed(15);<br/>\u00a0<br/>      f, m = n;<br/>      do while (m &gt; j); f = f * (m-fixed(j)); m = m - j; end;<br/>      return (f);<br/>end multifactorial;<br/>\u00a0<br/>end multi;<br/>\u00a0</pre>"}, {"lang": "Plain TeX", "loc": 14, "block": "<pre class=\"text highlighted_source\">\\long\\def\\antefi#1#2\\fi{#2\\fi#1}<br/>\\def\\fornum#1=#2to#3(#4){%<br/>\t\\edef#1{\\number\\numexpr#2}\\edef\\fornumtemp{\\noexpand\\fornumi\\expandafter\\noexpand\\csname fornum\\string#1\\endcsname<br/>\t\t{\\number\\numexpr#3}{\\ifnum\\numexpr#4&lt;0 &lt;\\else&gt;\\fi}{\\number\\numexpr#4}\\noexpand#1}\\fornumtemp<br/>}<br/>\\long\\def\\fornumi#1#2#3#4#5#6{\\def#1{\\unless\\ifnum#5#3#2\\relax\\antefi{#6\\edef#5{\\number\\numexpr#5+(#4)\\relax}#1}\\fi}#1}<br/>\\newcount\\result<br/>\\def\\multifact#1#2{%<br/>\t\\result=1<br/>\t\\fornum\\multifactiter=#1 to 1(-#2){\\multiply\\result\\multifactiter}%<br/>\t\\number\\result<br/>}<br/>\\fornum\\degree=1 to 5(+1){Degree \\degree: \\fornum\\ii=1 to 10(+1){\\multifact\\ii\\degree\\space\\space}\\par}<br/>\\bye</pre>"}, {"lang": "Python", "loc": 17, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">from</span> functools <span class=\"kw1\">import</span> <span class=\"kw2\">reduce</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">from</span> <span class=\"kw3\">operator</span> <span class=\"kw1\">import</span> mul<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> mfac<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> m<span class=\"br0\">)</span>: <span class=\"kw1\">return</span> <span class=\"kw2\">reduce</span><span class=\"br0\">(</span>mul<span class=\"sy0\">,</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> -m<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">for</span> m <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span>: <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"%2i:\u00a0%r\"</span>\u00a0% <span class=\"br0\">(</span>m<span class=\"sy0\">,</span> <span class=\"br0\">[</span>mfac<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> m<span class=\"br0\">)</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/> <span class=\"nu0\">1</span>: <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">120</span><span class=\"sy0\">,</span> <span class=\"nu0\">720</span><span class=\"sy0\">,</span> <span class=\"nu0\">5040</span><span class=\"sy0\">,</span> <span class=\"nu0\">40320</span><span class=\"sy0\">,</span> <span class=\"nu0\">362880</span><span class=\"sy0\">,</span> <span class=\"nu0\">3628800</span><span class=\"br0\">]</span><br/> <span class=\"nu0\">2</span>: <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span> <span class=\"nu0\">48</span><span class=\"sy0\">,</span> <span class=\"nu0\">105</span><span class=\"sy0\">,</span> <span class=\"nu0\">384</span><span class=\"sy0\">,</span> <span class=\"nu0\">945</span><span class=\"sy0\">,</span> <span class=\"nu0\">3840</span><span class=\"br0\">]</span><br/> <span class=\"nu0\">3</span>: <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"nu0\">28</span><span class=\"sy0\">,</span> <span class=\"nu0\">80</span><span class=\"sy0\">,</span> <span class=\"nu0\">162</span><span class=\"sy0\">,</span> <span class=\"nu0\">280</span><span class=\"br0\">]</span><br/> <span class=\"nu0\">4</span>: <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">21</span><span class=\"sy0\">,</span> <span class=\"nu0\">32</span><span class=\"sy0\">,</span> <span class=\"nu0\">45</span><span class=\"sy0\">,</span> <span class=\"nu0\">120</span><span class=\"br0\">]</span><br/> <span class=\"nu0\">5</span>: <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">36</span><span class=\"sy0\">,</span> <span class=\"nu0\">50</span><span class=\"br0\">]</span><br/> <span class=\"nu0\">6</span>: <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">27</span><span class=\"sy0\">,</span> <span class=\"nu0\">40</span><span class=\"br0\">]</span><br/> <span class=\"nu0\">7</span>: <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"nu0\">30</span><span class=\"br0\">]</span><br/> <span class=\"nu0\">8</span>: <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"br0\">]</span><br/> <span class=\"nu0\">9</span>: <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><br/><span class=\"nu0\">10</span>: <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "R", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#x is Input<br/>#n is Factorial Number<br/>multifactorial=function(x,n){<br/>  if(x&lt;=n+1){<br/>    return(x)<br/>  }else{<br/>    return(x*multifactorial(x-n,n))<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 18, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define (multi-factorial-fn m)<br/>  (lambda (n)<br/>    (let inner ((acc 1) (n n))<br/>      (if (&lt;= n m) (* acc n)<br/>          (inner (* acc n) (- n m))))))<br/>\u00a0<br/>;; using (multi-factorial-fn m) as a first-class function<br/>(for*/list ([m (in-range 1 (add1 5))] [mf-m (in-value (multi-factorial-fn m))])<br/>  (for/list ([n (in-range 1 (add1 10))])<br/>  (mf-m n)))<br/>\u00a0<br/>(define (multi-factorial m n) ((multi-factorial-fn m) n))<br/>\u00a0<br/>(for/list ([m (in-range 1 (add1 5))])<br/>  (for/list ([n (in-range 1 (add1 10))])<br/>  (multi-factorial m n)))</pre>"}, {"lang": "REXX", "loc": 18, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program calculates and displays K-fact (multifactorial) of non-negative integers.*/</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">1000</span>                              <span class=\"coMULTI\">/*get ka-razy with the decimal digits. */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> num deg <span class=\"sy0\">.</span>                              <span class=\"coMULTI\">/*get optional arguments from the C.L. */</span><br/><span class=\"kw1\">if</span> num==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> num==<span class=\"st0\">\",\"</span>   <span class=\"kw3\">then</span> num=<span class=\"nu0\">15</span>              <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> deg==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> deg==<span class=\"st0\">\",\"</span>   <span class=\"kw3\">then</span> deg=<span class=\"nu0\">10</span>              <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'\u2550\u2550\u2550showing multiple factorials (1 \u2500\u2500\u25ba'</span>     deg<span class=\"st0\">\")  for numbers  1 \u2500\u2500\u25ba\"</span>      num<br/><span class=\"kw1\">say</span><br/>     <span class=\"kw1\">do</span> d=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> deg                             <span class=\"coMULTI\">/*the factorializing (degree)  of \u00a0!'s.*/</span><br/>     _=                                          <span class=\"coMULTI\">/*the list of factorials  (so far).    */</span><br/>            <span class=\"kw1\">do</span> f=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> num                      <span class=\"coMULTI\">/* \u25c4\u2500\u2500 perform a\u00a0! from  1 \u2500\u2500\u2500\u25ba number.*/</span><br/>            _=_  Kfact<span class=\"br0\">(</span>f, d<span class=\"br0\">)</span>                     <span class=\"coMULTI\">/*build a  list  of factorial products.*/</span><br/>            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*f*/</span>                          <span class=\"coMULTI\">/* [\u2191]    D   can default to  unity.   */</span><br/>\u00a0<br/>     <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"st0\">'n'</span><span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">\"!\"</span>, d<span class=\"br0\">)</span>, <span class=\"nu0\">1</span>+deg<span class=\"br0\">)</span>    <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"st0\">'['</span>d<span class=\"st0\">\"]\"</span>, <span class=\"nu0\">2</span>+<span class=\"kw6\">length</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"st0\">':'</span>     _<br/>     <span class=\"kw3\">end</span>          <span class=\"coMULTI\">/*d*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>Kfact: <span class=\"kw1\">procedure</span>;\u00a0!=<span class=\"nu0\">1</span>;   <span class=\"kw1\">do</span> j=<span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">2</span>  <span class=\"kw2\">by</span> -<span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>; \u00a0!=!<span class=\"sy0\">*</span>j;  <span class=\"kw3\">end</span>;   <span class=\"kw1\">return</span>\u00a0!</pre>"}, {"lang": "Ring", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>see \"Degree  \" +  \"|\" + \"           Multifactorials 1 to 10\" + nl<br/>see copy(\"-\", 52) + nl<br/>for d = 1 to 5 <br/>    see \"\" + d + \"       \" + \"| \"<br/>    for n = 1 to 10 <br/>        see \"\" + multiFact(n, d) + \" \"<br/>    next<br/>    see nl<br/>next<br/>\u00a0<br/>func multiFact n, degree<br/>     fact = 1<br/>     for i = n to 2 step -degree <br/>         fact = fact * i<br/>     next<br/>     return fact <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 7, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"kw1\">def</span> multifact<span class=\"br0\">(</span>n, d<span class=\"br0\">)</span><br/>  n.<span class=\"me1\">step</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span>d<span class=\"br0\">)</span>.<span class=\"me1\">inject</span><span class=\"br0\">(</span>\u00a0:<span class=\"sy0\">*</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>d<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> <span class=\"st0\">\"Degree #{d}: #{(1..10).map{|n| multifact(n, d)}.join \"</span>\\t<span class=\"st0\">\"}\"</span><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 8, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> multiFact<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> BigInt, degree <span class=\"sy0\">:</span> BigInt<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n to <span class=\"nu0\">1</span> by -degree<span class=\"br0\">)</span>.<span class=\"me1\">product</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">{</span><br/>  degree <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> to <span class=\"nu0\">5</span><br/>  str <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> to <span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>n <span class=\"sy0\">=&gt;</span> multiFact<span class=\"br0\">(</span>n, degree<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span> println<span class=\"br0\">(</span>s<span class=\"st0\">\"Degree $degree: $str\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 21, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>scheme base<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">write</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>srfi <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>multi<span class=\"sy0\">-</span>factorial n m<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>fold <span class=\"sy0\">*</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>iota <span class=\"br0\">(</span><span class=\"kw1\">ceiling</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> n m<span class=\"br0\">)</span><span class=\"br0\">)</span> n <span class=\"br0\">(</span><span class=\"sy0\">-</span> m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">for-each</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>degree<span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"st0\">\"degree \"</span><br/>                            <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> degree<span class=\"br0\">)</span><br/>                            <span class=\"st0\">\": \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">for-each</span> <br/>      <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>num<span class=\"br0\">)</span> <br/>        <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span>multi<span class=\"sy0\">-</span>factorial num degree<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>iota <span class=\"nu0\">10</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>iota <span class=\"nu0\">5</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 25, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func integer: multiFact (in var integer: num, in integer: degree) is func<br/>  result<br/>    var integer: multiFact is 1;<br/>  begin<br/>    while num &gt; 1 do<br/>      multiFact *:= num;<br/>      num -:= degree;<br/>    end while;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: degree is 0;<br/>    var integer: num is 0;<br/>  begin<br/>    for degree range 1 to 5 do<br/>      write(\"Degree \" &lt;&amp; degree &lt;&amp; \": \");<br/>      for num range 1 to 10 do<br/>        write(multiFact(num, degree) &lt;&amp; \" \");<br/>      end for;<br/>      writeln;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 7, "block": "<pre class=\"ruby highlighted_source\">func mfact<span class=\"br0\">(</span>s, n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span>\u00a0? <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> mfact<span class=\"br0\">(</span>s, n<span class=\"sy0\">-</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span> <span class=\"sy0\">|</span>s<span class=\"sy0\">|</span><br/>    say <span class=\"st0\">\"step=#{s}: #{{|n| mfact(s, n)}.map(1..10).join(' ')}\"</span><br/><span class=\"br0\">}</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">10</span></pre>"}, {"lang": "Tcl", "loc": 11, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> mfact <span class=\"br0\">{</span>n m<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> mm <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>-<span class=\"re0\">$m</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> r <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> n <span class=\"re0\">$mm</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> r <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$r</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$r</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> n <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"re0\">$n</span>:<span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"br0\">[</span>lmap m <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>mfact <span class=\"re0\">$m</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span><span class=\"br0\">]</span> ,<span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "uBasic/4tH", "loc": 19, "block": "<pre class=\"text highlighted_source\">print \"Degree  |           Multifactorials 1 to 10\"<br/>for x = 1 to 53\u00a0: print \"-\";\u00a0: next\u00a0: print<br/>for d = 1 to 5<br/>  print d;\"       \";\"| \";<br/>  for n = 1 to 10<br/>    print FUNC(_multiFact(n, d));\" \";<br/>  next<br/>  print<br/>next<br/>\u00a0<br/>end<br/>\u00a0<br/>_multiFact param (2)<br/>  local (2)<br/>  <a class=\"__cf_email__\" data-cfemail=\"3c5f7c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 1<br/>  for <a class=\"__cf_email__\" data-cfemail=\"254165\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"9bfadb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> to 2 step <a class=\"__cf_email__\" data-cfemail=\"6c410e2c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    <a class=\"__cf_email__\" data-cfemail=\"b3d0f3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"3a597a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * <a class=\"__cf_email__\" data-cfemail=\"781c38\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>  next<br/>return (<a class=\"__cf_email__\" data-cfemail=\"503310\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>)</pre>"}, {"lang": "VBScript", "loc": 27, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> multifactorial(n,d)<br/>\t<span class=\"kw3\">If</span> n = 0 <span class=\"kw3\">Then</span><br/>\t\tmultifactorial = 1<br/>\t<span class=\"kw3\">Else</span><br/>\t\t<span class=\"kw3\">For</span> i = n <span class=\"kw3\">To</span> 1 <span class=\"kw3\">Step</span> -d<br/>\t\t\t<span class=\"kw3\">If</span> i = n <span class=\"kw3\">Then</span><br/>\t\t\t\tmultifactorial = n<br/>\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\tmultifactorial = multifactorial * i<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> 5<br/>\tWScript.StdOut.Write <span class=\"st0\">\"Degree \"</span> &amp; j &amp; <span class=\"st0\">\": \"</span><br/>\t<span class=\"kw3\">For</span> k = 1 <span class=\"kw3\">To</span> 10<br/>\t\t<span class=\"kw3\">If</span> k = 10 <span class=\"kw3\">Then</span><br/>\t\t\tWScript.StdOut.Write multifactorial(k,j)<br/>\t\t<span class=\"kw3\">Else</span><br/>\t\t\tWScript.StdOut.Write multifactorial(k,j) &amp; <span class=\"st0\">\" \"</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/>\tWScript.StdOut.WriteLine<br/><span class=\"kw3\">Next</span><br/>\u00a0</pre>"}, {"lang": "Wortel", "loc": 10, "block": "<pre class=\"text highlighted_source\">@let {<br/>  facd  &amp;[d n]?{&lt;= n d n @<a class=\"__cf_email__\" data-cfemail=\"ef9f9d808baf9d8e81888a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[n 1 @-d]}<br/> \u00a0; tacit implementation<br/>  facdt ^(!?(/^&gt; .1 ^(@prod @range ~1jdtShj &amp;^!(@- @id))) @,)<br/> \u00a0; recursive<br/>  facdrec &amp;[n d]\u00a0?{&lt;= n d n *n\u00a0!!facdrec -n d d}<br/> \u00a0; output<br/>  l @to 10<br/>  <a class=\"__cf_email__\" data-cfemail=\"106e5075717378\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> @to 5 &amp;n\u00a0!console.log \"Degree {n}: {@join @s\u00a0!*\\facd n l}\"<br/>}</pre>"}, {"lang": "XPL0", "loc": 18, "block": "<pre class=\"text highlighted_source\">code ChOut=8, CrLf=9, IntOut=11;<br/>\u00a0<br/>func MultiFac(N, D);    \\Return multifactorial of N in degree D<br/>int  N, D;<br/>int  F;<br/>[F:= 1;<br/>repeat  F:= F*N;<br/>        N:= N-D;<br/>until   N &lt;= 1;<br/>return F;<br/>];<br/>\u00a0<br/>int I, J;               \\generate table of multifactorials<br/>for J:= 1 to 5 do<br/>    [for I:= 1 to 10 do<br/>        [IntOut(0, MultiFac(I, J));  ChOut(0, 9\\tab\\)];<br/>    CrLf(0);<br/>    ]</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">fcn mfact(n,m){ [n..1,-m].reduce('*,1) }<br/>foreach m in ([1..5]){ println(\"%d:\u00a0%s\".fmt(m,[1..10].apply(mfact.fp1(m)))) }</pre>"}]}