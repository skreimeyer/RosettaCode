{"task": "Increment_a_numerical_string", "blocks": [{"lang": "ABAP", "loc": 12, "block": "<pre class=\"abap highlighted_source\"><a href=\"http://help.sap.com/abapdocu/en/ABAPREPORT.htm\"><span class=\"kw3\">report</span></a> zz_incstring<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPPERFORM.htm\"><span class=\"kw3\">perform</span></a> test <span class=\"kw4\">using</span><span class=\"sy0\">:</span> <span class=\"st0\">'0'</span><span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"sy0\">,</span> <span class=\"st0\">'-1'</span><span class=\"sy0\">,</span> <span class=\"st0\">'10000000'</span><span class=\"sy0\">,</span> <span class=\"st0\">'-10000000'</span><span class=\"sy0\">.</span><br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPFORM.htm\"><span class=\"kw3\">form</span></a> test <span class=\"kw4\">using</span> iv_string <span class=\"kw4\">type</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">data</span></a><span class=\"sy0\">:</span> lv_int  <span class=\"kw4\">type</span> i<span class=\"sy0\">,</span><br/>        lv_string <span class=\"kw4\">type</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><br/>  lv_int <span class=\"sy1\">=</span> iv_string <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>  lv_string <span class=\"sy1\">=</span> lv_int<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPCONCATENATE.htm\"><span class=\"kw3\">concatenate</span></a> <span class=\"st0\">'\"'</span> iv_string <span class=\"st0\">'\" + 1 = \"'</span> lv_string <span class=\"st0\">'\"'</span> <span class=\"kw4\">into</span> lv_string<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">write</span></a> <span class=\"sy0\">/</span> lv_string<span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPENDFORM.htm\"><span class=\"kw3\">endform</span></a><span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "ActionScript", "loc": 4, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">function</span> incrementString<span class=\"br0\">(</span>str:<span class=\"kw3\">String</span><span class=\"br0\">)</span>:<span class=\"kw3\">String</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw3\">String</span><span class=\"br0\">(</span><span class=\"kw3\">Number</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 2, "block": "<pre class=\"ada highlighted_source\">S\u00a0: String\u00a0:= <span class=\"st0\">\"12345\"</span>;<br/>S\u00a0:= Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Fixed</span>.<span class=\"me1\">Trim</span><span class=\"br0\">(</span>Source =&gt; Integer'Image<span class=\"br0\">(</span>Integer'Value<span class=\"br0\">(</span>S<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span>, Side =&gt; Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Both</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Aime", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>o_text(itoa(atoi(\"2047\") + 1));<br/>o_byte('\\n');<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 5, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw3\">STRING</span> s <span class=\"sy1\">:=</span> <span class=\"st0\">\"12345\"</span><span class=\"sy1\">;</span> <span class=\"kw6\">FILE</span> f<span class=\"sy1\">;</span> <span class=\"kw3\">INT</span> i<span class=\"sy1\">;</span><br/><span class=\"kw22\">associate</span><span class=\"br0\">(</span>f<span class=\"sy1\">,</span> s<span class=\"br0\">)</span><span class=\"sy1\">;</span> get<span class=\"br0\">(</span>f<span class=\"sy1\">,</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span> <br/>i<span class=\"sy1\">+:=</span>1<span class=\"sy1\">;</span> <br/>s<span class=\"sy1\">:=</span><span class=\"st0\">\"\"</span><span class=\"sy1\">;</span> reset<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy1\">;</span> put<span class=\"br0\">(</span>f<span class=\"sy1\">,</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span>s<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Apex", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>string count = '12345';<br/>count = String.valueOf(integer.valueOf(count)+1);<br/>system.debug('Incremental Value\u00a0: '+count);<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 2, "block": "<pre class=\"autohotkey highlighted_source\">str <span class=\"sy0\">=</span> <span class=\"nu0\">12345</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% str <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span></pre>"}, {"lang": "AutoIt", "loc": 3, "block": "<pre class=\"autoit highlighted_source\"><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Global</span></a> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"12345\"</span><br/><span class=\"re0\">$x</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">)</span></pre>"}, {"lang": "AWK", "loc": 2, "block": "<pre class=\"awk highlighted_source\">$ awk '<span class=\"kw2\">BEGIN</span><span class=\"br0\">{</span>s=<span class=\"st0\">\"42\"</span>; s<span class=\"sy3\">++</span>; <span class=\"kw5\">print</span> s<span class=\"st0\">\"(\"</span><span class=\"kw4\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"st0\">\")\"</span> <span class=\"br0\">}</span>'<br/><span class=\"nu0\">43</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span></pre>"}, {"lang": "BASIC", "loc": 2, "block": "<pre class=\"qbasic highlighted_source\">s$ <span class=\"sy0\">=</span> <span class=\"st0\">\"12345\"</span><br/>s$ <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckstr%24.shtml\"><span class=\"kw3\">STR$</span></a><span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckval.shtml\"><span class=\"kw3\">VAL</span></a><span class=\"br0\">(</span>s$<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span></pre>"}, {"lang": "Batch File", "loc": 2, "block": "<pre class=\"dos highlighted_source\"><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> s=12345<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a s+=1</pre>"}, {"lang": "BBC BASIC", "loc": 18, "block": "<pre class=\"text highlighted_source\">      num$ = \"567\"<br/>      REPEAT<br/>        PRINT num$<br/>        PROCinc$(num$)<br/>      UNTIL FALSE<br/>      END<br/>\u00a0<br/>      DEF PROCinc$(RETURN n$)<br/>      LOCAL A$, I%<br/>      I% = LEN(n$)<br/>      REPEAT<br/>        A$ = CHR$(ASCMID$(n$,I%) + 1)<br/>        IF A$=\":\" A$ = \"0\"<br/>        MID$(n$,I%,1) = A$<br/>        I% -= 1<br/>      UNTIL A$&lt;&gt;\"0\" OR I%=0<br/>      IF A$=\"0\" n$ = \"1\" + n$<br/>      ENDPROC</pre>"}, {"lang": "Boo", "loc": 2, "block": "<pre class=\"boo highlighted_source\">s = <span class=\"st0\">\"1234\"</span><br/>s = <span class=\"br0\">(</span><span class=\"kw13\">int</span>.<span class=\"me0\">Parse</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me0\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Bracmat", "loc": 6, "block": "<pre class=\"text highlighted_source\">(n=35664871829866234762187538073934873121878/6172839450617283945)<br/>&amp;!n+1:?n<br/>&amp;out$!n<br/>\u00a0<br/>   35664871829866234762193710913385490405823/6172839450617283945<br/>\u00a0</pre>"}, {"lang": "Brat", "loc": 2, "block": "<pre class=\"text highlighted_source\">#Convert to integer, increment, then back to string<br/>p (\"100\".to_i + 1).to_s  #Prints 101</pre>"}, {"lang": "Burlesque", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>ri?ish<br/>\u00a0</pre>"}, {"lang": "C", "loc": 70, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/*  Constraints: input is in the form of (\\+|-)?[0-9]+<br/> *  and without leading zero (0 itself can be as \"0\" or \"+0\", but not \"-0\");<br/> *  input pointer is realloc'able and may change;<br/> *  if input has leading + sign, return may or may not keep it.<br/> *  The constranits conform to sprintf(\"%+d\") and this function's own output.<br/> */</span><br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span> incr<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> begin<span class=\"sy0\">,</span> tail<span class=\"sy0\">,</span> len<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> neg <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>s <span class=\"sy0\">==</span> <span class=\"st0\">'-'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> tgt <span class=\"sy0\">=</span> neg <span class=\"sy0\">?</span> <span class=\"st0\">'0'</span> <span class=\"sy0\">:</span> <span class=\"st0\">'9'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* special case: \"-1\" */</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">\"-1\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ts<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span><span class=\"sy0\">,</span> s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span> s<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tlen <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tbegin <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>s <span class=\"sy0\">==</span> <span class=\"st0\">'-'</span> <span class=\"sy0\">||</span> <span class=\"sy0\">*</span>s <span class=\"sy0\">==</span> <span class=\"st0\">'+'</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* find out how many digits need to be changed */</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>tail <span class=\"sy0\">=</span> len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> tail <span class=\"sy0\">&gt;=</span> begin <span class=\"sy0\">&amp;&amp;</span> s<span class=\"br0\">[</span>tail<span class=\"br0\">]</span> <span class=\"sy0\">==</span> tgt<span class=\"sy0\">;</span> tail<span class=\"sy0\">--</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>tail <span class=\"sy0\">&lt;</span> begin <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>neg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"coMULTI\">/* special case: all 9s, string will grow */</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>begin<span class=\"br0\">)</span> s <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> len <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ts<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'1'</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> len <span class=\"sy0\">-</span> begin<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span><span class=\"sy0\">;</span><br/>\t\ts<span class=\"br0\">[</span>len <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tail <span class=\"sy0\">==</span> begin <span class=\"sy0\">&amp;&amp;</span> neg <span class=\"sy0\">&amp;&amp;</span> s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'1'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"coMULTI\">/* special case: -1000..., so string will shrink */</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len <span class=\"sy0\">-</span> begin<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'9'</span><span class=\"sy0\">;</span><br/>\t\ts<span class=\"br0\">[</span>len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <span class=\"coMULTI\">/* normal case; change tail to all 0 or 9, change prev digit by 1*/</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;</span> tail<span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>\t\t\ts<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> neg <span class=\"sy0\">?</span> <span class=\"st0\">'9'</span> <span class=\"sy0\">:</span> <span class=\"st0\">'0'</span><span class=\"sy0\">;</span><br/>\t\ts<span class=\"br0\">[</span>tail<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> neg <span class=\"sy0\">?</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> s<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> string_test<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>ret <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>ret<span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"text:\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> ret<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"  -&gt;:\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> ret <span class=\"sy0\">=</span> incr<span class=\"br0\">(</span>ret<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>ret<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tstring_test<span class=\"br0\">(</span><span class=\"st0\">\"+0\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tstring_test<span class=\"br0\">(</span><span class=\"st0\">\"-1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tstring_test<span class=\"br0\">(</span><span class=\"st0\">\"-41\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tstring_test<span class=\"br0\">(</span><span class=\"st0\">\"+41\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tstring_test<span class=\"br0\">(</span><span class=\"st0\">\"999\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tstring_test<span class=\"br0\">(</span><span class=\"st0\">\"+999\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tstring_test<span class=\"br0\">(</span><span class=\"st0\">\"109999999999999999999999999999999999999999\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tstring_test<span class=\"br0\">(</span><span class=\"st0\">\"-100000000000000000000000000000000000000000000\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 16, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co1\">// standard C++ string stream operators</span><br/><span class=\"co2\">#include &lt;cstdlib&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/>\u00a0<br/><span class=\"co1\">// inside a function or method...</span><br/>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> s <span class=\"sy1\">=</span> <span class=\"st0\">\"12345\"</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> i<span class=\"sy4\">;</span><br/>std<span class=\"sy4\">::</span><span class=\"me2\">istringstream</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> i<span class=\"sy4\">;</span><br/>i<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//or:</span><br/><span class=\"co1\">//int i = std::atoi(s.c_str()) + 1;</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">ostringstream</span> oss<span class=\"sy4\">;</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>oss <span class=\"sy1\">&lt;&lt;</span> i<span class=\"br0\">)</span> s <span class=\"sy1\">=</span> oss.<span class=\"me1\">str</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre>"}, {"lang": "C#", "loc": 2, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw4\">string</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"12345\"</span><span class=\"sy0\">;</span><br/>s <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">Parse</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Ceylon", "loc": 18, "block": "<pre class=\"text highlighted_source\">shared void run() {<br/>\u00a0<br/>\t\"Increments a numeric string by 1. Returns a float or integer depending on the string. <br/>\t Returns null if the string isn't a number.\"<br/>\tfunction inc(String string) =&gt; <br/>\t\t\tif(exists integer = parseInteger(string)) then integer + 1<br/>\t\t\telse if(exists float = parseFloat(string)) then float + 1.0<br/>\t\t\telse null;<br/>\u00a0<br/>\tvalue a = \"1\";<br/>\tprint(a);<br/>\tvalue b = inc(a);<br/>\tprint(b);<br/>\tvalue c = \"1.0\";<br/>\tprint(c);<br/>\tvalue d = inc(c);<br/>\tprint(d);<br/>}</pre>"}, {"lang": "Clojure", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>str <span class=\"br0\">(</span>inc <span class=\"br0\">(</span><span class=\"kw1\">Integer</span>/parseInt <span class=\"st0\">\"1234\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CMake", "loc": 3, "block": "<pre class=\"cmake highlighted_source\"><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span>string <span class=\"st0\">\"1599\"</span><span class=\"sy0\">)</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:math\"><span class=\"kw1\">math</span></a><span class=\"sy0\">(</span>EXPR string <span class=\"st0\">\"<span class=\"es1\">${string}</span> + 1\"</span><span class=\"sy0\">)</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:message\"><span class=\"kw1\">message</span></a><span class=\"sy0\">(</span><span class=\"kw3\">STATUS</span> <span class=\"st0\">\"<span class=\"es1\">${string}</span>\"</span><span class=\"sy0\">)</span></pre>"}, {"lang": "COBOL", "loc": 14, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> increment-num-str<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  str                    <span class=\"kw3\">PIC</span> X<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw3\">VALUE</span> <span class=\"st0\">\"12345\"</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  num                    <span class=\"kw3\">REDEFINES</span> str <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">DISPLAY</span> str<br/>           <span class=\"kw2\">ADD</span> <span class=\"nu0\">1</span> <span class=\"kw2\">TO</span> num<br/>           <span class=\"kw2\">DISPLAY</span> str<br/>\u00a0<br/>           GOBACK<br/>           <span class=\"sy0\">.</span></pre>"}, {"lang": "Common Lisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>princ-to-string <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span><span class=\"kw1\">parse-integer</span> <span class=\"st0\">\"1234\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Component Pascal", "loc": 26, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> Operations;<br/><span class=\"kw1\">IMPORT</span> StdLog<span class=\"sy0\">,</span>Args<span class=\"sy0\">,</span>Strings;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> IncString<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">VAR</span><br/>\tresp<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>\tdone<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tStrings.<span class=\"me1\">StringToLInt</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>resp<span class=\"sy0\">,</span>done<span class=\"br0\">)</span>;<br/>\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>resp<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">RETURN</span> resp<br/><span class=\"kw1\">END</span> IncString;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> DoIncString<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\tp<span class=\"sy0\">:</span> Args.<span class=\"me1\">Params</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tArgs.<span class=\"me1\">Get</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">IF</span> p.<span class=\"me1\">argc</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>\t\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span>p.<span class=\"me1\">args</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" + 1= \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>IncString<span class=\"br0\">(</span>p.<span class=\"me1\">args</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/>\t<span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> DoIncString;<br/>\u00a0<br/><span class=\"kw1\">END</span> Operations.<br/>\u00a0</pre>"}, {"lang": "D", "loc": 6, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"12349\"</span>.<span class=\"me1\">succ</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>s <span class=\"sy0\">==</span> <span class=\"st0\">\"12350\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 13, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> IncrementNumericalString<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> SysUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  STRING_VALUE <span class=\"sy3\">=</span> <span class=\"st0\">'12345'</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span><span class=\"kw3\">Format</span><span class=\"br0\">(</span><span class=\"st0\">'\"%s\" + 1 =\u00a0%d'</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>STRING_VALUE<span class=\"sy1\">,</span> <span class=\"kw3\">StrToInt</span><span class=\"br0\">(</span>STRING_VALUE<span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  Readln<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 1, "block": "<pre class=\"text highlighted_source\">\u00a0!. to-str ++ to-num \"100\"</pre>"}, {"lang": "DWScript", "loc": 3, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">var</span> value <span class=\"sy1\">:</span> <span class=\"kw4\">String</span> <span class=\"sy3\">=</span> \"<span class=\"nu0\">1234</span>\"<span class=\"sy1\">;</span><br/>value <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">IntToStr</span><span class=\"br0\">(</span><span class=\"kw3\">StrToInt</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>PrintLn<span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "E", "loc": 1, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/__makeInt\"><span class=\"kw6\">__makeInt</span></a><span class=\"br0\">(</span><span class=\"st0\">\"1234\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span></pre>"}, {"lang": "EchoLisp", "loc": 4, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span>number <span class=\"st0\">\"665\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"st0\">\"666\"</span><br/>\u00a0</pre>"}, {"lang": "Eero", "loc": 9, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  i <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"st0\">'123'</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  s <span class=\"sy0\">:=</span> @<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.description<br/>\u00a0<br/>  Log<span class=\"br0\">(</span> <span class=\"st0\">'%@'</span>, s <span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span></pre>"}, {"lang": "EGL", "loc": 2, "block": "<pre class=\"text highlighted_source\">s string = \"12345\";<br/>s = 1 + s;  // Note: s + 1 is a string concatenation.</pre>"}, {"lang": "Eiffel", "loc": 24, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span><br/>\u00a0<br/>\tmake<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>increment_numerical_string <span class=\"br0\">(</span><span class=\"st0\">\"7\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>increment_numerical_string <span class=\"br0\">(</span><span class=\"st0\">\"99\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tincrement_numerical_string <span class=\"br0\">(</span>s<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><br/>\t\t\t<span class=\"co1\">-- String 's' incremented by one.</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> s.<span class=\"me1\">to_integer</span>.<span class=\"me1\">plus</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">out</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 9, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>program =<br/>[<br/>    literal s\u00a0:= \"12345\".<br/>    s\u00a0:= s toInt  + 1.<br/>\u00a0<br/>    console printLine(s).<br/>].</pre>"}, {"lang": "Elixir", "loc": 6, "block": "<pre class=\"text highlighted_source\">increment1 = fn n -&gt; to_string(String.to_integer(n) + 1) end<br/># Or piped<br/>increment2 = fn n -&gt; n |&gt; String.to_integer |&gt; +1 |&gt; to_string end<br/>\u00a0<br/>increment1.(\"1\")<br/>increment2.(\"100\")</pre>"}, {"lang": "Emacs Lisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span>string-to-number <span class=\"st0\">\"12345\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre class=\"erlang highlighted_source\"><span class=\"kw3\">integer_to_list</span><span class=\"br0\">(</span><span class=\"kw3\">list_to_integer</span><span class=\"br0\">(</span><span class=\"st0\">\"1336\"</span><span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>   ....................<br/>    s$=\"12345\"<br/>    s$=STR$(VAL(s$)+1)<br/>   ....................<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 12, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">include</span> get.e<br/>\u00a0<br/><span class=\"kw1\">function</span> val<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">sequence</span> x<br/>    x <span class=\"sy1\">=</span> value<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> x<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw2\">sequence</span> s<br/>\u00a0<br/>s <span class=\"sy1\">=</span> <span class=\"st0\">\"12345\"</span><br/>s <span class=\"sy1\">=</span> <span class=\"kw2\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span><span class=\"sy2\">,</span><span class=\"br0\">{</span>val<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"1234\" string&gt;number 1 + number&gt;string</pre>"}, {"lang": "Fantom", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fansh&gt; a\u00a0:= \"123\"<br/>123<br/>fansh&gt; (a.toInt + 1).toStr<br/>124<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 6, "block": "<pre class=\"text highlighted_source\">: &gt;string ( d -- addr n )<br/>  dup &gt;r dabs &lt;# #s r&gt; sign #&gt;\u00a0;<br/>\u00a0<br/>: inc-string ( addr -- )<br/>  dup count number? not abort\" invalid number\"<br/>  1 s&gt;d d+ &gt;string rot place\u00a0;</pre>"}, {"lang": "Fortran", "loc": 11, "block": "<pre class=\"fortran highlighted_source\"><span class=\"co1\">CHARACTER(10)\u00a0:: intstr = \"12345\", realstr = \"1234.5\"</span><br/><span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/><span class=\"kw3\">REAL</span> <span class=\"sy0\">::</span> <span class=\"me2\">r</span><br/>\u00a0<br/>READ<span class=\"br0\">(</span>intstr, <span class=\"st0\">\"(I10)\"</span><span class=\"br0\">)</span> i        <span class=\"co1\">! Read numeric string into integer i</span><br/>i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>                      <span class=\"co1\">! increment i</span><br/>WRITE<span class=\"br0\">(</span>intstr, <span class=\"st0\">\"(I10)\"</span><span class=\"br0\">)</span> i       <span class=\"co1\">! Write i back to string</span><br/>\u00a0<br/>READ<span class=\"br0\">(</span>realstr, <span class=\"st0\">\"(F10.1)\"</span><span class=\"br0\">)</span> r \t<br/>r <span class=\"sy0\">=</span> r <span class=\"sy0\">+</span> <span class=\"nu0\">1.0</span>\t\t\t\t<br/>WRITE<span class=\"br0\">(</span>realstr, <span class=\"st0\">\"(F10.1)\"</span><span class=\"br0\">)</span> r</pre>"}, {"lang": "FreeBASIC", "loc": 15, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> Increment <span class=\"br0\">(</span>num <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>  <span class=\"kw1\">Dim</span> d <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> = <span class=\"kw1\">Val</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>d + <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> num<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"br0\">{</span><span class=\"st0\">\"1\"</span>, <span class=\"st0\">\"5\"</span>, <span class=\"st0\">\"81\"</span>, <span class=\"st0\">\"123.45\"</span>, <span class=\"st0\">\"777.77\"</span>, <span class=\"st0\">\"1000\"</span><span class=\"br0\">}</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">5</span><br/>  <span class=\"kw1\">Print</span> num<span class=\"br0\">(</span>i<span class=\"br0\">)</span>; <span class=\"st0\">\" + 1\"</span>, <span class=\"st0\">\" = \"</span>; Increment<span class=\"br0\">(</span>num<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to exit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "F#", "loc": 1, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> next <span class=\"sy0\">=</span> <span class=\"kw4\">string</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span> <span class=\"st0\">\"1234\"</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Frink", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>a = input[\"Enter number: \"]<br/>toString[eval[a] + 1]<br/>\u00a0</pre>"}, {"lang": "FutureBasic", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>dim as Str255 numStr<br/>dim as long   numeric, i<br/>\u00a0<br/>numStr = \"12345\"<br/>numeric = val(numStr)<br/>numeric++<br/>numStr = str$(numeric)<br/>print numStr<br/>\u00a0<br/>print<br/>\u00a0<br/>for i = 0 to 10<br/>   numeric++<br/>   numStr = str$( numeric )<br/>   print numStr<br/>next<br/>\u00a0</pre>"}, {"lang": "Gambas", "loc": 7, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> vInput <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/variant\"><span class=\"kw4\">Variant</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\"12345\"</span> <br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/inc\"><span class=\"kw1\">Inc</span></a> vInput<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> vInput<br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "GAP", "loc": 30, "block": "<pre class=\"text highlighted_source\"># Using built-in functions<br/>Incr\u00a0:= s -&gt; String(Int(s) + 1);<br/>\u00a0<br/># Implementing addition<br/># (but here 9...9 + 1 = 0...0 since the string length is fixed)<br/>Increment\u00a0:= function(s)<br/>  local c, n, carry, digits;<br/>  digits\u00a0:= \"0123456789\";<br/>  n\u00a0:= Length(s);<br/>  carry\u00a0:= true;<br/>  while n &gt; 0 and carry do<br/>    c\u00a0:= Position(digits, s[n]) - 1; <br/>    if carry then<br/>      c\u00a0:= c + 1;<br/>    fi;<br/>    if c &gt; 9 then<br/>      carry\u00a0:= true;<br/>      c\u00a0:= c - 10;<br/>    else<br/>      carry\u00a0:= false;<br/>    fi;<br/>    s[n]\u00a0:= digits[c + 1];<br/>    n\u00a0:= n - 1;<br/>  od;<br/>end;<br/>\u00a0<br/>s\u00a0:= \"2399\";<br/>Increment(s);<br/>s;<br/># \"2400\"</pre>"}, {"lang": "Go", "loc": 7, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/><span class=\"kw1\">import</span> <span class=\"st0\">\"strconv\"</span><br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>  <span class=\"nu2\">i</span><span class=\"sy1\">,</span> _ <span class=\"sy2\">:=</span> strconv<span class=\"sy3\">.</span>Atoi<span class=\"sy1\">(</span><span class=\"st0\">\"1234\"</span><span class=\"sy1\">)</span><br/>  fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>strconv<span class=\"sy3\">.</span>Itoa<span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Golfscript", "loc": 1, "block": "<pre class=\"text highlighted_source\">~)`</pre>"}, {"lang": "Groovy", "loc": 2, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"23455\"</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=BigDecimal&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigDecimal</span></a><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"23455.78\"</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=BigDecimal&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigDecimal</span></a><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 1, "block": "<pre class=\"haskell highlighted_source\"><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a><span class=\"br0\">)</span> <span class=\"st0\">\"1234\"</span></pre>"}, {"lang": "HicEst", "loc": 4, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">CHARACTER</span> string <span class=\"sy1\">=</span> <span class=\"st0\">\"123     -4567.89\"</span><br/>\u00a0<br/>   <span class=\"kw1\">READ</span><span class=\"br0\">(</span> Text<span class=\"sy1\">=</span>string<span class=\"br0\">)</span> a<span class=\"sy1\">,</span>   b<br/>   <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>string<span class=\"br0\">)</span> a<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> b<span class=\"sy1\">+</span><span class=\"nu0\">1</span> <span class=\"co1\">! 124 -4566.89</span></pre>"}, {"lang": "HolyC", "loc": 9, "block": "<pre class=\"text highlighted_source\">I8 *s;<br/>\u00a0<br/>s = \"10\";<br/>s = Str2I64(s) + 1;<br/>Print(\"%d\\n\", s);<br/>\u00a0<br/>s = \"-10\";<br/>s = Str2I64(s) + 1;<br/>Print(\"%d\\n\", s);</pre>"}, {"lang": "Hy", "loc": 1, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> <span class=\"br0\">(</span>int <span class=\"st0\">\"123\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "HyperTalk", "loc": 5, "block": "<pre class=\"text highlighted_source\">put 0 into someVar<br/>add 1 to someVar<br/>-- without \"into [field reference]\" the value will appear<br/>-- in the message box<br/>put someVar -- into cd fld 1</pre>"}, {"lang": "i", "loc": 5, "block": "<pre class=\"text highlighted_source\">software {<br/>\tstring = \"1\"<br/>\tstring += 1<br/>\tprint(string)<br/>}</pre>"}, {"lang": "Icon and Unicon", "loc": 2, "block": "<pre class=\"icon highlighted_source\">s <span class=\"sy1\">:=</span> <span class=\"st0\">\"123\"</span>  <span class=\"co1\"># s is a string</span><br/>s <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span>     <span class=\"co1\"># s is now an integer</span></pre>"}, {"lang": "IDL", "loc": 3, "block": "<pre class=\"idl highlighted_source\">str <span class=\"sy0\">=</span> <span class=\"st0\">'1234'</span><br/>print, <span class=\"kw4\">string</span><span class=\"br0\">(</span>fix<span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"sy0\">;==</span>&gt;   <span class=\"nu0\">1235</span></pre>"}, {"lang": "Inform 7", "loc": 15, "block": "<pre class=\"text highlighted_source\">Home is a room.<br/>\u00a0<br/>To decide which indexed text is incremented (T - indexed text):<br/>\tlet temp be indexed text;<br/>\tlet temp be the player's command;<br/>\tchange the text of the player's command to T;<br/>\tlet N be a number;<br/>\tif the player's command matches \"[number]\":<br/>\t\tlet N be the number understood;<br/>\tchange the text of the player's command to temp;<br/>\tdecide on \"[N + 1]\".<br/>\u00a0<br/>When play begins:<br/>\tsay incremented \"12345\";<br/>\tend the story.</pre>"}, {"lang": "Io", "loc": 1, "block": "<pre class=\"text highlighted_source\">str\u00a0:= (\"123\" asNumber + 1) asString</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">incrTextNum=: &gt;:&amp;.\".</pre>"}, {"lang": "Java", "loc": 2, "block": "<pre class=\"java highlighted_source\"><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"12345\"</span><span class=\"sy0\">;</span><br/>s <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "JavaScript", "loc": 4, "block": "<pre class=\"javascript highlighted_source\">let s <span class=\"sy0\">=</span> <span class=\"st0\">'9999'</span><span class=\"sy0\">;</span><br/>let splusplus <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span>s<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\"\"</span><br/>\u00a0<br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"br0\">[</span>splusplus<span class=\"sy0\">,</span> <span class=\"kw1\">typeof</span> splusplus<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"co1\">// 10000,string</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">$ jq -n -M -s 'map(tonumber) | add' input.txt</pre>"}, {"lang": "Julia", "loc": 5, "block": "<pre class=\"text highlighted_source\">Base.:+(s::AbstractString, n::Real) = string(parse(s) + n)<br/>\u00a0<br/>@show \"125\" + 1<br/>@show \"125.15\" + 1<br/>@show \"1234567890987654321\" + 1</pre>"}, {"lang": "K", "loc": 9, "block": "<pre class=\"text highlighted_source\">   1 + .\"1234\"<br/>1235<br/>   1 + .\"1234.56\"<br/>1235.56<br/>\u00a0<br/>   / As a function<br/>   inc:{1 + . x}<br/>   inc \"1234\"<br/>1235</pre>"}, {"lang": "Kotlin", "loc": 18, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.5-2</span><br/>\u00a0<br/><span class=\"coMULTI\">/** overload ++ operator to increment a numeric string */</span><br/>operator fun String.<span class=\"me1\">inc</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"sy0\">=</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> num <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>num + <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a><span class=\"br0\">(</span>e<span class=\"sy0\">:</span> NumberFormatException<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>  <span class=\"co1\">// return string unaltered</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> ns <span class=\"sy0\">=</span> <span class=\"st0\">\"12345\"</span><br/>    println<span class=\"br0\">(</span>++ns<span class=\"br0\">)</span><br/>    ns <span class=\"sy0\">=</span> <span class=\"st0\">\"ghijk\"</span>  <span class=\"co1\">// not numeric, so won't be changed by increment operator</span><br/>    println<span class=\"br0\">(</span>++ns<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LabVIEW", "loc": 1, "block": "<pre class=\"text highlighted_source\">(integer('123') + 1) -&gt; asstring</pre>"}, {"lang": "Lasso", "loc": 1, "block": "<pre class=\"text highlighted_source\">(integer('123') + 1) -&gt; asstring</pre>"}, {"lang": "LaTeX", "loc": 16, "block": "<pre class=\"latex highlighted_source\"><span class=\"sy0\">\\</span><a href=\"http://www.golatex.de/wiki/index.php?title=%5Cdocumentclass\"><span class=\"kw1\">documentclass</span></a><span class=\"sy0\">{</span><span class=\"re9\">article</span><span class=\"sy0\">}</span><br/>\u00a0<br/><span class=\"co1\">% numbers are stored in counters</span><br/><span class=\"re12\">\\newcounter</span><span class=\"sy0\">{</span><span class=\"re9\">tmpnum</span><span class=\"sy0\">}</span><br/>\u00a0<br/><span class=\"co1\">% macro to increment a string (given as argument)</span><br/><span class=\"sy0\">\\</span><a href=\"http://www.golatex.de/wiki/index.php?title=%5Cnewcommand\"><span class=\"kw1\">newcommand</span></a><span class=\"sy0\">{</span><span class=\"re9\"><span class=\"re12\">\\stringinc</span></span><span class=\"sy0\">}[</span><span class=\"re2\">1</span><span class=\"sy0\">]{</span><span class=\"co1\">%</span><br/><span class=\"re12\">\\setcounter</span><span class=\"sy0\">{</span><span class=\"re9\">tmpnum}{#1</span><span class=\"sy0\">}</span><span class=\"co1\">%     setcounter effectively converts the string to a number</span><br/><span class=\"re12\">\\stepcounter</span><span class=\"sy0\">{</span><span class=\"re9\">tmpnum</span><span class=\"sy0\">}</span><span class=\"co1\">%        increment the counter; alternatively: \\addtocounter{tmpnum}{1}</span><br/><span class=\"re12\">\\arabic</span><span class=\"sy0\">{</span><span class=\"re9\">tmpnum</span><span class=\"sy0\">}</span><span class=\"co1\">%             convert counter value to arabic (i.e. decimal) number string</span><br/><span class=\"sy0\">}</span><br/>\u00a0<br/><span class=\"co1\">%example usage</span><br/><span class=\"re8\">\\begin</span><span class=\"sy0\">{</span><span class=\"re9\"><span class=\"re7\">document</span><span class=\"sy0\">}</span><br/>The number 12345 is followed by <span class=\"re12\">\\stringinc</span><span class=\"sy0\">{</span>12345<span class=\"sy0\">}</span>.<br/><span class=\"re8\">\\end</span><span class=\"sy0\">{</span><span class=\"re7\">document</span></span><span class=\"sy0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 10, "block": "<pre class=\"lb highlighted_source\"><span class=\"co1\">'   [RC] Increment a numerical string.</span><br/>\u00a0<br/>o$ <span class=\"sy0\">=</span><span class=\"st0\">\"12345\"</span><br/><span class=\"kw1\">print</span> o$<br/>\u00a0<br/>v  <span class=\"sy0\">=</span><span class=\"kw2\">val</span><span class=\"br0\">(</span> o$<span class=\"br0\">)</span><br/>o$ <span class=\"sy0\">=</span><span class=\"kw2\">str$</span><span class=\"br0\">(</span> v <span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> o$<br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Lingo", "loc": 2, "block": "<pre class=\"text highlighted_source\">put integer(\"123\")+1<br/>-- 124</pre>"}, {"lang": "LiveCode", "loc": 4, "block": "<pre class=\"text highlighted_source\">put \"0\" &amp; \"1234\" into myString -- I think this will result in an internal string representation<br/>add 1 to myString -- automatically converts to a number<br/>put \"The number is:\" &amp;&amp; myString<br/>-- outputs \"The number is: 1235\"</pre>"}, {"lang": "Logo", "loc": 2, "block": "<pre class=\"text highlighted_source\">show \"123 + 1 \u00a0; 124<br/>show word? (\"123 + 1)\u00a0;  true</pre>"}, {"lang": "Logtalk", "loc": 1, "block": "<pre class=\"logtalk highlighted_source\"><span class=\"kw4\">number_chars</span>(<span class=\"re0\">Number</span>, <span class=\"st_h\">\"123\"</span>), <span class=\"re0\">Number2</span> <span class=\"kw5\">is</span> <span class=\"re0\">Number</span><span class=\"sy1\">+</span><span class=\"nu0\">1</span>, <span class=\"kw4\">number_chars</span>(<span class=\"re0\">Number2</span>, <span class=\"re0\">String2</span>)</pre>"}, {"lang": "LOLCODE", "loc": 7, "block": "<pre class=\"lolcode highlighted_source\"><span class=\"kw1\">HAI</span> <span class=\"nu0\">1.3</span><br/>\u00a0<br/><span class=\"kw1\">I HAS A</span> foo <span class=\"kw1\">ITZ</span> <span class=\"st0\">\"1234\"</span><br/>foo <span class=\"kw1\">R</span> <span class=\"kw2\">SUM</span> <span class=\"kw2\">OF</span> foo <span class=\"kw4\">AN</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">VISIBLE</span> foo <span class=\"co1\">BTW, prints 1235</span><br/>\u00a0<br/><span class=\"kw1\">KTHXBYE</span></pre>"}, {"lang": "LSL", "loc": 9, "block": "<pre class=\"text highlighted_source\">default {<br/>\tstate_entry() {<br/>\t\tllListen(PUBLIC_CHANNEL, \"\", llGetOwner(), \"\");<br/>\t\tllOwnerSay(\"Say a Number and I'll Increment it.\");<br/>\t}<br/>\tlisten(integer iChannel, string sName, key kId, string sMessage) {<br/>\t\tllOwnerSay(\"You said '\"+sMessage+\"' + 1 = \"+(string)(((integer)sMessage)+1));<br/>\t}<br/>}</pre>"}, {"lang": "Lua", "loc": 1, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">tonumber</span><span class=\"br0\">(</span><span class=\"st0\">\"2345\"</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module CheckIt {<br/>      s$ = \"12345\"<br/>      s$ = STR$(VAL(s$) + 1,\"\")<br/>      Print S$<br/>      \\\\ using , for decimal point like in Locale 1032 for Greece<br/>      s$ = \"123,45\"<br/>      \\\\ we get value in Locale 1032<br/>      S$=Str$(VAL(s$,\",\") + 1, 1032)<br/>}<br/>CheckIt<br/>\u00a0</pre>"}, {"lang": "M4", "loc": 4, "block": "<pre class=\"text highlighted_source\">define(`V',`123')dnl<br/>define(`VN',`-123')dnl<br/>eval(V+1)<br/>eval(VN+1)</pre>"}, {"lang": "Maple", "loc": 2, "block": "<pre class=\"text highlighted_source\">s\u00a0:= \"12345\";<br/>s\u00a0:= convert(parse(s)+1, string);</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">FromDigits[\"1234\"] + 1</pre>"}, {"lang": "MATLAB", "loc": 3, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> numStr = incrementNumStr<span class=\"br0\">(</span>numStr<span class=\"br0\">)</span><br/>    numStr = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/num2str.html\"><span class=\"kw2\">num2str</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/str2double.html\"><span class=\"kw2\">str2double</span></a><span class=\"br0\">(</span>numStr<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "MAXScript", "loc": 2, "block": "<pre class=\"text highlighted_source\">str = \"12345\"<br/>str = ((str as integer) + 1) as string</pre>"}, {"lang": "Metafont", "loc": 4, "block": "<pre class=\"text highlighted_source\">string s;<br/>s\u00a0:= \"1234\";<br/>s\u00a0:= decimal(scantokens(s)+1);<br/>message s;</pre>"}, {"lang": "mIRC Scripting Language", "loc": 3, "block": "<pre class=\"mirc highlighted_source\"><span class=\"kw2\">var</span> <span class=\"re1\">%n</span> = 12345<br/>inc <span class=\"re1\">%n</span><br/><a href=\"http://www.mirc.com/echo\"><span class=\"kw3\">echo</span></a> <span class=\"re4\">-ag</span> <span class=\"re1\">%n</span></pre>"}, {"lang": "ML", "loc": 2, "block": "<pre class=\"ocaml highlighted_source\">ntos ` ston <span class=\"st0\">\"1234\"</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Modula-2", "loc": 17, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> addstr;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span>  InOut<span class=\"sy0\">,</span> NumConv<span class=\"sy0\">,</span> Strings;<br/>\u00a0<br/><span class=\"kw1\">VAR</span>     str1<span class=\"sy0\">,</span> str2      <span class=\"sy0\">:</span> Strings.String;<br/>        num             <span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>;<br/>        ok              <span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  str1 <span class=\"sy0\">:=</span> <span class=\"st0\">\"12345\"</span>;<br/>  InOut.Write <span class=\"br0\">(</span><span class=\"st_h\">'\"'</span><span class=\"br0\">)</span>;    InOut.WriteString <span class=\"br0\">(</span>str1<span class=\"br0\">)</span>;       InOut.WriteString <span class=\"br0\">(</span><span class=\"st_h\">'\" + 1 = '</span><span class=\"br0\">)</span>;<br/>  NumConv.Str2Num <span class=\"br0\">(</span>num<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> str1<span class=\"sy0\">,</span> ok<span class=\"br0\">)</span>;<br/>  <span class=\"kw3\">INC</span> <span class=\"br0\">(</span>num<span class=\"br0\">)</span>;<br/>  NumConv.Num2Str <span class=\"br0\">(</span>num<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> str2<span class=\"sy0\">,</span>  ok<span class=\"br0\">)</span>;<br/>  InOut.WriteString <span class=\"br0\">(</span>str2<span class=\"br0\">)</span>;<br/>  InOut.WriteLn<br/><span class=\"kw1\">END</span> addstr.</pre>"}, {"lang": "Modula-3", "loc": 11, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> StringInt <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO<span class=\"sy0\">,</span> Fmt<span class=\"sy0\">,</span> Scan;<br/>\u00a0<br/><span class=\"kw1\">VAR</span> string<span class=\"sy0\">:</span> <span class=\"kw4\">TEXT</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"1234\"</span>;<br/>    num<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  num <span class=\"sy0\">:=</span> Scan.<span class=\"me1\">Int</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span>;<br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>string &amp; <span class=\"st0\">\" + 1 = \"</span> &amp; Fmt.<span class=\"me1\">Int</span><span class=\"br0\">(</span>num <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> StringInt.</pre>"}, {"lang": "MUMPS", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/> SET STR=\"123\"<br/> WRITE STR+1<br/>\u00a0</pre>"}, {"lang": "Neko", "loc": 4, "block": "<pre class=\"text highlighted_source\">var str = \"123\";<br/>var str = $string($int(str) + 1);<br/>\u00a0<br/>$print(str);</pre>"}, {"lang": "Nemerle", "loc": 2, "block": "<pre class=\"text highlighted_source\">mutable str = \"12345\";<br/>str = $\"$(Int32.Parse(str)+1)\";</pre>"}, {"lang": "NetRexx", "loc": 11, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>\u00a0<br/>options replace format comments java crossref savelog symbols nobinary<br/>\u00a0<br/>numbers = <span class=\"st0\">'12345'</span><br/><span class=\"kw1\">say</span> numbers<br/>numbers = numbers + <span class=\"nu0\">1</span><br/><span class=\"kw1\">say</span> numbers<br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 1, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#string\"><span class=\"kw1\">string</span></a> <span class=\"br0\">(</span><span class=\"sy1\">++</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#int\"><span class=\"kw1\">int</span></a> <span class=\"st0\">\"123\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 2, "block": "<pre class=\"text highlighted_source\">import strutils<br/>let next = $(parseInt(\"123\") + 1)</pre>"}, {"lang": "Oberon-2", "loc": 36, "block": "<pre class=\"oberon2 highlighted_source\"><span class=\"kw1\">MODULE</span> addstr;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span>  Out<span class=\"sy0\">,</span> Strings;<br/>\u00a0<br/><span class=\"kw1\">VAR</span>     str1<span class=\"sy0\">,</span> str2      <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">9</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>        num<span class=\"sy0\">,</span> pos        <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>        carry           <span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/>        ch              <span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  str1 <span class=\"sy0\">:=</span> <span class=\"st0\">\"9999\"</span>;<br/>  Out.<span class=\"me1\">Char</span> <span class=\"br0\">(</span><span class=\"st_h\">'\"'</span><span class=\"br0\">)</span>;       Out.<span class=\"me1\">String</span> <span class=\"br0\">(</span>str1<span class=\"br0\">)</span>;      Out.<span class=\"me1\">String</span> <span class=\"br0\">(</span><span class=\"st_h\">'\" + 1 = '</span><span class=\"br0\">)</span>;<br/>  num <span class=\"sy0\">:=</span> Strings.<span class=\"me1\">Length</span> <span class=\"br0\">(</span>str1<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>;<br/>  pos <span class=\"sy0\">:=</span> num;<br/>  <span class=\"kw1\">IF</span>  str1 <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'9'</span>  <span class=\"kw1\">THEN</span>  <span class=\"kw3\">INC</span> <span class=\"br0\">(</span>pos<span class=\"br0\">)</span>  <span class=\"kw1\">END</span>;<br/>  str2 <span class=\"br0\">[</span>pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> 0X;<br/>  carry <span class=\"sy0\">:=</span> <span class=\"kw2\">TRUE</span>;<br/>  <span class=\"kw1\">REPEAT</span><br/>    ch <span class=\"sy0\">:=</span> str1 <span class=\"br0\">[</span>num<span class=\"br0\">]</span>;<br/>    <span class=\"kw1\">IF</span>  carry  <span class=\"kw1\">THEN</span><br/>      ch <span class=\"sy0\">:=</span> <span class=\"kw3\">CHR</span> <span class=\"br0\">(</span><span class=\"kw3\">ORD</span> <span class=\"br0\">(</span>ch<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">IF</span>  ch &gt; <span class=\"st_h\">'9'</span>  <span class=\"kw1\">THEN</span><br/>      carry <span class=\"sy0\">:=</span> <span class=\"kw2\">TRUE</span>;<br/>      ch <span class=\"sy0\">:=</span> <span class=\"st_h\">'0'</span><br/>    <span class=\"kw1\">ELSE</span><br/>      carry <span class=\"sy0\">:=</span> <span class=\"kw2\">FALSE</span><br/>    <span class=\"kw1\">END</span>;<br/>    str2 <span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> ch;<br/>    <span class=\"kw3\">DEC</span> <span class=\"br0\">(</span>num<span class=\"br0\">)</span>;<br/>    <span class=\"kw3\">DEC</span> <span class=\"br0\">(</span>pos<span class=\"br0\">)</span><br/>  <span class=\"kw1\">UNTIL</span> num &lt; <span class=\"nu0\">0</span>;<br/>  <span class=\"kw1\">IF</span>  carry  <span class=\"kw1\">THEN</span>  str2 <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"st_h\">'1'</span>  <span class=\"kw1\">END</span>;<br/>  Out.<span class=\"me1\">String</span> <span class=\"br0\">(</span>str2<span class=\"br0\">)</span>;<br/>  Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> addstr.</pre>"}, {"lang": "Objeck", "loc": 5, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/>s <span class=\"sy0\">:=</span> <span class=\"st0\">\"12345\"</span><span class=\"sy0\">;</span><br/>i <span class=\"sy0\">:=</span> int<span class=\"sy0\">-&gt;</span><span class=\"me1\">ToInt</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>s <span class=\"sy0\">:=</span> i<span class=\"sy0\">-&gt;</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 3, "block": "<pre class=\"objc highlighted_source\"><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span>s <span class=\"sy0\">=</span> <span class=\"co3\">@</span><span class=\"st0\">\"12345\"</span>;<br/><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"br0\">[</span>s intValue<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>;<br/>s <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> stringWithFormat<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"%i\"</span>, i<span class=\"br0\">]</span></pre>"}, {"lang": "OCaml", "loc": 1, "block": "<pre class=\"ocaml highlighted_source\"><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALstring_of_int\"><span class=\"kw3\">string_of_int</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_string\"><span class=\"kw3\">int_of_string</span></a> <span class=\"st0\">\"1234\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Octave", "loc": 3, "block": "<pre class=\"octave highlighted_source\">nstring <span class=\"sy3\">=</span> <span class=\"co4\">\"123\"</span><span class=\"sy5\">;</span><br/>nstring <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/sprintf.html\"><span class=\"kw5\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co4\">\"%d\"</span><span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/str2num.html\"><span class=\"kw6\">str2num</span></a><span class=\"br0\">(</span>nstring<span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/disp.html\"><span class=\"kw5\">disp</span></a><span class=\"br0\">(</span>nstring<span class=\"br0\">)</span><span class=\"sy5\">;</span></pre>"}, {"lang": "Oforth", "loc": 2, "block": "<pre class=\"text highlighted_source\">\"999\" 1 + println<br/>\"999\" asInteger 1 + asString println</pre>"}, {"lang": "OoRexx", "loc": 3, "block": "<pre class=\"oorexx highlighted_source\">i=<span class=\"nu0\">1</span><br/>i+=<span class=\"nu0\">1</span><br/><span class=\"kw1\">Say</span> i</pre>"}, {"lang": "OpenEdge/Progress", "loc": 5, "block": "<pre class=\"progress highlighted_source\"><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> cc <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span> <span class=\"kw4\">INITIAL</span> <span class=\"st0\">\"12345\"</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">MESSAGE</span> <br/>   <span class=\"kw3\">INTEGER</span><span class=\"br0\">(</span> cc <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <br/><span class=\"kw1\">VIEW-AS</span> <span class=\"kw1\">ALERT-BOX</span><span class=\"sy0\">.</span></pre>"}, {"lang": "Oz", "loc": 1, "block": "<pre class=\"oz highlighted_source\"><span class=\"br0\">{</span>Int<span class=\"sy0\">.</span>toString <span class=\"br0\">{</span>String<span class=\"sy0\">.</span>toInt <span class=\"st0\">\"12345\"</span><span class=\"br0\">}</span> <span class=\"sy0\">+</span> 1<span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">foo<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span><span class=\"kw1\">eval</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 83, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> StrInc<span class=\"sy1\">;</span><br/><span class=\"co2\">{$IFDEF FPC}</span><br/>  <span class=\"co2\">{$Mode Delphi}</span><br/>  <span class=\"co2\">{$Optimization ON}{$Align 16}{$Codealign proc=16,loop=4}</span><br/><span class=\"co2\">{$ENDIF}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  sysutils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  myString <span class=\"sy3\">=</span>  <span class=\"kw4\">AnsiString</span><span class=\"sy1\">;</span> <span class=\"co1\">// string[32];//</span><br/>\u00a0<br/><span class=\"kw1\">function</span> InCLoop<span class=\"br0\">(</span>ps<span class=\"sy1\">:</span> pChar<span class=\"sy1\">;</span>le<span class=\"sy1\">,</span>Base<span class=\"sy1\">:</span> NativeInt<span class=\"br0\">)</span><span class=\"sy1\">:</span>NativeInt<span class=\"sy1\">;</span><br/><span class=\"co1\">//Add 1 and correct carry</span><br/><span class=\"co1\">//returns 0, if no overflow, else -1</span><br/><span class=\"kw1\">var</span><br/>  dg<span class=\"sy1\">:</span> nativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  dec<span class=\"br0\">(</span>le<span class=\"br0\">)</span><span class=\"sy1\">;</span><span class=\"co1\">//ps is 0-based</span><br/>  <span class=\"kw1\">repeat</span><br/>    dg <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">ord</span><span class=\"br0\">(</span>ps<span class=\"br0\">[</span>le<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"kw3\">ord</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    result  <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy3\">-</span><span class=\"kw3\">ord</span><span class=\"br0\">(</span>dg&gt;<span class=\"sy3\">=</span>base<span class=\"br0\">)</span><span class=\"sy1\">;</span><span class=\"co1\">// -1 or 0 -&gt; $FF...FF or $00...00</span><br/>    ps<span class=\"br0\">[</span>le<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">chr</span><span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"br0\">(</span>result <span class=\"kw3\">AND</span> base<span class=\"br0\">)</span><span class=\"sy3\">+</span>dg<span class=\"sy3\">+</span><span class=\"kw3\">ord</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    dec<span class=\"br0\">(</span>le<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> <span class=\"br0\">(</span>result <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>le&lt;<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> IncIntStr<span class=\"br0\">(</span>base<span class=\"sy1\">:</span>NativeInt<span class=\"sy1\">;</span><span class=\"kw1\">var</span> s<span class=\"sy1\">:</span>myString<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  le <span class=\"sy1\">:</span>nativeInt<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  le <span class=\"sy1\">:</span><span class=\"sy3\">=</span> length<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">IF</span> le &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">Begin</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>InCLoop<span class=\"br0\">(</span>pChar<span class=\"br0\">(</span><span class=\"sy2\">@</span>s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>le<span class=\"sy1\">,</span>base<span class=\"br0\">)</span> &lt;&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      setlength<span class=\"br0\">(</span>s<span class=\"sy1\">,</span>le<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      move<span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>s<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>le<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'1'</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">else</span><br/>  <span class=\"kw1\">Begin</span><br/>    setlength<span class=\"br0\">(</span>s<span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'1'</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  strLen <span class=\"sy3\">=</span> <span class=\"nu0\">26</span><span class=\"sy1\">;</span><br/>  MAX <span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">shl</span> strLen <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  s  <span class=\"sy1\">:</span> myString<span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">,</span>base <span class=\"sy1\">:</span> nativeInt<span class=\"sy1\">;</span><br/>  T1<span class=\"sy1\">,</span>T0<span class=\"sy1\">:</span> TDateTime<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  <span class=\"kw1\">For</span> base <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    s<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\">{<br/>    //Zero pad string<br/>    //s:= '0';// doesn't work for AnsiString for FPC 3.0 but for 2.6.4?<br/>    //This works for all Ansi-string<br/>    setlength(s,strLen);fillchar(s[1],strLen,'0');<br/>}</span><br/>    T0 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> time<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> MAX <span class=\"kw1\">do</span><br/>      IncIntStr<span class=\"br0\">(</span>Base<span class=\"sy1\">,</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    T0 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>time<span class=\"sy3\">-</span>T0<span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"nu0\">86400</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>s<span class=\"sy1\">:</span>strLen<span class=\"sy1\">,</span><span class=\"st0\">' base '</span><span class=\"sy1\">,</span>base<span class=\"sy1\">:</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span>T0<span class=\"sy1\">:</span><span class=\"nu0\">8</span><span class=\"sy1\">:</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"st0\">' s'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"co1\">//One Billion Digits</span><br/>  setlength<span class=\"br0\">(</span>s<span class=\"sy1\">,</span><span class=\"nu0\">1000</span><span class=\"sy3\">*</span><span class=\"nu0\">1000</span><span class=\"sy3\">*</span><span class=\"nu0\">1000</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'0'</span><span class=\"sy1\">;</span><span class=\"co1\">//don't measure setlength in IncIntStr</span><br/>  fillchar<span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>length<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"st0\">'9'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'first 5 digits '</span><span class=\"sy1\">,</span>s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>s<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>s<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>s<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>s<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  T0 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> time<span class=\"sy1\">;</span><br/>  IncIntStr<span class=\"br0\">(</span>s<span class=\"sy1\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  T0 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>time<span class=\"sy3\">-</span>T0<span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"nu0\">86400</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>length<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span>T0<span class=\"sy1\">:</span><span class=\"nu0\">8</span><span class=\"sy1\">:</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"st0\">' s'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'first 5 digits '</span><span class=\"sy1\">,</span>s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>s<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>s<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>s<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>s<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"12345\"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$s</span><span class=\"sy0\">++;</span></pre>"}, {"lang": "Perl 6", "loc": 2, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"12345\"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$s</span><span class=\"sy0\">++;</span></pre>"}, {"lang": "Phix", "loc": 2, "block": "<pre class=\"text highlighted_source\">integer {{n}} = scanf(\"2047\",\"%d\")<br/>printf(1,\"%d\\n\",{n+1})</pre>"}, {"lang": "PHP", "loc": 2, "block": "<pre class=\"php highlighted_source\"><span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"12345\"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$s</span><span class=\"sy0\">++;</span></pre>"}, {"lang": "PicoLisp", "loc": 1, "block": "<pre class=\"text highlighted_source\">(format (inc (format \"123456\")))</pre>"}, {"lang": "Pike", "loc": 3, "block": "<pre class=\"pike highlighted_source\">string number <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">;</span><br/>number <span class=\"sy0\">=</span> <span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>int<span class=\"br0\">)</span>number<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>Result: <span class=\"st0\">\"1\"</span></pre>"}, {"lang": "PL/I", "loc": 4, "block": "<pre class=\"pli highlighted_source\"><span class=\"kw1\">declare</span> s <span class=\"kw1\">picture</span> <span class=\"st0\">'999999999'</span><span class=\"sy0\">;</span><br/>s <span class=\"sy0\">=</span> <span class=\"st0\">'123456789'</span><span class=\"sy0\">;</span><br/>s <span class=\"sy0\">=</span> s <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Plain TeX", "loc": 6, "block": "<pre class=\"text highlighted_source\">\\newcount\\acounter<br/>\\def\\stringinc#1{\\acounter=#1\\relax%<br/>\\advance\\acounter by 1\\relax%<br/>\\number\\acounter}<br/>The number 12345 is followed by \\stringinc{12345}.<br/>\\bye</pre>"}, {"lang": "Pop11", "loc": 2, "block": "<pre class=\"text highlighted_source\">lvars s = '123456789012123456789999999999';<br/>(strnumber(s) + 1) &gt;&lt; '' -&gt; s;</pre>"}, {"lang": "PowerShell", "loc": 2, "block": "<pre class=\"powershell highlighted_source\"><span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"12345\"</span><br/><span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span> <span class=\"re0\">$s</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span></pre>"}, {"lang": "Prolog", "loc": 7, "block": "<pre class=\"prolog highlighted_source\">incr_numerical_string<span class=\"br0\">(</span>S1<span class=\"sy4\">,</span> S2<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tstring_to_atom<span class=\"br0\">(</span>S1<span class=\"sy4\">,</span> A1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tatom_number<span class=\"br0\">(</span>A1<span class=\"sy4\">,</span> N1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tN2 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N1<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tatom_number<span class=\"br0\">(</span>A2<span class=\"sy4\">,</span> N2<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tstring_to_atom<span class=\"br0\">(</span>S2<span class=\"sy4\">,</span> A2<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 3, "block": "<pre class=\"purebasic highlighted_source\">string$<span class=\"sy0\">=</span><span class=\"st0\">\"12345\"</span><br/>string$<span class=\"sy0\">=</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span>string$<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Debug</span> string$</pre>"}, {"lang": "Python", "loc": 1, "block": "<pre class=\"python highlighted_source\">next <span class=\"sy0\">=</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"st0\">'123'</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 2, "block": "<pre class=\"text highlighted_source\">s = \"12345\"<br/>s &lt;- as.character(as.numeric(s) + 1)</pre>"}, {"lang": "Racket", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define next (compose number-&gt;string add1 string-&gt;number))<br/>\u00a0</pre>"}, {"lang": "Rascal", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import String;<br/>\u00a0<br/>public str IncrNumStr(str s) = \"&lt;toInt(s) + 1&gt;\";<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 21, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol [<br/>\tTitle: \"Increment Numerical String\"<br/>\tURL: http://rosettacode.org/wiki/Increment_numerical_string<br/>]</span><br/>\u00a0<br/><span class=\"co1\">; Note the use of unusual characters in function name. Also note that</span><br/><span class=\"co1\">; because REBOL collects terms from right to left, I convert the</span><br/><span class=\"co1\">; string argument (s) to integer first, then add that result to one.</span><br/>\u00a0<br/>s++: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw3\">to-string</span> <span class=\"nu0\">1</span> + <span class=\"kw3\">to-integer</span> s<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; Examples. Because the 'print' word actually evaluates the block</span><br/><span class=\"co1\">; (it's effectively a 'reduce' that gets printed space separated),</span><br/><span class=\"co1\">; it's possible for me to assign the test string to 'x' and have it</span><br/><span class=\"co1\">; printed as a side effect. At the end, 'x' is available to submit to</span><br/><span class=\"co1\">; the 's++' function. I 'mold' the return value of s++ to make it</span><br/><span class=\"co1\">; obvious that it's still a string.</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span>x: <span class=\"st0\">\"-99\"</span> <span class=\"st0\">\"plus one equals\"</span> <span class=\"kw3\">mold</span> s++ x<span class=\"br0\">]</span><br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span>x: <span class=\"st0\">\"42\"</span> <span class=\"st0\">\"plus one equals\"</span> <span class=\"kw3\">mold</span> s++ x<span class=\"br0\">]</span><br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span>x: <span class=\"st0\">\"12345\"</span> <span class=\"st0\">\"plus one equals\"</span> <span class=\"kw3\">mold</span> s++ x<span class=\"br0\">]</span></pre>"}, {"lang": "Retro", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"123\" toNumber 1+ toString</pre>"}, {"lang": "REXX", "loc": 21, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program demonstrates a method how to increment a numerical string*/</span><br/>count = <span class=\"st0\">\"3\"</span>      <span class=\"coMULTI\">/*REXX variables (and constants) are character strings.*/</span><br/>count =  <span class=\"nu0\">3</span>       <span class=\"coMULTI\">/*(identical to the above statement.)                  */</span><br/>count = count+<span class=\"nu0\">1</span>  <span class=\"coMULTI\">/*strings in a numerical context are treated as numbers*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'sum='</span> count <span class=\"coMULTI\">/*display the value of  COUNT  to the terminal (screen)*/</span><br/>\u00a0<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 The default numeric digits for REXX is  9  digits. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 However, that can be increased with NUMERIC DIGITS.*/</span><br/>\u00a0<br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">15000</span>   <span class=\"coMULTI\">/*let's go ka-razy with fifteen thousand digits. */</span><br/>\u00a0<br/>count=<span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">15000</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*stressing REXX's brains with lots of  two's,   */</span><br/>                       <span class=\"coMULTI\">/*the above is considered a number in REXX.      */</span><br/>count=count+<span class=\"nu0\">3</span>          <span class=\"coMULTI\">/*make that last digit of  COUNT  a  \"5\".        */</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"nu0\">1</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span>          <span class=\"coMULTI\">/*let's not display this gihugeic number to term,*/</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'count='</span>  count   <span class=\"coMULTI\">/*ya most likely don't want to display this thing*/</span><br/>\u00a0<br/>                       <span class=\"coMULTI\">/* [\u2193]  show the six leftmost and rightmost digs.*/</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'count='</span>  <span class=\"kw6\">left</span><span class=\"br0\">(</span>count,<span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"st0\">'\u00b7\u00b7\u00b7'</span><span class=\"kw6\">right</span><span class=\"br0\">(</span>count,<span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>                                       <span class=\"coMULTI\">/*stick a fork in it, we're done.*/</span></pre>"}, {"lang": "Ring", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>x = \"1234\"  See 1+x  # print 1235<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 2, "block": "<pre class=\"ruby highlighted_source\"><span class=\"st0\">'1234'</span>.<span class=\"me1\">succ</span> <span class=\"co1\">#=&gt; '1235'</span><br/><span class=\"st0\">'99'</span>.<span class=\"me1\">succ</span> <span class=\"co1\">#=&gt; '100'</span></pre>"}, {"lang": "Rust", "loc": 9, "block": "<pre class=\"text highlighted_source\">fn next_string(input: &amp;str) -&gt; String {<br/>    (input.parse::&lt;i64&gt;().unwrap() + 1).to_string()<br/>}<br/>\u00a0<br/>fn main() {<br/>    let s = \"-1\";<br/>    let s2 = next_string(s);<br/>    println!(\"{:?}\", s2);<br/>}</pre>"}, {"lang": "Run BASIC", "loc": 6, "block": "<pre class=\"text highlighted_source\">string$ = \"12345\"<br/>numeric = val(string$)<br/>numeric = numeric + 1<br/>string$ = str$(numeric)<br/>print string$<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 1, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">implicit</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toSucc<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> succ <span class=\"sy0\">=</span> BigDecimal<span class=\"br0\">(</span>s<span class=\"br0\">)</span> + <span class=\"nu0\">1</span> toString <span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 1, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span>number <span class=\"st0\">\"1234\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sed", "loc": 12, "block": "<pre class=\"text highlighted_source\">s/^.*$/&amp;:/<br/>:bubble<br/>s/^:/1/<br/>/.:/ {<br/>    h<br/>    s/^.*\\(.\\):.*$/\\1/<br/>    y/0123456789/123456789:/<br/>    s/:/:0/<br/>    G<br/>    s/\\(.*\\)\\n\\(.*\\).:\\(.*\\)$/\\2\\1\\3/<br/>    b bubble<br/>}</pre>"}, {"lang": "Seed7", "loc": 3, "block": "<pre class=\"text highlighted_source\">var string: s is \"12345\";<br/>\u00a0<br/>s\u00a0:= str(succ(integer parse s));</pre>"}, {"lang": "SequenceL", "loc": 3, "block": "<pre class=\"text highlighted_source\">import &lt;Utilities/Conversion.sl&gt;;<br/>\u00a0<br/>increment(input(1))\u00a0:= intToString(stringToInt(input) + 1);</pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">say <span class=\"st0\">'1234'</span>.<span class=\"me1\">inc</span>;    <span class=\"co1\">#=&gt; '1235'</span><br/>say <span class=\"st0\">'99'</span>.<span class=\"me1\">inc</span>;      <span class=\"co1\">#=&gt; '100'</span></pre>"}, {"lang": "Slate", "loc": 1, "block": "<pre class=\"text highlighted_source\">((Integer readFrom: '123') + 1) printString</pre>"}, {"lang": "Smalltalk", "loc": 1, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"br0\">(</span><span class=\"st0\">'123'</span> asInteger + <span class=\"re5\">1</span><span class=\"br0\">)</span> printString</pre>"}, {"lang": "SNOBOL4", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>     output = trim(input) + 1<br/>     output = \"123\" + 1<br/>end</pre>"}, {"lang": "Sparkling", "loc": 6, "block": "<pre class=\"text highlighted_source\">function numStrIncmt(s) {<br/>    return fmtstr(\"%d\", toint(s) + 1);<br/>}<br/>\u00a0<br/>spn:1&gt; numStrIncmt(\"12345\")<br/>= 12346</pre>"}, {"lang": "SuperTalk", "loc": 5, "block": "<pre class=\"text highlighted_source\">put 0 into someVar<br/>add 1 to someVar<br/>-- without \"into [field reference]\" the value will appear<br/>-- in the message box<br/>put someVar -- into cd fld 1</pre>"}, {"lang": "Swift", "loc": 4, "block": "<pre class=\"text highlighted_source\">let s = \"1234\"<br/>if let x = Int(s) {<br/>  print(\"\\(x + 1)\")<br/>}</pre>"}, {"lang": "Tcl", "loc": 2, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> str <span class=\"nu0\">1234</span><br/><span class=\"kw2\">incr</span> str</pre>"}, {"lang": "TI-89 BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">string(expr(str)+1)</pre>"}, {"lang": "TI-83 BASIC", "loc": 7, "block": "<pre class=\"text highlighted_source\">:\"1\"\u2192Str1<br/>:expr(Str1)+1\u2192A<br/>:{0,1}\u2192L\u2081<br/>:{0,A}\u2192L\u2082<br/>:LinReg(ax+b) Y\u2081<br/>:Equ\u25baString(Y\u2081,Str1)<br/>:sub(Str1,1,length(Str1)-3)\u2192Str1</pre>"}, {"lang": "Toka", "loc": 1, "block": "<pre class=\"text highlighted_source\">\" 100\" &gt;number drop 1 + &gt;string</pre>"}, {"lang": "TorqueScript", "loc": 1, "block": "<pre> $string = \"12345\";\n $string++;\n</pre>"}, {"lang": "TUSCRIPT", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>teststring=\"0'1'-1'12345'10000000'-10000000\"<br/>LOOP/CLEAR n=teststring<br/>n=n+1<br/>PRINT n<br/>ENDLOOP<br/>\u00a0</pre>"}, {"lang": "TXR", "loc": 11, "block": "<pre class=\"text highlighted_source\">@(do (defun inc-num-str (str-in)<br/>       (let ((len (length str-in))<br/>             (str (copy-str str-in)))<br/>         (for ((i (- len 1)))<br/>              ((&gt;= i 0) `<a class=\"__cf_email__\" data-cfemail=\"0839487b7c7a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>`)<br/>              ((dec i))<br/>           (if (&lt;= (inc [str i]) #\\9)<br/>             (return str)<br/>             (set [str i] #\\0))))))<br/>@(bind a @(inc-num-str \"9999\"))<br/>@(bind b @(inc-num-str \"1234\"))</pre>"}, {"lang": "UNIX Shell", "loc": 4, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\"># All variables are strings within the shell</span><br/><span class=\"co0\"># Although num look like a number, it is in fact a numerical string</span><br/><span class=\"re2\">num</span>=<span class=\"nu0\">5</span><br/><span class=\"re2\">num</span>=<span class=\"sy0\">`</span><span class=\"kw2\">expr</span> <span class=\"re1\">$num</span> + <span class=\"nu0\">1</span><span class=\"sy0\">`</span>    <span class=\"co0\"># Increment the number</span></pre>"}, {"lang": "Ursa", "loc": 3, "block": "<pre class=\"text highlighted_source\">decl string num<br/>set num \"123\"<br/>set num (int (+ (int num) 1))</pre>"}, {"lang": "Ursala", "loc": 3, "block": "<pre class=\"text highlighted_source\">#import nat<br/>\u00a0<br/>instring = ~&amp;h+\u00a0%nP+ successor+\u00a0%<a class=\"__cf_email__\" data-cfemail=\"2846586841666b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>      # convert, do the math, convert back</pre>"}, {"lang": "VBA", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Public Function incr(astring As String) As String<br/>'simple function to increment a number string<br/>   incr = CStr(CLng(astring) + 1)<br/>End Function<br/>\u00a0</pre>"}, {"lang": "Vedit macro language", "loc": 1, "block": "<pre class=\"vedit highlighted_source\">itoa<span class=\"br0\">(</span>atoi<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span></pre>"}, {"lang": "Visual Basic .NET", "loc": 5, "block": "<pre class=\"vbnet highlighted_source\">    <span class=\"kw1\">Dim</span> s <span class=\"kw1\">As</span> <span class=\"kw2\">String</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"123\"</span><br/>\u00a0<br/>    s <span class=\"sy0\">=</span> <span class=\"kw4\">CStr</span><span class=\"br0\">(</span><span class=\"kw4\">CInt</span><span class=\"br0\">(</span><span class=\"st0\">\"123\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">' or</span><br/>    s <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">CInt</span><span class=\"br0\">(</span><span class=\"st0\">\"123\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span></pre>"}, {"lang": "XLISP", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">DEFUN</span> INCREMENT-STRING <span class=\"br0\">(</span>X<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>NUMBER-<span class=\"sy0\">&gt;</span>STRING <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>STRING-<span class=\"sy0\">&gt;</span>NUMBER X<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "XPL0", "loc": 23, "block": "<pre class=\"text highlighted_source\">string 0;               \\use zero-terminated string convention<br/>code Text=12;<br/>\u00a0<br/>func StrLen(A);         \\Return number of characters in an ASCIIZ string<br/>char A;<br/>int  I;<br/>for I:= 0 to -1&gt;&gt;1-1 do<br/>        if A(I) = 0 then return I;<br/>\u00a0<br/>proc IncStr(S);         \\Increment a numeric string<br/>char S;<br/>int  I;<br/>[for I:= StrLen(S)-1 downto 0 do<br/>        [S(I):= S(I)+1;<br/>        if S(I) &gt; ^9 then S(I):= S(I)-10 else return;<br/>        ];<br/>];<br/>\u00a0<br/>char Str;<br/>[Str:= \"0123999999999\"; \\MSD first (big endian)<br/>IncStr(Str);  IncStr(Str);<br/>Text(0, Str);<br/>]</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">fcn numStringPlusOne(s){1+s}<br/>numStringPlusOne(\"123\") //--&gt;124</pre>"}]}