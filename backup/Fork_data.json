{"task": "Fork", "blocks": [{"lang": "Ada", "loc": 18, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>,<br/>     POSIX.<span class=\"me1\">Process_Identification</span>,<br/>     POSIX.<span class=\"me1\">Unsafe_Process_Primitives</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Fork <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>,<br/>       POSIX.<span class=\"me1\">Process_Identification</span>,<br/>       POSIX.<span class=\"me1\">Unsafe_Process_Primitives</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">if</span> Fork = Null_Process_ID <span class=\"kw1\">then</span><br/>      Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"This is the new process.\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">else</span><br/>      Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"This is the original process.\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/><span class=\"kw1\">exception</span><br/>   <span class=\"kw3\">when</span> <span class=\"kw3\">others</span> =&gt;<br/>      Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Something went wrong.\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Fork;</pre>"}, {"lang": "Aikido", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>    var pid = fork()<br/>    switch (pid) {<br/>    case &lt;0:<br/>        println (\"fork error\")<br/>        break<br/>    case 0:<br/>        println (\"child\")<br/>        break<br/>    default:<br/>        println (\"parent\")<br/>        break<br/>    }<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 11, "block": "<pre class=\"algol68 highlighted_source\">main<span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  <span class=\"kw3\">INT</span> pid<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">IF</span> <span class=\"br0\">(</span>pid<span class=\"sy1\">:=</span>fork<span class=\"br0\">)</span><span class=\"sy1\">=</span>0 <span class=\"kw2\">THEN</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"This is new process\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">ELIF</span> pid<span class=\"sy1\">&gt;</span>0 <span class=\"kw2\">THEN</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"This is the original process\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">ELSE</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"ERROR: Something went wrong\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">FI</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 4, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> Fork<span class=\"sy0\">,</span> Start another <a href=\"http://www.autohotkey.com/docs/commands/Process.htm\"><span class=\"kw3\">process</span></a>?<br/><a href=\"http://www.autohotkey.com/docs/commands/IfMsgBox.htm\"><span class=\"kw3\">IfMsgBox</span></a><span class=\"sy0\">,</span> Yes<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Run.htm\"><span class=\"kw3\">Run</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%A_AhkPath%</span> <span class=\"st0\">\"%A_ScriptFullPath%\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> Fork<span class=\"sy0\">,</span> Stop this <a href=\"http://www.autohotkey.com/docs/commands/Process.htm\"><span class=\"kw3\">process</span></a><span class=\"sy0\">.</span></pre>"}, {"lang": "BaCon", "loc": 14, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' Fork</span><br/>pid = FORK<br/><span class=\"kw1\">IF</span> pid = <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>    <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"I am the child, my PID is:\"</span>, MYPID<br/>    ENDFORK<br/>ELIF pid &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>    <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"I am the parent, pid of child:\"</span>, pid<br/>    REPEAT<br/>        <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Waiting for child to exit\"</span><br/>        <span class=\"kw1\">SLEEP</span> <span class=\"nu0\">50</span><br/>    <span class=\"kw1\">UNTIL</span> REAP<span class=\"br0\">(</span>pid<span class=\"br0\">)</span><br/><span class=\"kw1\">ELSE</span><br/>    <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Error in fork\"</span><br/>ENDIF</pre>"}, {"lang": "C", "loc": 22, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;unistd.h&gt;</span><br/><span class=\"co2\">#include &lt;sys/wait.h&gt;</span><br/><span class=\"co2\">#include &lt;err.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tpid_t pid<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>pid <span class=\"sy0\">=</span> fork<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tusleep<span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>child process: done<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pid <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\terr<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"fork error\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"waiting for child\u00a0%d...<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>pid<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"child\u00a0%d finished<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>wait<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 22, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include&lt;iostream&gt;</span><br/><span class=\"co2\">#include&lt;unistd.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  pid_t pid <span class=\"sy1\">=</span> fork<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pid <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"This is the new process<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pid <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"This is the original process<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">else</span><br/>  <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"ERROR: Something went wrong<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 2, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>require '<span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>java<span class=\"sy0\">.</span>shell\u00a0:<span class=\"me1\">as</span> shell<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>shell<span class=\"sy0\">/</span>sh <span class=\"st0\">\"echo\"</span> <span class=\"st0\">\"foo\"</span><span class=\"br0\">)</span> <span class=\"co1\">; evaluates to {:exit 0,\u00a0:out \"foo\\n\",\u00a0:err \"\"}</span></pre>"}, {"lang": "COBOL", "loc": 30, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> forking<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> pid <span class=\"kw3\">usage</span> binary-long<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw2\">display</span> <span class=\"st0\">\"attempting fork\"</span><br/>\u00a0<br/>       <span class=\"kw2\">call</span> <span class=\"st0\">\"fork\"</span> returning pid<br/>           <span class=\"kw3\">on</span> <span class=\"kw3\">exception</span><br/>               <span class=\"kw2\">display</span> <span class=\"st0\">\"error: no fork linkage\"</span> <span class=\"kw3\">upon</span> syserr<br/>       end-<span class=\"kw2\">call</span><br/>\u00a0<br/>       <span class=\"kw2\">evaluate</span> pid<br/>          <span class=\"kw3\">when</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>              <span class=\"kw2\">display</span> <span class=\"st0\">\"    child sleeps\"</span><br/>              <span class=\"kw2\">call</span> <span class=\"st0\">\"C$SLEEP\"</span> <span class=\"kw3\">using</span> <span class=\"nu0\">3</span><br/>              <span class=\"kw2\">display</span> <span class=\"st0\">\"    child task complete\"</span><br/>          <span class=\"kw3\">when</span> &lt; <span class=\"nu0\">0</span><br/>              <span class=\"kw2\">display</span> <span class=\"st0\">\"error: fork result not ok\"</span> <span class=\"kw3\">upon</span> syserr<br/>          <span class=\"kw3\">when</span> &gt; <span class=\"nu0\">0</span><br/>              <span class=\"kw2\">display</span> <span class=\"st0\">\"parent waits for child...\"</span><br/>              <span class=\"kw2\">call</span> <span class=\"st0\">\"wait\"</span> <span class=\"kw3\">using</span> <span class=\"kw3\">by</span> <span class=\"kw3\">value</span> <span class=\"nu0\">0</span><br/>              <span class=\"kw2\">display</span> <span class=\"st0\">\"parental responsibilities fulfilled\"</span><br/>       end-<span class=\"kw2\">evaluate</span><br/>\u00a0<br/>       goback<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> forking<span class=\"sy0\">.</span></pre>"}, {"lang": "Common Lisp", "loc": 5, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>pid <span class=\"br0\">(</span>sb-posix<span class=\"sy0\">:</span><span class=\"me1\">fork</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">zerop</span> pid<span class=\"br0\">)</span> <span class=\"br0\">(</span>write-line <span class=\"st0\">\"This is the new process.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">plusp</span> pid<span class=\"br0\">)</span> <span class=\"br0\">(</span>write-line <span class=\"st0\">\"This is the original process.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>t           <span class=\"br0\">(</span><span class=\"kw1\">error</span> <span class=\"st0\">\"Something went wrong while forking.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 9, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> core.<span class=\"me1\">thread</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">new</span> Thread<span class=\"br0\">(</span><span class=\"br0\">{</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"Spawned thread.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">start</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Main thread.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "DCL", "loc": 7, "block": "<pre class=\"dcl highlighted_source\"><span class=\"co0\">$! looper.com procedure</span><br/>$ i <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>$<span class=\"re2\"> loop:</span><br/>$  <span class=\"kw1\">show time</span><br/>$  <span class=\"kw1\">wait</span> '<span class=\"kw3\">p1</span><br/>$  i <span class=\"sy0\">=</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>$  <span class=\"kw1\">if</span> i <span class=\"sy0\">.gt.</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> $  <span class=\"kw1\">goto</span> loop</pre>"}, {"lang": "Elixir", "loc": 10, "block": "<pre class=\"text highlighted_source\">defmodule Fork do<br/>  def start do<br/>    spawn(fn -&gt; child end)<br/>    IO.puts \"This is the original process\"<br/>  end<br/>\u00a0<br/>  def child, do: IO.puts \"This is the new process\"<br/>end<br/>\u00a0<br/>Fork.start</pre>"}, {"lang": "Erlang", "loc": 9, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>fork<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>start<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">spawn</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">child</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"This is the original process~n\"</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">child</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"This is the new process~n\"</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Factor", "loc": 3, "block": "<pre class=\"text highlighted_source\">USING: unix unix.process\u00a0;<br/>\u00a0<br/>[ \"Hello form child\" print flush 0 _exit ] [ drop \"Hi from parent\" print flush ] with-fork</pre>"}, {"lang": "Fexl", "loc": 3, "block": "<pre class=\"text highlighted_source\">fork \\pid<br/>print \"pid = \";print pid;nl;<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 26, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"os\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"PID:\u00a0%v<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> os<span class=\"sy3\">.</span>Getpid<span class=\"sy1\">())</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Args<span class=\"sy1\">)</span> &lt; <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Done.\"</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    cp<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> os<span class=\"sy3\">.</span>StartProcess<span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Args<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> <span class=\"kw2\">nil</span><span class=\"sy1\">,</span><br/>        &amp;os<span class=\"sy3\">.</span>ProcAttr<span class=\"sy1\">{</span>Files<span class=\"sy1\">:</span> <span class=\"sy1\">[]</span><span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=os.File\"><span class=\"kw5\">os.<span class=\"me1\">File</span></span></a><span class=\"sy1\">{</span><span class=\"kw2\">nil</span><span class=\"sy1\">,</span> os<span class=\"sy3\">.</span>Stdout<span class=\"sy1\">}},</span><br/>    <span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// Child process running independently at this point.</span><br/>    <span class=\"co1\">// We have its PID and can print it.</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"Child's PID:\u00a0%v<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> cp<span class=\"sy3\">.</span>Pid<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> _<span class=\"sy1\">,</span> err <span class=\"sy2\">=</span> cp<span class=\"sy3\">.</span>Wait<span class=\"sy1\">();</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 17, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"BEFORE PROCESS\"</span><br/><a href=\"http://www.google.de/search?as_q=Process&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Process</span></a> p <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?as_q=Runtime&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Runtime</span></a>.<span class=\"me1\">runtime</span>.<span class=\"me1\">exec</span><span class=\"br0\">(</span><span class=\"st0\">'''<br/>C:/cygwin/bin/sh -c \"<br/>/usr/bin/date +'BEFORE LOOP:\u00a0%T';<br/>for i in 1 2 3 4\u00a0; do<br/>    /usr/bin/sleep 1;<br/>    /usr/bin/echo <span class=\"es0\">\\$</span>i;<br/>done;<br/>/usr/bin/date +'AFTER LOOP:\u00a0%T'\"<br/>'''</span><span class=\"br0\">)</span><br/>p.<span class=\"me1\">consumeProcessOutput</span><span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=System&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>, <a href=\"http://www.google.de/search?as_q=System&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">err</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?as_q=Thread&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Thread</span></a>.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">500</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20print\"><span class=\"kw8\">print</span></a> <span class=\"st0\">'.'</span><br/><span class=\"br0\">}</span><br/>p.<span class=\"me1\">waitFor</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"AFTER PROCESS\"</span></pre>"}, {"lang": "Haskell", "loc": 5, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Posix<span class=\"sy0\">.</span>Process<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  forkProcess <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"This is the new process\"</span><span class=\"br0\">)</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"This is the original process\"</span></pre>"}, {"lang": "HicEst", "loc": 11, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">SYSTEM</span><span class=\"br0\">(</span> RUN <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Messagebox<span class=\"sy1\">=</span><span class=\"st0\">'?Y'</span><span class=\"sy1\">,</span> IOStat<span class=\"sy1\">=</span>ios<span class=\"br0\">)</span> <span class=\"st0\">\"Another Fork?\"</span><br/><span class=\"kw1\">IF</span><span class=\"br0\">(</span>ios <span class=\"sy1\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">ALARM</span><span class=\"br0\">(</span><span class=\"nu0\">999</span><span class=\"br0\">)</span> <span class=\"co1\">! quit immediately</span><br/>\u00a0<br/><span class=\"co1\">! assume this script is stored as 'Fork.hic'</span><br/><span class=\"kw1\">SYSTEM</span><span class=\"br0\">(</span>SHell<span class=\"sy1\">=</span><span class=\"st0\">'Fork.hic'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">BEEP</span><span class=\"br0\">(</span><span class=\"st0\">\"c e g 'c\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Messagebox<span class=\"sy1\">=</span><span class=\"st0\">\"!\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Waiting ...\"</span><br/><span class=\"kw1\">ALARM</span><span class=\"br0\">(</span><span class=\"nu0\">999</span><span class=\"br0\">)</span>              <span class=\"co1\">! quit immediately </span></pre>"}, {"lang": "Icon and Unicon", "loc": 8, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fork<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">|</span><span class=\"kw4\">runerr</span><span class=\"br0\">(</span><span class=\"nu0\">500</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"child\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      <span class=\"kw4\">delay</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/>      <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"parent\"</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 3, "block": "<pre class=\"j highlighted_source\">\u00a0<br/>load<span class=\"st_h\">'dll'</span><br/>Fork =: <span class=\"sy0\">((</span><span class=\"st_h\">'Error'</span>\"<span class=\"nu0\">_</span><span class=\"sy0\">)</span>`<span class=\"sy0\">(</span><span class=\"st_h\">'Parent'</span>\"<span class=\"nu0\">_</span><span class=\"sy0\">)</span>`<span class=\"sy0\">)(</span>@.<span class=\"sy0\">(</span>[: &gt;: [: * <span class=\"st_h\">'/lib/x86_64-linux-gnu/libc-2.19.so __fork &gt; x'</span> cd [: i. <span class=\"nu0\">0</span>&amp;[<span class=\"sy0\">))</span></pre>"}, {"lang": "Java", "loc": 40, "block": "<pre class=\"java highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.IOException</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.InputStreamReader</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.io.BufferedReader</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Map</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> RFork <span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    ProcessBuilder pb<span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aprocess+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Process</span></a> pp<span class=\"sy0\">;</span><br/>    List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> command<span class=\"sy0\">;</span><br/>    Map<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>, String<span class=\"sy0\">&gt;</span> env<span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedReader</span></a> ir<span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> currentuser<span class=\"sy0\">;</span><br/>    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> line<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>      command <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      pb <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ProcessBuilder<span class=\"br0\">(</span>command<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      env <span class=\"sy0\">=</span> pb.<span class=\"me1\">environment</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      currentuser <span class=\"sy0\">=</span> env.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"st0\">\"USER\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      command <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span><span class=\"st0\">\"ps\"</span>, <span class=\"st0\">\"-f\"</span>, <span class=\"st0\">\"-U\"</span>, currentuser<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      pb.<span class=\"me1\">command</span><span class=\"br0\">(</span>command<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      pp <span class=\"sy0\">=</span> pb.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      ir <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedReader</span></a><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainputstreamreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InputStreamReader</span></a><span class=\"br0\">(</span>pp.<span class=\"me1\">getInputStream</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      line <span class=\"sy0\">=</span> <span class=\"st0\">\"Output of running \"</span> <span class=\"sy0\">+</span> command.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" is:\"</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>line <span class=\"sy0\">=</span> ir.<span class=\"me1\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aioexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IOException</span></a> iox<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      iox.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 26, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.51</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">InputStreamReader</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">BufferedReader</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">IOException</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pb <span class=\"sy0\">=</span> ProcessBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> currentUser <span class=\"sy0\">=</span> pb.<span class=\"me1\">environment</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"st0\">\"USER\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> command <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"st0\">\"ps\"</span>, <span class=\"st0\">\"-f\"</span>, <span class=\"st0\">\"U\"</span>, currentUser<span class=\"br0\">)</span><br/>        pb.<span class=\"me1\">command</span><span class=\"br0\">(</span>command<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> proc <span class=\"sy0\">=</span> pb.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> isr <span class=\"sy0\">=</span> InputStreamReader<span class=\"br0\">(</span>proc.<span class=\"me1\">inputStream</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> br <span class=\"sy0\">=</span> BufferedReader<span class=\"br0\">(</span>isr<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> line<span class=\"sy0\">:</span> String<span class=\"sy0\">?</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Output of running $command is:\"</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span>line<span class=\"br0\">)</span><br/>            line <span class=\"sy0\">=</span> br.<span class=\"me1\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>line <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> break<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">(</span>iox<span class=\"sy0\">:</span> IOException<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        iox.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 15, "block": "<pre class=\"text highlighted_source\">local(mydata = 'I am data one')<br/>\u00a0<br/>split_thread =&gt; {<br/>\tloop(2)\t=&gt; {<br/>\t\tsleep(2000)<br/>\t\tstdoutnl(#mydata)<br/>\t\t#mydata = 'Oh, looks like I am in a new thread'<br/>\t}<br/>}<br/>\u00a0<br/>loop(2)\t=&gt; {<br/>\tsleep(3000)<br/>\tstdoutnl(#mydata)<br/>\t#mydata = 'Aha, I am still in the original thread'<br/>}</pre>"}, {"lang": "LFE", "loc": 7, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> start <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>spawn <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>child<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> child <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>lfe_io<span class=\"sy0\">:</span><span class=\"me1\">format</span> <span class=\"st0\">\"This is the new process~n\"</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 10, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">local</span> posix <span class=\"sy0\">=</span> <span class=\"kw3\">require</span> <span class=\"st0\">'posix'</span><br/>\u00a0<br/><span class=\"kw1\">local</span> pid <span class=\"sy0\">=</span> posix<span class=\"sy0\">.</span>fork<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> pid <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"child process\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">elseif</span> pid <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"parent process\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">else</span><br/>    <span class=\"kw3\">error</span><span class=\"br0\">(</span><span class=\"st0\">\"unable to fork\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica", "loc": 5, "block": "<pre class=\"text highlighted_source\">commandstring =  First[$CommandLine] &lt;&gt; \" -noprompt -run \\\"Put[Factorial[20],ToFileName[$TemporaryDirectory,ToString[temp1]]];Quit[]\\\"\"<br/>-&gt;\"MathKernel -noprompt -run \\\"Put[Factorial[20],ToFileName[$TemporaryDirectory,ToString[temp1]]];Quit[]\\\"\"<br/>\u00a0<br/>Run[commandstring]<br/>-&gt;0</pre>"}, {"lang": "NetRexx", "loc": 28, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/>runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span><br/>    pb = ProcessBuilder<span class=\"br0\">(</span><span class=\"br0\">[</span>String <span class=\"st0\">''</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    env = pb.<span class=\"me0\">environment</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    currentuser = String env.<span class=\"me0\">get</span><span class=\"br0\">(</span><span class=\"st0\">'USER'</span><span class=\"br0\">)</span><br/>    command = Arrays.<span class=\"me0\">asList</span><span class=\"br0\">(</span><span class=\"br0\">[</span>String <span class=\"st0\">'ps'</span>, <span class=\"st0\">'-f'</span>, <span class=\"st0\">'-U'</span>, currentuser<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    pb.<span class=\"me0\">command</span><span class=\"br0\">(</span>command<span class=\"br0\">)</span><br/>    pp = pb.<span class=\"me0\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    ir = BufferedReader<span class=\"br0\">(</span>InputStreamReader<span class=\"br0\">(</span>pp.<span class=\"me0\">getInputStream</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    line = String <span class=\"st0\">'Output of running'</span> command.<span class=\"kw6\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"st0\">'is:'</span><br/>    <span class=\"kw1\">loop</span> <span class=\"kw2\">label</span> w_ until line = null<br/>      <span class=\"kw1\">say</span> line<br/>      line = ir.<span class=\"me0\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span> w_<br/>  <span class=\"kw3\">catch</span> iox = IOException<br/>    iox.<span class=\"me0\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 4, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#let\"><span class=\"kw1\">let</span></a> <span class=\"br0\">(</span>pid <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#fork\"><span class=\"kw1\">fork</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> <span class=\"st0\">\"Hello from child\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#cond\"><span class=\"kw1\">cond</span></a><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#nil%3F\"><span class=\"kw1\">nil?</span></a> pid<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#throw-error\"><span class=\"kw1\">throw-error</span></a> <span class=\"st0\">\"Unable to fork\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"re5\">'t</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#wait-pid\"><span class=\"kw1\">wait-pid</span></a> pid<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 11, "block": "<pre class=\"text highlighted_source\">import posix<br/>\u00a0<br/>var pid = fork()<br/>if pid &lt; 0:<br/>    # error forking a child<br/>elif pid &gt; 0:<br/>    # parent, and pid is process id of child<br/>else:<br/>    # child<br/>    quit()<br/># further Parent stuff here</pre>"}, {"lang": "OCaml", "loc": 6, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"sy0\">#</span>load <span class=\"st0\">\"unix.cma\"</span><span class=\"sy0\">;;</span><br/><span class=\"kw1\">let</span> pid <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>fork <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/><span class=\"kw1\">if</span> pid <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"This is the original process\"</span><br/><span class=\"kw1\">else</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"This is the new process\"</span><span class=\"sy0\">;;</span></pre>"}, {"lang": "ooRexx", "loc": 15, "block": "<pre class=\"oorexx highlighted_source\">sub=<span class=\"sy0\">.</span>fork~new<br/>sub~sub<br/><span class=\"kw1\">Call</span> syssleep <span class=\"nu0\">1</span><br/><span class=\"kw1\">Do</span> <span class=\"nu0\">3</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'program   '</span> <span class=\"kw6\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Call</span> syssleep <span class=\"nu0\">1</span><br/>  <span class=\"kw3\">End</span><br/>\u00a0<br/>::class fork<br/>:: method sub<br/><span class=\"kw1\">Reply</span> <br/><span class=\"kw1\">Do</span> <span class=\"nu0\">6</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'subroutine'</span> <span class=\"kw6\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Call</span> syssleep <span class=\"nu0\">1</span><br/>  <span class=\"kw3\">End</span></pre>"}, {"lang": "Oz", "loc": 30, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  ParentVar1 = <span class=\"st0\">\"parent data\"</span><br/>  ParentVar2<br/>\u00a0<br/>  <span class=\"kw1\">functor</span> RemoteCode<br/>  <span class=\"kw1\">export</span><br/>     result:Result<br/>  <span class=\"kw1\">import</span> QTk <span class=\"kw1\">at</span> <span class=\"st0\">'x-oz://system/wp/QTk.ozf'</span><br/>  <span class=\"kw1\">define</span><br/>     Result<br/>     <span class=\"co1\">%% Show a simple window. When it is closed by the user, set Result.</span><br/>     Window =<br/>     <span class=\"br0\">{</span>QTk<span class=\"sy0\">.</span>build<br/>      td<span class=\"br0\">(</span>action:<span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">$</span><span class=\"br0\">}</span> Result = 42 <span class=\"kw1\">end</span> <span class=\"co1\">%% on close</span><br/>         label<span class=\"br0\">(</span>text:<span class=\"st0\">\"In child process: \"</span><span class=\"sy0\">#</span>ParentVar1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"co1\">%% read parent process variable</span><br/>     <span class=\"br0\">{</span>Window show<span class=\"br0\">}</span><br/>     <span class=\"sy0\">!</span>ParentVar2 = childData <span class=\"co1\">%% write to parent process variable</span><br/>     <span class=\"br0\">{</span>Wait Result<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% create a new process on the same machine</span><br/>  RM = <span class=\"br0\">{</span>New Remote<span class=\"sy0\">.</span>manager init<span class=\"br0\">(</span>host:localhost<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"co1\">%% execute the code encapsulated in the given functor</span><br/>  RemoteModule = <span class=\"br0\">{</span>RM apply<span class=\"br0\">(</span>RemoteCode $<span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"co1\">%% retrieve data from child process</span><br/>  <span class=\"br0\">{</span>Show RemoteModule<span class=\"sy0\">.</span>result<span class=\"br0\">}</span> <span class=\"co1\">%% prints 42</span><br/>  <span class=\"co1\">%% exit child process</span><br/>  <span class=\"br0\">{</span>RM close<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Show ParentVar2<span class=\"br0\">}</span> <span class=\"co1\">%% print \"childData\"</span></pre>"}, {"lang": "PARI/GP", "loc": 8, "block": "<pre class=\"c highlighted_source\"><span class=\"kw4\">void</span><br/>foo<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pari_daemon<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    pari_printf<span class=\"br0\">(</span><span class=\"st0\">\"Original<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">else</span><br/>    pari_printf<span class=\"br0\">(</span><span class=\"st0\">\"Fork<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 25, "block": "<pre class=\"perl highlighted_source\">FORK<span class=\"sy0\">:</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$pid</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/fork.html\"><span class=\"kw3\">fork</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># parent code</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">elsif</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a><span class=\"br0\">(</span><span class=\"re0\">$pid</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    setsid<span class=\"sy0\">;</span> <span class=\"co1\"># tells apache to let go of this process and let it run solo</span><br/>    <span class=\"co1\"># disconnect ourselves from input, output, and errors</span><br/>    <a href=\"http://perldoc.perl.org/functions/close.html\"><span class=\"kw3\">close</span></a><span class=\"br0\">(</span><span class=\"kw2\">STDOUT</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/close.html\"><span class=\"kw3\">close</span></a><span class=\"br0\">(</span><span class=\"kw2\">STDIN</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/close.html\"><span class=\"kw3\">close</span></a><span class=\"br0\">(</span><span class=\"kw2\">STDERR</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>    <br/>    <span class=\"co1\"># re-open to /dev/null to prevent irrelevant warn messages.</span><br/>    <a href=\"http://perldoc.perl.org/functions/open.html\"><span class=\"kw3\">open</span></a><span class=\"br0\">(</span><span class=\"kw2\">STDOUT</span><span class=\"sy0\">,</span> <span class=\"st_h\">'&gt;/dev/null'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/open.html\"><span class=\"kw3\">open</span></a><span class=\"br0\">(</span><span class=\"kw2\">STDIN</span><span class=\"sy0\">,</span> <span class=\"st_h\">'&gt;/dev/null'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/open.html\"><span class=\"kw3\">open</span></a><span class=\"br0\">(</span><span class=\"kw2\">STDERR</span><span class=\"sy0\">,</span> <span class=\"st_h\">'&gt;&gt;/home/virtual/logs/err.log'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\"># child code</span><br/>\u00a0<br/>    <a href=\"http://perldoc.perl.org/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"sy0\">;</span> <span class=\"co1\"># important to exit</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">elsif</span><span class=\"br0\">(</span><span class=\"co5\">$!</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/emporar/</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/warn.html\"><span class=\"kw3\">warn</span></a> <span class=\"st_h\">'['</span> <span class=\"sy0\">.</span> <a href=\"http://perldoc.perl.org/functions/localtime.html\"><span class=\"kw3\">localtime</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"] Failed to Fork - Will try again in 10 seconds.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/sleep.html\"><span class=\"kw3\">sleep</span></a><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/goto.html\"><span class=\"kw3\">goto</span></a> FORK<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/warn.html\"><span class=\"kw3\">warn</span></a> <span class=\"st_h\">'['</span> <span class=\"sy0\">.</span> <a href=\"http://perldoc.perl.org/functions/localtime.html\"><span class=\"kw3\">localtime</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"] Unable to fork - $!\"</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 9, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> NativeCall<span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> fork<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">returns</span> int32 <span class=\"kw1\">is</span> native <span class=\"br0\">{</span> <span class=\"sy0\">...</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">if</span> fork<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$pid</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"I am the proud parent of $pid.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"I am a child.  Have you seen my mommy?<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 8, "block": "<pre class=\"text highlighted_source\">procedure mythread()<br/>   \u00a0?\"mythread\"<br/>    exit_thread(0)<br/>end procedure<br/>\u00a0<br/>atom hThread = create_thread(routine_id(\"mythread\"),{})<br/>?\"main carries on\"<br/>wait_thread(hThread)</pre>"}, {"lang": "PHP", "loc": 9, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$pid</span> <span class=\"sy0\">=</span> pcntl_fork<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$pid</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">echo</span> <span class=\"st0\">\"This is the new process<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$pid</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">echo</span> <span class=\"st0\">\"This is the original process<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">else</span><br/>  <span class=\"kw1\">echo</span> <span class=\"st0\">\"ERROR: Something went wrong<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 3, "block": "<pre class=\"text highlighted_source\">(unless (fork)                         # In child process<br/>   (println *Pid)                      # Print the child's PID<br/>   (bye) )                             # and terminate</pre>"}, {"lang": "PL/I", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>ATTACH SOLVE (X) THREAD (T5);<br/>\u00a0</pre>"}, {"lang": "Pop11", "loc": 7, "block": "<pre class=\"text highlighted_source\">lvars ress;<br/>if sys_fork(false) -&gt;&gt; ress then<br/>  \u00a0;;; parent<br/>   printf(ress, 'Child pid =\u00a0%p\\n');<br/>else<br/>   printf('In child\\n');<br/>endif;</pre>"}, {"lang": "Python", "loc": 7, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">os</span><br/>\u00a0<br/>pid <span class=\"sy0\">=</span> <span class=\"kw3\">os</span>.<span class=\"me1\">fork</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> pid <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span>:<br/> <span class=\"co1\"># parent code</span><br/><span class=\"kw1\">else</span>:<br/> <span class=\"co1\"># child code</span></pre>"}, {"lang": "Racket", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define-values [P _out _in _err]<br/>  (subprocess (current-output-port) (current-input-port) (current-error-port)<br/>              (find-executable-path \"du\") \"-hs\" \"/usr/share\"))<br/>;; wait for process to end, print messages as long as it runs<br/>(let loop () (unless (sync/timeout 10 P) (printf \"Still running...\\n\") (loop)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 1, "block": "<pre class=\"rexx highlighted_source\">child = fork<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ruby", "loc": 6, "block": "<pre class=\"ruby highlighted_source\">pid = <span class=\"kw3\">fork</span><br/><span class=\"kw1\">if</span> pid<br/> <span class=\"co1\"># parent code</span><br/><span class=\"kw1\">else</span><br/> <span class=\"co1\"># child code</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 7, "block": "<pre class=\"text highlighted_source\">run \"someProgram.bas\",#handle<br/>render #handle     ' this runs the program until it waits<br/>                   ' both the parent and child are running<br/>' --------------------------------------------------------<br/>' You can also call a function in the someProgram.bas program.<br/>' For example if it had a DisplayBanner Funciton.<br/>#handle DisplayBanner(\"Welcome!\")</pre>"}, {"lang": "Scala", "loc": 16, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">IOException</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Fork <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> builder<span class=\"sy0\">:</span> ProcessBuilder <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> ProcessBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> currentUser<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> builder.<span class=\"me1\">environment</span>.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"st0\">\"USER\"</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> command<span class=\"sy0\">:</span> java.<span class=\"me1\">util</span>.<span class=\"me1\">List</span><span class=\"br0\">[</span>String<span class=\"br0\">]</span> <span class=\"sy0\">=</span> java.<span class=\"me1\">util</span>.<span class=\"me1\">Arrays</span>.<span class=\"me1\">asList</span><span class=\"br0\">(</span><span class=\"st0\">\"ps\"</span>, <span class=\"st0\">\"-f\"</span>, <span class=\"st0\">\"-U\"</span>, currentUser<span class=\"br0\">)</span><br/>  builder.<span class=\"me1\">command</span><span class=\"br0\">(</span>command<span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lines <span class=\"sy0\">=</span> scala.<span class=\"me1\">io</span>.<span class=\"me1\">Source</span>.<span class=\"me1\">fromInputStream</span><span class=\"br0\">(</span>builder.<span class=\"me1\">start</span>.<span class=\"me1\">getInputStream</span><span class=\"br0\">)</span>.<span class=\"me1\">getLines</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>s<span class=\"st0\">\"Output of running $command is:\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>lines.<span class=\"me1\">hasNext</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span>lines.<span class=\"me1\">next</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> iox<span class=\"sy0\">:</span> IOException <span class=\"sy0\">=&gt;</span> iox.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">var x = <span class=\"nu0\">42</span>;<br/><span class=\"br0\">{</span> x <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span>; say x <span class=\"br0\">}</span>.<span class=\"kw3\">fork</span>.<span class=\"me1\">wait</span>;     <span class=\"co1\"># x is 43 here</span><br/>say x;                           <span class=\"co1\"># but here is still 42</span></pre>"}, {"lang": "Slate", "loc": 6, "block": "<pre class=\"text highlighted_source\"><a class=\"__cf_email__\" data-cfemail=\"681828\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Process traits) forkAndDo: b<br/>[| ret |<br/>  (ret\u00a0:= lobby cloneSystem)<br/>    first ifTrue: [p pipes addLast: ret second. ret second]<br/>           ifFalse: [[p pipes clear. p pipes addLast: ret second. b applyWith: ret second] ensure: [lobby quit]]<br/>].</pre>"}, {"lang": "Smalltalk", "loc": 10, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"st0\">'Here I am'</span> displayNl.<br/>|<span class=\"re3\">a</span>|<br/><span class=\"re6\">a</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><br/>  <span class=\"br0\">(</span><span class=\"re0\">Delay</span> forSeconds: <span class=\"re5\">2</span><span class=\"br0\">)</span> wait . <br/>  <span class=\"re5\">1</span> to: <span class=\"re5\">100</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">i</span> | i displayNl <span class=\"br0\">]</span><br/><span class=\"br0\">]</span> fork.<br/><span class=\"st0\">'Child will start after 2 seconds'</span> displayNl.<br/><span class=\"coMULTI\">\"wait to avoid terminating first the parent;<br/> a better way should use semaphores\"</span><br/><span class=\"br0\">(</span><span class=\"re0\">Delay</span> forSeconds: <span class=\"re5\">10</span><span class=\"br0\">)</span> wait.</pre>"}, {"lang": "Standard ML", "loc": 3, "block": "<pre class=\"text highlighted_source\">case Posix.Process.fork () of<br/>   SOME pid =&gt; print \"This is the original process\\n\"<br/> | NONE     =&gt; print \"This is the new process\\n\";</pre>"}, {"lang": "Tcl", "loc": 19, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Expect<br/><span class=\"co1\"># or</span><br/><span class=\"kw2\">package</span> require Tclx<br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">100</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> <span class=\"kw2\">pid</span> <span class=\"br0\">[</span>fork<span class=\"br0\">]</span><br/>    <span class=\"kw1\">switch</span> <span class=\"re0\">$pid</span> <span class=\"br0\">{</span><br/>        -<span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">puts</span> <span class=\"st0\">\"Fork attempt #$i failed.\"</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"nu0\">0</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">puts</span> <span class=\"st0\">\"I am child process #$i.\"</span><br/>            <span class=\"kw1\">exit</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">default</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">puts</span> <span class=\"st0\">\"The parent just spawned child process #$i.\"</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Toka", "loc": 3, "block": "<pre class=\"text highlighted_source\">needs shell<br/>getpid is-data PID<br/>[ fork getpid PID = [ .\" Child PID: \" . cr ] [ .\" In child\\n\" ] ifTrueFalse ] invoke</pre>"}, {"lang": "UNIX Shell", "loc": 11, "block": "<pre class=\"bash highlighted_source\"><span class=\"re2\">i</span>=<span class=\"nu0\">0</span><br/><span class=\"br0\">(</span><span class=\"kw1\">while</span> <span class=\"kw3\">test</span> <span class=\"re1\">$i</span> <span class=\"re5\">-lt</span> <span class=\"nu0\">10</span>; <span class=\"kw1\">do</span><br/>  <span class=\"kw2\">sleep</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw3\">echo</span> <span class=\"st0\">\"Child process\"</span><br/>  <span class=\"re2\">i</span>=<span class=\"sy0\">`</span><span class=\"kw2\">expr</span> <span class=\"re1\">$i</span> + <span class=\"nu0\">1</span><span class=\"sy0\">`</span><br/><span class=\"kw1\">done</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span><br/><span class=\"kw1\">while</span> <span class=\"kw3\">test</span> <span class=\"re1\">$i</span> <span class=\"re5\">-lt</span> <span class=\"nu0\">5</span>; <span class=\"kw1\">do</span><br/>  <span class=\"kw2\">sleep</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw3\">echo</span> <span class=\"st0\">\"Parent process\"</span><br/>  <span class=\"re2\">i</span>=<span class=\"sy0\">`</span><span class=\"kw2\">expr</span> <span class=\"re1\">$i</span> + <span class=\"nu0\">1</span><span class=\"sy0\">`</span><br/><span class=\"kw1\">done</span></pre>"}, {"lang": "UnixPipes", "loc": 1, "block": "<pre class=\"bash highlighted_source\"><span class=\"br0\">(</span><span class=\"kw3\">echo</span> <span class=\"st0\">\"Process 1\"</span> <span class=\"sy0\">&gt;&amp;</span><span class=\"nu0\">2</span>\u00a0;<span class=\"kw2\">sleep</span> <span class=\"nu0\">5</span>; <span class=\"kw3\">echo</span> <span class=\"st0\">\"1 done\"</span> <span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"kw3\">echo</span> <span class=\"st0\">\"Process 2\"</span>;<span class=\"kw2\">cat</span>;<span class=\"kw3\">echo</span> <span class=\"st0\">\"2 done\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Wart", "loc": 3, "block": "<pre class=\"text highlighted_source\">do (fork sleep.1<br/>         prn.1)<br/>   prn.2</pre>"}, {"lang": "X86 Assembly", "loc": 73, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>; x86_64 linux nasm<br/>\u00a0<br/>%include \"/home/james/Desktop/ASM_LIB/Print.asm\"<br/>%include \"/home/james/Desktop/ASM_LIB/Sleep.asm\"<br/>\u00a0<br/>section .data<br/>\u00a0<br/>parent: db \"Parent: \"<br/>child: db \"Child: \"<br/>newLine: db 10<br/>\u00a0<br/>section .text<br/>\u00a0<br/>global _start<br/>\u00a0<br/>_start:<br/>  mov rax, 57\u00a0; fork syscall<br/>  syscall<br/>  cmp rax, 0\u00a0; if the return value is 0, we're in the child process<br/>  je printChild<br/>\u00a0<br/>  printParent:\u00a0; else it's the child's PID, we're in the parent<br/>\u00a0<br/>    mov rax, 1<br/>    mov rdi, 1<br/>    mov rsi, parent<br/>    mov rdx, 8<br/>    syscall<br/>\u00a0<br/>    mov rax, 39\u00a0; sys_getpid<br/>    syscall<br/>    mov rdi, rax<br/>    call Print_Unsigned<br/>\u00a0<br/>    mov rax, 1<br/>    mov rdi, 1<br/>    mov rsi, newLine<br/>    mov rdx, 1<br/>    syscall<br/>\u00a0<br/>    mov rdi, 1\u00a0; sleep so the child process can print befor the parent exits<br/>    call Sleep\u00a0; you might not see the child output if you don't do this<br/>\u00a0<br/>    jmp exit <br/>\u00a0<br/>  printChild:<br/>\u00a0<br/>    mov rdi, 1<br/>    call Sleep\u00a0; sleep and wait for parent to print to screen first<br/>\u00a0<br/>    mov rax, 1<br/>    mov rdi, 1<br/>    mov rsi, child<br/>    mov rdx, 7<br/>    syscall<br/>\u00a0<br/>    mov rax, 39\u00a0; sys_getpid<br/>    syscall<br/>    mov rdi, rax<br/>    call Print_Unsigned<br/>\u00a0<br/>    mov rax, 1<br/>    mov rdi, 1<br/>    mov rsi, newLine<br/>    mov rdx, 1<br/>    syscall<br/>\u00a0<br/>  exit:<br/>    mov rax, 60<br/>    mov rdi, 0<br/>    syscall<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">zkl: System.cmd(\"ls &amp;\")</pre>"}]}